# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    from .. import models as _models


class CreateLandingZoneConfigurationCopyRequest(_model_base.Model):  # pylint: disable=name-too-long
    """The request for create duplicate landing zone configuration.

    :ivar name: The name of the duplicate landing zone configuration resource. Required.
    :vartype name: str
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the duplicate landing zone configuration resource. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CreateLandingZoneConfigurationCopyResponse(_model_base.Model):  # pylint: disable=name-too-long
    """The response of the create duplicate landing zone configuration.

    :ivar copied_landing_zone_configuration_id: The ID of the duplicate landing zone configuration
     resource. Required.
    :vartype copied_landing_zone_configuration_id: str
    """

    copied_landing_zone_configuration_id: str = rest_field(
        name="copiedLandingZoneConfigurationId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The ID of the duplicate landing zone configuration resource. Required."""

    @overload
    def __init__(
        self,
        *,
        copied_landing_zone_configuration_id: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CustomNamingConvention(_model_base.Model):
    """The details for the custom naming convention override for a specific resource type.

    :ivar resource_type: The type of the resource. Required. Known values are: "azureFirewalls",
     "workspaces", "automationAccounts", "dashboards", "userAssignedIdentities", "bastionHosts",
     "ddosProtectionPlans", "networkSecurityGroups", "virtualNetworks", and "routeTables".
    :vartype resource_type: str or ~azure.mgmt.regulatedenvironmentmanagement.models.ResourceType
    :ivar formula: The custom naming formula for the resource type. Required.
    :vartype formula: str
    """

    resource_type: Union[str, "_models.ResourceType"] = rest_field(
        name="resourceType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of the resource. Required. Known values are: \"azureFirewalls\", \"workspaces\",
     \"automationAccounts\", \"dashboards\", \"userAssignedIdentities\", \"bastionHosts\",
     \"ddosProtectionPlans\", \"networkSecurityGroups\", \"virtualNetworks\", and \"routeTables\"."""
    formula: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The custom naming formula for the resource type. Required."""

    @overload
    def __init__(
        self,
        *,
        resource_type: Union[str, "_models.ResourceType"],
        formula: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DecommissionedManagementGroupProperties(_model_base.Model):
    """The 'Decommissioned' management group properties.

    :ivar policy_initiatives_assignment_properties: Array of policy initiatives applied to the
     management group. Required.
    :vartype policy_initiatives_assignment_properties:
     list[~azure.mgmt.regulatedenvironmentmanagement.models.PolicyInitiativeAssignmentProperties]
    :ivar create: This parameter determines whether the 'Decommissioned' management group will be
     created. If set to true, the group will be created; if set to false, it will not be created.
     The default value is false. Required.
    :vartype create: bool
    """

    policy_initiatives_assignment_properties: List["_models.PolicyInitiativeAssignmentProperties"] = rest_field(
        name="policyInitiativesAssignmentProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Array of policy initiatives applied to the management group. Required."""
    create: bool = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """This parameter determines whether the 'Decommissioned' management group will be created. If set
     to true, the group will be created; if set to false, it will not be created. The default value
     is false. Required."""

    @overload
    def __init__(
        self,
        *,
        policy_initiatives_assignment_properties: List["_models.PolicyInitiativeAssignmentProperties"],
        create: bool,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_model_base.Model):
    """The resource management error additional info.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_model_base.Model):
    """The error detail.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.regulatedenvironmentmanagement.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info:
     list[~azure.mgmt.regulatedenvironmentmanagement.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_model_base.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.regulatedenvironmentmanagement.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GenerateLandingZoneRequest(_model_base.Model):
    """The request to generate Infrastructure as Code (IaC) for a landing zone.

    :ivar infrastructure_as_code_output_options: The export options available for code generation.
     Required. Known values are: "Bicep" and "ARM".
    :vartype infrastructure_as_code_output_options: str or
     ~azure.mgmt.regulatedenvironmentmanagement.models.InfrastructureAsCodeOutputOptions
    :ivar existing_management_subscription_id: Existing 'Management' subscription ID to be linked
     with this deployment when reusing instead of creating a new subscription.
    :vartype existing_management_subscription_id: str
    :ivar existing_identity_subscription_id: Existing 'Identity' subscription ID to be linked with
     this deployment when reusing instead of creating a new subscription.
    :vartype existing_identity_subscription_id: str
    :ivar existing_connectivity_subscription_id: Existing 'Connectivity' subscription ID to be
     linked with this deployment when reusing instead of creating a new subscription.
    :vartype existing_connectivity_subscription_id: str
    :ivar subscription_billing_scope: The complete resource ID of the billing scope linked to the
     EA, MCA, or MPA account where you want to create the subscription.
    :vartype subscription_billing_scope: str
    :ivar existing_top_level_mg_parent_id: Optional parent for the management group hierarchy,
     serving as an intermediate root management group parent if specified. If left empty, the
     default will be to deploy under the tenant root management group.
    :vartype existing_top_level_mg_parent_id: str
    :ivar deployment_prefix: The prefix that will be added to all resources created by this
     deployment. Use between 2 and 5 characters, consisting only of letters, digits, '-', '.', or
     '_'. No other special characters are supported. Required.
    :vartype deployment_prefix: str
    :ivar deployment_suffix: The optional suffix that will be appended to all resources created by
     this deployment, maximum 5 characters.
    :vartype deployment_suffix: str
    :ivar top_level_mg_display_name: The display name assigned to the top management group of the
     landing zone deployment hierarchy. It is recommended to use unique names for each landing zone
     deployment. Required.
    :vartype top_level_mg_display_name: str
    :ivar deployment_location: The Azure region where the landing zone will be deployed. All Azure
     regions are supported. Required.
    :vartype deployment_location: str
    :ivar organization: The name of the organization or agency for which the landing zone is being
     deployed. This is optional.
    :vartype organization: str
    :ivar environment: The environment where the landing zone is being deployed, such as ppe, prod,
     test, etc.
    :vartype environment: str
    """

    infrastructure_as_code_output_options: Union[str, "_models.InfrastructureAsCodeOutputOptions"] = rest_field(
        name="infrastructureAsCodeOutputOptions", visibility=["read", "create", "update", "delete", "query"]
    )
    """The export options available for code generation. Required. Known values are: \"Bicep\" and
     \"ARM\"."""
    existing_management_subscription_id: Optional[str] = rest_field(
        name="existingManagementSubscriptionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Existing 'Management' subscription ID to be linked with this deployment when reusing instead of
     creating a new subscription."""
    existing_identity_subscription_id: Optional[str] = rest_field(
        name="existingIdentitySubscriptionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Existing 'Identity' subscription ID to be linked with this deployment when reusing instead of
     creating a new subscription."""
    existing_connectivity_subscription_id: Optional[str] = rest_field(
        name="existingConnectivitySubscriptionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Existing 'Connectivity' subscription ID to be linked with this deployment when reusing instead
     of creating a new subscription."""
    subscription_billing_scope: Optional[str] = rest_field(
        name="subscriptionBillingScope", visibility=["read", "create", "update", "delete", "query"]
    )
    """The complete resource ID of the billing scope linked to the EA, MCA, or MPA account where you
     want to create the subscription."""
    existing_top_level_mg_parent_id: Optional[str] = rest_field(
        name="existingTopLevelMgParentId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Optional parent for the management group hierarchy, serving as an intermediate root management
     group parent if specified. If left empty, the default will be to deploy under the tenant root
     management group."""
    deployment_prefix: str = rest_field(
        name="deploymentPrefix", visibility=["read", "create", "update", "delete", "query"]
    )
    """The prefix that will be added to all resources created by this deployment. Use between 2 and 5
     characters, consisting only of letters, digits, '-', '.', or '_'. No other special characters
     are supported. Required."""
    deployment_suffix: Optional[str] = rest_field(
        name="deploymentSuffix", visibility=["read", "create", "update", "delete", "query"]
    )
    """The optional suffix that will be appended to all resources created by this deployment, maximum
     5 characters."""
    top_level_mg_display_name: str = rest_field(
        name="topLevelMgDisplayName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The display name assigned to the top management group of the landing zone deployment hierarchy.
     It is recommended to use unique names for each landing zone deployment. Required."""
    deployment_location: str = rest_field(
        name="deploymentLocation", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Azure region where the landing zone will be deployed. All Azure regions are supported.
     Required."""
    organization: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the organization or agency for which the landing zone is being deployed. This is
     optional."""
    environment: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The environment where the landing zone is being deployed, such as ppe, prod, test, etc."""

    @overload
    def __init__(
        self,
        *,
        infrastructure_as_code_output_options: Union[str, "_models.InfrastructureAsCodeOutputOptions"],
        deployment_prefix: str,
        top_level_mg_display_name: str,
        deployment_location: str,
        existing_management_subscription_id: Optional[str] = None,
        existing_identity_subscription_id: Optional[str] = None,
        existing_connectivity_subscription_id: Optional[str] = None,
        subscription_billing_scope: Optional[str] = None,
        existing_top_level_mg_parent_id: Optional[str] = None,
        deployment_suffix: Optional[str] = None,
        organization: Optional[str] = None,
        environment: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class GenerateLandingZoneResponse(_model_base.Model):
    """The response payload for generating infrastructure-as-code for the landing zone.

    :ivar top_level_mg_display_name: The parent management group name of the landing zone
     deployment. Required.
    :vartype top_level_mg_display_name: str
    :ivar landing_zone_configuration_name: The name of the Landing zone configuration resource.
     Required.
    :vartype landing_zone_configuration_name: str
    :ivar generated_code_url: The url to access the generated code. Required.
    :vartype generated_code_url: str
    :ivar storage_account_name: The storage account name to access the generated code. Required.
    :vartype storage_account_name: str
    :ivar container_name: The storage account container to access the generated code. Required.
    :vartype container_name: str
    :ivar blob_name: The storage account blob name to access the generated code. Required.
    :vartype blob_name: str
    :ivar generated_arm_template: The generated code content in JSON string format.
    :vartype generated_arm_template: str
    """

    top_level_mg_display_name: str = rest_field(
        name="topLevelMgDisplayName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The parent management group name of the landing zone deployment. Required."""
    landing_zone_configuration_name: str = rest_field(
        name="landingZoneConfigurationName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The name of the Landing zone configuration resource. Required."""
    generated_code_url: str = rest_field(
        name="generatedCodeUrl", visibility=["read", "create", "update", "delete", "query"]
    )
    """The url to access the generated code. Required."""
    storage_account_name: str = rest_field(
        name="storageAccountName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The storage account name to access the generated code. Required."""
    container_name: str = rest_field(name="containerName", visibility=["read", "create", "update", "delete", "query"])
    """The storage account container to access the generated code. Required."""
    blob_name: str = rest_field(name="blobName", visibility=["read", "create", "update", "delete", "query"])
    """The storage account blob name to access the generated code. Required."""
    generated_arm_template: Optional[str] = rest_field(
        name="generatedArmTemplate", visibility=["read", "create", "update", "delete", "query"]
    )
    """The generated code content in JSON string format."""

    @overload
    def __init__(
        self,
        *,
        top_level_mg_display_name: str,
        landing_zone_configuration_name: str,
        generated_code_url: str,
        storage_account_name: str,
        container_name: str,
        blob_name: str,
        generated_arm_template: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Resource(_model_base.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.regulatedenvironmentmanagement.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.regulatedenvironmentmanagement.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LandingZoneAccountResource(TrackedResource):
    """The Landing zone account resource type. A Landing zone account is the container for
    configuring, deploying and managing multiple landing zones.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.regulatedenvironmentmanagement.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties:
     ~azure.mgmt.regulatedenvironmentmanagement.models.LandingZoneAccountResourceProperties
    :ivar identity: The managed service identities assigned to this resource.
    :vartype identity: ~azure.mgmt.regulatedenvironmentmanagement.models.ManagedServiceIdentity
    """

    properties: Optional["_models.LandingZoneAccountResourceProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""
    identity: Optional["_models.ManagedServiceIdentity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The managed service identities assigned to this resource."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.LandingZoneAccountResourceProperties"] = None,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LandingZoneAccountResourceProperties(_model_base.Model):
    """The properties of landing zone account resource type.

    :ivar provisioning_state: The state that reflects the current stage in the creation, updating,
     or deletion process of the landing zone account. Known values are: "Succeeded", "Failed",
     "Canceled", "Creating", "Updating", and "Deleting".
    :vartype provisioning_state: str or
     ~azure.mgmt.regulatedenvironmentmanagement.models.ProvisioningState
    :ivar storage_account: The storage account that will host the generated infrastructure as code
     (IaC) for a landing zone deployment. Required.
    :vartype storage_account: str
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The state that reflects the current stage in the creation, updating, or deletion process of the
     landing zone account. Known values are: \"Succeeded\", \"Failed\", \"Canceled\", \"Creating\",
     \"Updating\", and \"Deleting\"."""
    storage_account: str = rest_field(name="storageAccount", visibility=["read", "create", "update", "delete", "query"])
    """The storage account that will host the generated infrastructure as code (IaC) for a landing
     zone deployment. Required."""

    @overload
    def __init__(
        self,
        *,
        storage_account: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.regulatedenvironmentmanagement.models.SystemData
    """


class LandingZoneConfigurationResource(ProxyResource):
    """Concrete proxy resource types can be created by aliasing this type using a specific property
    type.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.regulatedenvironmentmanagement.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties:
     ~azure.mgmt.regulatedenvironmentmanagement.models.LandingZoneConfigurationResourceProperties
    """

    properties: Optional["_models.LandingZoneConfigurationResourceProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.LandingZoneConfigurationResourceProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LandingZoneConfigurationResourceProperties(_model_base.Model):  # pylint: disable=name-too-long
    """The properties of landing zone configuration resource type.

    :ivar provisioning_state: The state that reflects the current stage in the creation, updating,
     or deletion process of the landing zone configuration. Known values are: "Succeeded", "Failed",
     "Canceled", "Creating", "Updating", and "Deleting".
    :vartype provisioning_state: str or
     ~azure.mgmt.regulatedenvironmentmanagement.models.ProvisioningState
    :ivar authoring_status: The status that indicates the current phase of the configuration
     process for a deployment. Known values are: "Authoring", "ReadyForUse", and "Disabled".
    :vartype authoring_status: str or
     ~azure.mgmt.regulatedenvironmentmanagement.models.AuthoringStatus
    :ivar ddos_protection_creation_option: Parameter used to deploy a DDoS protection plan: Select
     'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an existing DDoS protection
     plan. Required. Known values are: "Yes", "No", and "UseExisting".
    :vartype ddos_protection_creation_option: str or
     ~azure.mgmt.regulatedenvironmentmanagement.models.ResourceCreationOptions
    :ivar existing_ddos_protection_id: The resource ID of the DDoS protection plan when reusing an
     existing one.
    :vartype existing_ddos_protection_id: str
    :ivar log_analytics_workspace_creation_option: Parameter used to deploy a log analytics
     workspace: Select 'Yes' to enable deployment, 'No' to skip it, or 'Existing' to reuse an
     existing log analytics workspace. Required. Known values are: "Yes", "No", and "UseExisting".
    :vartype log_analytics_workspace_creation_option: str or
     ~azure.mgmt.regulatedenvironmentmanagement.models.ResourceCreationOptions
    :ivar existing_log_analytics_workspace_id: The resource ID of the log analytics workspace when
     reusing an existing one.
    :vartype existing_log_analytics_workspace_id: str
    :ivar tags: Tags are key-value pairs that can be assigned to a resource to organize and manage
     it more effectively. Example: {'name': 'a tag name', 'value': 'a tag value'}.
    :vartype tags: list[~azure.mgmt.regulatedenvironmentmanagement.models.Tags]
    :ivar firewall_creation_option: Parameter used for deploying a Firewall: Select 'No' to skip
     deployment, 'Standard' to deploy the Standard SKU, or 'Premium' to deploy the Premium SKU.
     Required. Known values are: "None", "Standard", and "Premium".
    :vartype firewall_creation_option: str or
     ~azure.mgmt.regulatedenvironmentmanagement.models.FirewallCreationOptions
    :ivar firewall_subnet_cidr_block: The Firewall subnet address used for deploying a firewall.
     Specify the Firewall subnet using IPv4 CIDR notation.
    :vartype firewall_subnet_cidr_block: str
    :ivar gateway_subnet_cidr_block: The gateway subnet address used for deploying a virtual
     network. Specify the subnet using IPv4 CIDR notation. Required.
    :vartype gateway_subnet_cidr_block: str
    :ivar log_retention_in_days: Parameter to define the retention period for logs, in days. The
     minimum duration is 30 days and the maximum is 730 days. Required.
    :vartype log_retention_in_days: int
    :ivar hub_network_cidr_block: The Virtual Network address. Specify the address using IPv4 CIDR
     notation. Required.
    :vartype hub_network_cidr_block: str
    :ivar azure_bastion_creation_option: Parameter used to deploy a Bastion: Select 'Yes' to enable
     deployment, 'No' to skip it, or 'Existing' to reuse an existing Bastion. Required. Known values
     are: "Yes", "No", and "UseExisting".
    :vartype azure_bastion_creation_option: str or
     ~azure.mgmt.regulatedenvironmentmanagement.models.ResourceCreationOptions
    :ivar existing_azure_bastion_id: The resource ID of the Bastion when reusing an existing one.
    :vartype existing_azure_bastion_id: str
    :ivar azure_bastion_subnet_cidr_block: The Bastion subnet address. Specify the address using
     IPv4 CIDR notation.
    :vartype azure_bastion_subnet_cidr_block: str
    :ivar landing_zones_mg_children: The child management groups of 'Landing Zones' management
     group and their assigned policies.
    :vartype landing_zones_mg_children:
     list[~azure.mgmt.regulatedenvironmentmanagement.models.LandingZoneManagementGroupProperties]
    :ivar top_level_mg_metadata: The assigned policies of the parent management group.
    :vartype top_level_mg_metadata:
     ~azure.mgmt.regulatedenvironmentmanagement.models.ManagementGroupProperties
    :ivar landing_zones_mg_metadata: The assigned policies of the 'Landing Zones' management group.
    :vartype landing_zones_mg_metadata:
     ~azure.mgmt.regulatedenvironmentmanagement.models.ManagementGroupProperties
    :ivar platform_mg_metadata: The assigned policies of the 'Platform' management group.
    :vartype platform_mg_metadata:
     ~azure.mgmt.regulatedenvironmentmanagement.models.ManagementGroupProperties
    :ivar platform_management_mg_metadata: The assigned policies of the 'Management' management
     group under 'Platform' management group.
    :vartype platform_management_mg_metadata:
     ~azure.mgmt.regulatedenvironmentmanagement.models.ManagementGroupProperties
    :ivar platform_connectivity_mg_metadata: The assigned policies of the 'Connectivity' management
     group under 'Platform' management group.
    :vartype platform_connectivity_mg_metadata:
     ~azure.mgmt.regulatedenvironmentmanagement.models.ManagementGroupProperties
    :ivar platform_identity_mg_metadata: The assigned policies of the 'Identity' management group
     under 'Platform' management group.
    :vartype platform_identity_mg_metadata:
     ~azure.mgmt.regulatedenvironmentmanagement.models.ManagementGroupProperties
    :ivar decommissioned_mg_metadata: The assigned policies of the 'Decommissioned' management
     group and indicator to create it or not.
    :vartype decommissioned_mg_metadata:
     ~azure.mgmt.regulatedenvironmentmanagement.models.DecommissionedManagementGroupProperties
    :ivar sandbox_mg_metadata: The assigned policies of the 'Sandbox' management group and
     indicator to create it or not.
    :vartype sandbox_mg_metadata:
     ~azure.mgmt.regulatedenvironmentmanagement.models.SandboxManagementGroupProperties
    :ivar managed_identity: The managed identity to be assigned to this landing zone configuration.
     Required.
    :vartype managed_identity:
     ~azure.mgmt.regulatedenvironmentmanagement.models.ManagedIdentityProperties
    :ivar platform_mg_children: The names of the 'Platform' child management groups and their
     assigned policies, excluding the default ones: 'Connectivity', 'Identity', and 'Management'.
    :vartype platform_mg_children:
     list[~azure.mgmt.regulatedenvironmentmanagement.models.PlatformManagementGroupProperties]
    :ivar naming_convention_formula: The default naming convention applied to all resources for
     this landing zone configuration. Example -
     {DeploymentPrefix}-Contoso-{ResourceTypeAbbreviation}{DeploymentSuffix}-{Environment}-testing.
    :vartype naming_convention_formula: str
    :ivar custom_naming_convention: The custom naming convention applied to specific resource types
     for this landing zone configuration, which overrides the default naming convention for those
     resource types. Example - 'customNamingConvention': [{'resourceType': 'azureFirewalls',
     'formula': '{DeploymentPrefix}-afwl-{DeploymentSuffix}'}].
    :vartype custom_naming_convention:
     list[~azure.mgmt.regulatedenvironmentmanagement.models.CustomNamingConvention]
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The state that reflects the current stage in the creation, updating, or deletion process of the
     landing zone configuration. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Creating\", \"Updating\", and \"Deleting\"."""
    authoring_status: Optional[Union[str, "_models.AuthoringStatus"]] = rest_field(
        name="authoringStatus", visibility=["read"]
    )
    """The status that indicates the current phase of the configuration process for a deployment.
     Known values are: \"Authoring\", \"ReadyForUse\", and \"Disabled\"."""
    ddos_protection_creation_option: Union[str, "_models.ResourceCreationOptions"] = rest_field(
        name="ddosProtectionCreationOption", visibility=["read", "create", "update", "delete", "query"]
    )
    """Parameter used to deploy a DDoS protection plan: Select 'Yes' to enable deployment, 'No' to
     skip it, or 'Existing' to reuse an existing DDoS protection plan. Required. Known values are:
     \"Yes\", \"No\", and \"UseExisting\"."""
    existing_ddos_protection_id: Optional[str] = rest_field(
        name="existingDdosProtectionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource ID of the DDoS protection plan when reusing an existing one."""
    log_analytics_workspace_creation_option: Union[str, "_models.ResourceCreationOptions"] = rest_field(
        name="logAnalyticsWorkspaceCreationOption", visibility=["read", "create", "update", "delete", "query"]
    )
    """Parameter used to deploy a log analytics workspace: Select 'Yes' to enable deployment, 'No' to
     skip it, or 'Existing' to reuse an existing log analytics workspace. Required. Known values
     are: \"Yes\", \"No\", and \"UseExisting\"."""
    existing_log_analytics_workspace_id: Optional[str] = rest_field(
        name="existingLogAnalyticsWorkspaceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource ID of the log analytics workspace when reusing an existing one."""
    tags: Optional[List["_models.Tags"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Tags are key-value pairs that can be assigned to a resource to organize and manage it more
     effectively. Example: {'name': 'a tag name', 'value': 'a tag value'}."""
    firewall_creation_option: Union[str, "_models.FirewallCreationOptions"] = rest_field(
        name="firewallCreationOption", visibility=["read", "create", "update", "delete", "query"]
    )
    """Parameter used for deploying a Firewall: Select 'No' to skip deployment, 'Standard' to deploy
     the Standard SKU, or 'Premium' to deploy the Premium SKU. Required. Known values are: \"None\",
     \"Standard\", and \"Premium\"."""
    firewall_subnet_cidr_block: Optional[str] = rest_field(
        name="firewallSubnetCidrBlock", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Firewall subnet address used for deploying a firewall. Specify the Firewall subnet using
     IPv4 CIDR notation."""
    gateway_subnet_cidr_block: str = rest_field(
        name="gatewaySubnetCidrBlock", visibility=["read", "create", "update", "delete", "query"]
    )
    """The gateway subnet address used for deploying a virtual network. Specify the subnet using IPv4
     CIDR notation. Required."""
    log_retention_in_days: int = rest_field(
        name="logRetentionInDays", visibility=["read", "create", "update", "delete", "query"]
    )
    """Parameter to define the retention period for logs, in days. The minimum duration is 30 days and
     the maximum is 730 days. Required."""
    hub_network_cidr_block: str = rest_field(
        name="hubNetworkCidrBlock", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Virtual Network address. Specify the address using IPv4 CIDR notation. Required."""
    azure_bastion_creation_option: Union[str, "_models.ResourceCreationOptions"] = rest_field(
        name="azureBastionCreationOption", visibility=["read", "create", "update", "delete", "query"]
    )
    """Parameter used to deploy a Bastion: Select 'Yes' to enable deployment, 'No' to skip it, or
     'Existing' to reuse an existing Bastion. Required. Known values are: \"Yes\", \"No\", and
     \"UseExisting\"."""
    existing_azure_bastion_id: Optional[str] = rest_field(
        name="existingAzureBastionId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource ID of the Bastion when reusing an existing one."""
    azure_bastion_subnet_cidr_block: Optional[str] = rest_field(
        name="azureBastionSubnetCidrBlock", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Bastion subnet address. Specify the address using IPv4 CIDR notation."""
    landing_zones_mg_children: Optional[List["_models.LandingZoneManagementGroupProperties"]] = rest_field(
        name="landingZonesMgChildren", visibility=["read", "create", "update", "delete", "query"]
    )
    """The child management groups of 'Landing Zones' management group and their assigned policies."""
    top_level_mg_metadata: Optional["_models.ManagementGroupProperties"] = rest_field(
        name="topLevelMgMetadata", visibility=["read", "create", "update", "delete", "query"]
    )
    """The assigned policies of the parent management group."""
    landing_zones_mg_metadata: Optional["_models.ManagementGroupProperties"] = rest_field(
        name="landingZonesMgMetadata", visibility=["read", "create", "update", "delete", "query"]
    )
    """The assigned policies of the 'Landing Zones' management group."""
    platform_mg_metadata: Optional["_models.ManagementGroupProperties"] = rest_field(
        name="platformMgMetadata", visibility=["read", "create", "update", "delete", "query"]
    )
    """The assigned policies of the 'Platform' management group."""
    platform_management_mg_metadata: Optional["_models.ManagementGroupProperties"] = rest_field(
        name="platformManagementMgMetadata", visibility=["read", "create", "update", "delete", "query"]
    )
    """The assigned policies of the 'Management' management group under 'Platform' management group."""
    platform_connectivity_mg_metadata: Optional["_models.ManagementGroupProperties"] = rest_field(
        name="platformConnectivityMgMetadata", visibility=["read", "create", "update", "delete", "query"]
    )
    """The assigned policies of the 'Connectivity' management group under 'Platform' management group."""
    platform_identity_mg_metadata: Optional["_models.ManagementGroupProperties"] = rest_field(
        name="platformIdentityMgMetadata", visibility=["read", "create", "update", "delete", "query"]
    )
    """The assigned policies of the 'Identity' management group under 'Platform' management group."""
    decommissioned_mg_metadata: Optional["_models.DecommissionedManagementGroupProperties"] = rest_field(
        name="decommissionedMgMetadata", visibility=["read", "create", "update", "delete", "query"]
    )
    """The assigned policies of the 'Decommissioned' management group and indicator to create it or
     not."""
    sandbox_mg_metadata: Optional["_models.SandboxManagementGroupProperties"] = rest_field(
        name="sandboxMgMetadata", visibility=["read", "create", "update", "delete", "query"]
    )
    """The assigned policies of the 'Sandbox' management group and indicator to create it or not."""
    managed_identity: "_models.ManagedIdentityProperties" = rest_field(
        name="managedIdentity", visibility=["read", "create", "update", "delete", "query"]
    )
    """The managed identity to be assigned to this landing zone configuration. Required."""
    platform_mg_children: Optional[List["_models.PlatformManagementGroupProperties"]] = rest_field(
        name="platformMgChildren", visibility=["read", "create", "update", "delete", "query"]
    )
    """The names of the 'Platform' child management groups and their assigned policies, excluding the
     default ones: 'Connectivity', 'Identity', and 'Management'."""
    naming_convention_formula: Optional[str] = rest_field(
        name="namingConventionFormula", visibility=["read", "create", "update", "delete", "query"]
    )
    """The default naming convention applied to all resources for this landing zone configuration.
     Example -
     {DeploymentPrefix}-Contoso-{ResourceTypeAbbreviation}{DeploymentSuffix}-{Environment}-testing."""
    custom_naming_convention: Optional[List["_models.CustomNamingConvention"]] = rest_field(
        name="customNamingConvention", visibility=["read", "create", "update", "delete", "query"]
    )
    """The custom naming convention applied to specific resource types for this landing zone
     configuration, which overrides the default naming convention for those resource types. Example
     - 'customNamingConvention': [{'resourceType': 'azureFirewalls', 'formula':
     '{DeploymentPrefix}-afwl-{DeploymentSuffix}'}]."""

    @overload
    def __init__(  # pylint: disable=too-many-locals
        self,
        *,
        ddos_protection_creation_option: Union[str, "_models.ResourceCreationOptions"],
        log_analytics_workspace_creation_option: Union[str, "_models.ResourceCreationOptions"],
        firewall_creation_option: Union[str, "_models.FirewallCreationOptions"],
        gateway_subnet_cidr_block: str,
        log_retention_in_days: int,
        hub_network_cidr_block: str,
        azure_bastion_creation_option: Union[str, "_models.ResourceCreationOptions"],
        managed_identity: "_models.ManagedIdentityProperties",
        existing_ddos_protection_id: Optional[str] = None,
        existing_log_analytics_workspace_id: Optional[str] = None,
        tags: Optional[List["_models.Tags"]] = None,
        firewall_subnet_cidr_block: Optional[str] = None,
        existing_azure_bastion_id: Optional[str] = None,
        azure_bastion_subnet_cidr_block: Optional[str] = None,
        landing_zones_mg_children: Optional[List["_models.LandingZoneManagementGroupProperties"]] = None,
        top_level_mg_metadata: Optional["_models.ManagementGroupProperties"] = None,
        landing_zones_mg_metadata: Optional["_models.ManagementGroupProperties"] = None,
        platform_mg_metadata: Optional["_models.ManagementGroupProperties"] = None,
        platform_management_mg_metadata: Optional["_models.ManagementGroupProperties"] = None,
        platform_connectivity_mg_metadata: Optional["_models.ManagementGroupProperties"] = None,
        platform_identity_mg_metadata: Optional["_models.ManagementGroupProperties"] = None,
        decommissioned_mg_metadata: Optional["_models.DecommissionedManagementGroupProperties"] = None,
        sandbox_mg_metadata: Optional["_models.SandboxManagementGroupProperties"] = None,
        platform_mg_children: Optional[List["_models.PlatformManagementGroupProperties"]] = None,
        naming_convention_formula: Optional[str] = None,
        custom_naming_convention: Optional[List["_models.CustomNamingConvention"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LandingZoneManagementGroupProperties(_model_base.Model):
    """The 'Landing Zones' management group properties..

    :ivar policy_initiatives_assignment_properties: Array of policy initiatives applied to the
     management group. Required.
    :vartype policy_initiatives_assignment_properties:
     list[~azure.mgmt.regulatedenvironmentmanagement.models.PolicyInitiativeAssignmentProperties]
    :ivar name: Management group name. Required.
    :vartype name: str
    """

    policy_initiatives_assignment_properties: List["_models.PolicyInitiativeAssignmentProperties"] = rest_field(
        name="policyInitiativesAssignmentProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Array of policy initiatives applied to the management group. Required."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Management group name. Required."""

    @overload
    def __init__(
        self,
        *,
        policy_initiatives_assignment_properties: List["_models.PolicyInitiativeAssignmentProperties"],
        name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LandingZoneRegistrationResource(ProxyResource):
    """The Landing zone registration resource type.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.regulatedenvironmentmanagement.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties:
     ~azure.mgmt.regulatedenvironmentmanagement.models.LandingZoneRegistrationResourceProperties
    """

    properties: Optional["_models.LandingZoneRegistrationResourceProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.LandingZoneRegistrationResourceProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class LandingZoneRegistrationResourceProperties(_model_base.Model):  # pylint: disable=name-too-long
    """The properties of landing zone registration resource type.

    :ivar provisioning_state: The state that reflects the current stage in the creation, updating,
     or deletion process of the landing zone registration resource type. Known values are:
     "Succeeded", "Failed", "Canceled", "Creating", "Updating", and "Deleting".
    :vartype provisioning_state: str or
     ~azure.mgmt.regulatedenvironmentmanagement.models.ProvisioningState
    :ivar existing_top_level_mg_id: The resource id of the top level management group. Required.
    :vartype existing_top_level_mg_id: str
    :ivar existing_landing_zone_configuration_id: The resource id of the associated landing zone
     configuration. Required.
    :vartype existing_landing_zone_configuration_id: str
    :ivar managed_identity: The managed identity to be assigned to this landing zone registration.
    :vartype managed_identity:
     ~azure.mgmt.regulatedenvironmentmanagement.models.ManagedIdentityProperties
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """The state that reflects the current stage in the creation, updating, or deletion process of the
     landing zone registration resource type. Known values are: \"Succeeded\", \"Failed\",
     \"Canceled\", \"Creating\", \"Updating\", and \"Deleting\"."""
    existing_top_level_mg_id: str = rest_field(
        name="existingTopLevelMgId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource id of the top level management group. Required."""
    existing_landing_zone_configuration_id: str = rest_field(
        name="existingLandingZoneConfigurationId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource id of the associated landing zone configuration. Required."""
    managed_identity: Optional["_models.ManagedIdentityProperties"] = rest_field(
        name="managedIdentity", visibility=["read", "create", "update", "delete", "query"]
    )
    """The managed identity to be assigned to this landing zone registration."""

    @overload
    def __init__(
        self,
        *,
        existing_top_level_mg_id: str,
        existing_landing_zone_configuration_id: str,
        managed_identity: Optional["_models.ManagedIdentityProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ManagedIdentityProperties(_model_base.Model):
    """The properties of managed identity, specifically including type and resource ID.

    :ivar type: The type of managed identity. Required. Known values are: "SystemAssigned" and
     "UserAssigned".
    :vartype type: str or
     ~azure.mgmt.regulatedenvironmentmanagement.models.ManagedIdentityResourceType
    :ivar user_assigned_identity_resource_id: The resource id of the managed identity.
    :vartype user_assigned_identity_resource_id: str
    """

    type: Union[str, "_models.ManagedIdentityResourceType"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of managed identity. Required. Known values are: \"SystemAssigned\" and
     \"UserAssigned\"."""
    user_assigned_identity_resource_id: Optional[str] = rest_field(
        name="userAssignedIdentityResourceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The resource id of the managed identity."""

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.ManagedIdentityResourceType"],
        user_assigned_identity_resource_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ManagedServiceIdentity(_model_base.Model):
    """Managed service identity (system assigned and/or user assigned identities).

    :ivar principal_id: The service principal ID of the system assigned identity. This property
     will only be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of the system assigned identity. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar type: The type of managed identity assigned to this resource. Required. Known values are:
     "None", "SystemAssigned", "UserAssigned", and "SystemAssigned,UserAssigned".
    :vartype type: str or
     ~azure.mgmt.regulatedenvironmentmanagement.models.ManagedServiceIdentityType
    :ivar user_assigned_identities: The identities assigned to this resource by the user.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.regulatedenvironmentmanagement.models.UserAssignedIdentity]
    """

    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """The service principal ID of the system assigned identity. This property will only be provided
     for a system assigned identity."""
    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read"])
    """The tenant ID of the system assigned identity. This property will only be provided for a system
     assigned identity."""
    type: Union[str, "_models.ManagedServiceIdentityType"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of managed identity assigned to this resource. Required. Known values are: \"None\",
     \"SystemAssigned\", \"UserAssigned\", and \"SystemAssigned,UserAssigned\"."""
    user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = rest_field(
        name="userAssignedIdentities", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identities assigned to this resource by the user."""

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.ManagedServiceIdentityType"],
        user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ManagementGroupProperties(_model_base.Model):
    """The properties of policy initiatives applied to the management group.

    :ivar policy_initiatives_assignment_properties: Array of policy initiatives applied to the
     management group. Required.
    :vartype policy_initiatives_assignment_properties:
     list[~azure.mgmt.regulatedenvironmentmanagement.models.PolicyInitiativeAssignmentProperties]
    """

    policy_initiatives_assignment_properties: List["_models.PolicyInitiativeAssignmentProperties"] = rest_field(
        name="policyInitiativesAssignmentProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Array of policy initiatives applied to the management group. Required."""

    @overload
    def __init__(
        self,
        *,
        policy_initiatives_assignment_properties: List["_models.PolicyInitiativeAssignmentProperties"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Operation(_model_base.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for Azure Resource Manager/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.regulatedenvironmentmanagement.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.regulatedenvironmentmanagement.models.Origin
    :ivar action_type: Extensible enum. Indicates the action type. "Internal" refers to actions
     that are for internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.regulatedenvironmentmanagement.models.ActionType
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     \"Microsoft.Compute/virtualMachines/write\",
     \"Microsoft.Compute/virtualMachines/capture/action\"."""
    is_data_action: Optional[bool] = rest_field(name="isDataAction", visibility=["read"])
    """Whether the operation applies to data-plane. This is \"true\" for data-plane operations and
     \"false\" for Azure Resource Manager/control-plane operations."""
    display: Optional["_models.OperationDisplay"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Localized display information for this particular operation."""
    origin: Optional[Union[str, "_models.Origin"]] = rest_field(visibility=["read"])
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
     logs UX. Default value is \"user,system\". Known values are: \"user\", \"system\", and
     \"user,system\"."""
    action_type: Optional[Union[str, "_models.ActionType"]] = rest_field(name="actionType", visibility=["read"])
    """Extensible enum. Indicates the action type. \"Internal\" refers to actions that are for
     internal only APIs. \"Internal\""""

    @overload
    def __init__(
        self,
        *,
        display: Optional["_models.OperationDisplay"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationDisplay(_model_base.Model):
    """Localized display information for and operation.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    provider: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring
     Insights\" or \"Microsoft Compute\"."""
    resource: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly name of the resource type related to this operation. E.g. \"Virtual
     Machines\" or \"Job Schedule Collections\"."""
    operation: Optional[str] = rest_field(visibility=["read"])
    """The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create
     or Update Virtual Machine\", \"Restart Virtual Machine\"."""
    description: Optional[str] = rest_field(visibility=["read"])
    """The short, localized friendly description of the operation; suitable for tool tips and detailed
     views."""


class PlatformManagementGroupProperties(_model_base.Model):
    """The 'Platform' management group properties.

    :ivar policy_initiatives_assignment_properties: Array of policy initiatives applied to the
     management group. Required.
    :vartype policy_initiatives_assignment_properties:
     list[~azure.mgmt.regulatedenvironmentmanagement.models.PolicyInitiativeAssignmentProperties]
    :ivar name: Management group name. Required.
    :vartype name: str
    """

    policy_initiatives_assignment_properties: List["_models.PolicyInitiativeAssignmentProperties"] = rest_field(
        name="policyInitiativesAssignmentProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Array of policy initiatives applied to the management group. Required."""
    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Management group name. Required."""

    @overload
    def __init__(
        self,
        *,
        policy_initiatives_assignment_properties: List["_models.PolicyInitiativeAssignmentProperties"],
        name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PolicyInitiativeAssignmentProperties(_model_base.Model):
    """The properties of assigned policy initiatives.

    :ivar policy_initiative_id: The fully qualified id of the policy initiative. Required.
    :vartype policy_initiative_id: str
    :ivar assignment_parameters: The parameters of the assigned policy initiative. Required.
    :vartype assignment_parameters: dict[str, any]
    """

    policy_initiative_id: str = rest_field(
        name="policyInitiativeId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The fully qualified id of the policy initiative. Required."""
    assignment_parameters: Dict[str, Any] = rest_field(
        name="assignmentParameters", visibility=["read", "create", "update", "delete", "query"]
    )
    """The parameters of the assigned policy initiative. Required."""

    @overload
    def __init__(
        self,
        *,
        policy_initiative_id: str,
        assignment_parameters: Dict[str, Any],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SandboxManagementGroupProperties(_model_base.Model):
    """The 'Sandbox' management group properties.

    :ivar policy_initiatives_assignment_properties: Array of policy initiatives applied to the
     management group. Required.
    :vartype policy_initiatives_assignment_properties:
     list[~azure.mgmt.regulatedenvironmentmanagement.models.PolicyInitiativeAssignmentProperties]
    :ivar create: This parameter determines whether the 'Sandbox' management group will be created.
     If set to true, the group will be created; if set to false, it will not be created. The default
     value is false. Required.
    :vartype create: bool
    """

    policy_initiatives_assignment_properties: List["_models.PolicyInitiativeAssignmentProperties"] = rest_field(
        name="policyInitiativesAssignmentProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Array of policy initiatives applied to the management group. Required."""
    create: bool = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """This parameter determines whether the 'Sandbox' management group will be created. If set to
     true, the group will be created; if set to false, it will not be created. The default value is
     false. Required."""

    @overload
    def __init__(
        self,
        *,
        policy_initiatives_assignment_properties: List["_models.PolicyInitiativeAssignmentProperties"],
        create: bool,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_model_base.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or
     ~azure.mgmt.regulatedenvironmentmanagement.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or
     ~azure.mgmt.regulatedenvironmentmanagement.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read", "create", "update", "delete", "query"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(
        name="lastModifiedBy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(
        name="lastModifiedAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Tags(_model_base.Model):
    """Key-value pairs that can be assigned to this resource.

    :ivar name: A tag name. Required.
    :vartype name: str
    :ivar value: A tag value.
    :vartype value: str
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A tag name. Required."""
    value: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A tag value."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        value: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UpdateAuthoringStatusRequest(_model_base.Model):
    """The request to update the authoring status of a configuration.

    :ivar authoring_status: The authoring status value to be updated. Possible values include:
     'Authoring', 'ReadyForUse' and 'Disabled'. Required. Known values are: "Authoring",
     "ReadyForUse", and "Disabled".
    :vartype authoring_status: str or
     ~azure.mgmt.regulatedenvironmentmanagement.models.AuthoringStatus
    """

    authoring_status: Union[str, "_models.AuthoringStatus"] = rest_field(
        name="authoringStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """The authoring status value to be updated. Possible values include: 'Authoring', 'ReadyForUse'
     and 'Disabled'. Required. Known values are: \"Authoring\", \"ReadyForUse\", and \"Disabled\"."""

    @overload
    def __init__(
        self,
        *,
        authoring_status: Union[str, "_models.AuthoringStatus"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UpdateAuthoringStatusResponse(_model_base.Model):
    """The response for authoring status update request.

    :ivar landing_zone_configuration_name: The name of the landing zone configuration resource.
     Required.
    :vartype landing_zone_configuration_name: str
    :ivar authoring_status: The authoring status value to be updated. Required. Known values are:
     "Authoring", "ReadyForUse", and "Disabled".
    :vartype authoring_status: str or
     ~azure.mgmt.regulatedenvironmentmanagement.models.AuthoringStatus
    """

    landing_zone_configuration_name: str = rest_field(
        name="landingZoneConfigurationName", visibility=["read", "create", "update", "delete", "query"]
    )
    """The name of the landing zone configuration resource. Required."""
    authoring_status: Union[str, "_models.AuthoringStatus"] = rest_field(
        name="authoringStatus", visibility=["read", "create", "update", "delete", "query"]
    )
    """The authoring status value to be updated. Required. Known values are: \"Authoring\",
     \"ReadyForUse\", and \"Disabled\"."""

    @overload
    def __init__(
        self,
        *,
        landing_zone_configuration_name: str,
        authoring_status: Union[str, "_models.AuthoringStatus"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserAssignedIdentity(_model_base.Model):
    """User assigned identity properties.

    :ivar client_id: The client ID of the assigned identity.
    :vartype client_id: str
    :ivar principal_id: The principal ID of the assigned identity.
    :vartype principal_id: str
    """

    client_id: Optional[str] = rest_field(name="clientId", visibility=["read"])
    """The client ID of the assigned identity."""
    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    """The principal ID of the assigned identity."""
