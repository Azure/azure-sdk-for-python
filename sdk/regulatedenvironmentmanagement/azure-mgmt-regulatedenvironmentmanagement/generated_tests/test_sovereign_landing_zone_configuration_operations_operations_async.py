# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.regulatedenvironmentmanagement.aio import SovereignClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestSovereignLandingZoneConfigurationOperationsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(SovereignClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_landing_zone_configuration_operations_get(self, resource_group):
        response = await self.client.landing_zone_configuration_operations.get(
            resource_group_name=resource_group.name,
            landing_zone_account_name="str",
            landing_zone_configuration_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_landing_zone_configuration_operations_begin_create(self, resource_group):
        response = await (
            await self.client.landing_zone_configuration_operations.begin_create(
                resource_group_name=resource_group.name,
                landing_zone_account_name="str",
                landing_zone_configuration_name="str",
                resource={
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "azureBastionCreationOption": "str",
                        "ddosProtectionCreationOption": "str",
                        "firewallCreationOption": "str",
                        "gatewaySubnetCidrBlock": "str",
                        "hubNetworkCidrBlock": "str",
                        "logAnalyticsWorkspaceCreationOption": "str",
                        "logRetentionInDays": 0,
                        "managedIdentity": {"type": "str", "userAssignedIdentityResourceId": "str"},
                        "authoringStatus": "str",
                        "azureBastionSubnetCidrBlock": "str",
                        "customNamingConvention": [{"formula": "str", "resourceType": "str"}],
                        "decommissionedMgMetadata": {
                            "create": bool,
                            "policyInitiativesAssignmentProperties": [
                                {"assignmentParameters": {"str": {}}, "policyInitiativeId": "str"}
                            ],
                        },
                        "existingAzureBastionId": "str",
                        "existingDdosProtectionId": "str",
                        "existingLogAnalyticsWorkspaceId": "str",
                        "firewallSubnetCidrBlock": "str",
                        "landingZonesMgChildren": [
                            {
                                "name": "str",
                                "policyInitiativesAssignmentProperties": [
                                    {"assignmentParameters": {"str": {}}, "policyInitiativeId": "str"}
                                ],
                            }
                        ],
                        "landingZonesMgMetadata": {
                            "policyInitiativesAssignmentProperties": [
                                {"assignmentParameters": {"str": {}}, "policyInitiativeId": "str"}
                            ]
                        },
                        "namingConventionFormula": "str",
                        "platformConnectivityMgMetadata": {
                            "policyInitiativesAssignmentProperties": [
                                {"assignmentParameters": {"str": {}}, "policyInitiativeId": "str"}
                            ]
                        },
                        "platformIdentityMgMetadata": {
                            "policyInitiativesAssignmentProperties": [
                                {"assignmentParameters": {"str": {}}, "policyInitiativeId": "str"}
                            ]
                        },
                        "platformManagementMgMetadata": {
                            "policyInitiativesAssignmentProperties": [
                                {"assignmentParameters": {"str": {}}, "policyInitiativeId": "str"}
                            ]
                        },
                        "platformMgChildren": [
                            {
                                "name": "str",
                                "policyInitiativesAssignmentProperties": [
                                    {"assignmentParameters": {"str": {}}, "policyInitiativeId": "str"}
                                ],
                            }
                        ],
                        "platformMgMetadata": {
                            "policyInitiativesAssignmentProperties": [
                                {"assignmentParameters": {"str": {}}, "policyInitiativeId": "str"}
                            ]
                        },
                        "provisioningState": "str",
                        "sandboxMgMetadata": {
                            "create": bool,
                            "policyInitiativesAssignmentProperties": [
                                {"assignmentParameters": {"str": {}}, "policyInitiativeId": "str"}
                            ],
                        },
                        "tags": [{"name": "str", "value": "str"}],
                        "topLevelMgMetadata": {
                            "policyInitiativesAssignmentProperties": [
                                {"assignmentParameters": {"str": {}}, "policyInitiativeId": "str"}
                            ]
                        },
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "type": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_landing_zone_configuration_operations_begin_update(self, resource_group):
        response = await (
            await self.client.landing_zone_configuration_operations.begin_update(
                resource_group_name=resource_group.name,
                landing_zone_account_name="str",
                landing_zone_configuration_name="str",
                properties={
                    "id": "str",
                    "name": "str",
                    "properties": {
                        "azureBastionCreationOption": "str",
                        "ddosProtectionCreationOption": "str",
                        "firewallCreationOption": "str",
                        "gatewaySubnetCidrBlock": "str",
                        "hubNetworkCidrBlock": "str",
                        "logAnalyticsWorkspaceCreationOption": "str",
                        "logRetentionInDays": 0,
                        "managedIdentity": {"type": "str", "userAssignedIdentityResourceId": "str"},
                        "authoringStatus": "str",
                        "azureBastionSubnetCidrBlock": "str",
                        "customNamingConvention": [{"formula": "str", "resourceType": "str"}],
                        "decommissionedMgMetadata": {
                            "create": bool,
                            "policyInitiativesAssignmentProperties": [
                                {"assignmentParameters": {"str": {}}, "policyInitiativeId": "str"}
                            ],
                        },
                        "existingAzureBastionId": "str",
                        "existingDdosProtectionId": "str",
                        "existingLogAnalyticsWorkspaceId": "str",
                        "firewallSubnetCidrBlock": "str",
                        "landingZonesMgChildren": [
                            {
                                "name": "str",
                                "policyInitiativesAssignmentProperties": [
                                    {"assignmentParameters": {"str": {}}, "policyInitiativeId": "str"}
                                ],
                            }
                        ],
                        "landingZonesMgMetadata": {
                            "policyInitiativesAssignmentProperties": [
                                {"assignmentParameters": {"str": {}}, "policyInitiativeId": "str"}
                            ]
                        },
                        "namingConventionFormula": "str",
                        "platformConnectivityMgMetadata": {
                            "policyInitiativesAssignmentProperties": [
                                {"assignmentParameters": {"str": {}}, "policyInitiativeId": "str"}
                            ]
                        },
                        "platformIdentityMgMetadata": {
                            "policyInitiativesAssignmentProperties": [
                                {"assignmentParameters": {"str": {}}, "policyInitiativeId": "str"}
                            ]
                        },
                        "platformManagementMgMetadata": {
                            "policyInitiativesAssignmentProperties": [
                                {"assignmentParameters": {"str": {}}, "policyInitiativeId": "str"}
                            ]
                        },
                        "platformMgChildren": [
                            {
                                "name": "str",
                                "policyInitiativesAssignmentProperties": [
                                    {"assignmentParameters": {"str": {}}, "policyInitiativeId": "str"}
                                ],
                            }
                        ],
                        "platformMgMetadata": {
                            "policyInitiativesAssignmentProperties": [
                                {"assignmentParameters": {"str": {}}, "policyInitiativeId": "str"}
                            ]
                        },
                        "provisioningState": "str",
                        "sandboxMgMetadata": {
                            "create": bool,
                            "policyInitiativesAssignmentProperties": [
                                {"assignmentParameters": {"str": {}}, "policyInitiativeId": "str"}
                            ],
                        },
                        "tags": [{"name": "str", "value": "str"}],
                        "topLevelMgMetadata": {
                            "policyInitiativesAssignmentProperties": [
                                {"assignmentParameters": {"str": {}}, "policyInitiativeId": "str"}
                            ]
                        },
                    },
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "type": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_landing_zone_configuration_operations_begin_delete(self, resource_group):
        response = await (
            await self.client.landing_zone_configuration_operations.begin_delete(
                resource_group_name=resource_group.name,
                landing_zone_account_name="str",
                landing_zone_configuration_name="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_landing_zone_configuration_operations_list_by_resource_group(self, resource_group):
        response = self.client.landing_zone_configuration_operations.list_by_resource_group(
            resource_group_name=resource_group.name,
            landing_zone_account_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_landing_zone_configuration_operations_list_by_subscription(self, resource_group):
        response = self.client.landing_zone_configuration_operations.list_by_subscription(
            landing_zone_account_name="str",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_landing_zone_configuration_operations_begin_generate_landing_zone(self, resource_group):
        response = await (
            await self.client.landing_zone_configuration_operations.begin_generate_landing_zone(
                resource_group_name=resource_group.name,
                landing_zone_account_name="str",
                landing_zone_configuration_name="str",
                body={
                    "deploymentLocation": "str",
                    "deploymentPrefix": "str",
                    "infrastructureAsCodeOutputOptions": "str",
                    "topLevelMgDisplayName": "str",
                    "deploymentSuffix": "str",
                    "environment": "str",
                    "existingConnectivitySubscriptionId": "str",
                    "existingIdentitySubscriptionId": "str",
                    "existingManagementSubscriptionId": "str",
                    "existingTopLevelMgParentId": "str",
                    "organization": "str",
                    "subscriptionBillingScope": "str",
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_landing_zone_configuration_operations_begin_update_authoring_status(self, resource_group):
        response = await (
            await self.client.landing_zone_configuration_operations.begin_update_authoring_status(
                resource_group_name=resource_group.name,
                landing_zone_account_name="str",
                landing_zone_configuration_name="str",
                body={"authoringStatus": "str"},
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_landing_zone_configuration_operations_begin_create_copy(self, resource_group):
        response = await (
            await self.client.landing_zone_configuration_operations.begin_create_copy(
                resource_group_name=resource_group.name,
                landing_zone_account_name="str",
                landing_zone_configuration_name="str",
                body={"name": "str"},
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...
