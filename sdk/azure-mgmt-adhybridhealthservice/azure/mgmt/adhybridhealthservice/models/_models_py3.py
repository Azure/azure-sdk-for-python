# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class AdditionalInformation(Model):
    """The additional information for a property.

    :param title_name: The title name for the property.
    :type title_name: str
    :param title_value: The title value for the property.
    :type title_value: str
    :param properties: The list of properties which are included in the
     additional information.
    :type properties: object
    :param has_properties: Indicates if properties are present or not.
    :type has_properties: bool
    """

    _attribute_map = {
        'title_name': {'key': 'titleName', 'type': 'str'},
        'title_value': {'key': 'titleValue', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'object'},
        'has_properties': {'key': 'hasProperties', 'type': 'bool'},
    }

    def __init__(self, *, title_name: str=None, title_value: str=None, properties=None, has_properties: bool=None, **kwargs) -> None:
        super(AdditionalInformation, self).__init__(**kwargs)
        self.title_name = title_name
        self.title_value = title_value
        self.properties = properties
        self.has_properties = has_properties


class AddsServiceMember(Model):
    """The server details for ADDS service.

    :param domain_name: The domain name.
    :type domain_name: str
    :param site_name: The site name.
    :type site_name: str
    :param adds_roles: The list of ADDS roles.
    :type adds_roles: list[str]
    :param gc_reachable: Indicates if the global catalog for this domain is
     reachable or not.
    :type gc_reachable: bool
    :param is_advertising: Indicates if the Dc is advertising or not.
    :type is_advertising: bool
    :param pdc_reachable: Indicates if the primary domain controller is
     reachable or not.
    :type pdc_reachable: bool
    :param sysvol_state: Indicates if the SYSVOL state is healthy or not.
    :type sysvol_state: bool
    :param dc_types: The list of domain controller types.
    :type dc_types: list[str]
    :param service_member_id: The id of the server.
    :type service_member_id: str
    :param service_id: The service id to whom this server belongs.
    :type service_id: str
    :param tenant_id: The tenant id to whom this server belongs.
    :type tenant_id: str
    :param active_alerts: The total number of alerts that are currently active
     for the server.
    :type active_alerts: int
    :param additional_information: The additional information, if any, for the
     server.
    :type additional_information: str
    :param created_date: The date time , in UTC, when the server was onboarded
     to Azure Active Directory Connect Health.
    :type created_date: datetime
    :param dimensions: The server specific configuration related dimensions.
    :type dimensions: list[~azure.mgmt.adhybridhealthservice.models.Item]
    :param disabled: Indicates if the server is disabled or not.
    :type disabled: bool
    :param disabled_reason: The reason for disabling the server.
    :type disabled_reason: int
    :param installed_qfes: The list of installed QFEs for the server.
    :type installed_qfes:
     list[~azure.mgmt.adhybridhealthservice.models.Hotfix]
    :param last_disabled: The date and time , in UTC, when the server was last
     disabled.
    :type last_disabled: datetime
    :param last_reboot: The date and time, in UTC, when the server was last
     rebooted.
    :type last_reboot: datetime
    :param last_server_reported_monitoring_level_change: The date and time, in
     UTC, when the server's data monitoring configuration was last changed.
    :type last_server_reported_monitoring_level_change: datetime
    :param last_updated: The date and time, in UTC, when the server properties
     were last updated.
    :type last_updated: datetime
    :param machine_id: The id of the machine.
    :type machine_id: str
    :param machine_name: The name of the server.
    :type machine_name: str
    :param monitoring_configurations_computed: The monitoring configuration of
     the server which determines what activities are monitored by Azure Active
     Directory Connect Health.
    :type monitoring_configurations_computed:
     list[~azure.mgmt.adhybridhealthservice.models.Item]
    :param monitoring_configurations_customized: The customized monitoring
     configuration of the server which determines what activities are monitored
     by Azure Active Directory Connect Health.
    :type monitoring_configurations_customized:
     list[~azure.mgmt.adhybridhealthservice.models.Item]
    :param os_name: The name of the operating system installed in the machine.
    :type os_name: str
    :param os_version: The version of the operating system installed in the
     machine.
    :type os_version: str
    :param properties: Server specific properties.
    :type properties: list[~azure.mgmt.adhybridhealthservice.models.Item]
    :param recommended_qfes: The list of recommended hotfixes for the server.
    :type recommended_qfes:
     list[~azure.mgmt.adhybridhealthservice.models.Hotfix]
    :param resolved_alerts: The total count of alerts that are resolved for
     this server.
    :type resolved_alerts: int
    :param role: The service role that is being monitored in the server.
    :type role: str
    :param server_reported_monitoring_level: The monitoring level reported by
     the server. Possible values include: 'Partial', 'Full', 'Off'
    :type server_reported_monitoring_level: str or
     ~azure.mgmt.adhybridhealthservice.models.MonitoringLevel
    :param status: The health status of the server.
    :type status: str
    """

    _attribute_map = {
        'domain_name': {'key': 'domainName', 'type': 'str'},
        'site_name': {'key': 'siteName', 'type': 'str'},
        'adds_roles': {'key': 'addsRoles', 'type': '[str]'},
        'gc_reachable': {'key': 'gcReachable', 'type': 'bool'},
        'is_advertising': {'key': 'isAdvertising', 'type': 'bool'},
        'pdc_reachable': {'key': 'pdcReachable', 'type': 'bool'},
        'sysvol_state': {'key': 'sysvolState', 'type': 'bool'},
        'dc_types': {'key': 'dcTypes', 'type': '[str]'},
        'service_member_id': {'key': 'serviceMemberId', 'type': 'str'},
        'service_id': {'key': 'serviceId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'active_alerts': {'key': 'activeAlerts', 'type': 'int'},
        'additional_information': {'key': 'additionalInformation', 'type': 'str'},
        'created_date': {'key': 'createdDate', 'type': 'iso-8601'},
        'dimensions': {'key': 'dimensions', 'type': '[Item]'},
        'disabled': {'key': 'disabled', 'type': 'bool'},
        'disabled_reason': {'key': 'disabledReason', 'type': 'int'},
        'installed_qfes': {'key': 'installedQfes', 'type': '[Hotfix]'},
        'last_disabled': {'key': 'lastDisabled', 'type': 'iso-8601'},
        'last_reboot': {'key': 'lastReboot', 'type': 'iso-8601'},
        'last_server_reported_monitoring_level_change': {'key': 'lastServerReportedMonitoringLevelChange', 'type': 'iso-8601'},
        'last_updated': {'key': 'lastUpdated', 'type': 'iso-8601'},
        'machine_id': {'key': 'machineId', 'type': 'str'},
        'machine_name': {'key': 'machineName', 'type': 'str'},
        'monitoring_configurations_computed': {'key': 'monitoringConfigurationsComputed', 'type': '[Item]'},
        'monitoring_configurations_customized': {'key': 'monitoringConfigurationsCustomized', 'type': '[Item]'},
        'os_name': {'key': 'osName', 'type': 'str'},
        'os_version': {'key': 'osVersion', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '[Item]'},
        'recommended_qfes': {'key': 'recommendedQfes', 'type': '[Hotfix]'},
        'resolved_alerts': {'key': 'resolvedAlerts', 'type': 'int'},
        'role': {'key': 'role', 'type': 'str'},
        'server_reported_monitoring_level': {'key': 'serverReportedMonitoringLevel', 'type': 'MonitoringLevel'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(self, *, domain_name: str=None, site_name: str=None, adds_roles=None, gc_reachable: bool=None, is_advertising: bool=None, pdc_reachable: bool=None, sysvol_state: bool=None, dc_types=None, service_member_id: str=None, service_id: str=None, tenant_id: str=None, active_alerts: int=None, additional_information: str=None, created_date=None, dimensions=None, disabled: bool=None, disabled_reason: int=None, installed_qfes=None, last_disabled=None, last_reboot=None, last_server_reported_monitoring_level_change=None, last_updated=None, machine_id: str=None, machine_name: str=None, monitoring_configurations_computed=None, monitoring_configurations_customized=None, os_name: str=None, os_version: str=None, properties=None, recommended_qfes=None, resolved_alerts: int=None, role: str=None, server_reported_monitoring_level=None, status: str=None, **kwargs) -> None:
        super(AddsServiceMember, self).__init__(**kwargs)
        self.domain_name = domain_name
        self.site_name = site_name
        self.adds_roles = adds_roles
        self.gc_reachable = gc_reachable
        self.is_advertising = is_advertising
        self.pdc_reachable = pdc_reachable
        self.sysvol_state = sysvol_state
        self.dc_types = dc_types
        self.service_member_id = service_member_id
        self.service_id = service_id
        self.tenant_id = tenant_id
        self.active_alerts = active_alerts
        self.additional_information = additional_information
        self.created_date = created_date
        self.dimensions = dimensions
        self.disabled = disabled
        self.disabled_reason = disabled_reason
        self.installed_qfes = installed_qfes
        self.last_disabled = last_disabled
        self.last_reboot = last_reboot
        self.last_server_reported_monitoring_level_change = last_server_reported_monitoring_level_change
        self.last_updated = last_updated
        self.machine_id = machine_id
        self.machine_name = machine_name
        self.monitoring_configurations_computed = monitoring_configurations_computed
        self.monitoring_configurations_customized = monitoring_configurations_customized
        self.os_name = os_name
        self.os_version = os_version
        self.properties = properties
        self.recommended_qfes = recommended_qfes
        self.resolved_alerts = resolved_alerts
        self.role = role
        self.server_reported_monitoring_level = server_reported_monitoring_level
        self.status = status


class Agent(Model):
    """The agent details.

    :param tenant_id: The tenant Id.
    :type tenant_id: str
    :param machine_id: The machine Id.
    :type machine_id: str
    :param credential: The agent credential details.
    :type credential: object
    :param machine_name: The machine name.
    :type machine_name: str
    :param agent_version: The agent version.
    :type agent_version: str
    :param created_date: The date and time, in UTC, when the agent was
     created.
    :type created_date: datetime
    :param key:  The connector hash key.
    :type key: str
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'machine_id': {'key': 'machineId', 'type': 'str'},
        'credential': {'key': 'credential', 'type': 'object'},
        'machine_name': {'key': 'machineName', 'type': 'str'},
        'agent_version': {'key': 'agentVersion', 'type': 'str'},
        'created_date': {'key': 'createdDate', 'type': 'iso-8601'},
        'key': {'key': 'key', 'type': 'str'},
    }

    def __init__(self, *, tenant_id: str=None, machine_id: str=None, credential=None, machine_name: str=None, agent_version: str=None, created_date=None, key: str=None, **kwargs) -> None:
        super(Agent, self).__init__(**kwargs)
        self.tenant_id = tenant_id
        self.machine_id = machine_id
        self.credential = credential
        self.machine_name = machine_name
        self.agent_version = agent_version
        self.created_date = created_date
        self.key = key


class Alert(Model):
    """The alert details indicating an issue with service or server.

    :param alert_id: The alert Id.
    :type alert_id: str
    :param level: The alert level which indicates the severity of the alert.
     Possible values include: 'Warning', 'Error', 'PreWarning'
    :type level: str or ~azure.mgmt.adhybridhealthservice.models.Level
    :param state: The alert state which can be either active or resolved with
     multiple resolution types. Possible values include: 'Active',
     'ResolvedByPositiveResult', 'ResolvedManually', 'ResolvedByTimer',
     'ResolvedByStateChange'
    :type state: str or ~azure.mgmt.adhybridhealthservice.models.State
    :param short_name: The alert short name.
    :type short_name: str
    :param display_name: The display name for the alert.
    :type display_name: str
    :param description: The alert description.
    :type description: str
    :param remediation: The alert remediation.
    :type remediation: str
    :param related_links: The help links to get more information related to
     the alert.
    :type related_links:
     list[~azure.mgmt.adhybridhealthservice.models.HelpLink]
    :param scope: The scope of the alert. Indicates if it is a service or a
     server related alert.
    :type scope: str
    :param additional_information: Additional information related to the
     alert.
    :type additional_information:
     list[~azure.mgmt.adhybridhealthservice.models.AdditionalInformation]
    :param created_date: The date and time,in UTC,when the alert was created.
    :type created_date: datetime
    :param resolved_date: The date and time, in UTC, when the alert was
     resolved.
    :type resolved_date: datetime
    :param last_updated: The date and time, in UTC, when the alert was last
     updated.
    :type last_updated: datetime
    :param monitor_role_type: The monitoring role type for which the alert was
     raised.
    :type monitor_role_type: str
    :param active_alert_properties: The active alert properties.
    :type active_alert_properties:
     list[~azure.mgmt.adhybridhealthservice.models.Item]
    :param resolved_alert_properties: The resolved alert properties.
    :type resolved_alert_properties:
     list[~azure.mgmt.adhybridhealthservice.models.Item]
    :param tenant_id: The tenant Id.
    :type tenant_id: str
    :param service_id: The service Id.
    :type service_id: str
    :param service_member_id: The server Id.
    :type service_member_id: str
    """

    _attribute_map = {
        'alert_id': {'key': 'alertId', 'type': 'str'},
        'level': {'key': 'level', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'short_name': {'key': 'shortName', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'remediation': {'key': 'remediation', 'type': 'str'},
        'related_links': {'key': 'relatedLinks', 'type': '[HelpLink]'},
        'scope': {'key': 'scope', 'type': 'str'},
        'additional_information': {'key': 'additionalInformation', 'type': '[AdditionalInformation]'},
        'created_date': {'key': 'createdDate', 'type': 'iso-8601'},
        'resolved_date': {'key': 'resolvedDate', 'type': 'iso-8601'},
        'last_updated': {'key': 'lastUpdated', 'type': 'iso-8601'},
        'monitor_role_type': {'key': 'monitorRoleType', 'type': 'str'},
        'active_alert_properties': {'key': 'activeAlertProperties', 'type': '[Item]'},
        'resolved_alert_properties': {'key': 'resolvedAlertProperties', 'type': '[Item]'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'service_id': {'key': 'serviceId', 'type': 'str'},
        'service_member_id': {'key': 'serviceMemberId', 'type': 'str'},
    }

    def __init__(self, *, alert_id: str=None, level=None, state=None, short_name: str=None, display_name: str=None, description: str=None, remediation: str=None, related_links=None, scope: str=None, additional_information=None, created_date=None, resolved_date=None, last_updated=None, monitor_role_type: str=None, active_alert_properties=None, resolved_alert_properties=None, tenant_id: str=None, service_id: str=None, service_member_id: str=None, **kwargs) -> None:
        super(Alert, self).__init__(**kwargs)
        self.alert_id = alert_id
        self.level = level
        self.state = state
        self.short_name = short_name
        self.display_name = display_name
        self.description = description
        self.remediation = remediation
        self.related_links = related_links
        self.scope = scope
        self.additional_information = additional_information
        self.created_date = created_date
        self.resolved_date = resolved_date
        self.last_updated = last_updated
        self.monitor_role_type = monitor_role_type
        self.active_alert_properties = active_alert_properties
        self.resolved_alert_properties = resolved_alert_properties
        self.tenant_id = tenant_id
        self.service_id = service_id
        self.service_member_id = service_member_id


class AlertFeedback(Model):
    """The alert feedback details.

    :param level: The alert level which indicates the severity of the alert.
    :type level: str
    :param state: The alert state which can be either active or resolved with
     multiple resolution types.
    :type state: str
    :param short_name: The alert short name.
    :type short_name: str
    :param feedback: The feedback for the alert which indicates if the
     customer likes or dislikes the alert.
    :type feedback: str
    :param comment: Additional comments related to the alert.
    :type comment: str
    :param consented_to_share: Indicates if the alert feedback can be shared
     from product team.
    :type consented_to_share: bool
    :param service_member_id: The server Id of the alert.
    :type service_member_id: str
    :param created_date: The date and time,in UTC,when the alert was created.
    :type created_date: datetime
    """

    _attribute_map = {
        'level': {'key': 'level', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'short_name': {'key': 'shortName', 'type': 'str'},
        'feedback': {'key': 'feedback', 'type': 'str'},
        'comment': {'key': 'comment', 'type': 'str'},
        'consented_to_share': {'key': 'consentedToShare', 'type': 'bool'},
        'service_member_id': {'key': 'serviceMemberId', 'type': 'str'},
        'created_date': {'key': 'createdDate', 'type': 'iso-8601'},
    }

    def __init__(self, *, level: str=None, state: str=None, short_name: str=None, feedback: str=None, comment: str=None, consented_to_share: bool=None, service_member_id: str=None, created_date=None, **kwargs) -> None:
        super(AlertFeedback, self).__init__(**kwargs)
        self.level = level
        self.state = state
        self.short_name = short_name
        self.feedback = feedback
        self.comment = comment
        self.consented_to_share = consented_to_share
        self.service_member_id = service_member_id
        self.created_date = created_date


class AssociatedObject(Model):
    """Object that hold sync object details.

    :param display_name: The display name of the object.
    :type display_name: str
    :param distinguished_name: The distinguished name of the object.
    :type distinguished_name: str
    :param last_dir_sync_time: The last dirSync time.
    :type last_dir_sync_time: datetime
    :param mail: The email of the object.
    :type mail: str
    :param object_guid: The object guid.
    :type object_guid: str
    :param object_type: The object type.
    :type object_type: str
    :param onpremises_user_principal_name: The On-premises UPN.
    :type onpremises_user_principal_name: str
    :param proxy_addresses: The proxy addresses.
    :type proxy_addresses: str
    :param source_anchor: The source anchor.
    :type source_anchor: str
    :param source_of_authority: The source of authority.
    :type source_of_authority: str
    :param time_occurred:  The time of the error.
    :type time_occurred: datetime
    :param user_principal_name:  The UPN.
    :type user_principal_name: str
    """

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'distinguished_name': {'key': 'distinguishedName', 'type': 'str'},
        'last_dir_sync_time': {'key': 'lastDirSyncTime', 'type': 'iso-8601'},
        'mail': {'key': 'mail', 'type': 'str'},
        'object_guid': {'key': 'objectGuid', 'type': 'str'},
        'object_type': {'key': 'objectType', 'type': 'str'},
        'onpremises_user_principal_name': {'key': 'onpremisesUserPrincipalName', 'type': 'str'},
        'proxy_addresses': {'key': 'proxyAddresses', 'type': 'str'},
        'source_anchor': {'key': 'sourceAnchor', 'type': 'str'},
        'source_of_authority': {'key': 'sourceOfAuthority', 'type': 'str'},
        'time_occurred': {'key': 'timeOccurred', 'type': 'iso-8601'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
    }

    def __init__(self, *, display_name: str=None, distinguished_name: str=None, last_dir_sync_time=None, mail: str=None, object_guid: str=None, object_type: str=None, onpremises_user_principal_name: str=None, proxy_addresses: str=None, source_anchor: str=None, source_of_authority: str=None, time_occurred=None, user_principal_name: str=None, **kwargs) -> None:
        super(AssociatedObject, self).__init__(**kwargs)
        self.display_name = display_name
        self.distinguished_name = distinguished_name
        self.last_dir_sync_time = last_dir_sync_time
        self.mail = mail
        self.object_guid = object_guid
        self.object_type = object_type
        self.onpremises_user_principal_name = onpremises_user_principal_name
        self.proxy_addresses = proxy_addresses
        self.source_anchor = source_anchor
        self.source_of_authority = source_of_authority
        self.time_occurred = time_occurred
        self.user_principal_name = user_principal_name


class AttributeDelta(Model):
    """The delta attributes.

    :param values: The delta values.
    :type values: list[~azure.mgmt.adhybridhealthservice.models.ValueDelta]
    :param name: The name of the attribute delta.
    :type name: str
    :param operation_type: The attribute delta operation type. Possible values
     include: 'Undefined', 'Add', 'Replace', 'Update', 'Delete'
    :type operation_type: str or
     ~azure.mgmt.adhybridhealthservice.models.AttributeDeltaOperationType
    :param value_type: The value type. Possible values include: 'Undefined',
     'Dn', 'Binary', 'String', 'Integer', 'Boolean'
    :type value_type: str or
     ~azure.mgmt.adhybridhealthservice.models.ValueType
    :param multi_valued: Indicates if the attribute delta is multivalued or
     not.
    :type multi_valued: bool
    """

    _attribute_map = {
        'values': {'key': 'values', 'type': '[ValueDelta]'},
        'name': {'key': 'name', 'type': 'str'},
        'operation_type': {'key': 'operationType', 'type': 'str'},
        'value_type': {'key': 'valueType', 'type': 'str'},
        'multi_valued': {'key': 'multiValued', 'type': 'bool'},
    }

    def __init__(self, *, values=None, name: str=None, operation_type=None, value_type=None, multi_valued: bool=None, **kwargs) -> None:
        super(AttributeDelta, self).__init__(**kwargs)
        self.values = values
        self.name = name
        self.operation_type = operation_type
        self.value_type = value_type
        self.multi_valued = multi_valued


class AttributeMapping(Model):
    """The attribute mapping details.

    :param mapping_source: The mapping source.
    :type mapping_source:
     ~azure.mgmt.adhybridhealthservice.models.AttributeMppingSource
    :param type: The attribute mapping type. Possible values include:
     'Constant', 'Direct', 'DnPart', 'Script'
    :type type: str or
     ~azure.mgmt.adhybridhealthservice.models.AttributeMappingType
    :param destination_attribute: The destination attribute.
    :type destination_attribute: str
    :param context_id: The context Id.
    :type context_id: str
    """

    _attribute_map = {
        'mapping_source': {'key': 'mappingSource', 'type': 'AttributeMppingSource'},
        'type': {'key': 'type', 'type': 'str'},
        'destination_attribute': {'key': 'destinationAttribute', 'type': 'str'},
        'context_id': {'key': 'contextId', 'type': 'str'},
    }

    def __init__(self, *, mapping_source=None, type=None, destination_attribute: str=None, context_id: str=None, **kwargs) -> None:
        super(AttributeMapping, self).__init__(**kwargs)
        self.mapping_source = mapping_source
        self.type = type
        self.destination_attribute = destination_attribute
        self.context_id = context_id


class AttributeMppingSource(Model):
    """The attribute mapping source.

    :param source_attribute: The source attribute.
    :type source_attribute: list[str]
    :param dn_part: The value for dn part.
    :type dn_part: int
    :param script_context: The script context.
    :type script_context: str
    :param constant_value: The constant value.
    :type constant_value: str
    """

    _attribute_map = {
        'source_attribute': {'key': 'sourceAttribute', 'type': '[str]'},
        'dn_part': {'key': 'dnPart', 'type': 'int'},
        'script_context': {'key': 'scriptContext', 'type': 'str'},
        'constant_value': {'key': 'constantValue', 'type': 'str'},
    }

    def __init__(self, *, source_attribute=None, dn_part: int=None, script_context: str=None, constant_value: str=None, **kwargs) -> None:
        super(AttributeMppingSource, self).__init__(**kwargs)
        self.source_attribute = source_attribute
        self.dn_part = dn_part
        self.script_context = script_context
        self.constant_value = constant_value


class ChangeNotReimported(Model):
    """The changes which are not re-imported.

    :param delta: The delta changes that is not re-imported.
    :type delta:
     ~azure.mgmt.adhybridhealthservice.models.ChangeNotReimportedDelta
    :param entry: The object entry in a change that is not re-imported.
    :type entry:
     ~azure.mgmt.adhybridhealthservice.models.ChangeNotReimportedEntry
    """

    _attribute_map = {
        'delta': {'key': 'delta', 'type': 'ChangeNotReimportedDelta'},
        'entry': {'key': 'entry', 'type': 'ChangeNotReimportedEntry'},
    }

    def __init__(self, *, delta=None, entry=None, **kwargs) -> None:
        super(ChangeNotReimported, self).__init__(**kwargs)
        self.delta = delta
        self.entry = entry


class ChangeNotReimportedDelta(Model):
    """The delta in a change that is not re-imported.

    :param anchor: The anchor.
    :type anchor: str
    :param dn_attributes: The delta attributes for distinguished names.
    :type dn_attributes:
     list[~azure.mgmt.adhybridhealthservice.models.AttributeDelta]
    :param attributes: The attributes.
    :type attributes:
     list[~azure.mgmt.adhybridhealthservice.models.AttributeDelta]
    :param operation_type: The operation type. Possible values include:
     'Undefined', 'None', 'Add', 'Replace', 'Update', 'Delete', 'Obsolete',
     'DeleteAdd'
    :type operation_type: str or
     ~azure.mgmt.adhybridhealthservice.models.DeltaOperationType
    """

    _attribute_map = {
        'anchor': {'key': 'anchor', 'type': 'str'},
        'dn_attributes': {'key': 'dnAttributes', 'type': '[AttributeDelta]'},
        'attributes': {'key': 'attributes', 'type': '[AttributeDelta]'},
        'operation_type': {'key': 'operationType', 'type': 'str'},
    }

    def __init__(self, *, anchor: str=None, dn_attributes=None, attributes=None, operation_type=None, **kwargs) -> None:
        super(ChangeNotReimportedDelta, self).__init__(**kwargs)
        self.anchor = anchor
        self.dn_attributes = dn_attributes
        self.attributes = attributes
        self.operation_type = operation_type


class ChangeNotReimportedEntry(Model):
    """The object entry in a change that is not re-imported.

    :param anchor: The anchor.
    :type anchor: str
    :param parent_anchor: The parent anchor.
    :type parent_anchor: str
    :param primary_object_class: The primary object class.
    :type primary_object_class: str
    :param object_classes: The list of object classes.
    :type object_classes: list[str]
    :param dn_attributes: The delta attributes for distinguished names.
    :type dn_attributes:
     list[~azure.mgmt.adhybridhealthservice.models.AttributeDelta]
    :param attributes: The attributes.
    :type attributes:
     list[~azure.mgmt.adhybridhealthservice.models.AttributeDelta]
    :param dn: The distinguished name.
    :type dn: str
    """

    _attribute_map = {
        'anchor': {'key': 'anchor', 'type': 'str'},
        'parent_anchor': {'key': 'parentAnchor', 'type': 'str'},
        'primary_object_class': {'key': 'primaryObjectClass', 'type': 'str'},
        'object_classes': {'key': 'objectClasses', 'type': '[str]'},
        'dn_attributes': {'key': 'dnAttributes', 'type': '[AttributeDelta]'},
        'attributes': {'key': 'attributes', 'type': '[AttributeDelta]'},
        'dn': {'key': 'dn', 'type': 'str'},
    }

    def __init__(self, *, anchor: str=None, parent_anchor: str=None, primary_object_class: str=None, object_classes=None, dn_attributes=None, attributes=None, dn: str=None, **kwargs) -> None:
        super(ChangeNotReimportedEntry, self).__init__(**kwargs)
        self.anchor = anchor
        self.parent_anchor = parent_anchor
        self.primary_object_class = primary_object_class
        self.object_classes = object_classes
        self.dn_attributes = dn_attributes
        self.attributes = attributes
        self.dn = dn


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class Connector(Model):
    """The connect details.

    :param connector_id: The connector Id.
    :type connector_id: str
    :param id: The connector Id.
    :type id: str
    :param name: The connector name.
    :type name: str
    :param version: The connector version
    :type version: int
    :param type: The connector type.
    :type type: str
    :param description: The connector description.
    :type description: str
    :param schema_xml: The schema xml for the connector.
    :type schema_xml: str
    :param password_management_settings: The password management settings of
     the connector.
    :type password_management_settings: object
    :param password_hash_sync_configuration: The password hash synchronization
     configuration of the connector.
    :type password_hash_sync_configuration: object
    :param time_created: The date and time when this connector was created.
    :type time_created: datetime
    :param time_last_modified: The date and time when this connector was last
     modified.
    :type time_last_modified: datetime
    :param partitions: The partitions of the connector.
    :type partitions: list[~azure.mgmt.adhybridhealthservice.models.Partition]
    :param run_profiles: The run profiles of the connector.
    :type run_profiles:
     list[~azure.mgmt.adhybridhealthservice.models.RunProfile]
    :param classes_included: The class inclusion list of the connector.
    :type classes_included: list[str]
    :param attributes_included: The attribute inclusion list of the connector.
    :type attributes_included: list[str]
    """

    _attribute_map = {
        'connector_id': {'key': 'connectorId', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'version': {'key': 'version', 'type': 'int'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'schema_xml': {'key': 'schemaXml', 'type': 'str'},
        'password_management_settings': {'key': 'passwordManagementSettings', 'type': 'object'},
        'password_hash_sync_configuration': {'key': 'passwordHashSyncConfiguration', 'type': 'object'},
        'time_created': {'key': 'timeCreated', 'type': 'iso-8601'},
        'time_last_modified': {'key': 'timeLastModified', 'type': 'iso-8601'},
        'partitions': {'key': 'partitions', 'type': '[Partition]'},
        'run_profiles': {'key': 'runProfiles', 'type': '[RunProfile]'},
        'classes_included': {'key': 'classesIncluded', 'type': '[str]'},
        'attributes_included': {'key': 'attributesIncluded', 'type': '[str]'},
    }

    def __init__(self, *, connector_id: str=None, id: str=None, name: str=None, version: int=None, type: str=None, description: str=None, schema_xml: str=None, password_management_settings=None, password_hash_sync_configuration=None, time_created=None, time_last_modified=None, partitions=None, run_profiles=None, classes_included=None, attributes_included=None, **kwargs) -> None:
        super(Connector, self).__init__(**kwargs)
        self.connector_id = connector_id
        self.id = id
        self.name = name
        self.version = version
        self.type = type
        self.description = description
        self.schema_xml = schema_xml
        self.password_management_settings = password_management_settings
        self.password_hash_sync_configuration = password_hash_sync_configuration
        self.time_created = time_created
        self.time_last_modified = time_last_modified
        self.partitions = partitions
        self.run_profiles = run_profiles
        self.classes_included = classes_included
        self.attributes_included = attributes_included


class ConnectorConnectionError(Model):
    """The connector connection error.

    :param id: The error Id.
    :type id: str
    :param run_step_result_id: The run step result Id.
    :type run_step_result_id: str
    :param connector_id: The connector Id.
    :type connector_id: str
    :param type: The type of error.
    :type type: str
    :param error_code: The error code.
    :type error_code: str
    :param message: The message for the connection error.
    :type message: str
    :param time_occured: The time when the connection error occurred.
    :type time_occured: datetime
    :param server: The server where the connection error happened.
    :type server: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'run_step_result_id': {'key': 'runStepResultId', 'type': 'str'},
        'connector_id': {'key': 'connectorId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'error_code': {'key': 'errorCode', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'time_occured': {'key': 'timeOccured', 'type': 'iso-8601'},
        'server': {'key': 'server', 'type': 'str'},
    }

    def __init__(self, *, id: str=None, run_step_result_id: str=None, connector_id: str=None, type: str=None, error_code: str=None, message: str=None, time_occured=None, server: str=None, **kwargs) -> None:
        super(ConnectorConnectionError, self).__init__(**kwargs)
        self.id = id
        self.run_step_result_id = run_step_result_id
        self.connector_id = connector_id
        self.type = type
        self.error_code = error_code
        self.message = message
        self.time_occured = time_occured
        self.server = server


class ConnectorConnectionErrors(Model):
    """The list of connector connection errors.

    :param value: The value returned by the operation.
    :type value:
     list[~azure.mgmt.adhybridhealthservice.models.ConnectorConnectionError]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ConnectorConnectionError]'},
    }

    def __init__(self, *, value=None, **kwargs) -> None:
        super(ConnectorConnectionErrors, self).__init__(**kwargs)
        self.value = value


class ConnectorMetadata(Model):
    """Gets the list of connectors and run profile names.

    :param connectors: The list of connectors.
    :type connectors:
     list[~azure.mgmt.adhybridhealthservice.models.ConnectorMetadataDetails]
    :param run_profile_names: The list of run profile names.
    :type run_profile_names: list[str]
    """

    _attribute_map = {
        'connectors': {'key': 'connectors', 'type': '[ConnectorMetadataDetails]'},
        'run_profile_names': {'key': 'runProfileNames', 'type': '[str]'},
    }

    def __init__(self, *, connectors=None, run_profile_names=None, **kwargs) -> None:
        super(ConnectorMetadata, self).__init__(**kwargs)
        self.connectors = connectors
        self.run_profile_names = run_profile_names


class ConnectorMetadataDetails(Model):
    """Details of the connector.

    :param connector_id: The Connector Id.
    :type connector_id: str
    :param connector_display_name: The Connector Display Name
    :type connector_display_name: str
    """

    _attribute_map = {
        'connector_id': {'key': 'connectorId', 'type': 'str'},
        'connector_display_name': {'key': 'connectorDisplayName', 'type': 'str'},
    }

    def __init__(self, *, connector_id: str=None, connector_display_name: str=None, **kwargs) -> None:
        super(ConnectorMetadataDetails, self).__init__(**kwargs)
        self.connector_id = connector_id
        self.connector_display_name = connector_display_name


class ConnectorObjectError(Model):
    """The connector object error.

    :param id: The error Id.
    :type id: str
    :param run_step_result_id: The run step result Id.
    :type run_step_result_id: str
    :param connector_id: The connector Id.
    :type connector_id: str
    :param type: The type of error.
    :type type: str
    :param error_code: The error code.
    :type error_code: str
    :param message: The message for the object error.
    :type message: str
    :param entry_number: The entry number for object error occurred.
    :type entry_number: int
    :param line_number: The line number for the object error.
    :type line_number: int
    :param column_number: The column number for the object error.
    :type column_number: int
    :param dn: The distinguished name of the object.
    :type dn: str
    :param anchor: The name for the anchor of the object.
    :type anchor: str
    :param attribute_name: The attribute name of the object.
    :type attribute_name: str
    :param server_error_detail: The server side error details.
    :type server_error_detail: str
    :param values: The value corresponding to attribute name.
    :type values: list[str]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'run_step_result_id': {'key': 'runStepResultId', 'type': 'str'},
        'connector_id': {'key': 'connectorId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'error_code': {'key': 'errorCode', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'entry_number': {'key': 'entryNumber', 'type': 'int'},
        'line_number': {'key': 'lineNumber', 'type': 'int'},
        'column_number': {'key': 'columnNumber', 'type': 'int'},
        'dn': {'key': 'dn', 'type': 'str'},
        'anchor': {'key': 'anchor', 'type': 'str'},
        'attribute_name': {'key': 'attributeName', 'type': 'str'},
        'server_error_detail': {'key': 'serverErrorDetail', 'type': 'str'},
        'values': {'key': 'values', 'type': '[str]'},
    }

    def __init__(self, *, id: str=None, run_step_result_id: str=None, connector_id: str=None, type: str=None, error_code: str=None, message: str=None, entry_number: int=None, line_number: int=None, column_number: int=None, dn: str=None, anchor: str=None, attribute_name: str=None, server_error_detail: str=None, values=None, **kwargs) -> None:
        super(ConnectorObjectError, self).__init__(**kwargs)
        self.id = id
        self.run_step_result_id = run_step_result_id
        self.connector_id = connector_id
        self.type = type
        self.error_code = error_code
        self.message = message
        self.entry_number = entry_number
        self.line_number = line_number
        self.column_number = column_number
        self.dn = dn
        self.anchor = anchor
        self.attribute_name = attribute_name
        self.server_error_detail = server_error_detail
        self.values = values


class ConnectorObjectErrors(Model):
    """The list of connector object errors.

    :param value: The value returned by the operation.
    :type value:
     list[~azure.mgmt.adhybridhealthservice.models.ConnectorObjectError]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ConnectorObjectError]'},
    }

    def __init__(self, *, value=None, **kwargs) -> None:
        super(ConnectorObjectErrors, self).__init__(**kwargs)
        self.value = value


class Credential(Model):
    """The credential for a given server.

    :param identifier: The credential identifier.
    :type identifier: str
    :param type: The type of credential.
    :type type: str
    :param credential_data: The credential data.
    :type credential_data: list[str]
    """

    _attribute_map = {
        'identifier': {'key': 'identifier', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'credential_data': {'key': 'credentialData', 'type': '[str]'},
    }

    def __init__(self, *, identifier: str=None, type: str=None, credential_data=None, **kwargs) -> None:
        super(Credential, self).__init__(**kwargs)
        self.identifier = identifier
        self.type = type
        self.credential_data = credential_data


class Dimension(Model):
    """The connector object error.

    :param health: The health status for the domain controller. Possible
     values include: 'Healthy', 'Warning', 'Error', 'NotMonitored', 'Missing'
    :type health: str or ~azure.mgmt.adhybridhealthservice.models.HealthStatus
    :param simple_properties: List of service specific configuration
     properties.
    :type simple_properties: object
    :param active_alerts: The count of alerts that are currently active for
     the service.
    :type active_alerts: int
    :param additional_information: The additional information related to the
     service.
    :type additional_information: str
    :param last_updated: The date or time , in UTC, when the service
     properties were last updated.
    :type last_updated: datetime
    :param display_name: The display name of the service.
    :type display_name: str
    :param resolved_alerts: The total count of alerts that has been resolved
     for the service.
    :type resolved_alerts: int
    :param signature: The signature of the service.
    :type signature: str
    :param type: The service type for the services onboarded to Azure Active
     Directory Connect Health. Depending on whether the service is monitoring,
     ADFS, Sync or ADDS roles, the service type can either be
     AdFederationService or AadSyncService or AdDomainService.
    :type type: str
    """

    _attribute_map = {
        'health': {'key': 'health', 'type': 'str'},
        'simple_properties': {'key': 'simpleProperties', 'type': 'object'},
        'active_alerts': {'key': 'activeAlerts', 'type': 'int'},
        'additional_information': {'key': 'additionalInformation', 'type': 'str'},
        'last_updated': {'key': 'lastUpdated', 'type': 'iso-8601'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'resolved_alerts': {'key': 'resolvedAlerts', 'type': 'int'},
        'signature': {'key': 'signature', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, *, health=None, simple_properties=None, active_alerts: int=None, additional_information: str=None, last_updated=None, display_name: str=None, resolved_alerts: int=None, signature: str=None, type: str=None, **kwargs) -> None:
        super(Dimension, self).__init__(**kwargs)
        self.health = health
        self.simple_properties = simple_properties
        self.active_alerts = active_alerts
        self.additional_information = additional_information
        self.last_updated = last_updated
        self.display_name = display_name
        self.resolved_alerts = resolved_alerts
        self.signature = signature
        self.type = type


class Display(Model):
    """Displays the details related to operations supported by Azure Active
    Directory Connect Health.

    :param description:  The description for the operation.
    :type description: str
    :param operation: The details of the operation.
    :type operation: str
    :param provider: The provider name.
    :type provider: str
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'provider': {'key': 'provider', 'type': 'str'},
    }

    def __init__(self, *, description: str=None, operation: str=None, provider: str=None, **kwargs) -> None:
        super(Display, self).__init__(**kwargs)
        self.description = description
        self.operation = operation
        self.provider = provider


class ErrorCount(Model):
    """The error count details.

    :param error_bucket: The error bucket.
    :type error_bucket: str
    :param count: The error count.
    :type count: int
    :param truncated: Indicates if the error count is truncated or not.
    :type truncated: bool
    """

    _attribute_map = {
        'error_bucket': {'key': 'errorBucket', 'type': 'str'},
        'count': {'key': 'count', 'type': 'int'},
        'truncated': {'key': 'truncated', 'type': 'bool'},
    }

    def __init__(self, *, error_bucket: str=None, count: int=None, truncated: bool=None, **kwargs) -> None:
        super(ErrorCount, self).__init__(**kwargs)
        self.error_bucket = error_bucket
        self.count = count
        self.truncated = truncated


class ErrorDetail(Model):
    """The error details.

    :param description: The error description.
    :type description: str
    :param kb_url: The knowledge base article url which contains more
     information about the error.
    :type kb_url: str
    :param detail: Additional details related to the error.
    :type detail: str
    :param objects_with_sync_error: The list of objects with sync errors.
    :type objects_with_sync_error:
     ~azure.mgmt.adhybridhealthservice.models.ObjectWithSyncError
    :param object_with_sync_error:  The object with sync error.
    :type object_with_sync_error:
     ~azure.mgmt.adhybridhealthservice.models.MergedExportError
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'kb_url': {'key': 'kbUrl', 'type': 'str'},
        'detail': {'key': 'detail', 'type': 'str'},
        'objects_with_sync_error': {'key': 'objectsWithSyncError', 'type': 'ObjectWithSyncError'},
        'object_with_sync_error': {'key': 'objectWithSyncError', 'type': 'MergedExportError'},
    }

    def __init__(self, *, description: str=None, kb_url: str=None, detail: str=None, objects_with_sync_error=None, object_with_sync_error=None, **kwargs) -> None:
        super(ErrorDetail, self).__init__(**kwargs)
        self.description = description
        self.kb_url = kb_url
        self.detail = detail
        self.objects_with_sync_error = objects_with_sync_error
        self.object_with_sync_error = object_with_sync_error


class ErrorReportUsersEntry(Model):
    """The bad password login attempt details.

    :param user_id: The user ID value.
    :type user_id: str
    :param ip_address: The IP address corresponding to the last error event.
    :type ip_address: str
    :param last_updated: The date and time when the last error event was
     logged.
    :type last_updated: datetime
    :param unique_ip_addresses: The list of unique IP addresses.
    :type unique_ip_addresses: str
    :param total_error_attempts: The total count of specific error events.
    :type total_error_attempts: int
    """

    _attribute_map = {
        'user_id': {'key': 'userId', 'type': 'str'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'last_updated': {'key': 'lastUpdated', 'type': 'iso-8601'},
        'unique_ip_addresses': {'key': 'uniqueIpAddresses', 'type': 'str'},
        'total_error_attempts': {'key': 'totalErrorAttempts', 'type': 'int'},
    }

    def __init__(self, *, user_id: str=None, ip_address: str=None, last_updated=None, unique_ip_addresses: str=None, total_error_attempts: int=None, **kwargs) -> None:
        super(ErrorReportUsersEntry, self).__init__(**kwargs)
        self.user_id = user_id
        self.ip_address = ip_address
        self.last_updated = last_updated
        self.unique_ip_addresses = unique_ip_addresses
        self.total_error_attempts = total_error_attempts


class ExportError(Model):
    """The export error details.

    :param id: The error Id.
    :type id: str
    :param run_step_result_id: The run step result Id.
    :type run_step_result_id: str
    :param connector_id: The connector Id.
    :type connector_id: str
    :param type: The type of error.
    :type type: str
    :param error_code: The error code.
    :type error_code: str
    :param message: The export error message.
    :type message: str
    :param server_error_detail: The server error detail.
    :type server_error_detail: str
    :param time_first_occured: The date and time when the export error first
     occurred.
    :type time_first_occured: datetime
    :param retry_count: The retry count.
    :type retry_count: int
    :param cs_object_id: The cloud object Id.
    :type cs_object_id: str
    :param dn: The distinguished name.
    :type dn: str
    :param min_limit: The minimum limit.
    :type min_limit: str
    :param max_limit: The maximum limit.
    :type max_limit: str
    :param cloud_anchor: The name of the cloud anchor.
    :type cloud_anchor: str
    :param attribute_name: The attribute name.
    :type attribute_name: str
    :param attribute_value: The attribute value.
    :type attribute_value: str
    :param attribute_multi_value: Indicates if the attribute is multi valued
     or not.
    :type attribute_multi_value: bool
    :param object_id_conflict: The object Id with which there was an attribute
     conflict.
    :type object_id_conflict: str
    :param sam_account_name: The SAM account name.
    :type sam_account_name: str
    :param ad_object_type: The AD object type
    :type ad_object_type: str
    :param ad_object_guid: The AD object guid.
    :type ad_object_guid: str
    :param ad_display_name: The display name for the AD object.
    :type ad_display_name: str
    :param ad_source_of_authority: The source of authority for the AD object.
    :type ad_source_of_authority: str
    :param ad_source_anchor: The AD source anchor.
    :type ad_source_anchor: str
    :param ad_user_principal_name: The user principal name for the AD object.
    :type ad_user_principal_name: str
    :param ad_distinguished_name: The distinguished name for the AD object.
    :type ad_distinguished_name: str
    :param ad_mail: The email for the AD object.
    :type ad_mail: str
    :param time_occured: The date and time of occurrence.
    :type time_occured: datetime
    :param aad_object_type: The AAD side object type.
    :type aad_object_type: str
    :param aad_object_guid: The AAD side object guid.
    :type aad_object_guid: str
    :param aad_display_name: The AAD side display name
    :type aad_display_name: str
    :param aad_source_of_authority: The AAD side source of authority for the
     object.
    :type aad_source_of_authority: str
    :param aad_user_principal_name: The AAD side user principal name.
    :type aad_user_principal_name: str
    :param aad_distinguished_name: The AAD side distinguished name for the
     object.
    :type aad_distinguished_name: str
    :param aad_mail: The AAD side email for the object.
    :type aad_mail: str
    :param last_dir_sync_time: The date and time of last sync run.
    :type last_dir_sync_time: datetime
    :param modified_attribute_value: The modified attribute value.
    :type modified_attribute_value: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'run_step_result_id': {'key': 'runStepResultId', 'type': 'str'},
        'connector_id': {'key': 'connectorId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'error_code': {'key': 'errorCode', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'server_error_detail': {'key': 'serverErrorDetail', 'type': 'str'},
        'time_first_occured': {'key': 'timeFirstOccured', 'type': 'iso-8601'},
        'retry_count': {'key': 'retryCount', 'type': 'int'},
        'cs_object_id': {'key': 'csObjectId', 'type': 'str'},
        'dn': {'key': 'dn', 'type': 'str'},
        'min_limit': {'key': 'minLimit', 'type': 'str'},
        'max_limit': {'key': 'maxLimit', 'type': 'str'},
        'cloud_anchor': {'key': 'cloudAnchor', 'type': 'str'},
        'attribute_name': {'key': 'attributeName', 'type': 'str'},
        'attribute_value': {'key': 'attributeValue', 'type': 'str'},
        'attribute_multi_value': {'key': 'attributeMultiValue', 'type': 'bool'},
        'object_id_conflict': {'key': 'objectIdConflict', 'type': 'str'},
        'sam_account_name': {'key': 'samAccountName', 'type': 'str'},
        'ad_object_type': {'key': 'adObjectType', 'type': 'str'},
        'ad_object_guid': {'key': 'adObjectGuid', 'type': 'str'},
        'ad_display_name': {'key': 'adDisplayName', 'type': 'str'},
        'ad_source_of_authority': {'key': 'adSourceOfAuthority', 'type': 'str'},
        'ad_source_anchor': {'key': 'adSourceAnchor', 'type': 'str'},
        'ad_user_principal_name': {'key': 'adUserPrincipalName', 'type': 'str'},
        'ad_distinguished_name': {'key': 'adDistinguishedName', 'type': 'str'},
        'ad_mail': {'key': 'adMail', 'type': 'str'},
        'time_occured': {'key': 'timeOccured', 'type': 'iso-8601'},
        'aad_object_type': {'key': 'aadObjectType', 'type': 'str'},
        'aad_object_guid': {'key': 'aadObjectGuid', 'type': 'str'},
        'aad_display_name': {'key': 'aadDisplayName', 'type': 'str'},
        'aad_source_of_authority': {'key': 'aadSourceOfAuthority', 'type': 'str'},
        'aad_user_principal_name': {'key': 'aadUserPrincipalName', 'type': 'str'},
        'aad_distinguished_name': {'key': 'aadDistinguishedName', 'type': 'str'},
        'aad_mail': {'key': 'aadMail', 'type': 'str'},
        'last_dir_sync_time': {'key': 'lastDirSyncTime', 'type': 'iso-8601'},
        'modified_attribute_value': {'key': 'modifiedAttributeValue', 'type': 'str'},
    }

    def __init__(self, *, id: str=None, run_step_result_id: str=None, connector_id: str=None, type: str=None, error_code: str=None, message: str=None, server_error_detail: str=None, time_first_occured=None, retry_count: int=None, cs_object_id: str=None, dn: str=None, min_limit: str=None, max_limit: str=None, cloud_anchor: str=None, attribute_name: str=None, attribute_value: str=None, attribute_multi_value: bool=None, object_id_conflict: str=None, sam_account_name: str=None, ad_object_type: str=None, ad_object_guid: str=None, ad_display_name: str=None, ad_source_of_authority: str=None, ad_source_anchor: str=None, ad_user_principal_name: str=None, ad_distinguished_name: str=None, ad_mail: str=None, time_occured=None, aad_object_type: str=None, aad_object_guid: str=None, aad_display_name: str=None, aad_source_of_authority: str=None, aad_user_principal_name: str=None, aad_distinguished_name: str=None, aad_mail: str=None, last_dir_sync_time=None, modified_attribute_value: str=None, **kwargs) -> None:
        super(ExportError, self).__init__(**kwargs)
        self.id = id
        self.run_step_result_id = run_step_result_id
        self.connector_id = connector_id
        self.type = type
        self.error_code = error_code
        self.message = message
        self.server_error_detail = server_error_detail
        self.time_first_occured = time_first_occured
        self.retry_count = retry_count
        self.cs_object_id = cs_object_id
        self.dn = dn
        self.min_limit = min_limit
        self.max_limit = max_limit
        self.cloud_anchor = cloud_anchor
        self.attribute_name = attribute_name
        self.attribute_value = attribute_value
        self.attribute_multi_value = attribute_multi_value
        self.object_id_conflict = object_id_conflict
        self.sam_account_name = sam_account_name
        self.ad_object_type = ad_object_type
        self.ad_object_guid = ad_object_guid
        self.ad_display_name = ad_display_name
        self.ad_source_of_authority = ad_source_of_authority
        self.ad_source_anchor = ad_source_anchor
        self.ad_user_principal_name = ad_user_principal_name
        self.ad_distinguished_name = ad_distinguished_name
        self.ad_mail = ad_mail
        self.time_occured = time_occured
        self.aad_object_type = aad_object_type
        self.aad_object_guid = aad_object_guid
        self.aad_display_name = aad_display_name
        self.aad_source_of_authority = aad_source_of_authority
        self.aad_user_principal_name = aad_user_principal_name
        self.aad_distinguished_name = aad_distinguished_name
        self.aad_mail = aad_mail
        self.last_dir_sync_time = last_dir_sync_time
        self.modified_attribute_value = modified_attribute_value


class ExportErrors(Model):
    """The list of export errors.

    :param value: The value returned by the operation.
    :type value: list[~azure.mgmt.adhybridhealthservice.models.ExportError]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ExportError]'},
    }

    def __init__(self, *, value=None, **kwargs) -> None:
        super(ExportErrors, self).__init__(**kwargs)
        self.value = value


class ExportStatus(Model):
    """The details of the export status.

    :param service_id: The id of the service for whom the export status is
     being reported.
    :type service_id: str
    :param service_member_id: The server Id for whom the export status is
     being reported.
    :type service_member_id: str
    :param end_time: The date and time when the export ended.
    :type end_time: datetime
    :param run_step_result_id: The run step result Id.
    :type run_step_result_id: str
    """

    _attribute_map = {
        'service_id': {'key': 'serviceId', 'type': 'str'},
        'service_member_id': {'key': 'serviceMemberId', 'type': 'str'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'run_step_result_id': {'key': 'runStepResultId', 'type': 'str'},
    }

    def __init__(self, *, service_id: str=None, service_member_id: str=None, end_time=None, run_step_result_id: str=None, **kwargs) -> None:
        super(ExportStatus, self).__init__(**kwargs)
        self.service_id = service_id
        self.service_member_id = service_member_id
        self.end_time = end_time
        self.run_step_result_id = run_step_result_id


class ExtensionErrorInfo(Model):
    """The extension error details.

    :param extension_name: The extension name.
    :type extension_name: str
    :param extension_context: The extension context.
    :type extension_context: str
    :param call_stack: The call stack for the error.
    :type call_stack: str
    """

    _attribute_map = {
        'extension_name': {'key': 'extensionName', 'type': 'str'},
        'extension_context': {'key': 'extensionContext', 'type': 'str'},
        'call_stack': {'key': 'callStack', 'type': 'str'},
    }

    def __init__(self, *, extension_name: str=None, extension_context: str=None, call_stack: str=None, **kwargs) -> None:
        super(ExtensionErrorInfo, self).__init__(**kwargs)
        self.extension_name = extension_name
        self.extension_context = extension_context
        self.call_stack = call_stack


class ForestSummary(Model):
    """The forest summary for an ADDS domain.

    :param forest_name: The forest name.
    :type forest_name: str
    :param domain_count: The domain count.
    :type domain_count: int
    :param site_count: The site count.
    :type site_count: int
    :param monitored_dc_count: The number of domain controllers that are
     monitored by Azure Active Directory Connect Health.
    :type monitored_dc_count: int
    :param total_dc_count: The total domain controllers.
    :type total_dc_count: int
    :param domains: The list of domain controller names.
    :type domains: list[str]
    :param sites: The list of site names.
    :type sites: list[str]
    """

    _attribute_map = {
        'forest_name': {'key': 'forestName', 'type': 'str'},
        'domain_count': {'key': 'domainCount', 'type': 'int'},
        'site_count': {'key': 'siteCount', 'type': 'int'},
        'monitored_dc_count': {'key': 'monitoredDcCount', 'type': 'int'},
        'total_dc_count': {'key': 'totalDcCount', 'type': 'int'},
        'domains': {'key': 'domains', 'type': '[str]'},
        'sites': {'key': 'sites', 'type': '[str]'},
    }

    def __init__(self, *, forest_name: str=None, domain_count: int=None, site_count: int=None, monitored_dc_count: int=None, total_dc_count: int=None, domains=None, sites=None, **kwargs) -> None:
        super(ForestSummary, self).__init__(**kwargs)
        self.forest_name = forest_name
        self.domain_count = domain_count
        self.site_count = site_count
        self.monitored_dc_count = monitored_dc_count
        self.total_dc_count = total_dc_count
        self.domains = domains
        self.sites = sites


class GlobalConfiguration(Model):
    """The global configuration settings.

    :param version: The version for the global configuration.
    :type version: int
    :param schema_xml: The schema for the configuration.
    :type schema_xml: str
    :param password_sync_enabled: Indicates if password sync is enabled or
     not.
    :type password_sync_enabled: bool
    :param num_saved_pwd_event: The number of saved password events.
    :type num_saved_pwd_event: int
    :param feature_set: The list of additional feature sets.
    :type feature_set: list[~azure.mgmt.adhybridhealthservice.models.Item]
    """

    _attribute_map = {
        'version': {'key': 'version', 'type': 'int'},
        'schema_xml': {'key': 'schemaXml', 'type': 'str'},
        'password_sync_enabled': {'key': 'passwordSyncEnabled', 'type': 'bool'},
        'num_saved_pwd_event': {'key': 'numSavedPwdEvent', 'type': 'int'},
        'feature_set': {'key': 'featureSet', 'type': '[Item]'},
    }

    def __init__(self, *, version: int=None, schema_xml: str=None, password_sync_enabled: bool=None, num_saved_pwd_event: int=None, feature_set=None, **kwargs) -> None:
        super(GlobalConfiguration, self).__init__(**kwargs)
        self.version = version
        self.schema_xml = schema_xml
        self.password_sync_enabled = password_sync_enabled
        self.num_saved_pwd_event = num_saved_pwd_event
        self.feature_set = feature_set


class HelpLink(Model):
    """The help link which contains more information related to an alert.

    :param title: The title for the link.
    :type title: str
    :param url: The url for the help document.
    :type url: str
    """

    _attribute_map = {
        'title': {'key': 'title', 'type': 'str'},
        'url': {'key': 'url', 'type': 'str'},
    }

    def __init__(self, *, title: str=None, url: str=None, **kwargs) -> None:
        super(HelpLink, self).__init__(**kwargs)
        self.title = title
        self.url = url


class Hotfix(Model):
    """The details of the hotfix installed in the server.

    :param kb_name: The name of the hotfix KB.
    :type kb_name: str
    :param link: The link to the KB Article.
    :type link: str
    :param installed_date: The date and time, in UTC, when the KB was
     installed in the server.
    :type installed_date: datetime
    """

    _attribute_map = {
        'kb_name': {'key': 'kbName', 'type': 'str'},
        'link': {'key': 'link', 'type': 'str'},
        'installed_date': {'key': 'installedDate', 'type': 'iso-8601'},
    }

    def __init__(self, *, kb_name: str=None, link: str=None, installed_date=None, **kwargs) -> None:
        super(Hotfix, self).__init__(**kwargs)
        self.kb_name = kb_name
        self.link = link
        self.installed_date = installed_date


class Hotfixes(Model):
    """The list of hotfixes installed in the server.

    :param value: The value returned by the operation.
    :type value: list[~azure.mgmt.adhybridhealthservice.models.Hotfix]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Hotfix]'},
    }

    def __init__(self, *, value=None, **kwargs) -> None:
        super(Hotfixes, self).__init__(**kwargs)
        self.value = value


class ImportError(Model):
    """The import error details.

    :param id: The error Id.
    :type id: str
    :param run_step_result_id: The run step result Id.
    :type run_step_result_id: str
    :param connector_id: The connector Id.
    :type connector_id: str
    :param type: The type of error.
    :type type: str
    :param time_occurred: The time when the import error occurred.
    :type time_occurred: datetime
    :param time_first_occurred: The time when the import error first occurred.
    :type time_first_occurred: datetime
    :param retry_count: The retry count.
    :type retry_count: int
    :param algorithm_step_type: The operation type specific  to error
     reporting. Possible values include: 'Undefined', 'Staging',
     'ConnectorFilter', 'Join', 'Projection', 'ImportFlow', 'Provisioning',
     'ValidateConnectorFilter', 'Deprovisioning', 'ExportFlow', 'MvDeletion',
     'Recall', 'MvObjectTypeChange'
    :type algorithm_step_type: str or
     ~azure.mgmt.adhybridhealthservice.models.AlgorithmStepType
    :param change_not_reimported: The change details that is not re-imported.
    :type change_not_reimported:
     ~azure.mgmt.adhybridhealthservice.models.ChangeNotReimported
    :param extension_error_info: The extension error information.
    :type extension_error_info:
     ~azure.mgmt.adhybridhealthservice.models.ExtensionErrorInfo
    :param rule_error_info: The error details in legacy rule processing.
    :type rule_error_info:
     ~azure.mgmt.adhybridhealthservice.models.RuleErrorInfo
    :param cs_object_id: The object Id.
    :type cs_object_id: str
    :param dn: The distinguished name.
    :type dn: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'run_step_result_id': {'key': 'runStepResultId', 'type': 'str'},
        'connector_id': {'key': 'connectorId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'time_occurred': {'key': 'timeOccurred', 'type': 'iso-8601'},
        'time_first_occurred': {'key': 'timeFirstOccurred', 'type': 'iso-8601'},
        'retry_count': {'key': 'retryCount', 'type': 'int'},
        'algorithm_step_type': {'key': 'algorithmStepType', 'type': 'str'},
        'change_not_reimported': {'key': 'changeNotReimported', 'type': 'ChangeNotReimported'},
        'extension_error_info': {'key': 'extensionErrorInfo', 'type': 'ExtensionErrorInfo'},
        'rule_error_info': {'key': 'ruleErrorInfo', 'type': 'RuleErrorInfo'},
        'cs_object_id': {'key': 'csObjectId', 'type': 'str'},
        'dn': {'key': 'dn', 'type': 'str'},
    }

    def __init__(self, *, id: str=None, run_step_result_id: str=None, connector_id: str=None, type: str=None, time_occurred=None, time_first_occurred=None, retry_count: int=None, algorithm_step_type=None, change_not_reimported=None, extension_error_info=None, rule_error_info=None, cs_object_id: str=None, dn: str=None, **kwargs) -> None:
        super(ImportError, self).__init__(**kwargs)
        self.id = id
        self.run_step_result_id = run_step_result_id
        self.connector_id = connector_id
        self.type = type
        self.time_occurred = time_occurred
        self.time_first_occurred = time_first_occurred
        self.retry_count = retry_count
        self.algorithm_step_type = algorithm_step_type
        self.change_not_reimported = change_not_reimported
        self.extension_error_info = extension_error_info
        self.rule_error_info = rule_error_info
        self.cs_object_id = cs_object_id
        self.dn = dn


class ImportErrors(Model):
    """The list of import errors.

    :param value: The value returned by the operation.
    :type value: list[~azure.mgmt.adhybridhealthservice.models.ImportError]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ImportError]'},
    }

    def __init__(self, *, value=None, **kwargs) -> None:
        super(ImportErrors, self).__init__(**kwargs)
        self.value = value


class InboundReplicationNeighbor(Model):
    """The replication summary for the domain controller inbound neighbor.

    :param source_domain_controller: The name of the source domain controller.
    :type source_domain_controller: str
    :param consecutive_failure_count: The number of consecutive failure
     counts.
    :type consecutive_failure_count: int
    :param naming_context: The naming context.
    :type naming_context: str
    :param status: The health status for the domain controller
    :type status: int
    :param last_attempted_sync: The last time a sync was attempted on the
     domain controller.
    :type last_attempted_sync: datetime
    :param last_successful_sync: The last time when a successful sync
     happened.
    :type last_successful_sync: datetime
    :param last_error_code: The last error code.
    :type last_error_code: int
    :param last_error_message: The error message of the last error.
    :type last_error_message: str
    :param error_title: The error title.
    :type error_title: str
    :param error_description: The error description.
    :type error_description: str
    :param fix_link: The link for the fix of the error.
    :type fix_link: str
    :param fix_details: The details of the fix.
    :type fix_details: str
    :param additional_info: The additional details.
    :type additional_info: str
    """

    _attribute_map = {
        'source_domain_controller': {'key': 'sourceDomainController', 'type': 'str'},
        'consecutive_failure_count': {'key': 'consecutiveFailureCount', 'type': 'int'},
        'naming_context': {'key': 'namingContext', 'type': 'str'},
        'status': {'key': 'status', 'type': 'int'},
        'last_attempted_sync': {'key': 'lastAttemptedSync', 'type': 'iso-8601'},
        'last_successful_sync': {'key': 'lastSuccessfulSync', 'type': 'iso-8601'},
        'last_error_code': {'key': 'lastErrorCode', 'type': 'int'},
        'last_error_message': {'key': 'lastErrorMessage', 'type': 'str'},
        'error_title': {'key': 'errorTitle', 'type': 'str'},
        'error_description': {'key': 'errorDescription', 'type': 'str'},
        'fix_link': {'key': 'fixLink', 'type': 'str'},
        'fix_details': {'key': 'fixDetails', 'type': 'str'},
        'additional_info': {'key': 'additionalInfo', 'type': 'str'},
    }

    def __init__(self, *, source_domain_controller: str=None, consecutive_failure_count: int=None, naming_context: str=None, status: int=None, last_attempted_sync=None, last_successful_sync=None, last_error_code: int=None, last_error_message: str=None, error_title: str=None, error_description: str=None, fix_link: str=None, fix_details: str=None, additional_info: str=None, **kwargs) -> None:
        super(InboundReplicationNeighbor, self).__init__(**kwargs)
        self.source_domain_controller = source_domain_controller
        self.consecutive_failure_count = consecutive_failure_count
        self.naming_context = naming_context
        self.status = status
        self.last_attempted_sync = last_attempted_sync
        self.last_successful_sync = last_successful_sync
        self.last_error_code = last_error_code
        self.last_error_message = last_error_message
        self.error_title = error_title
        self.error_description = error_description
        self.fix_link = fix_link
        self.fix_details = fix_details
        self.additional_info = additional_info


class InboundReplicationNeighbors(Model):
    """The list of replication summary for the domain controller inbound neighbor.

    :param value: The details of inbound replication neighbors.
    :type value:
     list[~azure.mgmt.adhybridhealthservice.models.InboundReplicationNeighbor]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[InboundReplicationNeighbor]'},
    }

    def __init__(self, *, value=None, **kwargs) -> None:
        super(InboundReplicationNeighbors, self).__init__(**kwargs)
        self.value = value


class IPAddressAggregate(Model):
    """The key value pair for properties.

    :param id: Unique ID for the entree
    :type id: str
    :param tenant_id: The tenant ID
    :type tenant_id: str
    :param service_id: The service ID
    :type service_id: str
    :param ip_address: The IP address from where the attempted login
     originated from.
    :type ip_address: str
    :param timestamp: When the event occurred
    :type timestamp: str
    :param first_audit_timestamp: The first audit timestamp
    :type first_audit_timestamp: str
    :param last_audit_timestamp: The last audit timestamp
    :type last_audit_timestamp: str
    :param extranet_lockout_error_count: The extranet lockout error count
    :type extranet_lockout_error_count: int
    :param bad_password_error_count: The bad password error count
    :type bad_password_error_count: int
    :param unique_usernames_attempted_count: The unique usernames attempted
    :type unique_usernames_attempted_count: int
    :param attempt_count_threshold_is_exceeded: A value indicating whether the
     attempt count threshold been exceeded
    :type attempt_count_threshold_is_exceeded: bool
    :param time_span: The duration of the event
    :type time_span: str
    :param is_whitelisted_ip_address: A value indicating whether the IP
     address has been whitelisted.
    :type is_whitelisted_ip_address: bool
    :param network_location: The network location
    :type network_location: str
    :param attempt_count_threshold_on_trigger: The attempted count threshold
     on trigger.
    :type attempt_count_threshold_on_trigger: int
    :param attempt_threshold_type_on_trigger: The attempted threshold type on
     trigger.
    :type attempt_threshold_type_on_trigger: str
    :param geographic_location: The geographic location.
    :type geographic_location: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'service_id': {'key': 'serviceId', 'type': 'str'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'timestamp': {'key': 'timestamp', 'type': 'str'},
        'first_audit_timestamp': {'key': 'firstAuditTimestamp', 'type': 'str'},
        'last_audit_timestamp': {'key': 'lastAuditTimestamp', 'type': 'str'},
        'extranet_lockout_error_count': {'key': 'extranetLockoutErrorCount', 'type': 'int'},
        'bad_password_error_count': {'key': 'badPasswordErrorCount', 'type': 'int'},
        'unique_usernames_attempted_count': {'key': 'uniqueUsernamesAttemptedCount', 'type': 'int'},
        'attempt_count_threshold_is_exceeded': {'key': 'attemptCountThresholdIsExceeded', 'type': 'bool'},
        'time_span': {'key': 'timeSpan', 'type': 'str'},
        'is_whitelisted_ip_address': {'key': 'isWhitelistedIpAddress', 'type': 'bool'},
        'network_location': {'key': 'networkLocation', 'type': 'str'},
        'attempt_count_threshold_on_trigger': {'key': 'attemptCountThresholdOnTrigger', 'type': 'int'},
        'attempt_threshold_type_on_trigger': {'key': 'attemptThresholdTypeOnTrigger', 'type': 'str'},
        'geographic_location': {'key': 'geographicLocation', 'type': 'str'},
    }

    def __init__(self, *, id: str=None, tenant_id: str=None, service_id: str=None, ip_address: str=None, timestamp: str=None, first_audit_timestamp: str=None, last_audit_timestamp: str=None, extranet_lockout_error_count: int=None, bad_password_error_count: int=None, unique_usernames_attempted_count: int=None, attempt_count_threshold_is_exceeded: bool=None, time_span: str=None, is_whitelisted_ip_address: bool=None, network_location: str=None, attempt_count_threshold_on_trigger: int=None, attempt_threshold_type_on_trigger: str=None, geographic_location: str=None, **kwargs) -> None:
        super(IPAddressAggregate, self).__init__(**kwargs)
        self.id = id
        self.tenant_id = tenant_id
        self.service_id = service_id
        self.ip_address = ip_address
        self.timestamp = timestamp
        self.first_audit_timestamp = first_audit_timestamp
        self.last_audit_timestamp = last_audit_timestamp
        self.extranet_lockout_error_count = extranet_lockout_error_count
        self.bad_password_error_count = bad_password_error_count
        self.unique_usernames_attempted_count = unique_usernames_attempted_count
        self.attempt_count_threshold_is_exceeded = attempt_count_threshold_is_exceeded
        self.time_span = time_span
        self.is_whitelisted_ip_address = is_whitelisted_ip_address
        self.network_location = network_location
        self.attempt_count_threshold_on_trigger = attempt_count_threshold_on_trigger
        self.attempt_threshold_type_on_trigger = attempt_threshold_type_on_trigger
        self.geographic_location = geographic_location


class IPAddressAggregateSetting(Model):
    """The key value pair for IP aggregate thresholds.

    :param id: Unique ID for the entree
    :type id: str
    :param bad_password_and_extranet_lockout_combined_daily_threshold: This
     threshold setting defines the per day trigger for a new event to be
     generated in the report.
    :type bad_password_and_extranet_lockout_combined_daily_threshold: int
    :param bad_password_and_extranet_lockout_combined_hourly_threshold: This
     threshold setting defines the per hour trigger for a new event to be
     generated in the report.
    :type bad_password_and_extranet_lockout_combined_hourly_threshold: int
    :param extranet_lockout_daily_threshold: This threshold setting defines
     the per hour trigger for a new event to be generated in the report.
    :type extranet_lockout_daily_threshold: int
    :param extranet_lockout_hourly_threshold: This threshold setting defines
     the per hour trigger for a new event to be generated in the report.
    :type extranet_lockout_hourly_threshold: int
    :param email_notification_enabled: A value indicating whether email
     notification has been enabled.
    :type email_notification_enabled: bool
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'bad_password_and_extranet_lockout_combined_daily_threshold': {'key': 'badPasswordAndExtranetLockoutCombinedDailyThreshold', 'type': 'int'},
        'bad_password_and_extranet_lockout_combined_hourly_threshold': {'key': 'badPasswordAndExtranetLockoutCombinedHourlyThreshold', 'type': 'int'},
        'extranet_lockout_daily_threshold': {'key': 'extranetLockoutDailyThreshold', 'type': 'int'},
        'extranet_lockout_hourly_threshold': {'key': 'extranetLockoutHourlyThreshold', 'type': 'int'},
        'email_notification_enabled': {'key': 'emailNotificationEnabled', 'type': 'bool'},
    }

    def __init__(self, *, id: str=None, bad_password_and_extranet_lockout_combined_daily_threshold: int=None, bad_password_and_extranet_lockout_combined_hourly_threshold: int=None, extranet_lockout_daily_threshold: int=None, extranet_lockout_hourly_threshold: int=None, email_notification_enabled: bool=None, **kwargs) -> None:
        super(IPAddressAggregateSetting, self).__init__(**kwargs)
        self.id = id
        self.bad_password_and_extranet_lockout_combined_daily_threshold = bad_password_and_extranet_lockout_combined_daily_threshold
        self.bad_password_and_extranet_lockout_combined_hourly_threshold = bad_password_and_extranet_lockout_combined_hourly_threshold
        self.extranet_lockout_daily_threshold = extranet_lockout_daily_threshold
        self.extranet_lockout_hourly_threshold = extranet_lockout_hourly_threshold
        self.email_notification_enabled = email_notification_enabled


class Item(Model):
    """The key value pair for properties.

    :param key: The key for the property.
    :type key: str
    :param value: The value for the key.
    :type value: str
    """

    _attribute_map = {
        'key': {'key': 'key', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(self, *, key: str=None, value: str=None, **kwargs) -> None:
        super(Item, self).__init__(**kwargs)
        self.key = key
        self.value = value


class MergedExportError(Model):
    """The merged export error.

    :param id: The error Id.
    :type id: str
    :param incoming_object_display_name: The incoming object display name.
    :type incoming_object_display_name: str
    :param incoming_object_type: The incoming object type.
    :type incoming_object_type: str
    :param user_principal_name: The user principal name
    :type user_principal_name: str
    :param type: The type of the error.
    :type type: str
    :param attribute_name: The attribute name.
    :type attribute_name: str
    :param attribute_value: The attribute value.
    :type attribute_value: str
    :param time_occurred: The date and time when the error occurred.
    :type time_occurred: datetime
    :param time_first_occurred: The time when the error first occurred.
    :type time_first_occurred: datetime
    :param cs_object_id:  the cs object Id.
    :type cs_object_id: str
    :param dn: the DN of the object.
    :type dn: str
    :param incoming_object: The incoming object details.
    :type incoming_object:
     ~azure.mgmt.adhybridhealthservice.models.AssociatedObject
    :param existing_object: The existing object
    :type existing_object:
     ~azure.mgmt.adhybridhealthservice.models.AssociatedObject
    :param modified_or_removed_attribute_value: The modified or removed
     attribute value.
    :type modified_or_removed_attribute_value: str
    :param run_step_result_id: The run step result Id.
    :type run_step_result_id: str
    :param sam_account_name: The sam account name.
    :type sam_account_name: str
    :param server_error_detail: The server error details.
    :type server_error_detail: str
    :param service_id: The service Id.
    :type service_id: str
    :param service_member_id: The server Id.
    :type service_member_id: str
    :param merged_entity_id: The merged entity Id.
    :type merged_entity_id: str
    :param created_date: The date and time, in UTC, when the error was
     created.
    :type created_date: datetime
    :param export_error_status: The export error status.
    :type export_error_status: int
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'incoming_object_display_name': {'key': 'incomingObjectDisplayName', 'type': 'str'},
        'incoming_object_type': {'key': 'incomingObjectType', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'attribute_name': {'key': 'attributeName', 'type': 'str'},
        'attribute_value': {'key': 'attributeValue', 'type': 'str'},
        'time_occurred': {'key': 'timeOccurred', 'type': 'iso-8601'},
        'time_first_occurred': {'key': 'timeFirstOccurred', 'type': 'iso-8601'},
        'cs_object_id': {'key': 'csObjectId', 'type': 'str'},
        'dn': {'key': 'dn', 'type': 'str'},
        'incoming_object': {'key': 'incomingObject', 'type': 'AssociatedObject'},
        'existing_object': {'key': 'existingObject', 'type': 'AssociatedObject'},
        'modified_or_removed_attribute_value': {'key': 'modifiedOrRemovedAttributeValue', 'type': 'str'},
        'run_step_result_id': {'key': 'runStepResultId', 'type': 'str'},
        'sam_account_name': {'key': 'samAccountName', 'type': 'str'},
        'server_error_detail': {'key': 'serverErrorDetail', 'type': 'str'},
        'service_id': {'key': 'serviceId', 'type': 'str'},
        'service_member_id': {'key': 'serviceMemberId', 'type': 'str'},
        'merged_entity_id': {'key': 'mergedEntityId', 'type': 'str'},
        'created_date': {'key': 'createdDate', 'type': 'iso-8601'},
        'export_error_status': {'key': 'exportErrorStatus', 'type': 'int'},
    }

    def __init__(self, *, id: str=None, incoming_object_display_name: str=None, incoming_object_type: str=None, user_principal_name: str=None, type: str=None, attribute_name: str=None, attribute_value: str=None, time_occurred=None, time_first_occurred=None, cs_object_id: str=None, dn: str=None, incoming_object=None, existing_object=None, modified_or_removed_attribute_value: str=None, run_step_result_id: str=None, sam_account_name: str=None, server_error_detail: str=None, service_id: str=None, service_member_id: str=None, merged_entity_id: str=None, created_date=None, export_error_status: int=None, **kwargs) -> None:
        super(MergedExportError, self).__init__(**kwargs)
        self.id = id
        self.incoming_object_display_name = incoming_object_display_name
        self.incoming_object_type = incoming_object_type
        self.user_principal_name = user_principal_name
        self.type = type
        self.attribute_name = attribute_name
        self.attribute_value = attribute_value
        self.time_occurred = time_occurred
        self.time_first_occurred = time_first_occurred
        self.cs_object_id = cs_object_id
        self.dn = dn
        self.incoming_object = incoming_object
        self.existing_object = existing_object
        self.modified_or_removed_attribute_value = modified_or_removed_attribute_value
        self.run_step_result_id = run_step_result_id
        self.sam_account_name = sam_account_name
        self.server_error_detail = server_error_detail
        self.service_id = service_id
        self.service_member_id = service_member_id
        self.merged_entity_id = merged_entity_id
        self.created_date = created_date
        self.export_error_status = export_error_status


class MetricGroup(Model):
    """The metric group details.

    :param key: The key for the group.
    :type key: str
    :param display_name: The display name for the group.
    :type display_name: str
    :param invisible_for_ui: indicates if the metric group is displayed in
     Azure Active Directory Connect Health UI.
    :type invisible_for_ui: bool
    """

    _attribute_map = {
        'key': {'key': 'key', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'invisible_for_ui': {'key': 'invisibleForUi', 'type': 'bool'},
    }

    def __init__(self, *, key: str=None, display_name: str=None, invisible_for_ui: bool=None, **kwargs) -> None:
        super(MetricGroup, self).__init__(**kwargs)
        self.key = key
        self.display_name = display_name
        self.invisible_for_ui = invisible_for_ui


class MetricMetadata(Model):
    """The metric meta data.

    :param metrics_processor_class_name: The name of the class which retrieve
     and process the metric.
    :type metrics_processor_class_name: str
    :param metric_name: The metric name
    :type metric_name: str
    :param groupings: The groupings for the metrics.
    :type groupings:
     list[~azure.mgmt.adhybridhealthservice.models.MetricGroup]
    :param display_name: The display name for the metric.
    :type display_name: str
    :param value_kind: Indicates if the metrics is a rate,value, percent or
     duration type.
    :type value_kind: str
    :param min_value: The minimum value.
    :type min_value: int
    :param max_value: The maximum value.
    :type max_value: int
    :param kind: Indicates whether the dashboard to represent the metric is a
     line, bar,pie, area or donut chart.
    :type kind: str
    :param is_default: Indicates if the metric is a default metric or not.
    :type is_default: bool
    :param is_perf_counter: Indicates if the metric is a performance counter
     metric or not.
    :type is_perf_counter: bool
    :param is_dev_ops: Indicates if the metric is visible to DevOps or not.
    :type is_dev_ops: bool
    """

    _attribute_map = {
        'metrics_processor_class_name': {'key': 'metricsProcessorClassName', 'type': 'str'},
        'metric_name': {'key': 'metricName', 'type': 'str'},
        'groupings': {'key': 'groupings', 'type': '[MetricGroup]'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'value_kind': {'key': 'valueKind', 'type': 'str'},
        'min_value': {'key': 'minValue', 'type': 'int'},
        'max_value': {'key': 'maxValue', 'type': 'int'},
        'kind': {'key': 'kind', 'type': 'str'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'is_perf_counter': {'key': 'isPerfCounter', 'type': 'bool'},
        'is_dev_ops': {'key': 'isDevOps', 'type': 'bool'},
    }

    def __init__(self, *, metrics_processor_class_name: str=None, metric_name: str=None, groupings=None, display_name: str=None, value_kind: str=None, min_value: int=None, max_value: int=None, kind: str=None, is_default: bool=None, is_perf_counter: bool=None, is_dev_ops: bool=None, **kwargs) -> None:
        super(MetricMetadata, self).__init__(**kwargs)
        self.metrics_processor_class_name = metrics_processor_class_name
        self.metric_name = metric_name
        self.groupings = groupings
        self.display_name = display_name
        self.value_kind = value_kind
        self.min_value = min_value
        self.max_value = max_value
        self.kind = kind
        self.is_default = is_default
        self.is_perf_counter = is_perf_counter
        self.is_dev_ops = is_dev_ops


class MetricSet(Model):
    """The set of metric values. Example of a MetricSet are Values of token
    requests for a Server1 or RelyingParty1.

    :param set_name: The name of the set.
    :type set_name: str
    :param values: The list of the metric values.
    :type values: list[int]
    """

    _attribute_map = {
        'set_name': {'key': 'setName', 'type': 'str'},
        'values': {'key': 'values', 'type': '[int]'},
    }

    def __init__(self, *, set_name: str=None, values=None, **kwargs) -> None:
        super(MetricSet, self).__init__(**kwargs)
        self.set_name = set_name
        self.values = values


class MetricSets(Model):
    """The metrics data represented set.

    :param sets: The list of metric set.
    :type sets: list[~azure.mgmt.adhybridhealthservice.models.MetricSet]
    :param time_stamps: The list of timestamps for each metric in the metric
     set.
    :type time_stamps: list[datetime]
    """

    _attribute_map = {
        'sets': {'key': 'sets', 'type': '[MetricSet]'},
        'time_stamps': {'key': 'timeStamps', 'type': '[iso-8601]'},
    }

    def __init__(self, *, sets=None, time_stamps=None, **kwargs) -> None:
        super(MetricSets, self).__init__(**kwargs)
        self.sets = sets
        self.time_stamps = time_stamps


class ModuleConfiguration(Model):
    """The module configuration as required by the Agent service.

    :param agent_service: The name of agent service.
    :type agent_service: str
    :param module_name: The name of the module for which the configuration is
     applicable.
    :type module_name: str
    :param properties: The key value pairs of properties required for
     configuration.
    :type properties: dict[str, str]
    """

    _attribute_map = {
        'agent_service': {'key': 'agentService', 'type': 'str'},
        'module_name': {'key': 'moduleName', 'type': 'str'},
        'properties': {'key': 'properties', 'type': '{str}'},
    }

    def __init__(self, *, agent_service: str=None, module_name: str=None, properties=None, **kwargs) -> None:
        super(ModuleConfiguration, self).__init__(**kwargs)
        self.agent_service = agent_service
        self.module_name = module_name
        self.properties = properties


class ModuleConfigurations(Model):
    """The list of module configurations.

    :param value: The value returned by the operation.
    :type value:
     list[~azure.mgmt.adhybridhealthservice.models.ModuleConfiguration]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ModuleConfiguration]'},
    }

    def __init__(self, *, value=None, **kwargs) -> None:
        super(ModuleConfigurations, self).__init__(**kwargs)
        self.value = value


class ObjectWithSyncError(Model):
    """The objects with sync errors.

    :param source_of_authority: The source of authority.
    :type source_of_authority: str
    :param display_name: The display name.
    :type display_name: str
    :param object_type: The object type.
    :type object_type: str
    :param attribute_name: The attribute name.
    :type attribute_name: str
    :param attribute_value: The attribute value.
    :type attribute_value: str
    :param modififed_value: The modified value.
    :type modififed_value: str
    :param user_principal_name: The user principal name.
    :type user_principal_name: str
    :param object_guid: The object guid.
    :type object_guid: str
    :param attribute_multi_values: Indicates if the attribute is multi-valued
     or not.
    :type attribute_multi_values: bool
    :param min_limit: The minimum limit.
    :type min_limit: str
    :param max_limit: The maximum limit.
    :type max_limit: str
    :param distinguished_name: The distinguished name.
    :type distinguished_name: str
    :param mail: The email.
    :type mail: str
    :param time_occured: The date and time of occurrence.
    :type time_occured: datetime
    :param error_type: The error type.
    :type error_type: str
    :param source_anchor: The source anchor.
    :type source_anchor: str
    """

    _attribute_map = {
        'source_of_authority': {'key': 'sourceOfAuthority', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'object_type': {'key': 'objectType', 'type': 'str'},
        'attribute_name': {'key': 'attributeName', 'type': 'str'},
        'attribute_value': {'key': 'attributeValue', 'type': 'str'},
        'modififed_value': {'key': 'modififedValue', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'object_guid': {'key': 'objectGuid', 'type': 'str'},
        'attribute_multi_values': {'key': 'attributeMultiValues', 'type': 'bool'},
        'min_limit': {'key': 'minLimit', 'type': 'str'},
        'max_limit': {'key': 'maxLimit', 'type': 'str'},
        'distinguished_name': {'key': 'distinguishedName', 'type': 'str'},
        'mail': {'key': 'mail', 'type': 'str'},
        'time_occured': {'key': 'timeOccured', 'type': 'iso-8601'},
        'error_type': {'key': 'errorType', 'type': 'str'},
        'source_anchor': {'key': 'sourceAnchor', 'type': 'str'},
    }

    def __init__(self, *, source_of_authority: str=None, display_name: str=None, object_type: str=None, attribute_name: str=None, attribute_value: str=None, modififed_value: str=None, user_principal_name: str=None, object_guid: str=None, attribute_multi_values: bool=None, min_limit: str=None, max_limit: str=None, distinguished_name: str=None, mail: str=None, time_occured=None, error_type: str=None, source_anchor: str=None, **kwargs) -> None:
        super(ObjectWithSyncError, self).__init__(**kwargs)
        self.source_of_authority = source_of_authority
        self.display_name = display_name
        self.object_type = object_type
        self.attribute_name = attribute_name
        self.attribute_value = attribute_value
        self.modififed_value = modififed_value
        self.user_principal_name = user_principal_name
        self.object_guid = object_guid
        self.attribute_multi_values = attribute_multi_values
        self.min_limit = min_limit
        self.max_limit = max_limit
        self.distinguished_name = distinguished_name
        self.mail = mail
        self.time_occured = time_occured
        self.error_type = error_type
        self.source_anchor = source_anchor


class Operation(Model):
    """The details of the operation.

    :param name: The name of the operation.
    :type name: str
    :param display: The display details for the operation.
    :type display: object
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'object'},
    }

    def __init__(self, *, name: str=None, display=None, **kwargs) -> None:
        super(Operation, self).__init__(**kwargs)
        self.name = name
        self.display = display


class Partition(Model):
    """Describes the partition in Synchronization service.

    :param id: The partition Id.
    :type id: str
    :param dn: The distinguished name for the partition.
    :type dn: str
    :param enabled: Indicates if the partition object is selected or not.
    :type enabled: bool
    :param time_created: The date and time when the partition is created.
    :type time_created: datetime
    :param time_last_modified: The time and date when the partition was last
     modified.
    :type time_last_modified: datetime
    :param partition_scope: The scope of the partition.
    :type partition_scope:
     ~azure.mgmt.adhybridhealthservice.models.PartitionScope
    :param name: The name of the partition.
    :type name: str
    :param is_domain: Indicates if the partition is a domain or not.
    :type is_domain: bool
    :param type: The partition type.
    :type type: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'dn': {'key': 'dn', 'type': 'str'},
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'time_created': {'key': 'timeCreated', 'type': 'iso-8601'},
        'time_last_modified': {'key': 'timeLastModified', 'type': 'iso-8601'},
        'partition_scope': {'key': 'partitionScope', 'type': 'PartitionScope'},
        'name': {'key': 'name', 'type': 'str'},
        'is_domain': {'key': 'isDomain', 'type': 'bool'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, *, id: str=None, dn: str=None, enabled: bool=None, time_created=None, time_last_modified=None, partition_scope=None, name: str=None, is_domain: bool=None, type: str=None, **kwargs) -> None:
        super(Partition, self).__init__(**kwargs)
        self.id = id
        self.dn = dn
        self.enabled = enabled
        self.time_created = time_created
        self.time_last_modified = time_last_modified
        self.partition_scope = partition_scope
        self.name = name
        self.is_domain = is_domain
        self.type = type


class PartitionScope(Model):
    """The connector partition scope.

    :param is_default: Indicates if the partition scope is default or not.
    :type is_default: bool
    :param object_classes: The in-scope object classes.
    :type object_classes: list[str]
    :param containers_included: The list of containers included.
    :type containers_included: list[str]
    :param containers_excluded: The list of containers excluded.
    :type containers_excluded: list[str]
    """

    _attribute_map = {
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'object_classes': {'key': 'objectClasses', 'type': '[str]'},
        'containers_included': {'key': 'containersIncluded', 'type': '[str]'},
        'containers_excluded': {'key': 'containersExcluded', 'type': '[str]'},
    }

    def __init__(self, *, is_default: bool=None, object_classes=None, containers_included=None, containers_excluded=None, **kwargs) -> None:
        super(PartitionScope, self).__init__(**kwargs)
        self.is_default = is_default
        self.object_classes = object_classes
        self.containers_included = containers_included
        self.containers_excluded = containers_excluded


class PasswordHashSyncConfiguration(Model):
    """The password has synchronization configuration settings.

    :param enabled: Indicates if the password hash synchronization
     configuration settings is enabled.
    :type enabled: bool
    :param target: The target.
    :type target: str
    """

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(self, *, enabled: bool=None, target: str=None, **kwargs) -> None:
        super(PasswordHashSyncConfiguration, self).__init__(**kwargs)
        self.enabled = enabled
        self.target = target


class PasswordManagementSettings(Model):
    """The password management settings.

    :param enabled: Indicates if the password extension is enabled.
    :type enabled: bool
    :param extension_file_path: The file path of the password management
     extension.
    :type extension_file_path: str
    :param connect_to: Connection point of password management.
    :type connect_to: str
    :param connection_timeout: Connection timeout for password extension.
    :type connection_timeout: int
    :param user: User to execute password extension.
    :type user: str
    :param supported_password_operations: The supported password operations.
     Possible values include: 'Undefined', 'Set', 'Change'
    :type supported_password_operations: str or
     ~azure.mgmt.adhybridhealthservice.models.PasswordOperationTypes
    :param maximum_retry_count: The maximum number of retries.
    :type maximum_retry_count: int
    :param retry_interval_in_seconds: The time between retries.
    :type retry_interval_in_seconds: int
    :param requires_secure_connection: Indicates if a secure connection is
     required for password management.
    :type requires_secure_connection: bool
    :param unlock_account: Indicates if accounts should be unlocked when
     resetting password.
    :type unlock_account: bool
    """

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'extension_file_path': {'key': 'extensionFilePath', 'type': 'str'},
        'connect_to': {'key': 'connectTo', 'type': 'str'},
        'connection_timeout': {'key': 'connectionTimeout', 'type': 'int'},
        'user': {'key': 'user', 'type': 'str'},
        'supported_password_operations': {'key': 'supportedPasswordOperations', 'type': 'str'},
        'maximum_retry_count': {'key': 'maximumRetryCount', 'type': 'int'},
        'retry_interval_in_seconds': {'key': 'retryIntervalInSeconds', 'type': 'int'},
        'requires_secure_connection': {'key': 'requiresSecureConnection', 'type': 'bool'},
        'unlock_account': {'key': 'unlockAccount', 'type': 'bool'},
    }

    def __init__(self, *, enabled: bool=None, extension_file_path: str=None, connect_to: str=None, connection_timeout: int=None, user: str=None, supported_password_operations=None, maximum_retry_count: int=None, retry_interval_in_seconds: int=None, requires_secure_connection: bool=None, unlock_account: bool=None, **kwargs) -> None:
        super(PasswordManagementSettings, self).__init__(**kwargs)
        self.enabled = enabled
        self.extension_file_path = extension_file_path
        self.connect_to = connect_to
        self.connection_timeout = connection_timeout
        self.user = user
        self.supported_password_operations = supported_password_operations
        self.maximum_retry_count = maximum_retry_count
        self.retry_interval_in_seconds = retry_interval_in_seconds
        self.requires_secure_connection = requires_secure_connection
        self.unlock_account = unlock_account


class ReplicationStatus(Model):
    """Replication summary for a domain controller.

    :param forest_name: The forest name.
    :type forest_name: str
    :param total_dc_count: The total number of domain controllers for a given
     forest.
    :type total_dc_count: int
    :param error_dc_count: The total number of domain controllers with error
     in a given forest.
    :type error_dc_count: int
    """

    _attribute_map = {
        'forest_name': {'key': 'forestName', 'type': 'str'},
        'total_dc_count': {'key': 'totalDcCount', 'type': 'int'},
        'error_dc_count': {'key': 'errorDcCount', 'type': 'int'},
    }

    def __init__(self, *, forest_name: str=None, total_dc_count: int=None, error_dc_count: int=None, **kwargs) -> None:
        super(ReplicationStatus, self).__init__(**kwargs)
        self.forest_name = forest_name
        self.total_dc_count = total_dc_count
        self.error_dc_count = error_dc_count


class ReplicationSummary(Model):
    """The replication summary for a domain controller.

    :param target_server: The domain controller name.
    :type target_server: str
    :param site: The site name for a given domain controller.
    :type site: str
    :param domain: The domain name for a given domain controller.
    :type domain: str
    :param status: The health status for a domain controller.
    :type status: int
    :param last_attempted_sync: The last time when a sync was attempted for a
     given domain controller.
    :type last_attempted_sync: datetime
    :param last_successful_sync: The time when the last successful sync
     happened for a given domain controller.
    :type last_successful_sync: datetime
    :param inbound_neighbor_collection: List of individual domain controller
     neighbor's inbound replication status.
    :type inbound_neighbor_collection:
     list[~azure.mgmt.adhybridhealthservice.models.InboundReplicationNeighbor]
    """

    _attribute_map = {
        'target_server': {'key': 'targetServer', 'type': 'str'},
        'site': {'key': 'site', 'type': 'str'},
        'domain': {'key': 'domain', 'type': 'str'},
        'status': {'key': 'status', 'type': 'int'},
        'last_attempted_sync': {'key': 'lastAttemptedSync', 'type': 'iso-8601'},
        'last_successful_sync': {'key': 'lastSuccessfulSync', 'type': 'iso-8601'},
        'inbound_neighbor_collection': {'key': 'inboundNeighborCollection', 'type': '[InboundReplicationNeighbor]'},
    }

    def __init__(self, *, target_server: str=None, site: str=None, domain: str=None, status: int=None, last_attempted_sync=None, last_successful_sync=None, inbound_neighbor_collection=None, **kwargs) -> None:
        super(ReplicationSummary, self).__init__(**kwargs)
        self.target_server = target_server
        self.site = site
        self.domain = domain
        self.status = status
        self.last_attempted_sync = last_attempted_sync
        self.last_successful_sync = last_successful_sync
        self.inbound_neighbor_collection = inbound_neighbor_collection


class Result(Model):
    """The result for an operation.

    :param value: The value.
    :type value: bool
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': 'bool'},
    }

    def __init__(self, *, value: bool=None, **kwargs) -> None:
        super(Result, self).__init__(**kwargs)
        self.value = value


class RiskyIPBlobUri(Model):
    """The blob uri pointing to Risky IP Report.

    :param tenant_id: The tenant id for whom the report belongs to.
    :type tenant_id: str
    :param service_id: The service id for whom the report belongs to.
    :type service_id: str
    :param result_sas_uri: The blob uri for the report.
    :type result_sas_uri: str
    :param blob_create_date_time: Time at which the new Risky IP report was
     requested.
    :type blob_create_date_time: datetime
    :param job_completion_time: Time at which the blob creation job for the
     new Risky IP report was completed.
    :type job_completion_time: datetime
    :param status: Status of the Risky IP report generation.
    :type status: str
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'service_id': {'key': 'serviceId', 'type': 'str'},
        'result_sas_uri': {'key': 'resultSasUri', 'type': 'str'},
        'blob_create_date_time': {'key': 'blobCreateDateTime', 'type': 'iso-8601'},
        'job_completion_time': {'key': 'jobCompletionTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(self, *, tenant_id: str=None, service_id: str=None, result_sas_uri: str=None, blob_create_date_time=None, job_completion_time=None, status: str=None, **kwargs) -> None:
        super(RiskyIPBlobUri, self).__init__(**kwargs)
        self.tenant_id = tenant_id
        self.service_id = service_id
        self.result_sas_uri = result_sas_uri
        self.blob_create_date_time = blob_create_date_time
        self.job_completion_time = job_completion_time
        self.status = status


class RuleErrorInfo(Model):
    """The error details in legacy rule processing.

    :param attribute_mapping: The attribute mapping details.
    :type attribute_mapping:
     ~azure.mgmt.adhybridhealthservice.models.AttributeMapping
    :param connector_id: The connector Id.
    :type connector_id: str
    :param connector_name: The connector name.
    :type connector_name: str
    :param cs_object_id: The object Id.
    :type cs_object_id: str
    :param dn: The distinguished name.
    :type dn: str
    """

    _attribute_map = {
        'attribute_mapping': {'key': 'attributeMapping', 'type': 'AttributeMapping'},
        'connector_id': {'key': 'connectorId', 'type': 'str'},
        'connector_name': {'key': 'connectorName', 'type': 'str'},
        'cs_object_id': {'key': 'csObjectId', 'type': 'str'},
        'dn': {'key': 'dn', 'type': 'str'},
    }

    def __init__(self, *, attribute_mapping=None, connector_id: str=None, connector_name: str=None, cs_object_id: str=None, dn: str=None, **kwargs) -> None:
        super(RuleErrorInfo, self).__init__(**kwargs)
        self.attribute_mapping = attribute_mapping
        self.connector_id = connector_id
        self.connector_name = connector_name
        self.cs_object_id = cs_object_id
        self.dn = dn


class RunProfile(Model):
    """Describes the run profile.

    :param id: The run profile Id.
    :type id: str
    :param name: The run profile name
    :type name: str
    :param run_steps: The run steps of the run profile.
    :type run_steps: list[~azure.mgmt.adhybridhealthservice.models.RunStep]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'run_steps': {'key': 'runSteps', 'type': '[RunStep]'},
    }

    def __init__(self, *, id: str=None, name: str=None, run_steps=None, **kwargs) -> None:
        super(RunProfile, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.run_steps = run_steps


class RunProfiles(Model):
    """The list of run profiles.

    :param value: The value returned by the operation.
    :type value: list[~azure.mgmt.adhybridhealthservice.models.RunProfile]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[RunProfile]'},
    }

    def __init__(self, *, value=None, **kwargs) -> None:
        super(RunProfiles, self).__init__(**kwargs)
        self.value = value


class RunStep(Model):
    """The run step for a run profile.

    :param batch_size: The batch size used by the run step.
    :type batch_size: int
    :param object_process_limit: The object processing limit.
    :type object_process_limit: int
    :param object_delete_limit: The object deletion limit.
    :type object_delete_limit: int
    :param page_size: The page size of the run step.
    :type page_size: int
    :param partition_id: The Id of the partition that a current run step
     operation is executing.
    :type partition_id: str
    :param operation_type: The run step operation types.
    :type operation_type: int
    :param timeout: The operation timeout.
    :type timeout: int
    """

    _attribute_map = {
        'batch_size': {'key': 'batchSize', 'type': 'int'},
        'object_process_limit': {'key': 'objectProcessLimit', 'type': 'int'},
        'object_delete_limit': {'key': 'objectDeleteLimit', 'type': 'int'},
        'page_size': {'key': 'pageSize', 'type': 'int'},
        'partition_id': {'key': 'partitionId', 'type': 'str'},
        'operation_type': {'key': 'operationType', 'type': 'int'},
        'timeout': {'key': 'timeout', 'type': 'int'},
    }

    def __init__(self, *, batch_size: int=None, object_process_limit: int=None, object_delete_limit: int=None, page_size: int=None, partition_id: str=None, operation_type: int=None, timeout: int=None, **kwargs) -> None:
        super(RunStep, self).__init__(**kwargs)
        self.batch_size = batch_size
        self.object_process_limit = object_process_limit
        self.object_delete_limit = object_delete_limit
        self.page_size = page_size
        self.partition_id = partition_id
        self.operation_type = operation_type
        self.timeout = timeout


class ServiceConfiguration(Model):
    """The service configuration.

    :param version: The version of the sync service.
    :type version: str
    :param service_type: The service type of the server.
    :type service_type: int
    :param service_account: The service account.
    :type service_account: str
    :param sql_server: The SQL server information.
    :type sql_server: str
    :param sql_version: The SQL version.
    :type sql_version: str
    :param sql_edition: The SQL edition
    :type sql_edition: str
    :param sql_instance: The SQL instance details.
    :type sql_instance: str
    :param sql_database_name: The SQL database.
    :type sql_database_name: str
    :param sql_database_size: The SQL database size.
    :type sql_database_size: int
    """

    _attribute_map = {
        'version': {'key': 'version', 'type': 'str'},
        'service_type': {'key': 'serviceType', 'type': 'int'},
        'service_account': {'key': 'serviceAccount', 'type': 'str'},
        'sql_server': {'key': 'sqlServer', 'type': 'str'},
        'sql_version': {'key': 'sqlVersion', 'type': 'str'},
        'sql_edition': {'key': 'sqlEdition', 'type': 'str'},
        'sql_instance': {'key': 'sqlInstance', 'type': 'str'},
        'sql_database_name': {'key': 'sqlDatabaseName', 'type': 'str'},
        'sql_database_size': {'key': 'sqlDatabaseSize', 'type': 'int'},
    }

    def __init__(self, *, version: str=None, service_type: int=None, service_account: str=None, sql_server: str=None, sql_version: str=None, sql_edition: str=None, sql_instance: str=None, sql_database_name: str=None, sql_database_size: int=None, **kwargs) -> None:
        super(ServiceConfiguration, self).__init__(**kwargs)
        self.version = version
        self.service_type = service_type
        self.service_account = service_account
        self.sql_server = sql_server
        self.sql_version = sql_version
        self.sql_edition = sql_edition
        self.sql_instance = sql_instance
        self.sql_database_name = sql_database_name
        self.sql_database_size = sql_database_size


class ServiceMember(Model):
    """The server properties for a given service.

    :param service_member_id: The id of the server.
    :type service_member_id: str
    :param service_id: The service id to whom this server belongs.
    :type service_id: str
    :param tenant_id: The tenant id to whom this server belongs.
    :type tenant_id: str
    :param active_alerts: The total number of alerts that are currently active
     for the server.
    :type active_alerts: int
    :param additional_information: The additional information, if any, for the
     server.
    :type additional_information: str
    :param created_date: The date time , in UTC, when the server was onboarded
     to Azure Active Directory Connect Health.
    :type created_date: datetime
    :param dimensions: The server specific configuration related dimensions.
    :type dimensions: object
    :param disabled: Indicates if the server is disabled or not.
    :type disabled: bool
    :param disabled_reason: The reason for disabling the server.
    :type disabled_reason: int
    :param installed_qfes: The list of installed QFEs for the server.
    :type installed_qfes: object
    :param last_disabled: The date and time , in UTC, when the server was last
     disabled.
    :type last_disabled: datetime
    :param last_reboot: The date and time, in UTC, when the server was last
     rebooted.
    :type last_reboot: datetime
    :param last_server_reported_monitoring_level_change: The date and time, in
     UTC, when the server's data monitoring configuration was last changed.
    :type last_server_reported_monitoring_level_change: datetime
    :param last_updated: The date and time, in UTC, when the server properties
     were last updated.
    :type last_updated: datetime
    :param machine_id: The id of the machine.
    :type machine_id: str
    :param machine_name: The name of the server.
    :type machine_name: str
    :param monitoring_configurations_computed: The monitoring configuration of
     the server which determines what activities are monitored by Azure Active
     Directory Connect Health.
    :type monitoring_configurations_computed: object
    :param monitoring_configurations_customized: The customized monitoring
     configuration of the server which determines what activities are monitored
     by Azure Active Directory Connect Health.
    :type monitoring_configurations_customized: object
    :param os_name: The name of the operating system installed in the machine.
    :type os_name: str
    :param os_version: The version of the operating system installed in the
     machine.
    :type os_version: str
    :param properties: Server specific properties.
    :type properties: object
    :param recommended_qfes: The list of recommended hotfixes for the server.
    :type recommended_qfes: object
    :param resolved_alerts: The total count of alerts that are resolved for
     this server.
    :type resolved_alerts: int
    :param role: The service role that is being monitored in the server.
    :type role: str
    :param server_reported_monitoring_level: The monitoring level reported by
     the server. Possible values include: 'Partial', 'Full', 'Off'
    :type server_reported_monitoring_level: str or
     ~azure.mgmt.adhybridhealthservice.models.MonitoringLevel
    :param status: The health status of the server.
    :type status: str
    """

    _attribute_map = {
        'service_member_id': {'key': 'serviceMemberId', 'type': 'str'},
        'service_id': {'key': 'serviceId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'active_alerts': {'key': 'activeAlerts', 'type': 'int'},
        'additional_information': {'key': 'additionalInformation', 'type': 'str'},
        'created_date': {'key': 'createdDate', 'type': 'iso-8601'},
        'dimensions': {'key': 'dimensions', 'type': 'object'},
        'disabled': {'key': 'disabled', 'type': 'bool'},
        'disabled_reason': {'key': 'disabledReason', 'type': 'int'},
        'installed_qfes': {'key': 'installedQfes', 'type': 'object'},
        'last_disabled': {'key': 'lastDisabled', 'type': 'iso-8601'},
        'last_reboot': {'key': 'lastReboot', 'type': 'iso-8601'},
        'last_server_reported_monitoring_level_change': {'key': 'lastServerReportedMonitoringLevelChange', 'type': 'iso-8601'},
        'last_updated': {'key': 'lastUpdated', 'type': 'iso-8601'},
        'machine_id': {'key': 'machineId', 'type': 'str'},
        'machine_name': {'key': 'machineName', 'type': 'str'},
        'monitoring_configurations_computed': {'key': 'monitoringConfigurationsComputed', 'type': 'object'},
        'monitoring_configurations_customized': {'key': 'monitoringConfigurationsCustomized', 'type': 'object'},
        'os_name': {'key': 'osName', 'type': 'str'},
        'os_version': {'key': 'osVersion', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'object'},
        'recommended_qfes': {'key': 'recommendedQfes', 'type': 'object'},
        'resolved_alerts': {'key': 'resolvedAlerts', 'type': 'int'},
        'role': {'key': 'role', 'type': 'str'},
        'server_reported_monitoring_level': {'key': 'serverReportedMonitoringLevel', 'type': 'MonitoringLevel'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(self, *, service_member_id: str=None, service_id: str=None, tenant_id: str=None, active_alerts: int=None, additional_information: str=None, created_date=None, dimensions=None, disabled: bool=None, disabled_reason: int=None, installed_qfes=None, last_disabled=None, last_reboot=None, last_server_reported_monitoring_level_change=None, last_updated=None, machine_id: str=None, machine_name: str=None, monitoring_configurations_computed=None, monitoring_configurations_customized=None, os_name: str=None, os_version: str=None, properties=None, recommended_qfes=None, resolved_alerts: int=None, role: str=None, server_reported_monitoring_level=None, status: str=None, **kwargs) -> None:
        super(ServiceMember, self).__init__(**kwargs)
        self.service_member_id = service_member_id
        self.service_id = service_id
        self.tenant_id = tenant_id
        self.active_alerts = active_alerts
        self.additional_information = additional_information
        self.created_date = created_date
        self.dimensions = dimensions
        self.disabled = disabled
        self.disabled_reason = disabled_reason
        self.installed_qfes = installed_qfes
        self.last_disabled = last_disabled
        self.last_reboot = last_reboot
        self.last_server_reported_monitoring_level_change = last_server_reported_monitoring_level_change
        self.last_updated = last_updated
        self.machine_id = machine_id
        self.machine_name = machine_name
        self.monitoring_configurations_computed = monitoring_configurations_computed
        self.monitoring_configurations_customized = monitoring_configurations_customized
        self.os_name = os_name
        self.os_version = os_version
        self.properties = properties
        self.recommended_qfes = recommended_qfes
        self.resolved_alerts = resolved_alerts
        self.role = role
        self.server_reported_monitoring_level = server_reported_monitoring_level
        self.status = status


class ServiceProperties(Model):
    """The service properties for a given service.

    :param id: The id of the service.
    :type id: str
    :param active_alerts: The count of alerts that are currently active for
     the service.
    :type active_alerts: int
    :param additional_information: The additional information related to the
     service.
    :type additional_information: str
    :param created_date: The date and time, in UTC, when the service was
     onboarded to Azure Active Directory Connect Health.
    :type created_date: datetime
    :param custom_notification_emails: The list of additional emails that are
     configured to receive notifications about the service.
    :type custom_notification_emails: list[str]
    :param disabled: Indicates if the service is disabled or not.
    :type disabled: bool
    :param display_name: The display name of the service.
    :type display_name: str
    :param health: The health of the service.
    :type health: str
    :param last_disabled: The date and time, in UTC, when the service was last
     disabled.
    :type last_disabled: datetime
    :param last_updated: The date or time , in UTC, when the service
     properties were last updated.
    :type last_updated: datetime
    :param monitoring_configurations_computed: The monitoring configuration of
     the service which determines what activities are monitored by Azure Active
     Directory Connect Health.
    :type monitoring_configurations_computed: object
    :param monitoring_configurations_customized: The customized monitoring
     configuration of the service which determines what activities are
     monitored by Azure Active Directory Connect Health.
    :type monitoring_configurations_customized: object
    :param notification_email_enabled: Indicates if email notification is
     enabled or not.
    :type notification_email_enabled: bool
    :param notification_email_enabled_for_global_admins: Indicates if email
     notification is enabled for global administrators of the tenant.
    :type notification_email_enabled_for_global_admins: bool
    :param notification_emails_enabled_for_global_admins: Indicates if email
     notification is enabled for global administrators of the tenant.
    :type notification_emails_enabled_for_global_admins: bool
    :param notification_emails: The list of emails to whom service
     notifications will be sent.
    :type notification_emails: list[str]
    :param original_disabled_state: Gets the original disable state.
    :type original_disabled_state: bool
    :param resolved_alerts: The total count of alerts that has been resolved
     for the service.
    :type resolved_alerts: int
    :param service_id: The id of the service.
    :type service_id: str
    :param service_name: The name of the service.
    :type service_name: str
    :param signature: The signature of the service.
    :type signature: str
    :param simple_properties: List of service specific configuration
     properties.
    :type simple_properties: object
    :param tenant_id: The id of the tenant to which the service is registered
     to.
    :type tenant_id: str
    :param type: The service type for the services onboarded to Azure Active
     Directory Connect Health. Depending on whether the service is monitoring,
     ADFS, Sync or ADDS roles, the service type can either be
     AdFederationService or AadSyncService or AdDomainService.
    :type type: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'active_alerts': {'key': 'activeAlerts', 'type': 'int'},
        'additional_information': {'key': 'additionalInformation', 'type': 'str'},
        'created_date': {'key': 'createdDate', 'type': 'iso-8601'},
        'custom_notification_emails': {'key': 'customNotificationEmails', 'type': '[str]'},
        'disabled': {'key': 'disabled', 'type': 'bool'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'health': {'key': 'health', 'type': 'str'},
        'last_disabled': {'key': 'lastDisabled', 'type': 'iso-8601'},
        'last_updated': {'key': 'lastUpdated', 'type': 'iso-8601'},
        'monitoring_configurations_computed': {'key': 'monitoringConfigurationsComputed', 'type': 'object'},
        'monitoring_configurations_customized': {'key': 'monitoringConfigurationsCustomized', 'type': 'object'},
        'notification_email_enabled': {'key': 'notificationEmailEnabled', 'type': 'bool'},
        'notification_email_enabled_for_global_admins': {'key': 'notificationEmailEnabledForGlobalAdmins', 'type': 'bool'},
        'notification_emails_enabled_for_global_admins': {'key': 'notificationEmailsEnabledForGlobalAdmins', 'type': 'bool'},
        'notification_emails': {'key': 'notificationEmails', 'type': '[str]'},
        'original_disabled_state': {'key': 'originalDisabledState', 'type': 'bool'},
        'resolved_alerts': {'key': 'resolvedAlerts', 'type': 'int'},
        'service_id': {'key': 'serviceId', 'type': 'str'},
        'service_name': {'key': 'serviceName', 'type': 'str'},
        'signature': {'key': 'signature', 'type': 'str'},
        'simple_properties': {'key': 'simpleProperties', 'type': 'object'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, *, id: str=None, active_alerts: int=None, additional_information: str=None, created_date=None, custom_notification_emails=None, disabled: bool=None, display_name: str=None, health: str=None, last_disabled=None, last_updated=None, monitoring_configurations_computed=None, monitoring_configurations_customized=None, notification_email_enabled: bool=None, notification_email_enabled_for_global_admins: bool=None, notification_emails_enabled_for_global_admins: bool=None, notification_emails=None, original_disabled_state: bool=None, resolved_alerts: int=None, service_id: str=None, service_name: str=None, signature: str=None, simple_properties=None, tenant_id: str=None, type: str=None, **kwargs) -> None:
        super(ServiceProperties, self).__init__(**kwargs)
        self.id = id
        self.active_alerts = active_alerts
        self.additional_information = additional_information
        self.created_date = created_date
        self.custom_notification_emails = custom_notification_emails
        self.disabled = disabled
        self.display_name = display_name
        self.health = health
        self.last_disabled = last_disabled
        self.last_updated = last_updated
        self.monitoring_configurations_computed = monitoring_configurations_computed
        self.monitoring_configurations_customized = monitoring_configurations_customized
        self.notification_email_enabled = notification_email_enabled
        self.notification_email_enabled_for_global_admins = notification_email_enabled_for_global_admins
        self.notification_emails_enabled_for_global_admins = notification_emails_enabled_for_global_admins
        self.notification_emails = notification_emails
        self.original_disabled_state = original_disabled_state
        self.resolved_alerts = resolved_alerts
        self.service_id = service_id
        self.service_name = service_name
        self.signature = signature
        self.simple_properties = simple_properties
        self.tenant_id = tenant_id
        self.type = type


class TabularExportError(Model):
    """The details for export error.

    :param service_id: The service Id.
    :type service_id: str
    :param service_member_id: The server Id.
    :type service_member_id: str
    :param merged_entity_id: The merged entity Id.
    :type merged_entity_id: str
    :param tabular_export_error_data: The export error data.
    :type tabular_export_error_data: str
    """

    _attribute_map = {
        'service_id': {'key': 'serviceId', 'type': 'str'},
        'service_member_id': {'key': 'serviceMemberId', 'type': 'str'},
        'merged_entity_id': {'key': 'mergedEntityId', 'type': 'str'},
        'tabular_export_error_data': {'key': 'tabularExportErrorData', 'type': 'str'},
    }

    def __init__(self, *, service_id: str=None, service_member_id: str=None, merged_entity_id: str=None, tabular_export_error_data: str=None, **kwargs) -> None:
        super(TabularExportError, self).__init__(**kwargs)
        self.service_id = service_id
        self.service_member_id = service_member_id
        self.merged_entity_id = merged_entity_id
        self.tabular_export_error_data = tabular_export_error_data


class Tenant(Model):
    """The details of the onboarded tenant.

    :param tenant_id: The Id of the tenant.
    :type tenant_id: str
    :param aad_license: The Azure Active Directory license of the tenant.
    :type aad_license: str
    :param aad_premium: Indicate if the tenant has Azure Active Directory
     Premium license or not.
    :type aad_premium: bool
    :param agent_auto_update: Indicates if the tenant is configured to
     automatically receive updates for Azure Active Directory Connect Health
     client side features.
    :type agent_auto_update: bool
    :param alert_suppression_time_in_mins: The time in minutes after which an
     alert will be auto-suppressed.
    :type alert_suppression_time_in_mins: int
    :param consented_to_microsoft_dev_ops: Indicates if the tenant data can be
     seen by Microsoft through Azure portal.
    :type consented_to_microsoft_dev_ops: bool
    :param country_letter_code: The country letter code of the tenant.
    :type country_letter_code: str
    :param created_date: The date, in UTC, when the tenant was onboarded to
     Azure Active Directory Connect Health.
    :type created_date: datetime
    :param dev_ops_ttl: The date and time, in UTC, till when the tenant data
     can be seen by Microsoft through Azure portal.
    :type dev_ops_ttl: datetime
    :param disabled: Indicates if the tenant is disabled in Azure Active
     Directory Connect Health.
    :type disabled: bool
    :param disabled_reason: The reason due to which the tenant was disabled in
     Azure Active Directory Connect Health.
    :type disabled_reason: int
    :param global_admins_email: The list of global administrators for the
     tenant.
    :type global_admins_email: list[str]
    :param initial_domain: The initial domain of the tenant.
    :type initial_domain: str
    :param last_disabled: The date and time, in UTC, when the tenant was last
     disabled in Azure Active Directory Connect Health.
    :type last_disabled: datetime
    :param last_verified: The date and time, in UTC, when the tenant
     onboarding status in Azure Active Directory Connect Health was last
     verified.
    :type last_verified: datetime
    :param onboarding_allowed: Indicates if the tenant is allowed to  onboard
     to Azure Active Directory Connect Health.
    :type onboarding_allowed: bool
    :param onboarded: Indicates if the tenant is already onboarded to Azure
     Active Directory Connect Health.
    :type onboarded: bool
    :param pks_certificate: The certificate associated with the tenant to
     onboard data to Azure Active Directory Connect Health.
    :type pks_certificate: object
    :param private_preview_tenant: Indicates if the tenant has signed up for
     private preview of Azure Active Directory Connect Health features.
    :type private_preview_tenant: bool
    :param tenant_in_quarantine: Indicates if data collection for this tenant
     is disabled or not.
    :type tenant_in_quarantine: bool
    :param tenant_name: The name of the tenant.
    :type tenant_name: str
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'aad_license': {'key': 'aadLicense', 'type': 'str'},
        'aad_premium': {'key': 'aadPremium', 'type': 'bool'},
        'agent_auto_update': {'key': 'agentAutoUpdate', 'type': 'bool'},
        'alert_suppression_time_in_mins': {'key': 'alertSuppressionTimeInMins', 'type': 'int'},
        'consented_to_microsoft_dev_ops': {'key': 'consentedToMicrosoftDevOps', 'type': 'bool'},
        'country_letter_code': {'key': 'countryLetterCode', 'type': 'str'},
        'created_date': {'key': 'createdDate', 'type': 'iso-8601'},
        'dev_ops_ttl': {'key': 'devOpsTtl', 'type': 'iso-8601'},
        'disabled': {'key': 'disabled', 'type': 'bool'},
        'disabled_reason': {'key': 'disabledReason', 'type': 'int'},
        'global_admins_email': {'key': 'globalAdminsEmail', 'type': '[str]'},
        'initial_domain': {'key': 'initialDomain', 'type': 'str'},
        'last_disabled': {'key': 'lastDisabled', 'type': 'iso-8601'},
        'last_verified': {'key': 'lastVerified', 'type': 'iso-8601'},
        'onboarding_allowed': {'key': 'onboardingAllowed', 'type': 'bool'},
        'onboarded': {'key': 'onboarded', 'type': 'bool'},
        'pks_certificate': {'key': 'pksCertificate', 'type': 'object'},
        'private_preview_tenant': {'key': 'privatePreviewTenant', 'type': 'bool'},
        'tenant_in_quarantine': {'key': 'tenantInQuarantine', 'type': 'bool'},
        'tenant_name': {'key': 'tenantName', 'type': 'str'},
    }

    def __init__(self, *, tenant_id: str=None, aad_license: str=None, aad_premium: bool=None, agent_auto_update: bool=None, alert_suppression_time_in_mins: int=None, consented_to_microsoft_dev_ops: bool=None, country_letter_code: str=None, created_date=None, dev_ops_ttl=None, disabled: bool=None, disabled_reason: int=None, global_admins_email=None, initial_domain: str=None, last_disabled=None, last_verified=None, onboarding_allowed: bool=None, onboarded: bool=None, pks_certificate=None, private_preview_tenant: bool=None, tenant_in_quarantine: bool=None, tenant_name: str=None, **kwargs) -> None:
        super(Tenant, self).__init__(**kwargs)
        self.tenant_id = tenant_id
        self.aad_license = aad_license
        self.aad_premium = aad_premium
        self.agent_auto_update = agent_auto_update
        self.alert_suppression_time_in_mins = alert_suppression_time_in_mins
        self.consented_to_microsoft_dev_ops = consented_to_microsoft_dev_ops
        self.country_letter_code = country_letter_code
        self.created_date = created_date
        self.dev_ops_ttl = dev_ops_ttl
        self.disabled = disabled
        self.disabled_reason = disabled_reason
        self.global_admins_email = global_admins_email
        self.initial_domain = initial_domain
        self.last_disabled = last_disabled
        self.last_verified = last_verified
        self.onboarding_allowed = onboarding_allowed
        self.onboarded = onboarded
        self.pks_certificate = pks_certificate
        self.private_preview_tenant = private_preview_tenant
        self.tenant_in_quarantine = tenant_in_quarantine
        self.tenant_name = tenant_name


class TenantOnboardingDetails(Model):
    """The tenant onboarding details.

    :param tenant_onboarded: Indicates if the tenant is onboarded to Azure
     Active Directory Connect Health or not.
    :type tenant_onboarded: bool
    :param onboarding_display_url: The display url, to help tenant navigate or
     onboard to Azure Active Directory Connect Health blade, based on tenant
     onboarding status.
    :type onboarding_display_url: str
    """

    _attribute_map = {
        'tenant_onboarded': {'key': 'tenantOnboarded', 'type': 'bool'},
        'onboarding_display_url': {'key': 'onboardingDisplayUrl', 'type': 'str'},
    }

    def __init__(self, *, tenant_onboarded: bool=None, onboarding_display_url: str=None, **kwargs) -> None:
        super(TenantOnboardingDetails, self).__init__(**kwargs)
        self.tenant_onboarded = tenant_onboarded
        self.onboarding_display_url = onboarding_display_url


class UserPreference(Model):
    """The user preference for a given feature.

    :param metric_names: The name of the metric.
    :type metric_names: list[str]
    """

    _attribute_map = {
        'metric_names': {'key': 'metricNames', 'type': '[str]'},
    }

    def __init__(self, *, metric_names=None, **kwargs) -> None:
        super(UserPreference, self).__init__(**kwargs)
        self.metric_names = metric_names


class ValueDelta(Model):
    """The value of the delta.

    :param operation_type: The operation type. Possible values include:
     'Undefined', 'Add', 'Update', 'Delete'
    :type operation_type: str or
     ~azure.mgmt.adhybridhealthservice.models.ValueDeltaOperationType
    :param value: The value of the delta.
    :type value: str
    """

    _attribute_map = {
        'operation_type': {'key': 'operationType', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(self, *, operation_type=None, value: str=None, **kwargs) -> None:
        super(ValueDelta, self).__init__(**kwargs)
        self.operation_type = operation_type
        self.value = value
