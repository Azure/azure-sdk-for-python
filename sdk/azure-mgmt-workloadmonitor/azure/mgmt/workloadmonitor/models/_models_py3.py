# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class DefaultError(Model):
    """Default Error.

    Error body contract.

    :param error: error details. Details about the error
    :type error: ~azure.mgmt.workloadmonitor.models.DefaultErrorError
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'DefaultErrorError'},
    }

    def __init__(self, *, error=None, **kwargs) -> None:
        super(DefaultError, self).__init__(**kwargs)
        self.error = error


class DefaultErrorException(HttpOperationError):
    """Server responsed with exception of type: 'DefaultError'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(DefaultErrorException, self).__init__(deserialize, response, 'DefaultError', *args)


class DefaultErrorError(Model):
    """error details.

    Details about the error.

    :param code: Service-defined error code. This code serves as a sub-status
     for the HTTP error code specified in the response.
    :type code: str
    :param message: Human-readable representation of the error.
    :type message: str
    :param details: Details of the error.
    :type details: list[~azure.mgmt.workloadmonitor.models.ErrorDetails]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetails]'},
    }

    def __init__(self, *, code: str=None, message: str=None, details=None, **kwargs) -> None:
        super(DefaultErrorError, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.details = details


class ErrorDetails(Model):
    """Error Details.

    Error details of the error body contract.

    :param code: Property level error code.
    :type code: str
    :param message: Human-readable representation of property-level error.
    :type message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, *, code: str=None, message: str=None, **kwargs) -> None:
        super(ErrorDetails, self).__init__(**kwargs)
        self.code = code
        self.message = message


class Resource(Model):
    """The resource model definition for the ARM proxy resource,
    'microsoft.workloadmonitor/monitors'.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Arm ID. Arm ID of this monitor.
    :vartype id: str
    :ivar name: Url-encoded monitor name. Url-encoded monitor name.
    :vartype name: str
    :ivar type: Resource type. Type of ARM resource.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class Monitor(Resource):
    """Monitor Status.

    Information about a monitor.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Arm ID. Arm ID of this monitor.
    :vartype id: str
    :ivar name: Url-encoded monitor name. Url-encoded monitor name.
    :vartype name: str
    :ivar type: Resource type. Type of ARM resource.
    :vartype type: str
    :param monitor_name: Monitor Name. Human-readable name of this monitor.
    :type monitor_name: str
    :param monitor_type: Monitor Type. Type of this monitor.
    :type monitor_type: str
    :param monitored_object: Monitored Object. Dynamic monitored object of
     this monitor.
    :type monitored_object: str
    :param parent_monitor_name: Parent Monitor Name. Name of this monitor's
     parent.
    :type parent_monitor_name: str
    :param previous_monitor_state: Health State. Current health state of this
     monitor. Possible values include: 'Healthy', 'Critical', 'Warning',
     'Unknown'
    :type previous_monitor_state: str or
     ~azure.mgmt.workloadmonitor.models.HealthState
    :param current_monitor_state: Health State. Current health state of this
     monitor. Possible values include: 'Healthy', 'Critical', 'Warning',
     'Unknown'
    :type current_monitor_state: str or
     ~azure.mgmt.workloadmonitor.models.HealthState
    :param evaluation_timestamp: Last Evaluated. Timestamp that this monitor
     was last evaluated.
    :type evaluation_timestamp: str
    :param current_state_first_observed_timestamp: Last State Change.
     Timestamp of this monitor's last state change.
    :type current_state_first_observed_timestamp: str
    :param last_reported_timestamp: Last Reported. Timestamp of this monitor's
     last reported state.
    :type last_reported_timestamp: str
    :param evidence: Evidence. Evidence of this monitor's last state change.
    :type evidence: object
    :param monitor_configuration: Configuration. Configuration settings at the
     time of this monitor's last state change.
    :type monitor_configuration: object
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'monitor_name': {'key': 'properties.monitorName', 'type': 'str'},
        'monitor_type': {'key': 'properties.monitorType', 'type': 'str'},
        'monitored_object': {'key': 'properties.monitoredObject', 'type': 'str'},
        'parent_monitor_name': {'key': 'properties.parentMonitorName', 'type': 'str'},
        'previous_monitor_state': {'key': 'properties.previousMonitorState', 'type': 'str'},
        'current_monitor_state': {'key': 'properties.currentMonitorState', 'type': 'str'},
        'evaluation_timestamp': {'key': 'properties.evaluationTimestamp', 'type': 'str'},
        'current_state_first_observed_timestamp': {'key': 'properties.currentStateFirstObservedTimestamp', 'type': 'str'},
        'last_reported_timestamp': {'key': 'properties.lastReportedTimestamp', 'type': 'str'},
        'evidence': {'key': 'properties.evidence', 'type': 'object'},
        'monitor_configuration': {'key': 'properties.monitorConfiguration', 'type': 'object'},
    }

    def __init__(self, *, monitor_name: str=None, monitor_type: str=None, monitored_object: str=None, parent_monitor_name: str=None, previous_monitor_state=None, current_monitor_state=None, evaluation_timestamp: str=None, current_state_first_observed_timestamp: str=None, last_reported_timestamp: str=None, evidence=None, monitor_configuration=None, **kwargs) -> None:
        super(Monitor, self).__init__(**kwargs)
        self.monitor_name = monitor_name
        self.monitor_type = monitor_type
        self.monitored_object = monitored_object
        self.parent_monitor_name = parent_monitor_name
        self.previous_monitor_state = previous_monitor_state
        self.current_monitor_state = current_monitor_state
        self.evaluation_timestamp = evaluation_timestamp
        self.current_state_first_observed_timestamp = current_state_first_observed_timestamp
        self.last_reported_timestamp = last_reported_timestamp
        self.evidence = evidence
        self.monitor_configuration = monitor_configuration


class MonitorStateChange(Resource):
    """Monitor State Change.

    Information about a state transition of a monitor.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Arm ID. Arm ID of this monitor.
    :vartype id: str
    :ivar name: Url-encoded monitor name. Url-encoded monitor name.
    :vartype name: str
    :ivar type: Resource type. Type of ARM resource.
    :vartype type: str
    :param monitor_name: Monitor Name. Human-readable name of this monitor.
    :type monitor_name: str
    :param monitor_type: Monitor Type. Type of this monitor.
    :type monitor_type: str
    :param monitored_object: Monitored Object. Dynamic monitored object of
     this monitor.
    :type monitored_object: str
    :param evaluation_timestamp: Timestamp. Timestamp of that this event
     ocurred.
    :type evaluation_timestamp: str
    :param current_state_first_observed_timestamp: Timestamp. Timestamp of
     that this health state first ocurred.
    :type current_state_first_observed_timestamp: str
    :param previous_monitor_state: Previous Health State. Previous health
     state. Possible values include: 'Healthy', 'Critical', 'Warning',
     'Unknown'
    :type previous_monitor_state: str or
     ~azure.mgmt.workloadmonitor.models.HealthState
    :param current_monitor_state: New Health State. New health state. Possible
     values include: 'Healthy', 'Critical', 'Warning', 'Unknown'
    :type current_monitor_state: str or
     ~azure.mgmt.workloadmonitor.models.HealthState
    :param evidence: Evidence. Evidence of this monitor's last state change.
    :type evidence: object
    :param monitor_configuration: Configuration. Configuration settings at the
     time of this monitor's last state change.
    :type monitor_configuration: object
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'monitor_name': {'key': 'properties.monitorName', 'type': 'str'},
        'monitor_type': {'key': 'properties.monitorType', 'type': 'str'},
        'monitored_object': {'key': 'properties.monitoredObject', 'type': 'str'},
        'evaluation_timestamp': {'key': 'properties.evaluationTimestamp', 'type': 'str'},
        'current_state_first_observed_timestamp': {'key': 'properties.currentStateFirstObservedTimestamp', 'type': 'str'},
        'previous_monitor_state': {'key': 'properties.previousMonitorState', 'type': 'str'},
        'current_monitor_state': {'key': 'properties.currentMonitorState', 'type': 'str'},
        'evidence': {'key': 'properties.evidence', 'type': 'object'},
        'monitor_configuration': {'key': 'properties.monitorConfiguration', 'type': 'object'},
    }

    def __init__(self, *, monitor_name: str=None, monitor_type: str=None, monitored_object: str=None, evaluation_timestamp: str=None, current_state_first_observed_timestamp: str=None, previous_monitor_state=None, current_monitor_state=None, evidence=None, monitor_configuration=None, **kwargs) -> None:
        super(MonitorStateChange, self).__init__(**kwargs)
        self.monitor_name = monitor_name
        self.monitor_type = monitor_type
        self.monitored_object = monitored_object
        self.evaluation_timestamp = evaluation_timestamp
        self.current_state_first_observed_timestamp = current_state_first_observed_timestamp
        self.previous_monitor_state = previous_monitor_state
        self.current_monitor_state = current_monitor_state
        self.evidence = evidence
        self.monitor_configuration = monitor_configuration


class Operation(Model):
    """Operation.

    Operation supported by the resource provider.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Operation Name. Name of the operation.
    :type name: str
    :param display: Required. Display. The properties of the resource
     operation.
    :type display: ~azure.mgmt.workloadmonitor.models.OperationDisplay
    :param origin: Required. Origin. The origin of the operation.
    :type origin: str
    """

    _validation = {
        'name': {'required': True},
        'display': {'required': True},
        'origin': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
    }

    def __init__(self, *, name: str, display, origin: str, **kwargs) -> None:
        super(Operation, self).__init__(**kwargs)
        self.name = name
        self.display = display
        self.origin = origin


class OperationDisplay(Model):
    """Display.

    The properties of the resource operation.

    All required parameters must be populated in order to send to Azure.

    :param provider: Required. Provider Name. Provider name of this operation.
    :type provider: str
    :param resource: Required. Resource Name. Resource name of this operation.
    :type resource: str
    :param operation: Required. Operation Name. Operation name of the
     operation.
    :type operation: str
    :param description: Required. Description. Description of the operation.
    :type description: str
    """

    _validation = {
        'provider': {'required': True},
        'resource': {'required': True},
        'operation': {'required': True},
        'description': {'required': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(self, *, provider: str, resource: str, operation: str, description: str, **kwargs) -> None:
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = provider
        self.resource = resource
        self.operation = operation
        self.description = description
