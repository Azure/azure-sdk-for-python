# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import uuid
from msrest.pipeline import ClientRawResponse

from .. import models


class HealthMonitorsOperations(object):
    """HealthMonitorsOperations operations.

    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    :ivar api_version: The API version to use for the operation. Constant value: "2020-01-13-preview".
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self.api_version = "2020-01-13-preview"

        self.config = config

    def list(
            self, subscription_id, resource_group_name, provider_name, resource_collection_name, resource_name, filter=None, expand=None, custom_headers=None, raw=False, **operation_config):
        """Get the current health status of all monitors of a virtual machine.
        Optional parameters: $expand (retrieve the monitor's evidence and
        configuration) and $filter (filter by monitor name).

        :param subscription_id: The subscription Id of the virtual machine.
        :type subscription_id: str
        :param resource_group_name: The resource group of the virtual machine.
        :type resource_group_name: str
        :param provider_name: The provider name (ex: Microsoft.Compute for
         virtual machines).
        :type provider_name: str
        :param resource_collection_name: The resource collection name (ex:
         virtualMachines for virtual machines).
        :type resource_collection_name: str
        :param resource_name: The name of the virtual machine.
        :type resource_name: str
        :param filter: Optionally filter by monitor name. Example:
         $filter=monitorName eq 'logical-disks|C:|disk-free-space-mb.'
        :type filter: str
        :param expand: Optionally expand the monitor’s evidence and/or
         configuration. Example: $expand=evidence,configuration.
        :type expand: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: An iterator like instance of HealthMonitor
        :rtype:
         ~azure.mgmt.workloadmonitor.models.HealthMonitorPaged[~azure.mgmt.workloadmonitor.models.HealthMonitor]
        :raises:
         :class:`ErrorResponseException<azure.mgmt.workloadmonitor.models.ErrorResponseException>`
        """
        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.list.metadata['url']
                path_format_arguments = {
                    'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
                    'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
                    'providerName': self._serialize.url("provider_name", provider_name, 'str'),
                    'resourceCollectionName': self._serialize.url("resource_collection_name", resource_collection_name, 'str'),
                    'resourceName': self._serialize.url("resource_name", resource_name, 'str')
                }
                url = self._client.format_url(url, **path_format_arguments)

                # Construct parameters
                query_parameters = {}
                query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str')
                if filter is not None:
                    query_parameters['$filter'] = self._serialize.query("filter", filter, 'str')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, 'str')

            else:
                url = next_link
                query_parameters = {}

            # Construct headers
            header_parameters = {}
            header_parameters['Accept'] = 'application/json'
            if self.config.generate_client_request_id:
                header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
            if custom_headers:
                header_parameters.update(custom_headers)
            if self.config.accept_language is not None:
                header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        def internal_paging(next_link=None):
            request = prepare_request(next_link)

            response = self._client.send(request, stream=False, **operation_config)

            if response.status_code not in [200]:
                raise models.ErrorResponseException(self._deserialize, response)

            return response

        # Deserialize response
        header_dict = None
        if raw:
            header_dict = {}
        deserialized = models.HealthMonitorPaged(internal_paging, self._deserialize.dependencies, header_dict)

        return deserialized
    list.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceCollectionName}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors'}

    def get(
            self, subscription_id, resource_group_name, provider_name, resource_collection_name, resource_name, monitor_id, expand=None, custom_headers=None, raw=False, **operation_config):
        """Get the current health status of a monitor of a virtual machine.
        Optional parameter: $expand (retrieve the monitor's evidence and
        configuration).

        :param subscription_id: The subscription Id of the virtual machine.
        :type subscription_id: str
        :param resource_group_name: The resource group of the virtual machine.
        :type resource_group_name: str
        :param provider_name: The provider name (ex: Microsoft.Compute for
         virtual machines).
        :type provider_name: str
        :param resource_collection_name: The resource collection name (ex:
         virtualMachines for virtual machines).
        :type resource_collection_name: str
        :param resource_name: The name of the virtual machine.
        :type resource_name: str
        :param monitor_id: The monitor Id of the virtual machine.
        :type monitor_id: str
        :param expand: Optionally expand the monitor’s evidence and/or
         configuration. Example: $expand=evidence,configuration.
        :type expand: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: HealthMonitor or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.workloadmonitor.models.HealthMonitor or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<azure.mgmt.workloadmonitor.models.ErrorResponseException>`
        """
        # Construct URL
        url = self.get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'providerName': self._serialize.url("provider_name", provider_name, 'str'),
            'resourceCollectionName': self._serialize.url("resource_collection_name", resource_collection_name, 'str'),
            'resourceName': self._serialize.url("resource_name", resource_name, 'str'),
            'monitorId': self._serialize.url("monitor_id", monitor_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('HealthMonitor', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceCollectionName}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}'}

    def list_state_changes(
            self, subscription_id, resource_group_name, provider_name, resource_collection_name, resource_name, monitor_id, filter=None, expand=None, start_timestamp_utc=None, end_timestamp_utc=None, custom_headers=None, raw=False, **operation_config):
        """Get the health state changes of a monitor of a virtual machine within
        the provided time window (default is the last 24 hours). Optional
        parameters: $expand (retrieve the monitor's evidence and configuration)
        and $filter (filter by heartbeat condition).

        :param subscription_id: The subscription Id of the virtual machine.
        :type subscription_id: str
        :param resource_group_name: The resource group of the virtual machine.
        :type resource_group_name: str
        :param provider_name: The provider name (ex: Microsoft.Compute for
         virtual machines).
        :type provider_name: str
        :param resource_collection_name: The resource collection name (ex:
         virtualMachines for virtual machines).
        :type resource_collection_name: str
        :param resource_name: The name of the virtual machine.
        :type resource_name: str
        :param monitor_id: The monitor Id of the virtual machine.
        :type monitor_id: str
        :param filter: Optionally filter by heartbeat condition. Example:
         $filter=isHeartbeat eq false.
        :type filter: str
        :param expand: Optionally expand the monitor’s evidence and/or
         configuration. Example: $expand=evidence,configuration.
        :type expand: str
        :param start_timestamp_utc: The start of the time window.
        :type start_timestamp_utc: datetime
        :param end_timestamp_utc: The end of the time window.
        :type end_timestamp_utc: datetime
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: An iterator like instance of HealthMonitorStateChange
        :rtype:
         ~azure.mgmt.workloadmonitor.models.HealthMonitorStateChangePaged[~azure.mgmt.workloadmonitor.models.HealthMonitorStateChange]
        :raises:
         :class:`ErrorResponseException<azure.mgmt.workloadmonitor.models.ErrorResponseException>`
        """
        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.list_state_changes.metadata['url']
                path_format_arguments = {
                    'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
                    'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
                    'providerName': self._serialize.url("provider_name", provider_name, 'str'),
                    'resourceCollectionName': self._serialize.url("resource_collection_name", resource_collection_name, 'str'),
                    'resourceName': self._serialize.url("resource_name", resource_name, 'str'),
                    'monitorId': self._serialize.url("monitor_id", monitor_id, 'str')
                }
                url = self._client.format_url(url, **path_format_arguments)

                # Construct parameters
                query_parameters = {}
                query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str')
                if filter is not None:
                    query_parameters['$filter'] = self._serialize.query("filter", filter, 'str')
                if expand is not None:
                    query_parameters['$expand'] = self._serialize.query("expand", expand, 'str')
                if start_timestamp_utc is not None:
                    query_parameters['startTimestampUtc'] = self._serialize.query("start_timestamp_utc", start_timestamp_utc, 'iso-8601')
                if end_timestamp_utc is not None:
                    query_parameters['endTimestampUtc'] = self._serialize.query("end_timestamp_utc", end_timestamp_utc, 'iso-8601')

            else:
                url = next_link
                query_parameters = {}

            # Construct headers
            header_parameters = {}
            header_parameters['Accept'] = 'application/json'
            if self.config.generate_client_request_id:
                header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
            if custom_headers:
                header_parameters.update(custom_headers)
            if self.config.accept_language is not None:
                header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        def internal_paging(next_link=None):
            request = prepare_request(next_link)

            response = self._client.send(request, stream=False, **operation_config)

            if response.status_code not in [200]:
                raise models.ErrorResponseException(self._deserialize, response)

            return response

        # Deserialize response
        header_dict = None
        if raw:
            header_dict = {}
        deserialized = models.HealthMonitorStateChangePaged(internal_paging, self._deserialize.dependencies, header_dict)

        return deserialized
    list_state_changes.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceCollectionName}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}/history'}

    def get_state_change(
            self, subscription_id, resource_group_name, provider_name, resource_collection_name, resource_name, monitor_id, timestamp_unix, expand=None, custom_headers=None, raw=False, **operation_config):
        """Get the health state change of a monitor of a virtual machine at the
        provided timestamp. Optional parameter: $expand (retrieve the monitor's
        evidence and configuration).

        :param subscription_id: The subscription Id of the virtual machine.
        :type subscription_id: str
        :param resource_group_name: The resource group of the virtual machine.
        :type resource_group_name: str
        :param provider_name: The provider name (ex: Microsoft.Compute for
         virtual machines).
        :type provider_name: str
        :param resource_collection_name: The resource collection name (ex:
         virtualMachines for virtual machines).
        :type resource_collection_name: str
        :param resource_name: The name of the virtual machine.
        :type resource_name: str
        :param monitor_id: The monitor Id of the virtual machine.
        :type monitor_id: str
        :param timestamp_unix: The timestamp of the state change (unix
         format).
        :type timestamp_unix: str
        :param expand: Optionally expand the monitor’s evidence and/or
         configuration. Example: $expand=evidence,configuration.
        :type expand: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: HealthMonitorStateChange or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.workloadmonitor.models.HealthMonitorStateChange or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ErrorResponseException<azure.mgmt.workloadmonitor.models.ErrorResponseException>`
        """
        # Construct URL
        url = self.get_state_change.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("subscription_id", subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
            'providerName': self._serialize.url("provider_name", provider_name, 'str'),
            'resourceCollectionName': self._serialize.url("resource_collection_name", resource_collection_name, 'str'),
            'resourceName': self._serialize.url("resource_name", resource_name, 'str'),
            'monitorId': self._serialize.url("monitor_id", monitor_id, 'str'),
            'timestampUnix': self._serialize.url("timestamp_unix", timestamp_unix, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str')
        if expand is not None:
            query_parameters['$expand'] = self._serialize.query("expand", expand, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('HealthMonitorStateChange', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_state_change.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerName}/{resourceCollectionName}/{resourceName}/providers/Microsoft.WorkloadMonitor/monitors/{monitorId}/history/{timestampUnix}'}
