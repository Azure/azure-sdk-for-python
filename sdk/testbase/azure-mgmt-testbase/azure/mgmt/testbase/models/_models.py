# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class AnalysisResultListResult(msrest.serialization.Model):
    """A list of Analysis Results. It will only contain one element as all the data will be nested in a singleton object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The list of Analysis Results.
    :vartype value: list[~test_base.models.AnalysisResultSingletonResource]
    :ivar next_link: Link to the next set of results. Not empty if value contains incomplete list
     of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[AnalysisResultSingletonResource]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of Analysis Results.
        :paramtype value: list[~test_base.models.AnalysisResultSingletonResource]
        """
        super(AnalysisResultListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class Resource(msrest.serialization.Model):
    """The Resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class ProxyResource(Resource):
    """The resource model definition for an ARM proxy resource. It will have everything other than required location and tags.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ProxyResource, self).__init__(**kwargs)


class AnalysisResultSingletonResource(ProxyResource):
    """The Analysis Result Singleton Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar system_data: The system metadata relating to this resource.
    :vartype system_data: ~test_base.models.SystemData
    :ivar grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
     "Fail".
    :vartype grade: str or ~test_base.models.Grade
    :ivar analysis_result_type: Type of the Analysis Result.Constant filled by server. Possible
     values include: "ScriptExecution", "Reliability", "CPUUtilization", "MemoryUtilization",
     "CPURegression", "MemoryRegression", "TestAnalysis".
    :vartype analysis_result_type: str or ~test_base.models.AnalysisResultType
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'grade': {'key': 'properties.grade', 'type': 'str'},
        'analysis_result_type': {'key': 'properties.analysisResultType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
         "Fail".
        :paramtype grade: str or ~test_base.models.Grade
        """
        super(AnalysisResultSingletonResource, self).__init__(**kwargs)
        self.system_data = None
        self.grade = kwargs.get('grade', None)
        self.analysis_result_type = None  # type: Optional[str]


class AnalysisResultSingletonResourceProperties(msrest.serialization.Model):
    """The properties of Analysis Result resource.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: CPURegressionResultSingletonResourceProperties, CPUUtilizationResultSingletonResourceProperties, MemoryRegressionResultSingletonResourceProperties, MemoryUtilizationResultSingletonResourceProperties, ReliabilityResultSingletonResourceProperties, ScriptExecutionResultSingletonResourceProperties, TestAnalysisResultSingletonResourceProperties.

    All required parameters must be populated in order to send to Azure.

    :ivar grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
     "Fail".
    :vartype grade: str or ~test_base.models.Grade
    :ivar analysis_result_type: Required. Type of the Analysis Result.Constant filled by server.
     Possible values include: "ScriptExecution", "Reliability", "CPUUtilization",
     "MemoryUtilization", "CPURegression", "MemoryRegression", "TestAnalysis".
    :vartype analysis_result_type: str or ~test_base.models.AnalysisResultType
    """

    _validation = {
        'analysis_result_type': {'required': True},
    }

    _attribute_map = {
        'grade': {'key': 'grade', 'type': 'str'},
        'analysis_result_type': {'key': 'analysisResultType', 'type': 'str'},
    }

    _subtype_map = {
        'analysis_result_type': {'CPURegression': 'CPURegressionResultSingletonResourceProperties', 'CPUUtilization': 'CPUUtilizationResultSingletonResourceProperties', 'MemoryRegression': 'MemoryRegressionResultSingletonResourceProperties', 'MemoryUtilization': 'MemoryUtilizationResultSingletonResourceProperties', 'Reliability': 'ReliabilityResultSingletonResourceProperties', 'ScriptExecution': 'ScriptExecutionResultSingletonResourceProperties', 'TestAnalysis': 'TestAnalysisResultSingletonResourceProperties'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
         "Fail".
        :paramtype grade: str or ~test_base.models.Grade
        """
        super(AnalysisResultSingletonResourceProperties, self).__init__(**kwargs)
        self.grade = kwargs.get('grade', None)
        self.analysis_result_type = None  # type: Optional[str]


class AvailableOSListResult(msrest.serialization.Model):
    """A list of available OSs.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The list of available OSs.
    :vartype value: list[~test_base.models.AvailableOSResource]
    :ivar next_link: Link to the next set of results. Not empty if value contains incomplete list
     of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[AvailableOSResource]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of available OSs.
        :paramtype value: list[~test_base.models.AvailableOSResource]
        """
        super(AvailableOSListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class AvailableOSResource(ProxyResource):
    """The Available OS resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar system_data: The system metadata relating to this resource.
    :vartype system_data: ~test_base.models.SystemData
    :ivar os_id: The Id of an Available OS of a Test Base Account.
    :vartype os_id: str
    :ivar os_name: The name of an Available OS of a Test Base Account.
    :vartype os_name: str
    :ivar os_version: The version of an Available OS of a Test Base Account.
    :vartype os_version: str
    :ivar insider_channel: The insider channel of an Available OS of a Test Base Account.
    :vartype insider_channel: str
    :ivar os_update_type: The OS update type of an Available OS of a Test Base Account.
    :vartype os_update_type: str
    :ivar os_platform: The Platform of an Available OS of a Test Base Account.
    :vartype os_platform: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'os_id': {'key': 'properties.osId', 'type': 'str'},
        'os_name': {'key': 'properties.osName', 'type': 'str'},
        'os_version': {'key': 'properties.osVersion', 'type': 'str'},
        'insider_channel': {'key': 'properties.insiderChannel', 'type': 'str'},
        'os_update_type': {'key': 'properties.osUpdateType', 'type': 'str'},
        'os_platform': {'key': 'properties.osPlatform', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword os_id: The Id of an Available OS of a Test Base Account.
        :paramtype os_id: str
        :keyword os_name: The name of an Available OS of a Test Base Account.
        :paramtype os_name: str
        :keyword os_version: The version of an Available OS of a Test Base Account.
        :paramtype os_version: str
        :keyword insider_channel: The insider channel of an Available OS of a Test Base Account.
        :paramtype insider_channel: str
        :keyword os_update_type: The OS update type of an Available OS of a Test Base Account.
        :paramtype os_update_type: str
        :keyword os_platform: The Platform of an Available OS of a Test Base Account.
        :paramtype os_platform: str
        """
        super(AvailableOSResource, self).__init__(**kwargs)
        self.system_data = None
        self.os_id = kwargs.get('os_id', None)
        self.os_name = kwargs.get('os_name', None)
        self.os_version = kwargs.get('os_version', None)
        self.insider_channel = kwargs.get('insider_channel', None)
        self.os_update_type = kwargs.get('os_update_type', None)
        self.os_platform = kwargs.get('os_platform', None)


class CheckNameAvailabilityResult(msrest.serialization.Model):
    """Description of a Check Name availability response properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name_available: Value indicating the availability of the name: true if the name is
     available; otherwise, false.
    :vartype name_available: bool
    :ivar reason: The reason for unavailability of a name. Required if nameAvailable == false.
     Possible values include: "Invalid", "AlreadyExists".
    :vartype reason: str or ~test_base.models.Reason
    :ivar message: The detailed info regarding the reason associated with the name. Required if
     nameAvailable == false.
    :vartype message: str
    """

    _validation = {
        'message': {'readonly': True},
    }

    _attribute_map = {
        'name_available': {'key': 'nameAvailable', 'type': 'bool'},
        'reason': {'key': 'reason', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name_available: Value indicating the availability of the name: true if the name is
         available; otherwise, false.
        :paramtype name_available: bool
        :keyword reason: The reason for unavailability of a name. Required if nameAvailable == false.
         Possible values include: "Invalid", "AlreadyExists".
        :paramtype reason: str or ~test_base.models.Reason
        """
        super(CheckNameAvailabilityResult, self).__init__(**kwargs)
        self.name_available = kwargs.get('name_available', None)
        self.reason = kwargs.get('reason', None)
        self.message = None


class Command(msrest.serialization.Model):
    """The command used in the test.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required. The name of the command.
    :vartype name: str
    :ivar action: Required. The action of the command. Possible values include: "Install",
     "Launch", "Close", "Uninstall", "Custom".
    :vartype action: str or ~test_base.models.Action
    :ivar content_type: Required. The type of command content. Possible values include: "Inline",
     "File", "Path".
    :vartype content_type: str or ~test_base.models.ContentType
    :ivar content: Required. The content of the command. The content depends on source type.
    :vartype content: str
    :ivar run_elevated: Specifies whether to run the command as administrator.
    :vartype run_elevated: bool
    :ivar restart_after: Specifies whether to restart the VM after the command executed.
    :vartype restart_after: bool
    :ivar max_run_time: Specifies the max run time of the command.
    :vartype max_run_time: int
    :ivar run_as_interactive: Specifies whether to run the command in interactive mode.
    :vartype run_as_interactive: bool
    :ivar always_run: Specifies whether to run the command even if a previous command is failed.
    :vartype always_run: bool
    :ivar apply_update_before: Specifies whether to apply update before the command.
    :vartype apply_update_before: bool
    """

    _validation = {
        'name': {'required': True},
        'action': {'required': True},
        'content_type': {'required': True},
        'content': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'action': {'key': 'action', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'content': {'key': 'content', 'type': 'str'},
        'run_elevated': {'key': 'runElevated', 'type': 'bool'},
        'restart_after': {'key': 'restartAfter', 'type': 'bool'},
        'max_run_time': {'key': 'maxRunTime', 'type': 'int'},
        'run_as_interactive': {'key': 'runAsInteractive', 'type': 'bool'},
        'always_run': {'key': 'alwaysRun', 'type': 'bool'},
        'apply_update_before': {'key': 'applyUpdateBefore', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Required. The name of the command.
        :paramtype name: str
        :keyword action: Required. The action of the command. Possible values include: "Install",
         "Launch", "Close", "Uninstall", "Custom".
        :paramtype action: str or ~test_base.models.Action
        :keyword content_type: Required. The type of command content. Possible values include:
         "Inline", "File", "Path".
        :paramtype content_type: str or ~test_base.models.ContentType
        :keyword content: Required. The content of the command. The content depends on source type.
        :paramtype content: str
        :keyword run_elevated: Specifies whether to run the command as administrator.
        :paramtype run_elevated: bool
        :keyword restart_after: Specifies whether to restart the VM after the command executed.
        :paramtype restart_after: bool
        :keyword max_run_time: Specifies the max run time of the command.
        :paramtype max_run_time: int
        :keyword run_as_interactive: Specifies whether to run the command in interactive mode.
        :paramtype run_as_interactive: bool
        :keyword always_run: Specifies whether to run the command even if a previous command is failed.
        :paramtype always_run: bool
        :keyword apply_update_before: Specifies whether to apply update before the command.
        :paramtype apply_update_before: bool
        """
        super(Command, self).__init__(**kwargs)
        self.name = kwargs['name']
        self.action = kwargs['action']
        self.content_type = kwargs['content_type']
        self.content = kwargs['content']
        self.run_elevated = kwargs.get('run_elevated', None)
        self.restart_after = kwargs.get('restart_after', None)
        self.max_run_time = kwargs.get('max_run_time', None)
        self.run_as_interactive = kwargs.get('run_as_interactive', None)
        self.always_run = kwargs.get('always_run', None)
        self.apply_update_before = kwargs.get('apply_update_before', None)


class CPURegressionResultSingletonResourceProperties(AnalysisResultSingletonResourceProperties):
    """The properties of CPU Regression Result.

    All required parameters must be populated in order to send to Azure.

    :ivar grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
     "Fail".
    :vartype grade: str or ~test_base.models.Grade
    :ivar analysis_result_type: Required. Type of the Analysis Result.Constant filled by server.
     Possible values include: "ScriptExecution", "Reliability", "CPUUtilization",
     "MemoryUtilization", "CPURegression", "MemoryRegression", "TestAnalysis".
    :vartype analysis_result_type: str or ~test_base.models.AnalysisResultType
    :ivar cpu_regression_results: The result array data.
    :vartype cpu_regression_results: list[~test_base.models.RegressionResult]
    """

    _validation = {
        'analysis_result_type': {'required': True},
    }

    _attribute_map = {
        'grade': {'key': 'grade', 'type': 'str'},
        'analysis_result_type': {'key': 'analysisResultType', 'type': 'str'},
        'cpu_regression_results': {'key': 'cpuRegressionResults', 'type': '[RegressionResult]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
         "Fail".
        :paramtype grade: str or ~test_base.models.Grade
        :keyword cpu_regression_results: The result array data.
        :paramtype cpu_regression_results: list[~test_base.models.RegressionResult]
        """
        super(CPURegressionResultSingletonResourceProperties, self).__init__(**kwargs)
        self.analysis_result_type = 'CPURegression'  # type: str
        self.cpu_regression_results = kwargs.get('cpu_regression_results', None)


class CPUUtilizationResultSingletonResourceProperties(AnalysisResultSingletonResourceProperties):
    """The properties of CPU Utilization Result.

    All required parameters must be populated in order to send to Azure.

    :ivar grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
     "Fail".
    :vartype grade: str or ~test_base.models.Grade
    :ivar analysis_result_type: Required. Type of the Analysis Result.Constant filled by server.
     Possible values include: "ScriptExecution", "Reliability", "CPUUtilization",
     "MemoryUtilization", "CPURegression", "MemoryRegression", "TestAnalysis".
    :vartype analysis_result_type: str or ~test_base.models.AnalysisResultType
    :ivar cpu_utilization_results: The result array data.
    :vartype cpu_utilization_results: list[~test_base.models.UtilizationResult]
    """

    _validation = {
        'analysis_result_type': {'required': True},
    }

    _attribute_map = {
        'grade': {'key': 'grade', 'type': 'str'},
        'analysis_result_type': {'key': 'analysisResultType', 'type': 'str'},
        'cpu_utilization_results': {'key': 'cpuUtilizationResults', 'type': '[UtilizationResult]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
         "Fail".
        :paramtype grade: str or ~test_base.models.Grade
        :keyword cpu_utilization_results: The result array data.
        :paramtype cpu_utilization_results: list[~test_base.models.UtilizationResult]
        """
        super(CPUUtilizationResultSingletonResourceProperties, self).__init__(**kwargs)
        self.analysis_result_type = 'CPUUtilization'  # type: str
        self.cpu_utilization_results = kwargs.get('cpu_utilization_results', None)


class CustomerEventListResult(msrest.serialization.Model):
    """A list of Test Base Customer Events.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The list of Test Base Customer Events.
    :vartype value: list[~test_base.models.CustomerEventResource]
    :ivar next_link: Link to the next set of results. Not empty if value contains incomplete list
     of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[CustomerEventResource]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of Test Base Customer Events.
        :paramtype value: list[~test_base.models.CustomerEventResource]
        """
        super(CustomerEventListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class CustomerEventResource(ProxyResource):
    """The Customer Notification Event resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar system_data: The system metadata relating to this resource.
    :vartype system_data: ~test_base.models.SystemData
    :ivar event_name: The name of the event subscribed to.
    :vartype event_name: str
    :ivar receivers: The notification event receivers.
    :vartype receivers: list[~test_base.models.NotificationEventReceiver]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'event_name': {'key': 'properties.eventName', 'type': 'str'},
        'receivers': {'key': 'properties.receivers', 'type': '[NotificationEventReceiver]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword event_name: The name of the event subscribed to.
        :paramtype event_name: str
        :keyword receivers: The notification event receivers.
        :paramtype receivers: list[~test_base.models.NotificationEventReceiver]
        """
        super(CustomerEventResource, self).__init__(**kwargs)
        self.system_data = None
        self.event_name = kwargs.get('event_name', None)
        self.receivers = kwargs.get('receivers', None)


class DistributionGroupListReceiverValue(msrest.serialization.Model):
    """The user object receiver value.

    :ivar distribution_groups: The list of distribution groups.
    :vartype distribution_groups: list[str]
    """

    _attribute_map = {
        'distribution_groups': {'key': 'distributionGroups', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword distribution_groups: The list of distribution groups.
        :paramtype distribution_groups: list[str]
        """
        super(DistributionGroupListReceiverValue, self).__init__(**kwargs)
        self.distribution_groups = kwargs.get('distribution_groups', None)


class DownloadURLResponse(msrest.serialization.Model):
    """The response of getting a download URL.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar download_url: The download URL.
    :vartype download_url: str
    :ivar expiration_time: Expiry date of the download URL.
    :vartype expiration_time: ~datetime.datetime
    """

    _validation = {
        'download_url': {'readonly': True},
        'expiration_time': {'readonly': True},
    }

    _attribute_map = {
        'download_url': {'key': 'downloadUrl', 'type': 'str'},
        'expiration_time': {'key': 'expirationTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(DownloadURLResponse, self).__init__(**kwargs)
        self.download_url = None
        self.expiration_time = None


class EmailEventListResult(msrest.serialization.Model):
    """A list of email events.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The list of email events.
    :vartype value: list[~test_base.models.EmailEventResource]
    :ivar next_link: Link to the next set of results. Not empty if value contains incomplete list
     of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[EmailEventResource]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of email events.
        :paramtype value: list[~test_base.models.EmailEventResource]
        """
        super(EmailEventListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class EmailEventResource(ProxyResource):
    """The email event resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar system_data: The system metadata relating to this resource.
    :vartype system_data: ~test_base.models.SystemData
    :ivar event_id: The identifier of the email event.
    :vartype event_id: str
    :ivar event_name: The name of the email event.
    :vartype event_name: str
    :ivar display_name: The display name of the email event.
    :vartype display_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'event_id': {'key': 'properties.eventId', 'type': 'str'},
        'event_name': {'key': 'properties.eventName', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword event_id: The identifier of the email event.
        :paramtype event_id: str
        :keyword event_name: The name of the email event.
        :paramtype event_name: str
        :keyword display_name: The display name of the email event.
        :paramtype display_name: str
        """
        super(EmailEventResource, self).__init__(**kwargs)
        self.system_data = None
        self.event_id = kwargs.get('event_id', None)
        self.event_name = kwargs.get('event_name', None)
        self.display_name = kwargs.get('display_name', None)


class ErrorDefinition(msrest.serialization.Model):
    """Error definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The target of the particular error.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~test_base.models.ErrorDefinition]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDefinition]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ErrorDefinition, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None


class ErrorResponse(msrest.serialization.Model):
    """The error response send when an operation fails.

    :ivar error: The error details.
    :vartype error: ~test_base.models.ErrorDefinition
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorDefinition'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword error: The error details.
        :paramtype error: ~test_base.models.ErrorDefinition
        """
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class FavoriteProcessListResult(msrest.serialization.Model):
    """A list of favorite processes for a package.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The list of favorite processes for a package.
    :vartype value: list[~test_base.models.FavoriteProcessResource]
    :ivar next_link: Link to the next set of results. Not empty if value contains incomplete list
     of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[FavoriteProcessResource]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of favorite processes for a package.
        :paramtype value: list[~test_base.models.FavoriteProcessResource]
        """
        super(FavoriteProcessListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class FavoriteProcessResource(ProxyResource):
    """A favorite process identifier.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar system_data: The system metadata relating to this resource.
    :vartype system_data: ~test_base.models.SystemData
    :ivar actual_process_name: The actual name of the favorite process. It will be equal to
     resource name except for the scenario that the process name contains characters that are not
     allowed in the resource name.
    :vartype actual_process_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'actual_process_name': {'key': 'properties.actualProcessName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword actual_process_name: The actual name of the favorite process. It will be equal to
         resource name except for the scenario that the process name contains characters that are not
         allowed in the resource name.
        :paramtype actual_process_name: str
        """
        super(FavoriteProcessResource, self).__init__(**kwargs)
        self.system_data = None
        self.actual_process_name = kwargs.get('actual_process_name', None)


class FileUploadURLResponse(msrest.serialization.Model):
    """The URL response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar upload_url: The URL used for uploading the package.
    :vartype upload_url: str
    :ivar blob_path: The blob path of the uploaded package. It will be used as the 'blobPath'
     property of PackageResource.
    :vartype blob_path: str
    """

    _validation = {
        'upload_url': {'readonly': True},
        'blob_path': {'readonly': True},
    }

    _attribute_map = {
        'upload_url': {'key': 'uploadUrl', 'type': 'str'},
        'blob_path': {'key': 'blobPath', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(FileUploadURLResponse, self).__init__(**kwargs)
        self.upload_url = None
        self.blob_path = None


class FlightingRingListResult(msrest.serialization.Model):
    """A list of flighting rings.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The list of flighting rings.
    :vartype value: list[~test_base.models.FlightingRingResource]
    :ivar next_link: Link to the next set of results. Not empty if value contains incomplete list
     of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[FlightingRingResource]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of flighting rings.
        :paramtype value: list[~test_base.models.FlightingRingResource]
        """
        super(FlightingRingListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class FlightingRingResource(ProxyResource):
    """The flighting ring resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar system_data: The system metadata relating to this resource.
    :vartype system_data: ~test_base.models.SystemData
    :ivar actual_flighting_ring_name: The actual name of a flighting ring of a Test Base Account.
    :vartype actual_flighting_ring_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'actual_flighting_ring_name': {'key': 'properties.actualFlightingRingName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword actual_flighting_ring_name: The actual name of a flighting ring of a Test Base
         Account.
        :paramtype actual_flighting_ring_name: str
        """
        super(FlightingRingResource, self).__init__(**kwargs)
        self.system_data = None
        self.actual_flighting_ring_name = kwargs.get('actual_flighting_ring_name', None)


class GetFileUploadURLParameters(msrest.serialization.Model):
    """The parameters supplied to the Test Base Account GetFileUploadURL action.

    :ivar blob_name: The custom file name of the uploaded blob.
    :vartype blob_name: str
    """

    _attribute_map = {
        'blob_name': {'key': 'blobName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword blob_name: The custom file name of the uploaded blob.
        :paramtype blob_name: str
        """
        super(GetFileUploadURLParameters, self).__init__(**kwargs)
        self.blob_name = kwargs.get('blob_name', None)


class IdentifiedFailure(msrest.serialization.Model):
    """The failure identified.

    :ivar failure_id: The Failure Id.
    :vartype failure_id: str
    :ivar category: The category of the failure. Possible values include: "None", "Unidentified",
     "Package", "OSUpdate", "Infrastructure".
    :vartype category: str or ~test_base.models.Category
    :ivar error_message: Message that shows information about the failure.
    :vartype error_message: str
    :ivar guidance: Guidance that shows what the customer needs to do for this failure.
    :vartype guidance: str
    """

    _attribute_map = {
        'failure_id': {'key': 'failureId', 'type': 'str'},
        'category': {'key': 'category', 'type': 'str'},
        'error_message': {'key': 'errorMessage', 'type': 'str'},
        'guidance': {'key': 'guidance', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword failure_id: The Failure Id.
        :paramtype failure_id: str
        :keyword category: The category of the failure. Possible values include: "None",
         "Unidentified", "Package", "OSUpdate", "Infrastructure".
        :paramtype category: str or ~test_base.models.Category
        :keyword error_message: Message that shows information about the failure.
        :paramtype error_message: str
        :keyword guidance: Guidance that shows what the customer needs to do for this failure.
        :paramtype guidance: str
        """
        super(IdentifiedFailure, self).__init__(**kwargs)
        self.failure_id = kwargs.get('failure_id', None)
        self.category = kwargs.get('category', None)
        self.error_message = kwargs.get('error_message', None)
        self.guidance = kwargs.get('guidance', None)


class MemoryRegressionResultSingletonResourceProperties(AnalysisResultSingletonResourceProperties):
    """The properties of Memory Regression Result.

    All required parameters must be populated in order to send to Azure.

    :ivar grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
     "Fail".
    :vartype grade: str or ~test_base.models.Grade
    :ivar analysis_result_type: Required. Type of the Analysis Result.Constant filled by server.
     Possible values include: "ScriptExecution", "Reliability", "CPUUtilization",
     "MemoryUtilization", "CPURegression", "MemoryRegression", "TestAnalysis".
    :vartype analysis_result_type: str or ~test_base.models.AnalysisResultType
    :ivar memory_regression_results: The result array data.
    :vartype memory_regression_results: list[~test_base.models.RegressionResult]
    """

    _validation = {
        'analysis_result_type': {'required': True},
    }

    _attribute_map = {
        'grade': {'key': 'grade', 'type': 'str'},
        'analysis_result_type': {'key': 'analysisResultType', 'type': 'str'},
        'memory_regression_results': {'key': 'memoryRegressionResults', 'type': '[RegressionResult]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
         "Fail".
        :paramtype grade: str or ~test_base.models.Grade
        :keyword memory_regression_results: The result array data.
        :paramtype memory_regression_results: list[~test_base.models.RegressionResult]
        """
        super(MemoryRegressionResultSingletonResourceProperties, self).__init__(**kwargs)
        self.analysis_result_type = 'MemoryRegression'  # type: str
        self.memory_regression_results = kwargs.get('memory_regression_results', None)


class MemoryUtilizationResultSingletonResourceProperties(AnalysisResultSingletonResourceProperties):
    """The properties of Memory Utilization Result.

    All required parameters must be populated in order to send to Azure.

    :ivar grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
     "Fail".
    :vartype grade: str or ~test_base.models.Grade
    :ivar analysis_result_type: Required. Type of the Analysis Result.Constant filled by server.
     Possible values include: "ScriptExecution", "Reliability", "CPUUtilization",
     "MemoryUtilization", "CPURegression", "MemoryRegression", "TestAnalysis".
    :vartype analysis_result_type: str or ~test_base.models.AnalysisResultType
    :ivar memory_utilization_results: The result array data.
    :vartype memory_utilization_results: list[~test_base.models.UtilizationResult]
    """

    _validation = {
        'analysis_result_type': {'required': True},
    }

    _attribute_map = {
        'grade': {'key': 'grade', 'type': 'str'},
        'analysis_result_type': {'key': 'analysisResultType', 'type': 'str'},
        'memory_utilization_results': {'key': 'memoryUtilizationResults', 'type': '[UtilizationResult]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
         "Fail".
        :paramtype grade: str or ~test_base.models.Grade
        :keyword memory_utilization_results: The result array data.
        :paramtype memory_utilization_results: list[~test_base.models.UtilizationResult]
        """
        super(MemoryUtilizationResultSingletonResourceProperties, self).__init__(**kwargs)
        self.analysis_result_type = 'MemoryUtilization'  # type: str
        self.memory_utilization_results = kwargs.get('memory_utilization_results', None)


class NotificationEventReceiver(msrest.serialization.Model):
    """A notification event receivers.

    :ivar receiver_type: The type of the notification event receiver.
    :vartype receiver_type: str
    :ivar receiver_value: The notification event receiver value.
    :vartype receiver_value: ~test_base.models.NotificationReceiverValue
    """

    _attribute_map = {
        'receiver_type': {'key': 'receiverType', 'type': 'str'},
        'receiver_value': {'key': 'receiverValue', 'type': 'NotificationReceiverValue'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword receiver_type: The type of the notification event receiver.
        :paramtype receiver_type: str
        :keyword receiver_value: The notification event receiver value.
        :paramtype receiver_value: ~test_base.models.NotificationReceiverValue
        """
        super(NotificationEventReceiver, self).__init__(**kwargs)
        self.receiver_type = kwargs.get('receiver_type', None)
        self.receiver_value = kwargs.get('receiver_value', None)


class NotificationReceiverValue(msrest.serialization.Model):
    """A notification event receiver value.

    :ivar user_object_receiver_value: The user object receiver value.
    :vartype user_object_receiver_value: ~test_base.models.UserObjectReceiverValue
    :ivar subscription_receiver_value: The user object receiver value.
    :vartype subscription_receiver_value: ~test_base.models.SubscriptionReceiverValue
    :ivar distribution_group_list_receiver_value: The user object receiver value.
    :vartype distribution_group_list_receiver_value:
     ~test_base.models.DistributionGroupListReceiverValue
    """

    _attribute_map = {
        'user_object_receiver_value': {'key': 'userObjectReceiverValue', 'type': 'UserObjectReceiverValue'},
        'subscription_receiver_value': {'key': 'subscriptionReceiverValue', 'type': 'SubscriptionReceiverValue'},
        'distribution_group_list_receiver_value': {'key': 'distributionGroupListReceiverValue', 'type': 'DistributionGroupListReceiverValue'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword user_object_receiver_value: The user object receiver value.
        :paramtype user_object_receiver_value: ~test_base.models.UserObjectReceiverValue
        :keyword subscription_receiver_value: The user object receiver value.
        :paramtype subscription_receiver_value: ~test_base.models.SubscriptionReceiverValue
        :keyword distribution_group_list_receiver_value: The user object receiver value.
        :paramtype distribution_group_list_receiver_value:
         ~test_base.models.DistributionGroupListReceiverValue
        """
        super(NotificationReceiverValue, self).__init__(**kwargs)
        self.user_object_receiver_value = kwargs.get('user_object_receiver_value', None)
        self.subscription_receiver_value = kwargs.get('subscription_receiver_value', None)
        self.distribution_group_list_receiver_value = kwargs.get('distribution_group_list_receiver_value', None)


class Operation(msrest.serialization.Model):
    """REST API operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Operation name: {provider}/{resource}/{operation}.
    :vartype name: str
    :ivar is_data_action: Indicates whether the operation is a data action.
    :vartype is_data_action: bool
    :ivar origin: Origin of the operation.
    :vartype origin: str
    :ivar display: The object that describes the operation.
    :vartype display: ~test_base.models.OperationDisplay
    :ivar properties: Extra properties of the operation.
    :vartype properties: any
    """

    _validation = {
        'name': {'readonly': True},
        'is_data_action': {'readonly': True},
        'origin': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'is_data_action': {'key': 'isDataAction', 'type': 'bool'},
        'origin': {'key': 'origin', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'properties': {'key': 'properties', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword display: The object that describes the operation.
        :paramtype display: ~test_base.models.OperationDisplay
        :keyword properties: Extra properties of the operation.
        :paramtype properties: any
        """
        super(Operation, self).__init__(**kwargs)
        self.name = None
        self.is_data_action = None
        self.origin = None
        self.display = kwargs.get('display', None)
        self.properties = kwargs.get('properties', None)


class OperationDisplay(msrest.serialization.Model):
    """The object that describes the operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The resource provider name: Microsoft.TestBase.
    :vartype provider: str
    :ivar operation: Operation type: read, write, delete, listPackages, etc.
    :vartype operation: str
    :ivar resource: Resource type on which the operation is performed.
    :vartype resource: str
    :ivar description: Friendly name of the operation.
    :vartype description: str
    """

    _validation = {
        'provider': {'readonly': True},
        'operation': {'readonly': True},
        'resource': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = None
        self.operation = None
        self.resource = None
        self.description = None


class OperationListResult(msrest.serialization.Model):
    """A list of operations supported by the resource provider.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the Test Base resource provider.
    :vartype value: list[~test_base.models.Operation]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of operations supported by the Test Base resource provider.
        :paramtype value: list[~test_base.models.Operation]
        """
        super(OperationListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class OSUpdateListResult(msrest.serialization.Model):
    """A list of OS Updates.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The list of OS Updates.
    :vartype value: list[~test_base.models.OSUpdateResource]
    :ivar next_link: Link to the next set of results. Not empty if value contains incomplete list
     of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[OSUpdateResource]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of OS Updates.
        :paramtype value: list[~test_base.models.OSUpdateResource]
        """
        super(OSUpdateListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class OSUpdateResource(ProxyResource):
    """An OS Update.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar system_data: The system metadata relating to this resource.
    :vartype system_data: ~test_base.models.SystemData
    :ivar os_name: The name of the OS.
    :vartype os_name: str
    :ivar release: The name of tested release.
    :vartype release: str
    :ivar flighting_ring: The flighting ring, only for release of feature updates.
    :vartype flighting_ring: str
    :ivar build_version: The build version of the tested release (OS update).
    :vartype build_version: str
    :ivar build_revision: The build revision of the tested release (OS update).
    :vartype build_revision: str
    :ivar type_properties_type: The type of this release (OS update). Possible values include:
     "SecurityUpdate", "FeatureUpdate".
    :vartype type_properties_type: str or ~test_base.models.Type
    :ivar release_version_date: The release version date the tested release (OS update).
    :vartype release_version_date: ~datetime.datetime
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'os_name': {'key': 'properties.osName', 'type': 'str'},
        'release': {'key': 'properties.release', 'type': 'str'},
        'flighting_ring': {'key': 'properties.flightingRing', 'type': 'str'},
        'build_version': {'key': 'properties.buildVersion', 'type': 'str'},
        'build_revision': {'key': 'properties.buildRevision', 'type': 'str'},
        'type_properties_type': {'key': 'properties.type', 'type': 'str'},
        'release_version_date': {'key': 'properties.releaseVersionDate', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword os_name: The name of the OS.
        :paramtype os_name: str
        :keyword release: The name of tested release.
        :paramtype release: str
        :keyword flighting_ring: The flighting ring, only for release of feature updates.
        :paramtype flighting_ring: str
        :keyword build_version: The build version of the tested release (OS update).
        :paramtype build_version: str
        :keyword build_revision: The build revision of the tested release (OS update).
        :paramtype build_revision: str
        :keyword type_properties_type: The type of this release (OS update). Possible values include:
         "SecurityUpdate", "FeatureUpdate".
        :paramtype type_properties_type: str or ~test_base.models.Type
        :keyword release_version_date: The release version date the tested release (OS update).
        :paramtype release_version_date: ~datetime.datetime
        """
        super(OSUpdateResource, self).__init__(**kwargs)
        self.system_data = None
        self.os_name = kwargs.get('os_name', None)
        self.release = kwargs.get('release', None)
        self.flighting_ring = kwargs.get('flighting_ring', None)
        self.build_version = kwargs.get('build_version', None)
        self.build_revision = kwargs.get('build_revision', None)
        self.type_properties_type = kwargs.get('type_properties_type', None)
        self.release_version_date = kwargs.get('release_version_date', None)


class OSUpdatesTestSummary(msrest.serialization.Model):
    """The summary of some tests.

    :ivar execution_status: The status of the last test. Possible values include: "None",
     "InProgress", "Processing", "Completed", "NotExecuted", "Incomplete", "Failed", "Succeeded".
    :vartype execution_status: str or ~test_base.models.ExecutionStatus
    :ivar test_status: The status of last test. Possible values include: "None",
     "TestExecutionInProgress", "DataProcessing", "TestFailure", "UpdateFailure",
     "TestAndUpdateFailure", "InfrastructureFailure", "Completed".
    :vartype test_status: str or ~test_base.models.TestStatus
    :ivar grade: The grade of last test. Possible values include: "None", "NotAvailable", "Pass",
     "Fail".
    :vartype grade: str or ~test_base.models.Grade
    :ivar test_run_time: The run time of the last test.
    :vartype test_run_time: str
    :ivar os_update_test_summaries: Detailed summary for each OS update.
    :vartype os_update_test_summaries: list[~test_base.models.OSUpdateTestSummary]
    """

    _attribute_map = {
        'execution_status': {'key': 'executionStatus', 'type': 'str'},
        'test_status': {'key': 'testStatus', 'type': 'str'},
        'grade': {'key': 'grade', 'type': 'str'},
        'test_run_time': {'key': 'testRunTime', 'type': 'str'},
        'os_update_test_summaries': {'key': 'osUpdateTestSummaries', 'type': '[OSUpdateTestSummary]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword execution_status: The status of the last test. Possible values include: "None",
         "InProgress", "Processing", "Completed", "NotExecuted", "Incomplete", "Failed", "Succeeded".
        :paramtype execution_status: str or ~test_base.models.ExecutionStatus
        :keyword test_status: The status of last test. Possible values include: "None",
         "TestExecutionInProgress", "DataProcessing", "TestFailure", "UpdateFailure",
         "TestAndUpdateFailure", "InfrastructureFailure", "Completed".
        :paramtype test_status: str or ~test_base.models.TestStatus
        :keyword grade: The grade of last test. Possible values include: "None", "NotAvailable",
         "Pass", "Fail".
        :paramtype grade: str or ~test_base.models.Grade
        :keyword test_run_time: The run time of the last test.
        :paramtype test_run_time: str
        :keyword os_update_test_summaries: Detailed summary for each OS update.
        :paramtype os_update_test_summaries: list[~test_base.models.OSUpdateTestSummary]
        """
        super(OSUpdatesTestSummary, self).__init__(**kwargs)
        self.execution_status = kwargs.get('execution_status', None)
        self.test_status = kwargs.get('test_status', None)
        self.grade = kwargs.get('grade', None)
        self.test_run_time = kwargs.get('test_run_time', None)
        self.os_update_test_summaries = kwargs.get('os_update_test_summaries', None)


class OSUpdateTestSummary(msrest.serialization.Model):
    """The summary of a test.

    :ivar os_name: The operating system name. e.g. Windows 10 1809.
    :vartype os_name: str
    :ivar release_name: The name of the tested release (OS update).
    :vartype release_name: str
    :ivar build_version: The build version of the tested release (OS update).
    :vartype build_version: str
    :ivar build_revision: The build revision of the tested release (OS update).
    :vartype build_revision: str
    :ivar release_version_date: The release version date.
    :vartype release_version_date: ~datetime.datetime
    :ivar flighting_ring: The flighting ring, only for release of feature updates.
    :vartype flighting_ring: str
    :ivar execution_status: The execution status of the test. Possible values include: "None",
     "InProgress", "Processing", "Completed", "NotExecuted", "Incomplete", "Failed", "Succeeded".
    :vartype execution_status: str or ~test_base.models.ExecutionStatus
    :ivar test_status: The status of the test. Possible values include: "None",
     "TestExecutionInProgress", "DataProcessing", "TestFailure", "UpdateFailure",
     "TestAndUpdateFailure", "InfrastructureFailure", "Completed".
    :vartype test_status: str or ~test_base.models.TestStatus
    :ivar grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
     "Fail".
    :vartype grade: str or ~test_base.models.Grade
    :ivar test_run_time: The run time of the test.
    :vartype test_run_time: str
    :ivar test_type: The test type of the package.
    :vartype test_type: str
    """

    _attribute_map = {
        'os_name': {'key': 'osName', 'type': 'str'},
        'release_name': {'key': 'releaseName', 'type': 'str'},
        'build_version': {'key': 'buildVersion', 'type': 'str'},
        'build_revision': {'key': 'buildRevision', 'type': 'str'},
        'release_version_date': {'key': 'releaseVersionDate', 'type': 'iso-8601'},
        'flighting_ring': {'key': 'flightingRing', 'type': 'str'},
        'execution_status': {'key': 'executionStatus', 'type': 'str'},
        'test_status': {'key': 'testStatus', 'type': 'str'},
        'grade': {'key': 'grade', 'type': 'str'},
        'test_run_time': {'key': 'testRunTime', 'type': 'str'},
        'test_type': {'key': 'testType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword os_name: The operating system name. e.g. Windows 10 1809.
        :paramtype os_name: str
        :keyword release_name: The name of the tested release (OS update).
        :paramtype release_name: str
        :keyword build_version: The build version of the tested release (OS update).
        :paramtype build_version: str
        :keyword build_revision: The build revision of the tested release (OS update).
        :paramtype build_revision: str
        :keyword release_version_date: The release version date.
        :paramtype release_version_date: ~datetime.datetime
        :keyword flighting_ring: The flighting ring, only for release of feature updates.
        :paramtype flighting_ring: str
        :keyword execution_status: The execution status of the test. Possible values include: "None",
         "InProgress", "Processing", "Completed", "NotExecuted", "Incomplete", "Failed", "Succeeded".
        :paramtype execution_status: str or ~test_base.models.ExecutionStatus
        :keyword test_status: The status of the test. Possible values include: "None",
         "TestExecutionInProgress", "DataProcessing", "TestFailure", "UpdateFailure",
         "TestAndUpdateFailure", "InfrastructureFailure", "Completed".
        :paramtype test_status: str or ~test_base.models.TestStatus
        :keyword grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
         "Fail".
        :paramtype grade: str or ~test_base.models.Grade
        :keyword test_run_time: The run time of the test.
        :paramtype test_run_time: str
        :keyword test_type: The test type of the package.
        :paramtype test_type: str
        """
        super(OSUpdateTestSummary, self).__init__(**kwargs)
        self.os_name = kwargs.get('os_name', None)
        self.release_name = kwargs.get('release_name', None)
        self.build_version = kwargs.get('build_version', None)
        self.build_revision = kwargs.get('build_revision', None)
        self.release_version_date = kwargs.get('release_version_date', None)
        self.flighting_ring = kwargs.get('flighting_ring', None)
        self.execution_status = kwargs.get('execution_status', None)
        self.test_status = kwargs.get('test_status', None)
        self.grade = kwargs.get('grade', None)
        self.test_run_time = kwargs.get('test_run_time', None)
        self.test_type = kwargs.get('test_type', None)


class PackageCheckNameAvailabilityParameters(msrest.serialization.Model):
    """Parameters body to pass for Test Base Package name availability check.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required. Resource name to verify.
    :vartype name: str
    :ivar application_name: Required. Application name to verify.
    :vartype application_name: str
    :ivar version: Required. Version name to verify.
    :vartype version: str
    :ivar type: Required. fully qualified resource type which includes provider namespace.
    :vartype type: str
    """

    _validation = {
        'name': {'required': True},
        'application_name': {'required': True},
        'version': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'application_name': {'key': 'applicationName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Required. Resource name to verify.
        :paramtype name: str
        :keyword application_name: Required. Application name to verify.
        :paramtype application_name: str
        :keyword version: Required. Version name to verify.
        :paramtype version: str
        :keyword type: Required. fully qualified resource type which includes provider namespace.
        :paramtype type: str
        """
        super(PackageCheckNameAvailabilityParameters, self).__init__(**kwargs)
        self.name = kwargs['name']
        self.application_name = kwargs['application_name']
        self.version = kwargs['version']
        self.type = kwargs['type']


class PackageListResult(msrest.serialization.Model):
    """A list of Test Base Packages.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The list of Test Base Packages.
    :vartype value: list[~test_base.models.PackageResource]
    :ivar next_link: Link to the next set of results. Not empty if value contains incomplete list
     of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PackageResource]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of Test Base Packages.
        :paramtype value: list[~test_base.models.PackageResource]
        """
        super(PackageListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class TrackedResource(Resource):
    """The resource model definition for an ARM tracked top level resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar tags: A set of tags. The tags of the resource.
    :vartype tags: dict[str, str]
    :ivar location: Required. The geo-location where the resource lives.
    :vartype location: str
    :ivar etag: Resource Etag.
    :vartype etag: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. The tags of the resource.
        :paramtype tags: dict[str, str]
        :keyword location: Required. The geo-location where the resource lives.
        :paramtype location: str
        """
        super(TrackedResource, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)
        self.location = kwargs['location']
        self.etag = None


class PackageResource(TrackedResource):
    """The Test Base Package resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar tags: A set of tags. The tags of the resource.
    :vartype tags: dict[str, str]
    :ivar location: Required. The geo-location where the resource lives.
    :vartype location: str
    :ivar etag: Resource Etag.
    :vartype etag: str
    :ivar system_data: The system metadata relating to this resource.
    :vartype system_data: ~test_base.models.SystemData
    :ivar provisioning_state: The provisioning state of the resource. Possible values include:
     "Succeeded", "Failed", "Cancelled", "Creating", "Deleting", "Updating".
    :vartype provisioning_state: str or ~test_base.models.ProvisioningState
    :ivar application_name: Application name.
    :vartype application_name: str
    :ivar version: Application version.
    :vartype version: str
    :ivar test_types: OOB, functional or both. Mapped to the data in 'tests' property.
    :vartype test_types: list[str or ~test_base.models.TestType]
    :ivar target_os_list: Specifies the target OSs of specific OS Update types.
    :vartype target_os_list: list[~test_base.models.TargetOSInfo]
    :ivar package_status: The status of the package. Possible values include: "Unknown",
     "Registered", "Ready", "Error", "ValidatingPackage", "PreValidationCheckPass", "Deleted",
     "ValidationLongerThanUsual", "VerifyingPackage".
    :vartype package_status: str or ~test_base.models.PackageStatus
    :ivar last_modified_time: The UTC timestamp when the package was last modified.
    :vartype last_modified_time: ~datetime.datetime
    :ivar flighting_ring: The flighting ring for feature update.
    :vartype flighting_ring: str
    :ivar is_enabled: Flag showing that whether the package is enabled. It doesn't schedule test
     for package which is not enabled.
    :vartype is_enabled: bool
    :ivar blob_path: The file path of the package.
    :vartype blob_path: str
    :ivar validation_results: The validation results. There's validation on package when it's
     created or updated.
    :vartype validation_results: list[~test_base.models.PackageValidationResult]
    :ivar tests: The detailed test information.
    :vartype tests: list[~test_base.models.Test]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'etag': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'test_types': {'readonly': True},
        'package_status': {'readonly': True},
        'last_modified_time': {'readonly': True},
        'is_enabled': {'readonly': True},
        'validation_results': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'application_name': {'key': 'properties.applicationName', 'type': 'str'},
        'version': {'key': 'properties.version', 'type': 'str'},
        'test_types': {'key': 'properties.testTypes', 'type': '[str]'},
        'target_os_list': {'key': 'properties.targetOSList', 'type': '[TargetOSInfo]'},
        'package_status': {'key': 'properties.packageStatus', 'type': 'str'},
        'last_modified_time': {'key': 'properties.lastModifiedTime', 'type': 'iso-8601'},
        'flighting_ring': {'key': 'properties.flightingRing', 'type': 'str'},
        'is_enabled': {'key': 'properties.isEnabled', 'type': 'bool'},
        'blob_path': {'key': 'properties.blobPath', 'type': 'str'},
        'validation_results': {'key': 'properties.validationResults', 'type': '[PackageValidationResult]'},
        'tests': {'key': 'properties.tests', 'type': '[Test]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. The tags of the resource.
        :paramtype tags: dict[str, str]
        :keyword location: Required. The geo-location where the resource lives.
        :paramtype location: str
        :keyword application_name: Application name.
        :paramtype application_name: str
        :keyword version: Application version.
        :paramtype version: str
        :keyword target_os_list: Specifies the target OSs of specific OS Update types.
        :paramtype target_os_list: list[~test_base.models.TargetOSInfo]
        :keyword flighting_ring: The flighting ring for feature update.
        :paramtype flighting_ring: str
        :keyword blob_path: The file path of the package.
        :paramtype blob_path: str
        :keyword tests: The detailed test information.
        :paramtype tests: list[~test_base.models.Test]
        """
        super(PackageResource, self).__init__(**kwargs)
        self.system_data = None
        self.provisioning_state = None
        self.application_name = kwargs.get('application_name', None)
        self.version = kwargs.get('version', None)
        self.test_types = None
        self.target_os_list = kwargs.get('target_os_list', None)
        self.package_status = None
        self.last_modified_time = None
        self.flighting_ring = kwargs.get('flighting_ring', None)
        self.is_enabled = None
        self.blob_path = kwargs.get('blob_path', None)
        self.validation_results = None
        self.tests = kwargs.get('tests', None)


class PackageUpdateParameters(msrest.serialization.Model):
    """Parameters supplied to update a Test Base Package.

    :ivar tags: A set of tags. The tags of the Package.
    :vartype tags: dict[str, str]
    :ivar target_os_list: Specifies the target OSs of specific OS Update types.
    :vartype target_os_list: list[~test_base.models.TargetOSInfo]
    :ivar flighting_ring: The flighting ring for feature update.
    :vartype flighting_ring: str
    :ivar is_enabled: Specifies whether the package is enabled. It doesn't schedule test for
     package which is not enabled.
    :vartype is_enabled: bool
    :ivar blob_path: The file name of the package.
    :vartype blob_path: str
    :ivar tests: The detailed test information.
    :vartype tests: list[~test_base.models.Test]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'target_os_list': {'key': 'properties.targetOSList', 'type': '[TargetOSInfo]'},
        'flighting_ring': {'key': 'properties.flightingRing', 'type': 'str'},
        'is_enabled': {'key': 'properties.isEnabled', 'type': 'bool'},
        'blob_path': {'key': 'properties.blobPath', 'type': 'str'},
        'tests': {'key': 'properties.tests', 'type': '[Test]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. The tags of the Package.
        :paramtype tags: dict[str, str]
        :keyword target_os_list: Specifies the target OSs of specific OS Update types.
        :paramtype target_os_list: list[~test_base.models.TargetOSInfo]
        :keyword flighting_ring: The flighting ring for feature update.
        :paramtype flighting_ring: str
        :keyword is_enabled: Specifies whether the package is enabled. It doesn't schedule test for
         package which is not enabled.
        :paramtype is_enabled: bool
        :keyword blob_path: The file name of the package.
        :paramtype blob_path: str
        :keyword tests: The detailed test information.
        :paramtype tests: list[~test_base.models.Test]
        """
        super(PackageUpdateParameters, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)
        self.target_os_list = kwargs.get('target_os_list', None)
        self.flighting_ring = kwargs.get('flighting_ring', None)
        self.is_enabled = kwargs.get('is_enabled', None)
        self.blob_path = kwargs.get('blob_path', None)
        self.tests = kwargs.get('tests', None)


class PackageValidationResult(msrest.serialization.Model):
    """The validation results. There's validation on package when it's created or updated.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar validation_name: Validation name.
    :vartype validation_name: str
    :ivar is_valid: Indicates whether the package passed the validation.
    :vartype is_valid: bool
    :ivar errors: Error information.
    :vartype errors: list[str]
    """

    _validation = {
        'validation_name': {'readonly': True},
        'is_valid': {'readonly': True},
        'errors': {'readonly': True},
    }

    _attribute_map = {
        'validation_name': {'key': 'validationName', 'type': 'str'},
        'is_valid': {'key': 'isValid', 'type': 'bool'},
        'errors': {'key': 'errors', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(PackageValidationResult, self).__init__(**kwargs)
        self.validation_name = None
        self.is_valid = None
        self.errors = None


class RegressionResult(msrest.serialization.Model):
    """The regression result.

    :ivar file_name: FileName of the binary being analyzed.
    :vartype file_name: str
    :ivar grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
     "Fail".
    :vartype grade: str or ~test_base.models.Grade
    :ivar details: Message that facilitates debugging a particular regression, if any was inferred.
    :vartype details: str
    :ivar diff: Difference between the two datasets being analyzed.
    :vartype diff: float
    :ivar is_regressed: Indicates if a regression was inferred.
    :vartype is_regressed: bool
    """

    _attribute_map = {
        'file_name': {'key': 'fileName', 'type': 'str'},
        'grade': {'key': 'grade', 'type': 'str'},
        'details': {'key': 'details', 'type': 'str'},
        'diff': {'key': 'diff', 'type': 'float'},
        'is_regressed': {'key': 'isRegressed', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword file_name: FileName of the binary being analyzed.
        :paramtype file_name: str
        :keyword grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
         "Fail".
        :paramtype grade: str or ~test_base.models.Grade
        :keyword details: Message that facilitates debugging a particular regression, if any was
         inferred.
        :paramtype details: str
        :keyword diff: Difference between the two datasets being analyzed.
        :paramtype diff: float
        :keyword is_regressed: Indicates if a regression was inferred.
        :paramtype is_regressed: bool
        """
        super(RegressionResult, self).__init__(**kwargs)
        self.file_name = kwargs.get('file_name', None)
        self.grade = kwargs.get('grade', None)
        self.details = kwargs.get('details', None)
        self.diff = kwargs.get('diff', None)
        self.is_regressed = kwargs.get('is_regressed', None)


class RegressionTestDetails(msrest.serialization.Model):
    """The details of a regression test.

    :ivar diff: Difference between the two datasets being analyzed.
    :vartype diff: float
    :ivar is_regressed: Indicates if a regression was inferred.
    :vartype is_regressed: bool
    """

    _attribute_map = {
        'diff': {'key': 'diff', 'type': 'float'},
        'is_regressed': {'key': 'isRegressed', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword diff: Difference between the two datasets being analyzed.
        :paramtype diff: float
        :keyword is_regressed: Indicates if a regression was inferred.
        :paramtype is_regressed: bool
        """
        super(RegressionTestDetails, self).__init__(**kwargs)
        self.diff = kwargs.get('diff', None)
        self.is_regressed = kwargs.get('is_regressed', None)


class ReliabilityResult(msrest.serialization.Model):
    """The Reliability Result.

    :ivar file_name: File name.
    :vartype file_name: str
    :ivar launch_count: Count of number of launches.
    :vartype launch_count: int
    :ivar crash_count: Count of number of crashes.
    :vartype crash_count: int
    :ivar hang_count: Count of number of hangs.
    :vartype hang_count: int
    :ivar regression_grade: The regression grade. Possible values include: "None", "NotAvailable",
     "Pass", "Fail".
    :vartype regression_grade: str or ~test_base.models.Grade
    :ivar crash_regression_grade: The statistic regression grade for crash signal. Possible values
     include: "None", "NotAvailable", "Pass", "Fail".
    :vartype crash_regression_grade: str or ~test_base.models.Grade
    :ivar crash_regression_test_details: Details related to the crash regression analysis.
    :vartype crash_regression_test_details: ~test_base.models.RegressionTestDetails
    :ivar hang_regression_grade: The statistic regression grade for hang signal. Possible values
     include: "None", "NotAvailable", "Pass", "Fail".
    :vartype hang_regression_grade: str or ~test_base.models.Grade
    :ivar hang_regression_test_details: Details related to the hang regression analysis.
    :vartype hang_regression_test_details: ~test_base.models.RegressionTestDetails
    """

    _attribute_map = {
        'file_name': {'key': 'fileName', 'type': 'str'},
        'launch_count': {'key': 'launchCount', 'type': 'int'},
        'crash_count': {'key': 'crashCount', 'type': 'int'},
        'hang_count': {'key': 'hangCount', 'type': 'int'},
        'regression_grade': {'key': 'regressionGrade', 'type': 'str'},
        'crash_regression_grade': {'key': 'crashRegressionGrade', 'type': 'str'},
        'crash_regression_test_details': {'key': 'crashRegressionTestDetails', 'type': 'RegressionTestDetails'},
        'hang_regression_grade': {'key': 'hangRegressionGrade', 'type': 'str'},
        'hang_regression_test_details': {'key': 'hangRegressionTestDetails', 'type': 'RegressionTestDetails'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword file_name: File name.
        :paramtype file_name: str
        :keyword launch_count: Count of number of launches.
        :paramtype launch_count: int
        :keyword crash_count: Count of number of crashes.
        :paramtype crash_count: int
        :keyword hang_count: Count of number of hangs.
        :paramtype hang_count: int
        :keyword regression_grade: The regression grade. Possible values include: "None",
         "NotAvailable", "Pass", "Fail".
        :paramtype regression_grade: str or ~test_base.models.Grade
        :keyword crash_regression_grade: The statistic regression grade for crash signal. Possible
         values include: "None", "NotAvailable", "Pass", "Fail".
        :paramtype crash_regression_grade: str or ~test_base.models.Grade
        :keyword crash_regression_test_details: Details related to the crash regression analysis.
        :paramtype crash_regression_test_details: ~test_base.models.RegressionTestDetails
        :keyword hang_regression_grade: The statistic regression grade for hang signal. Possible values
         include: "None", "NotAvailable", "Pass", "Fail".
        :paramtype hang_regression_grade: str or ~test_base.models.Grade
        :keyword hang_regression_test_details: Details related to the hang regression analysis.
        :paramtype hang_regression_test_details: ~test_base.models.RegressionTestDetails
        """
        super(ReliabilityResult, self).__init__(**kwargs)
        self.file_name = kwargs.get('file_name', None)
        self.launch_count = kwargs.get('launch_count', None)
        self.crash_count = kwargs.get('crash_count', None)
        self.hang_count = kwargs.get('hang_count', None)
        self.regression_grade = kwargs.get('regression_grade', None)
        self.crash_regression_grade = kwargs.get('crash_regression_grade', None)
        self.crash_regression_test_details = kwargs.get('crash_regression_test_details', None)
        self.hang_regression_grade = kwargs.get('hang_regression_grade', None)
        self.hang_regression_test_details = kwargs.get('hang_regression_test_details', None)


class ReliabilityResultSingletonResourceProperties(AnalysisResultSingletonResourceProperties):
    """The properties of Reliability Result.

    All required parameters must be populated in order to send to Azure.

    :ivar grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
     "Fail".
    :vartype grade: str or ~test_base.models.Grade
    :ivar analysis_result_type: Required. Type of the Analysis Result.Constant filled by server.
     Possible values include: "ScriptExecution", "Reliability", "CPUUtilization",
     "MemoryUtilization", "CPURegression", "MemoryRegression", "TestAnalysis".
    :vartype analysis_result_type: str or ~test_base.models.AnalysisResultType
    :ivar reliability_results: The result array data.
    :vartype reliability_results: list[~test_base.models.ReliabilityResult]
    """

    _validation = {
        'analysis_result_type': {'required': True},
    }

    _attribute_map = {
        'grade': {'key': 'grade', 'type': 'str'},
        'analysis_result_type': {'key': 'analysisResultType', 'type': 'str'},
        'reliability_results': {'key': 'reliabilityResults', 'type': '[ReliabilityResult]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
         "Fail".
        :paramtype grade: str or ~test_base.models.Grade
        :keyword reliability_results: The result array data.
        :paramtype reliability_results: list[~test_base.models.ReliabilityResult]
        """
        super(ReliabilityResultSingletonResourceProperties, self).__init__(**kwargs)
        self.analysis_result_type = 'Reliability'  # type: str
        self.reliability_results = kwargs.get('reliability_results', None)


class ScriptExecutionResult(msrest.serialization.Model):
    """The Script Execution Result.

    :ivar script_name: Name of script.
    :vartype script_name: str
    :ivar start_time: Start time of script execution.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: End time of script execution.
    :vartype end_time: ~datetime.datetime
    :ivar exit_code: Exit code.
    :vartype exit_code: int
    :ivar timed_out: Whether the script execution is timed out.
    :vartype timed_out: bool
    """

    _attribute_map = {
        'script_name': {'key': 'scriptName', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'exit_code': {'key': 'exitCode', 'type': 'int'},
        'timed_out': {'key': 'timedOut', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword script_name: Name of script.
        :paramtype script_name: str
        :keyword start_time: Start time of script execution.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: End time of script execution.
        :paramtype end_time: ~datetime.datetime
        :keyword exit_code: Exit code.
        :paramtype exit_code: int
        :keyword timed_out: Whether the script execution is timed out.
        :paramtype timed_out: bool
        """
        super(ScriptExecutionResult, self).__init__(**kwargs)
        self.script_name = kwargs.get('script_name', None)
        self.start_time = kwargs.get('start_time', None)
        self.end_time = kwargs.get('end_time', None)
        self.exit_code = kwargs.get('exit_code', None)
        self.timed_out = kwargs.get('timed_out', None)


class ScriptExecutionResultSingletonResourceProperties(AnalysisResultSingletonResourceProperties):
    """The properties of Script Execution Result.

    All required parameters must be populated in order to send to Azure.

    :ivar grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
     "Fail".
    :vartype grade: str or ~test_base.models.Grade
    :ivar analysis_result_type: Required. Type of the Analysis Result.Constant filled by server.
     Possible values include: "ScriptExecution", "Reliability", "CPUUtilization",
     "MemoryUtilization", "CPURegression", "MemoryRegression", "TestAnalysis".
    :vartype analysis_result_type: str or ~test_base.models.AnalysisResultType
    :ivar script_execution_results: The result array data.
    :vartype script_execution_results: list[~test_base.models.ScriptExecutionResult]
    """

    _validation = {
        'analysis_result_type': {'required': True},
    }

    _attribute_map = {
        'grade': {'key': 'grade', 'type': 'str'},
        'analysis_result_type': {'key': 'analysisResultType', 'type': 'str'},
        'script_execution_results': {'key': 'scriptExecutionResults', 'type': '[ScriptExecutionResult]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
         "Fail".
        :paramtype grade: str or ~test_base.models.Grade
        :keyword script_execution_results: The result array data.
        :paramtype script_execution_results: list[~test_base.models.ScriptExecutionResult]
        """
        super(ScriptExecutionResultSingletonResourceProperties, self).__init__(**kwargs)
        self.analysis_result_type = 'ScriptExecution'  # type: str
        self.script_execution_results = kwargs.get('script_execution_results', None)


class SubscriptionReceiverValue(msrest.serialization.Model):
    """The subscription role receiver value.

    :ivar subscription_id: The subscription id of the notification receiver.
    :vartype subscription_id: str
    :ivar subscription_name: The subscription name of the notification receiver.
    :vartype subscription_name: str
    :ivar role: The role of the notification receiver.
    :vartype role: str
    """

    _attribute_map = {
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
        'subscription_name': {'key': 'subscriptionName', 'type': 'str'},
        'role': {'key': 'role', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword subscription_id: The subscription id of the notification receiver.
        :paramtype subscription_id: str
        :keyword subscription_name: The subscription name of the notification receiver.
        :paramtype subscription_name: str
        :keyword role: The role of the notification receiver.
        :paramtype role: str
        """
        super(SubscriptionReceiverValue, self).__init__(**kwargs)
        self.subscription_id = kwargs.get('subscription_id', None)
        self.subscription_name = kwargs.get('subscription_name', None)
        self.role = kwargs.get('role', None)


class SystemData(msrest.serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Possible values include:
     "User", "Application", "ManagedIdentity", "Key".
    :vartype created_by_type: str or ~test_base.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Possible
     values include: "User", "Application", "ManagedIdentity", "Key".
    :vartype last_modified_by_type: str or ~test_base.models.CreatedByType
    :ivar last_modified_at: The type of identity that last modified the resource.
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Possible values
         include: "User", "Application", "ManagedIdentity", "Key".
        :paramtype created_by_type: str or ~test_base.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Possible
         values include: "User", "Application", "ManagedIdentity", "Key".
        :paramtype last_modified_by_type: str or ~test_base.models.CreatedByType
        :keyword last_modified_at: The type of identity that last modified the resource.
        :paramtype last_modified_at: ~datetime.datetime
        """
        super(SystemData, self).__init__(**kwargs)
        self.created_by = kwargs.get('created_by', None)
        self.created_by_type = kwargs.get('created_by_type', None)
        self.created_at = kwargs.get('created_at', None)
        self.last_modified_by = kwargs.get('last_modified_by', None)
        self.last_modified_by_type = kwargs.get('last_modified_by_type', None)
        self.last_modified_at = kwargs.get('last_modified_at', None)


class TargetOSInfo(msrest.serialization.Model):
    """The information of the target OS to be tested.

    All required parameters must be populated in order to send to Azure.

    :ivar os_update_type: Required. Specifies the OS update type to test against, e.g., 'Security
     updates' or 'Feature updates'.
    :vartype os_update_type: str
    :ivar target_o_ss: Required. Specifies the target OSs to be tested.
    :vartype target_o_ss: list[str]
    """

    _validation = {
        'os_update_type': {'required': True},
        'target_o_ss': {'required': True},
    }

    _attribute_map = {
        'os_update_type': {'key': 'osUpdateType', 'type': 'str'},
        'target_o_ss': {'key': 'targetOSs', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword os_update_type: Required. Specifies the OS update type to test against, e.g.,
         'Security updates' or 'Feature updates'.
        :paramtype os_update_type: str
        :keyword target_o_ss: Required. Specifies the target OSs to be tested.
        :paramtype target_o_ss: list[str]
        """
        super(TargetOSInfo, self).__init__(**kwargs)
        self.os_update_type = kwargs['os_update_type']
        self.target_o_ss = kwargs['target_o_ss']


class Test(msrest.serialization.Model):
    """The definition of a Test.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar test_type: Required. The type of the test. Possible values include: "OutOfBoxTest",
     "FunctionalTest".
    :vartype test_type: str or ~test_base.models.TestType
    :ivar validation_run_status: The status of the validation run of the package. Possible values
     include: "Unknown", "Pending", "Passed", "Failed".
    :vartype validation_run_status: str or ~test_base.models.ValidationRunStatus
    :ivar is_active: Indicates if this test is active.It doesn't schedule test for not active Test.
    :vartype is_active: bool
    :ivar commands: Required. The commands used in the test.
    :vartype commands: list[~test_base.models.Command]
    """

    _validation = {
        'test_type': {'required': True},
        'validation_run_status': {'readonly': True},
        'commands': {'required': True},
    }

    _attribute_map = {
        'test_type': {'key': 'testType', 'type': 'str'},
        'validation_run_status': {'key': 'validationRunStatus', 'type': 'str'},
        'is_active': {'key': 'isActive', 'type': 'bool'},
        'commands': {'key': 'commands', 'type': '[Command]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword test_type: Required. The type of the test. Possible values include: "OutOfBoxTest",
         "FunctionalTest".
        :paramtype test_type: str or ~test_base.models.TestType
        :keyword is_active: Indicates if this test is active.It doesn't schedule test for not active
         Test.
        :paramtype is_active: bool
        :keyword commands: Required. The commands used in the test.
        :paramtype commands: list[~test_base.models.Command]
        """
        super(Test, self).__init__(**kwargs)
        self.test_type = kwargs['test_type']
        self.validation_run_status = None
        self.is_active = kwargs.get('is_active', None)
        self.commands = kwargs['commands']


class TestAnalysisResult(msrest.serialization.Model):
    """The test analysis result.

    :ivar blob_data: The data to provide more failure analysis information.
    :vartype blob_data: str
    :ivar test_analysis_status: The status of the analysis. Possible values include: "None",
     "Analyzing", "Completed", "Failed".
    :vartype test_analysis_status: str or ~test_base.models.TestAnalysisStatus
    :ivar identified_failures: The array of identified failures.
    :vartype identified_failures: list[~test_base.models.IdentifiedFailure]
    """

    _attribute_map = {
        'blob_data': {'key': 'blobData', 'type': 'str'},
        'test_analysis_status': {'key': 'testAnalysisStatus', 'type': 'str'},
        'identified_failures': {'key': 'identifiedFailures', 'type': '[IdentifiedFailure]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword blob_data: The data to provide more failure analysis information.
        :paramtype blob_data: str
        :keyword test_analysis_status: The status of the analysis. Possible values include: "None",
         "Analyzing", "Completed", "Failed".
        :paramtype test_analysis_status: str or ~test_base.models.TestAnalysisStatus
        :keyword identified_failures: The array of identified failures.
        :paramtype identified_failures: list[~test_base.models.IdentifiedFailure]
        """
        super(TestAnalysisResult, self).__init__(**kwargs)
        self.blob_data = kwargs.get('blob_data', None)
        self.test_analysis_status = kwargs.get('test_analysis_status', None)
        self.identified_failures = kwargs.get('identified_failures', None)


class TestAnalysisResultSingletonResourceProperties(AnalysisResultSingletonResourceProperties):
    """The properties of Test Analysis Result.

    All required parameters must be populated in order to send to Azure.

    :ivar grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
     "Fail".
    :vartype grade: str or ~test_base.models.Grade
    :ivar analysis_result_type: Required. Type of the Analysis Result.Constant filled by server.
     Possible values include: "ScriptExecution", "Reliability", "CPUUtilization",
     "MemoryUtilization", "CPURegression", "MemoryRegression", "TestAnalysis".
    :vartype analysis_result_type: str or ~test_base.models.AnalysisResultType
    :ivar test_analysis_result: The result of test analysis.
    :vartype test_analysis_result: ~test_base.models.TestAnalysisResult
    """

    _validation = {
        'analysis_result_type': {'required': True},
    }

    _attribute_map = {
        'grade': {'key': 'grade', 'type': 'str'},
        'analysis_result_type': {'key': 'analysisResultType', 'type': 'str'},
        'test_analysis_result': {'key': 'testAnalysisResult', 'type': 'TestAnalysisResult'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
         "Fail".
        :paramtype grade: str or ~test_base.models.Grade
        :keyword test_analysis_result: The result of test analysis.
        :paramtype test_analysis_result: ~test_base.models.TestAnalysisResult
        """
        super(TestAnalysisResultSingletonResourceProperties, self).__init__(**kwargs)
        self.analysis_result_type = 'TestAnalysis'  # type: str
        self.test_analysis_result = kwargs.get('test_analysis_result', None)


class TestBaseAccountListResult(msrest.serialization.Model):
    """A list of Test Base Accounts.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The list of Test Base Accounts.
    :vartype value: list[~test_base.models.TestBaseAccountResource]
    :ivar next_link: Link to the next set of results. Not empty if value contains incomplete list
     of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[TestBaseAccountResource]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of Test Base Accounts.
        :paramtype value: list[~test_base.models.TestBaseAccountResource]
        """
        super(TestBaseAccountListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class TestBaseAccountResource(TrackedResource):
    """The Test Base Account resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar tags: A set of tags. The tags of the resource.
    :vartype tags: dict[str, str]
    :ivar location: Required. The geo-location where the resource lives.
    :vartype location: str
    :ivar etag: Resource Etag.
    :vartype etag: str
    :ivar system_data: The system metadata relating to this resource.
    :vartype system_data: ~test_base.models.SystemData
    :ivar provisioning_state: The provisioning state of the resource. Possible values include:
     "Succeeded", "Failed", "Cancelled", "Creating", "Deleting", "Updating".
    :vartype provisioning_state: str or ~test_base.models.ProvisioningState
    :ivar sku: The SKU of the Test Base Account.
    :vartype sku: ~test_base.models.TestBaseAccountSKU
    :ivar access_level: The access level of the Test Base Account.
    :vartype access_level: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'etag': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'access_level': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'sku': {'key': 'properties.sku', 'type': 'TestBaseAccountSKU'},
        'access_level': {'key': 'properties.accessLevel', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. The tags of the resource.
        :paramtype tags: dict[str, str]
        :keyword location: Required. The geo-location where the resource lives.
        :paramtype location: str
        :keyword sku: The SKU of the Test Base Account.
        :paramtype sku: ~test_base.models.TestBaseAccountSKU
        """
        super(TestBaseAccountResource, self).__init__(**kwargs)
        self.system_data = None
        self.provisioning_state = None
        self.sku = kwargs.get('sku', None)
        self.access_level = None


class TestBaseAccountSKU(msrest.serialization.Model):
    """Describes a Test Base Account SKU.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar resource_type: The type of resource the SKU applies to.
    :vartype resource_type: str
    :ivar name: Required. The name of the SKU. This is typically a letter + number code, such as B0
     or S0.
    :vartype name: str
    :ivar tier: Required. The tier of this particular SKU. Possible values include: "Standard".
    :vartype tier: str or ~test_base.models.Tier
    :ivar capabilities: The capabilities of a SKU.
    :vartype capabilities: list[~test_base.models.TestBaseAccountSKUCapability]
    :ivar locations: The locations that the SKU is available.
    :vartype locations: list[str]
    """

    _validation = {
        'name': {'required': True},
        'tier': {'required': True},
        'capabilities': {'readonly': True},
    }

    _attribute_map = {
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
        'capabilities': {'key': 'capabilities', 'type': '[TestBaseAccountSKUCapability]'},
        'locations': {'key': 'locations', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword resource_type: The type of resource the SKU applies to.
        :paramtype resource_type: str
        :keyword name: Required. The name of the SKU. This is typically a letter + number code, such as
         B0 or S0.
        :paramtype name: str
        :keyword tier: Required. The tier of this particular SKU. Possible values include: "Standard".
        :paramtype tier: str or ~test_base.models.Tier
        :keyword locations: The locations that the SKU is available.
        :paramtype locations: list[str]
        """
        super(TestBaseAccountSKU, self).__init__(**kwargs)
        self.resource_type = kwargs.get('resource_type', None)
        self.name = kwargs['name']
        self.tier = kwargs['tier']
        self.capabilities = None
        self.locations = kwargs.get('locations', None)


class TestBaseAccountSKUCapability(msrest.serialization.Model):
    """Properties of the Test Base Account SKU Capability.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required. An invariant to describe the feature, such as 'SLA'.
    :vartype name: str
    :ivar value: Required. An invariant if the feature is measured by quantity, such as 99.9%.
    :vartype value: str
    """

    _validation = {
        'name': {'required': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Required. An invariant to describe the feature, such as 'SLA'.
        :paramtype name: str
        :keyword value: Required. An invariant if the feature is measured by quantity, such as 99.9%.
        :paramtype value: str
        """
        super(TestBaseAccountSKUCapability, self).__init__(**kwargs)
        self.name = kwargs['name']
        self.value = kwargs['value']


class TestBaseAccountSKUListResult(msrest.serialization.Model):
    """A list of Test Base Account SKUs.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The list of Test Base Account SKUs.
    :vartype value: list[~test_base.models.TestBaseAccountSKU]
    :ivar next_link: Link to the next set of results. Not empty if value contains incomplete list
     of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[TestBaseAccountSKU]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of Test Base Account SKUs.
        :paramtype value: list[~test_base.models.TestBaseAccountSKU]
        """
        super(TestBaseAccountSKUListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class TestBaseAccountUpdateParameters(msrest.serialization.Model):
    """Parameters supplied to update a Test Base Account.

    :ivar tags: A set of tags. The tags of the Test Base Account.
    :vartype tags: dict[str, str]
    :ivar sku: The SKU of the Test Base Account.
    :vartype sku: ~test_base.models.TestBaseAccountSKU
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'sku': {'key': 'properties.sku', 'type': 'TestBaseAccountSKU'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. The tags of the Test Base Account.
        :paramtype tags: dict[str, str]
        :keyword sku: The SKU of the Test Base Account.
        :paramtype sku: ~test_base.models.TestBaseAccountSKU
        """
        super(TestBaseAccountUpdateParameters, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)
        self.sku = kwargs.get('sku', None)


class TestBaseAccountUsageData(msrest.serialization.Model):
    """The usage data of a Test Base Account.

    :ivar id: Fully qualified ARM resource id.
    :vartype id: str
    :ivar name: Localizable String object containing the name and a localized value.
    :vartype name: ~test_base.models.TestBaseAccountUsageName
    :ivar unit: Representing the units of the usage quota. Possible values are: Count, Bytes,
     Seconds, Percent, CountPerSecond, BytesPerSecond.
    :vartype unit: str
    :ivar limit: The maximum permitted value for the usage quota. If there is no limit, this value
     will be -1.
    :vartype limit: long
    :ivar current_value: Current value for the usage quota.
    :vartype current_value: long
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'TestBaseAccountUsageName'},
        'unit': {'key': 'unit', 'type': 'str'},
        'limit': {'key': 'limit', 'type': 'long'},
        'current_value': {'key': 'currentValue', 'type': 'long'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Fully qualified ARM resource id.
        :paramtype id: str
        :keyword name: Localizable String object containing the name and a localized value.
        :paramtype name: ~test_base.models.TestBaseAccountUsageName
        :keyword unit: Representing the units of the usage quota. Possible values are: Count, Bytes,
         Seconds, Percent, CountPerSecond, BytesPerSecond.
        :paramtype unit: str
        :keyword limit: The maximum permitted value for the usage quota. If there is no limit, this
         value will be -1.
        :paramtype limit: long
        :keyword current_value: Current value for the usage quota.
        :paramtype current_value: long
        """
        super(TestBaseAccountUsageData, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.unit = kwargs.get('unit', None)
        self.limit = kwargs.get('limit', None)
        self.current_value = kwargs.get('current_value', None)


class TestBaseAccountUsageDataList(msrest.serialization.Model):
    """A list of Test Base Account usage data.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The list of Test Base Account usage data.
    :vartype value: list[~test_base.models.TestBaseAccountUsageData]
    :ivar next_link: Link to the next set of results. Not empty if value contains incomplete list
     of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[TestBaseAccountUsageData]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of Test Base Account usage data.
        :paramtype value: list[~test_base.models.TestBaseAccountUsageData]
        """
        super(TestBaseAccountUsageDataList, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class TestBaseAccountUsageName(msrest.serialization.Model):
    """Localizable String object containing the name and a localized value.

    :ivar value: The identifier of the usage.
    :vartype value: str
    :ivar localized_value: Localized name of the usage.
    :vartype localized_value: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
        'localized_value': {'key': 'localizedValue', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The identifier of the usage.
        :paramtype value: str
        :keyword localized_value: Localized name of the usage.
        :paramtype localized_value: str
        """
        super(TestBaseAccountUsageName, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.localized_value = kwargs.get('localized_value', None)


class TestResultAnalysisSummary(msrest.serialization.Model):
    """The summary of a Test Analysis Result.

    :ivar name: Metric name.
    :vartype name: str
    :ivar analysis_status: The analysis status. Possible values include: "None", "Completed",
     "InProgress", "Failed", "Succeeded", "Available", "NotAvailable".
    :vartype analysis_status: str or ~test_base.models.AnalysisStatus
    :ivar grade: The grade of the test result. Possible values include: "None", "NotAvailable",
     "Pass", "Fail".
    :vartype grade: str or ~test_base.models.Grade
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'analysis_status': {'key': 'analysisStatus', 'type': 'str'},
        'grade': {'key': 'grade', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Metric name.
        :paramtype name: str
        :keyword analysis_status: The analysis status. Possible values include: "None", "Completed",
         "InProgress", "Failed", "Succeeded", "Available", "NotAvailable".
        :paramtype analysis_status: str or ~test_base.models.AnalysisStatus
        :keyword grade: The grade of the test result. Possible values include: "None", "NotAvailable",
         "Pass", "Fail".
        :paramtype grade: str or ~test_base.models.Grade
        """
        super(TestResultAnalysisSummary, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.analysis_status = kwargs.get('analysis_status', None)
        self.grade = kwargs.get('grade', None)


class TestResultListResult(msrest.serialization.Model):
    """A list of Test Results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The list of Test Results.
    :vartype value: list[~test_base.models.TestResultResource]
    :ivar next_link: Link to the next set of results. Not empty if value contains incomplete list
     of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[TestResultResource]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of Test Results.
        :paramtype value: list[~test_base.models.TestResultResource]
        """
        super(TestResultListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class TestResultResource(ProxyResource):
    """The Test Result Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar system_data: The system metadata relating to this resource.
    :vartype system_data: ~test_base.models.SystemData
    :ivar baseline_test_result_id: Azure Id of the baseline test result.
    :vartype baseline_test_result_id: str
    :ivar package_id: Resource Id of the package.
    :vartype package_id: str
    :ivar application_name: Application name.
    :vartype application_name: str
    :ivar application_version: Application version.
    :vartype application_version: str
    :ivar os_name: The operating system name, e.g. Windows 10 1809.
    :vartype os_name: str
    :ivar release_name: The name of the tested release (OS update).
    :vartype release_name: str
    :ivar release_version_date: The release version date of the tested release.
    :vartype release_version_date: ~datetime.datetime
    :ivar flighting_ring: The flighting ring, only for release of feature updates.
    :vartype flighting_ring: str
    :ivar build_version: The build version of the tested release (OS update).
    :vartype build_version: str
    :ivar build_revision: The build revision of the tested release (OS update).
    :vartype build_revision: str
    :ivar test_type: Test type. E.g. 'Out of box test' or 'Functional test'.
    :vartype test_type: str
    :ivar test_run_time: The run time of the test.
    :vartype test_run_time: str
    :ivar is_download_data_available: Whether download data is available.
    :vartype is_download_data_available: bool
    :ivar is_video_available: Whether video data is available.
    :vartype is_video_available: bool
    :ivar execution_status: The execution status of the test. Possible values include: "None",
     "InProgress", "Processing", "Completed", "NotExecuted", "Incomplete", "Failed", "Succeeded".
    :vartype execution_status: str or ~test_base.models.ExecutionStatus
    :ivar test_status: The status of the test. Possible values include: "None",
     "TestExecutionInProgress", "DataProcessing", "TestFailure", "UpdateFailure",
     "TestAndUpdateFailure", "InfrastructureFailure", "Completed".
    :vartype test_status: str or ~test_base.models.TestStatus
    :ivar grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
     "Fail".
    :vartype grade: str or ~test_base.models.Grade
    :ivar kb_number: KB number.
    :vartype kb_number: str
    :ivar package_version: The version of the Windows update package.
    :vartype package_version: str
    :ivar analysis_summaries: List of analysis summaries.
    :vartype analysis_summaries: list[~test_base.models.TestResultAnalysisSummary]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'baseline_test_result_id': {'key': 'properties.baselineTestResultId', 'type': 'str'},
        'package_id': {'key': 'properties.packageId', 'type': 'str'},
        'application_name': {'key': 'properties.applicationName', 'type': 'str'},
        'application_version': {'key': 'properties.applicationVersion', 'type': 'str'},
        'os_name': {'key': 'properties.osName', 'type': 'str'},
        'release_name': {'key': 'properties.releaseName', 'type': 'str'},
        'release_version_date': {'key': 'properties.releaseVersionDate', 'type': 'iso-8601'},
        'flighting_ring': {'key': 'properties.flightingRing', 'type': 'str'},
        'build_version': {'key': 'properties.buildVersion', 'type': 'str'},
        'build_revision': {'key': 'properties.buildRevision', 'type': 'str'},
        'test_type': {'key': 'properties.testType', 'type': 'str'},
        'test_run_time': {'key': 'properties.testRunTime', 'type': 'str'},
        'is_download_data_available': {'key': 'properties.isDownloadDataAvailable', 'type': 'bool'},
        'is_video_available': {'key': 'properties.isVideoAvailable', 'type': 'bool'},
        'execution_status': {'key': 'properties.executionStatus', 'type': 'str'},
        'test_status': {'key': 'properties.testStatus', 'type': 'str'},
        'grade': {'key': 'properties.grade', 'type': 'str'},
        'kb_number': {'key': 'properties.kbNumber', 'type': 'str'},
        'package_version': {'key': 'properties.packageVersion', 'type': 'str'},
        'analysis_summaries': {'key': 'properties.analysisSummaries', 'type': '[TestResultAnalysisSummary]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword baseline_test_result_id: Azure Id of the baseline test result.
        :paramtype baseline_test_result_id: str
        :keyword package_id: Resource Id of the package.
        :paramtype package_id: str
        :keyword application_name: Application name.
        :paramtype application_name: str
        :keyword application_version: Application version.
        :paramtype application_version: str
        :keyword os_name: The operating system name, e.g. Windows 10 1809.
        :paramtype os_name: str
        :keyword release_name: The name of the tested release (OS update).
        :paramtype release_name: str
        :keyword release_version_date: The release version date of the tested release.
        :paramtype release_version_date: ~datetime.datetime
        :keyword flighting_ring: The flighting ring, only for release of feature updates.
        :paramtype flighting_ring: str
        :keyword build_version: The build version of the tested release (OS update).
        :paramtype build_version: str
        :keyword build_revision: The build revision of the tested release (OS update).
        :paramtype build_revision: str
        :keyword test_type: Test type. E.g. 'Out of box test' or 'Functional test'.
        :paramtype test_type: str
        :keyword test_run_time: The run time of the test.
        :paramtype test_run_time: str
        :keyword is_download_data_available: Whether download data is available.
        :paramtype is_download_data_available: bool
        :keyword is_video_available: Whether video data is available.
        :paramtype is_video_available: bool
        :keyword execution_status: The execution status of the test. Possible values include: "None",
         "InProgress", "Processing", "Completed", "NotExecuted", "Incomplete", "Failed", "Succeeded".
        :paramtype execution_status: str or ~test_base.models.ExecutionStatus
        :keyword test_status: The status of the test. Possible values include: "None",
         "TestExecutionInProgress", "DataProcessing", "TestFailure", "UpdateFailure",
         "TestAndUpdateFailure", "InfrastructureFailure", "Completed".
        :paramtype test_status: str or ~test_base.models.TestStatus
        :keyword grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
         "Fail".
        :paramtype grade: str or ~test_base.models.Grade
        :keyword kb_number: KB number.
        :paramtype kb_number: str
        :keyword package_version: The version of the Windows update package.
        :paramtype package_version: str
        :keyword analysis_summaries: List of analysis summaries.
        :paramtype analysis_summaries: list[~test_base.models.TestResultAnalysisSummary]
        """
        super(TestResultResource, self).__init__(**kwargs)
        self.system_data = None
        self.baseline_test_result_id = kwargs.get('baseline_test_result_id', None)
        self.package_id = kwargs.get('package_id', None)
        self.application_name = kwargs.get('application_name', None)
        self.application_version = kwargs.get('application_version', None)
        self.os_name = kwargs.get('os_name', None)
        self.release_name = kwargs.get('release_name', None)
        self.release_version_date = kwargs.get('release_version_date', None)
        self.flighting_ring = kwargs.get('flighting_ring', None)
        self.build_version = kwargs.get('build_version', None)
        self.build_revision = kwargs.get('build_revision', None)
        self.test_type = kwargs.get('test_type', None)
        self.test_run_time = kwargs.get('test_run_time', None)
        self.is_download_data_available = kwargs.get('is_download_data_available', None)
        self.is_video_available = kwargs.get('is_video_available', None)
        self.execution_status = kwargs.get('execution_status', None)
        self.test_status = kwargs.get('test_status', None)
        self.grade = kwargs.get('grade', None)
        self.kb_number = kwargs.get('kb_number', None)
        self.package_version = kwargs.get('package_version', None)
        self.analysis_summaries = kwargs.get('analysis_summaries', None)


class TestSummaryListResult(msrest.serialization.Model):
    """A list of Test Summaries.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The list of Test Summaries.
    :vartype value: list[~test_base.models.TestSummaryResource]
    :ivar next_link: Link to the next set of results. Not empty if value contains incomplete list
     of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[TestSummaryResource]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of Test Summaries.
        :paramtype value: list[~test_base.models.TestSummaryResource]
        """
        super(TestSummaryListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class TestSummaryResource(ProxyResource):
    """Summary of a Test.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar system_data: The system metadata relating to this resource.
    :vartype system_data: ~test_base.models.SystemData
    :ivar test_summary_id: The Id of the current Test Summary.
    :vartype test_summary_id: str
    :ivar package_id: The Azure resource Id of package.
    :vartype package_id: str
    :ivar application_name: Application name.
    :vartype application_name: str
    :ivar application_version: Application version.
    :vartype application_version: str
    :ivar execution_status: The execution status of last test. Possible values include: "None",
     "InProgress", "Processing", "Completed", "NotExecuted", "Incomplete", "Failed", "Succeeded".
    :vartype execution_status: str or ~test_base.models.ExecutionStatus
    :ivar test_status: The status of last test. Possible values include: "None",
     "TestExecutionInProgress", "DataProcessing", "TestFailure", "UpdateFailure",
     "TestAndUpdateFailure", "InfrastructureFailure", "Completed".
    :vartype test_status: str or ~test_base.models.TestStatus
    :ivar grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
     "Fail".
    :vartype grade: str or ~test_base.models.Grade
    :ivar test_run_time: The run time of the last test.
    :vartype test_run_time: str
    :ivar feature_updates_test_summary: The result summary of tests triggered by feature updates.
    :vartype feature_updates_test_summary: ~test_base.models.OSUpdatesTestSummary
    :ivar security_updates_test_summary: The result summary of tests triggered by security updates.
    :vartype security_updates_test_summary: ~test_base.models.OSUpdatesTestSummary
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'test_summary_id': {'key': 'properties.testSummaryId', 'type': 'str'},
        'package_id': {'key': 'properties.packageId', 'type': 'str'},
        'application_name': {'key': 'properties.applicationName', 'type': 'str'},
        'application_version': {'key': 'properties.applicationVersion', 'type': 'str'},
        'execution_status': {'key': 'properties.executionStatus', 'type': 'str'},
        'test_status': {'key': 'properties.testStatus', 'type': 'str'},
        'grade': {'key': 'properties.grade', 'type': 'str'},
        'test_run_time': {'key': 'properties.testRunTime', 'type': 'str'},
        'feature_updates_test_summary': {'key': 'properties.featureUpdatesTestSummary', 'type': 'OSUpdatesTestSummary'},
        'security_updates_test_summary': {'key': 'properties.securityUpdatesTestSummary', 'type': 'OSUpdatesTestSummary'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword test_summary_id: The Id of the current Test Summary.
        :paramtype test_summary_id: str
        :keyword package_id: The Azure resource Id of package.
        :paramtype package_id: str
        :keyword application_name: Application name.
        :paramtype application_name: str
        :keyword application_version: Application version.
        :paramtype application_version: str
        :keyword execution_status: The execution status of last test. Possible values include: "None",
         "InProgress", "Processing", "Completed", "NotExecuted", "Incomplete", "Failed", "Succeeded".
        :paramtype execution_status: str or ~test_base.models.ExecutionStatus
        :keyword test_status: The status of last test. Possible values include: "None",
         "TestExecutionInProgress", "DataProcessing", "TestFailure", "UpdateFailure",
         "TestAndUpdateFailure", "InfrastructureFailure", "Completed".
        :paramtype test_status: str or ~test_base.models.TestStatus
        :keyword grade: The grade of the test. Possible values include: "None", "NotAvailable", "Pass",
         "Fail".
        :paramtype grade: str or ~test_base.models.Grade
        :keyword test_run_time: The run time of the last test.
        :paramtype test_run_time: str
        :keyword feature_updates_test_summary: The result summary of tests triggered by feature
         updates.
        :paramtype feature_updates_test_summary: ~test_base.models.OSUpdatesTestSummary
        :keyword security_updates_test_summary: The result summary of tests triggered by security
         updates.
        :paramtype security_updates_test_summary: ~test_base.models.OSUpdatesTestSummary
        """
        super(TestSummaryResource, self).__init__(**kwargs)
        self.system_data = None
        self.test_summary_id = kwargs.get('test_summary_id', None)
        self.package_id = kwargs.get('package_id', None)
        self.application_name = kwargs.get('application_name', None)
        self.application_version = kwargs.get('application_version', None)
        self.execution_status = kwargs.get('execution_status', None)
        self.test_status = kwargs.get('test_status', None)
        self.grade = kwargs.get('grade', None)
        self.test_run_time = kwargs.get('test_run_time', None)
        self.feature_updates_test_summary = kwargs.get('feature_updates_test_summary', None)
        self.security_updates_test_summary = kwargs.get('security_updates_test_summary', None)


class TestTypeListResult(msrest.serialization.Model):
    """A list of test types.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The list of test types.
    :vartype value: list[~test_base.models.TestTypeResource]
    :ivar next_link: Link to the next set of results. Not empty if value contains incomplete list
     of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[TestTypeResource]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of test types.
        :paramtype value: list[~test_base.models.TestTypeResource]
        """
        super(TestTypeListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class TestTypeResource(ProxyResource):
    """The test type resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :ivar system_data: The system metadata relating to this resource.
    :vartype system_data: ~test_base.models.SystemData
    :ivar actual_test_type_name: The actual name of a test type of a Test Base Account.
    :vartype actual_test_type_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'actual_test_type_name': {'key': 'properties.actualTestTypeName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword actual_test_type_name: The actual name of a test type of a Test Base Account.
        :paramtype actual_test_type_name: str
        """
        super(TestTypeResource, self).__init__(**kwargs)
        self.system_data = None
        self.actual_test_type_name = kwargs.get('actual_test_type_name', None)


class UserObjectReceiverValue(msrest.serialization.Model):
    """The user object receiver value.

    :ivar user_object_ids: user object ids.
    :vartype user_object_ids: list[str]
    """

    _attribute_map = {
        'user_object_ids': {'key': 'userObjectIds', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword user_object_ids: user object ids.
        :paramtype user_object_ids: list[str]
        """
        super(UserObjectReceiverValue, self).__init__(**kwargs)
        self.user_object_ids = kwargs.get('user_object_ids', None)


class UtilizationBound(msrest.serialization.Model):
    """The bound of a utilization result.

    :ivar percentile: The percentile of the bound.
    :vartype percentile: float
    :ivar value: The value of the bound.
    :vartype value: float
    """

    _attribute_map = {
        'percentile': {'key': 'percentile', 'type': 'float'},
        'value': {'key': 'value', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword percentile: The percentile of the bound.
        :paramtype percentile: float
        :keyword value: The value of the bound.
        :paramtype value: float
        """
        super(UtilizationBound, self).__init__(**kwargs)
        self.percentile = kwargs.get('percentile', None)
        self.value = kwargs.get('value', None)


class UtilizationEntry(msrest.serialization.Model):
    """The utilization entry.

    :ivar timestamp: The timestamp.
    :vartype timestamp: ~datetime.datetime
    :ivar value: The value.
    :vartype value: float
    """

    _attribute_map = {
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'value': {'key': 'value', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword timestamp: The timestamp.
        :paramtype timestamp: ~datetime.datetime
        :keyword value: The value.
        :paramtype value: float
        """
        super(UtilizationEntry, self).__init__(**kwargs)
        self.timestamp = kwargs.get('timestamp', None)
        self.value = kwargs.get('value', None)


class UtilizationResult(msrest.serialization.Model):
    """The Utilization Result.

    :ivar process: Process name, or '_total' for all processes.
    :vartype process: str
    :ivar upper_bound: Upper bound.
    :vartype upper_bound: ~test_base.models.UtilizationBound
    :ivar lower_bound: Lower bound.
    :vartype lower_bound: ~test_base.models.UtilizationBound
    :ivar utilization: Utilization data.
    :vartype utilization: list[~test_base.models.UtilizationEntry]
    """

    _attribute_map = {
        'process': {'key': 'process', 'type': 'str'},
        'upper_bound': {'key': 'upperBound', 'type': 'UtilizationBound'},
        'lower_bound': {'key': 'lowerBound', 'type': 'UtilizationBound'},
        'utilization': {'key': 'utilization', 'type': '[UtilizationEntry]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword process: Process name, or '_total' for all processes.
        :paramtype process: str
        :keyword upper_bound: Upper bound.
        :paramtype upper_bound: ~test_base.models.UtilizationBound
        :keyword lower_bound: Lower bound.
        :paramtype lower_bound: ~test_base.models.UtilizationBound
        :keyword utilization: Utilization data.
        :paramtype utilization: list[~test_base.models.UtilizationEntry]
        """
        super(UtilizationResult, self).__init__(**kwargs)
        self.process = kwargs.get('process', None)
        self.upper_bound = kwargs.get('upper_bound', None)
        self.lower_bound = kwargs.get('lower_bound', None)
        self.utilization = kwargs.get('utilization', None)
