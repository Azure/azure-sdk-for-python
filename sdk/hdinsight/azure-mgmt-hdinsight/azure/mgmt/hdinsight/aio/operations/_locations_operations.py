# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Optional, TypeVar

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._locations_operations import build_check_name_availability_request, build_get_azure_async_operation_status_request, build_get_capabilities_request, build_list_billing_specs_request, build_list_usages_request, build_validate_cluster_create_request_request
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class LocationsOperations:
    """LocationsOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.mgmt.hdinsight.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace_async
    async def get_capabilities(
        self,
        location: str,
        **kwargs: Any
    ) -> "_models.CapabilitiesResult":
        """Gets the capabilities for the specified location.

        :param location: The Azure location (region) for which to make the request.
        :type location: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CapabilitiesResult, or the result of cls(response)
        :rtype: ~azure.mgmt.hdinsight.models.CapabilitiesResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.CapabilitiesResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-06-01")  # type: str

        
        request = build_get_capabilities_request(
            subscription_id=self._config.subscription_id,
            location=location,
            api_version=api_version,
            template_url=self.get_capabilities.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('CapabilitiesResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_capabilities.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/capabilities"}  # type: ignore


    @distributed_trace_async
    async def list_usages(
        self,
        location: str,
        **kwargs: Any
    ) -> "_models.UsagesListResult":
        """Lists the usages for the specified location.

        :param location: The Azure location (region) for which to make the request.
        :type location: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: UsagesListResult, or the result of cls(response)
        :rtype: ~azure.mgmt.hdinsight.models.UsagesListResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.UsagesListResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-06-01")  # type: str

        
        request = build_list_usages_request(
            subscription_id=self._config.subscription_id,
            location=location,
            api_version=api_version,
            template_url=self.list_usages.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('UsagesListResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_usages.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/usages"}  # type: ignore


    @distributed_trace_async
    async def list_billing_specs(
        self,
        location: str,
        **kwargs: Any
    ) -> "_models.BillingResponseListResult":
        """Lists the billingSpecs for the specified subscription and location.

        :param location: The Azure location (region) for which to make the request.
        :type location: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BillingResponseListResult, or the result of cls(response)
        :rtype: ~azure.mgmt.hdinsight.models.BillingResponseListResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.BillingResponseListResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-06-01")  # type: str

        
        request = build_list_billing_specs_request(
            subscription_id=self._config.subscription_id,
            location=location,
            api_version=api_version,
            template_url=self.list_billing_specs.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('BillingResponseListResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_billing_specs.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/billingSpecs"}  # type: ignore


    @distributed_trace_async
    async def get_azure_async_operation_status(
        self,
        location: str,
        operation_id: str,
        **kwargs: Any
    ) -> "_models.AsyncOperationResult":
        """Get the async operation status.

        :param location: The Azure location (region) for which to make the request.
        :type location: str
        :param operation_id: The long running operation id.
        :type operation_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AsyncOperationResult, or the result of cls(response)
        :rtype: ~azure.mgmt.hdinsight.models.AsyncOperationResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.AsyncOperationResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-06-01")  # type: str

        
        request = build_get_azure_async_operation_status_request(
            subscription_id=self._config.subscription_id,
            location=location,
            operation_id=operation_id,
            api_version=api_version,
            template_url=self.get_azure_async_operation_status.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('AsyncOperationResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_azure_async_operation_status.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/azureasyncoperations/{operationId}"}  # type: ignore


    @distributed_trace_async
    async def check_name_availability(
        self,
        location: str,
        parameters: "_models.NameAvailabilityCheckRequestParameters",
        **kwargs: Any
    ) -> "_models.NameAvailabilityCheckResult":
        """Check the cluster name is available or not.

        :param location: The Azure location (region) for which to make the request.
        :type location: str
        :param parameters:
        :type parameters: ~azure.mgmt.hdinsight.models.NameAvailabilityCheckRequestParameters
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: NameAvailabilityCheckResult, or the result of cls(response)
        :rtype: ~azure.mgmt.hdinsight.models.NameAvailabilityCheckResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.NameAvailabilityCheckResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-06-01")  # type: str
        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _json = self._serialize.body(parameters, 'NameAvailabilityCheckRequestParameters')

        request = build_check_name_availability_request(
            subscription_id=self._config.subscription_id,
            location=location,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self.check_name_availability.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('NameAvailabilityCheckResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    check_name_availability.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/checkNameAvailability"}  # type: ignore


    @distributed_trace_async
    async def validate_cluster_create_request(
        self,
        location: str,
        parameters: "_models.ClusterCreateRequestValidationParameters",
        **kwargs: Any
    ) -> "_models.ClusterCreateValidationResult":
        """Validate the cluster create request spec is valid or not.

        :param location: The Azure location (region) for which to make the request.
        :type location: str
        :param parameters:
        :type parameters: ~azure.mgmt.hdinsight.models.ClusterCreateRequestValidationParameters
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ClusterCreateValidationResult, or the result of cls(response)
        :rtype: ~azure.mgmt.hdinsight.models.ClusterCreateValidationResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ClusterCreateValidationResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-06-01")  # type: str
        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _json = self._serialize.body(parameters, 'ClusterCreateRequestValidationParameters')

        request = build_validate_cluster_create_request_request(
            subscription_id=self._config.subscription_id,
            location=location,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self.validate_cluster_create_request.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('ClusterCreateValidationResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    validate_cluster_create_request.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/locations/{location}/validateCreateRequest"}  # type: ignore

