# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .._utils.model_base import Model as _Model, rest_field

if TYPE_CHECKING:
    from .. import models as _models


class AttestationResponse(_Model):
    """The result of an attestation operation.

    :ivar token: An RFC 7519 JSON Web Token, the body of which is an AttestationResult object.
    :vartype token: str
    """

    token: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """An RFC 7519 JSON Web Token, the body of which is an AttestationResult object."""




    @overload
    def __init__(
        self,
        *,
        token: Optional[str] = None,
    ) -> None:
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class InitTimeData(_Model):
    """Initialization time data are a conduit for any configuration information that
    is unknown when building the Trusted Execution Environment (TEE) and is defined
    at TEE launch time. This data can be used with confidential container or VM
    scenarios to capture configuration settings such as disk volume content,
    network configuration, etc.

    :ivar data: Initialization time data are passed into the Trusted Execution Environment
     (TEE) when it is created. For an Icelake SGX quote, the SHA256 hash of the
     InitTimeData must match the lower 32 bytes of the quote's "config id"
     attribute. For a SEV-SNP quote, the SHA256 hash of the InitTimeData must match
     the quote's "host data" attribute.
    :vartype data: bytes
    :ivar data_type: The type of data contained within the "data" field. Known values are: "Binary"
     and "JSON".
    :vartype data_type: str or ~azure.security.attestation.models.DataType
    """

    data: Optional[bytes] = rest_field(visibility=["read", "create", "update", "delete", "query"], format="base64")
    """Initialization time data are passed into the Trusted Execution Environment
     (TEE) when it is created. For an Icelake SGX quote, the SHA256 hash of the
     InitTimeData must match the lower 32 bytes of the quote's \"config id\"
     attribute. For a SEV-SNP quote, the SHA256 hash of the InitTimeData must match
     the quote's \"host data\" attribute."""
    data_type: Optional[Union[str, "_models.DataType"]] = rest_field(name="dataType", visibility=["read", "create", "update", "delete", "query"])
    """The type of data contained within the \"data\" field. Known values are: \"Binary\" and
     \"JSON\"."""




    @overload
    def __init__(
        self,
        *,
        data: Optional[bytes] = None,
        data_type: Optional[Union[str, "_models.DataType"]] = None,
    ) -> None:
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class JsonWebKey(_Model):
    """JsonWebKey.

    :ivar alg: The "alg" (algorithm) parameter identifies the algorithm intended for
     use with the key.  The values used should either be registered in the
     IANA "JSON Web Signature and Encryption Algorithms" registry
     established by [JWA] or be a value that contains a Collision-
     Resistant Name.
    :vartype alg: str
    :ivar crv: The "crv" (curve) parameter identifies the curve type.
    :vartype crv: str
    :ivar d: RSA private exponent or ECC private key.
    :vartype d: str
    :ivar dp: RSA Private Key Parameter.
    :vartype dp: str
    :ivar dq: RSA Private Key Parameter.
    :vartype dq: str
    :ivar e: RSA public exponent, in Base64.
    :vartype e: str
    :ivar k: Symmetric key.
    :vartype k: str
    :ivar kid: The "kid" (key ID) parameter is used to match a specific key.  This
     is used, for instance, to choose among a set of keys within a JWK Set
     during key rollover.  The structure of the "kid" value is
     unspecified.  When "kid" values are used within a JWK Set, different
     keys within the JWK Set SHOULD use distinct "kid" values.  (One
     example in which different keys might use the same "kid" value is if
     they have different "kty" (key type) values but are considered to be
     equivalent alternatives by the application using them.)  The "kid"
     value is a case-sensitive string.
    :vartype kid: str
    :ivar kty: The "kty" (key type) parameter identifies the cryptographic algorithm
     family used with the key, such as "RSA" or "EC". "kty" values should
     either be registered in the IANA "JSON Web Key Types" registry
     established by [JWA] or be a value that contains a Collision-
     Resistant Name.  The "kty" value is a case-sensitive string. Required.
    :vartype kty: str
    :ivar n: RSA modulus, in Base64.
    :vartype n: str
    :ivar p: RSA secret prime.
    :vartype p: str
    :ivar q: RSA secret prime, with p < q.
    :vartype q: str
    :ivar qi: RSA Private Key Parameter.
    :vartype qi: str
    :ivar use: Use ("public key use") identifies the intended use of
     the public key. The "use" parameter is employed to indicate whether
     a public key is used for encrypting data or verifying the signature
     on data. Values are commonly "sig" (signature) or "enc" (encryption).
    :vartype use: str
    :ivar x: X coordinate for the Elliptic Curve point.
    :vartype x: str
    :ivar x5_c: The "x5c" (X.509 certificate chain) parameter contains a chain of one
     or more PKIX certificates [RFC5280].  The certificate chain is
     represented as a JSON array of certificate value strings.  Each
     string in the array is a base64-encoded (Section 4 of [RFC4648] --
     not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.
     The PKIX certificate containing the key value MUST be the first
     certificate.
    :vartype x5_c: list[str]
    :ivar y: Y coordinate for the Elliptic Curve point.
    :vartype y: str
    """

    alg: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The \"alg\" (algorithm) parameter identifies the algorithm intended for
     use with the key.  The values used should either be registered in the
     IANA \"JSON Web Signature and Encryption Algorithms\" registry
     established by [JWA] or be a value that contains a Collision-
     Resistant Name."""
    crv: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The \"crv\" (curve) parameter identifies the curve type."""
    d: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """RSA private exponent or ECC private key."""
    dp: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """RSA Private Key Parameter."""
    dq: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """RSA Private Key Parameter."""
    e: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """RSA public exponent, in Base64."""
    k: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Symmetric key."""
    kid: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The \"kid\" (key ID) parameter is used to match a specific key.  This
     is used, for instance, to choose among a set of keys within a JWK Set
     during key rollover.  The structure of the \"kid\" value is
     unspecified.  When \"kid\" values are used within a JWK Set, different
     keys within the JWK Set SHOULD use distinct \"kid\" values.  (One
     example in which different keys might use the same \"kid\" value is if
     they have different \"kty\" (key type) values but are considered to be
     equivalent alternatives by the application using them.)  The \"kid\"
     value is a case-sensitive string."""
    kty: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The \"kty\" (key type) parameter identifies the cryptographic algorithm
     family used with the key, such as \"RSA\" or \"EC\". \"kty\" values should
     either be registered in the IANA \"JSON Web Key Types\" registry
     established by [JWA] or be a value that contains a Collision-
     Resistant Name.  The \"kty\" value is a case-sensitive string. Required."""
    n: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """RSA modulus, in Base64."""
    p: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """RSA secret prime."""
    q: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """RSA secret prime, with p < q."""
    qi: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """RSA Private Key Parameter."""
    use: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Use (\"public key use\") identifies the intended use of
     the public key. The \"use\" parameter is employed to indicate whether
     a public key is used for encrypting data or verifying the signature
     on data. Values are commonly \"sig\" (signature) or \"enc\" (encryption)."""
    x: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """X coordinate for the Elliptic Curve point."""
    x5_c: Optional[List[str]] = rest_field(name="x5c", visibility=["read", "create", "update", "delete", "query"])
    """The \"x5c\" (X.509 certificate chain) parameter contains a chain of one
     or more PKIX certificates [RFC5280].  The certificate chain is
     represented as a JSON array of certificate value strings.  Each
     string in the array is a base64-encoded (Section 4 of [RFC4648] --
     not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.
     The PKIX certificate containing the key value MUST be the first
     certificate."""
    y: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Y coordinate for the Elliptic Curve point."""




    @overload
    def __init__(
        self,
        *,
        kty: str,
        alg: Optional[str] = None,
        crv: Optional[str] = None,
        d: Optional[str] = None,
        dp: Optional[str] = None,
        dq: Optional[str] = None,
        e: Optional[str] = None,
        k: Optional[str] = None,
        kid: Optional[str] = None,
        n: Optional[str] = None,
        p: Optional[str] = None,
        q: Optional[str] = None,
        qi: Optional[str] = None,
        use: Optional[str] = None,
        x: Optional[str] = None,
        x5_c: Optional[List[str]] = None,
        y: Optional[str] = None,
    ) -> None:
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class JsonWebKeySet(_Model):
    """JsonWebKeySet.

    :ivar keys_property: The value of the "keys" parameter is an array of JWK values.  By
     default, the order of the JWK values within the array does not imply
     an order of preference among them, although applications of JWK Sets
     can choose to assign a meaning to the order for their purposes, if
     desired.
    :vartype keys_property: list[~azure.security.attestation.models.JsonWebKey]
    """

    keys_property: Optional[List["_models.JsonWebKey"]] = rest_field(name="keys", visibility=["read", "create", "update", "delete", "query"])
    """The value of the \"keys\" parameter is an array of JWK values.  By
     default, the order of the JWK values within the array does not imply
     an order of preference among them, although applications of JWK Sets
     can choose to assign a meaning to the order for their purposes, if
     desired."""




    @overload
    def __init__(
        self,
        *,
        keys_property: Optional[List["_models.JsonWebKey"]] = None,
    ) -> None:
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OpenIDConfigurationResponse(_Model):
    """The response to the OpenID metadata description document API.

    :ivar response_types_supported: Types supported in the OpenID metadata API.
    :vartype response_types_supported: list[str]
    :ivar id_token_signing_alg_values_supported: List of the supported signing algorithms.
    :vartype id_token_signing_alg_values_supported: list[str]
    :ivar revocation_endpoint: Revocation endpoint.
    :vartype revocation_endpoint: str
    :ivar issuer: Issuer tenant base endpoint.
    :vartype issuer: str
    :ivar jwks_uri: The URI to retrieve the signing keys.
    :vartype jwks_uri: str
    :ivar claims_supported: Set of claims supported by the OpenID metadata endpoint.
    :vartype claims_supported: list[str]
    """

    response_types_supported: Optional[List[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Types supported in the OpenID metadata API."""
    id_token_signing_alg_values_supported: Optional[List[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of the supported signing algorithms."""
    revocation_endpoint: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Revocation endpoint."""
    issuer: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Issuer tenant base endpoint."""
    jwks_uri: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The URI to retrieve the signing keys."""
    claims_supported: Optional[List[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Set of claims supported by the OpenID metadata endpoint."""




    @overload
    def __init__(
        self,
        *,
        response_types_supported: Optional[List[str]] = None,
        id_token_signing_alg_values_supported: Optional[List[str]] = None,
        revocation_endpoint: Optional[str] = None,
        issuer: Optional[str] = None,
        jwks_uri: Optional[str] = None,
        claims_supported: Optional[List[str]] = None,
    ) -> None:
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PolicyCertificatesModifyResponse(_Model):
    """The response to an attestation policy management API.

    :ivar token: An RFC7519 JSON Web Token structure whose body is a
     PolicyCertificatesModificationResult object.
    :vartype token: str
    """

    token: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """An RFC7519 JSON Web Token structure whose body is a
     PolicyCertificatesModificationResult object."""




    @overload
    def __init__(
        self,
        *,
        token: Optional[str] = None,
    ) -> None:
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PolicyCertificatesResponse(_Model):
    """The response to an attestation policy management API.

    :ivar token: An RFC7519 JSON Web Token structure containing a PolicyCertificatesResults
     object which contains the certificates used to validate policy changes.
    :vartype token: str
    """

    token: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """An RFC7519 JSON Web Token structure containing a PolicyCertificatesResults
     object which contains the certificates used to validate policy changes."""




    @overload
    def __init__(
        self,
        *,
        token: Optional[str] = None,
    ) -> None:
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PolicyResponse(_Model):
    """The response to an attestation policy operation.

    :ivar token: An RFC7519 JSON Web Token structure whose body is an PolicyResult object.
    :vartype token: str
    """

    token: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """An RFC7519 JSON Web Token structure whose body is an PolicyResult object."""




    @overload
    def __init__(
        self,
        *,
        token: Optional[str] = None,
    ) -> None:
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RuntimeData(_Model):
    """Runtime data are a conduit for any information defined by the Trusted Execution
    Environment (TEE) when actually running.

    :ivar data: Runtime data are generated by the Trusted Execution Environment (TEE). For an
     SGX quote (Coffeelake or Icelake), the SHA256 hash of the RuntimeData must
     match the lower 32 bytes of the quote's "report data" attribute. For a SEV-SNP
     quote, the SHA256 hash of the RuntimeData must match the quote's "report data"
     attribute.
    :vartype data: bytes
    :ivar data_type: The type of data contained within the "data" field. Known values are: "Binary"
     and "JSON".
    :vartype data_type: str or ~azure.security.attestation.models.DataType
    """

    data: Optional[bytes] = rest_field(visibility=["read", "create", "update", "delete", "query"], format="base64")
    """Runtime data are generated by the Trusted Execution Environment (TEE). For an
     SGX quote (Coffeelake or Icelake), the SHA256 hash of the RuntimeData must
     match the lower 32 bytes of the quote's \"report data\" attribute. For a SEV-SNP
     quote, the SHA256 hash of the RuntimeData must match the quote's \"report data\"
     attribute."""
    data_type: Optional[Union[str, "_models.DataType"]] = rest_field(name="dataType", visibility=["read", "create", "update", "delete", "query"])
    """The type of data contained within the \"data\" field. Known values are: \"Binary\" and
     \"JSON\"."""




    @overload
    def __init__(
        self,
        *,
        data: Optional[bytes] = None,
        data_type: Optional[Union[str, "_models.DataType"]] = None,
    ) -> None:
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SealedAttestationResponse(_Model):
    """The sealed result of an attestation operation.

    :ivar token: A sealed RFC 7519 JSON Web Token, the body of which is an AttestationResult
     object.
    :vartype token: str
    """

    token: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A sealed RFC 7519 JSON Web Token, the body of which is an AttestationResult
     object."""




    @overload
    def __init__(
        self,
        *,
        token: Optional[str] = None,
    ) -> None:
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TcbBaseline(_Model):
    """TEE specific Tcb baseline used in attestation, and baseline details including
    baseline identifier, release date and minimum required software version.

    :ivar tcb_identifier: The Tcb baseline Identifier used in attestation policy.
    :vartype tcb_identifier: str
    :ivar tcb_evaluation_data_number: A monotonically increasing sequence number changed when Intel
     updates the
     content of the TCB evaluation data set. SGX TEE specific property.
    :vartype tcb_evaluation_data_number: int
    :ivar tcb_release_date: Date and time when the Tcb is released. SGX TEE specific property.
    :vartype tcb_release_date: ~datetime.datetime
    :ivar minimum_psw_linux_version: Minimum Linux PSW version required to support the
     corresponding Tcb baseline.
     SGX TEE specific property.
    :vartype minimum_psw_linux_version: str
    :ivar minimum_psw_windows_version: Minimum Windows PSW version required to support the
     corresponding Tcb baseline.
     SGX TEE specific property.
    :vartype minimum_psw_windows_version: str
    :ivar is_selected_tcb: The corresponding Tcb baseline is set in attestation policy and is used
     in
     attestation request if set to true.
    :vartype is_selected_tcb: bool
    """

    tcb_identifier: Optional[str] = rest_field(name="tcbIdentifier", visibility=["read", "create", "update", "delete", "query"])
    """The Tcb baseline Identifier used in attestation policy."""
    tcb_evaluation_data_number: Optional[int] = rest_field(name="tcbEvaluationDataNumber", visibility=["read", "create", "update", "delete", "query"])
    """A monotonically increasing sequence number changed when Intel updates the
     content of the TCB evaluation data set. SGX TEE specific property."""
    tcb_release_date: Optional[datetime.datetime] = rest_field(name="tcbReleaseDate", visibility=["read", "create", "update", "delete", "query"], format="rfc3339")
    """Date and time when the Tcb is released. SGX TEE specific property."""
    minimum_psw_linux_version: Optional[str] = rest_field(name="minimumPswLinuxVersion", visibility=["read", "create", "update", "delete", "query"])
    """Minimum Linux PSW version required to support the corresponding Tcb baseline.
     SGX TEE specific property."""
    minimum_psw_windows_version: Optional[str] = rest_field(name="minimumPswWindowsVersion", visibility=["read", "create", "update", "delete", "query"])
    """Minimum Windows PSW version required to support the corresponding Tcb baseline.
     SGX TEE specific property."""
    is_selected_tcb: Optional[bool] = rest_field(name="isSelectedTcb", visibility=["read", "create", "update", "delete", "query"])
    """The corresponding Tcb baseline is set in attestation policy and is used in
     attestation request if set to true."""




    @overload
    def __init__(
        self,
        *,
        tcb_identifier: Optional[str] = None,
        tcb_evaluation_data_number: Optional[int] = None,
        tcb_release_date: Optional[datetime.datetime] = None,
        minimum_psw_linux_version: Optional[str] = None,
        minimum_psw_windows_version: Optional[str] = None,
        is_selected_tcb: Optional[bool] = None,
    ) -> None:
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TcbBaselineResult(_Model):
    """A list of all Azure supported baseline details for the a TEE type along with an
    indication of which one is in enforced for the attestation provider.

    :ivar tcb_baselines: A list of all Azure supported baseline details for the a TEE type along
     with an
     indication of which one is in enforced for the attestation provider.
    :vartype tcb_baselines: list[~azure.security.attestation.models.TcbBaseline]
    """

    tcb_baselines: Optional[List["_models.TcbBaseline"]] = rest_field(name="tcbBaselines", visibility=["read", "create", "update", "delete", "query"])
    """A list of all Azure supported baseline details for the a TEE type along with an
     indication of which one is in enforced for the attestation provider."""




    @overload
    def __init__(
        self,
        *,
        tcb_baselines: Optional[List["_models.TcbBaseline"]] = None,
    ) -> None:
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TpmAttestationResponse(_Model):
    """Attestation response for Trusted Platform Module (TPM) attestation.

    :ivar data: Protocol data containing attestation service response.
    :vartype data: bytes
    """

    data: Optional[bytes] = rest_field(visibility=["read", "create", "update", "delete", "query"], format="base64")
    """Protocol data containing attestation service response."""




    @overload
    def __init__(
        self,
        *,
        data: Optional[bytes] = None,
    ) -> None:
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
