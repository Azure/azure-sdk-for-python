# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import TYPE_CHECKING

from azure.core import PipelineClient
from msrest import Deserializer, Serializer
from six import python_2_unicode_compatible

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any

    from azure.core.credentials import TokenCredential
    from azure.core.pipeline.transport import HttpRequest, HttpResponse

from ._generated import AzureAttestationRestClient
from ._generated.models import AttestationType, PolicyResult
from ._configuration import AttestationClientConfiguration
from ._models import AttestationSigner, AttestationToken, AttestationResponse, StoredAttestationPolicy, SigningKey
from ._common import Base64Url
import cryptography
import cryptography.x509
import base64
from typing import List, Any
from azure.core.tracing.decorator import distributed_trace
from threading import Lock, Thread


class AttestationAdministrationClient(object):
    """Describes the interface for the per-tenant enclave service.
    :param str base_url: base url of the service
    :param credential: An object which can provide secrets for the attestation service
    :type credential: azure.core.credentials.TokenCredential
    :keyword Pipeline pipeline: If omitted, the standard pipeline is used.
    :keyword HttpTransport transport: If omitted, the standard pipeline is used.
    :keyword list[HTTPPolicy] policies: If omitted, the standard pipeline is used.
    """

    def __init__(
        self,
        credential,  # type: "TokenCredential"
        instance_url,  # type: str
        **kwargs  # type: Any
    ):
        # type: (str, Any, dict) -> None
        base_url = '{instanceUrl}'
        if not credential:
            raise ValueError("Missing credential.")
        self._config = AttestationClientConfiguration(credential, instance_url, **kwargs)
        self._client = AzureAttestationRestClient(credential, instance_url, **kwargs)
        self._statelock = Lock()
        self._signing_certificates = None

    @distributed_trace
    def get_policy(self, attestation_type, **kwargs): 
        #type(AttestationType) -> AttestationResult[str]:
        """ Retrieves the attestation policy for a specified attestation type.
        :param attestation_type - The attestation parameter type.
        :type attestation_type: AttestationType
        """
        
        policyResult = self._client.policy.get(attestation_type, **kwargs)
        token = AttestationToken[PolicyResult](token=policyResult.token, body_type=PolicyResult)
        token_body = token.get_body()
        stored_policy = AttestationToken[StoredAttestationPolicy](token=token_body.policy, body_type=StoredAttestationPolicy)

        actual_policy = stored_policy.get_body().attestation_policy #type: bytes

        if self._config.token_validation_options.validate_token:
            token.validate_token(self._config.token_validation_options, self._get_signers(**kwargs))

        return AttestationResponse[str](token, actual_policy.decode('utf-8'))

    @distributed_trace
    def set_policy(self, attestation_type, attestation_policy, signing_key=None, **kwargs): 
        #type:(AttestationType, str, SigningKey, Any) -> AttestationResponse[PolicyResult]
        policy_token = AttestationToken[StoredAttestationPolicy](
            body=StoredAttestationPolicy(attestation_policy = attestation_policy.encode('ascii')),
            body_type=StoredAttestationPolicy)
        policyResult = self._client.policy.set(attestation_type=attestation_type, new_attestation_policy=policy_token.serialize(), **kwargs)
        token = AttestationToken[PolicyResult](token=policyResult.token,
            body_type=PolicyResult)
        if self._config.token_validation_options.validate_token:
            token.validate_token(self._config.token_validation_options, self._get_signers(**kwargs))

        return AttestationResponse[PolicyResult](token, token.get_body())


    def _get_signers(self, **kwargs):
        #type(Any) -> List[AttestationSigner]
        """ Returns the set of signing certificates used to sign attestation tokens.
        """

        with self._statelock:
            if (self._signing_certificates == None):
                signing_certificates = self._client.signing_certificates.get(**kwargs)
                self._signing_certificates = []
                for key in signing_certificates.keys:
                    # Convert the returned certificate chain into an array of X.509 Certificates.
                    certificates = []
                    for x5c in key.x5_c:
                        der_cert = base64.b64decode(x5c)
                        cert = cryptography.x509.load_der_x509_certificate(der_cert)
                        certificates.append(cert)
                    self._signing_certificates.append(AttestationSigner(certificates, key.kid))
            signers = self._signing_certificates
        return signers

    def close(self):
        # type: () -> None
        self._client.close()

    def __enter__(self):
        # type: () -> AttestationAdministrationClient
        self._client.__enter__()
        return self

    def __exit__(self, *exc_details):
        # type: (Any) -> None
        self._client.__exit__(*exc_details)
