# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import TYPE_CHECKING

from azure.core import PipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any

    from azure.core.credentials import TokenCredential
    from azure.core.pipeline.transport import HttpRequest, HttpResponse

from ._generated import AzureAttestationRestClient
from ._configuration import AttestationClientConfiguration
from ._models import AttestationSigner
import base64
import cryptography
import cryptography.x509
from typing import List, Any


class AttestationClient(object):
    """Describes the interface for the per-tenant enclave service.
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials.TokenCredential
    :param instance_url: The attestation instance base URI, for example https://mytenant.attest.azure.net.
    :type instance_url: str
    """

    def __init__(
        self,
        credential,  # type: "TokenCredential"
        instance_url,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        base_url = '{instanceUrl}'
        self._config = AttestationClientConfiguration(credential, instance_url, **kwargs)
        self._client = AzureAttestationRestClient(credential, instance_url, **kwargs)

    def get_openidmetadata(self):
        return self._client.metadata_configuration.get()


    def get_signing_certificates(self) -> List[AttestationSigner]:
        """ Returns the set of signing certificates used to sign attestation tokens.
        """
        signing_certificates = self._client.signing_certificates.get()
        assert signing_certificates.keys is not None
        signers = []
        for key in signing_certificates.keys:
            assert key.x5_c is not None

            # Convert the returned certificate chain into an array of X.509 Certificates.
            certificates = []
            for x5c in key.x5_c:
                der_cert = base64.b64decode(x5c)
                cert = cryptography.x509.load_der_x509_certificate(der_cert)
                certificates.append(cert)
            signers.append(AttestationSigner(certificates, key.kid))
        return signers

    def close(self):
        # type: () -> None
        self._client.close()

    def __enter__(self):
        # type: () -> AttestationClient
        self._client.__enter__()
        return self

    def __exit__(self, *exc_details):
        # type: (Any) -> None
        self._client.__exit__(*exc_details)
