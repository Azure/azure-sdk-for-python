# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse

from .. import models as _models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class PolicyOperations(object):
    """PolicyOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.security.attestation.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def prepare_to_set(
        self,
        tee,  # type: Union[str, "_models.TeeKind"]
        policy_jws,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Union[str, "_models.CloudError"]
        """Accepts a new policy document and returns a JWT which expresses  used in preparation to set attestation policy.

        Accepts a new policy document and returns a JWT which expresses  used in preparation to set
        attestation policy.

        :param tee: Specifies the trusted execution environment to be used to validate the evidence.
        :type tee: str or ~azure.security.attestation.models.TeeKind
        :param policy_jws: JSON Web Signature (See RFC7515) expressing the new policy.
        :type policy_jws: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: str or CloudError, or the result of cls(response)
        :rtype: str or ~azure.security.attestation.models.CloudError
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Union[str, "_models.CloudError"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2018-09-01-preview"
        content_type = kwargs.pop("content_type", "text/plain")
        accept = "text/plain, application/json"

        # Construct URL
        url = self.prepare_to_set.metadata['url']  # type: ignore
        path_format_arguments = {
            'tenantBaseUrl': self._serialize.url("self._config.tenant_base_url", self._config.tenant_base_url, 'str', skip_quote=True),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        query_parameters['tee'] = self._serialize.query("tee", tee, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(policy_jws, 'str')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 200, 400, 401, 401]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(_models.CloudError, response)
            raise HttpResponseError(response=response, model=error)

        if response.status_code == 200:
            deserialized = self._deserialize('str', pipeline_response)

        if response.status_code == 200:
            deserialized = self._deserialize('str', pipeline_response)

        if response.status_code == 400:
            deserialized = self._deserialize('CloudError', pipeline_response)

        if response.status_code == 401:
            deserialized = self._deserialize('str', pipeline_response)

        if response.status_code == 401:
            deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    prepare_to_set.metadata = {'url': '/operations/policy/updatepolicy'}  # type: ignore

    def get(
        self,
        tee,  # type: Union[str, "_models.TeeKind"]
        **kwargs  # type: Any
    ):
        # type: (...) -> Union["_models.AttestationPolicy", "_models.CloudError", str]
        """Retrieves the current policy for a given kind of TEE.

        Retrieves the current policy for a given kind of TEE.

        :param tee: Specifies the trusted execution environment to be used to validate the evidence.
        :type tee: str or ~azure.security.attestation.models.TeeKind
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AttestationPolicy or CloudError or str, or the result of cls(response)
        :rtype: ~azure.security.attestation.models.AttestationPolicy or ~azure.security.attestation.models.CloudError or str
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Union["_models.AttestationPolicy", "_models.CloudError", str]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2018-09-01-preview"
        accept = "application/json"

        # Construct URL
        url = self.get.metadata['url']  # type: ignore
        path_format_arguments = {
            'tenantBaseUrl': self._serialize.url("self._config.tenant_base_url", self._config.tenant_base_url, 'str', skip_quote=True),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        query_parameters['tee'] = self._serialize.query("tee", tee, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(_models.CloudError, response)
            raise HttpResponseError(response=response, model=error)

        if response.status_code == 200:
            deserialized = self._deserialize('AttestationPolicy', pipeline_response)

        if response.status_code == 400:
            deserialized = self._deserialize('CloudError', pipeline_response)

        if response.status_code == 401:
            deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get.metadata = {'url': '/operations/policy/current'}  # type: ignore

    def set(
        self,
        tee,  # type: Union[str, "_models.TeeKind"]
        new_attestation_policy,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional[Union["_models.CloudError", str]]
        """Sets the policy for a given kind of TEE.

        Sets the policy for a given kind of TEE.

        :param tee: Specifies the trusted execution environment to be used to validate the evidence.
        :type tee: str or ~azure.security.attestation.models.TeeKind
        :param new_attestation_policy: JWT Expressing the new policy.
        :type new_attestation_policy: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: CloudError or str, or the result of cls(response)
        :rtype: ~azure.security.attestation.models.CloudError or str or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional[Union["_models.CloudError", str]]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2018-09-01-preview"
        content_type = kwargs.pop("content_type", "text/plain")
        accept = "application/json"

        # Construct URL
        url = self.set.metadata['url']  # type: ignore
        path_format_arguments = {
            'tenantBaseUrl': self._serialize.url("self._config.tenant_base_url", self._config.tenant_base_url, 'str', skip_quote=True),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        query_parameters['tee'] = self._serialize.query("tee", tee, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(new_attestation_policy, 'str')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(_models.CloudError, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = None
        if response.status_code == 400:
            deserialized = self._deserialize('CloudError', pipeline_response)

        if response.status_code == 401:
            deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    set.metadata = {'url': '/operations/policy/current'}  # type: ignore

    def reset(
        self,
        tee,  # type: Union[str, "_models.TeeKind"]
        policy_jws,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Union[str, "_models.CloudError"]
        """Resets the attestation policy for the specified tenant and reverts to the default policy.

        Resets the attestation policy for the specified tenant and reverts to the default policy.

        :param tee: Specifies the trusted execution environment to be used to validate the evidence.
        :type tee: str or ~azure.security.attestation.models.TeeKind
        :param policy_jws: JSON Web Signature with an empty policy document.
        :type policy_jws: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: str or CloudError, or the result of cls(response)
        :rtype: str or ~azure.security.attestation.models.CloudError
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Union[str, "_models.CloudError"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2018-09-01-preview"
        content_type = kwargs.pop("content_type", "text/plain")
        accept = "application/json"

        # Construct URL
        url = self.reset.metadata['url']  # type: ignore
        path_format_arguments = {
            'tenantBaseUrl': self._serialize.url("self._config.tenant_base_url", self._config.tenant_base_url, 'str', skip_quote=True),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        query_parameters['tee'] = self._serialize.query("tee", tee, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(policy_jws, 'str')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 401]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(_models.CloudError, response)
            raise HttpResponseError(response=response, model=error)

        if response.status_code == 200:
            deserialized = self._deserialize('str', pipeline_response)

        if response.status_code == 400:
            deserialized = self._deserialize('CloudError', pipeline_response)

        if response.status_code == 401:
            deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    reset.metadata = {'url': '/operations/policy/current'}  # type: ignore
