# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Iterable, Optional, TypeVar

from msrest import Serializer

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models as _models
from .._vendor import _convert_request, _format_url_section
T = TypeVar('T')
JSONType = Any
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False

def build_get_request(
    subscription_id: str,
    provider_namespace: str,
    resource_type: str,
    sku: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = kwargs.pop('api_version', "2020-11-20")  # type: str

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/skus/{sku}")  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "providerNamespace": _SERIALIZER.url("provider_namespace", provider_namespace, 'str'),
        "resourceType": _SERIALIZER.url("resource_type", resource_type, 'str'),
        "sku": _SERIALIZER.url("sku", sku, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        **kwargs
    )


def build_create_or_update_request(
    subscription_id: str,
    provider_namespace: str,
    resource_type: str,
    sku: str,
    *,
    json: JSONType = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    api_version = kwargs.pop('api_version', "2020-11-20")  # type: str
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/skus/{sku}")  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "providerNamespace": _SERIALIZER.url("provider_namespace", provider_namespace, 'str'),
        "resourceType": _SERIALIZER.url("resource_type", resource_type, 'str'),
        "sku": _SERIALIZER.url("sku", sku, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        _header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        json=json,
        content=content,
        **kwargs
    )


def build_delete_request(
    subscription_id: str,
    provider_namespace: str,
    resource_type: str,
    sku: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = kwargs.pop('api_version', "2020-11-20")  # type: str

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/skus/{sku}")  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "providerNamespace": _SERIALIZER.url("provider_namespace", provider_namespace, 'str'),
        "resourceType": _SERIALIZER.url("resource_type", resource_type, 'str'),
        "sku": _SERIALIZER.url("sku", sku, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        **kwargs
    )


def build_get_nested_resource_type_first_request(
    subscription_id: str,
    provider_namespace: str,
    resource_type: str,
    nested_resource_type_first: str,
    sku: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = kwargs.pop('api_version', "2020-11-20")  # type: str

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/skus/{sku}")  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "providerNamespace": _SERIALIZER.url("provider_namespace", provider_namespace, 'str'),
        "resourceType": _SERIALIZER.url("resource_type", resource_type, 'str'),
        "nestedResourceTypeFirst": _SERIALIZER.url("nested_resource_type_first", nested_resource_type_first, 'str'),
        "sku": _SERIALIZER.url("sku", sku, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        **kwargs
    )


def build_create_or_update_nested_resource_type_first_request(
    subscription_id: str,
    provider_namespace: str,
    resource_type: str,
    nested_resource_type_first: str,
    sku: str,
    *,
    json: JSONType = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    api_version = kwargs.pop('api_version', "2020-11-20")  # type: str
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/skus/{sku}")  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "providerNamespace": _SERIALIZER.url("provider_namespace", provider_namespace, 'str'),
        "resourceType": _SERIALIZER.url("resource_type", resource_type, 'str'),
        "nestedResourceTypeFirst": _SERIALIZER.url("nested_resource_type_first", nested_resource_type_first, 'str'),
        "sku": _SERIALIZER.url("sku", sku, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        _header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        json=json,
        content=content,
        **kwargs
    )


def build_delete_nested_resource_type_first_request(
    subscription_id: str,
    provider_namespace: str,
    resource_type: str,
    nested_resource_type_first: str,
    sku: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = kwargs.pop('api_version', "2020-11-20")  # type: str

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/skus/{sku}")  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "providerNamespace": _SERIALIZER.url("provider_namespace", provider_namespace, 'str'),
        "resourceType": _SERIALIZER.url("resource_type", resource_type, 'str'),
        "nestedResourceTypeFirst": _SERIALIZER.url("nested_resource_type_first", nested_resource_type_first, 'str'),
        "sku": _SERIALIZER.url("sku", sku, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        **kwargs
    )


def build_get_nested_resource_type_second_request(
    subscription_id: str,
    provider_namespace: str,
    resource_type: str,
    nested_resource_type_first: str,
    nested_resource_type_second: str,
    sku: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = kwargs.pop('api_version', "2020-11-20")  # type: str

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/skus/{sku}")  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "providerNamespace": _SERIALIZER.url("provider_namespace", provider_namespace, 'str'),
        "resourceType": _SERIALIZER.url("resource_type", resource_type, 'str'),
        "nestedResourceTypeFirst": _SERIALIZER.url("nested_resource_type_first", nested_resource_type_first, 'str'),
        "nestedResourceTypeSecond": _SERIALIZER.url("nested_resource_type_second", nested_resource_type_second, 'str'),
        "sku": _SERIALIZER.url("sku", sku, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        **kwargs
    )


def build_create_or_update_nested_resource_type_second_request(
    subscription_id: str,
    provider_namespace: str,
    resource_type: str,
    nested_resource_type_first: str,
    nested_resource_type_second: str,
    sku: str,
    *,
    json: JSONType = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    api_version = kwargs.pop('api_version', "2020-11-20")  # type: str
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/skus/{sku}")  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "providerNamespace": _SERIALIZER.url("provider_namespace", provider_namespace, 'str'),
        "resourceType": _SERIALIZER.url("resource_type", resource_type, 'str'),
        "nestedResourceTypeFirst": _SERIALIZER.url("nested_resource_type_first", nested_resource_type_first, 'str'),
        "nestedResourceTypeSecond": _SERIALIZER.url("nested_resource_type_second", nested_resource_type_second, 'str'),
        "sku": _SERIALIZER.url("sku", sku, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        _header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        json=json,
        content=content,
        **kwargs
    )


def build_delete_nested_resource_type_second_request(
    subscription_id: str,
    provider_namespace: str,
    resource_type: str,
    nested_resource_type_first: str,
    nested_resource_type_second: str,
    sku: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = kwargs.pop('api_version', "2020-11-20")  # type: str

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/skus/{sku}")  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "providerNamespace": _SERIALIZER.url("provider_namespace", provider_namespace, 'str'),
        "resourceType": _SERIALIZER.url("resource_type", resource_type, 'str'),
        "nestedResourceTypeFirst": _SERIALIZER.url("nested_resource_type_first", nested_resource_type_first, 'str'),
        "nestedResourceTypeSecond": _SERIALIZER.url("nested_resource_type_second", nested_resource_type_second, 'str'),
        "sku": _SERIALIZER.url("sku", sku, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        **kwargs
    )


def build_get_nested_resource_type_third_request(
    subscription_id: str,
    provider_namespace: str,
    resource_type: str,
    nested_resource_type_first: str,
    nested_resource_type_second: str,
    nested_resource_type_third: str,
    sku: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = kwargs.pop('api_version', "2020-11-20")  # type: str

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/resourcetypeRegistrations/{nestedResourceTypeThird}/skus/{sku}")  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "providerNamespace": _SERIALIZER.url("provider_namespace", provider_namespace, 'str'),
        "resourceType": _SERIALIZER.url("resource_type", resource_type, 'str'),
        "nestedResourceTypeFirst": _SERIALIZER.url("nested_resource_type_first", nested_resource_type_first, 'str'),
        "nestedResourceTypeSecond": _SERIALIZER.url("nested_resource_type_second", nested_resource_type_second, 'str'),
        "nestedResourceTypeThird": _SERIALIZER.url("nested_resource_type_third", nested_resource_type_third, 'str'),
        "sku": _SERIALIZER.url("sku", sku, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        **kwargs
    )


def build_create_or_update_nested_resource_type_third_request(
    subscription_id: str,
    provider_namespace: str,
    resource_type: str,
    nested_resource_type_first: str,
    nested_resource_type_second: str,
    nested_resource_type_third: str,
    sku: str,
    *,
    json: JSONType = None,
    content: Any = None,
    **kwargs: Any
) -> HttpRequest:
    api_version = kwargs.pop('api_version', "2020-11-20")  # type: str
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/resourcetypeRegistrations/{nestedResourceTypeThird}/skus/{sku}")  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "providerNamespace": _SERIALIZER.url("provider_namespace", provider_namespace, 'str'),
        "resourceType": _SERIALIZER.url("resource_type", resource_type, 'str'),
        "nestedResourceTypeFirst": _SERIALIZER.url("nested_resource_type_first", nested_resource_type_first, 'str'),
        "nestedResourceTypeSecond": _SERIALIZER.url("nested_resource_type_second", nested_resource_type_second, 'str'),
        "nestedResourceTypeThird": _SERIALIZER.url("nested_resource_type_third", nested_resource_type_third, 'str'),
        "sku": _SERIALIZER.url("sku", sku, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        _header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        json=json,
        content=content,
        **kwargs
    )


def build_delete_nested_resource_type_third_request(
    subscription_id: str,
    provider_namespace: str,
    resource_type: str,
    nested_resource_type_first: str,
    nested_resource_type_second: str,
    nested_resource_type_third: str,
    sku: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = kwargs.pop('api_version', "2020-11-20")  # type: str

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/resourcetypeRegistrations/{nestedResourceTypeThird}/skus/{sku}")  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "providerNamespace": _SERIALIZER.url("provider_namespace", provider_namespace, 'str'),
        "resourceType": _SERIALIZER.url("resource_type", resource_type, 'str'),
        "nestedResourceTypeFirst": _SERIALIZER.url("nested_resource_type_first", nested_resource_type_first, 'str'),
        "nestedResourceTypeSecond": _SERIALIZER.url("nested_resource_type_second", nested_resource_type_second, 'str'),
        "nestedResourceTypeThird": _SERIALIZER.url("nested_resource_type_third", nested_resource_type_third, 'str'),
        "sku": _SERIALIZER.url("sku", sku, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        **kwargs
    )


def build_list_by_resource_type_registrations_request(
    subscription_id: str,
    provider_namespace: str,
    resource_type: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = kwargs.pop('api_version', "2020-11-20")  # type: str

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/skus")  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "providerNamespace": _SERIALIZER.url("provider_namespace", provider_namespace, 'str'),
        "resourceType": _SERIALIZER.url("resource_type", resource_type, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        **kwargs
    )


def build_list_by_resource_type_registrations_nested_resource_type_first_request(
    subscription_id: str,
    provider_namespace: str,
    resource_type: str,
    nested_resource_type_first: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = kwargs.pop('api_version', "2020-11-20")  # type: str

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/skus")  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "providerNamespace": _SERIALIZER.url("provider_namespace", provider_namespace, 'str'),
        "resourceType": _SERIALIZER.url("resource_type", resource_type, 'str'),
        "nestedResourceTypeFirst": _SERIALIZER.url("nested_resource_type_first", nested_resource_type_first, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        **kwargs
    )


def build_list_by_resource_type_registrations_nested_resource_type_second_request(
    subscription_id: str,
    provider_namespace: str,
    resource_type: str,
    nested_resource_type_first: str,
    nested_resource_type_second: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = kwargs.pop('api_version', "2020-11-20")  # type: str

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/skus")  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "providerNamespace": _SERIALIZER.url("provider_namespace", provider_namespace, 'str'),
        "resourceType": _SERIALIZER.url("resource_type", resource_type, 'str'),
        "nestedResourceTypeFirst": _SERIALIZER.url("nested_resource_type_first", nested_resource_type_first, 'str'),
        "nestedResourceTypeSecond": _SERIALIZER.url("nested_resource_type_second", nested_resource_type_second, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        **kwargs
    )


def build_list_by_resource_type_registrations_nested_resource_type_third_request(
    subscription_id: str,
    provider_namespace: str,
    resource_type: str,
    nested_resource_type_first: str,
    nested_resource_type_second: str,
    nested_resource_type_third: str,
    **kwargs: Any
) -> HttpRequest:
    api_version = kwargs.pop('api_version', "2020-11-20")  # type: str

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/resourcetypeRegistrations/{nestedResourceTypeThird}/skus")  # pylint: disable=line-too-long
    path_format_arguments = {
        "subscriptionId": _SERIALIZER.url("subscription_id", subscription_id, 'str', min_length=1),
        "providerNamespace": _SERIALIZER.url("provider_namespace", provider_namespace, 'str'),
        "resourceType": _SERIALIZER.url("resource_type", resource_type, 'str'),
        "nestedResourceTypeFirst": _SERIALIZER.url("nested_resource_type_first", nested_resource_type_first, 'str'),
        "nestedResourceTypeSecond": _SERIALIZER.url("nested_resource_type_second", nested_resource_type_second, 'str'),
        "nestedResourceTypeThird": _SERIALIZER.url("nested_resource_type_third", nested_resource_type_third, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        **kwargs
    )

class SkusOperations(object):
    """SkusOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.mgmt.providerhub.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def get(
        self,
        provider_namespace: str,
        resource_type: str,
        sku: str,
        **kwargs: Any
    ) -> "_models.SkuResource":
        """Gets the sku details for the given resource type and sku name.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param sku: The SKU.
        :type sku: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SkuResource, or the result of cls(response)
        :rtype: ~azure.mgmt.providerhub.models.SkuResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SkuResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2020-11-20")  # type: str

        
        request = build_get_request(
            subscription_id=self._config.subscription_id,
            provider_namespace=provider_namespace,
            resource_type=resource_type,
            sku=sku,
            api_version=api_version,
            template_url=self.get.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SkuResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/skus/{sku}"}  # type: ignore


    @distributed_trace
    def create_or_update(
        self,
        provider_namespace: str,
        resource_type: str,
        sku: str,
        properties: "_models.SkuResource",
        **kwargs: Any
    ) -> "_models.SkuResource":
        """Creates or updates the resource type skus in the given resource type.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param sku: The SKU.
        :type sku: str
        :param properties: The required body parameters supplied to the resource sku operation.
        :type properties: ~azure.mgmt.providerhub.models.SkuResource
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SkuResource, or the result of cls(response)
        :rtype: ~azure.mgmt.providerhub.models.SkuResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SkuResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2020-11-20")  # type: str
        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _json = self._serialize.body(properties, 'SkuResource')

        request = build_create_or_update_request(
            subscription_id=self._config.subscription_id,
            provider_namespace=provider_namespace,
            resource_type=resource_type,
            sku=sku,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self.create_or_update.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SkuResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_or_update.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/skus/{sku}"}  # type: ignore


    @distributed_trace
    def delete(  # pylint: disable=inconsistent-return-statements
        self,
        provider_namespace: str,
        resource_type: str,
        sku: str,
        **kwargs: Any
    ) -> None:
        """Deletes a resource type sku.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param sku: The SKU.
        :type sku: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2020-11-20")  # type: str

        
        request = build_delete_request(
            subscription_id=self._config.subscription_id,
            provider_namespace=provider_namespace,
            resource_type=resource_type,
            sku=sku,
            api_version=api_version,
            template_url=self.delete.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/skus/{sku}"}  # type: ignore


    @distributed_trace
    def get_nested_resource_type_first(
        self,
        provider_namespace: str,
        resource_type: str,
        nested_resource_type_first: str,
        sku: str,
        **kwargs: Any
    ) -> "_models.SkuResource":
        """Gets the sku details for the given resource type and sku name.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param nested_resource_type_first: The first child resource type.
        :type nested_resource_type_first: str
        :param sku: The SKU.
        :type sku: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SkuResource, or the result of cls(response)
        :rtype: ~azure.mgmt.providerhub.models.SkuResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SkuResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2020-11-20")  # type: str

        
        request = build_get_nested_resource_type_first_request(
            subscription_id=self._config.subscription_id,
            provider_namespace=provider_namespace,
            resource_type=resource_type,
            nested_resource_type_first=nested_resource_type_first,
            sku=sku,
            api_version=api_version,
            template_url=self.get_nested_resource_type_first.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SkuResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_nested_resource_type_first.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/skus/{sku}"}  # type: ignore


    @distributed_trace
    def create_or_update_nested_resource_type_first(
        self,
        provider_namespace: str,
        resource_type: str,
        nested_resource_type_first: str,
        sku: str,
        properties: "_models.SkuResource",
        **kwargs: Any
    ) -> "_models.SkuResource":
        """Creates or updates the resource type skus in the given resource type.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param nested_resource_type_first: The first child resource type.
        :type nested_resource_type_first: str
        :param sku: The SKU.
        :type sku: str
        :param properties: The required body parameters supplied to the resource sku operation.
        :type properties: ~azure.mgmt.providerhub.models.SkuResource
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SkuResource, or the result of cls(response)
        :rtype: ~azure.mgmt.providerhub.models.SkuResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SkuResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2020-11-20")  # type: str
        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _json = self._serialize.body(properties, 'SkuResource')

        request = build_create_or_update_nested_resource_type_first_request(
            subscription_id=self._config.subscription_id,
            provider_namespace=provider_namespace,
            resource_type=resource_type,
            nested_resource_type_first=nested_resource_type_first,
            sku=sku,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self.create_or_update_nested_resource_type_first.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SkuResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_or_update_nested_resource_type_first.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/skus/{sku}"}  # type: ignore


    @distributed_trace
    def delete_nested_resource_type_first(  # pylint: disable=inconsistent-return-statements
        self,
        provider_namespace: str,
        resource_type: str,
        nested_resource_type_first: str,
        sku: str,
        **kwargs: Any
    ) -> None:
        """Deletes a resource type sku.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param nested_resource_type_first: The first child resource type.
        :type nested_resource_type_first: str
        :param sku: The SKU.
        :type sku: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2020-11-20")  # type: str

        
        request = build_delete_nested_resource_type_first_request(
            subscription_id=self._config.subscription_id,
            provider_namespace=provider_namespace,
            resource_type=resource_type,
            nested_resource_type_first=nested_resource_type_first,
            sku=sku,
            api_version=api_version,
            template_url=self.delete_nested_resource_type_first.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_nested_resource_type_first.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/skus/{sku}"}  # type: ignore


    @distributed_trace
    def get_nested_resource_type_second(
        self,
        provider_namespace: str,
        resource_type: str,
        nested_resource_type_first: str,
        nested_resource_type_second: str,
        sku: str,
        **kwargs: Any
    ) -> "_models.SkuResource":
        """Gets the sku details for the given resource type and sku name.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param nested_resource_type_first: The first child resource type.
        :type nested_resource_type_first: str
        :param nested_resource_type_second: The second child resource type.
        :type nested_resource_type_second: str
        :param sku: The SKU.
        :type sku: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SkuResource, or the result of cls(response)
        :rtype: ~azure.mgmt.providerhub.models.SkuResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SkuResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2020-11-20")  # type: str

        
        request = build_get_nested_resource_type_second_request(
            subscription_id=self._config.subscription_id,
            provider_namespace=provider_namespace,
            resource_type=resource_type,
            nested_resource_type_first=nested_resource_type_first,
            nested_resource_type_second=nested_resource_type_second,
            sku=sku,
            api_version=api_version,
            template_url=self.get_nested_resource_type_second.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SkuResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_nested_resource_type_second.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/skus/{sku}"}  # type: ignore


    @distributed_trace
    def create_or_update_nested_resource_type_second(
        self,
        provider_namespace: str,
        resource_type: str,
        nested_resource_type_first: str,
        nested_resource_type_second: str,
        sku: str,
        properties: "_models.SkuResource",
        **kwargs: Any
    ) -> "_models.SkuResource":
        """Creates or updates the resource type skus in the given resource type.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param nested_resource_type_first: The first child resource type.
        :type nested_resource_type_first: str
        :param nested_resource_type_second: The second child resource type.
        :type nested_resource_type_second: str
        :param sku: The SKU.
        :type sku: str
        :param properties: The required body parameters supplied to the resource sku operation.
        :type properties: ~azure.mgmt.providerhub.models.SkuResource
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SkuResource, or the result of cls(response)
        :rtype: ~azure.mgmt.providerhub.models.SkuResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SkuResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2020-11-20")  # type: str
        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _json = self._serialize.body(properties, 'SkuResource')

        request = build_create_or_update_nested_resource_type_second_request(
            subscription_id=self._config.subscription_id,
            provider_namespace=provider_namespace,
            resource_type=resource_type,
            nested_resource_type_first=nested_resource_type_first,
            nested_resource_type_second=nested_resource_type_second,
            sku=sku,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self.create_or_update_nested_resource_type_second.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SkuResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_or_update_nested_resource_type_second.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/skus/{sku}"}  # type: ignore


    @distributed_trace
    def delete_nested_resource_type_second(  # pylint: disable=inconsistent-return-statements
        self,
        provider_namespace: str,
        resource_type: str,
        nested_resource_type_first: str,
        nested_resource_type_second: str,
        sku: str,
        **kwargs: Any
    ) -> None:
        """Deletes a resource type sku.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param nested_resource_type_first: The first child resource type.
        :type nested_resource_type_first: str
        :param nested_resource_type_second: The second child resource type.
        :type nested_resource_type_second: str
        :param sku: The SKU.
        :type sku: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2020-11-20")  # type: str

        
        request = build_delete_nested_resource_type_second_request(
            subscription_id=self._config.subscription_id,
            provider_namespace=provider_namespace,
            resource_type=resource_type,
            nested_resource_type_first=nested_resource_type_first,
            nested_resource_type_second=nested_resource_type_second,
            sku=sku,
            api_version=api_version,
            template_url=self.delete_nested_resource_type_second.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_nested_resource_type_second.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/skus/{sku}"}  # type: ignore


    @distributed_trace
    def get_nested_resource_type_third(
        self,
        provider_namespace: str,
        resource_type: str,
        nested_resource_type_first: str,
        nested_resource_type_second: str,
        nested_resource_type_third: str,
        sku: str,
        **kwargs: Any
    ) -> "_models.SkuResource":
        """Gets the sku details for the given resource type and sku name.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param nested_resource_type_first: The first child resource type.
        :type nested_resource_type_first: str
        :param nested_resource_type_second: The second child resource type.
        :type nested_resource_type_second: str
        :param nested_resource_type_third: The third child resource type.
        :type nested_resource_type_third: str
        :param sku: The SKU.
        :type sku: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SkuResource, or the result of cls(response)
        :rtype: ~azure.mgmt.providerhub.models.SkuResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SkuResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2020-11-20")  # type: str

        
        request = build_get_nested_resource_type_third_request(
            subscription_id=self._config.subscription_id,
            provider_namespace=provider_namespace,
            resource_type=resource_type,
            nested_resource_type_first=nested_resource_type_first,
            nested_resource_type_second=nested_resource_type_second,
            nested_resource_type_third=nested_resource_type_third,
            sku=sku,
            api_version=api_version,
            template_url=self.get_nested_resource_type_third.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SkuResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_nested_resource_type_third.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/resourcetypeRegistrations/{nestedResourceTypeThird}/skus/{sku}"}  # type: ignore


    @distributed_trace
    def create_or_update_nested_resource_type_third(
        self,
        provider_namespace: str,
        resource_type: str,
        nested_resource_type_first: str,
        nested_resource_type_second: str,
        nested_resource_type_third: str,
        sku: str,
        properties: "_models.SkuResource",
        **kwargs: Any
    ) -> "_models.SkuResource":
        """Creates or updates the resource type skus in the given resource type.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param nested_resource_type_first: The first child resource type.
        :type nested_resource_type_first: str
        :param nested_resource_type_second: The second child resource type.
        :type nested_resource_type_second: str
        :param nested_resource_type_third: The third child resource type.
        :type nested_resource_type_third: str
        :param sku: The SKU.
        :type sku: str
        :param properties: The required body parameters supplied to the resource sku operation.
        :type properties: ~azure.mgmt.providerhub.models.SkuResource
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SkuResource, or the result of cls(response)
        :rtype: ~azure.mgmt.providerhub.models.SkuResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SkuResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2020-11-20")  # type: str
        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _json = self._serialize.body(properties, 'SkuResource')

        request = build_create_or_update_nested_resource_type_third_request(
            subscription_id=self._config.subscription_id,
            provider_namespace=provider_namespace,
            resource_type=resource_type,
            nested_resource_type_first=nested_resource_type_first,
            nested_resource_type_second=nested_resource_type_second,
            nested_resource_type_third=nested_resource_type_third,
            sku=sku,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self.create_or_update_nested_resource_type_third.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SkuResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_or_update_nested_resource_type_third.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/resourcetypeRegistrations/{nestedResourceTypeThird}/skus/{sku}"}  # type: ignore


    @distributed_trace
    def delete_nested_resource_type_third(  # pylint: disable=inconsistent-return-statements
        self,
        provider_namespace: str,
        resource_type: str,
        nested_resource_type_first: str,
        nested_resource_type_second: str,
        nested_resource_type_third: str,
        sku: str,
        **kwargs: Any
    ) -> None:
        """Deletes a resource type sku.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param nested_resource_type_first: The first child resource type.
        :type nested_resource_type_first: str
        :param nested_resource_type_second: The second child resource type.
        :type nested_resource_type_second: str
        :param nested_resource_type_third: The third child resource type.
        :type nested_resource_type_third: str
        :param sku: The SKU.
        :type sku: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2020-11-20")  # type: str

        
        request = build_delete_nested_resource_type_third_request(
            subscription_id=self._config.subscription_id,
            provider_namespace=provider_namespace,
            resource_type=resource_type,
            nested_resource_type_first=nested_resource_type_first,
            nested_resource_type_second=nested_resource_type_second,
            nested_resource_type_third=nested_resource_type_third,
            sku=sku,
            api_version=api_version,
            template_url=self.delete_nested_resource_type_third.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_nested_resource_type_third.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/resourcetypeRegistrations/{nestedResourceTypeThird}/skus/{sku}"}  # type: ignore


    @distributed_trace
    def list_by_resource_type_registrations(
        self,
        provider_namespace: str,
        resource_type: str,
        **kwargs: Any
    ) -> Iterable["_models.SkuResourceArrayResponseWithContinuation"]:
        """Gets the list of skus for the given resource type.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either SkuResourceArrayResponseWithContinuation or the
         result of cls(response)
        :rtype:
         ~azure.core.paging.ItemPaged[~azure.mgmt.providerhub.models.SkuResourceArrayResponseWithContinuation]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = kwargs.pop('api_version', "2020-11-20")  # type: str

        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SkuResourceArrayResponseWithContinuation"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_list_by_resource_type_registrations_request(
                    subscription_id=self._config.subscription_id,
                    provider_namespace=provider_namespace,
                    resource_type=resource_type,
                    api_version=api_version,
                    template_url=self.list_by_resource_type_registrations.metadata['url'],
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)

            else:
                
                request = build_list_by_resource_type_registrations_request(
                    subscription_id=self._config.subscription_id,
                    provider_namespace=provider_namespace,
                    resource_type=resource_type,
                    api_version=api_version,
                    template_url=next_link,
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize("SkuResourceArrayResponseWithContinuation", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )
    list_by_resource_type_registrations.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/skus"}  # type: ignore

    @distributed_trace
    def list_by_resource_type_registrations_nested_resource_type_first(
        self,
        provider_namespace: str,
        resource_type: str,
        nested_resource_type_first: str,
        **kwargs: Any
    ) -> Iterable["_models.SkuResourceArrayResponseWithContinuation"]:
        """Gets the list of skus for the given resource type.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param nested_resource_type_first: The first child resource type.
        :type nested_resource_type_first: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either SkuResourceArrayResponseWithContinuation or the
         result of cls(response)
        :rtype:
         ~azure.core.paging.ItemPaged[~azure.mgmt.providerhub.models.SkuResourceArrayResponseWithContinuation]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = kwargs.pop('api_version', "2020-11-20")  # type: str

        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SkuResourceArrayResponseWithContinuation"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_list_by_resource_type_registrations_nested_resource_type_first_request(
                    subscription_id=self._config.subscription_id,
                    provider_namespace=provider_namespace,
                    resource_type=resource_type,
                    nested_resource_type_first=nested_resource_type_first,
                    api_version=api_version,
                    template_url=self.list_by_resource_type_registrations_nested_resource_type_first.metadata['url'],
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)

            else:
                
                request = build_list_by_resource_type_registrations_nested_resource_type_first_request(
                    subscription_id=self._config.subscription_id,
                    provider_namespace=provider_namespace,
                    resource_type=resource_type,
                    nested_resource_type_first=nested_resource_type_first,
                    api_version=api_version,
                    template_url=next_link,
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize("SkuResourceArrayResponseWithContinuation", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )
    list_by_resource_type_registrations_nested_resource_type_first.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/skus"}  # type: ignore

    @distributed_trace
    def list_by_resource_type_registrations_nested_resource_type_second(
        self,
        provider_namespace: str,
        resource_type: str,
        nested_resource_type_first: str,
        nested_resource_type_second: str,
        **kwargs: Any
    ) -> Iterable["_models.SkuResourceArrayResponseWithContinuation"]:
        """Gets the list of skus for the given resource type.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param nested_resource_type_first: The first child resource type.
        :type nested_resource_type_first: str
        :param nested_resource_type_second: The second child resource type.
        :type nested_resource_type_second: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either SkuResourceArrayResponseWithContinuation or the
         result of cls(response)
        :rtype:
         ~azure.core.paging.ItemPaged[~azure.mgmt.providerhub.models.SkuResourceArrayResponseWithContinuation]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = kwargs.pop('api_version', "2020-11-20")  # type: str

        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SkuResourceArrayResponseWithContinuation"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_list_by_resource_type_registrations_nested_resource_type_second_request(
                    subscription_id=self._config.subscription_id,
                    provider_namespace=provider_namespace,
                    resource_type=resource_type,
                    nested_resource_type_first=nested_resource_type_first,
                    nested_resource_type_second=nested_resource_type_second,
                    api_version=api_version,
                    template_url=self.list_by_resource_type_registrations_nested_resource_type_second.metadata['url'],
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)

            else:
                
                request = build_list_by_resource_type_registrations_nested_resource_type_second_request(
                    subscription_id=self._config.subscription_id,
                    provider_namespace=provider_namespace,
                    resource_type=resource_type,
                    nested_resource_type_first=nested_resource_type_first,
                    nested_resource_type_second=nested_resource_type_second,
                    api_version=api_version,
                    template_url=next_link,
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize("SkuResourceArrayResponseWithContinuation", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )
    list_by_resource_type_registrations_nested_resource_type_second.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/skus"}  # type: ignore

    @distributed_trace
    def list_by_resource_type_registrations_nested_resource_type_third(
        self,
        provider_namespace: str,
        resource_type: str,
        nested_resource_type_first: str,
        nested_resource_type_second: str,
        nested_resource_type_third: str,
        **kwargs: Any
    ) -> Iterable["_models.SkuResourceArrayResponseWithContinuation"]:
        """Gets the list of skus for the given resource type.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param nested_resource_type_first: The first child resource type.
        :type nested_resource_type_first: str
        :param nested_resource_type_second: The second child resource type.
        :type nested_resource_type_second: str
        :param nested_resource_type_third: The third child resource type.
        :type nested_resource_type_third: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either SkuResourceArrayResponseWithContinuation or the
         result of cls(response)
        :rtype:
         ~azure.core.paging.ItemPaged[~azure.mgmt.providerhub.models.SkuResourceArrayResponseWithContinuation]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = kwargs.pop('api_version', "2020-11-20")  # type: str

        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SkuResourceArrayResponseWithContinuation"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_list_by_resource_type_registrations_nested_resource_type_third_request(
                    subscription_id=self._config.subscription_id,
                    provider_namespace=provider_namespace,
                    resource_type=resource_type,
                    nested_resource_type_first=nested_resource_type_first,
                    nested_resource_type_second=nested_resource_type_second,
                    nested_resource_type_third=nested_resource_type_third,
                    api_version=api_version,
                    template_url=self.list_by_resource_type_registrations_nested_resource_type_third.metadata['url'],
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)

            else:
                
                request = build_list_by_resource_type_registrations_nested_resource_type_third_request(
                    subscription_id=self._config.subscription_id,
                    provider_namespace=provider_namespace,
                    resource_type=resource_type,
                    nested_resource_type_first=nested_resource_type_first,
                    nested_resource_type_second=nested_resource_type_second,
                    nested_resource_type_third=nested_resource_type_third,
                    api_version=api_version,
                    template_url=next_link,
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize("SkuResourceArrayResponseWithContinuation", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )
    list_by_resource_type_registrations_nested_resource_type_third.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/resourcetypeRegistrations/{nestedResourceTypeThird}/skus"}  # type: ignore
