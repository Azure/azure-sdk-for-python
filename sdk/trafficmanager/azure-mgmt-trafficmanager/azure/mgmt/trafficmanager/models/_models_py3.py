# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class CheckTrafficManagerRelativeDnsNameAvailabilityParameters(Model):
    """Parameters supplied to check Traffic Manager name operation.

    :param name: The name of the resource.
    :type name: str
    :param type: The type of the resource.
    :type type: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, *, name: str=None, type: str=None, **kwargs) -> None:
        super(CheckTrafficManagerRelativeDnsNameAvailabilityParameters, self).__init__(**kwargs)
        self.name = name
        self.type = type


class CloudError(Model):
    """An error returned by the Azure Resource Manager.

    :param error: The content of the error.
    :type error: ~azure.mgmt.trafficmanager.models.CloudErrorBody
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'CloudErrorBody'},
    }

    def __init__(self, *, error=None, **kwargs) -> None:
        super(CloudError, self).__init__(**kwargs)
        self.error = error


class CloudErrorException(HttpOperationError):
    """Server responsed with exception of type: 'CloudError'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(CloudErrorException, self).__init__(deserialize, response, 'CloudError', *args)


class CloudErrorBody(Model):
    """The content of an error returned by the Azure Resource Manager.

    :param code: Error code
    :type code: str
    :param message: Error message
    :type message: str
    :param target: Error target
    :type target: str
    :param details: Error details
    :type details: list[~azure.mgmt.trafficmanager.models.CloudErrorBody]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CloudErrorBody]'},
    }

    def __init__(self, *, code: str=None, message: str=None, target: str=None, details=None, **kwargs) -> None:
        super(CloudErrorBody, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details


class DeleteOperationResult(Model):
    """The result of the request or operation.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar operation_result: The result of the operation or request.
    :vartype operation_result: bool
    """

    _validation = {
        'operation_result': {'readonly': True},
    }

    _attribute_map = {
        'operation_result': {'key': 'boolean', 'type': 'bool'},
    }

    def __init__(self, **kwargs) -> None:
        super(DeleteOperationResult, self).__init__(**kwargs)
        self.operation_result = None


class DnsConfig(Model):
    """Class containing DNS settings in a Traffic Manager profile.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param relative_name: The relative DNS name provided by this Traffic
     Manager profile. This value is combined with the DNS domain name used by
     Azure Traffic Manager to form the fully-qualified domain name (FQDN) of
     the profile.
    :type relative_name: str
    :ivar fqdn: The fully-qualified domain name (FQDN) of the Traffic Manager
     profile. This is formed from the concatenation of the RelativeName with
     the DNS domain used by Azure Traffic Manager.
    :vartype fqdn: str
    :param ttl: The DNS Time-To-Live (TTL), in seconds. This informs the local
     DNS resolvers and DNS clients how long to cache DNS responses provided by
     this Traffic Manager profile.
    :type ttl: long
    """

    _validation = {
        'fqdn': {'readonly': True},
    }

    _attribute_map = {
        'relative_name': {'key': 'relativeName', 'type': 'str'},
        'fqdn': {'key': 'fqdn', 'type': 'str'},
        'ttl': {'key': 'ttl', 'type': 'long'},
    }

    def __init__(self, *, relative_name: str=None, ttl: int=None, **kwargs) -> None:
        super(DnsConfig, self).__init__(**kwargs)
        self.relative_name = relative_name
        self.fqdn = None
        self.ttl = ttl


class Resource(Model):
    """The core properties of ARM resources.

    :param id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}
    :type id: str
    :param name: The name of the resource
    :type name: str
    :param type: The type of the resource. Ex-
     Microsoft.Network/trafficManagerProfiles.
    :type type: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, *, id: str=None, name: str=None, type: str=None, **kwargs) -> None:
        super(Resource, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.type = type


class ProxyResource(Resource):
    """The resource model definition for a ARM proxy resource. It will have
    everything other than required location and tags.

    :param id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}
    :type id: str
    :param name: The name of the resource
    :type name: str
    :param type: The type of the resource. Ex-
     Microsoft.Network/trafficManagerProfiles.
    :type type: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, *, id: str=None, name: str=None, type: str=None, **kwargs) -> None:
        super(ProxyResource, self).__init__(id=id, name=name, type=type, **kwargs)


class Endpoint(ProxyResource):
    """Class representing a Traffic Manager endpoint.

    :param id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}
    :type id: str
    :param name: The name of the resource
    :type name: str
    :param type: The type of the resource. Ex-
     Microsoft.Network/trafficManagerProfiles.
    :type type: str
    :param target_resource_id: The Azure Resource URI of the of the endpoint.
     Not applicable to endpoints of type 'ExternalEndpoints'.
    :type target_resource_id: str
    :param target: The fully-qualified DNS name or IP address of the endpoint.
     Traffic Manager returns this value in DNS responses to direct traffic to
     this endpoint.
    :type target: str
    :param endpoint_status: The status of the endpoint. If the endpoint is
     Enabled, it is probed for endpoint health and is included in the traffic
     routing method. Possible values include: 'Enabled', 'Disabled'
    :type endpoint_status: str or
     ~azure.mgmt.trafficmanager.models.EndpointStatus
    :param weight: The weight of this endpoint when using the 'Weighted'
     traffic routing method. Possible values are from 1 to 1000.
    :type weight: long
    :param priority: The priority of this endpoint when using the 'Priority'
     traffic routing method. Possible values are from 1 to 1000, lower values
     represent higher priority. This is an optional parameter.  If specified,
     it must be specified on all endpoints, and no two endpoints can share the
     same priority value.
    :type priority: long
    :param endpoint_location: Specifies the location of the external or nested
     endpoints when using the 'Performance' traffic routing method.
    :type endpoint_location: str
    :param endpoint_monitor_status: The monitoring status of the endpoint.
     Possible values include: 'CheckingEndpoint', 'Online', 'Degraded',
     'Disabled', 'Inactive', 'Stopped'
    :type endpoint_monitor_status: str or
     ~azure.mgmt.trafficmanager.models.EndpointMonitorStatus
    :param min_child_endpoints: The minimum number of endpoints that must be
     available in the child profile in order for the parent profile to be
     considered available. Only applicable to endpoint of type
     'NestedEndpoints'.
    :type min_child_endpoints: long
    :param geo_mapping: The list of countries/regions mapped to this endpoint
     when using the 'Geographic' traffic routing method. Please consult Traffic
     Manager Geographic documentation for a full list of accepted values.
    :type geo_mapping: list[str]
    :param subnets: The list of subnets, IP addresses, and/or address ranges
     mapped to this endpoint when using the 'Subnet' traffic routing method. An
     empty list will match all ranges not covered by other endpoints.
    :type subnets:
     list[~azure.mgmt.trafficmanager.models.EndpointPropertiesSubnetsItem]
    :param custom_headers: List of custom headers.
    :type custom_headers:
     list[~azure.mgmt.trafficmanager.models.EndpointPropertiesCustomHeadersItem]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'target_resource_id': {'key': 'properties.targetResourceId', 'type': 'str'},
        'target': {'key': 'properties.target', 'type': 'str'},
        'endpoint_status': {'key': 'properties.endpointStatus', 'type': 'str'},
        'weight': {'key': 'properties.weight', 'type': 'long'},
        'priority': {'key': 'properties.priority', 'type': 'long'},
        'endpoint_location': {'key': 'properties.endpointLocation', 'type': 'str'},
        'endpoint_monitor_status': {'key': 'properties.endpointMonitorStatus', 'type': 'str'},
        'min_child_endpoints': {'key': 'properties.minChildEndpoints', 'type': 'long'},
        'geo_mapping': {'key': 'properties.geoMapping', 'type': '[str]'},
        'subnets': {'key': 'properties.subnets', 'type': '[EndpointPropertiesSubnetsItem]'},
        'custom_headers': {'key': 'properties.customHeaders', 'type': '[EndpointPropertiesCustomHeadersItem]'},
    }

    def __init__(self, *, id: str=None, name: str=None, type: str=None, target_resource_id: str=None, target: str=None, endpoint_status=None, weight: int=None, priority: int=None, endpoint_location: str=None, endpoint_monitor_status=None, min_child_endpoints: int=None, geo_mapping=None, subnets=None, custom_headers=None, **kwargs) -> None:
        super(Endpoint, self).__init__(id=id, name=name, type=type, **kwargs)
        self.target_resource_id = target_resource_id
        self.target = target
        self.endpoint_status = endpoint_status
        self.weight = weight
        self.priority = priority
        self.endpoint_location = endpoint_location
        self.endpoint_monitor_status = endpoint_monitor_status
        self.min_child_endpoints = min_child_endpoints
        self.geo_mapping = geo_mapping
        self.subnets = subnets
        self.custom_headers = custom_headers


class EndpointPropertiesCustomHeadersItem(Model):
    """Custom header name and value.

    :param name: Header name.
    :type name: str
    :param value: Header value.
    :type value: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(self, *, name: str=None, value: str=None, **kwargs) -> None:
        super(EndpointPropertiesCustomHeadersItem, self).__init__(**kwargs)
        self.name = name
        self.value = value


class EndpointPropertiesSubnetsItem(Model):
    """Subnet first address, scope, and/or last address.

    :param first: First address in the subnet.
    :type first: str
    :param last: Last address in the subnet.
    :type last: str
    :param scope: Block size (number of leading bits in the subnet mask).
    :type scope: int
    """

    _attribute_map = {
        'first': {'key': 'first', 'type': 'str'},
        'last': {'key': 'last', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'int'},
    }

    def __init__(self, *, first: str=None, last: str=None, scope: int=None, **kwargs) -> None:
        super(EndpointPropertiesSubnetsItem, self).__init__(**kwargs)
        self.first = first
        self.last = last
        self.scope = scope


class HeatMapEndpoint(Model):
    """Class which is a sparse representation of a Traffic Manager endpoint.

    :param resource_id: The ARM Resource ID of this Traffic Manager endpoint.
    :type resource_id: str
    :param endpoint_id: A number uniquely identifying this endpoint in query
     experiences.
    :type endpoint_id: int
    """

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'endpoint_id': {'key': 'endpointId', 'type': 'int'},
    }

    def __init__(self, *, resource_id: str=None, endpoint_id: int=None, **kwargs) -> None:
        super(HeatMapEndpoint, self).__init__(**kwargs)
        self.resource_id = resource_id
        self.endpoint_id = endpoint_id


class HeatMapModel(ProxyResource):
    """Class representing a Traffic Manager HeatMap.

    :param id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}
    :type id: str
    :param name: The name of the resource
    :type name: str
    :param type: The type of the resource. Ex-
     Microsoft.Network/trafficManagerProfiles.
    :type type: str
    :param start_time: The beginning of the time window for this HeatMap,
     inclusive.
    :type start_time: datetime
    :param end_time: The ending of the time window for this HeatMap,
     exclusive.
    :type end_time: datetime
    :param endpoints: The endpoints used in this HeatMap calculation.
    :type endpoints: list[~azure.mgmt.trafficmanager.models.HeatMapEndpoint]
    :param traffic_flows: The traffic flows produced in this HeatMap
     calculation.
    :type traffic_flows: list[~azure.mgmt.trafficmanager.models.TrafficFlow]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'start_time': {'key': 'properties.startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'properties.endTime', 'type': 'iso-8601'},
        'endpoints': {'key': 'properties.endpoints', 'type': '[HeatMapEndpoint]'},
        'traffic_flows': {'key': 'properties.trafficFlows', 'type': '[TrafficFlow]'},
    }

    def __init__(self, *, id: str=None, name: str=None, type: str=None, start_time=None, end_time=None, endpoints=None, traffic_flows=None, **kwargs) -> None:
        super(HeatMapModel, self).__init__(id=id, name=name, type=type, **kwargs)
        self.start_time = start_time
        self.end_time = end_time
        self.endpoints = endpoints
        self.traffic_flows = traffic_flows


class MonitorConfig(Model):
    """Class containing endpoint monitoring settings in a Traffic Manager profile.

    :param profile_monitor_status: The profile-level monitoring status of the
     Traffic Manager profile. Possible values include: 'CheckingEndpoints',
     'Online', 'Degraded', 'Disabled', 'Inactive'
    :type profile_monitor_status: str or
     ~azure.mgmt.trafficmanager.models.ProfileMonitorStatus
    :param protocol: The protocol (HTTP, HTTPS or TCP) used to probe for
     endpoint health. Possible values include: 'HTTP', 'HTTPS', 'TCP'
    :type protocol: str or ~azure.mgmt.trafficmanager.models.MonitorProtocol
    :param port: The TCP port used to probe for endpoint health.
    :type port: long
    :param path: The path relative to the endpoint domain name used to probe
     for endpoint health.
    :type path: str
    :param interval_in_seconds: The monitor interval for endpoints in this
     profile. This is the interval at which Traffic Manager will check the
     health of each endpoint in this profile.
    :type interval_in_seconds: long
    :param timeout_in_seconds: The monitor timeout for endpoints in this
     profile. This is the time that Traffic Manager allows endpoints in this
     profile to response to the health check.
    :type timeout_in_seconds: long
    :param tolerated_number_of_failures: The number of consecutive failed
     health check that Traffic Manager tolerates before declaring an endpoint
     in this profile Degraded after the next failed health check.
    :type tolerated_number_of_failures: long
    :param custom_headers: List of custom headers.
    :type custom_headers:
     list[~azure.mgmt.trafficmanager.models.MonitorConfigCustomHeadersItem]
    :param expected_status_code_ranges: List of expected status code ranges.
    :type expected_status_code_ranges:
     list[~azure.mgmt.trafficmanager.models.MonitorConfigExpectedStatusCodeRangesItem]
    """

    _attribute_map = {
        'profile_monitor_status': {'key': 'profileMonitorStatus', 'type': 'str'},
        'protocol': {'key': 'protocol', 'type': 'str'},
        'port': {'key': 'port', 'type': 'long'},
        'path': {'key': 'path', 'type': 'str'},
        'interval_in_seconds': {'key': 'intervalInSeconds', 'type': 'long'},
        'timeout_in_seconds': {'key': 'timeoutInSeconds', 'type': 'long'},
        'tolerated_number_of_failures': {'key': 'toleratedNumberOfFailures', 'type': 'long'},
        'custom_headers': {'key': 'customHeaders', 'type': '[MonitorConfigCustomHeadersItem]'},
        'expected_status_code_ranges': {'key': 'expectedStatusCodeRanges', 'type': '[MonitorConfigExpectedStatusCodeRangesItem]'},
    }

    def __init__(self, *, profile_monitor_status=None, protocol=None, port: int=None, path: str=None, interval_in_seconds: int=None, timeout_in_seconds: int=None, tolerated_number_of_failures: int=None, custom_headers=None, expected_status_code_ranges=None, **kwargs) -> None:
        super(MonitorConfig, self).__init__(**kwargs)
        self.profile_monitor_status = profile_monitor_status
        self.protocol = protocol
        self.port = port
        self.path = path
        self.interval_in_seconds = interval_in_seconds
        self.timeout_in_seconds = timeout_in_seconds
        self.tolerated_number_of_failures = tolerated_number_of_failures
        self.custom_headers = custom_headers
        self.expected_status_code_ranges = expected_status_code_ranges


class MonitorConfigCustomHeadersItem(Model):
    """Custom header name and value.

    :param name: Header name.
    :type name: str
    :param value: Header value.
    :type value: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(self, *, name: str=None, value: str=None, **kwargs) -> None:
        super(MonitorConfigCustomHeadersItem, self).__init__(**kwargs)
        self.name = name
        self.value = value


class MonitorConfigExpectedStatusCodeRangesItem(Model):
    """Min and max value of a status code range.

    :param min: Min status code.
    :type min: int
    :param max: Max status code.
    :type max: int
    """

    _attribute_map = {
        'min': {'key': 'min', 'type': 'int'},
        'max': {'key': 'max', 'type': 'int'},
    }

    def __init__(self, *, min: int=None, max: int=None, **kwargs) -> None:
        super(MonitorConfigExpectedStatusCodeRangesItem, self).__init__(**kwargs)
        self.min = min
        self.max = max


class TrackedResource(Resource):
    """The resource model definition for a ARM tracked top level resource.

    :param id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}
    :type id: str
    :param name: The name of the resource
    :type name: str
    :param type: The type of the resource. Ex-
     Microsoft.Network/trafficManagerProfiles.
    :type type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param location: The Azure Region where the resource lives
    :type location: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(self, *, id: str=None, name: str=None, type: str=None, tags=None, location: str=None, **kwargs) -> None:
        super(TrackedResource, self).__init__(id=id, name=name, type=type, **kwargs)
        self.tags = tags
        self.location = location


class Profile(TrackedResource):
    """Class representing a Traffic Manager profile.

    :param id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}
    :type id: str
    :param name: The name of the resource
    :type name: str
    :param type: The type of the resource. Ex-
     Microsoft.Network/trafficManagerProfiles.
    :type type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param location: The Azure Region where the resource lives
    :type location: str
    :param profile_status: The status of the Traffic Manager profile. Possible
     values include: 'Enabled', 'Disabled'
    :type profile_status: str or
     ~azure.mgmt.trafficmanager.models.ProfileStatus
    :param traffic_routing_method: The traffic routing method of the Traffic
     Manager profile. Possible values include: 'Performance', 'Priority',
     'Weighted', 'Geographic', 'MultiValue', 'Subnet'
    :type traffic_routing_method: str or
     ~azure.mgmt.trafficmanager.models.TrafficRoutingMethod
    :param dns_config: The DNS settings of the Traffic Manager profile.
    :type dns_config: ~azure.mgmt.trafficmanager.models.DnsConfig
    :param monitor_config: The endpoint monitoring settings of the Traffic
     Manager profile.
    :type monitor_config: ~azure.mgmt.trafficmanager.models.MonitorConfig
    :param endpoints: The list of endpoints in the Traffic Manager profile.
    :type endpoints: list[~azure.mgmt.trafficmanager.models.Endpoint]
    :param traffic_view_enrollment_status: Indicates whether Traffic View is
     'Enabled' or 'Disabled' for the Traffic Manager profile. Null, indicates
     'Disabled'. Enabling this feature will increase the cost of the Traffic
     Manage profile. Possible values include: 'Enabled', 'Disabled'
    :type traffic_view_enrollment_status: str or
     ~azure.mgmt.trafficmanager.models.TrafficViewEnrollmentStatus
    :param max_return: Maximum number of endpoints to be returned for
     MultiValue routing type.
    :type max_return: long
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'profile_status': {'key': 'properties.profileStatus', 'type': 'str'},
        'traffic_routing_method': {'key': 'properties.trafficRoutingMethod', 'type': 'str'},
        'dns_config': {'key': 'properties.dnsConfig', 'type': 'DnsConfig'},
        'monitor_config': {'key': 'properties.monitorConfig', 'type': 'MonitorConfig'},
        'endpoints': {'key': 'properties.endpoints', 'type': '[Endpoint]'},
        'traffic_view_enrollment_status': {'key': 'properties.trafficViewEnrollmentStatus', 'type': 'str'},
        'max_return': {'key': 'properties.maxReturn', 'type': 'long'},
    }

    def __init__(self, *, id: str=None, name: str=None, type: str=None, tags=None, location: str=None, profile_status=None, traffic_routing_method=None, dns_config=None, monitor_config=None, endpoints=None, traffic_view_enrollment_status=None, max_return: int=None, **kwargs) -> None:
        super(Profile, self).__init__(id=id, name=name, type=type, tags=tags, location=location, **kwargs)
        self.profile_status = profile_status
        self.traffic_routing_method = traffic_routing_method
        self.dns_config = dns_config
        self.monitor_config = monitor_config
        self.endpoints = endpoints
        self.traffic_view_enrollment_status = traffic_view_enrollment_status
        self.max_return = max_return


class QueryExperience(Model):
    """Class representing a Traffic Manager HeatMap query experience properties.

    All required parameters must be populated in order to send to Azure.

    :param endpoint_id: Required. The id of the endpoint from the 'endpoints'
     array which these queries were routed to.
    :type endpoint_id: int
    :param query_count: Required. The number of queries originating from this
     location.
    :type query_count: int
    :param latency: The latency experienced by queries originating from this
     location.
    :type latency: float
    """

    _validation = {
        'endpoint_id': {'required': True},
        'query_count': {'required': True},
    }

    _attribute_map = {
        'endpoint_id': {'key': 'endpointId', 'type': 'int'},
        'query_count': {'key': 'queryCount', 'type': 'int'},
        'latency': {'key': 'latency', 'type': 'float'},
    }

    def __init__(self, *, endpoint_id: int, query_count: int, latency: float=None, **kwargs) -> None:
        super(QueryExperience, self).__init__(**kwargs)
        self.endpoint_id = endpoint_id
        self.query_count = query_count
        self.latency = latency


class Region(Model):
    """Class representing a region in the Geographic hierarchy used with the
    Geographic traffic routing method.

    :param code: The code of the region
    :type code: str
    :param name: The name of the region
    :type name: str
    :param regions: The list of Regions grouped under this Region in the
     Geographic Hierarchy.
    :type regions: list[~azure.mgmt.trafficmanager.models.Region]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'regions': {'key': 'regions', 'type': '[Region]'},
    }

    def __init__(self, *, code: str=None, name: str=None, regions=None, **kwargs) -> None:
        super(Region, self).__init__(**kwargs)
        self.code = code
        self.name = name
        self.regions = regions


class TrafficFlow(Model):
    """Class representing a Traffic Manager HeatMap traffic flow properties.

    :param source_ip: The IP address that this query experience originated
     from.
    :type source_ip: str
    :param latitude: The approximate latitude that these queries originated
     from.
    :type latitude: float
    :param longitude: The approximate longitude that these queries originated
     from.
    :type longitude: float
    :param query_experiences: The query experiences produced in this HeatMap
     calculation.
    :type query_experiences:
     list[~azure.mgmt.trafficmanager.models.QueryExperience]
    """

    _attribute_map = {
        'source_ip': {'key': 'sourceIp', 'type': 'str'},
        'latitude': {'key': 'latitude', 'type': 'float'},
        'longitude': {'key': 'longitude', 'type': 'float'},
        'query_experiences': {'key': 'queryExperiences', 'type': '[QueryExperience]'},
    }

    def __init__(self, *, source_ip: str=None, latitude: float=None, longitude: float=None, query_experiences=None, **kwargs) -> None:
        super(TrafficFlow, self).__init__(**kwargs)
        self.source_ip = source_ip
        self.latitude = latitude
        self.longitude = longitude
        self.query_experiences = query_experiences


class TrafficManagerGeographicHierarchy(ProxyResource):
    """Class representing the Geographic hierarchy used with the Geographic
    traffic routing method.

    :param id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}
    :type id: str
    :param name: The name of the resource
    :type name: str
    :param type: The type of the resource. Ex-
     Microsoft.Network/trafficManagerProfiles.
    :type type: str
    :param geographic_hierarchy: The region at the root of the hierarchy from
     all the regions in the hierarchy can be retrieved.
    :type geographic_hierarchy: ~azure.mgmt.trafficmanager.models.Region
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'geographic_hierarchy': {'key': 'properties.geographicHierarchy', 'type': 'Region'},
    }

    def __init__(self, *, id: str=None, name: str=None, type: str=None, geographic_hierarchy=None, **kwargs) -> None:
        super(TrafficManagerGeographicHierarchy, self).__init__(id=id, name=name, type=type, **kwargs)
        self.geographic_hierarchy = geographic_hierarchy


class TrafficManagerNameAvailability(Model):
    """Class representing a Traffic Manager Name Availability response.

    :param name: The relative name.
    :type name: str
    :param type: Traffic Manager profile resource type.
    :type type: str
    :param name_available: Describes whether the relative name is available or
     not.
    :type name_available: bool
    :param reason: The reason why the name is not available, when applicable.
    :type reason: str
    :param message: Descriptive message that explains why the name is not
     available, when applicable.
    :type message: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name_available': {'key': 'nameAvailable', 'type': 'bool'},
        'reason': {'key': 'reason', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, *, name: str=None, type: str=None, name_available: bool=None, reason: str=None, message: str=None, **kwargs) -> None:
        super(TrafficManagerNameAvailability, self).__init__(**kwargs)
        self.name = name
        self.type = type
        self.name_available = name_available
        self.reason = reason
        self.message = message


class UserMetricsModel(ProxyResource):
    """Class representing Traffic Manager User Metrics.

    :param id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{resourceName}
    :type id: str
    :param name: The name of the resource
    :type name: str
    :param type: The type of the resource. Ex-
     Microsoft.Network/trafficManagerProfiles.
    :type type: str
    :param key: The key returned by the User Metrics operation.
    :type key: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'key': {'key': 'properties.key', 'type': 'str'},
    }

    def __init__(self, *, id: str=None, name: str=None, type: str=None, key: str=None, **kwargs) -> None:
        super(UserMetricsModel, self).__init__(id=id, name=name, type=type, **kwargs)
        self.key = key
