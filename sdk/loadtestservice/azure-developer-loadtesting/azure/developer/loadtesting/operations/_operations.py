# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
import sys
from typing import Any, Callable, Dict, IO, Iterable, Optional, TypeVar, Union, cast, overload
import urllib.parse

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .._serialization import Serializer
from .._vendor import _format_url_section, raise_if_not_implemented

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_load_test_administration_create_or_update_load_test_request(test_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-11-01"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/tests/{testId}"
    path_format_arguments = {
        "testId": _SERIALIZER.url("test_id", test_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_load_test_administration_delete_load_test_request(test_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-11-01"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/tests/{testId}"
    path_format_arguments = {
        "testId": _SERIALIZER.url("test_id", test_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_load_test_administration_get_load_test_request(test_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-11-01"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/tests/{testId}"
    path_format_arguments = {
        "testId": _SERIALIZER.url("test_id", test_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_load_test_administration_list_load_tests_request(
    *,
    orderby: Optional[str] = None,
    search: Optional[str] = None,
    last_modified_start_time: Optional[datetime.datetime] = None,
    last_modified_end_time: Optional[datetime.datetime] = None,
    continuation_token_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-11-01"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/tests"

    # Construct parameters
    if orderby is not None:
        _params["orderby"] = _SERIALIZER.query("orderby", orderby, "str")
    if search is not None:
        _params["search"] = _SERIALIZER.query("search", search, "str")
    if last_modified_start_time is not None:
        _params["lastModifiedStartTime"] = _SERIALIZER.query(
            "last_modified_start_time", last_modified_start_time, "iso-8601"
        )
    if last_modified_end_time is not None:
        _params["lastModifiedEndTime"] = _SERIALIZER.query("last_modified_end_time", last_modified_end_time, "iso-8601")
    if continuation_token_parameter is not None:
        _params["continuationToken"] = _SERIALIZER.query(
            "continuation_token_parameter", continuation_token_parameter, "str"
        )
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_load_test_administration_get_test_file_request(test_id: str, file_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-11-01"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/tests/{testId}/files/{fileId}"
    path_format_arguments = {
        "testId": _SERIALIZER.url("test_id", test_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"),
        "fileId": _SERIALIZER.url("file_id", file_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_load_test_administration_delete_test_file_request(test_id: str, file_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-11-01"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/tests/{testId}/files/{fileId}"
    path_format_arguments = {
        "testId": _SERIALIZER.url("test_id", test_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"),
        "fileId": _SERIALIZER.url("file_id", file_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_load_test_administration_list_test_files_request(
    test_id: str, *, continuation_token_parameter: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-11-01"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/tests/{testId}/files"
    path_format_arguments = {
        "testId": _SERIALIZER.url("test_id", test_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if continuation_token_parameter is not None:
        _params["continuationToken"] = _SERIALIZER.query(
            "continuation_token_parameter", continuation_token_parameter, "str"
        )
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_load_test_administration_create_or_update_app_component_request(test_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-11-01"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/tests/{testId}/app-components"
    path_format_arguments = {
        "testId": _SERIALIZER.url("test_id", test_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_load_test_administration_get_app_components_request(test_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-11-01"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/tests/{testId}/app-components"
    path_format_arguments = {
        "testId": _SERIALIZER.url("test_id", test_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_load_test_administration_create_or_update_server_metrics_config_request(
    test_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-11-01"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/tests/{testId}/server-metric-configs"
    path_format_arguments = {
        "testId": _SERIALIZER.url("test_id", test_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_load_test_administration_get_server_metrics_config_request(test_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-11-01"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/tests/{testId}/server-metric-configs"
    path_format_arguments = {
        "testId": _SERIALIZER.url("test_id", test_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_load_test_run_delete_test_run_request(test_run_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-11-01"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/test-runs/{testRunId}"
    path_format_arguments = {
        "testRunId": _SERIALIZER.url(
            "test_run_id", test_run_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"
        ),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_load_test_run_create_or_update_test_run_request(
    test_run_id: str, *, old_test_run_id: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-11-01"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/test-runs/{testRunId}"
    path_format_arguments = {
        "testRunId": _SERIALIZER.url(
            "test_run_id", test_run_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"
        ),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if old_test_run_id is not None:
        _params["oldTestRunId"] = _SERIALIZER.query("old_test_run_id", old_test_run_id, "str")
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_load_test_run_get_test_run_request(test_run_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-11-01"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/test-runs/{testRunId}"
    path_format_arguments = {
        "testRunId": _SERIALIZER.url(
            "test_run_id", test_run_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"
        ),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_load_test_run_get_test_run_file_request(test_run_id: str, file_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-11-01"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/test-runs/{testRunId}/files/{fileId}"
    path_format_arguments = {
        "testRunId": _SERIALIZER.url(
            "test_run_id", test_run_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"
        ),
        "fileId": _SERIALIZER.url("file_id", file_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_load_test_run_list_test_runs_request(
    *,
    orderby: Optional[str] = None,
    continuation_token_parameter: Optional[str] = None,
    search: Optional[str] = None,
    test_id: Optional[str] = None,
    execution_from: Optional[datetime.datetime] = None,
    execution_to: Optional[datetime.datetime] = None,
    status: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-11-01"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/test-runs"

    # Construct parameters
    if orderby is not None:
        _params["orderby"] = _SERIALIZER.query("orderby", orderby, "str")
    if continuation_token_parameter is not None:
        _params["continuationToken"] = _SERIALIZER.query(
            "continuation_token_parameter", continuation_token_parameter, "str"
        )
    if search is not None:
        _params["search"] = _SERIALIZER.query("search", search, "str")
    if test_id is not None:
        _params["testId"] = _SERIALIZER.query("test_id", test_id, "str")
    if execution_from is not None:
        _params["executionFrom"] = _SERIALIZER.query("execution_from", execution_from, "iso-8601")
    if execution_to is not None:
        _params["executionTo"] = _SERIALIZER.query("execution_to", execution_to, "iso-8601")
    if status is not None:
        _params["status"] = _SERIALIZER.query("status", status, "str")
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_load_test_run_stop_test_run_request(test_run_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-11-01"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/test-runs/{testRunId}:stop"
    path_format_arguments = {
        "testRunId": _SERIALIZER.url(
            "test_run_id", test_run_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"
        ),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_load_test_run_list_metric_namespaces_request(test_run_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-11-01"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/test-runs/{testRunId}/metric-namespaces"
    path_format_arguments = {
        "testRunId": _SERIALIZER.url(
            "test_run_id", test_run_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"
        ),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_load_test_run_list_metric_definitions_request(
    test_run_id: str, *, metric_namespace: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-11-01"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/test-runs/{testRunId}/metric-definitions"
    path_format_arguments = {
        "testRunId": _SERIALIZER.url(
            "test_run_id", test_run_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"
        ),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["metricNamespace"] = _SERIALIZER.query("metric_namespace", metric_namespace, "str")
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_load_test_run_get_metrics_request(
    test_run_id: str,
    *,
    metricname: str,
    metric_namespace: str,
    result_type: str,
    timespan: str,
    aggregation: Optional[str] = None,
    interval: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-11-01"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/test-runs/{testRunId}/metrics"
    path_format_arguments = {
        "testRunId": _SERIALIZER.url(
            "test_run_id", test_run_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"
        ),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if aggregation is not None:
        _params["aggregation"] = _SERIALIZER.query("aggregation", aggregation, "str")
    if interval is not None:
        _params["interval"] = _SERIALIZER.query("interval", interval, "str")
    _params["metricname"] = _SERIALIZER.query("metricname", metricname, "str")
    _params["metricNamespace"] = _SERIALIZER.query("metric_namespace", metric_namespace, "str")
    _params["resultType"] = _SERIALIZER.query("result_type", result_type, "str")
    _params["timespan"] = _SERIALIZER.query("timespan", timespan, "str")
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_load_test_run_create_or_update_app_component_request(test_run_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-11-01"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/test-runs/{testRunId}/app-components"
    path_format_arguments = {
        "testRunId": _SERIALIZER.url(
            "test_run_id", test_run_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"
        ),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_load_test_run_get_app_components_request(test_run_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-11-01"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/test-runs/{testRunId}/app-components"
    path_format_arguments = {
        "testRunId": _SERIALIZER.url(
            "test_run_id", test_run_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"
        ),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_load_test_run_create_or_update_server_metrics_config_request(test_run_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-11-01"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/test-runs/{testRunId}/server-metric-configs"
    path_format_arguments = {
        "testRunId": _SERIALIZER.url(
            "test_run_id", test_run_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"
        ),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_load_test_run_get_server_metrics_config_request(test_run_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version = kwargs.pop("api_version", _params.pop("api-version", "2022-11-01"))  # type: str
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/test-runs/{testRunId}/server-metric-configs"
    path_format_arguments = {
        "testRunId": _SERIALIZER.url(
            "test_run_id", test_run_id, "str", max_length=50, min_length=2, pattern=r"^[a-z0-9_-]*$"
        ),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


class LoadTestAdministrationOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.developer.loadtesting.LoadTestingClient`'s
        :attr:`load_test_administration` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")
        raise_if_not_implemented(
            self.__class__,
            [
                "upload_test_file",
            ],
        )

    @overload
    def create_or_update_load_test(
        self, test_id: str, body: JSON, *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> JSON:
        """Create a new test or update an existing test.

        Create a new test or update an existing test.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param body: Load test model. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "description": "str",  # Optional. The test description.
                    "displayName": "str",  # Optional. Display name of a test.
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "inputArtifacts": {
                        "additionalFileInfo": [
                            {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        ],
                        "configFileInfo": {
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (ISO 8601 literal format).
                            "fileId": "str",  # Optional. Unique name for test file.
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                            "filename": "str",  # Optional. Name of the file.
                            "url": "str",  # Optional. File URL.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "inputArtifactsZipFileInfo": {
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (ISO 8601 literal format).
                            "fileId": "str",  # Optional. Unique name for test file.
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                            "filename": "str",  # Optional. Name of the file.
                            "url": "str",  # Optional. File URL.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "testScriptFileInfo": {
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (ISO 8601 literal format).
                            "fileId": "str",  # Optional. Unique name for test file.
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                            "filename": "str",  # Optional. Name of the file.
                            "url": "str",  # Optional. File URL.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "userPropFileInfo": {
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (ISO 8601 literal format).
                            "fileId": "str",  # Optional. Unique name for test file.
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                            "filename": "str",  # Optional. Name of the file.
                            "url": "str",  # Optional. File URL.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        }
                    },
                    "keyvaultReferenceIdentityId": "str",  # Optional. Resource Id of the managed
                      identity referencing the Key vault.
                    "keyvaultReferenceIdentityType": "str",  # Optional. Type of the managed
                      identity referencing the Key vault.
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-45. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              http://contoso-app.azurewebsites.net/login.
                            "rampUpTime": 0,  # Optional. Ramp up time.
                            "vusers": 0  # Optional. No of concurrent virtual users.
                        },
                        "quickStartTest": False,  # Optional. Default value is False. If
                          true, optionalLoadTestConfig is required and JMX script for the load test is
                          not required to upload.
                        "splitAllCSVs": False  # Optional. Default value is False. If false,
                          Azure Load Testing copies and processes your input files unmodified across
                          all test engine instances. If true, Azure Load Testing splits the CSV input
                          data evenly across all engine instances. If you provide multiple CSV files,
                          each file will be split evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "stop" and "continue".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions -
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  "u2018p50"u2019, "u2018p90"u2019, "u2018p95"u2019, "u2018p99"u2019,
                                  "u2018min"u2019, "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec, "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p90", "p95", "p99", "min", and "max".
                                "clientmetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "subnetId": "str",  # Optional. Subnet ID on which the load test instances
                      should run.
                    "testId": "str"  # Optional. Unique test name as identifier.
                }

                # response body for status code(s): 200, 201
                response == {
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "description": "str",  # Optional. The test description.
                    "displayName": "str",  # Optional. Display name of a test.
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "inputArtifacts": {
                        "additionalFileInfo": [
                            {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        ],
                        "configFileInfo": {
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (ISO 8601 literal format).
                            "fileId": "str",  # Optional. Unique name for test file.
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                            "filename": "str",  # Optional. Name of the file.
                            "url": "str",  # Optional. File URL.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "inputArtifactsZipFileInfo": {
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (ISO 8601 literal format).
                            "fileId": "str",  # Optional. Unique name for test file.
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                            "filename": "str",  # Optional. Name of the file.
                            "url": "str",  # Optional. File URL.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "testScriptFileInfo": {
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (ISO 8601 literal format).
                            "fileId": "str",  # Optional. Unique name for test file.
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                            "filename": "str",  # Optional. Name of the file.
                            "url": "str",  # Optional. File URL.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "userPropFileInfo": {
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (ISO 8601 literal format).
                            "fileId": "str",  # Optional. Unique name for test file.
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                            "filename": "str",  # Optional. Name of the file.
                            "url": "str",  # Optional. File URL.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        }
                    },
                    "keyvaultReferenceIdentityId": "str",  # Optional. Resource Id of the managed
                      identity referencing the Key vault.
                    "keyvaultReferenceIdentityType": "str",  # Optional. Type of the managed
                      identity referencing the Key vault.
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-45. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              http://contoso-app.azurewebsites.net/login.
                            "rampUpTime": 0,  # Optional. Ramp up time.
                            "vusers": 0  # Optional. No of concurrent virtual users.
                        },
                        "quickStartTest": False,  # Optional. Default value is False. If
                          true, optionalLoadTestConfig is required and JMX script for the load test is
                          not required to upload.
                        "splitAllCSVs": False  # Optional. Default value is False. If false,
                          Azure Load Testing copies and processes your input files unmodified across
                          all test engine instances. If true, Azure Load Testing splits the CSV input
                          data evenly across all engine instances. If you provide multiple CSV files,
                          each file will be split evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "stop" and "continue".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions -
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  "u2018p50"u2019, "u2018p90"u2019, "u2018p95"u2019, "u2018p99"u2019,
                                  "u2018min"u2019, "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec, "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p90", "p95", "p99", "min", and "max".
                                "clientmetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "subnetId": "str",  # Optional. Subnet ID on which the load test instances
                      should run.
                    "testId": "str"  # Optional. Unique test name as identifier.
                }
        """

    @overload
    def create_or_update_load_test(
        self, test_id: str, body: IO, *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> JSON:
        """Create a new test or update an existing test.

        Create a new test or update an existing test.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param body: Load test model. Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "description": "str",  # Optional. The test description.
                    "displayName": "str",  # Optional. Display name of a test.
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "inputArtifacts": {
                        "additionalFileInfo": [
                            {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        ],
                        "configFileInfo": {
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (ISO 8601 literal format).
                            "fileId": "str",  # Optional. Unique name for test file.
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                            "filename": "str",  # Optional. Name of the file.
                            "url": "str",  # Optional. File URL.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "inputArtifactsZipFileInfo": {
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (ISO 8601 literal format).
                            "fileId": "str",  # Optional. Unique name for test file.
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                            "filename": "str",  # Optional. Name of the file.
                            "url": "str",  # Optional. File URL.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "testScriptFileInfo": {
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (ISO 8601 literal format).
                            "fileId": "str",  # Optional. Unique name for test file.
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                            "filename": "str",  # Optional. Name of the file.
                            "url": "str",  # Optional. File URL.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "userPropFileInfo": {
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (ISO 8601 literal format).
                            "fileId": "str",  # Optional. Unique name for test file.
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                            "filename": "str",  # Optional. Name of the file.
                            "url": "str",  # Optional. File URL.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        }
                    },
                    "keyvaultReferenceIdentityId": "str",  # Optional. Resource Id of the managed
                      identity referencing the Key vault.
                    "keyvaultReferenceIdentityType": "str",  # Optional. Type of the managed
                      identity referencing the Key vault.
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-45. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              http://contoso-app.azurewebsites.net/login.
                            "rampUpTime": 0,  # Optional. Ramp up time.
                            "vusers": 0  # Optional. No of concurrent virtual users.
                        },
                        "quickStartTest": False,  # Optional. Default value is False. If
                          true, optionalLoadTestConfig is required and JMX script for the load test is
                          not required to upload.
                        "splitAllCSVs": False  # Optional. Default value is False. If false,
                          Azure Load Testing copies and processes your input files unmodified across
                          all test engine instances. If true, Azure Load Testing splits the CSV input
                          data evenly across all engine instances. If you provide multiple CSV files,
                          each file will be split evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "stop" and "continue".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions -
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  "u2018p50"u2019, "u2018p90"u2019, "u2018p95"u2019, "u2018p99"u2019,
                                  "u2018min"u2019, "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec, "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p90", "p95", "p99", "min", and "max".
                                "clientmetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "subnetId": "str",  # Optional. Subnet ID on which the load test instances
                      should run.
                    "testId": "str"  # Optional. Unique test name as identifier.
                }
        """

    @distributed_trace
    def create_or_update_load_test(self, test_id: str, body: Union[JSON, IO], **kwargs: Any) -> JSON:
        """Create a new test or update an existing test.

        Create a new test or update an existing test.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param body: Load test model. Is either a model type or a IO type. Required.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are:
         'application/merge-patch+json'. Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "description": "str",  # Optional. The test description.
                    "displayName": "str",  # Optional. Display name of a test.
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "inputArtifacts": {
                        "additionalFileInfo": [
                            {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        ],
                        "configFileInfo": {
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (ISO 8601 literal format).
                            "fileId": "str",  # Optional. Unique name for test file.
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                            "filename": "str",  # Optional. Name of the file.
                            "url": "str",  # Optional. File URL.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "inputArtifactsZipFileInfo": {
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (ISO 8601 literal format).
                            "fileId": "str",  # Optional. Unique name for test file.
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                            "filename": "str",  # Optional. Name of the file.
                            "url": "str",  # Optional. File URL.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "testScriptFileInfo": {
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (ISO 8601 literal format).
                            "fileId": "str",  # Optional. Unique name for test file.
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                            "filename": "str",  # Optional. Name of the file.
                            "url": "str",  # Optional. File URL.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "userPropFileInfo": {
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (ISO 8601 literal format).
                            "fileId": "str",  # Optional. Unique name for test file.
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                            "filename": "str",  # Optional. Name of the file.
                            "url": "str",  # Optional. File URL.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        }
                    },
                    "keyvaultReferenceIdentityId": "str",  # Optional. Resource Id of the managed
                      identity referencing the Key vault.
                    "keyvaultReferenceIdentityType": "str",  # Optional. Type of the managed
                      identity referencing the Key vault.
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-45. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              http://contoso-app.azurewebsites.net/login.
                            "rampUpTime": 0,  # Optional. Ramp up time.
                            "vusers": 0  # Optional. No of concurrent virtual users.
                        },
                        "quickStartTest": False,  # Optional. Default value is False. If
                          true, optionalLoadTestConfig is required and JMX script for the load test is
                          not required to upload.
                        "splitAllCSVs": False  # Optional. Default value is False. If false,
                          Azure Load Testing copies and processes your input files unmodified across
                          all test engine instances. If true, Azure Load Testing splits the CSV input
                          data evenly across all engine instances. If you provide multiple CSV files,
                          each file will be split evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "stop" and "continue".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions -
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  "u2018p50"u2019, "u2018p90"u2019, "u2018p95"u2019, "u2018p99"u2019,
                                  "u2018min"u2019, "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec, "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p90", "p95", "p99", "min", and "max".
                                "clientmetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "subnetId": "str",  # Optional. Subnet ID on which the load test instances
                      should run.
                    "testId": "str"  # Optional. Unique test name as identifier.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/merge-patch+json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = body

        request = build_load_test_administration_create_or_update_load_test_request(
            test_id=test_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def delete_load_test(self, test_id: str, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Delete a test by its name.

        Delete a test by its name.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_load_test_administration_delete_load_test_request(
            test_id=test_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def get_load_test(self, test_id: str, **kwargs: Any) -> JSON:
        """Get load test details by test name.

        Get load test details by test name.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "description": "str",  # Optional. The test description.
                    "displayName": "str",  # Optional. Display name of a test.
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "inputArtifacts": {
                        "additionalFileInfo": [
                            {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        ],
                        "configFileInfo": {
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (ISO 8601 literal format).
                            "fileId": "str",  # Optional. Unique name for test file.
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                            "filename": "str",  # Optional. Name of the file.
                            "url": "str",  # Optional. File URL.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "inputArtifactsZipFileInfo": {
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (ISO 8601 literal format).
                            "fileId": "str",  # Optional. Unique name for test file.
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                            "filename": "str",  # Optional. Name of the file.
                            "url": "str",  # Optional. File URL.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "testScriptFileInfo": {
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (ISO 8601 literal format).
                            "fileId": "str",  # Optional. Unique name for test file.
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                            "filename": "str",  # Optional. Name of the file.
                            "url": "str",  # Optional. File URL.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "userPropFileInfo": {
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (ISO 8601 literal format).
                            "fileId": "str",  # Optional. Unique name for test file.
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                            "filename": "str",  # Optional. Name of the file.
                            "url": "str",  # Optional. File URL.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        }
                    },
                    "keyvaultReferenceIdentityId": "str",  # Optional. Resource Id of the managed
                      identity referencing the Key vault.
                    "keyvaultReferenceIdentityType": "str",  # Optional. Type of the managed
                      identity referencing the Key vault.
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-45. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              http://contoso-app.azurewebsites.net/login.
                            "rampUpTime": 0,  # Optional. Ramp up time.
                            "vusers": 0  # Optional. No of concurrent virtual users.
                        },
                        "quickStartTest": False,  # Optional. Default value is False. If
                          true, optionalLoadTestConfig is required and JMX script for the load test is
                          not required to upload.
                        "splitAllCSVs": False  # Optional. Default value is False. If false,
                          Azure Load Testing copies and processes your input files unmodified across
                          all test engine instances. If true, Azure Load Testing splits the CSV input
                          data evenly across all engine instances. If you provide multiple CSV files,
                          each file will be split evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "stop" and "continue".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions -
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  "u2018p50"u2019, "u2018p90"u2019, "u2018p95"u2019, "u2018p99"u2019,
                                  "u2018min"u2019, "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec, "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p90", "p95", "p99", "min", and "max".
                                "clientmetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "subnetId": "str",  # Optional. Subnet ID on which the load test instances
                      should run.
                    "testId": "str"  # Optional. Unique test name as identifier.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_load_test_administration_get_load_test_request(
            test_id=test_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def list_load_tests(
        self,
        *,
        orderby: Optional[str] = None,
        search: Optional[str] = None,
        last_modified_start_time: Optional[datetime.datetime] = None,
        last_modified_end_time: Optional[datetime.datetime] = None,
        continuation_token_parameter: Optional[str] = None,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """Get all load tests by the fully qualified resource Id e.g
        subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.

        Get all load tests by the fully qualified resource Id e.g
        subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.

        :keyword orderby: Sort on one of the field - lastModifiedDateTime, displayName, createdBy in
         (field asc/desc) format. eg: displayName asc. Default value is None.
        :paramtype orderby: str
        :keyword search: Filter search based on searchable fields - testId, createdBy. Default value is
         None.
        :paramtype search: str
        :keyword last_modified_start_time: Start DateTime(ISO 8601 literal format) of the last updated
         time range to filter tests. Default value is None.
        :paramtype last_modified_start_time: ~datetime.datetime
        :keyword last_modified_end_time: End DateTime(ISO 8601 literal format) of the last updated time
         range to filter tests. Default value is None.
        :paramtype last_modified_end_time: ~datetime.datetime
        :keyword continuation_token_parameter: Continuation token to get the next page of response.
         Default value is None.
        :paramtype continuation_token_parameter: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "description": "str",  # Optional. The test description.
                    "displayName": "str",  # Optional. Display name of a test.
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "inputArtifacts": {
                        "additionalFileInfo": [
                            {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        ],
                        "configFileInfo": {
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (ISO 8601 literal format).
                            "fileId": "str",  # Optional. Unique name for test file.
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                            "filename": "str",  # Optional. Name of the file.
                            "url": "str",  # Optional. File URL.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "inputArtifactsZipFileInfo": {
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (ISO 8601 literal format).
                            "fileId": "str",  # Optional. Unique name for test file.
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                            "filename": "str",  # Optional. Name of the file.
                            "url": "str",  # Optional. File URL.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "testScriptFileInfo": {
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (ISO 8601 literal format).
                            "fileId": "str",  # Optional. Unique name for test file.
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                            "filename": "str",  # Optional. Name of the file.
                            "url": "str",  # Optional. File URL.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        },
                        "userPropFileInfo": {
                            "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry
                              time of the file (ISO 8601 literal format).
                            "fileId": "str",  # Optional. Unique name for test file.
                            "fileType": "str",  # Optional. File type. Known values are:
                              "JMX_FILE", "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                            "filename": "str",  # Optional. Name of the file.
                            "url": "str",  # Optional. File URL.
                            "validationStatus": "str"  # Optional. Validation status of
                              the file. Known values are: "NOT_VALIDATED", "VALIDATION_SUCCESS",
                              "VALIDATION_FAILURE", "VALIDATION_INITIATED", and
                              "VALIDATION_NOT_REQUIRED".
                        }
                    },
                    "keyvaultReferenceIdentityId": "str",  # Optional. Resource Id of the managed
                      identity referencing the Key vault.
                    "keyvaultReferenceIdentityType": "str",  # Optional. Type of the managed
                      identity referencing the Key vault.
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-45. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              http://contoso-app.azurewebsites.net/login.
                            "rampUpTime": 0,  # Optional. Ramp up time.
                            "vusers": 0  # Optional. No of concurrent virtual users.
                        },
                        "quickStartTest": False,  # Optional. Default value is False. If
                          true, optionalLoadTestConfig is required and JMX script for the load test is
                          not required to upload.
                        "splitAllCSVs": False  # Optional. Default value is False. If false,
                          Azure Load Testing copies and processes your input files unmodified across
                          all test engine instances. If true, Azure Load Testing splits the CSV input
                          data evenly across all engine instances. If you provide multiple CSV files,
                          each file will be split evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "stop" and "continue".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions -
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  "u2018p50"u2019, "u2018p90"u2019, "u2018p95"u2019, "u2018p99"u2019,
                                  "u2018min"u2019, "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec, "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p90", "p95", "p99", "min", and "max".
                                "clientmetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "subnetId": "str",  # Optional. Subnet ID on which the load test instances
                      should run.
                    "testId": "str"  # Optional. Unique test name as identifier.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_load_test_administration_list_load_tests_request(
                    orderby=orderby,
                    search=search,
                    last_modified_start_time=last_modified_start_time,
                    last_modified_end_time=last_modified_end_time,
                    continuation_token_parameter=continuation_token_parameter,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get_test_file(self, test_id: str, file_id: str, **kwargs: Any) -> JSON:
        """Get test file by the file name.

        Get test file by the file name.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param file_id: Unique name for test file, must contain only lower-case alphabetic, numeric,
         underscore or hyphen characters. Required.
        :type file_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry time of the file
                      (ISO 8601 literal format).
                    "fileId": "str",  # Optional. Unique name for test file.
                    "fileType": "str",  # Optional. File type. Known values are: "JMX_FILE",
                      "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                    "filename": "str",  # Optional. Name of the file.
                    "url": "str",  # Optional. File URL.
                    "validationStatus": "str"  # Optional. Validation status of the file. Known
                      values are: "NOT_VALIDATED", "VALIDATION_SUCCESS", "VALIDATION_FAILURE",
                      "VALIDATION_INITIATED", and "VALIDATION_NOT_REQUIRED".
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_load_test_administration_get_test_file_request(
            test_id=test_id,
            file_id=file_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def delete_test_file(  # pylint: disable=inconsistent-return-statements
        self, test_id: str, file_id: str, **kwargs: Any
    ) -> None:
        """Delete file by the file name for a test.

        Delete file by the file name for a test.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param file_id: Unique name for test file, must contain only lower-case alphabetic, numeric,
         underscore or hyphen characters. Required.
        :type file_id: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_load_test_administration_delete_test_file_request(
            test_id=test_id,
            file_id=file_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def list_test_files(
        self, test_id: str, *, continuation_token_parameter: Optional[str] = None, **kwargs: Any
    ) -> Iterable[JSON]:
        """Get all test files.

        Get all test files.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :keyword continuation_token_parameter: Continuation token to get the next page of response.
         Default value is None.
        :paramtype continuation_token_parameter: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry time of the file
                      (ISO 8601 literal format).
                    "fileId": "str",  # Optional. Unique name for test file.
                    "fileType": "str",  # Optional. File type. Known values are: "JMX_FILE",
                      "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                    "filename": "str",  # Optional. Name of the file.
                    "url": "str",  # Optional. File URL.
                    "validationStatus": "str"  # Optional. Validation status of the file. Known
                      values are: "NOT_VALIDATED", "VALIDATION_SUCCESS", "VALIDATION_FAILURE",
                      "VALIDATION_INITIATED", and "VALIDATION_NOT_REQUIRED".
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_load_test_administration_list_test_files_request(
                    test_id=test_id,
                    continuation_token_parameter=continuation_token_parameter,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @overload
    def create_or_update_app_component(
        self, test_id: str, body: JSON, *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> JSON:
        """Associate an app component (collection of azure resources) to a test.

        Associate an app component (collection of azure resources) to a test.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param body: App Component model. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "components": {
                        "str": {
                            "displayName": "str",  # Optional. Azure resource display
                              name.
                            "kind": "str",  # Optional. Kind of Azure resource type.
                            "resourceGroup": "str",  # Optional. Resource group name of
                              the Azure resource.
                            "resourceId": "str",  # Optional. fully qualified resource Id
                              e.g
                              subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
                            "resourceName": "str",  # Optional. Azure resource name,
                              required while creating the app component.
                            "resourceType": "str",  # Optional. Azure resource type,
                              required while creating the app component.
                            "subscriptionId": "str"  # Optional. Subscription Id of the
                              Azure resource.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "testId": "str"  # Optional. Test identifier.
                }

                # response body for status code(s): 200, 201
                response == {
                    "components": {
                        "str": {
                            "displayName": "str",  # Optional. Azure resource display
                              name.
                            "kind": "str",  # Optional. Kind of Azure resource type.
                            "resourceGroup": "str",  # Optional. Resource group name of
                              the Azure resource.
                            "resourceId": "str",  # Optional. fully qualified resource Id
                              e.g
                              subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
                            "resourceName": "str",  # Optional. Azure resource name,
                              required while creating the app component.
                            "resourceType": "str",  # Optional. Azure resource type,
                              required while creating the app component.
                            "subscriptionId": "str"  # Optional. Subscription Id of the
                              Azure resource.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "testId": "str"  # Optional. Test identifier.
                }
        """

    @overload
    def create_or_update_app_component(
        self, test_id: str, body: IO, *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> JSON:
        """Associate an app component (collection of azure resources) to a test.

        Associate an app component (collection of azure resources) to a test.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param body: App Component model. Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "components": {
                        "str": {
                            "displayName": "str",  # Optional. Azure resource display
                              name.
                            "kind": "str",  # Optional. Kind of Azure resource type.
                            "resourceGroup": "str",  # Optional. Resource group name of
                              the Azure resource.
                            "resourceId": "str",  # Optional. fully qualified resource Id
                              e.g
                              subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
                            "resourceName": "str",  # Optional. Azure resource name,
                              required while creating the app component.
                            "resourceType": "str",  # Optional. Azure resource type,
                              required while creating the app component.
                            "subscriptionId": "str"  # Optional. Subscription Id of the
                              Azure resource.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "testId": "str"  # Optional. Test identifier.
                }
        """

    @distributed_trace
    def create_or_update_app_component(self, test_id: str, body: Union[JSON, IO], **kwargs: Any) -> JSON:
        """Associate an app component (collection of azure resources) to a test.

        Associate an app component (collection of azure resources) to a test.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param body: App Component model. Is either a model type or a IO type. Required.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are:
         'application/merge-patch+json'. Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "components": {
                        "str": {
                            "displayName": "str",  # Optional. Azure resource display
                              name.
                            "kind": "str",  # Optional. Kind of Azure resource type.
                            "resourceGroup": "str",  # Optional. Resource group name of
                              the Azure resource.
                            "resourceId": "str",  # Optional. fully qualified resource Id
                              e.g
                              subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
                            "resourceName": "str",  # Optional. Azure resource name,
                              required while creating the app component.
                            "resourceType": "str",  # Optional. Azure resource type,
                              required while creating the app component.
                            "subscriptionId": "str"  # Optional. Subscription Id of the
                              Azure resource.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "testId": "str"  # Optional. Test identifier.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/merge-patch+json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = body

        request = build_load_test_administration_create_or_update_app_component_request(
            test_id=test_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def get_app_components(self, test_id: str, **kwargs: Any) -> JSON:
        """Get associated app component (collection of azure resources) for the given test.

        Get associated app component (collection of azure resources) for the given test.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "components": {
                        "str": {
                            "displayName": "str",  # Optional. Azure resource display
                              name.
                            "kind": "str",  # Optional. Kind of Azure resource type.
                            "resourceGroup": "str",  # Optional. Resource group name of
                              the Azure resource.
                            "resourceId": "str",  # Optional. fully qualified resource Id
                              e.g
                              subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
                            "resourceName": "str",  # Optional. Azure resource name,
                              required while creating the app component.
                            "resourceType": "str",  # Optional. Azure resource type,
                              required while creating the app component.
                            "subscriptionId": "str"  # Optional. Subscription Id of the
                              Azure resource.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "testId": "str"  # Optional. Test identifier.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_load_test_administration_get_app_components_request(
            test_id=test_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    def create_or_update_server_metrics_config(
        self, test_id: str, body: JSON, *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> JSON:
        """Configure server metrics for a test.

        Configure server metrics for a test.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param body: Server metric configuration model. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "metrics": {
                        "str": {
                            "aggregation": "str",  # Metric aggregation. Required.
                            "metricNamespace": "str",  # Metric name space. Required.
                            "name": {
                                "localizedValue": "str",  # Optional. The locale
                                  specific value.
                                "value": "str"  # Optional. The invariant value.
                            },
                            "resourceId": "str",  # Azure resource id. Required.
                            "resourceType": "str",  # Azure resource type. Required.
                            "displayDescription": "str",  # Optional. Metric description.
                            "id": "str",  # Optional. Unique name for metric.
                            "unit": "str"  # Optional. Metric unit.
                        }
                    },
                    "testId": "str"  # Optional. Test identifier.
                }

                # response body for status code(s): 200, 201
                response == {
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "metrics": {
                        "str": {
                            "aggregation": "str",  # Metric aggregation. Required.
                            "metricNamespace": "str",  # Metric name space. Required.
                            "name": {
                                "localizedValue": "str",  # Optional. The locale
                                  specific value.
                                "value": "str"  # Optional. The invariant value.
                            },
                            "resourceId": "str",  # Azure resource id. Required.
                            "resourceType": "str",  # Azure resource type. Required.
                            "displayDescription": "str",  # Optional. Metric description.
                            "id": "str",  # Optional. Unique name for metric.
                            "unit": "str"  # Optional. Metric unit.
                        }
                    },
                    "testId": "str"  # Optional. Test identifier.
                }
        """

    @overload
    def create_or_update_server_metrics_config(
        self, test_id: str, body: IO, *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> JSON:
        """Configure server metrics for a test.

        Configure server metrics for a test.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param body: Server metric configuration model. Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "metrics": {
                        "str": {
                            "aggregation": "str",  # Metric aggregation. Required.
                            "metricNamespace": "str",  # Metric name space. Required.
                            "name": {
                                "localizedValue": "str",  # Optional. The locale
                                  specific value.
                                "value": "str"  # Optional. The invariant value.
                            },
                            "resourceId": "str",  # Azure resource id. Required.
                            "resourceType": "str",  # Azure resource type. Required.
                            "displayDescription": "str",  # Optional. Metric description.
                            "id": "str",  # Optional. Unique name for metric.
                            "unit": "str"  # Optional. Metric unit.
                        }
                    },
                    "testId": "str"  # Optional. Test identifier.
                }
        """

    @distributed_trace
    def create_or_update_server_metrics_config(self, test_id: str, body: Union[JSON, IO], **kwargs: Any) -> JSON:
        """Configure server metrics for a test.

        Configure server metrics for a test.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :param body: Server metric configuration model. Is either a model type or a IO type. Required.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are:
         'application/merge-patch+json'. Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "metrics": {
                        "str": {
                            "aggregation": "str",  # Metric aggregation. Required.
                            "metricNamespace": "str",  # Metric name space. Required.
                            "name": {
                                "localizedValue": "str",  # Optional. The locale
                                  specific value.
                                "value": "str"  # Optional. The invariant value.
                            },
                            "resourceId": "str",  # Azure resource id. Required.
                            "resourceType": "str",  # Azure resource type. Required.
                            "displayDescription": "str",  # Optional. Metric description.
                            "id": "str",  # Optional. Unique name for metric.
                            "unit": "str"  # Optional. Metric unit.
                        }
                    },
                    "testId": "str"  # Optional. Test identifier.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/merge-patch+json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = body

        request = build_load_test_administration_create_or_update_server_metrics_config_request(
            test_id=test_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def get_server_metrics_config(self, test_id: str, **kwargs: Any) -> JSON:
        """Get server metric configuration for the given test.

        Get server metric configuration for the given test.

        :param test_id: Unique name for the load test, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "metrics": {
                        "str": {
                            "aggregation": "str",  # Metric aggregation. Required.
                            "metricNamespace": "str",  # Metric name space. Required.
                            "name": {
                                "localizedValue": "str",  # Optional. The locale
                                  specific value.
                                "value": "str"  # Optional. The invariant value.
                            },
                            "resourceId": "str",  # Azure resource id. Required.
                            "resourceType": "str",  # Azure resource type. Required.
                            "displayDescription": "str",  # Optional. Metric description.
                            "id": "str",  # Optional. Unique name for metric.
                            "unit": "str"  # Optional. Metric unit.
                        }
                    },
                    "testId": "str"  # Optional. Test identifier.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_load_test_administration_get_server_metrics_config_request(
            test_id=test_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)


class LoadTestRunOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.developer.loadtesting.LoadTestingClient`'s
        :attr:`load_test_run` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def delete_test_run(  # pylint: disable=inconsistent-return-statements
        self, test_run_id: str, **kwargs: Any
    ) -> None:
        """Delete a test run by its name.

        Delete a test run by its name.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_load_test_run_delete_test_run_request(
            test_run_id=test_run_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    def create_or_update_test_run(
        self,
        test_run_id: str,
        body: JSON,
        *,
        old_test_run_id: Optional[str] = None,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> JSON:
        """Create and start a new test run with the given name.

        Create and start a new test run with the given name.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: Load test run model. Required.
        :type body: JSON
        :keyword old_test_run_id: Existing test run identifier that should be rerun, if this is
         provided, the test will run with the JMX file, configuration and app components from the
         existing test run. You can override the configuration values for new test run in the request
         body. Default value is None.
        :paramtype old_test_run_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "description": "str",  # Optional. The test run description.
                    "displayName": "str",  # Optional. Display name of a testRun.
                    "duration": 0,  # Optional. Test run duration in milliseconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test run end
                      DateTime(ISO 8601 literal format).
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "executedDateTime": "2020-02-20 00:00:00",  # Optional. Test run initiated
                      time.
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-45. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              http://contoso-app.azurewebsites.net/login.
                            "rampUpTime": 0,  # Optional. Ramp up time.
                            "vusers": 0  # Optional. No of concurrent virtual users.
                        },
                        "quickStartTest": False,  # Optional. Default value is False. If
                          true, optionalLoadTestConfig is required and JMX script for the load test is
                          not required to upload.
                        "splitAllCSVs": False  # Optional. Default value is False. If false,
                          Azure Load Testing copies and processes your input files unmodified across
                          all test engine instances. If true, Azure Load Testing splits the CSV input
                          data evenly across all engine instances. If you provide multiple CSV files,
                          each file will be split evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "stop" and "continue".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions -
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  "u2018p50"u2019, "u2018p90"u2019, "u2018p95"u2019, "u2018p99"u2019,
                                  "u2018min"u2019, "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec, "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p90", "p95", "p99", "min", and "max".
                                "clientmetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "portalUrl": "str",  # Optional. Portal url.
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test run start
                      DateTime(ISO 8601 literal format).
                    "status": "str",  # Optional. The test run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED", "CONFIGURING",
                      "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING", "DEPROVISIONED", "DONE",
                      "CANCELLING", "CANCELLED", "FAILED", "VALIDATION_SUCCESS", and
                      "VALIDATION_FAILURE".
                    "subnetId": "str",  # Optional. Subnet ID on which the load test instances
                      should run.
                    "testArtifacts": {
                        "inputArtifacts": {
                            "additionalFileInfo": [
                                {
                                    "expireDateTime": "2020-02-20 00:00:00",  #
                                      Optional. Expiry time of the file (ISO 8601 literal format).
                                    "fileId": "str",  # Optional. Unique name for
                                      test file.
                                    "fileType": "str",  # Optional. File type.
                                      Known values are: "JMX_FILE", "USER_PROPERTIES", and
                                      "ADDITIONAL_ARTIFACTS".
                                    "filename": "str",  # Optional. Name of the
                                      file.
                                    "url": "str",  # Optional. File URL.
                                    "validationStatus": "str"  # Optional.
                                      Validation status of the file. Known values are: "NOT_VALIDATED",
                                      "VALIDATION_SUCCESS", "VALIDATION_FAILURE",
                                      "VALIDATION_INITIATED", and "VALIDATION_NOT_REQUIRED".
                                }
                            ],
                            "configFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "inputArtifactsZipFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "testScriptFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "userPropFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        },
                        "outputArtifacts": {
                            "logsUrl": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "resultUrl": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        }
                    },
                    "testId": "str",  # Optional. Associated test Id.
                    "testResult": "str",  # Optional. Test result for pass/Fail criteria used
                      during the test run. Known values are: "PASSED", "NOT_APPLICABLE", and "FAILED".
                    "testRunId": "str",  # Optional. Unique test run name as identifier.
                    "testRunStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "vusers": 0  # Optional. Number of virtual users, for which test has been
                      run.
                }

                # response body for status code(s): 200
                response == {
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "description": "str",  # Optional. The test run description.
                    "displayName": "str",  # Optional. Display name of a testRun.
                    "duration": 0,  # Optional. Test run duration in milliseconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test run end
                      DateTime(ISO 8601 literal format).
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "executedDateTime": "2020-02-20 00:00:00",  # Optional. Test run initiated
                      time.
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-45. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              http://contoso-app.azurewebsites.net/login.
                            "rampUpTime": 0,  # Optional. Ramp up time.
                            "vusers": 0  # Optional. No of concurrent virtual users.
                        },
                        "quickStartTest": False,  # Optional. Default value is False. If
                          true, optionalLoadTestConfig is required and JMX script for the load test is
                          not required to upload.
                        "splitAllCSVs": False  # Optional. Default value is False. If false,
                          Azure Load Testing copies and processes your input files unmodified across
                          all test engine instances. If true, Azure Load Testing splits the CSV input
                          data evenly across all engine instances. If you provide multiple CSV files,
                          each file will be split evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "stop" and "continue".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions -
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  "u2018p50"u2019, "u2018p90"u2019, "u2018p95"u2019, "u2018p99"u2019,
                                  "u2018min"u2019, "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec, "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p90", "p95", "p99", "min", and "max".
                                "clientmetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "portalUrl": "str",  # Optional. Portal url.
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test run start
                      DateTime(ISO 8601 literal format).
                    "status": "str",  # Optional. The test run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED", "CONFIGURING",
                      "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING", "DEPROVISIONED", "DONE",
                      "CANCELLING", "CANCELLED", "FAILED", "VALIDATION_SUCCESS", and
                      "VALIDATION_FAILURE".
                    "subnetId": "str",  # Optional. Subnet ID on which the load test instances
                      should run.
                    "testArtifacts": {
                        "inputArtifacts": {
                            "additionalFileInfo": [
                                {
                                    "expireDateTime": "2020-02-20 00:00:00",  #
                                      Optional. Expiry time of the file (ISO 8601 literal format).
                                    "fileId": "str",  # Optional. Unique name for
                                      test file.
                                    "fileType": "str",  # Optional. File type.
                                      Known values are: "JMX_FILE", "USER_PROPERTIES", and
                                      "ADDITIONAL_ARTIFACTS".
                                    "filename": "str",  # Optional. Name of the
                                      file.
                                    "url": "str",  # Optional. File URL.
                                    "validationStatus": "str"  # Optional.
                                      Validation status of the file. Known values are: "NOT_VALIDATED",
                                      "VALIDATION_SUCCESS", "VALIDATION_FAILURE",
                                      "VALIDATION_INITIATED", and "VALIDATION_NOT_REQUIRED".
                                }
                            ],
                            "configFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "inputArtifactsZipFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "testScriptFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "userPropFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        },
                        "outputArtifacts": {
                            "logsUrl": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "resultUrl": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        }
                    },
                    "testId": "str",  # Optional. Associated test Id.
                    "testResult": "str",  # Optional. Test result for pass/Fail criteria used
                      during the test run. Known values are: "PASSED", "NOT_APPLICABLE", and "FAILED".
                    "testRunId": "str",  # Optional. Unique test run name as identifier.
                    "testRunStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "vusers": 0  # Optional. Number of virtual users, for which test has been
                      run.
                }
        """

    @overload
    def create_or_update_test_run(
        self,
        test_run_id: str,
        body: IO,
        *,
        old_test_run_id: Optional[str] = None,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> JSON:
        """Create and start a new test run with the given name.

        Create and start a new test run with the given name.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: Load test run model. Required.
        :type body: IO
        :keyword old_test_run_id: Existing test run identifier that should be rerun, if this is
         provided, the test will run with the JMX file, configuration and app components from the
         existing test run. You can override the configuration values for new test run in the request
         body. Default value is None.
        :paramtype old_test_run_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "description": "str",  # Optional. The test run description.
                    "displayName": "str",  # Optional. Display name of a testRun.
                    "duration": 0,  # Optional. Test run duration in milliseconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test run end
                      DateTime(ISO 8601 literal format).
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "executedDateTime": "2020-02-20 00:00:00",  # Optional. Test run initiated
                      time.
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-45. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              http://contoso-app.azurewebsites.net/login.
                            "rampUpTime": 0,  # Optional. Ramp up time.
                            "vusers": 0  # Optional. No of concurrent virtual users.
                        },
                        "quickStartTest": False,  # Optional. Default value is False. If
                          true, optionalLoadTestConfig is required and JMX script for the load test is
                          not required to upload.
                        "splitAllCSVs": False  # Optional. Default value is False. If false,
                          Azure Load Testing copies and processes your input files unmodified across
                          all test engine instances. If true, Azure Load Testing splits the CSV input
                          data evenly across all engine instances. If you provide multiple CSV files,
                          each file will be split evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "stop" and "continue".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions -
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  "u2018p50"u2019, "u2018p90"u2019, "u2018p95"u2019, "u2018p99"u2019,
                                  "u2018min"u2019, "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec, "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p90", "p95", "p99", "min", and "max".
                                "clientmetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "portalUrl": "str",  # Optional. Portal url.
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test run start
                      DateTime(ISO 8601 literal format).
                    "status": "str",  # Optional. The test run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED", "CONFIGURING",
                      "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING", "DEPROVISIONED", "DONE",
                      "CANCELLING", "CANCELLED", "FAILED", "VALIDATION_SUCCESS", and
                      "VALIDATION_FAILURE".
                    "subnetId": "str",  # Optional. Subnet ID on which the load test instances
                      should run.
                    "testArtifacts": {
                        "inputArtifacts": {
                            "additionalFileInfo": [
                                {
                                    "expireDateTime": "2020-02-20 00:00:00",  #
                                      Optional. Expiry time of the file (ISO 8601 literal format).
                                    "fileId": "str",  # Optional. Unique name for
                                      test file.
                                    "fileType": "str",  # Optional. File type.
                                      Known values are: "JMX_FILE", "USER_PROPERTIES", and
                                      "ADDITIONAL_ARTIFACTS".
                                    "filename": "str",  # Optional. Name of the
                                      file.
                                    "url": "str",  # Optional. File URL.
                                    "validationStatus": "str"  # Optional.
                                      Validation status of the file. Known values are: "NOT_VALIDATED",
                                      "VALIDATION_SUCCESS", "VALIDATION_FAILURE",
                                      "VALIDATION_INITIATED", and "VALIDATION_NOT_REQUIRED".
                                }
                            ],
                            "configFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "inputArtifactsZipFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "testScriptFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "userPropFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        },
                        "outputArtifacts": {
                            "logsUrl": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "resultUrl": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        }
                    },
                    "testId": "str",  # Optional. Associated test Id.
                    "testResult": "str",  # Optional. Test result for pass/Fail criteria used
                      during the test run. Known values are: "PASSED", "NOT_APPLICABLE", and "FAILED".
                    "testRunId": "str",  # Optional. Unique test run name as identifier.
                    "testRunStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "vusers": 0  # Optional. Number of virtual users, for which test has been
                      run.
                }
        """

    @distributed_trace
    def create_or_update_test_run(
        self, test_run_id: str, body: Union[JSON, IO], *, old_test_run_id: Optional[str] = None, **kwargs: Any
    ) -> JSON:
        """Create and start a new test run with the given name.

        Create and start a new test run with the given name.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: Load test run model. Is either a model type or a IO type. Required.
        :type body: JSON or IO
        :keyword old_test_run_id: Existing test run identifier that should be rerun, if this is
         provided, the test will run with the JMX file, configuration and app components from the
         existing test run. You can override the configuration values for new test run in the request
         body. Default value is None.
        :paramtype old_test_run_id: str
        :keyword content_type: Body Parameter content-type. Known values are:
         'application/merge-patch+json'. Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "description": "str",  # Optional. The test run description.
                    "displayName": "str",  # Optional. Display name of a testRun.
                    "duration": 0,  # Optional. Test run duration in milliseconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test run end
                      DateTime(ISO 8601 literal format).
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "executedDateTime": "2020-02-20 00:00:00",  # Optional. Test run initiated
                      time.
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-45. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              http://contoso-app.azurewebsites.net/login.
                            "rampUpTime": 0,  # Optional. Ramp up time.
                            "vusers": 0  # Optional. No of concurrent virtual users.
                        },
                        "quickStartTest": False,  # Optional. Default value is False. If
                          true, optionalLoadTestConfig is required and JMX script for the load test is
                          not required to upload.
                        "splitAllCSVs": False  # Optional. Default value is False. If false,
                          Azure Load Testing copies and processes your input files unmodified across
                          all test engine instances. If true, Azure Load Testing splits the CSV input
                          data evenly across all engine instances. If you provide multiple CSV files,
                          each file will be split evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "stop" and "continue".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions -
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  "u2018p50"u2019, "u2018p90"u2019, "u2018p95"u2019, "u2018p99"u2019,
                                  "u2018min"u2019, "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec, "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p90", "p95", "p99", "min", and "max".
                                "clientmetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "portalUrl": "str",  # Optional. Portal url.
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test run start
                      DateTime(ISO 8601 literal format).
                    "status": "str",  # Optional. The test run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED", "CONFIGURING",
                      "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING", "DEPROVISIONED", "DONE",
                      "CANCELLING", "CANCELLED", "FAILED", "VALIDATION_SUCCESS", and
                      "VALIDATION_FAILURE".
                    "subnetId": "str",  # Optional. Subnet ID on which the load test instances
                      should run.
                    "testArtifacts": {
                        "inputArtifacts": {
                            "additionalFileInfo": [
                                {
                                    "expireDateTime": "2020-02-20 00:00:00",  #
                                      Optional. Expiry time of the file (ISO 8601 literal format).
                                    "fileId": "str",  # Optional. Unique name for
                                      test file.
                                    "fileType": "str",  # Optional. File type.
                                      Known values are: "JMX_FILE", "USER_PROPERTIES", and
                                      "ADDITIONAL_ARTIFACTS".
                                    "filename": "str",  # Optional. Name of the
                                      file.
                                    "url": "str",  # Optional. File URL.
                                    "validationStatus": "str"  # Optional.
                                      Validation status of the file. Known values are: "NOT_VALIDATED",
                                      "VALIDATION_SUCCESS", "VALIDATION_FAILURE",
                                      "VALIDATION_INITIATED", and "VALIDATION_NOT_REQUIRED".
                                }
                            ],
                            "configFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "inputArtifactsZipFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "testScriptFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "userPropFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        },
                        "outputArtifacts": {
                            "logsUrl": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "resultUrl": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        }
                    },
                    "testId": "str",  # Optional. Associated test Id.
                    "testResult": "str",  # Optional. Test result for pass/Fail criteria used
                      during the test run. Known values are: "PASSED", "NOT_APPLICABLE", and "FAILED".
                    "testRunId": "str",  # Optional. Unique test run name as identifier.
                    "testRunStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "vusers": 0  # Optional. Number of virtual users, for which test has been
                      run.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/merge-patch+json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = body

        request = build_load_test_run_create_or_update_test_run_request(
            test_run_id=test_run_id,
            old_test_run_id=old_test_run_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def get_test_run(self, test_run_id: str, **kwargs: Any) -> JSON:
        """Get test run details by name.

        Get test run details by name.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "description": "str",  # Optional. The test run description.
                    "displayName": "str",  # Optional. Display name of a testRun.
                    "duration": 0,  # Optional. Test run duration in milliseconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test run end
                      DateTime(ISO 8601 literal format).
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "executedDateTime": "2020-02-20 00:00:00",  # Optional. Test run initiated
                      time.
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-45. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              http://contoso-app.azurewebsites.net/login.
                            "rampUpTime": 0,  # Optional. Ramp up time.
                            "vusers": 0  # Optional. No of concurrent virtual users.
                        },
                        "quickStartTest": False,  # Optional. Default value is False. If
                          true, optionalLoadTestConfig is required and JMX script for the load test is
                          not required to upload.
                        "splitAllCSVs": False  # Optional. Default value is False. If false,
                          Azure Load Testing copies and processes your input files unmodified across
                          all test engine instances. If true, Azure Load Testing splits the CSV input
                          data evenly across all engine instances. If you provide multiple CSV files,
                          each file will be split evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "stop" and "continue".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions -
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  "u2018p50"u2019, "u2018p90"u2019, "u2018p95"u2019, "u2018p99"u2019,
                                  "u2018min"u2019, "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec, "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p90", "p95", "p99", "min", and "max".
                                "clientmetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "portalUrl": "str",  # Optional. Portal url.
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test run start
                      DateTime(ISO 8601 literal format).
                    "status": "str",  # Optional. The test run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED", "CONFIGURING",
                      "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING", "DEPROVISIONED", "DONE",
                      "CANCELLING", "CANCELLED", "FAILED", "VALIDATION_SUCCESS", and
                      "VALIDATION_FAILURE".
                    "subnetId": "str",  # Optional. Subnet ID on which the load test instances
                      should run.
                    "testArtifacts": {
                        "inputArtifacts": {
                            "additionalFileInfo": [
                                {
                                    "expireDateTime": "2020-02-20 00:00:00",  #
                                      Optional. Expiry time of the file (ISO 8601 literal format).
                                    "fileId": "str",  # Optional. Unique name for
                                      test file.
                                    "fileType": "str",  # Optional. File type.
                                      Known values are: "JMX_FILE", "USER_PROPERTIES", and
                                      "ADDITIONAL_ARTIFACTS".
                                    "filename": "str",  # Optional. Name of the
                                      file.
                                    "url": "str",  # Optional. File URL.
                                    "validationStatus": "str"  # Optional.
                                      Validation status of the file. Known values are: "NOT_VALIDATED",
                                      "VALIDATION_SUCCESS", "VALIDATION_FAILURE",
                                      "VALIDATION_INITIATED", and "VALIDATION_NOT_REQUIRED".
                                }
                            ],
                            "configFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "inputArtifactsZipFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "testScriptFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "userPropFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        },
                        "outputArtifacts": {
                            "logsUrl": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "resultUrl": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        }
                    },
                    "testId": "str",  # Optional. Associated test Id.
                    "testResult": "str",  # Optional. Test result for pass/Fail criteria used
                      during the test run. Known values are: "PASSED", "NOT_APPLICABLE", and "FAILED".
                    "testRunId": "str",  # Optional. Unique test run name as identifier.
                    "testRunStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "vusers": 0  # Optional. Number of virtual users, for which test has been
                      run.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_load_test_run_get_test_run_request(
            test_run_id=test_run_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def get_test_run_file(self, test_run_id: str, file_id: str, **kwargs: Any) -> JSON:
        """Get test run file by file name.

        Get test run file by file name.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param file_id: Unique name for test run file, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type file_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "expireDateTime": "2020-02-20 00:00:00",  # Optional. Expiry time of the file
                      (ISO 8601 literal format).
                    "fileId": "str",  # Optional. Unique name for test file.
                    "fileType": "str",  # Optional. File type. Known values are: "JMX_FILE",
                      "USER_PROPERTIES", and "ADDITIONAL_ARTIFACTS".
                    "filename": "str",  # Optional. Name of the file.
                    "url": "str",  # Optional. File URL.
                    "validationStatus": "str"  # Optional. Validation status of the file. Known
                      values are: "NOT_VALIDATED", "VALIDATION_SUCCESS", "VALIDATION_FAILURE",
                      "VALIDATION_INITIATED", and "VALIDATION_NOT_REQUIRED".
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_load_test_run_get_test_run_file_request(
            test_run_id=test_run_id,
            file_id=file_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def list_test_runs(
        self,
        *,
        orderby: Optional[str] = None,
        continuation_token_parameter: Optional[str] = None,
        search: Optional[str] = None,
        test_id: Optional[str] = None,
        execution_from: Optional[datetime.datetime] = None,
        execution_to: Optional[datetime.datetime] = None,
        status: Optional[str] = None,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """Get all test runs with given filters.

        Get all test runs with given filters.

        :keyword orderby: Sort on one of the field - status, displayName, executedDateTime in (field
         asc/desc) format. eg: displayName asc. Default value is None.
        :paramtype orderby: str
        :keyword continuation_token_parameter: Continuation token to get the next page of response.
         Default value is None.
        :paramtype continuation_token_parameter: str
        :keyword search: Filter search based on searchable fields - description, executedUser. Default
         value is None.
        :paramtype search: str
        :keyword test_id: Unique name of an existing load test. Default value is None.
        :paramtype test_id: str
        :keyword execution_from: Start DateTime(ISO 8601 literal format) of test-run execution time
         filter range. Default value is None.
        :paramtype execution_from: ~datetime.datetime
        :keyword execution_to: End DateTime(ISO 8601 literal format) of test-run execution time filter
         range. Default value is None.
        :paramtype execution_to: ~datetime.datetime
        :keyword status: Comma separated list of test run status. Default value is None.
        :paramtype status: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "description": "str",  # Optional. The test run description.
                    "displayName": "str",  # Optional. Display name of a testRun.
                    "duration": 0,  # Optional. Test run duration in milliseconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test run end
                      DateTime(ISO 8601 literal format).
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "executedDateTime": "2020-02-20 00:00:00",  # Optional. Test run initiated
                      time.
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-45. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              http://contoso-app.azurewebsites.net/login.
                            "rampUpTime": 0,  # Optional. Ramp up time.
                            "vusers": 0  # Optional. No of concurrent virtual users.
                        },
                        "quickStartTest": False,  # Optional. Default value is False. If
                          true, optionalLoadTestConfig is required and JMX script for the load test is
                          not required to upload.
                        "splitAllCSVs": False  # Optional. Default value is False. If false,
                          Azure Load Testing copies and processes your input files unmodified across
                          all test engine instances. If true, Azure Load Testing splits the CSV input
                          data evenly across all engine instances. If you provide multiple CSV files,
                          each file will be split evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "stop" and "continue".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions -
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  "u2018p50"u2019, "u2018p90"u2019, "u2018p95"u2019, "u2018p99"u2019,
                                  "u2018min"u2019, "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec, "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p90", "p95", "p99", "min", and "max".
                                "clientmetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "portalUrl": "str",  # Optional. Portal url.
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test run start
                      DateTime(ISO 8601 literal format).
                    "status": "str",  # Optional. The test run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED", "CONFIGURING",
                      "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING", "DEPROVISIONED", "DONE",
                      "CANCELLING", "CANCELLED", "FAILED", "VALIDATION_SUCCESS", and
                      "VALIDATION_FAILURE".
                    "subnetId": "str",  # Optional. Subnet ID on which the load test instances
                      should run.
                    "testArtifacts": {
                        "inputArtifacts": {
                            "additionalFileInfo": [
                                {
                                    "expireDateTime": "2020-02-20 00:00:00",  #
                                      Optional. Expiry time of the file (ISO 8601 literal format).
                                    "fileId": "str",  # Optional. Unique name for
                                      test file.
                                    "fileType": "str",  # Optional. File type.
                                      Known values are: "JMX_FILE", "USER_PROPERTIES", and
                                      "ADDITIONAL_ARTIFACTS".
                                    "filename": "str",  # Optional. Name of the
                                      file.
                                    "url": "str",  # Optional. File URL.
                                    "validationStatus": "str"  # Optional.
                                      Validation status of the file. Known values are: "NOT_VALIDATED",
                                      "VALIDATION_SUCCESS", "VALIDATION_FAILURE",
                                      "VALIDATION_INITIATED", and "VALIDATION_NOT_REQUIRED".
                                }
                            ],
                            "configFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "inputArtifactsZipFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "testScriptFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "userPropFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        },
                        "outputArtifacts": {
                            "logsUrl": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "resultUrl": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        }
                    },
                    "testId": "str",  # Optional. Associated test Id.
                    "testResult": "str",  # Optional. Test result for pass/Fail criteria used
                      during the test run. Known values are: "PASSED", "NOT_APPLICABLE", and "FAILED".
                    "testRunId": "str",  # Optional. Unique test run name as identifier.
                    "testRunStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "vusers": 0  # Optional. Number of virtual users, for which test has been
                      run.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_load_test_run_list_test_runs_request(
                    orderby=orderby,
                    continuation_token_parameter=continuation_token_parameter,
                    search=search,
                    test_id=test_id,
                    execution_from=execution_from,
                    execution_to=execution_to,
                    status=status,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "Endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.get("nextLink", None), iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                request, stream=False, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def stop_test_run(self, test_run_id: str, **kwargs: Any) -> JSON:
        """Stop test run by name.

        Stop test run by name.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "certificate": {
                        "name": "str",  # Optional. Name of the certificate.
                        "type": "str",  # Optional. Type of certificate. "AKV_CERT_URI"
                        "value": "str"  # Optional. The value of the certificate for
                          respective type.
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "description": "str",  # Optional. The test run description.
                    "displayName": "str",  # Optional. Display name of a testRun.
                    "duration": 0,  # Optional. Test run duration in milliseconds.
                    "endDateTime": "2020-02-20 00:00:00",  # Optional. The test run end
                      DateTime(ISO 8601 literal format).
                    "environmentVariables": {
                        "str": "str"  # Optional. Environment variables which are defined as
                          a set of <name,value> pairs.
                    },
                    "errorDetails": [
                        {
                            "message": "str"  # Optional. Error details in case test run
                              was not successfully run.
                        }
                    ],
                    "executedDateTime": "2020-02-20 00:00:00",  # Optional. Test run initiated
                      time.
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "loadTestConfiguration": {
                        "engineInstances": 0,  # Optional. The number of engine instances to
                          execute load test. Supported values are in range of 1-45. Required for
                          creating a new test.
                        "optionalLoadTestConfig": {
                            "duration": 0,  # Optional. Test run duration.
                            "endpointUrl": "str",  # Optional. Test URL. Provide the
                              complete HTTP URL. For example,
                              http://contoso-app.azurewebsites.net/login.
                            "rampUpTime": 0,  # Optional. Ramp up time.
                            "vusers": 0  # Optional. No of concurrent virtual users.
                        },
                        "quickStartTest": False,  # Optional. Default value is False. If
                          true, optionalLoadTestConfig is required and JMX script for the load test is
                          not required to upload.
                        "splitAllCSVs": False  # Optional. Default value is False. If false,
                          Azure Load Testing copies and processes your input files unmodified across
                          all test engine instances. If true, Azure Load Testing splits the CSV input
                          data evenly across all engine instances. If you provide multiple CSV files,
                          each file will be split evenly.
                    },
                    "passFailCriteria": {
                        "passFailMetrics": {
                            "str": {
                                "action": "str",  # Optional. Action taken after the
                                  threshold is met. Default is "u2018continue"u2019. Known values are:
                                  "stop" and "continue".
                                "actualValue": 0.0,  # Optional. The actual value of
                                  the client metric for the test run.
                                "aggregate": "str",  # Optional. The aggregation
                                  function to be applied on the client metric. Allowed functions -
                                  "u2018percentage"u2019 - for error metric , "u2018avg"u2019,
                                  "u2018p50"u2019, "u2018p90"u2019, "u2018p95"u2019, "u2018p99"u2019,
                                  "u2018min"u2019, "u2018max"u2019 - for response_time_ms and latency
                                  metric, "u2018avg"u2019 - for requests_per_sec, "u2018count"u2019 -
                                  for requests. Known values are: "count", "percentage", "avg", "p50",
                                  "p90", "p95", "p99", "min", and "max".
                                "clientmetric": "str",  # Optional. The client metric
                                  on which the criteria should be applied. Known values are:
                                  "response_time_ms", "latency", "error", "requests", and
                                  "requests_per_sec".
                                "condition": "str",  # Optional. The comparison
                                  operator. Supported types "u2018>"u2019, "u2018<"u2019.
                                "requestName": "str",  # Optional. Request name for
                                  which the Pass fail criteria has to be applied.
                                "result": "str",  # Optional. Outcome of the test
                                  run. Known values are: "passed", "undetermined", and "failed".
                                "value": 0.0  # Optional. The value to compare with
                                  the client metric. Allowed values - "u2018error : [0.0 , 100.0] unit-
                                  % "u2019, response_time_ms and latency : any integer value unit- ms.
                            }
                        }
                    },
                    "portalUrl": "str",  # Optional. Portal url.
                    "secrets": {
                        "str": {
                            "type": "str",  # Optional. Type of secret. Known values are:
                              "AKV_SECRET_URI" and "SECRET_VALUE".
                            "value": "str"  # Optional. The value of the secret for the
                              respective type.
                        }
                    },
                    "startDateTime": "2020-02-20 00:00:00",  # Optional. The test run start
                      DateTime(ISO 8601 literal format).
                    "status": "str",  # Optional. The test run status. Known values are:
                      "ACCEPTED", "NOTSTARTED", "PROVISIONING", "PROVISIONED", "CONFIGURING",
                      "CONFIGURED", "EXECUTING", "EXECUTED", "DEPROVISIONING", "DEPROVISIONED", "DONE",
                      "CANCELLING", "CANCELLED", "FAILED", "VALIDATION_SUCCESS", and
                      "VALIDATION_FAILURE".
                    "subnetId": "str",  # Optional. Subnet ID on which the load test instances
                      should run.
                    "testArtifacts": {
                        "inputArtifacts": {
                            "additionalFileInfo": [
                                {
                                    "expireDateTime": "2020-02-20 00:00:00",  #
                                      Optional. Expiry time of the file (ISO 8601 literal format).
                                    "fileId": "str",  # Optional. Unique name for
                                      test file.
                                    "fileType": "str",  # Optional. File type.
                                      Known values are: "JMX_FILE", "USER_PROPERTIES", and
                                      "ADDITIONAL_ARTIFACTS".
                                    "filename": "str",  # Optional. Name of the
                                      file.
                                    "url": "str",  # Optional. File URL.
                                    "validationStatus": "str"  # Optional.
                                      Validation status of the file. Known values are: "NOT_VALIDATED",
                                      "VALIDATION_SUCCESS", "VALIDATION_FAILURE",
                                      "VALIDATION_INITIATED", and "VALIDATION_NOT_REQUIRED".
                                }
                            ],
                            "configFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "inputArtifactsZipFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "testScriptFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "userPropFileInfo": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        },
                        "outputArtifacts": {
                            "logsUrl": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            },
                            "resultUrl": {
                                "expireDateTime": "2020-02-20 00:00:00",  # Optional.
                                  Expiry time of the file (ISO 8601 literal format).
                                "fileId": "str",  # Optional. Unique name for test
                                  file.
                                "fileType": "str",  # Optional. File type. Known
                                  values are: "JMX_FILE", "USER_PROPERTIES", and
                                  "ADDITIONAL_ARTIFACTS".
                                "filename": "str",  # Optional. Name of the file.
                                "url": "str",  # Optional. File URL.
                                "validationStatus": "str"  # Optional. Validation
                                  status of the file. Known values are: "NOT_VALIDATED",
                                  "VALIDATION_SUCCESS", "VALIDATION_FAILURE", "VALIDATION_INITIATED",
                                  and "VALIDATION_NOT_REQUIRED".
                            }
                        }
                    },
                    "testId": "str",  # Optional. Associated test Id.
                    "testResult": "str",  # Optional. Test result for pass/Fail criteria used
                      during the test run. Known values are: "PASSED", "NOT_APPLICABLE", and "FAILED".
                    "testRunId": "str",  # Optional. Unique test run name as identifier.
                    "testRunStatistics": {
                        "str": {
                            "errorCount": 0.0,  # Optional. Error count.
                            "errorPct": 0.0,  # Optional. Error percentage.
                            "maxResTime": 0.0,  # Optional. Max response time.
                            "meanResTime": 0.0,  # Optional. Mean response time.
                            "medianResTime": 0.0,  # Optional. Median response time.
                            "minResTime": 0.0,  # Optional. Minimum response time.
                            "pct1ResTime": 0.0,  # Optional. 90 percentile response time.
                            "pct2ResTime": 0.0,  # Optional. 95 percentile response time.
                            "pct3ResTime": 0.0,  # Optional. 99 percentile response time.
                            "receivedKBytesPerSec": 0.0,  # Optional. Received network
                              bytes.
                            "sampleCount": 0.0,  # Optional. Sampler count.
                            "sentKBytesPerSec": 0.0,  # Optional. Send network bytes.
                            "throughput": 0.0,  # Optional. Throughput.
                            "transaction": "str"  # Optional. Transaction name.
                        }
                    },
                    "vusers": 0  # Optional. Number of virtual users, for which test has been
                      run.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_load_test_run_stop_test_run_request(
            test_run_id=test_run_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def list_metric_namespaces(self, test_run_id: str, **kwargs: Any) -> JSON:
        """Lists the metric namespaces for a load test run.

        Lists the metric namespaces for a load test run.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "value": [
                        {
                            "metricNamespaceName": "str",  # Optional. The fully
                              qualified metric namespace name.
                            "name": "str"  # Optional. The escaped name of the namespace.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_load_test_run_list_metric_namespaces_request(
            test_run_id=test_run_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def list_metric_definitions(self, test_run_id: str, *, metric_namespace: str, **kwargs: Any) -> JSON:
        """Lists the metric definitions for a load test run.

        Lists the metric definitions for a load test run.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :keyword metric_namespace: Metric namespace to query metric definitions for. Required.
        :paramtype metric_namespace: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "value": [
                        {
                            "dimensions": [
                                {
                                    "localizedValue": "str",  # Optional. The
                                      locale specific value.
                                    "value": "str"  # Optional. The invariant
                                      value.
                                }
                            ],
                            "displayDescription": "str",  # Optional. Detailed
                              description of this metric.
                            "metricAvailabilities": [
                                {
                                    "timeGrain": "str"  # Optional. The time
                                      grain specifies the aggregation interval for the metric.
                                      Expressed as a duration 'PT1M', 'PT1H', etc. Known values are:
                                      "PT5S", "PT10S", "PT1M", "PT5M", and "PT1H".
                                }
                            ],
                            "name": {
                                "localizedValue": "str",  # Optional. The locale
                                  specific value.
                                "value": "str"  # Optional. The invariant value.
                            },
                            "namespace": "str",  # Optional. The namespace the metric
                              belongs to.
                            "primaryAggregationType": "str",  # Optional. the primary
                              aggregation type value defining how to use the values for display. Known
                              values are: "Average", "Count", "Minimum", "Maximum", "None", "Total",
                              "Percentile90", "Percentile95", and "Percentile99".
                            "supportedAggregationTypes": [
                                "str"  # Optional. the collection of what aggregation
                                  types are supported.
                            ],
                            "unit": "str"  # Optional. The unit of the metric. Known
                              values are: "NotSpecified", "Percent", "Count", "Seconds",
                              "Milliseconds", "Bytes", "BytesPerSecond", and "CountPerSecond".
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_load_test_run_list_metric_definitions_request(
            test_run_id=test_run_id,
            metric_namespace=metric_namespace,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    def get_metrics(
        self,
        test_run_id: str,
        body: Optional[JSON] = None,
        *,
        metricname: str,
        metric_namespace: str,
        result_type: str,
        timespan: str,
        aggregation: Optional[str] = None,
        interval: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Lists the metric values for a load test run.

        Lists the metric values for a load test run.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: Metric metadata filter to fetch the set of metric. Default value is None.
        :type body: JSON
        :keyword metricname: Metric name. Required.
        :paramtype metricname: str
        :keyword metric_namespace: Metric namespace to query metric definitions for. Required.
        :paramtype metric_namespace: str
        :keyword result_type: Reduces the set of data collected. The syntax allowed depends on the
         operation. See the operation's description for details. Known values are: "Data" and
         "Metadata". Required.
        :paramtype result_type: str
        :keyword timespan: The timespan of the query. It is a string with the following format
         'startDateTime_ISO/endDateTime_ISO'. Required.
        :paramtype timespan: str
        :keyword aggregation: The list of aggregation types (comma separated) to retrieve. Default
         value is None.
        :paramtype aggregation: str
        :keyword interval: The interval (i.e. timegrain) of the query. Known values are: "PT5S",
         "PT10S", "PT1M", "PT5M", and "PT1H". Default value is None.
        :paramtype interval: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "filters": [
                        {
                            "name": "str",  # Optional. The invariant metadata name.
                            "values": [
                                "str"  # Optional. The metadata values. Maximum
                                  values can be 20.
                            ]
                        }
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "interval": "str",  # Optional. The interval (window size) for which the
                      metric data was returned in. This may be adjusted in the future and returned back
                      from what was originally requested. This is not present if a metadata request was
                      made.
                    "namespace": "str",  # Optional. The namespace of the metrics being queried.
                    "testRunId": "str",  # Optional. Test run identifier.
                    "timespan": "str",  # Optional. The timespan for which the data was
                      retrieved. Its value consists of two datetimes concatenated, separated by '/'.
                      This may be adjusted in the future and returned back from what was originally
                      requested.
                    "value": {
                        "name": {
                            "localizedValue": "str",  # Optional. The locale specific
                              value.
                            "value": "str"  # Optional. The invariant value.
                        },
                        "timeseries": [
                            {
                                "data": [
                                    {
                                        "average": 0.0,  # Optional. The
                                          average value in the time range.
                                        "count": 0.0,  # Optional. The number
                                          of samples in the time range. Can be used to determine the
                                          number of values that contributed to the average value.
                                        "maximum": 0.0,  # Optional. The
                                          greatest value in the time range.
                                        "minimum": 0.0,  # Optional. The
                                          least value in the time range.
                                        "percentile90": 0.0,  # Optional.
                                          90th percentile value in the time range.
                                        "percentile95": 0.0,  # Optional.
                                          95th percentile value in the time range.
                                        "percentile99": 0.0,  # Optional.
                                          99th percentile value in the time range.
                                        "timeStamp": "str",  # Optional. The
                                          timestamp for the metric value in ISO 8601 format.
                                        "total": 0.0  # Optional. The sum of
                                          all of the values in the time range.
                                    }
                                ],
                                "metadatavalues": [
                                    {
                                        "name": {
                                            "localizedValue": "str",  #
                                              Optional. The locale specific value.
                                            "value": "str"  # Optional.
                                              The invariant value.
                                        },
                                        "value": "str"  # Optional. The value
                                          of the metadata.
                                    }
                                ]
                            }
                        ],
                        "unit": "str"  # Optional. The unit of the metric. Known values are:
                          "NotSpecified", "Percent", "Count", "Seconds", "Milliseconds", "Bytes",
                          "BytesPerSecond", and "CountPerSecond".
                    }
                }
        """

    @overload
    def get_metrics(
        self,
        test_run_id: str,
        body: Optional[IO] = None,
        *,
        metricname: str,
        metric_namespace: str,
        result_type: str,
        timespan: str,
        aggregation: Optional[str] = None,
        interval: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Lists the metric values for a load test run.

        Lists the metric values for a load test run.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: Metric metadata filter to fetch the set of metric. Default value is None.
        :type body: IO
        :keyword metricname: Metric name. Required.
        :paramtype metricname: str
        :keyword metric_namespace: Metric namespace to query metric definitions for. Required.
        :paramtype metric_namespace: str
        :keyword result_type: Reduces the set of data collected. The syntax allowed depends on the
         operation. See the operation's description for details. Known values are: "Data" and
         "Metadata". Required.
        :paramtype result_type: str
        :keyword timespan: The timespan of the query. It is a string with the following format
         'startDateTime_ISO/endDateTime_ISO'. Required.
        :paramtype timespan: str
        :keyword aggregation: The list of aggregation types (comma separated) to retrieve. Default
         value is None.
        :paramtype aggregation: str
        :keyword interval: The interval (i.e. timegrain) of the query. Known values are: "PT5S",
         "PT10S", "PT1M", "PT5M", and "PT1H". Default value is None.
        :paramtype interval: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "interval": "str",  # Optional. The interval (window size) for which the
                      metric data was returned in. This may be adjusted in the future and returned back
                      from what was originally requested. This is not present if a metadata request was
                      made.
                    "namespace": "str",  # Optional. The namespace of the metrics being queried.
                    "testRunId": "str",  # Optional. Test run identifier.
                    "timespan": "str",  # Optional. The timespan for which the data was
                      retrieved. Its value consists of two datetimes concatenated, separated by '/'.
                      This may be adjusted in the future and returned back from what was originally
                      requested.
                    "value": {
                        "name": {
                            "localizedValue": "str",  # Optional. The locale specific
                              value.
                            "value": "str"  # Optional. The invariant value.
                        },
                        "timeseries": [
                            {
                                "data": [
                                    {
                                        "average": 0.0,  # Optional. The
                                          average value in the time range.
                                        "count": 0.0,  # Optional. The number
                                          of samples in the time range. Can be used to determine the
                                          number of values that contributed to the average value.
                                        "maximum": 0.0,  # Optional. The
                                          greatest value in the time range.
                                        "minimum": 0.0,  # Optional. The
                                          least value in the time range.
                                        "percentile90": 0.0,  # Optional.
                                          90th percentile value in the time range.
                                        "percentile95": 0.0,  # Optional.
                                          95th percentile value in the time range.
                                        "percentile99": 0.0,  # Optional.
                                          99th percentile value in the time range.
                                        "timeStamp": "str",  # Optional. The
                                          timestamp for the metric value in ISO 8601 format.
                                        "total": 0.0  # Optional. The sum of
                                          all of the values in the time range.
                                    }
                                ],
                                "metadatavalues": [
                                    {
                                        "name": {
                                            "localizedValue": "str",  #
                                              Optional. The locale specific value.
                                            "value": "str"  # Optional.
                                              The invariant value.
                                        },
                                        "value": "str"  # Optional. The value
                                          of the metadata.
                                    }
                                ]
                            }
                        ],
                        "unit": "str"  # Optional. The unit of the metric. Known values are:
                          "NotSpecified", "Percent", "Count", "Seconds", "Milliseconds", "Bytes",
                          "BytesPerSecond", and "CountPerSecond".
                    }
                }
        """

    @distributed_trace
    def get_metrics(
        self,
        test_run_id: str,
        body: Optional[Union[JSON, IO]] = None,
        *,
        metricname: str,
        metric_namespace: str,
        result_type: str,
        timespan: str,
        aggregation: Optional[str] = None,
        interval: Optional[str] = None,
        **kwargs: Any
    ) -> JSON:
        """Lists the metric values for a load test run.

        Lists the metric values for a load test run.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: Metric metadata filter to fetch the set of metric. Is either a model type or a IO
         type. Default value is None.
        :type body: JSON or IO
        :keyword metricname: Metric name. Required.
        :paramtype metricname: str
        :keyword metric_namespace: Metric namespace to query metric definitions for. Required.
        :paramtype metric_namespace: str
        :keyword result_type: Reduces the set of data collected. The syntax allowed depends on the
         operation. See the operation's description for details. Known values are: "Data" and
         "Metadata". Required.
        :paramtype result_type: str
        :keyword timespan: The timespan of the query. It is a string with the following format
         'startDateTime_ISO/endDateTime_ISO'. Required.
        :paramtype timespan: str
        :keyword aggregation: The list of aggregation types (comma separated) to retrieve. Default
         value is None.
        :paramtype aggregation: str
        :keyword interval: The interval (i.e. timegrain) of the query. Known values are: "PT5S",
         "PT10S", "PT1M", "PT5M", and "PT1H". Default value is None.
        :paramtype interval: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "interval": "str",  # Optional. The interval (window size) for which the
                      metric data was returned in. This may be adjusted in the future and returned back
                      from what was originally requested. This is not present if a metadata request was
                      made.
                    "namespace": "str",  # Optional. The namespace of the metrics being queried.
                    "testRunId": "str",  # Optional. Test run identifier.
                    "timespan": "str",  # Optional. The timespan for which the data was
                      retrieved. Its value consists of two datetimes concatenated, separated by '/'.
                      This may be adjusted in the future and returned back from what was originally
                      requested.
                    "value": {
                        "name": {
                            "localizedValue": "str",  # Optional. The locale specific
                              value.
                            "value": "str"  # Optional. The invariant value.
                        },
                        "timeseries": [
                            {
                                "data": [
                                    {
                                        "average": 0.0,  # Optional. The
                                          average value in the time range.
                                        "count": 0.0,  # Optional. The number
                                          of samples in the time range. Can be used to determine the
                                          number of values that contributed to the average value.
                                        "maximum": 0.0,  # Optional. The
                                          greatest value in the time range.
                                        "minimum": 0.0,  # Optional. The
                                          least value in the time range.
                                        "percentile90": 0.0,  # Optional.
                                          90th percentile value in the time range.
                                        "percentile95": 0.0,  # Optional.
                                          95th percentile value in the time range.
                                        "percentile99": 0.0,  # Optional.
                                          99th percentile value in the time range.
                                        "timeStamp": "str",  # Optional. The
                                          timestamp for the metric value in ISO 8601 format.
                                        "total": 0.0  # Optional. The sum of
                                          all of the values in the time range.
                                    }
                                ],
                                "metadatavalues": [
                                    {
                                        "name": {
                                            "localizedValue": "str",  #
                                              Optional. The locale specific value.
                                            "value": "str"  # Optional.
                                              The invariant value.
                                        },
                                        "value": "str"  # Optional. The value
                                          of the metadata.
                                    }
                                ]
                            }
                        ],
                        "unit": "str"  # Optional. The unit of the metric. Known values are:
                          "NotSpecified", "Percent", "Count", "Seconds", "Milliseconds", "Bytes",
                          "BytesPerSecond", and "CountPerSecond".
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        request = build_load_test_run_get_metrics_request(
            test_run_id=test_run_id,
            metricname=metricname,
            metric_namespace=metric_namespace,
            result_type=result_type,
            timespan=timespan,
            aggregation=aggregation,
            interval=interval,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    def create_or_update_app_component(
        self, test_run_id: str, body: JSON, *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> JSON:
        """Associate an app component (collection of azure resources) to a test run.

        Associate an app component (collection of azure resources) to a test run.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: App Component model. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "components": {
                        "str": {
                            "displayName": "str",  # Optional. Azure resource display
                              name.
                            "kind": "str",  # Optional. Kind of Azure resource type.
                            "resourceGroup": "str",  # Optional. Resource group name of
                              the Azure resource.
                            "resourceId": "str",  # Optional. fully qualified resource Id
                              e.g
                              subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
                            "resourceName": "str",  # Optional. Azure resource name,
                              required while creating the app component.
                            "resourceType": "str",  # Optional. Azure resource type,
                              required while creating the app component.
                            "subscriptionId": "str"  # Optional. Subscription Id of the
                              Azure resource.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "testRunId": "str"  # Optional. Test run identifier.
                }

                # response body for status code(s): 200, 201
                response == {
                    "components": {
                        "str": {
                            "displayName": "str",  # Optional. Azure resource display
                              name.
                            "kind": "str",  # Optional. Kind of Azure resource type.
                            "resourceGroup": "str",  # Optional. Resource group name of
                              the Azure resource.
                            "resourceId": "str",  # Optional. fully qualified resource Id
                              e.g
                              subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
                            "resourceName": "str",  # Optional. Azure resource name,
                              required while creating the app component.
                            "resourceType": "str",  # Optional. Azure resource type,
                              required while creating the app component.
                            "subscriptionId": "str"  # Optional. Subscription Id of the
                              Azure resource.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "testRunId": "str"  # Optional. Test run identifier.
                }
        """

    @overload
    def create_or_update_app_component(
        self, test_run_id: str, body: IO, *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> JSON:
        """Associate an app component (collection of azure resources) to a test run.

        Associate an app component (collection of azure resources) to a test run.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: App Component model. Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "components": {
                        "str": {
                            "displayName": "str",  # Optional. Azure resource display
                              name.
                            "kind": "str",  # Optional. Kind of Azure resource type.
                            "resourceGroup": "str",  # Optional. Resource group name of
                              the Azure resource.
                            "resourceId": "str",  # Optional. fully qualified resource Id
                              e.g
                              subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
                            "resourceName": "str",  # Optional. Azure resource name,
                              required while creating the app component.
                            "resourceType": "str",  # Optional. Azure resource type,
                              required while creating the app component.
                            "subscriptionId": "str"  # Optional. Subscription Id of the
                              Azure resource.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "testRunId": "str"  # Optional. Test run identifier.
                }
        """

    @distributed_trace
    def create_or_update_app_component(self, test_run_id: str, body: Union[JSON, IO], **kwargs: Any) -> JSON:
        """Associate an app component (collection of azure resources) to a test run.

        Associate an app component (collection of azure resources) to a test run.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: App Component model. Is either a model type or a IO type. Required.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are:
         'application/merge-patch+json'. Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "components": {
                        "str": {
                            "displayName": "str",  # Optional. Azure resource display
                              name.
                            "kind": "str",  # Optional. Kind of Azure resource type.
                            "resourceGroup": "str",  # Optional. Resource group name of
                              the Azure resource.
                            "resourceId": "str",  # Optional. fully qualified resource Id
                              e.g
                              subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
                            "resourceName": "str",  # Optional. Azure resource name,
                              required while creating the app component.
                            "resourceType": "str",  # Optional. Azure resource type,
                              required while creating the app component.
                            "subscriptionId": "str"  # Optional. Subscription Id of the
                              Azure resource.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "testRunId": "str"  # Optional. Test run identifier.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/merge-patch+json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = body

        request = build_load_test_run_create_or_update_app_component_request(
            test_run_id=test_run_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def get_app_components(self, test_run_id: str, **kwargs: Any) -> JSON:
        """Get associated app component (collection of azure resources) for the given test run.

        Get associated app component (collection of azure resources) for the given test run.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "components": {
                        "str": {
                            "displayName": "str",  # Optional. Azure resource display
                              name.
                            "kind": "str",  # Optional. Kind of Azure resource type.
                            "resourceGroup": "str",  # Optional. Resource group name of
                              the Azure resource.
                            "resourceId": "str",  # Optional. fully qualified resource Id
                              e.g
                              subscriptions/{subId}/resourceGroups/{rg}/providers/Microsoft.LoadTestService/loadtests/{resName}.
                            "resourceName": "str",  # Optional. Azure resource name,
                              required while creating the app component.
                            "resourceType": "str",  # Optional. Azure resource type,
                              required while creating the app component.
                            "subscriptionId": "str"  # Optional. Subscription Id of the
                              Azure resource.
                        }
                    },
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "testRunId": "str"  # Optional. Test run identifier.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_load_test_run_get_app_components_request(
            test_run_id=test_run_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    def create_or_update_server_metrics_config(
        self, test_run_id: str, body: JSON, *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> JSON:
        """Configure server metrics for a test run.

        Configure server metrics for a test run.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: Server metric configuration model. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "metrics": {
                        "str": {
                            "aggregation": "str",  # Metric aggregation. Required.
                            "metricNamespace": "str",  # Metric name space. Required.
                            "name": {
                                "localizedValue": "str",  # Optional. The locale
                                  specific value.
                                "value": "str"  # Optional. The invariant value.
                            },
                            "resourceId": "str",  # Azure resource id. Required.
                            "resourceType": "str",  # Azure resource type. Required.
                            "displayDescription": "str",  # Optional. Metric description.
                            "id": "str",  # Optional. Unique name for metric.
                            "unit": "str"  # Optional. Metric unit.
                        }
                    },
                    "testRunId": "str"  # Optional. Test run identifier.
                }

                # response body for status code(s): 200, 201
                response == {
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "metrics": {
                        "str": {
                            "aggregation": "str",  # Metric aggregation. Required.
                            "metricNamespace": "str",  # Metric name space. Required.
                            "name": {
                                "localizedValue": "str",  # Optional. The locale
                                  specific value.
                                "value": "str"  # Optional. The invariant value.
                            },
                            "resourceId": "str",  # Azure resource id. Required.
                            "resourceType": "str",  # Azure resource type. Required.
                            "displayDescription": "str",  # Optional. Metric description.
                            "id": "str",  # Optional. Unique name for metric.
                            "unit": "str"  # Optional. Metric unit.
                        }
                    },
                    "testRunId": "str"  # Optional. Test run identifier.
                }
        """

    @overload
    def create_or_update_server_metrics_config(
        self, test_run_id: str, body: IO, *, content_type: str = "application/merge-patch+json", **kwargs: Any
    ) -> JSON:
        """Configure server metrics for a test run.

        Configure server metrics for a test run.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: Server metric configuration model. Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "metrics": {
                        "str": {
                            "aggregation": "str",  # Metric aggregation. Required.
                            "metricNamespace": "str",  # Metric name space. Required.
                            "name": {
                                "localizedValue": "str",  # Optional. The locale
                                  specific value.
                                "value": "str"  # Optional. The invariant value.
                            },
                            "resourceId": "str",  # Azure resource id. Required.
                            "resourceType": "str",  # Azure resource type. Required.
                            "displayDescription": "str",  # Optional. Metric description.
                            "id": "str",  # Optional. Unique name for metric.
                            "unit": "str"  # Optional. Metric unit.
                        }
                    },
                    "testRunId": "str"  # Optional. Test run identifier.
                }
        """

    @distributed_trace
    def create_or_update_server_metrics_config(self, test_run_id: str, body: Union[JSON, IO], **kwargs: Any) -> JSON:
        """Configure server metrics for a test run.

        Configure server metrics for a test run.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :param body: Server metric configuration model. Is either a model type or a IO type. Required.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are:
         'application/merge-patch+json'. Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "metrics": {
                        "str": {
                            "aggregation": "str",  # Metric aggregation. Required.
                            "metricNamespace": "str",  # Metric name space. Required.
                            "name": {
                                "localizedValue": "str",  # Optional. The locale
                                  specific value.
                                "value": "str"  # Optional. The invariant value.
                            },
                            "resourceId": "str",  # Azure resource id. Required.
                            "resourceType": "str",  # Azure resource type. Required.
                            "displayDescription": "str",  # Optional. Metric description.
                            "id": "str",  # Optional. Unique name for metric.
                            "unit": "str"  # Optional. Metric unit.
                        }
                    },
                    "testRunId": "str"  # Optional. Test run identifier.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        content_type = content_type or "application/merge-patch+json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = body

        request = build_load_test_run_create_or_update_server_metrics_config_request(
            test_run_id=test_run_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def get_server_metrics_config(self, test_run_id: str, **kwargs: Any) -> JSON:
        """Get server metric configuration for the given test run.

        Get server metric configuration for the given test run.

        :param test_run_id: Unique name for the load test run, must contain only lower-case alphabetic,
         numeric, underscore or hyphen characters. Required.
        :type test_run_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "createdBy": "str",  # Optional. The user that created.
                    "createdDateTime": "2020-02-20 00:00:00",  # Optional. The creation
                      datetime(ISO 8601 literal format).
                    "lastModifiedBy": "str",  # Optional. The user that last modified.
                    "lastModifiedDateTime": "2020-02-20 00:00:00",  # Optional. The last Modified
                      datetime(ISO 8601 literal format).
                    "metrics": {
                        "str": {
                            "aggregation": "str",  # Metric aggregation. Required.
                            "metricNamespace": "str",  # Metric name space. Required.
                            "name": {
                                "localizedValue": "str",  # Optional. The locale
                                  specific value.
                                "value": "str"  # Optional. The invariant value.
                            },
                            "resourceId": "str",  # Azure resource id. Required.
                            "resourceType": "str",  # Azure resource type. Required.
                            "displayDescription": "str",  # Optional. Metric description.
                            "id": "str",  # Optional. Unique name for metric.
                            "unit": "str"  # Optional. Metric unit.
                        }
                    },
                    "testRunId": "str"  # Optional. Test run identifier.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[JSON]

        request = build_load_test_run_get_server_metrics_config_request(
            test_run_id=test_run_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "Endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)
