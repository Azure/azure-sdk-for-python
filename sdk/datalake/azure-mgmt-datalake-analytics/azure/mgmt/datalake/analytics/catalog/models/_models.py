# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class Acl(Model):
    """A Data Lake Analytics catalog access control list (ACL) entry.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar ace_type: the access control list (ACL) entry type. UserObj and
     GroupObj denote the owning user and group, respectively. Possible values
     include: 'UserObj', 'GroupObj', 'Other', 'User', 'Group'
    :vartype ace_type: str or
     ~azure.mgmt.datalake.analytics.catalog.models.AclType
    :ivar principal_id: the Azure AD object ID of the user or group being
     specified in the access control list (ACL) entry.
    :vartype principal_id: str
    :ivar permission: the permission type of the access control list (ACL)
     entry. Possible values include: 'None', 'Use', 'Create', 'Drop', 'Alter',
     'Write', 'All'
    :vartype permission: str or
     ~azure.mgmt.datalake.analytics.catalog.models.PermissionType
    """

    _validation = {
        'ace_type': {'readonly': True},
        'principal_id': {'readonly': True},
        'permission': {'readonly': True},
    }

    _attribute_map = {
        'ace_type': {'key': 'aceType', 'type': 'str'},
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'permission': {'key': 'permission', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Acl, self).__init__(**kwargs)
        self.ace_type = None
        self.principal_id = None
        self.permission = None


class AclCreateOrUpdateParameters(Model):
    """The parameters used to create or update an access control list (ACL) entry.

    All required parameters must be populated in order to send to Azure.

    :param ace_type: Required. the access control list (ACL) entry type.
     UserObj and GroupObj denote the owning user and group, respectively.
     Possible values include: 'UserObj', 'GroupObj', 'Other', 'User', 'Group'
    :type ace_type: str or
     ~azure.mgmt.datalake.analytics.catalog.models.AclType
    :param principal_id: Required. the Azure AD object ID of the user or group
     being specified in the access control list (ACL) entry.
    :type principal_id: str
    :param permission: Required. the permission type of the access control
     list (ACL) entry. Possible values include: 'None', 'Use', 'Create',
     'Drop', 'Alter', 'Write', 'All'
    :type permission: str or
     ~azure.mgmt.datalake.analytics.catalog.models.PermissionType
    """

    _validation = {
        'ace_type': {'required': True},
        'principal_id': {'required': True},
        'permission': {'required': True},
    }

    _attribute_map = {
        'ace_type': {'key': 'aceType', 'type': 'str'},
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'permission': {'key': 'permission', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AclCreateOrUpdateParameters, self).__init__(**kwargs)
        self.ace_type = kwargs.get('ace_type', None)
        self.principal_id = kwargs.get('principal_id', None)
        self.permission = kwargs.get('permission', None)


class AclDeleteParameters(Model):
    """The parameters used to delete an access control list (ACL) entry.

    All required parameters must be populated in order to send to Azure.

    :param ace_type: Required. the access control list (ACL) entry type.
     UserObj and GroupObj denote the owning user and group, respectively.
     Possible values include: 'UserObj', 'GroupObj', 'Other', 'User', 'Group'
    :type ace_type: str or
     ~azure.mgmt.datalake.analytics.catalog.models.AclType
    :param principal_id: Required. the Azure AD object ID of the user or group
     being specified in the access control list (ACL) entry.
    :type principal_id: str
    """

    _validation = {
        'ace_type': {'required': True},
        'principal_id': {'required': True},
    }

    _attribute_map = {
        'ace_type': {'key': 'aceType', 'type': 'str'},
        'principal_id': {'key': 'principalId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AclDeleteParameters, self).__init__(**kwargs)
        self.ace_type = kwargs.get('ace_type', None)
        self.principal_id = kwargs.get('principal_id', None)


class CatalogItem(Model):
    """A Data Lake Analytics catalog item.

    :param compute_account_name: the name of the Data Lake Analytics account.
    :type compute_account_name: str
    :param version: the version of the catalog item.
    :type version: str
    """

    _attribute_map = {
        'compute_account_name': {'key': 'computeAccountName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(CatalogItem, self).__init__(**kwargs)
        self.compute_account_name = kwargs.get('compute_account_name', None)
        self.version = kwargs.get('version', None)


class CatalogItemList(Model):
    """A Data Lake Analytics catalog item list.

    :param next_link: the link to the next page of results.
    :type next_link: str
    """

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(CatalogItemList, self).__init__(**kwargs)
        self.next_link = kwargs.get('next_link', None)


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class DataLakeAnalyticsCatalogCredentialCreateParameters(Model):
    """Data Lake Analytics catalog credential creation parameters.

    All required parameters must be populated in order to send to Azure.

    :param password: Required. the password for the credential and user with
     access to the data source.
    :type password: str
    :param uri: Required. the URI identifier for the data source this
     credential can connect to in the format <hostname>:<port>
    :type uri: str
    :param user_id: Required. the object identifier for the user associated
     with this credential with access to the data source.
    :type user_id: str
    """

    _validation = {
        'password': {'required': True},
        'uri': {'required': True},
        'user_id': {'required': True},
    }

    _attribute_map = {
        'password': {'key': 'password', 'type': 'str'},
        'uri': {'key': 'uri', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(DataLakeAnalyticsCatalogCredentialCreateParameters, self).__init__(**kwargs)
        self.password = kwargs.get('password', None)
        self.uri = kwargs.get('uri', None)
        self.user_id = kwargs.get('user_id', None)


class DataLakeAnalyticsCatalogCredentialDeleteParameters(Model):
    """Data Lake Analytics catalog credential deletion parameters.

    :param password: the current password for the credential and user with
     access to the data source. This is required if the requester is not the
     account owner.
    :type password: str
    """

    _attribute_map = {
        'password': {'key': 'password', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(DataLakeAnalyticsCatalogCredentialDeleteParameters, self).__init__(**kwargs)
        self.password = kwargs.get('password', None)


class DataLakeAnalyticsCatalogCredentialUpdateParameters(Model):
    """Data Lake Analytics catalog credential update parameters.

    :param password: the current password for the credential and user with
     access to the data source. This is required if the requester is not the
     account owner.
    :type password: str
    :param new_password: the new password for the credential and user with
     access to the data source.
    :type new_password: str
    :param uri: the URI identifier for the data source this credential can
     connect to in the format <hostname>:<port>
    :type uri: str
    :param user_id: the object identifier for the user associated with this
     credential with access to the data source.
    :type user_id: str
    """

    _attribute_map = {
        'password': {'key': 'password', 'type': 'str'},
        'new_password': {'key': 'newPassword', 'type': 'str'},
        'uri': {'key': 'uri', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(DataLakeAnalyticsCatalogCredentialUpdateParameters, self).__init__(**kwargs)
        self.password = kwargs.get('password', None)
        self.new_password = kwargs.get('new_password', None)
        self.uri = kwargs.get('uri', None)
        self.user_id = kwargs.get('user_id', None)


class DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters(Model):
    """Data Lake Analytics catalog secret creation and update parameters. This is
    deprecated and will be removed in the next release. Please use
    DataLakeAnalyticsCatalogCredentialCreateOrUpdateParameters instead.

    All required parameters must be populated in order to send to Azure.

    :param password: Required. the password for the secret to pass in
    :type password: str
    :param uri: the URI identifier for the secret in the format
     <hostname>:<port>
    :type uri: str
    """

    _validation = {
        'password': {'required': True},
    }

    _attribute_map = {
        'password': {'key': 'password', 'type': 'str'},
        'uri': {'key': 'uri', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters, self).__init__(**kwargs)
        self.password = kwargs.get('password', None)
        self.uri = kwargs.get('uri', None)


class DdlName(Model):
    """A Data Lake Analytics DDL name item.

    :param first_part: the name of the table associated with this database and
     schema.
    :type first_part: str
    :param second_part: the name of the table associated with this database
     and schema.
    :type second_part: str
    :param third_part: the name of the table associated with this database and
     schema.
    :type third_part: str
    :param server: the name of the table associated with this database and
     schema.
    :type server: str
    """

    _attribute_map = {
        'first_part': {'key': 'firstPart', 'type': 'str'},
        'second_part': {'key': 'secondPart', 'type': 'str'},
        'third_part': {'key': 'thirdPart', 'type': 'str'},
        'server': {'key': 'server', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(DdlName, self).__init__(**kwargs)
        self.first_part = kwargs.get('first_part', None)
        self.second_part = kwargs.get('second_part', None)
        self.third_part = kwargs.get('third_part', None)
        self.server = kwargs.get('server', None)


class EntityId(Model):
    """A Data Lake Analytics catalog entity identifier object.

    :param name: the name of the external table associated with this database,
     schema and table.
    :type name: ~azure.mgmt.datalake.analytics.catalog.models.DdlName
    :param version: the version of the external data source.
    :type version: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'DdlName'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EntityId, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.version = kwargs.get('version', None)


class ExternalTable(Model):
    """A Data Lake Analytics catalog external table item.

    :param table_name: the name of the table associated with this database and
     schema.
    :type table_name: str
    :param data_source: the data source associated with this external table.
    :type data_source: ~azure.mgmt.datalake.analytics.catalog.models.EntityId
    """

    _attribute_map = {
        'table_name': {'key': 'tableName', 'type': 'str'},
        'data_source': {'key': 'dataSource', 'type': 'EntityId'},
    }

    def __init__(self, **kwargs):
        super(ExternalTable, self).__init__(**kwargs)
        self.table_name = kwargs.get('table_name', None)
        self.data_source = kwargs.get('data_source', None)


class TypeFieldInfo(Model):
    """A Data Lake Analytics catalog type field information item.

    :param name: the name of the field associated with this type.
    :type name: str
    :param type: the type of the field.
    :type type: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(TypeFieldInfo, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.type = kwargs.get('type', None)


class USqlAssembly(CatalogItem):
    """A Data Lake Analytics catalog U-SQL Assembly.

    :param compute_account_name: the name of the Data Lake Analytics account.
    :type compute_account_name: str
    :param version: the version of the catalog item.
    :type version: str
    :param database_name: the name of the database.
    :type database_name: str
    :param name: the name of the assembly.
    :type name: str
    :param clr_name: the name of the CLR.
    :type clr_name: str
    :param is_visible: the switch indicating if this assembly is visible or
     not.
    :type is_visible: bool
    :param is_user_defined: the switch indicating if this assembly is user
     defined or not.
    :type is_user_defined: bool
    :param files: the list of files associated with the assembly
    :type files:
     list[~azure.mgmt.datalake.analytics.catalog.models.USqlAssemblyFileInfo]
    :param dependencies: the list of dependencies associated with the assembly
    :type dependencies:
     list[~azure.mgmt.datalake.analytics.catalog.models.USqlAssemblyDependencyInfo]
    """

    _attribute_map = {
        'compute_account_name': {'key': 'computeAccountName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'database_name': {'key': 'databaseName', 'type': 'str'},
        'name': {'key': 'assemblyName', 'type': 'str'},
        'clr_name': {'key': 'clrName', 'type': 'str'},
        'is_visible': {'key': 'isVisible', 'type': 'bool'},
        'is_user_defined': {'key': 'isUserDefined', 'type': 'bool'},
        'files': {'key': 'files', 'type': '[USqlAssemblyFileInfo]'},
        'dependencies': {'key': 'dependencies', 'type': '[USqlAssemblyDependencyInfo]'},
    }

    def __init__(self, **kwargs):
        super(USqlAssembly, self).__init__(**kwargs)
        self.database_name = kwargs.get('database_name', None)
        self.name = kwargs.get('name', None)
        self.clr_name = kwargs.get('clr_name', None)
        self.is_visible = kwargs.get('is_visible', None)
        self.is_user_defined = kwargs.get('is_user_defined', None)
        self.files = kwargs.get('files', None)
        self.dependencies = kwargs.get('dependencies', None)


class USqlAssemblyClr(CatalogItem):
    """A Data Lake Analytics catalog U-SQL assembly CLR item.

    :param compute_account_name: the name of the Data Lake Analytics account.
    :type compute_account_name: str
    :param version: the version of the catalog item.
    :type version: str
    :param database_name: the name of the database.
    :type database_name: str
    :param name: the name of the assembly.
    :type name: str
    :param clr_name: the name of the CLR.
    :type clr_name: str
    """

    _attribute_map = {
        'compute_account_name': {'key': 'computeAccountName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'database_name': {'key': 'databaseName', 'type': 'str'},
        'name': {'key': 'assemblyClrName', 'type': 'str'},
        'clr_name': {'key': 'clrName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(USqlAssemblyClr, self).__init__(**kwargs)
        self.database_name = kwargs.get('database_name', None)
        self.name = kwargs.get('name', None)
        self.clr_name = kwargs.get('clr_name', None)


class USqlAssemblyDependencyInfo(Model):
    """A Data Lake Analytics catalog U-SQL dependency information item.

    :param entity_id: the EntityId of the dependency.
    :type entity_id: ~azure.mgmt.datalake.analytics.catalog.models.EntityId
    """

    _attribute_map = {
        'entity_id': {'key': 'entityId', 'type': 'EntityId'},
    }

    def __init__(self, **kwargs):
        super(USqlAssemblyDependencyInfo, self).__init__(**kwargs)
        self.entity_id = kwargs.get('entity_id', None)


class USqlAssemblyFileInfo(Model):
    """A Data Lake Analytics catalog U-SQL assembly file information item.

    :param type: the assembly file type. Possible values include: 'Assembly',
     'Resource', 'Nodeploy'
    :type type: str or ~azure.mgmt.datalake.analytics.catalog.models.FileType
    :param original_path: The original path to the assembly file.
    :type original_path: str
    :param content_path: The content path to the assembly file.
    :type content_path: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'original_path': {'key': 'originalPath', 'type': 'str'},
        'content_path': {'key': 'contentPath', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(USqlAssemblyFileInfo, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.original_path = kwargs.get('original_path', None)
        self.content_path = kwargs.get('content_path', None)


class USqlCredential(CatalogItem):
    """A Data Lake Analytics catalog U-SQL credential item.

    :param compute_account_name: the name of the Data Lake Analytics account.
    :type compute_account_name: str
    :param version: the version of the catalog item.
    :type version: str
    :param name: the name of the credential.
    :type name: str
    """

    _attribute_map = {
        'compute_account_name': {'key': 'computeAccountName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'name': {'key': 'credentialName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(USqlCredential, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)


class USqlDatabase(CatalogItem):
    """A Data Lake Analytics catalog U-SQL database item.

    :param compute_account_name: the name of the Data Lake Analytics account.
    :type compute_account_name: str
    :param version: the version of the catalog item.
    :type version: str
    :param name: the name of the database.
    :type name: str
    """

    _attribute_map = {
        'compute_account_name': {'key': 'computeAccountName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'name': {'key': 'databaseName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(USqlDatabase, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)


class USqlDirectedColumn(Model):
    """A Data Lake Analytics catalog U-SQL directed column item.

    :param name: the name of the index in the table.
    :type name: str
    :param descending: the switch indicating if the index is descending or
     not.
    :type descending: bool
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'descending': {'key': 'descending', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(USqlDirectedColumn, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.descending = kwargs.get('descending', None)


class USqlDistributionInfo(Model):
    """A Data Lake Analytics catalog U-SQL distribution information object.

    :param type: the type of this distribution.
    :type type: int
    :param keys: the list of directed columns in the distribution
    :type keys:
     list[~azure.mgmt.datalake.analytics.catalog.models.USqlDirectedColumn]
    :param count: the count of indices using this distribution.
    :type count: int
    :param dynamic_count: the dynamic count of indices using this
     distribution.
    :type dynamic_count: int
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'int'},
        'keys': {'key': 'keys', 'type': '[USqlDirectedColumn]'},
        'count': {'key': 'count', 'type': 'int'},
        'dynamic_count': {'key': 'dynamicCount', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(USqlDistributionInfo, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.keys = kwargs.get('keys', None)
        self.count = kwargs.get('count', None)
        self.dynamic_count = kwargs.get('dynamic_count', None)


class USqlExternalDataSource(CatalogItem):
    """A Data Lake Analytics catalog U-SQL external datasource item.

    :param compute_account_name: the name of the Data Lake Analytics account.
    :type compute_account_name: str
    :param version: the version of the catalog item.
    :type version: str
    :param database_name: the name of the database.
    :type database_name: str
    :param name: the name of the external data source.
    :type name: str
    :param provider: the name of the provider for the external data source.
    :type provider: str
    :param provider_string: the name of the provider string for the external
     data source.
    :type provider_string: str
    :param pushdown_types: the list of types to push down from the external
     data source.
    :type pushdown_types: list[str]
    """

    _attribute_map = {
        'compute_account_name': {'key': 'computeAccountName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'database_name': {'key': 'databaseName', 'type': 'str'},
        'name': {'key': 'externalDataSourceName', 'type': 'str'},
        'provider': {'key': 'provider', 'type': 'str'},
        'provider_string': {'key': 'providerString', 'type': 'str'},
        'pushdown_types': {'key': 'pushdownTypes', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(USqlExternalDataSource, self).__init__(**kwargs)
        self.database_name = kwargs.get('database_name', None)
        self.name = kwargs.get('name', None)
        self.provider = kwargs.get('provider', None)
        self.provider_string = kwargs.get('provider_string', None)
        self.pushdown_types = kwargs.get('pushdown_types', None)


class USqlIndex(Model):
    """A Data Lake Analytics catalog U-SQL table index item.

    :param name: the name of the index in the table.
    :type name: str
    :param index_keys: the list of directed columns in the index
    :type index_keys:
     list[~azure.mgmt.datalake.analytics.catalog.models.USqlDirectedColumn]
    :param columns: the list of columns in the index
    :type columns: list[str]
    :param distribution_info: the distributions info of the index
    :type distribution_info:
     ~azure.mgmt.datalake.analytics.catalog.models.USqlDistributionInfo
    :param partition_function: partition function ID for the index.
    :type partition_function: str
    :param partition_key_list: the list of partition keys in the index
    :type partition_key_list: list[str]
    :param stream_names: the list of full paths to the streams that contain
     this index in the DataLake account.
    :type stream_names: list[str]
    :param is_columnstore: the switch indicating if this index is a
     columnstore index.
    :type is_columnstore: bool
    :param index_id: the ID of this index within the table.
    :type index_id: int
    :param is_unique: the switch indicating if this index is a unique index.
    :type is_unique: bool
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'index_keys': {'key': 'indexKeys', 'type': '[USqlDirectedColumn]'},
        'columns': {'key': 'columns', 'type': '[str]'},
        'distribution_info': {'key': 'distributionInfo', 'type': 'USqlDistributionInfo'},
        'partition_function': {'key': 'partitionFunction', 'type': 'str'},
        'partition_key_list': {'key': 'partitionKeyList', 'type': '[str]'},
        'stream_names': {'key': 'streamNames', 'type': '[str]'},
        'is_columnstore': {'key': 'isColumnstore', 'type': 'bool'},
        'index_id': {'key': 'indexId', 'type': 'int'},
        'is_unique': {'key': 'isUnique', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(USqlIndex, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.index_keys = kwargs.get('index_keys', None)
        self.columns = kwargs.get('columns', None)
        self.distribution_info = kwargs.get('distribution_info', None)
        self.partition_function = kwargs.get('partition_function', None)
        self.partition_key_list = kwargs.get('partition_key_list', None)
        self.stream_names = kwargs.get('stream_names', None)
        self.is_columnstore = kwargs.get('is_columnstore', None)
        self.index_id = kwargs.get('index_id', None)
        self.is_unique = kwargs.get('is_unique', None)


class USqlPackage(CatalogItem):
    """A Data Lake Analytics catalog U-SQL package item.

    :param compute_account_name: the name of the Data Lake Analytics account.
    :type compute_account_name: str
    :param version: the version of the catalog item.
    :type version: str
    :param database_name: the name of the database containing the package.
    :type database_name: str
    :param schema_name: the name of the schema associated with this package
     and database.
    :type schema_name: str
    :param name: the name of the package.
    :type name: str
    :param definition: the definition of the package.
    :type definition: str
    """

    _attribute_map = {
        'compute_account_name': {'key': 'computeAccountName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'database_name': {'key': 'databaseName', 'type': 'str'},
        'schema_name': {'key': 'schemaName', 'type': 'str'},
        'name': {'key': 'packageName', 'type': 'str'},
        'definition': {'key': 'definition', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(USqlPackage, self).__init__(**kwargs)
        self.database_name = kwargs.get('database_name', None)
        self.schema_name = kwargs.get('schema_name', None)
        self.name = kwargs.get('name', None)
        self.definition = kwargs.get('definition', None)


class USqlProcedure(CatalogItem):
    """A Data Lake Analytics catalog U-SQL procedure item.

    :param compute_account_name: the name of the Data Lake Analytics account.
    :type compute_account_name: str
    :param version: the version of the catalog item.
    :type version: str
    :param database_name: the name of the database.
    :type database_name: str
    :param schema_name: the name of the schema associated with this procedure
     and database.
    :type schema_name: str
    :param name: the name of the procedure.
    :type name: str
    :param definition: the defined query of the procedure.
    :type definition: str
    """

    _attribute_map = {
        'compute_account_name': {'key': 'computeAccountName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'database_name': {'key': 'databaseName', 'type': 'str'},
        'schema_name': {'key': 'schemaName', 'type': 'str'},
        'name': {'key': 'procName', 'type': 'str'},
        'definition': {'key': 'definition', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(USqlProcedure, self).__init__(**kwargs)
        self.database_name = kwargs.get('database_name', None)
        self.schema_name = kwargs.get('schema_name', None)
        self.name = kwargs.get('name', None)
        self.definition = kwargs.get('definition', None)


class USqlSchema(CatalogItem):
    """A Data Lake Analytics catalog U-SQL schema item.

    :param compute_account_name: the name of the Data Lake Analytics account.
    :type compute_account_name: str
    :param version: the version of the catalog item.
    :type version: str
    :param database_name: the name of the database.
    :type database_name: str
    :param name: the name of the schema.
    :type name: str
    """

    _attribute_map = {
        'compute_account_name': {'key': 'computeAccountName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'database_name': {'key': 'databaseName', 'type': 'str'},
        'name': {'key': 'schemaName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(USqlSchema, self).__init__(**kwargs)
        self.database_name = kwargs.get('database_name', None)
        self.name = kwargs.get('name', None)


class USqlSecret(CatalogItem):
    """A Data Lake Analytics catalog U-SQL secret item.

    :param compute_account_name: the name of the Data Lake Analytics account.
    :type compute_account_name: str
    :param version: the version of the catalog item.
    :type version: str
    :param database_name: the name of the database.
    :type database_name: str
    :param name: the name of the secret.
    :type name: str
    :param creation_time: the creation time of the credential object. This is
     the only information returned about a secret from a GET.
    :type creation_time: datetime
    :param uri: the URI identifier for the secret in the format
     <hostname>:<port>
    :type uri: str
    :param password: the password for the secret to pass in
    :type password: str
    """

    _attribute_map = {
        'compute_account_name': {'key': 'computeAccountName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'database_name': {'key': 'databaseName', 'type': 'str'},
        'name': {'key': 'secretName', 'type': 'str'},
        'creation_time': {'key': 'creationTime', 'type': 'iso-8601'},
        'uri': {'key': 'uri', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(USqlSecret, self).__init__(**kwargs)
        self.database_name = kwargs.get('database_name', None)
        self.name = kwargs.get('name', None)
        self.creation_time = kwargs.get('creation_time', None)
        self.uri = kwargs.get('uri', None)
        self.password = kwargs.get('password', None)


class USqlTable(CatalogItem):
    """A Data Lake Analytics catalog U-SQL table item.

    :param compute_account_name: the name of the Data Lake Analytics account.
    :type compute_account_name: str
    :param version: the version of the catalog item.
    :type version: str
    :param database_name: the name of the database.
    :type database_name: str
    :param schema_name: the name of the schema associated with this table and
     database.
    :type schema_name: str
    :param name: the name of the table.
    :type name: str
    :param column_list: the list of columns in this table
    :type column_list:
     list[~azure.mgmt.datalake.analytics.catalog.models.USqlTableColumn]
    :param index_list: the list of indices in this table
    :type index_list:
     list[~azure.mgmt.datalake.analytics.catalog.models.USqlIndex]
    :param partition_key_list: the list of partition keys in the table
    :type partition_key_list: list[str]
    :param external_table: the external table associated with the table.
    :type external_table:
     ~azure.mgmt.datalake.analytics.catalog.models.ExternalTable
    :param distribution_info: the distributions info of the table
    :type distribution_info:
     ~azure.mgmt.datalake.analytics.catalog.models.USqlDistributionInfo
    """

    _attribute_map = {
        'compute_account_name': {'key': 'computeAccountName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'database_name': {'key': 'databaseName', 'type': 'str'},
        'schema_name': {'key': 'schemaName', 'type': 'str'},
        'name': {'key': 'tableName', 'type': 'str'},
        'column_list': {'key': 'columnList', 'type': '[USqlTableColumn]'},
        'index_list': {'key': 'indexList', 'type': '[USqlIndex]'},
        'partition_key_list': {'key': 'partitionKeyList', 'type': '[str]'},
        'external_table': {'key': 'externalTable', 'type': 'ExternalTable'},
        'distribution_info': {'key': 'distributionInfo', 'type': 'USqlDistributionInfo'},
    }

    def __init__(self, **kwargs):
        super(USqlTable, self).__init__(**kwargs)
        self.database_name = kwargs.get('database_name', None)
        self.schema_name = kwargs.get('schema_name', None)
        self.name = kwargs.get('name', None)
        self.column_list = kwargs.get('column_list', None)
        self.index_list = kwargs.get('index_list', None)
        self.partition_key_list = kwargs.get('partition_key_list', None)
        self.external_table = kwargs.get('external_table', None)
        self.distribution_info = kwargs.get('distribution_info', None)


class USqlTableColumn(Model):
    """A Data Lake Analytics catalog U-SQL table column item.

    :param name: the name of the column in the table.
    :type name: str
    :param type: the object type of the specified column (such as
     System.String).
    :type type: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(USqlTableColumn, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.type = kwargs.get('type', None)


class USqlTableFragment(Model):
    """A Data Lake Analytics catalog U-SQL table fragment item.

    :param parent_id: the parent object Id of the table fragment. The parent
     could be a table or table partition.
    :type parent_id: str
    :param fragment_id: the version of the catalog item.
    :type fragment_id: str
    :param index_id: the ordinal of the index which contains the table
     fragment.
    :type index_id: int
    :param size: the data size of the table fragment in bytes.
    :type size: long
    :param row_count: the number of rows in the table fragment.
    :type row_count: long
    :param create_date: the creation time of the table fragment.
    :type create_date: datetime
    :param stream_path: the relative path for the table fragment location.
    :type stream_path: str
    """

    _attribute_map = {
        'parent_id': {'key': 'parentId', 'type': 'str'},
        'fragment_id': {'key': 'fragmentId', 'type': 'str'},
        'index_id': {'key': 'indexId', 'type': 'int'},
        'size': {'key': 'size', 'type': 'long'},
        'row_count': {'key': 'rowCount', 'type': 'long'},
        'create_date': {'key': 'createDate', 'type': 'iso-8601'},
        'stream_path': {'key': 'streamPath', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(USqlTableFragment, self).__init__(**kwargs)
        self.parent_id = kwargs.get('parent_id', None)
        self.fragment_id = kwargs.get('fragment_id', None)
        self.index_id = kwargs.get('index_id', None)
        self.size = kwargs.get('size', None)
        self.row_count = kwargs.get('row_count', None)
        self.create_date = kwargs.get('create_date', None)
        self.stream_path = kwargs.get('stream_path', None)


class USqlTablePartition(CatalogItem):
    """A Data Lake Analytics catalog U-SQL table partition item.

    :param compute_account_name: the name of the Data Lake Analytics account.
    :type compute_account_name: str
    :param version: the version of the catalog item.
    :type version: str
    :param database_name: the name of the database.
    :type database_name: str
    :param schema_name: the name of the schema associated with this table
     partition and database.
    :type schema_name: str
    :param name: the name of the table partition.
    :type name: str
    :param parent_name: the Ddl object of the partition's parent.
    :type parent_name: ~azure.mgmt.datalake.analytics.catalog.models.DdlName
    :param index_id: the index ID for this partition.
    :type index_id: int
    :param label: the list of labels associated with this partition.
    :type label: list[str]
    :param create_date: the creation time of the partition
    :type create_date: datetime
    """

    _attribute_map = {
        'compute_account_name': {'key': 'computeAccountName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'database_name': {'key': 'databaseName', 'type': 'str'},
        'schema_name': {'key': 'schemaName', 'type': 'str'},
        'name': {'key': 'partitionName', 'type': 'str'},
        'parent_name': {'key': 'parentName', 'type': 'DdlName'},
        'index_id': {'key': 'indexId', 'type': 'int'},
        'label': {'key': 'label', 'type': '[str]'},
        'create_date': {'key': 'createDate', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(USqlTablePartition, self).__init__(**kwargs)
        self.database_name = kwargs.get('database_name', None)
        self.schema_name = kwargs.get('schema_name', None)
        self.name = kwargs.get('name', None)
        self.parent_name = kwargs.get('parent_name', None)
        self.index_id = kwargs.get('index_id', None)
        self.label = kwargs.get('label', None)
        self.create_date = kwargs.get('create_date', None)


class USqlTablePreview(Model):
    """A Data Lake Analytics catalog table or partition preview rows item.

    :param total_row_count: the total number of rows in the table or
     partition.
    :type total_row_count: long
    :param total_column_count: the total number of columns in the table or
     partition.
    :type total_column_count: long
    :param rows: the rows of the table or partition preview, where each row is
     an array of string representations the row's values. Note: Byte arrays
     will appear as base-64 encoded values, SqlMap and SqlArray objects will
     appear as escaped JSON objects, and DateTime objects will appear as ISO
     formatted UTC date-times.
    :type rows: list[list[str]]
    :param truncated: true if the amount of data in the response is less than
     expected due to the preview operation's size limitations. This can occur
     if the requested rows or row counts are too large.
    :type truncated: bool
    :param schema: the schema of the table or partition.
    :type schema:
     list[~azure.mgmt.datalake.analytics.catalog.models.USqlTableColumn]
    """

    _attribute_map = {
        'total_row_count': {'key': 'totalRowCount', 'type': 'long'},
        'total_column_count': {'key': 'totalColumnCount', 'type': 'long'},
        'rows': {'key': 'rows', 'type': '[[str]]'},
        'truncated': {'key': 'truncated', 'type': 'bool'},
        'schema': {'key': 'schema', 'type': '[USqlTableColumn]'},
    }

    def __init__(self, **kwargs):
        super(USqlTablePreview, self).__init__(**kwargs)
        self.total_row_count = kwargs.get('total_row_count', None)
        self.total_column_count = kwargs.get('total_column_count', None)
        self.rows = kwargs.get('rows', None)
        self.truncated = kwargs.get('truncated', None)
        self.schema = kwargs.get('schema', None)


class USqlTableStatistics(CatalogItem):
    """A Data Lake Analytics catalog U-SQL table statistics item.

    :param compute_account_name: the name of the Data Lake Analytics account.
    :type compute_account_name: str
    :param version: the version of the catalog item.
    :type version: str
    :param database_name: the name of the database.
    :type database_name: str
    :param schema_name: the name of the schema associated with this table and
     database.
    :type schema_name: str
    :param table_name: the name of the table.
    :type table_name: str
    :param name: the name of the table statistics.
    :type name: str
    :param user_stat_name: the name of the user statistics.
    :type user_stat_name: str
    :param stat_data_path: the path to the statistics data.
    :type stat_data_path: str
    :param create_time: the creation time of the statistics.
    :type create_time: datetime
    :param update_time: the last time the statistics were updated.
    :type update_time: datetime
    :param is_user_created: the switch indicating if these statistics are user
     created.
    :type is_user_created: bool
    :param is_auto_created: the switch indicating if these statistics are
     automatically created.
    :type is_auto_created: bool
    :param has_filter: the switch indicating if these statistics have a
     filter.
    :type has_filter: bool
    :param filter_definition: the filter definition for the statistics.
    :type filter_definition: str
    :param col_names: the list of column names associated with these
     statistics.
    :type col_names: list[str]
    """

    _attribute_map = {
        'compute_account_name': {'key': 'computeAccountName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'database_name': {'key': 'databaseName', 'type': 'str'},
        'schema_name': {'key': 'schemaName', 'type': 'str'},
        'table_name': {'key': 'tableName', 'type': 'str'},
        'name': {'key': 'statisticsName', 'type': 'str'},
        'user_stat_name': {'key': 'userStatName', 'type': 'str'},
        'stat_data_path': {'key': 'statDataPath', 'type': 'str'},
        'create_time': {'key': 'createTime', 'type': 'iso-8601'},
        'update_time': {'key': 'updateTime', 'type': 'iso-8601'},
        'is_user_created': {'key': 'isUserCreated', 'type': 'bool'},
        'is_auto_created': {'key': 'isAutoCreated', 'type': 'bool'},
        'has_filter': {'key': 'hasFilter', 'type': 'bool'},
        'filter_definition': {'key': 'filterDefinition', 'type': 'str'},
        'col_names': {'key': 'colNames', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(USqlTableStatistics, self).__init__(**kwargs)
        self.database_name = kwargs.get('database_name', None)
        self.schema_name = kwargs.get('schema_name', None)
        self.table_name = kwargs.get('table_name', None)
        self.name = kwargs.get('name', None)
        self.user_stat_name = kwargs.get('user_stat_name', None)
        self.stat_data_path = kwargs.get('stat_data_path', None)
        self.create_time = kwargs.get('create_time', None)
        self.update_time = kwargs.get('update_time', None)
        self.is_user_created = kwargs.get('is_user_created', None)
        self.is_auto_created = kwargs.get('is_auto_created', None)
        self.has_filter = kwargs.get('has_filter', None)
        self.filter_definition = kwargs.get('filter_definition', None)
        self.col_names = kwargs.get('col_names', None)


class USqlType(CatalogItem):
    """A Data Lake Analytics catalog U-SQL type item.

    :param compute_account_name: the name of the Data Lake Analytics account.
    :type compute_account_name: str
    :param version: the version of the catalog item.
    :type version: str
    :param database_name: the name of the database.
    :type database_name: str
    :param schema_name: the name of the schema associated with this table and
     database.
    :type schema_name: str
    :param name: the name of type for this type.
    :type name: str
    :param type_family: the type family for this type.
    :type type_family: str
    :param c_sharp_name: the C# name for this type.
    :type c_sharp_name: str
    :param full_csharp_name: the fully qualified C# name for this type.
    :type full_csharp_name: str
    :param system_type_id: the system type ID for this type.
    :type system_type_id: int
    :param user_type_id: the user type ID for this type.
    :type user_type_id: int
    :param schema_id: the schema ID for this type.
    :type schema_id: int
    :param principal_id: the principal ID for this type.
    :type principal_id: int
    :param is_nullable: The switch indicating if this type is nullable.
    :type is_nullable: bool
    :param is_user_defined: The switch indicating if this type is user
     defined.
    :type is_user_defined: bool
    :param is_assembly_type: The switch indicating if this type is an assembly
     type.
    :type is_assembly_type: bool
    :param is_table_type: The switch indicating if this type is a table type.
    :type is_table_type: bool
    :param is_complex_type: The switch indicating if this type is a complex
     type.
    :type is_complex_type: bool
    """

    _attribute_map = {
        'compute_account_name': {'key': 'computeAccountName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'database_name': {'key': 'databaseName', 'type': 'str'},
        'schema_name': {'key': 'schemaName', 'type': 'str'},
        'name': {'key': 'typeName', 'type': 'str'},
        'type_family': {'key': 'typeFamily', 'type': 'str'},
        'c_sharp_name': {'key': 'cSharpName', 'type': 'str'},
        'full_csharp_name': {'key': 'fullCSharpName', 'type': 'str'},
        'system_type_id': {'key': 'systemTypeId', 'type': 'int'},
        'user_type_id': {'key': 'userTypeId', 'type': 'int'},
        'schema_id': {'key': 'schemaId', 'type': 'int'},
        'principal_id': {'key': 'principalId', 'type': 'int'},
        'is_nullable': {'key': 'isNullable', 'type': 'bool'},
        'is_user_defined': {'key': 'isUserDefined', 'type': 'bool'},
        'is_assembly_type': {'key': 'isAssemblyType', 'type': 'bool'},
        'is_table_type': {'key': 'isTableType', 'type': 'bool'},
        'is_complex_type': {'key': 'isComplexType', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(USqlType, self).__init__(**kwargs)
        self.database_name = kwargs.get('database_name', None)
        self.schema_name = kwargs.get('schema_name', None)
        self.name = kwargs.get('name', None)
        self.type_family = kwargs.get('type_family', None)
        self.c_sharp_name = kwargs.get('c_sharp_name', None)
        self.full_csharp_name = kwargs.get('full_csharp_name', None)
        self.system_type_id = kwargs.get('system_type_id', None)
        self.user_type_id = kwargs.get('user_type_id', None)
        self.schema_id = kwargs.get('schema_id', None)
        self.principal_id = kwargs.get('principal_id', None)
        self.is_nullable = kwargs.get('is_nullable', None)
        self.is_user_defined = kwargs.get('is_user_defined', None)
        self.is_assembly_type = kwargs.get('is_assembly_type', None)
        self.is_table_type = kwargs.get('is_table_type', None)
        self.is_complex_type = kwargs.get('is_complex_type', None)


class USqlTableType(USqlType):
    """A Data Lake Analytics catalog U-SQL table type item.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param compute_account_name: the name of the Data Lake Analytics account.
    :type compute_account_name: str
    :param version: the version of the catalog item.
    :type version: str
    :param database_name: the name of the database.
    :type database_name: str
    :param schema_name: the name of the schema associated with this table and
     database.
    :type schema_name: str
    :param name: the name of type for this type.
    :type name: str
    :param type_family: the type family for this type.
    :type type_family: str
    :param c_sharp_name: the C# name for this type.
    :type c_sharp_name: str
    :param full_csharp_name: the fully qualified C# name for this type.
    :type full_csharp_name: str
    :param system_type_id: the system type ID for this type.
    :type system_type_id: int
    :param user_type_id: the user type ID for this type.
    :type user_type_id: int
    :param schema_id: the schema ID for this type.
    :type schema_id: int
    :param principal_id: the principal ID for this type.
    :type principal_id: int
    :param is_nullable: The switch indicating if this type is nullable.
    :type is_nullable: bool
    :param is_user_defined: The switch indicating if this type is user
     defined.
    :type is_user_defined: bool
    :param is_assembly_type: The switch indicating if this type is an assembly
     type.
    :type is_assembly_type: bool
    :param is_table_type: The switch indicating if this type is a table type.
    :type is_table_type: bool
    :param is_complex_type: The switch indicating if this type is a complex
     type.
    :type is_complex_type: bool
    :ivar columns: the type field information associated with this table type.
    :vartype columns:
     list[~azure.mgmt.datalake.analytics.catalog.models.TypeFieldInfo]
    """

    _validation = {
        'columns': {'readonly': True},
    }

    _attribute_map = {
        'compute_account_name': {'key': 'computeAccountName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'database_name': {'key': 'databaseName', 'type': 'str'},
        'schema_name': {'key': 'schemaName', 'type': 'str'},
        'name': {'key': 'typeName', 'type': 'str'},
        'type_family': {'key': 'typeFamily', 'type': 'str'},
        'c_sharp_name': {'key': 'cSharpName', 'type': 'str'},
        'full_csharp_name': {'key': 'fullCSharpName', 'type': 'str'},
        'system_type_id': {'key': 'systemTypeId', 'type': 'int'},
        'user_type_id': {'key': 'userTypeId', 'type': 'int'},
        'schema_id': {'key': 'schemaId', 'type': 'int'},
        'principal_id': {'key': 'principalId', 'type': 'int'},
        'is_nullable': {'key': 'isNullable', 'type': 'bool'},
        'is_user_defined': {'key': 'isUserDefined', 'type': 'bool'},
        'is_assembly_type': {'key': 'isAssemblyType', 'type': 'bool'},
        'is_table_type': {'key': 'isTableType', 'type': 'bool'},
        'is_complex_type': {'key': 'isComplexType', 'type': 'bool'},
        'columns': {'key': 'columns', 'type': '[TypeFieldInfo]'},
    }

    def __init__(self, **kwargs):
        super(USqlTableType, self).__init__(**kwargs)
        self.columns = None


class USqlTableValuedFunction(CatalogItem):
    """A Data Lake Analytics catalog U-SQL table valued function item.

    :param compute_account_name: the name of the Data Lake Analytics account.
    :type compute_account_name: str
    :param version: the version of the catalog item.
    :type version: str
    :param database_name: the name of the database.
    :type database_name: str
    :param schema_name: the name of the schema associated with this database.
    :type schema_name: str
    :param name: the name of the table valued function.
    :type name: str
    :param definition: the definition of the table valued function.
    :type definition: str
    """

    _attribute_map = {
        'compute_account_name': {'key': 'computeAccountName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'database_name': {'key': 'databaseName', 'type': 'str'},
        'schema_name': {'key': 'schemaName', 'type': 'str'},
        'name': {'key': 'tvfName', 'type': 'str'},
        'definition': {'key': 'definition', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(USqlTableValuedFunction, self).__init__(**kwargs)
        self.database_name = kwargs.get('database_name', None)
        self.schema_name = kwargs.get('schema_name', None)
        self.name = kwargs.get('name', None)
        self.definition = kwargs.get('definition', None)


class USqlView(CatalogItem):
    """A Data Lake Analytics catalog U-SQL view item.

    :param compute_account_name: the name of the Data Lake Analytics account.
    :type compute_account_name: str
    :param version: the version of the catalog item.
    :type version: str
    :param database_name: the name of the database.
    :type database_name: str
    :param schema_name: the name of the schema associated with this view and
     database.
    :type schema_name: str
    :param name: the name of the view.
    :type name: str
    :param definition: the defined query of the view.
    :type definition: str
    """

    _attribute_map = {
        'compute_account_name': {'key': 'computeAccountName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'database_name': {'key': 'databaseName', 'type': 'str'},
        'schema_name': {'key': 'schemaName', 'type': 'str'},
        'name': {'key': 'viewName', 'type': 'str'},
        'definition': {'key': 'definition', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(USqlView, self).__init__(**kwargs)
        self.database_name = kwargs.get('database_name', None)
        self.schema_name = kwargs.get('schema_name', None)
        self.name = kwargs.get('name', None)
        self.definition = kwargs.get('definition', None)
