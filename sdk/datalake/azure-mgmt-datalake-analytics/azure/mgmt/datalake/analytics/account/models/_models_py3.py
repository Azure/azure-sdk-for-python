# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class AddDataLakeStoreParameters(Model):
    """The parameters used to add a new Data Lake Store account.

    :param suffix: The optional suffix for the Data Lake Store account.
    :type suffix: str
    """

    _attribute_map = {
        'suffix': {'key': 'properties.suffix', 'type': 'str'},
    }

    def __init__(self, *, suffix: str=None, **kwargs) -> None:
        super(AddDataLakeStoreParameters, self).__init__(**kwargs)
        self.suffix = suffix


class AddDataLakeStoreWithAccountParameters(Model):
    """The parameters used to add a new Data Lake Store account while creating a
    new Data Lake Analytics account.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The unique name of the Data Lake Store account to
     add.
    :type name: str
    :param suffix: The optional suffix for the Data Lake Store account.
    :type suffix: str
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'suffix': {'key': 'properties.suffix', 'type': 'str'},
    }

    def __init__(self, *, name: str, suffix: str=None, **kwargs) -> None:
        super(AddDataLakeStoreWithAccountParameters, self).__init__(**kwargs)
        self.name = name
        self.suffix = suffix


class AddStorageAccountParameters(Model):
    """The parameters used to add a new Azure Storage account.

    All required parameters must be populated in order to send to Azure.

    :param access_key: Required. The access key associated with this Azure
     Storage account that will be used to connect to it.
    :type access_key: str
    :param suffix: The optional suffix for the storage account.
    :type suffix: str
    """

    _validation = {
        'access_key': {'required': True},
    }

    _attribute_map = {
        'access_key': {'key': 'properties.accessKey', 'type': 'str'},
        'suffix': {'key': 'properties.suffix', 'type': 'str'},
    }

    def __init__(self, *, access_key: str, suffix: str=None, **kwargs) -> None:
        super(AddStorageAccountParameters, self).__init__(**kwargs)
        self.access_key = access_key
        self.suffix = suffix


class AddStorageAccountWithAccountParameters(Model):
    """The parameters used to add a new Azure Storage account while creating a new
    Data Lake Analytics account.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The unique name of the Azure Storage account to
     add.
    :type name: str
    :param access_key: Required. The access key associated with this Azure
     Storage account that will be used to connect to it.
    :type access_key: str
    :param suffix: The optional suffix for the storage account.
    :type suffix: str
    """

    _validation = {
        'name': {'required': True},
        'access_key': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'access_key': {'key': 'properties.accessKey', 'type': 'str'},
        'suffix': {'key': 'properties.suffix', 'type': 'str'},
    }

    def __init__(self, *, name: str, access_key: str, suffix: str=None, **kwargs) -> None:
        super(AddStorageAccountWithAccountParameters, self).__init__(**kwargs)
        self.name = name
        self.access_key = access_key
        self.suffix = suffix


class CapabilityInformation(Model):
    """Subscription-level properties and limits for Data Lake Analytics.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar subscription_id: The subscription credentials that uniquely
     identifies the subscription.
    :vartype subscription_id: str
    :ivar state: The subscription state. Possible values include:
     'Registered', 'Suspended', 'Deleted', 'Unregistered', 'Warned'
    :vartype state: str or
     ~azure.mgmt.datalake.analytics.account.models.SubscriptionState
    :ivar max_account_count: The maximum supported number of accounts under
     this subscription.
    :vartype max_account_count: int
    :ivar account_count: The current number of accounts under this
     subscription.
    :vartype account_count: int
    :ivar migration_state: The Boolean value of true or false to indicate the
     maintenance state.
    :vartype migration_state: bool
    """

    _validation = {
        'subscription_id': {'readonly': True},
        'state': {'readonly': True},
        'max_account_count': {'readonly': True},
        'account_count': {'readonly': True},
        'migration_state': {'readonly': True},
    }

    _attribute_map = {
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'max_account_count': {'key': 'maxAccountCount', 'type': 'int'},
        'account_count': {'key': 'accountCount', 'type': 'int'},
        'migration_state': {'key': 'migrationState', 'type': 'bool'},
    }

    def __init__(self, **kwargs) -> None:
        super(CapabilityInformation, self).__init__(**kwargs)
        self.subscription_id = None
        self.state = None
        self.max_account_count = None
        self.account_count = None
        self.migration_state = None


class CheckNameAvailabilityParameters(Model):
    """Data Lake Analytics account name availability check parameters.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The Data Lake Analytics name to check availability
     for.
    :type name: str
    :ivar type: Required. The resource type. Note: This should not be set by
     the user, as the constant value is Microsoft.DataLakeAnalytics/accounts.
     Default value: "Microsoft.DataLakeAnalytics/accounts" .
    :vartype type: str
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True, 'constant': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    type = "Microsoft.DataLakeAnalytics/accounts"

    def __init__(self, *, name: str, **kwargs) -> None:
        super(CheckNameAvailabilityParameters, self).__init__(**kwargs)
        self.name = name


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class SubResource(Model):
    """The resource model definition for a nested resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The resource identifier.
    :vartype id: str
    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(SubResource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class ComputePolicy(SubResource):
    """Data Lake Analytics compute policy information.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The resource identifier.
    :vartype id: str
    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar object_id: The AAD object identifier for the entity to create a
     policy for.
    :vartype object_id: str
    :ivar object_type: The type of AAD object the object identifier refers to.
     Possible values include: 'User', 'Group', 'ServicePrincipal'
    :vartype object_type: str or
     ~azure.mgmt.datalake.analytics.account.models.AADObjectType
    :ivar max_degree_of_parallelism_per_job: The maximum degree of parallelism
     per job this user can use to submit jobs.
    :vartype max_degree_of_parallelism_per_job: int
    :ivar min_priority_per_job: The minimum priority per job this user can use
     to submit jobs.
    :vartype min_priority_per_job: int
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'object_id': {'readonly': True},
        'object_type': {'readonly': True},
        'max_degree_of_parallelism_per_job': {'readonly': True, 'minimum': 1},
        'min_priority_per_job': {'readonly': True, 'minimum': 1},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'object_id': {'key': 'properties.objectId', 'type': 'str'},
        'object_type': {'key': 'properties.objectType', 'type': 'str'},
        'max_degree_of_parallelism_per_job': {'key': 'properties.maxDegreeOfParallelismPerJob', 'type': 'int'},
        'min_priority_per_job': {'key': 'properties.minPriorityPerJob', 'type': 'int'},
    }

    def __init__(self, **kwargs) -> None:
        super(ComputePolicy, self).__init__(**kwargs)
        self.object_id = None
        self.object_type = None
        self.max_degree_of_parallelism_per_job = None
        self.min_priority_per_job = None


class CreateComputePolicyWithAccountParameters(Model):
    """The parameters used to create a new compute policy while creating a new
    Data Lake Analytics account.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The unique name of the compute policy to create.
    :type name: str
    :param object_id: Required. The AAD object identifier for the entity to
     create a policy for.
    :type object_id: str
    :param object_type: Required. The type of AAD object the object identifier
     refers to. Possible values include: 'User', 'Group', 'ServicePrincipal'
    :type object_type: str or
     ~azure.mgmt.datalake.analytics.account.models.AADObjectType
    :param max_degree_of_parallelism_per_job: The maximum degree of
     parallelism per job this user can use to submit jobs. This property, the
     min priority per job property, or both must be passed.
    :type max_degree_of_parallelism_per_job: int
    :param min_priority_per_job: The minimum priority per job this user can
     use to submit jobs. This property, the max degree of parallelism per job
     property, or both must be passed.
    :type min_priority_per_job: int
    """

    _validation = {
        'name': {'required': True},
        'object_id': {'required': True},
        'object_type': {'required': True},
        'max_degree_of_parallelism_per_job': {'minimum': 1},
        'min_priority_per_job': {'minimum': 1},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'object_id': {'key': 'properties.objectId', 'type': 'str'},
        'object_type': {'key': 'properties.objectType', 'type': 'str'},
        'max_degree_of_parallelism_per_job': {'key': 'properties.maxDegreeOfParallelismPerJob', 'type': 'int'},
        'min_priority_per_job': {'key': 'properties.minPriorityPerJob', 'type': 'int'},
    }

    def __init__(self, *, name: str, object_id: str, object_type, max_degree_of_parallelism_per_job: int=None, min_priority_per_job: int=None, **kwargs) -> None:
        super(CreateComputePolicyWithAccountParameters, self).__init__(**kwargs)
        self.name = name
        self.object_id = object_id
        self.object_type = object_type
        self.max_degree_of_parallelism_per_job = max_degree_of_parallelism_per_job
        self.min_priority_per_job = min_priority_per_job


class CreateDataLakeAnalyticsAccountParameters(Model):
    """The parameters to use for creating a Data Lake Analytics account.

    All required parameters must be populated in order to send to Azure.

    :param location: Required. The resource location.
    :type location: str
    :param tags: The resource tags.
    :type tags: dict[str, str]
    :param default_data_lake_store_account: Required. The default Data Lake
     Store account associated with this account.
    :type default_data_lake_store_account: str
    :param data_lake_store_accounts: Required. The list of Data Lake Store
     accounts associated with this account.
    :type data_lake_store_accounts:
     list[~azure.mgmt.datalake.analytics.account.models.AddDataLakeStoreWithAccountParameters]
    :param storage_accounts: The list of Azure Blob Storage accounts
     associated with this account.
    :type storage_accounts:
     list[~azure.mgmt.datalake.analytics.account.models.AddStorageAccountWithAccountParameters]
    :param compute_policies: The list of compute policies associated with this
     account.
    :type compute_policies:
     list[~azure.mgmt.datalake.analytics.account.models.CreateComputePolicyWithAccountParameters]
    :param firewall_rules: The list of firewall rules associated with this
     account.
    :type firewall_rules:
     list[~azure.mgmt.datalake.analytics.account.models.CreateFirewallRuleWithAccountParameters]
    :param firewall_state: The current state of the IP address firewall for
     this account. Possible values include: 'Enabled', 'Disabled'
    :type firewall_state: str or
     ~azure.mgmt.datalake.analytics.account.models.FirewallState
    :param firewall_allow_azure_ips: The current state of allowing or
     disallowing IPs originating within Azure through the firewall. If the
     firewall is disabled, this is not enforced. Possible values include:
     'Enabled', 'Disabled'
    :type firewall_allow_azure_ips: str or
     ~azure.mgmt.datalake.analytics.account.models.FirewallAllowAzureIpsState
    :param new_tier: The commitment tier for the next month. Possible values
     include: 'Consumption', 'Commitment_100AUHours', 'Commitment_500AUHours',
     'Commitment_1000AUHours', 'Commitment_5000AUHours',
     'Commitment_10000AUHours', 'Commitment_50000AUHours',
     'Commitment_100000AUHours', 'Commitment_500000AUHours'
    :type new_tier: str or
     ~azure.mgmt.datalake.analytics.account.models.TierType
    :param max_job_count: The maximum supported jobs running under the account
     at the same time. Default value: 3 .
    :type max_job_count: int
    :param max_degree_of_parallelism: The maximum supported degree of
     parallelism for this account. Default value: 30 .
    :type max_degree_of_parallelism: int
    :param max_degree_of_parallelism_per_job: The maximum supported degree of
     parallelism per job for this account.
    :type max_degree_of_parallelism_per_job: int
    :param min_priority_per_job: The minimum supported priority per job for
     this account.
    :type min_priority_per_job: int
    :param query_store_retention: The number of days that job metadata is
     retained. Default value: 30 .
    :type query_store_retention: int
    """

    _validation = {
        'location': {'required': True},
        'default_data_lake_store_account': {'required': True},
        'data_lake_store_accounts': {'required': True},
        'max_job_count': {'minimum': 1},
        'max_degree_of_parallelism': {'minimum': 1},
        'max_degree_of_parallelism_per_job': {'minimum': 1},
        'min_priority_per_job': {'minimum': 1},
        'query_store_retention': {'maximum': 180, 'minimum': 1},
    }

    _attribute_map = {
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'default_data_lake_store_account': {'key': 'properties.defaultDataLakeStoreAccount', 'type': 'str'},
        'data_lake_store_accounts': {'key': 'properties.dataLakeStoreAccounts', 'type': '[AddDataLakeStoreWithAccountParameters]'},
        'storage_accounts': {'key': 'properties.storageAccounts', 'type': '[AddStorageAccountWithAccountParameters]'},
        'compute_policies': {'key': 'properties.computePolicies', 'type': '[CreateComputePolicyWithAccountParameters]'},
        'firewall_rules': {'key': 'properties.firewallRules', 'type': '[CreateFirewallRuleWithAccountParameters]'},
        'firewall_state': {'key': 'properties.firewallState', 'type': 'FirewallState'},
        'firewall_allow_azure_ips': {'key': 'properties.firewallAllowAzureIps', 'type': 'FirewallAllowAzureIpsState'},
        'new_tier': {'key': 'properties.newTier', 'type': 'TierType'},
        'max_job_count': {'key': 'properties.maxJobCount', 'type': 'int'},
        'max_degree_of_parallelism': {'key': 'properties.maxDegreeOfParallelism', 'type': 'int'},
        'max_degree_of_parallelism_per_job': {'key': 'properties.maxDegreeOfParallelismPerJob', 'type': 'int'},
        'min_priority_per_job': {'key': 'properties.minPriorityPerJob', 'type': 'int'},
        'query_store_retention': {'key': 'properties.queryStoreRetention', 'type': 'int'},
    }

    def __init__(self, *, location: str, default_data_lake_store_account: str, data_lake_store_accounts, tags=None, storage_accounts=None, compute_policies=None, firewall_rules=None, firewall_state=None, firewall_allow_azure_ips=None, new_tier=None, max_job_count: int=3, max_degree_of_parallelism: int=30, max_degree_of_parallelism_per_job: int=None, min_priority_per_job: int=None, query_store_retention: int=30, **kwargs) -> None:
        super(CreateDataLakeAnalyticsAccountParameters, self).__init__(**kwargs)
        self.location = location
        self.tags = tags
        self.default_data_lake_store_account = default_data_lake_store_account
        self.data_lake_store_accounts = data_lake_store_accounts
        self.storage_accounts = storage_accounts
        self.compute_policies = compute_policies
        self.firewall_rules = firewall_rules
        self.firewall_state = firewall_state
        self.firewall_allow_azure_ips = firewall_allow_azure_ips
        self.new_tier = new_tier
        self.max_job_count = max_job_count
        self.max_degree_of_parallelism = max_degree_of_parallelism
        self.max_degree_of_parallelism_per_job = max_degree_of_parallelism_per_job
        self.min_priority_per_job = min_priority_per_job
        self.query_store_retention = query_store_retention


class CreateFirewallRuleWithAccountParameters(Model):
    """The parameters used to create a new firewall rule while creating a new Data
    Lake Analytics account.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The unique name of the firewall rule to create.
    :type name: str
    :param start_ip_address: Required. The start IP address for the firewall
     rule. This can be either ipv4 or ipv6. Start and End should be in the same
     protocol.
    :type start_ip_address: str
    :param end_ip_address: Required. The end IP address for the firewall rule.
     This can be either ipv4 or ipv6. Start and End should be in the same
     protocol.
    :type end_ip_address: str
    """

    _validation = {
        'name': {'required': True},
        'start_ip_address': {'required': True},
        'end_ip_address': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'start_ip_address': {'key': 'properties.startIpAddress', 'type': 'str'},
        'end_ip_address': {'key': 'properties.endIpAddress', 'type': 'str'},
    }

    def __init__(self, *, name: str, start_ip_address: str, end_ip_address: str, **kwargs) -> None:
        super(CreateFirewallRuleWithAccountParameters, self).__init__(**kwargs)
        self.name = name
        self.start_ip_address = start_ip_address
        self.end_ip_address = end_ip_address


class CreateOrUpdateComputePolicyParameters(Model):
    """The parameters used to create a new compute policy.

    All required parameters must be populated in order to send to Azure.

    :param object_id: Required. The AAD object identifier for the entity to
     create a policy for.
    :type object_id: str
    :param object_type: Required. The type of AAD object the object identifier
     refers to. Possible values include: 'User', 'Group', 'ServicePrincipal'
    :type object_type: str or
     ~azure.mgmt.datalake.analytics.account.models.AADObjectType
    :param max_degree_of_parallelism_per_job: The maximum degree of
     parallelism per job this user can use to submit jobs. This property, the
     min priority per job property, or both must be passed.
    :type max_degree_of_parallelism_per_job: int
    :param min_priority_per_job: The minimum priority per job this user can
     use to submit jobs. This property, the max degree of parallelism per job
     property, or both must be passed.
    :type min_priority_per_job: int
    """

    _validation = {
        'object_id': {'required': True},
        'object_type': {'required': True},
        'max_degree_of_parallelism_per_job': {'minimum': 1},
        'min_priority_per_job': {'minimum': 1},
    }

    _attribute_map = {
        'object_id': {'key': 'properties.objectId', 'type': 'str'},
        'object_type': {'key': 'properties.objectType', 'type': 'str'},
        'max_degree_of_parallelism_per_job': {'key': 'properties.maxDegreeOfParallelismPerJob', 'type': 'int'},
        'min_priority_per_job': {'key': 'properties.minPriorityPerJob', 'type': 'int'},
    }

    def __init__(self, *, object_id: str, object_type, max_degree_of_parallelism_per_job: int=None, min_priority_per_job: int=None, **kwargs) -> None:
        super(CreateOrUpdateComputePolicyParameters, self).__init__(**kwargs)
        self.object_id = object_id
        self.object_type = object_type
        self.max_degree_of_parallelism_per_job = max_degree_of_parallelism_per_job
        self.min_priority_per_job = min_priority_per_job


class CreateOrUpdateFirewallRuleParameters(Model):
    """The parameters used to create a new firewall rule.

    All required parameters must be populated in order to send to Azure.

    :param start_ip_address: Required. The start IP address for the firewall
     rule. This can be either ipv4 or ipv6. Start and End should be in the same
     protocol.
    :type start_ip_address: str
    :param end_ip_address: Required. The end IP address for the firewall rule.
     This can be either ipv4 or ipv6. Start and End should be in the same
     protocol.
    :type end_ip_address: str
    """

    _validation = {
        'start_ip_address': {'required': True},
        'end_ip_address': {'required': True},
    }

    _attribute_map = {
        'start_ip_address': {'key': 'properties.startIpAddress', 'type': 'str'},
        'end_ip_address': {'key': 'properties.endIpAddress', 'type': 'str'},
    }

    def __init__(self, *, start_ip_address: str, end_ip_address: str, **kwargs) -> None:
        super(CreateOrUpdateFirewallRuleParameters, self).__init__(**kwargs)
        self.start_ip_address = start_ip_address
        self.end_ip_address = end_ip_address


class Resource(Model):
    """The resource model definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The resource identifer.
    :vartype id: str
    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar location: The resource location.
    :vartype location: str
    :ivar tags: The resource tags.
    :vartype tags: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'readonly': True},
        'tags': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, **kwargs) -> None:
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.location = None
        self.tags = None


class DataLakeAnalyticsAccount(Resource):
    """A Data Lake Analytics account object, containing all information associated
    with the named Data Lake Analytics account.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The resource identifer.
    :vartype id: str
    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar location: The resource location.
    :vartype location: str
    :ivar tags: The resource tags.
    :vartype tags: dict[str, str]
    :ivar account_id: The unique identifier associated with this Data Lake
     Analytics account.
    :vartype account_id: str
    :ivar provisioning_state: The provisioning status of the Data Lake
     Analytics account. Possible values include: 'Failed', 'Creating',
     'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming', 'Deleting',
     'Deleted', 'Undeleting', 'Canceled'
    :vartype provisioning_state: str or
     ~azure.mgmt.datalake.analytics.account.models.DataLakeAnalyticsAccountStatus
    :ivar state: The state of the Data Lake Analytics account. Possible values
     include: 'Active', 'Suspended'
    :vartype state: str or
     ~azure.mgmt.datalake.analytics.account.models.DataLakeAnalyticsAccountState
    :ivar creation_time: The account creation time.
    :vartype creation_time: datetime
    :ivar last_modified_time: The account last modified time.
    :vartype last_modified_time: datetime
    :ivar endpoint: The full CName endpoint for this account.
    :vartype endpoint: str
    :ivar default_data_lake_store_account: The default Data Lake Store account
     associated with this account.
    :vartype default_data_lake_store_account: str
    :ivar data_lake_store_accounts: The list of Data Lake Store accounts
     associated with this account.
    :vartype data_lake_store_accounts:
     list[~azure.mgmt.datalake.analytics.account.models.DataLakeStoreAccountInformation]
    :ivar storage_accounts: The list of Azure Blob Storage accounts associated
     with this account.
    :vartype storage_accounts:
     list[~azure.mgmt.datalake.analytics.account.models.StorageAccountInformation]
    :ivar compute_policies: The list of compute policies associated with this
     account.
    :vartype compute_policies:
     list[~azure.mgmt.datalake.analytics.account.models.ComputePolicy]
    :ivar hive_metastores: The list of hiveMetastores associated with this
     account.
    :vartype hive_metastores:
     list[~azure.mgmt.datalake.analytics.account.models.HiveMetastore]
    :ivar virtual_network_rules: The list of virtualNetwork rules associated
     with this account.
    :vartype virtual_network_rules:
     list[~azure.mgmt.datalake.analytics.account.models.VirtualNetworkRule]
    :ivar firewall_rules: The list of firewall rules associated with this
     account.
    :vartype firewall_rules:
     list[~azure.mgmt.datalake.analytics.account.models.FirewallRule]
    :ivar firewall_state: The current state of the IP address firewall for
     this account. Possible values include: 'Enabled', 'Disabled'
    :vartype firewall_state: str or
     ~azure.mgmt.datalake.analytics.account.models.FirewallState
    :ivar firewall_allow_azure_ips: The current state of allowing or
     disallowing IPs originating within Azure through the firewall. If the
     firewall is disabled, this is not enforced. Possible values include:
     'Enabled', 'Disabled'
    :vartype firewall_allow_azure_ips: str or
     ~azure.mgmt.datalake.analytics.account.models.FirewallAllowAzureIpsState
    :ivar new_tier: The commitment tier for the next month. Possible values
     include: 'Consumption', 'Commitment_100AUHours', 'Commitment_500AUHours',
     'Commitment_1000AUHours', 'Commitment_5000AUHours',
     'Commitment_10000AUHours', 'Commitment_50000AUHours',
     'Commitment_100000AUHours', 'Commitment_500000AUHours'
    :vartype new_tier: str or
     ~azure.mgmt.datalake.analytics.account.models.TierType
    :ivar current_tier: The commitment tier in use for the current month.
     Possible values include: 'Consumption', 'Commitment_100AUHours',
     'Commitment_500AUHours', 'Commitment_1000AUHours',
     'Commitment_5000AUHours', 'Commitment_10000AUHours',
     'Commitment_50000AUHours', 'Commitment_100000AUHours',
     'Commitment_500000AUHours'
    :vartype current_tier: str or
     ~azure.mgmt.datalake.analytics.account.models.TierType
    :param max_job_count: The maximum supported jobs running under the account
     at the same time. Default value: 3 .
    :type max_job_count: int
    :ivar system_max_job_count: The system defined maximum supported jobs
     running under the account at the same time, which restricts the maximum
     number of running jobs the user can set for the account.
    :vartype system_max_job_count: int
    :param max_degree_of_parallelism: The maximum supported degree of
     parallelism for this account. Default value: 30 .
    :type max_degree_of_parallelism: int
    :ivar system_max_degree_of_parallelism: The system defined maximum
     supported degree of parallelism for this account, which restricts the
     maximum value of parallelism the user can set for the account.
    :vartype system_max_degree_of_parallelism: int
    :ivar max_degree_of_parallelism_per_job: The maximum supported degree of
     parallelism per job for this account.
    :vartype max_degree_of_parallelism_per_job: int
    :ivar min_priority_per_job: The minimum supported priority per job for
     this account.
    :vartype min_priority_per_job: int
    :param query_store_retention: The number of days that job metadata is
     retained. Default value: 30 .
    :type query_store_retention: int
    :ivar debug_data_access_level: The current state of the
     DebugDataAccessLevel for this account. Possible values include: 'All',
     'Customer', 'None'
    :vartype debug_data_access_level: str or
     ~azure.mgmt.datalake.analytics.account.models.DebugDataAccessLevel
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'readonly': True},
        'tags': {'readonly': True},
        'account_id': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'state': {'readonly': True},
        'creation_time': {'readonly': True},
        'last_modified_time': {'readonly': True},
        'endpoint': {'readonly': True},
        'default_data_lake_store_account': {'readonly': True},
        'data_lake_store_accounts': {'readonly': True},
        'storage_accounts': {'readonly': True},
        'compute_policies': {'readonly': True},
        'hive_metastores': {'readonly': True},
        'virtual_network_rules': {'readonly': True},
        'firewall_rules': {'readonly': True},
        'firewall_state': {'readonly': True},
        'firewall_allow_azure_ips': {'readonly': True},
        'new_tier': {'readonly': True},
        'current_tier': {'readonly': True},
        'max_job_count': {'minimum': 1},
        'system_max_job_count': {'readonly': True},
        'max_degree_of_parallelism': {'minimum': 1},
        'system_max_degree_of_parallelism': {'readonly': True},
        'max_degree_of_parallelism_per_job': {'readonly': True, 'minimum': 1},
        'min_priority_per_job': {'readonly': True, 'minimum': 1},
        'query_store_retention': {'maximum': 180, 'minimum': 1},
        'debug_data_access_level': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'account_id': {'key': 'properties.accountId', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'DataLakeAnalyticsAccountStatus'},
        'state': {'key': 'properties.state', 'type': 'DataLakeAnalyticsAccountState'},
        'creation_time': {'key': 'properties.creationTime', 'type': 'iso-8601'},
        'last_modified_time': {'key': 'properties.lastModifiedTime', 'type': 'iso-8601'},
        'endpoint': {'key': 'properties.endpoint', 'type': 'str'},
        'default_data_lake_store_account': {'key': 'properties.defaultDataLakeStoreAccount', 'type': 'str'},
        'data_lake_store_accounts': {'key': 'properties.dataLakeStoreAccounts', 'type': '[DataLakeStoreAccountInformation]'},
        'storage_accounts': {'key': 'properties.storageAccounts', 'type': '[StorageAccountInformation]'},
        'compute_policies': {'key': 'properties.computePolicies', 'type': '[ComputePolicy]'},
        'hive_metastores': {'key': 'properties.hiveMetastores', 'type': '[HiveMetastore]'},
        'virtual_network_rules': {'key': 'properties.virtualNetworkRules', 'type': '[VirtualNetworkRule]'},
        'firewall_rules': {'key': 'properties.firewallRules', 'type': '[FirewallRule]'},
        'firewall_state': {'key': 'properties.firewallState', 'type': 'FirewallState'},
        'firewall_allow_azure_ips': {'key': 'properties.firewallAllowAzureIps', 'type': 'FirewallAllowAzureIpsState'},
        'new_tier': {'key': 'properties.newTier', 'type': 'TierType'},
        'current_tier': {'key': 'properties.currentTier', 'type': 'TierType'},
        'max_job_count': {'key': 'properties.maxJobCount', 'type': 'int'},
        'system_max_job_count': {'key': 'properties.systemMaxJobCount', 'type': 'int'},
        'max_degree_of_parallelism': {'key': 'properties.maxDegreeOfParallelism', 'type': 'int'},
        'system_max_degree_of_parallelism': {'key': 'properties.systemMaxDegreeOfParallelism', 'type': 'int'},
        'max_degree_of_parallelism_per_job': {'key': 'properties.maxDegreeOfParallelismPerJob', 'type': 'int'},
        'min_priority_per_job': {'key': 'properties.minPriorityPerJob', 'type': 'int'},
        'query_store_retention': {'key': 'properties.queryStoreRetention', 'type': 'int'},
        'debug_data_access_level': {'key': 'properties.debugDataAccessLevel', 'type': 'DebugDataAccessLevel'},
    }

    def __init__(self, *, max_job_count: int=3, max_degree_of_parallelism: int=30, query_store_retention: int=30, **kwargs) -> None:
        super(DataLakeAnalyticsAccount, self).__init__(**kwargs)
        self.account_id = None
        self.provisioning_state = None
        self.state = None
        self.creation_time = None
        self.last_modified_time = None
        self.endpoint = None
        self.default_data_lake_store_account = None
        self.data_lake_store_accounts = None
        self.storage_accounts = None
        self.compute_policies = None
        self.hive_metastores = None
        self.virtual_network_rules = None
        self.firewall_rules = None
        self.firewall_state = None
        self.firewall_allow_azure_ips = None
        self.new_tier = None
        self.current_tier = None
        self.max_job_count = max_job_count
        self.system_max_job_count = None
        self.max_degree_of_parallelism = max_degree_of_parallelism
        self.system_max_degree_of_parallelism = None
        self.max_degree_of_parallelism_per_job = None
        self.min_priority_per_job = None
        self.query_store_retention = query_store_retention
        self.debug_data_access_level = None


class DataLakeAnalyticsAccountBasic(Resource):
    """A Data Lake Analytics account object, containing all information associated
    with the named Data Lake Analytics account.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The resource identifer.
    :vartype id: str
    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar location: The resource location.
    :vartype location: str
    :ivar tags: The resource tags.
    :vartype tags: dict[str, str]
    :ivar account_id: The unique identifier associated with this Data Lake
     Analytics account.
    :vartype account_id: str
    :ivar provisioning_state: The provisioning status of the Data Lake
     Analytics account. Possible values include: 'Failed', 'Creating',
     'Running', 'Succeeded', 'Patching', 'Suspending', 'Resuming', 'Deleting',
     'Deleted', 'Undeleting', 'Canceled'
    :vartype provisioning_state: str or
     ~azure.mgmt.datalake.analytics.account.models.DataLakeAnalyticsAccountStatus
    :ivar state: The state of the Data Lake Analytics account. Possible values
     include: 'Active', 'Suspended'
    :vartype state: str or
     ~azure.mgmt.datalake.analytics.account.models.DataLakeAnalyticsAccountState
    :ivar creation_time: The account creation time.
    :vartype creation_time: datetime
    :ivar last_modified_time: The account last modified time.
    :vartype last_modified_time: datetime
    :ivar endpoint: The full CName endpoint for this account.
    :vartype endpoint: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'readonly': True},
        'tags': {'readonly': True},
        'account_id': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'state': {'readonly': True},
        'creation_time': {'readonly': True},
        'last_modified_time': {'readonly': True},
        'endpoint': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'account_id': {'key': 'properties.accountId', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'DataLakeAnalyticsAccountStatus'},
        'state': {'key': 'properties.state', 'type': 'DataLakeAnalyticsAccountState'},
        'creation_time': {'key': 'properties.creationTime', 'type': 'iso-8601'},
        'last_modified_time': {'key': 'properties.lastModifiedTime', 'type': 'iso-8601'},
        'endpoint': {'key': 'properties.endpoint', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(DataLakeAnalyticsAccountBasic, self).__init__(**kwargs)
        self.account_id = None
        self.provisioning_state = None
        self.state = None
        self.creation_time = None
        self.last_modified_time = None
        self.endpoint = None


class DataLakeStoreAccountInformation(SubResource):
    """Data Lake Store account information.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The resource identifier.
    :vartype id: str
    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar suffix: The optional suffix for the Data Lake Store account.
    :vartype suffix: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'suffix': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'suffix': {'key': 'properties.suffix', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(DataLakeStoreAccountInformation, self).__init__(**kwargs)
        self.suffix = None


class ErrorAdditionalInfo(Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: object
    """

    _validation = {
        'type': {'readonly': True},
        'info': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'info': {'key': 'info', 'type': 'object'},
    }

    def __init__(self, **kwargs) -> None:
        super(ErrorAdditionalInfo, self).__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details:
     list[~azure.mgmt.datalake.analytics.account.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info:
     list[~azure.mgmt.datalake.analytics.account.models.ErrorAdditionalInfo]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'additional_info': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetail]'},
        'additional_info': {'key': 'additionalInfo', 'type': '[ErrorAdditionalInfo]'},
    }

    def __init__(self, **kwargs) -> None:
        super(ErrorDetail, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(Model):
    """Error response.

    Common error response for all Azure Resource Manager APIs to return error
    details for failed operations. (This also follows the OData error response
    format.).

    :param error: The error object.
    :type error: ~azure.mgmt.datalake.analytics.account.models.ErrorDetail
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorDetail'},
    }

    def __init__(self, *, error=None, **kwargs) -> None:
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class ErrorResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ErrorResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorResponseException, self).__init__(deserialize, response, 'ErrorResponse', *args)


class FirewallRule(SubResource):
    """Data Lake Analytics firewall rule information.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The resource identifier.
    :vartype id: str
    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar start_ip_address: The start IP address for the firewall rule. This
     can be either ipv4 or ipv6. Start and End should be in the same protocol.
    :vartype start_ip_address: str
    :ivar end_ip_address: The end IP address for the firewall rule. This can
     be either ipv4 or ipv6. Start and End should be in the same protocol.
    :vartype end_ip_address: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'start_ip_address': {'readonly': True},
        'end_ip_address': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'start_ip_address': {'key': 'properties.startIpAddress', 'type': 'str'},
        'end_ip_address': {'key': 'properties.endIpAddress', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(FirewallRule, self).__init__(**kwargs)
        self.start_ip_address = None
        self.end_ip_address = None


class HiveMetastore(SubResource):
    """HiveMetastore.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The resource identifier.
    :vartype id: str
    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar server_uri: The serverUri for the Hive MetaStore
    :vartype server_uri: str
    :ivar database_name: The databaseName for the Hive MetaStore
    :vartype database_name: str
    :ivar runtime_version: The runtimeVersion for the Hive MetaStore
    :vartype runtime_version: str
    :ivar user_name: The userName for the Hive MetaStore
    :vartype user_name: str
    :ivar password: The password for the Hive MetaStore
    :vartype password: str
    :ivar nested_resource_provisioning_state: The current state of the
     NestedResource. Possible values include: 'Succeeded', 'Canceled', 'Failed'
    :vartype nested_resource_provisioning_state: str or
     ~azure.mgmt.datalake.analytics.account.models.NestedResourceProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'server_uri': {'readonly': True},
        'database_name': {'readonly': True},
        'runtime_version': {'readonly': True},
        'user_name': {'readonly': True},
        'password': {'readonly': True},
        'nested_resource_provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'server_uri': {'key': 'properties.serverUri', 'type': 'str'},
        'database_name': {'key': 'properties.databaseName', 'type': 'str'},
        'runtime_version': {'key': 'properties.runtimeVersion', 'type': 'str'},
        'user_name': {'key': 'properties.userName', 'type': 'str'},
        'password': {'key': 'properties.password', 'type': 'str'},
        'nested_resource_provisioning_state': {'key': 'properties.nestedResourceProvisioningState', 'type': 'NestedResourceProvisioningState'},
    }

    def __init__(self, **kwargs) -> None:
        super(HiveMetastore, self).__init__(**kwargs)
        self.server_uri = None
        self.database_name = None
        self.runtime_version = None
        self.user_name = None
        self.password = None
        self.nested_resource_provisioning_state = None


class HiveMetastoreListResult(Model):
    """Data Lake Analytics HiveMetastore list information.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar value: The results of the list operation.
    :vartype value:
     list[~azure.mgmt.datalake.analytics.account.models.HiveMetastore]
    :ivar next_link: The link (url) to the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[HiveMetastore]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(HiveMetastoreListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class NameAvailabilityInformation(Model):
    """Data Lake Analytics account name availability result information.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name_available: The Boolean value of true or false to indicate
     whether the Data Lake Analytics account name is available or not.
    :vartype name_available: bool
    :ivar reason: The reason why the Data Lake Analytics account name is not
     available, if nameAvailable is false.
    :vartype reason: str
    :ivar message: The message describing why the Data Lake Analytics account
     name is not available, if nameAvailable is false.
    :vartype message: str
    """

    _validation = {
        'name_available': {'readonly': True},
        'reason': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'name_available': {'key': 'nameAvailable', 'type': 'bool'},
        'reason': {'key': 'reason', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(NameAvailabilityInformation, self).__init__(**kwargs)
        self.name_available = None
        self.reason = None
        self.message = None


class Operation(Model):
    """An available operation for Data Lake Analytics.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name: The name of the operation.
    :vartype name: str
    :ivar display: The display information for the operation.
    :vartype display:
     ~azure.mgmt.datalake.analytics.account.models.OperationDisplay
    :ivar properties: The OperationMetaPropertyInfo for the operation.
    :vartype properties:
     ~azure.mgmt.datalake.analytics.account.models.OperationMetaPropertyInfo
    :ivar origin: The intended executor of the operation. Possible values
     include: 'user', 'system', 'user,system'
    :vartype origin: str or
     ~azure.mgmt.datalake.analytics.account.models.OperationOrigin
    """

    _validation = {
        'name': {'readonly': True},
        'display': {'readonly': True},
        'properties': {'readonly': True},
        'origin': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'properties': {'key': 'properties', 'type': 'OperationMetaPropertyInfo'},
        'origin': {'key': 'origin', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(Operation, self).__init__(**kwargs)
        self.name = None
        self.display = None
        self.properties = None
        self.origin = None


class OperationDisplay(Model):
    """The display information for a particular operation.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar provider: The resource provider of the operation.
    :vartype provider: str
    :ivar resource: The resource type of the operation.
    :vartype resource: str
    :ivar operation: A friendly name of the operation.
    :vartype operation: str
    :ivar description: A friendly description of the operation.
    :vartype description: str
    """

    _validation = {
        'provider': {'readonly': True},
        'resource': {'readonly': True},
        'operation': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(Model):
    """The list of available operations for Data Lake Analytics.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar value: The results of the list operation.
    :vartype value:
     list[~azure.mgmt.datalake.analytics.account.models.Operation]
    :ivar next_link: The link (url) to the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(OperationListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class OperationMetaLogSpecification(Model):
    """OperationMetaLogSpecification.

    :param name: The name for OperationMetaLogSpecification.
    :type name: str
    :param display_name: The displayName for OperationMetaLogSpecification.
    :type display_name: str
    :param blob_duration: The blobDuration for OperationMetaLogSpecification.
    :type blob_duration: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'blob_duration': {'key': 'blobDuration', 'type': 'str'},
    }

    def __init__(self, *, name: str=None, display_name: str=None, blob_duration: str=None, **kwargs) -> None:
        super(OperationMetaLogSpecification, self).__init__(**kwargs)
        self.name = name
        self.display_name = display_name
        self.blob_duration = blob_duration


class OperationMetaMetricAvailabilitiesSpecification(Model):
    """OperationMetaMetricAvailabilitiesSpecification.

    :param time_grain: The timegrain for
     OperationMetaMetricAvailabilitiesSpecification.
    :type time_grain: str
    :param blob_duration: The blobDuration for
     OperationMetaMetricAvailabilitiesSpecification.
    :type blob_duration: str
    """

    _attribute_map = {
        'time_grain': {'key': 'timeGrain', 'type': 'str'},
        'blob_duration': {'key': 'blobDuration', 'type': 'str'},
    }

    def __init__(self, *, time_grain: str=None, blob_duration: str=None, **kwargs) -> None:
        super(OperationMetaMetricAvailabilitiesSpecification, self).__init__(**kwargs)
        self.time_grain = time_grain
        self.blob_duration = blob_duration


class OperationMetaMetricSpecification(Model):
    """OperationMetaMetricSpecification.

    :param name: The name for OperationMetaMetricSpecification.
    :type name: str
    :param display_name: The displayName for OperationMetaMetricSpecification.
    :type display_name: str
    :param unit: The unit for OperationMetaMetricSpecification.
    :type unit: str
    :param aggregation_type: The aggregationType for
     OperationMetaMetricSpecification.
    :type aggregation_type: str
    :param availabilities: The availabilities for
     OperationMetaMetricSpecification.
    :type availabilities:
     list[~azure.mgmt.datalake.analytics.account.models.OperationMetaMetricAvailabilitiesSpecification]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'unit': {'key': 'unit', 'type': 'str'},
        'aggregation_type': {'key': 'aggregationType', 'type': 'str'},
        'availabilities': {'key': 'availabilities', 'type': '[OperationMetaMetricAvailabilitiesSpecification]'},
    }

    def __init__(self, *, name: str=None, display_name: str=None, unit: str=None, aggregation_type: str=None, availabilities=None, **kwargs) -> None:
        super(OperationMetaMetricSpecification, self).__init__(**kwargs)
        self.name = name
        self.display_name = display_name
        self.unit = unit
        self.aggregation_type = aggregation_type
        self.availabilities = availabilities


class OperationMetaPropertyInfo(Model):
    """OperationMetaPropertyInfo.

    :param service_specification: The operations
     OperationMetaServiceSpecification.
    :type service_specification:
     ~azure.mgmt.datalake.analytics.account.models.OperationMetaServiceSpecification
    """

    _attribute_map = {
        'service_specification': {'key': 'serviceSpecification', 'type': 'OperationMetaServiceSpecification'},
    }

    def __init__(self, *, service_specification=None, **kwargs) -> None:
        super(OperationMetaPropertyInfo, self).__init__(**kwargs)
        self.service_specification = service_specification


class OperationMetaServiceSpecification(Model):
    """OperationMetaServiceSpecification.

    :param metric_specifications: The metricSpecifications for
     OperationMetaServiceSpecification.
    :type metric_specifications:
     list[~azure.mgmt.datalake.analytics.account.models.OperationMetaMetricSpecification]
    :param log_specifications: The logSpecifications for
     OperationMetaServiceSpecification.
    :type log_specifications:
     list[~azure.mgmt.datalake.analytics.account.models.OperationMetaLogSpecification]
    """

    _attribute_map = {
        'metric_specifications': {'key': 'metricSpecifications', 'type': '[OperationMetaMetricSpecification]'},
        'log_specifications': {'key': 'logSpecifications', 'type': '[OperationMetaLogSpecification]'},
    }

    def __init__(self, *, metric_specifications=None, log_specifications=None, **kwargs) -> None:
        super(OperationMetaServiceSpecification, self).__init__(**kwargs)
        self.metric_specifications = metric_specifications
        self.log_specifications = log_specifications


class SasTokenInformation(Model):
    """SAS token information.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar access_token: The access token for the associated Azure Storage
     Container.
    :vartype access_token: str
    """

    _validation = {
        'access_token': {'readonly': True},
    }

    _attribute_map = {
        'access_token': {'key': 'accessToken', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(SasTokenInformation, self).__init__(**kwargs)
        self.access_token = None


class StorageAccountInformation(SubResource):
    """Azure Storage account information.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The resource identifier.
    :vartype id: str
    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar suffix: The optional suffix for the storage account.
    :vartype suffix: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'suffix': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'suffix': {'key': 'properties.suffix', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(StorageAccountInformation, self).__init__(**kwargs)
        self.suffix = None


class StorageContainer(SubResource):
    """Azure Storage blob container information.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The resource identifier.
    :vartype id: str
    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar last_modified_time: The last modified time of the blob container.
    :vartype last_modified_time: datetime
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'last_modified_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'last_modified_time': {'key': 'properties.lastModifiedTime', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs) -> None:
        super(StorageContainer, self).__init__(**kwargs)
        self.last_modified_time = None


class UpdateComputePolicyParameters(Model):
    """The parameters used to update a compute policy.

    :param object_id: The AAD object identifier for the entity to create a
     policy for.
    :type object_id: str
    :param object_type: The type of AAD object the object identifier refers
     to. Possible values include: 'User', 'Group', 'ServicePrincipal'
    :type object_type: str or
     ~azure.mgmt.datalake.analytics.account.models.AADObjectType
    :param max_degree_of_parallelism_per_job: The maximum degree of
     parallelism per job this user can use to submit jobs. This property, the
     min priority per job property, or both must be passed.
    :type max_degree_of_parallelism_per_job: int
    :param min_priority_per_job: The minimum priority per job this user can
     use to submit jobs. This property, the max degree of parallelism per job
     property, or both must be passed.
    :type min_priority_per_job: int
    """

    _validation = {
        'max_degree_of_parallelism_per_job': {'minimum': 1},
        'min_priority_per_job': {'minimum': 1},
    }

    _attribute_map = {
        'object_id': {'key': 'properties.objectId', 'type': 'str'},
        'object_type': {'key': 'properties.objectType', 'type': 'str'},
        'max_degree_of_parallelism_per_job': {'key': 'properties.maxDegreeOfParallelismPerJob', 'type': 'int'},
        'min_priority_per_job': {'key': 'properties.minPriorityPerJob', 'type': 'int'},
    }

    def __init__(self, *, object_id: str=None, object_type=None, max_degree_of_parallelism_per_job: int=None, min_priority_per_job: int=None, **kwargs) -> None:
        super(UpdateComputePolicyParameters, self).__init__(**kwargs)
        self.object_id = object_id
        self.object_type = object_type
        self.max_degree_of_parallelism_per_job = max_degree_of_parallelism_per_job
        self.min_priority_per_job = min_priority_per_job


class UpdateComputePolicyWithAccountParameters(Model):
    """The parameters used to update a compute policy while updating a Data Lake
    Analytics account.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The unique name of the compute policy to update.
    :type name: str
    :param object_id: The AAD object identifier for the entity to create a
     policy for.
    :type object_id: str
    :param object_type: The type of AAD object the object identifier refers
     to. Possible values include: 'User', 'Group', 'ServicePrincipal'
    :type object_type: str or
     ~azure.mgmt.datalake.analytics.account.models.AADObjectType
    :param max_degree_of_parallelism_per_job: The maximum degree of
     parallelism per job this user can use to submit jobs. This property, the
     min priority per job property, or both must be passed.
    :type max_degree_of_parallelism_per_job: int
    :param min_priority_per_job: The minimum priority per job this user can
     use to submit jobs. This property, the max degree of parallelism per job
     property, or both must be passed.
    :type min_priority_per_job: int
    """

    _validation = {
        'name': {'required': True},
        'max_degree_of_parallelism_per_job': {'minimum': 1},
        'min_priority_per_job': {'minimum': 1},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'object_id': {'key': 'properties.objectId', 'type': 'str'},
        'object_type': {'key': 'properties.objectType', 'type': 'str'},
        'max_degree_of_parallelism_per_job': {'key': 'properties.maxDegreeOfParallelismPerJob', 'type': 'int'},
        'min_priority_per_job': {'key': 'properties.minPriorityPerJob', 'type': 'int'},
    }

    def __init__(self, *, name: str, object_id: str=None, object_type=None, max_degree_of_parallelism_per_job: int=None, min_priority_per_job: int=None, **kwargs) -> None:
        super(UpdateComputePolicyWithAccountParameters, self).__init__(**kwargs)
        self.name = name
        self.object_id = object_id
        self.object_type = object_type
        self.max_degree_of_parallelism_per_job = max_degree_of_parallelism_per_job
        self.min_priority_per_job = min_priority_per_job


class UpdateDataLakeAnalyticsAccountParameters(Model):
    """The parameters that can be used to update an existing Data Lake Analytics
    account.

    :param tags: The resource tags.
    :type tags: dict[str, str]
    :param data_lake_store_accounts: The list of Data Lake Store accounts
     associated with this account.
    :type data_lake_store_accounts:
     list[~azure.mgmt.datalake.analytics.account.models.UpdateDataLakeStoreWithAccountParameters]
    :param storage_accounts: The list of Azure Blob storage accounts
     associated with this account.
    :type storage_accounts:
     list[~azure.mgmt.datalake.analytics.account.models.UpdateStorageAccountWithAccountParameters]
    :param compute_policies: The list of compute policies associated with this
     account.
    :type compute_policies:
     list[~azure.mgmt.datalake.analytics.account.models.UpdateComputePolicyWithAccountParameters]
    :param firewall_rules: The list of firewall rules associated with this
     account.
    :type firewall_rules:
     list[~azure.mgmt.datalake.analytics.account.models.UpdateFirewallRuleWithAccountParameters]
    :param firewall_state: The current state of the IP address firewall for
     this account. Disabling the firewall does not remove existing rules, they
     will just be ignored until the firewall is re-enabled. Possible values
     include: 'Enabled', 'Disabled'
    :type firewall_state: str or
     ~azure.mgmt.datalake.analytics.account.models.FirewallState
    :param firewall_allow_azure_ips: The current state of allowing or
     disallowing IPs originating within Azure through the firewall. If the
     firewall is disabled, this is not enforced. Possible values include:
     'Enabled', 'Disabled'
    :type firewall_allow_azure_ips: str or
     ~azure.mgmt.datalake.analytics.account.models.FirewallAllowAzureIpsState
    :param new_tier: The commitment tier to use for next month. Possible
     values include: 'Consumption', 'Commitment_100AUHours',
     'Commitment_500AUHours', 'Commitment_1000AUHours',
     'Commitment_5000AUHours', 'Commitment_10000AUHours',
     'Commitment_50000AUHours', 'Commitment_100000AUHours',
     'Commitment_500000AUHours'
    :type new_tier: str or
     ~azure.mgmt.datalake.analytics.account.models.TierType
    :param max_job_count: The maximum supported jobs running under the account
     at the same time.
    :type max_job_count: int
    :param max_degree_of_parallelism: The maximum supported degree of
     parallelism for this account.
    :type max_degree_of_parallelism: int
    :param max_degree_of_parallelism_per_job: The maximum supported degree of
     parallelism per job for this account.
    :type max_degree_of_parallelism_per_job: int
    :param min_priority_per_job: The minimum supported priority per job for
     this account.
    :type min_priority_per_job: int
    :param query_store_retention: The number of days that job metadata is
     retained.
    :type query_store_retention: int
    """

    _validation = {
        'max_job_count': {'minimum': 1},
        'max_degree_of_parallelism': {'minimum': 1},
        'max_degree_of_parallelism_per_job': {'minimum': 1},
        'min_priority_per_job': {'minimum': 1},
        'query_store_retention': {'maximum': 180, 'minimum': 1},
    }

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'data_lake_store_accounts': {'key': 'properties.dataLakeStoreAccounts', 'type': '[UpdateDataLakeStoreWithAccountParameters]'},
        'storage_accounts': {'key': 'properties.storageAccounts', 'type': '[UpdateStorageAccountWithAccountParameters]'},
        'compute_policies': {'key': 'properties.computePolicies', 'type': '[UpdateComputePolicyWithAccountParameters]'},
        'firewall_rules': {'key': 'properties.firewallRules', 'type': '[UpdateFirewallRuleWithAccountParameters]'},
        'firewall_state': {'key': 'properties.firewallState', 'type': 'FirewallState'},
        'firewall_allow_azure_ips': {'key': 'properties.firewallAllowAzureIps', 'type': 'FirewallAllowAzureIpsState'},
        'new_tier': {'key': 'properties.newTier', 'type': 'TierType'},
        'max_job_count': {'key': 'properties.maxJobCount', 'type': 'int'},
        'max_degree_of_parallelism': {'key': 'properties.maxDegreeOfParallelism', 'type': 'int'},
        'max_degree_of_parallelism_per_job': {'key': 'properties.maxDegreeOfParallelismPerJob', 'type': 'int'},
        'min_priority_per_job': {'key': 'properties.minPriorityPerJob', 'type': 'int'},
        'query_store_retention': {'key': 'properties.queryStoreRetention', 'type': 'int'},
    }

    def __init__(self, *, tags=None, data_lake_store_accounts=None, storage_accounts=None, compute_policies=None, firewall_rules=None, firewall_state=None, firewall_allow_azure_ips=None, new_tier=None, max_job_count: int=None, max_degree_of_parallelism: int=None, max_degree_of_parallelism_per_job: int=None, min_priority_per_job: int=None, query_store_retention: int=None, **kwargs) -> None:
        super(UpdateDataLakeAnalyticsAccountParameters, self).__init__(**kwargs)
        self.tags = tags
        self.data_lake_store_accounts = data_lake_store_accounts
        self.storage_accounts = storage_accounts
        self.compute_policies = compute_policies
        self.firewall_rules = firewall_rules
        self.firewall_state = firewall_state
        self.firewall_allow_azure_ips = firewall_allow_azure_ips
        self.new_tier = new_tier
        self.max_job_count = max_job_count
        self.max_degree_of_parallelism = max_degree_of_parallelism
        self.max_degree_of_parallelism_per_job = max_degree_of_parallelism_per_job
        self.min_priority_per_job = min_priority_per_job
        self.query_store_retention = query_store_retention


class UpdateDataLakeStoreWithAccountParameters(Model):
    """The parameters used to update a Data Lake Store account while updating a
    Data Lake Analytics account.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The unique name of the Data Lake Store account to
     update.
    :type name: str
    :param suffix: The optional suffix for the Data Lake Store account.
    :type suffix: str
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'suffix': {'key': 'properties.suffix', 'type': 'str'},
    }

    def __init__(self, *, name: str, suffix: str=None, **kwargs) -> None:
        super(UpdateDataLakeStoreWithAccountParameters, self).__init__(**kwargs)
        self.name = name
        self.suffix = suffix


class UpdateFirewallRuleParameters(Model):
    """The parameters used to update a firewall rule.

    :param start_ip_address: The start IP address for the firewall rule. This
     can be either ipv4 or ipv6. Start and End should be in the same protocol.
    :type start_ip_address: str
    :param end_ip_address: The end IP address for the firewall rule. This can
     be either ipv4 or ipv6. Start and End should be in the same protocol.
    :type end_ip_address: str
    """

    _attribute_map = {
        'start_ip_address': {'key': 'properties.startIpAddress', 'type': 'str'},
        'end_ip_address': {'key': 'properties.endIpAddress', 'type': 'str'},
    }

    def __init__(self, *, start_ip_address: str=None, end_ip_address: str=None, **kwargs) -> None:
        super(UpdateFirewallRuleParameters, self).__init__(**kwargs)
        self.start_ip_address = start_ip_address
        self.end_ip_address = end_ip_address


class UpdateFirewallRuleWithAccountParameters(Model):
    """The parameters used to update a firewall rule while updating a Data Lake
    Analytics account.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The unique name of the firewall rule to update.
    :type name: str
    :param start_ip_address: The start IP address for the firewall rule. This
     can be either ipv4 or ipv6. Start and End should be in the same protocol.
    :type start_ip_address: str
    :param end_ip_address: The end IP address for the firewall rule. This can
     be either ipv4 or ipv6. Start and End should be in the same protocol.
    :type end_ip_address: str
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'start_ip_address': {'key': 'properties.startIpAddress', 'type': 'str'},
        'end_ip_address': {'key': 'properties.endIpAddress', 'type': 'str'},
    }

    def __init__(self, *, name: str, start_ip_address: str=None, end_ip_address: str=None, **kwargs) -> None:
        super(UpdateFirewallRuleWithAccountParameters, self).__init__(**kwargs)
        self.name = name
        self.start_ip_address = start_ip_address
        self.end_ip_address = end_ip_address


class UpdateStorageAccountParameters(Model):
    """The parameters used to update an Azure Storage account.

    :param access_key: The updated access key associated with this Azure
     Storage account that will be used to connect to it.
    :type access_key: str
    :param suffix: The optional suffix for the storage account.
    :type suffix: str
    """

    _attribute_map = {
        'access_key': {'key': 'properties.accessKey', 'type': 'str'},
        'suffix': {'key': 'properties.suffix', 'type': 'str'},
    }

    def __init__(self, *, access_key: str=None, suffix: str=None, **kwargs) -> None:
        super(UpdateStorageAccountParameters, self).__init__(**kwargs)
        self.access_key = access_key
        self.suffix = suffix


class UpdateStorageAccountWithAccountParameters(Model):
    """The parameters used to update an Azure Storage account while updating a
    Data Lake Analytics account.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The unique name of the Azure Storage account to
     update.
    :type name: str
    :param access_key: The updated access key associated with this Azure
     Storage account that will be used to connect to it.
    :type access_key: str
    :param suffix: The optional suffix for the storage account.
    :type suffix: str
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'access_key': {'key': 'properties.accessKey', 'type': 'str'},
        'suffix': {'key': 'properties.suffix', 'type': 'str'},
    }

    def __init__(self, *, name: str, access_key: str=None, suffix: str=None, **kwargs) -> None:
        super(UpdateStorageAccountWithAccountParameters, self).__init__(**kwargs)
        self.name = name
        self.access_key = access_key
        self.suffix = suffix


class VirtualNetworkRule(SubResource):
    """Data Lake Analytics  VirtualNetwork Rule information.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The resource identifier.
    :vartype id: str
    :ivar name: The resource name.
    :vartype name: str
    :ivar type: The resource type.
    :vartype type: str
    :ivar subnet_id: The resource identifier for the subnet
    :vartype subnet_id: str
    :ivar virtual_network_rule_state: The current state of the VirtualNetwork
     Rule. Possible values include: 'Active', 'NetworkSourceDeleted', 'Failed'
    :vartype virtual_network_rule_state: str or
     ~azure.mgmt.datalake.analytics.account.models.VirtualNetworkRuleState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'subnet_id': {'readonly': True},
        'virtual_network_rule_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'subnet_id': {'key': 'properties.subnetId', 'type': 'str'},
        'virtual_network_rule_state': {'key': 'properties.virtualNetworkRuleState', 'type': 'VirtualNetworkRuleState'},
    }

    def __init__(self, **kwargs) -> None:
        super(VirtualNetworkRule, self).__init__(**kwargs)
        self.subnet_id = None
        self.virtual_network_rule_state = None


class VirtualNetworkRuleListResult(Model):
    """Data Lake Analytics VirtualNetwork rule list information.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar value: The results of the list operation.
    :vartype value:
     list[~azure.mgmt.datalake.analytics.account.models.VirtualNetworkRule]
    :ivar next_link: The link (url) to the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualNetworkRule]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(VirtualNetworkRuleListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None
