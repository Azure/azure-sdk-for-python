# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import asyncio
import os

from azure.ai.contentunderstanding.aio import ContentUnderstandingClient

from sample_helper import (
    get_credential,
    generate_classifier_id,
    new_simple_classifier_schema,
    save_json_to_file
)

from dotenv import load_dotenv

load_dotenv()

"""
Prerequisites:
    pip install azure-ai-contentunderstanding python-dotenv
    az login  # Used for DefaultAzureCredential(). Alternatively, set the AZURE_CONTENT_UNDERSTANDING_KEY environment variable

Environment variables:
    AZURE_CONTENT_UNDERSTANDING_ENDPOINT   (required)
    AZURE_CONTENT_UNDERSTANDING_KEY        (optional - DefaultAzureCredential() will be used if not set)
    These variables can be set in a .env file in the samples directory for repeated use. Please see env.sample for an example.

Run:
    python content_classifiers_classify.py
"""


async def main():
    """
    Classify document from URL using begin_classify API.
    
    High-level steps:
    1. Create a custom classifier
    2. Classify a document from a remote URL
    3. Save the classification result to a file
    4. Clean up the created classifier
    """
    endpoint = os.getenv("AZURE_CONTENT_UNDERSTANDING_ENDPOINT") or ""
    credential = get_credential()

    async with ContentUnderstandingClient(endpoint=endpoint, credential=credential) as client, credential:
        classifier_id = generate_classifier_id()
        
        # Create a custom classifier using object model
        print(f"üîß Creating custom classifier '{classifier_id}'...")
        
        classifier_schema = new_simple_classifier_schema(
            classifier_id=classifier_id,
            description=f"Custom classifier for URL classification demo: {classifier_id}",
            tags={"demo_type": "url_classification"}
        )

        # Start the classifier creation operation
        poller = await client.content_classifiers.begin_create_or_replace(
            classifier_id=classifier_id,
            resource=classifier_schema,
        )

        # Wait for the classifier to be created
        print(f"‚è≥ Waiting for classifier creation to complete...")
        await poller.result()
        print(f"‚úÖ Classifier '{classifier_id}' created successfully!")

        # Use the provided URL for the mixed financial docs PDF
        mixed_docs_url = "https://github.com/Azure-Samples/azure-ai-content-understanding-python/raw/refs/heads/main/data/mixed_financial_docs.pdf"
        print(f"üåê Classifying document from URL: {mixed_docs_url}")

        # Begin classification operation with URL
        print(f"üîç Starting URL classification with classifier '{classifier_id}'...")
        classification_poller = await client.content_classifiers.begin_classify(
            classifier_id=classifier_id,
            body={
                "url": mixed_docs_url,
            },
        )

        # Wait for classification completion
        print(f"‚è≥ Waiting for classification to complete...")
        classification_result = await classification_poller.result()
        print(f"‚úÖ Classification completed successfully!")

        # Display classification results
        print(f"üìä Classification Results:")
        for content in classification_result.contents:
            if hasattr(content, 'classifications') and content.classifications:
                for classification in content.classifications:
                    print(f"   Category: {classification.category}")
                    print(f"   Confidence: {classification.confidence}")
                    print(f"   Score: {classification.score}")
                    print()

        # Save the classification result to a file
        saved_file_path = save_json_to_file(
            result=classification_result.as_dict(),
            filename_prefix="content_classifiers_classify"
        )
        print(f"üíæ Classification result saved to: {saved_file_path}")

        # Clean up the created classifier (demo cleanup)
        print(f"üóëÔ∏è  Deleting classifier '{classifier_id}' (demo cleanup)...")
        await client.content_classifiers.delete(classifier_id=classifier_id)
        print(f"‚úÖ Classifier '{classifier_id}' deleted successfully!")


# x-ms-original-file: 2025-05-01-preview/ContentClassifiers_Classify.json
if __name__ == "__main__":
    asyncio.run(main())
