# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import asyncio
import os
from datetime import datetime, timezone
from typing import Optional, Dict
import uuid
from dotenv import load_dotenv

from azure.ai.contentunderstanding.aio import ContentUnderstandingClient
from azure.ai.contentunderstanding.models import PersonDirectory

from azure.core.credentials import AzureKeyCredential
from azure.identity.aio import DefaultAzureCredential

load_dotenv()

"""
Prerequisites:
    pip install azure-ai-contentunderstanding python-dotenv
    az login  # Used for DefaultAzureCredential(). Alternatively, set the AZURE_CONTENT_UNDERSTANDING_KEY environment variable

Environment variables:
    AZURE_CONTENT_UNDERSTANDING_ENDPOINT   (required)
    AZURE_CONTENT_UNDERSTANDING_KEY        (optional - DefaultAzureCredential() will be used if not set)
    These variables can be set in a .env file in the samples directory for repeated use. Please see env.sample for an example.

Run:
    python person_directories_list_persons.py
"""


async def main():
    """
    List persons in directory using list_persons API.

    High-level steps:
    1. Create a person directory
    2. Add multiple persons to the directory
    3. List all persons in the directory
    4. Display detailed information about each person
    6. Clean up the created directory
    """
    endpoint = os.getenv("AZURE_CONTENT_UNDERSTANDING_ENDPOINT") or ""
    # Return AzureKeyCredential if AZURE_CONTENT_UNDERSTANDING_KEY is set, otherwise DefaultAzureCredential
    key = os.getenv("AZURE_CONTENT_UNDERSTANDING_KEY")
    credential = AzureKeyCredential(key) if key else DefaultAzureCredential()

    async with ContentUnderstandingClient(
        endpoint=endpoint, credential=credential
    ) as client, credential:
        person_directory_id = f"sdk-sample-dir-{datetime.now(timezone.utc):%Y%m%d-%H%M%S}-{uuid.uuid4().hex[:8]}"

        # Create a person directory first
        print(f"üîß Creating person directory '{person_directory_id}'...")

        person_directory = PersonDirectory(
            description=f"Sample person directory for list persons demo: {person_directory_id}",
            tags={"demo_type": "list_persons"},
        )

        # Create the person directory
        await client.person_directories.create(
            person_directory_id=person_directory_id,
            resource=person_directory,
        )
        print(f"‚úÖ Person directory created successfully!")

        # Add multiple persons to the directory
        print(f"üë• Adding multiple persons to directory...")

        person_ids = []
        for i, name in enumerate(["Alice Johnson", "Bob Smith", "Carol Davis"], 1):
            response = await client.person_directories.add_person(
                person_directory_id=person_directory_id,
                body={
                    "tags": {
                        "name": name,
                        "role": f"test_subject_{i}",
                        "department": "engineering",
                        "access_level": "standard",
                    }
                },
            )
            person_ids.append(response.person_id)
            print(f"   ‚úÖ Added {name} (ID: {response.person_id})")

        print(f"‚úÖ Added {len(person_ids)} persons to directory")

        # List all persons in the directory
        print(f"üìã Listing all persons in directory '{person_directory_id}'...")

        list_response = client.person_directories.list_persons(
            person_directory_id=person_directory_id
        )
        persons = [person async for person in list_response]

        print(f"‚úÖ Found {len(persons)} persons in directory")
        print()

        # Display detailed information about each person
        for i, person in enumerate(persons, 1):
            print(f"üë§ Person {i}:")
            print(f"   ID: {getattr(person, 'person_id', 'N/A')}")
            print(f"   Tags: {getattr(person, 'tags', 'N/A')}")
            print(f"   Created at: {getattr(person, 'created_at', 'N/A')}")
            print()

        # Clean up the created directory (demo cleanup)
        print(f"üóëÔ∏è  Deleting person directory '{person_directory_id}' (demo cleanup)...")
        await client.person_directories.delete(person_directory_id=person_directory_id)
        print(f"‚úÖ Person directory '{person_directory_id}' deleted successfully!")


# x-ms-original-file: 2025-05-01-preview/PersonDirectories_ListPersons.json
if __name__ == "__main__":
    asyncio.run(main())
