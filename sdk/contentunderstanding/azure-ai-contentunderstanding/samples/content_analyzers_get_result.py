# pylint: disable=line-too-long,useless-suppression
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import asyncio
import os

from azure.ai.contentunderstanding.aio import ContentUnderstandingClient
from azure.ai.contentunderstanding.models import (
    ContentAnalyzer,
    ContentAnalyzerConfig,
    FieldSchema,
    FieldDefinition,
    FieldType,
    GenerationMethod,
    AnalysisMode,
    ProcessingLocation,
)

from sample_helper import (
    extract_operation_id_from_poller,
    PollerType,
    save_json_to_file,
)
from azure.core.credentials import AzureKeyCredential
from azure.identity.aio import DefaultAzureCredential

from dotenv import load_dotenv

load_dotenv()

"""
Async sample: get operation result using get_result API.

Prerequisites:
    pip install azure-ai-contentunderstanding python-dotenv
    az login  # Used for DefaultAzureCredential(). Alternatively, set the AZURE_CONTENT_UNDERSTANDING_KEY environment variable

Environment variables:
    AZURE_CONTENT_UNDERSTANDING_ENDPOINT   (required)
    AZURE_CONTENT_UNDERSTANDING_KEY        (optional - DefaultAzureCredential() will be used if not set)
    These variables can be set in a .env file in the samples directory for repeated use. Please see env.sample for an example.

Run:
    python content_analyzers_get_result.py
"""


async def main():
    """
    Get analysis result using get_result API.

    High-level steps:
    1. Create a custom analyzer
    2. Analyze a document to get an operation ID
    3. Extract operation ID from the analysis poller
    4. Get the analysis result using the operation ID
    5. Save the analysis result to a file
    6. Clean up the created analyzer
    """
    endpoint = os.getenv("AZURE_CONTENT_UNDERSTANDING_ENDPOINT") or ""
    # Return AzureKeyCredential if AZURE_CONTENT_UNDERSTANDING_KEY is set, otherwise DefaultAzureCredential
    key = os.getenv("AZURE_CONTENT_UNDERSTANDING_KEY")
    credential = AzureKeyCredential(key) if key else DefaultAzureCredential()

    async with ContentUnderstandingClient(endpoint=endpoint, credential=credential) as client:
        analyzer_id = f"sdk-sample-analyzer-for-result-{int(asyncio.get_event_loop().time())}"

        # Create a custom analyzer using object model
        print(f"üîß Creating custom analyzer '{analyzer_id}'...")

        content_analyzer = ContentAnalyzer(
            base_analyzer_id="prebuilt-documentAnalyzer",
            config=ContentAnalyzerConfig(
                enable_formula=True,
                enable_layout=True,
                enable_ocr=True,
                estimate_field_source_and_confidence=True,
                return_details=True,
            ),
            description="Custom analyzer for get result demo",
            field_schema=FieldSchema(
                fields={
                    "total_amount": FieldDefinition(
                        description="Total amount of this document",
                        method=GenerationMethod.EXTRACT,
                        type=FieldType.NUMBER,
                    ),
                    "company_name": FieldDefinition(
                        description="Name of the company",
                        method=GenerationMethod.EXTRACT,
                        type=FieldType.STRING,
                    ),
                },
                description="Schema for get result demo",
                name="demo_schema",
            ),
            mode=AnalysisMode.STANDARD,
            processing_location=ProcessingLocation.GLOBAL,
            tags={"demo_type": "get_result"},
        )

        # Start the analyzer creation operation
        poller = await client.content_analyzers.begin_create_or_replace(
            analyzer_id=analyzer_id,
            resource=content_analyzer,
        )

        # Extract operation ID from the poller
        operation_id = extract_operation_id_from_poller(poller, PollerType.ANALYZER_CREATION)
        print(f"üìã Extracted creation operation ID: {operation_id}")

        # Wait for the analyzer to be created
        print(f"‚è≥ Waiting for analyzer creation to complete...")
        await poller.result()
        print(f"‚úÖ Analyzer '{analyzer_id}' created successfully!")

        # Read the sample invoice PDF file
        pdf_path = "sample_files/sample_invoice.pdf"
        print(f"üìÑ Reading document file: {pdf_path}")
        with open(pdf_path, "rb") as pdf_file:
            pdf_content = pdf_file.read()

        # Begin document analysis operation
        print(f"üîç Starting document analysis with analyzer '{analyzer_id}'...")
        analysis_poller = await client.content_analyzers.begin_analyze_binary(
            analyzer_id=analyzer_id,
            input=pdf_content,
            content_type="application/pdf",
        )

        # Wait for analysis completion
        print(f"‚è≥ Waiting for document analysis to complete...")
        analysis_result = await analysis_poller.result()
        print(f"‚úÖ Document analysis completed successfully!")

        # Extract operation ID for get_result
        analysis_operation_id = extract_operation_id_from_poller(analysis_poller, PollerType.ANALYZE_CALL)
        print(f"üìã Extracted analysis operation ID: {analysis_operation_id}")

        # Get the analysis result using the operation ID
        print(f"üîç Getting analysis result using operation ID '{analysis_operation_id}'...")
        operation_status = await client.content_analyzers.get_result(
            operation_id=analysis_operation_id,
        )

        print(f"‚úÖ Analysis result retrieved successfully!")
        print(f"   Operation ID: {operation_status.id}")
        print(f"   Status: {operation_status.status}")

        # The actual analysis result is in operation_status.result
        operation_result = operation_status.result
        if operation_result is None:
            print("‚ö†Ô∏è  No analysis result available")
            return
        print(f"   Result contains {len(operation_result.contents)} contents")

        # Save the analysis result to a file
        saved_file_path = save_json_to_file(
            result=operation_result.as_dict(),
            filename_prefix="content_analyzers_get_result",
        )
        print(f"üíæ Analysis result saved to: {saved_file_path}")

        # Clean up the created analyzer (demo cleanup)
        print(f"üóëÔ∏è  Deleting analyzer '{analyzer_id}' (demo cleanup)...")
        await client.content_analyzers.delete(analyzer_id=analyzer_id)
        print(f"‚úÖ Analyzer '{analyzer_id}' deleted successfully!")

    # x-ms-original-file: 2025-05-01-preview/ContentAnalyzers_GetResult.json
    # Manually close DefaultAzureCredential if it was used
    if isinstance(credential, DefaultAzureCredential):
        await credential.close()


if __name__ == "__main__":
    asyncio.run(main())
