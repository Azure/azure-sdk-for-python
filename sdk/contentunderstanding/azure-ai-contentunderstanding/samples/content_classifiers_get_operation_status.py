# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import asyncio
import os
from datetime import datetime
import uuid

from azure.ai.contentunderstanding.aio import ContentUnderstandingClient

from sample_helper import (
    new_simple_classifier_schema,
    extract_operation_id_from_poller,
    PollerType,
)
from azure.core.credentials import AzureKeyCredential
from azure.identity.aio import DefaultAzureCredential

from dotenv import load_dotenv

load_dotenv()

"""
Prerequisites:
    pip install azure-ai-contentunderstanding python-dotenv
    az login  # Used for DefaultAzureCredential(). Alternatively, set the AZURE_CONTENT_UNDERSTANDING_KEY environment variable

Environment variables:
    AZURE_CONTENT_UNDERSTANDING_ENDPOINT   (required)
    AZURE_CONTENT_UNDERSTANDING_KEY        (optional - DefaultAzureCredential() will be used if not set)
    These variables can be set in a .env file in the samples directory for repeated use. Please see env.sample for an example.

Run:
    python content_classifiers_get_operation_status.py
"""


async def main():
    """
    Get operation status using get_operation_status API.

    High-level steps:
    1. Create a custom classifier to get an operation ID
    2. Extract operation ID from the poller
    3. Get operation status using the operation ID
    4. Clean up the created classifier
    """
    endpoint = os.getenv("AZURE_CONTENT_UNDERSTANDING_ENDPOINT") or ""
    # Return AzureKeyCredential if AZURE_CONTENT_UNDERSTANDING_KEY is set, otherwise DefaultAzureCredential
    key = os.getenv("AZURE_CONTENT_UNDERSTANDING_KEY")
    credential = AzureKeyCredential(key) if key else DefaultAzureCredential()

    async with ContentUnderstandingClient(
        endpoint=endpoint, credential=credential
    ) as client, credential:
        classifier_id = f"sdk-sample-clf-{datetime.now().strftime('%Y%m%d')}-{datetime.now().strftime('%H%M%S')}-{uuid.uuid4().hex[:8]}"

        # First, create a classifier to get an operation ID (for demo purposes)
        print(
            f"üîß Creating classifier '{classifier_id}' to demonstrate operation status..."
        )

        classifier_schema = new_simple_classifier_schema(
            classifier_id=classifier_id,
            description=f"Custom classifier for operation status demo: {classifier_id}",
            tags={"demo_type": "operation_status"},
        )

        # Start the classifier creation operation
        poller = await client.content_classifiers.begin_create_or_replace(
            classifier_id=classifier_id,
            resource=classifier_schema,
        )

        # Extract operation ID from the poller
        operation_id = extract_operation_id_from_poller(
            poller, PollerType.CLASSIFIER_CREATION
        )
        print(f"üìã Extracted creation operation ID: {operation_id}")

        # Get operation status
        print(f"üîç Getting operation status for operation '{operation_id}'...")
        response = await client.content_classifiers.get_operation_status(
            classifier_id=classifier_id,
            operation_id=operation_id,
        )

        print(f"‚úÖ Operation status retrieved successfully!")
        print(f"   Operation ID: {getattr(response, 'id', 'N/A')}")
        print(f"   Status: {getattr(response, 'status', 'N/A')}")

        # Wait for the operation to complete
        print(f"‚è≥ Waiting for classifier creation to complete...")
        await poller.result()
        print(f"‚úÖ Classifier '{classifier_id}' created successfully!")

        # Get final operation status after completion
        print(f"üîç Getting final operation status...")
        final_response = await client.content_classifiers.get_operation_status(
            classifier_id=classifier_id,
            operation_id=operation_id,
        )
        print(f"‚úÖ Final operation status: {getattr(final_response, 'status', 'N/A')}")

        # Clean up the created classifier (demo cleanup)
        print(f"üóëÔ∏è  Deleting classifier '{classifier_id}' (demo cleanup)...")
        await client.content_classifiers.delete(classifier_id=classifier_id)
        print(f"‚úÖ Classifier '{classifier_id}' deleted successfully!")


# x-ms-original-file: 2025-05-01-preview/ContentClassifiers_GetOperationStatus.json
if __name__ == "__main__":
    asyncio.run(main())
