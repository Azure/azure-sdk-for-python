# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import asyncio
import os
from datetime import datetime
import uuid

from azure.ai.contentunderstanding.aio import ContentUnderstandingClient
from azure.ai.contentunderstanding.models import ContentClassifier, ClassifierCategory
from typing import Optional, Dict

from sample_helper import (
    save_json_to_file,
)
from azure.core.credentials import AzureKeyCredential
from azure.identity.aio import DefaultAzureCredential

from dotenv import load_dotenv

load_dotenv()

"""
Prerequisites:
    pip install azure-ai-contentunderstanding python-dotenv
    az login  # Used for DefaultAzureCredential(). Alternatively, set the AZURE_CONTENT_UNDERSTANDING_KEY environment variable

Environment variables:
    AZURE_CONTENT_UNDERSTANDING_ENDPOINT   (required)
    AZURE_CONTENT_UNDERSTANDING_KEY        (optional - DefaultAzureCredential() will be used if not set)
    These variables can be set in a .env file in the samples directory for repeated use. Please see env.sample for an example.

Run:
    python content_classifiers_classify_binary.py
"""


def new_simple_classifier_schema(
    classifier_id: str,
    description: Optional[str] = None,
    tags: Optional[Dict[str, str]] = None,
) -> ContentClassifier:
    """Create a simple ContentClassifier object with default configuration.

    Args:
        classifier_id: The classifier ID
        description: Optional description for the classifier
        tags: Optional tags for the classifier

    Returns:
        ContentClassifier: A configured ContentClassifier object
    """
    if description is None:
        description = f"test classifier: {classifier_id}"
    if tags is None:
        tags = {"test_type": "simple"}

    return ContentClassifier(
        categories={
            "Loan application": ClassifierCategory(
                description="Documents submitted by individuals or businesses to request funding, typically including personal or business details, financial history, loan amount, purpose, and supporting documentation."
            ),
            "Invoice": ClassifierCategory(
                description="Billing documents issued by sellers or service providers to request payment for goods or services, detailing items, prices, taxes, totals, and payment terms."
            ),
            "Bank_Statement": ClassifierCategory(
                description="Official statements issued by banks that summarize account activity over a period, including deposits, withdrawals, fees, and balances."
            ),
        },
        split_mode="auto",
        description=description,
        tags=tags,
    )


async def main():
    """
    Classify binary document using begin_classify_binary API.

    High-level steps:
    1. Create a custom classifier
    2. Read a binary document file
    3. Classify the document using the classifier
    4. Save the classification result to a file
    5. Clean up the created classifier
    """
    endpoint = os.getenv("AZURE_CONTENT_UNDERSTANDING_ENDPOINT") or ""
    # Return AzureKeyCredential if AZURE_CONTENT_UNDERSTANDING_KEY is set, otherwise DefaultAzureCredential
    key = os.getenv("AZURE_CONTENT_UNDERSTANDING_KEY")
    credential = AzureKeyCredential(key) if key else DefaultAzureCredential()

    async with ContentUnderstandingClient(
        endpoint=endpoint, credential=credential
    ) as client, credential:
        classifier_id = f"sdk-sample-clf-{datetime.now().strftime('%Y%m%d')}-{datetime.now().strftime('%H%M%S')}-{uuid.uuid4().hex[:8]}"

        # Create a custom classifier using object model
        print(f"üîß Creating custom classifier '{classifier_id}'...")

        classifier_schema = new_simple_classifier_schema(
            classifier_id=classifier_id,
            description=f"Custom classifier for binary classification demo: {classifier_id}",
            tags={"demo_type": "binary_classification"},
        )

        # Start the classifier creation operation
        poller = await client.content_classifiers.begin_create_or_replace(
            classifier_id=classifier_id,
            resource=classifier_schema,
        )

        # Wait for the classifier to be created
        print(f"‚è≥ Waiting for classifier creation to complete...")
        await poller.result()
        print(f"‚úÖ Classifier '{classifier_id}' created successfully!")

        # Read the mixed financial docs PDF file
        pdf_path = "sample_files/mixed_financial_docs.pdf"
        print(f"üìÑ Reading document file: {pdf_path}")
        with open(pdf_path, "rb") as pdf_file:
            pdf_content = pdf_file.read()

        # Begin binary classification operation
        print(f"üîç Starting binary classification with classifier '{classifier_id}'...")
        classification_poller = await client.content_classifiers.begin_classify_binary(
            classifier_id=classifier_id,
            input=pdf_content,
            content_type="application/pdf",
        )

        # Wait for classification completion
        print(f"‚è≥ Waiting for classification to complete...")
        classification_result = await classification_poller.result()
        print(f"‚úÖ Classification completed successfully!")

        # Display classification results
        print(f"üìä Classification Results:")
        for content in classification_result.contents:
            if hasattr(content, "classifications") and content.classifications:
                for classification in content.classifications:
                    print(f"   Category: {classification.category}")
                    print(f"   Confidence: {classification.confidence}")
                    print(f"   Score: {classification.score}")
                    print()

        # Save the classification result to a file
        saved_file_path = save_json_to_file(
            result=classification_result.as_dict(),
            filename_prefix="content_classifiers_classify_binary",
        )
        print(f"üíæ Classification result saved to: {saved_file_path}")

        # Clean up the created classifier (demo cleanup)
        print(f"üóëÔ∏è  Deleting classifier '{classifier_id}' (demo cleanup)...")
        await client.content_classifiers.delete(classifier_id=classifier_id)
        print(f"‚úÖ Classifier '{classifier_id}' deleted successfully!")


# x-ms-original-file: 2025-05-01-preview/ContentClassifiers_ClassifyBinary.json
if __name__ == "__main__":
    asyncio.run(main())
