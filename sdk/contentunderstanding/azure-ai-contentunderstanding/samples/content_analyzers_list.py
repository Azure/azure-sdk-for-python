# pylint: disable=line-too-long,useless-suppression
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import asyncio
import os

from azure.ai.contentunderstanding.aio import ContentUnderstandingClient

from azure.core.credentials import AzureKeyCredential
from azure.identity.aio import DefaultAzureCredential

from dotenv import load_dotenv

load_dotenv()

"""
Prerequisites:
    pip install azure-ai-contentunderstanding python-dotenv
    az login  # Used for DefaultAzureCredential(). Alternatively, set the AZURE_CONTENT_UNDERSTANDING_KEY environment variable

Environment variables:
    AZURE_CONTENT_UNDERSTANDING_ENDPOINT   (required)
    AZURE_CONTENT_UNDERSTANDING_KEY        (optional - DefaultAzureCredential() will be used if not set)
    These variables can be set in a .env file in the samples directory for repeated use. Please see env.sample for an example.

Run:
    python content_analyzers_list.py
"""


async def main():
    """
    List all available analyzers using list API.

    High-level steps:
    1. Connect to Azure AI Content Understanding
    2. List all available analyzers
    3. Display detailed information about each analyzer
    4. Show summary statistics
    """
    endpoint = os.getenv("AZURE_CONTENT_UNDERSTANDING_ENDPOINT") or ""
    # Return AzureKeyCredential if AZURE_CONTENT_UNDERSTANDING_KEY is set, otherwise DefaultAzureCredential
    key = os.getenv("AZURE_CONTENT_UNDERSTANDING_KEY")
    credential = AzureKeyCredential(key) if key else DefaultAzureCredential()

    async with ContentUnderstandingClient(endpoint=endpoint, credential=credential) as client:
        print(f"üìã Listing all available analyzers...")

        # List all analyzers
        response = client.content_analyzers.list()
        analyzers = [analyzer async for analyzer in response]

        print(f"‚úÖ Found {len(analyzers)} analyzers")
        print()

        # Display detailed information about each analyzer
        for i, analyzer in enumerate(analyzers, 1):
            print(f"üîç Analyzer {i}:")
            print(f"   ID: {analyzer.analyzer_id}")
            print(f"   Description: {analyzer.description}")
            print(f"   Status: {analyzer.status}")
            print(f"   Created at: {analyzer.created_at}")

            # Check if it's a prebuilt analyzer
            if analyzer.analyzer_id.startswith("prebuilt-"):
                print(f"   Type: Prebuilt analyzer")
            else:
                print(f"   Type: Custom analyzer")

            # Show tags if available
            if hasattr(analyzer, "tags") and analyzer.tags:
                print(f"   Tags: {analyzer.tags}")

            print()

        # Check for specific prebuilt analyzers
        prebuilt_ids = [analyzer.analyzer_id for analyzer in analyzers if analyzer.analyzer_id.startswith("prebuilt-")]
        if "prebuilt-documentAnalyzer" in prebuilt_ids:
            print(f"   ‚úÖ prebuilt-documentAnalyzer is available")
        if "prebuilt-videoAnalyzer" in prebuilt_ids:
            print(f"   ‚úÖ prebuilt-videoAnalyzer is available")

    # x-ms-original-file: 2025-05-01-preview/ContentAnalyzers_List.json
    # Manually close DefaultAzureCredential if it was used
    if isinstance(credential, DefaultAzureCredential):
        await credential.close()


if __name__ == "__main__":
    asyncio.run(main())
