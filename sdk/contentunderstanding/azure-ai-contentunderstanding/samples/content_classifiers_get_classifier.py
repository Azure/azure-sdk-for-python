# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import asyncio
import os

from azure.ai.contentunderstanding.aio import ContentUnderstandingClient

from sample_helper import (
    get_credential,
    generate_classifier_id,
    new_simple_classifier_schema,
    save_json_to_file
)

from dotenv import load_dotenv

load_dotenv()

"""
Prerequisites:
    pip install azure-ai-contentunderstanding python-dotenv
    az login  # Used for DefaultAzureCredential(). Alternatively, set the AZURE_CONTENT_UNDERSTANDING_KEY environment variable

Environment variables:
    AZURE_CONTENT_UNDERSTANDING_ENDPOINT   (required)
    AZURE_CONTENT_UNDERSTANDING_KEY        (optional - DefaultAzureCredential() will be used if not set)
    These variables can be set in a .env file in the samples directory for repeated use. Please see env.sample for an example.

Run:
    python content_classifiers_get_classifier.py
"""


async def main():
    """
    Get classifier using get API.
    
    High-level steps:
    1. Create a custom classifier to demonstrate retrieval
    2. Get the classifier details
    3. Save the classifier definition to a file
    4. Clean up the created classifier
    """
    endpoint = os.getenv("AZURE_CONTENT_UNDERSTANDING_ENDPOINT") or ""
    credential = get_credential()

    async with ContentUnderstandingClient(endpoint=endpoint, credential=credential) as client, credential:
        classifier_id = generate_classifier_id()
        
        # First, create a classifier to retrieve (for demo purposes)
        print(f"üîß Creating classifier '{classifier_id}' for retrieval demo...")
        
        classifier_schema = new_simple_classifier_schema(
            classifier_id=classifier_id,
            description=f"Custom classifier for retrieval demo: {classifier_id}",
            tags={"demo_type": "retrieval"}
        )

        # Start the classifier creation operation
        poller = await client.content_classifiers.begin_create_or_replace(
            classifier_id=classifier_id,
            resource=classifier_schema,
        )

        # Wait for the classifier to be created
        print(f"‚è≥ Waiting for classifier creation to complete...")
        await poller.result()
        print(f"‚úÖ Classifier '{classifier_id}' created successfully!")

        # Get the classifier
        print(f"üìã Getting classifier '{classifier_id}'...")
        response = await client.content_classifiers.get(classifier_id=classifier_id)
        
        print(f"‚úÖ Classifier '{classifier_id}' retrieved successfully!")
        print(f"   Description: {getattr(response, 'description', 'N/A')}")
        print(f"   Status: {getattr(response, 'status', 'N/A')}")
        print(f"   Created at: {getattr(response, 'created_at', 'N/A')}")
        
        # Check if categories exist
        categories = getattr(response, 'categories', None)
        if categories:
            print(f"   Categories: {len(categories)} categories")
            for category_name, category in categories.items():
                description = getattr(category, 'description', 'No description')
                print(f"     - {category_name}: {description}")
        else:
            print(f"   Categories: Not available")

        # Save the classifier definition to a file
        saved_file_path = save_json_to_file(
            result=response.as_dict(),
            filename_prefix="content_classifiers_get_classifier"
        )
        print(f"üíæ Classifier definition saved to: {saved_file_path}")

        # Clean up the created classifier (demo cleanup)
        print(f"üóëÔ∏è  Deleting classifier '{classifier_id}' (demo cleanup)...")
        await client.content_classifiers.delete(classifier_id=classifier_id)
        print(f"‚úÖ Classifier '{classifier_id}' deleted successfully!")


# x-ms-original-file: 2025-05-01-preview/ContentClassifiers_GetClassifier.json
if __name__ == "__main__":
    asyncio.run(main())
