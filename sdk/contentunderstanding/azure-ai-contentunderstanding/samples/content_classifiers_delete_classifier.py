# pylint: disable=line-too-long,useless-suppression
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import asyncio
import os
from datetime import datetime
import uuid

from azure.ai.contentunderstanding.aio import ContentUnderstandingClient
from azure.ai.contentunderstanding.models import ContentClassifier, ClassifierCategoryDefinition
from typing import Optional, Dict


from azure.core.credentials import AzureKeyCredential
from azure.identity.aio import DefaultAzureCredential

from dotenv import load_dotenv

load_dotenv()

"""
Prerequisites:
    pip install azure-ai-contentunderstanding python-dotenv
    az login  # Used for DefaultAzureCredential(). Alternatively, set the AZURE_CONTENT_UNDERSTANDING_KEY environment variable

Environment variables:
    AZURE_CONTENT_UNDERSTANDING_ENDPOINT   (required)
    AZURE_CONTENT_UNDERSTANDING_KEY        (optional - DefaultAzureCredential() will be used if not set)
    These variables can be set in a .env file in the samples directory for repeated use. Please see env.sample for an example.

Run:
    python content_classifiers_delete_classifier.py
"""


def new_simple_classifier_schema(
    classifier_id: str,
    description: Optional[str] = None,
    tags: Optional[Dict[str, str]] = None,
) -> ContentClassifier:
    """Create a simple ContentClassifier object with default configuration.

    Args:
        classifier_id: The classifier ID
        description: Optional description for the classifier
        tags: Optional tags for the classifier

    Returns:
        ContentClassifier: A configured ContentClassifier object
    """
    if description is None:
        description = f"test classifier: {classifier_id}"
    if tags is None:
        tags = {"test_type": "simple"}

    return ContentClassifier(
        categories={
            "Loan application": ClassifierCategoryDefinition(
                description="Documents submitted by individuals or businesses to request funding, typically including personal or business details, financial history, loan amount, purpose, and supporting documentation."
            ),
            "Invoice": ClassifierCategoryDefinition(
                description="Billing documents issued by sellers or service providers to request payment for goods or services, detailing items, prices, taxes, totals, and payment terms."
            ),
            "Bank_Statement": ClassifierCategoryDefinition(
                description="Official statements issued by banks that summarize account activity over a period, including deposits, withdrawals, fees, and balances."
            ),
        },
        split_mode="auto",
        description=description,
        tags=tags,
    )


async def main():
    """
    Delete classifier using delete API.

    High-level steps:
    1. Create a custom classifier to demonstrate deletion
    2. Verify the classifier exists
    3. Delete the classifier
    4. Verify the classifier was deleted
    """
    endpoint = os.getenv("AZURE_CONTENT_UNDERSTANDING_ENDPOINT") or ""
    # Return AzureKeyCredential if AZURE_CONTENT_UNDERSTANDING_KEY is set, otherwise DefaultAzureCredential
    key = os.getenv("AZURE_CONTENT_UNDERSTANDING_KEY")
    credential = AzureKeyCredential(key) if key else DefaultAzureCredential()

    async with ContentUnderstandingClient(endpoint=endpoint, credential=credential) as client:
        classifier_id = f"sdk-sample-clf-{datetime.now().strftime('%Y%m%d')}-{datetime.now().strftime('%H%M%S')}-{uuid.uuid4().hex[:8]}"

        # First, create a classifier to delete (for demo purposes)
        print(f"üîß Creating classifier '{classifier_id}' for deletion demo...")

        classifier_schema = new_simple_classifier_schema(
            classifier_id=classifier_id,
            description=f"Custom classifier for deletion demo: {classifier_id}",
            tags={"demo_type": "deletion"},
        )

        # Start the classifier creation operation
        poller = await client.content_classifiers.begin_create_or_replace(
            classifier_id=classifier_id,
            resource=classifier_schema,
        )

        # Wait for the classifier to be created
        print(f"‚è≥ Waiting for classifier creation to complete...")
        await poller.result()
        print(f"‚úÖ Classifier '{classifier_id}' created successfully!")

        # Delete the classifier
        print(f"üóëÔ∏è  Deleting classifier '{classifier_id}'...")
        await client.content_classifiers.delete(classifier_id=classifier_id)
        print(f"‚úÖ Classifier '{classifier_id}' deleted successfully!")

    # x-ms-original-file: 2025-05-01-preview/ContentClassifiers_DeleteClassifier.json
    # Manually close DefaultAzureCredential if it was used
    if isinstance(credential, DefaultAzureCredential):
        await credential.close()


if __name__ == "__main__":
    asyncio.run(main())
