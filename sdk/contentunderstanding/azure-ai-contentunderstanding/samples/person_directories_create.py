# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import asyncio
import os
from datetime import datetime, timezone
from typing import Optional, Dict
import uuid
from dotenv import load_dotenv

from azure.ai.contentunderstanding.aio import ContentUnderstandingClient
from azure.ai.contentunderstanding.models import PersonDirectory

from sample_helper import get_credential

load_dotenv()

"""
Prerequisites:
    pip install azure-ai-contentunderstanding python-dotenv
    az login  # Used for DefaultAzureCredential(). Alternatively, set the AZURE_CONTENT_UNDERSTANDING_KEY environment variable

Environment variables:
    AZURE_CONTENT_UNDERSTANDING_ENDPOINT   (required)
    AZURE_CONTENT_UNDERSTANDING_KEY        (optional - DefaultAzureCredential() will be used if not set)
    These variables can be set in a .env file in the samples directory for repeated use. Please see env.sample for an example.

Run:
    python person_directories_create.py
"""


async def main():
    """
    Create person directory using create API.

    High-level steps:
    1. Create a person directory with description and tags
    2. Verify the directory was created successfully
    3. Save the directory definition to a file
    4. Clean up the created directory
    """
    endpoint = os.getenv("AZURE_CONTENT_UNDERSTANDING_ENDPOINT") or ""
    credential = get_credential()

    async with ContentUnderstandingClient(
        endpoint=endpoint, credential=credential
    ) as client, credential:
        person_directory_id = f"sdk-sample-dir-{datetime.now(timezone.utc):%Y%m%d-%H%M%S}-{uuid.uuid4().hex[:8]}"

        # Create person directory configuration
        print(f"üîß Creating person directory '{person_directory_id}'...")

        person_directory = PersonDirectory(
            description=f"Sample person directory for access control: {person_directory_id}",
            tags={
                "location": "Building A",
                "type": "Access Control",
                "demo_type": "create",
            },
        )

        # Create the person directory
        print(f"üìù Creating person directory with description and tags...")
        response = await client.person_directories.create(
            person_directory_id=person_directory_id,
            resource=person_directory,
        )

        print(f"‚úÖ Person directory created successfully!")
        print(f"   ID: {getattr(response, 'person_directory_id', 'N/A')}")
        print(f"   Description: {getattr(response, 'description', 'N/A')}")
        print(f"   Created at: {getattr(response, 'created_at', 'N/A')}")
        print(f"   Tags: {getattr(response, 'tags', 'N/A')}")

        # Clean up the created directory (demo cleanup)
        print(f"üóëÔ∏è  Deleting person directory '{person_directory_id}' (demo cleanup)...")
        await client.person_directories.delete(person_directory_id=person_directory_id)
        print(f"‚úÖ Person directory '{person_directory_id}' deleted successfully!")


# x-ms-original-file: 2025-05-01-preview/PersonDirectories_Create.json
if __name__ == "__main__":
    asyncio.run(main())
