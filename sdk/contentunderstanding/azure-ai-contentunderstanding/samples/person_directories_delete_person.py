# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import asyncio
import os
from datetime import datetime, timezone
from typing import Optional, Dict
import uuid
from dotenv import load_dotenv

from azure.ai.contentunderstanding.aio import ContentUnderstandingClient
from azure.ai.contentunderstanding.models import PersonDirectory

from azure.core.credentials import AzureKeyCredential
from azure.identity.aio import DefaultAzureCredential

load_dotenv()

"""
# PREREQUISITES
    pip install azure-ai-contentunderstanding
# USAGE
    python person_directories_delete_person.py
"""


async def main():
    """
    Delete person from directory using delete_person API.

    High-level steps:
    1. Create a person directory
    2. Add a person to the directory
    3. Verify the person exists
    4. Delete the person from the directory
    5. Verify the person was deleted
    6. Clean up the created directory
    """
    endpoint = os.getenv("AZURE_CONTENT_UNDERSTANDING_ENDPOINT") or ""
    # Return AzureKeyCredential if AZURE_CONTENT_UNDERSTANDING_KEY is set, otherwise DefaultAzureCredential
    key = os.getenv("AZURE_CONTENT_UNDERSTANDING_KEY")
    credential = AzureKeyCredential(key) if key else DefaultAzureCredential()

    async with ContentUnderstandingClient(
        endpoint=endpoint, credential=credential
    ) as client, credential:
        person_directory_id = f"sdk-sample-dir-{datetime.now(timezone.utc):%Y%m%d-%H%M%S}-{uuid.uuid4().hex[:8]}"

        # Create a person directory first
        print(f"üîß Creating person directory '{person_directory_id}'...")

        person_directory = PersonDirectory(
            description=f"Sample person directory for delete person demo: {person_directory_id}",
            tags={"demo_type": "delete_person"},
        )

        # Create the person directory
        await client.person_directories.create(
            person_directory_id=person_directory_id,
            resource=person_directory,
        )
        print(f"‚úÖ Person directory created successfully!")

        # Add a person to the directory
        print(f"üë§ Adding person to directory '{person_directory_id}'...")

        add_response = await client.person_directories.add_person(
            person_directory_id=person_directory_id,
            body={
                "tags": {
                    "name": "Mark Wilson",
                    "role": "test_subject",
                    "department": "engineering",
                    "access_level": "standard",
                }
            },
        )

        person_id = add_response.person_id
        print(f"‚úÖ Person added successfully! (ID: {person_id})")

        # Verify the person exists
        print(f"üîç Verifying person '{person_id}' exists in directory...")

        person = await client.person_directories.get_person(
            person_directory_id=person_directory_id, person_id=person_id
        )

        print(f"‚úÖ Person verified successfully!")
        print(f"   Person ID: {getattr(person, 'person_id', 'N/A')}")
        print(f"   Tags: {getattr(person, 'tags', 'N/A')}")

        # Delete the person from the directory
        print(f"üóëÔ∏è  Deleting person '{person_id}' from directory...")

        await client.person_directories.delete_person(
            person_directory_id=person_directory_id, person_id=person_id
        )

        print(f"‚úÖ Person deleted successfully!")

        # Verify the person was deleted
        print(f"üîç Verifying person '{person_id}' was deleted...")

        try:
            await client.person_directories.get_person(
                person_directory_id=person_directory_id, person_id=person_id
            )
            print(f"‚ùå Person still exists - deletion may have failed")
        except Exception as e:
            print(f"‚úÖ Person successfully deleted (not found: {type(e).__name__})")

        # Clean up the created directory (demo cleanup)
        print(f"üóëÔ∏è  Deleting person directory '{person_directory_id}' (demo cleanup)...")
        await client.person_directories.delete(person_directory_id=person_directory_id)
        print(f"‚úÖ Person directory '{person_directory_id}' deleted successfully!")


# x-ms-original-file: 2025-05-01-preview/PersonDirectories_DeletePerson.json
if __name__ == "__main__":
    asyncio.run(main())
