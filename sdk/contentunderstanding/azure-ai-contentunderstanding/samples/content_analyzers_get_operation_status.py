# pylint: disable=line-too-long,useless-suppression
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import asyncio
import os

from azure.ai.contentunderstanding.aio import ContentUnderstandingClient
from azure.ai.contentunderstanding.models import (
    ContentAnalyzer,
    ContentAnalyzerConfig,
    FieldSchema,
    FieldDefinition,
    ContentFieldType,
    GenerationMethod,
    AnalysisMode,
    ProcessingLocation,
)

from sample_helper import extract_operation_id_from_poller, PollerType
from azure.core.credentials import AzureKeyCredential
from azure.identity.aio import DefaultAzureCredential

from dotenv import load_dotenv

load_dotenv()

"""
Prerequisites:
    pip install azure-ai-contentunderstanding python-dotenv
    az login  # Used for DefaultAzureCredential(). Alternatively, set the AZURE_CONTENT_UNDERSTANDING_KEY environment variable

Environment variables:
    AZURE_CONTENT_UNDERSTANDING_ENDPOINT   (required)
    AZURE_CONTENT_UNDERSTANDING_KEY        (optional - DefaultAzureCredential() will be used if not set)
    These variables can be set in a .env file in the samples directory for repeated use. Please see env.sample for an example.

Run:
    python content_analyzers_get_operation_status.py
"""


async def main():
    """
    Get operation status using get_operation_status API.

    Note: Normally you don't need to use get_operation_status API as the poller
    automatically manages the operation status and waits for completion.
    This sample is just to demonstrate the API usage for cases where you need
    custom status checking logic.

    High-level steps:
    1. Create a custom analyzer to get an operation ID
    2. Extract operation ID from the poller
    3. Get operation status using the operation ID
    4. Clean up the created analyzer
    """
    endpoint = os.getenv("AZURE_CONTENT_UNDERSTANDING_ENDPOINT") or ""
    # Return AzureKeyCredential if AZURE_CONTENT_UNDERSTANDING_KEY is set, otherwise DefaultAzureCredential
    key = os.getenv("AZURE_CONTENT_UNDERSTANDING_KEY")
    credential = AzureKeyCredential(key) if key else DefaultAzureCredential()

    async with ContentUnderstandingClient(endpoint=endpoint, credential=credential) as client:
        analyzer_id = f"sdk-sample-analyzer-for-status-{int(asyncio.get_event_loop().time())}"

        # First, create an analyzer to get an operation ID (for demo purposes)
        print(f"üîß Creating analyzer '{analyzer_id}' to demonstrate operation status...")

        # Create a custom analyzer using object model
        content_analyzer = ContentAnalyzer(
            base_analyzer_id="prebuilt-documentAnalyzer",
            config=ContentAnalyzerConfig(
                enable_formula=True,
                enable_layout=True,
                enable_ocr=True,
                estimate_field_source_and_confidence=True,
                return_details=True,
            ),
            description="Custom analyzer for operation status demo",
            field_schema=FieldSchema(
                fields={
                    "total_amount": FieldDefinition(
                        description="Total amount of this table",
                        method=GenerationMethod.EXTRACT,
                        type=ContentFieldType.NUMBER,
                    )
                },
                description="Schema for operation status demo",
                name="demo_schema",
            ),
            mode=AnalysisMode.STANDARD,
            processing_location=ProcessingLocation.GLOBAL,
            tags={"demo_type": "operation_status"},
        )

        # Start the analyzer creation operation
        poller = await client.content_analyzers.begin_create_or_replace(
            analyzer_id=analyzer_id,
            resource=content_analyzer,
        )

        # Extract operation ID from the poller
        operation_id = extract_operation_id_from_poller(poller, PollerType.ANALYZER_CREATION)
        print(f"üìã Extracted operation ID: {operation_id}")

        # Get operation status
        print(f"üîç Getting operation status for operation '{operation_id}'...")
        response = await client.content_analyzers.get_operation_status(
            analyzer_id=analyzer_id,
            operation_id=operation_id,
        )

        print(f"‚úÖ Operation status retrieved successfully!")
        print(f"   Operation ID: {response.id}")
        print(f"   Status: {response.status}")

        # Wait for the operation to complete
        print(f"‚è≥ Waiting for analyzer creation to complete...")
        await poller.result()
        print(f"‚úÖ Analyzer '{analyzer_id}' created successfully!")

        # Get final operation status after completion
        print(f"üîç Getting final operation status...")
        final_response = await client.content_analyzers.get_operation_status(
            analyzer_id=analyzer_id,
            operation_id=operation_id,
        )
        print(f"‚úÖ Final operation status: {final_response.status}")

        # Clean up the created analyzer (demo cleanup)
        print(f"üóëÔ∏è  Deleting analyzer '{analyzer_id}' (demo cleanup)...")
        await client.content_analyzers.delete(analyzer_id=analyzer_id)
        print(f"‚úÖ Analyzer '{analyzer_id}' deleted successfully!")

    # x-ms-original-file: 2025-05-01-preview/ContentAnalyzers_GetOperationStatus.json
    # Manually close DefaultAzureCredential if it was used
    if isinstance(credential, DefaultAzureCredential):
        await credential.close()


if __name__ == "__main__":
    asyncio.run(main())
