# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import os
import uuid
from datetime import datetime
from typing import Dict, Optional

import pytest
from azure.core.exceptions import ResourceNotFoundError
from devtools_testutils import recorded_by_proxy
from testpreparer import ContentUnderstandingPreparer

from testpreparer import ContentUnderstandingClientTestBase
from test_helpers import (
    generate_person_directory_id_sync,
    get_enrollment_data_path
)
import uuid


def generate_test_id() -> str:
    """Generate a unique test ID with current date, time, and GUID."""
    now = datetime.now()
    date_str = now.strftime("%Y%m%d")
    time_str = now.strftime("%H%M%S")
    guid = str(uuid.uuid4()).replace("-", "")[:8]
    return f"test_{date_str}_{time_str}_{guid}"


def delete_person_directory_and_assert(client, person_directory_id: str, created_directory: bool) -> None:
    """Delete a person directory and assert it was deleted successfully.
    
    Args:
        client: The ContentUnderstandingClient instance
        person_directory_id: The person directory ID to delete
        created_directory: Whether the directory was created (to determine if cleanup is needed)
        
    Raises:
        AssertionError: If the directory still exists after deletion
    """
    if created_directory:
        print(f"Cleaning up person directory {person_directory_id}")
        try:
            client.person_directories.delete(person_directory_id=person_directory_id)
            # Verify deletion
            assert not person_directory_exists(client, person_directory_id), f"Deleted person directory with ID '{person_directory_id}' was found"
            print(f"Person directory {person_directory_id} is deleted successfully")
        except Exception as e:
            # If deletion fails, the test should fail
            raise AssertionError(f"Failed to delete person directory {person_directory_id}: {e}") from e
    else:
        print(f"Person directory {person_directory_id} was not created, no cleanup needed")


def person_directory_exists(client, person_directory_id: str) -> bool:
    """Check if a person directory with the given ID exists.
    
    Args:
        client: The ContentUnderstandingClient instance
        person_directory_id: The person directory ID to search for
        
    Returns:
        bool: True if the person directory is found, False otherwise
        
    Raises:
        ResourceNotFoundError: If the person directory doesn't exist
        Other exceptions: Will bubble up for authentication errors, network issues, etc.
    """
    try:
        client.person_directories.get(person_directory_id=person_directory_id)
        return True
    except ResourceNotFoundError:
        return False


def create_person_directory_and_assert(
    client, 
    person_directory_id: str, 
    description: str = "",
    tags: Optional[Dict[str, str]] = None
) -> None:
    """Create a person directory and perform basic assertions.
    
    Args:
        client: The ContentUnderstandingClient instance
        person_directory_id: The person directory ID to create
        description: Optional description for the person directory
        tags: Optional tags for the person directory
        
    Raises:
        AssertionError: If the creation fails or assertions fail
    """
    print(f"\nCreating person directory {person_directory_id}")
    
    # Create the person directory
    response = client.person_directories.create(
        person_directory_id=person_directory_id,
        resource={
            "description": description,
            "tags": tags or {}
        }
    )
    
    # Verify the response
    assert response is not None
    print(f"Created person directory with ID: {person_directory_id}")
    
    # Verify the person directory exists
    assert person_directory_exists(client, person_directory_id), f"Created person directory with ID '{person_directory_id}' was not found"
    print(f"Verified person directory {person_directory_id} exists")


def build_person_directory_from_enrollment_data(
    client, 
    person_directory_id: str,
    enrollment_data_path: Optional[str] = None
) -> Dict[str, str]:
    """Build person directory from enrollment data.
    
    Args:
        client: The ContentUnderstandingClient instance
        person_directory_id: The person directory ID
        enrollment_data_path: Path to the enrollment data directory (optional)
        
    Returns:
        Dict[str, str]: Dictionary mapping person names to person IDs
        
    Raises:
        AssertionError: If the enrollment data directory doesn't exist or processing fails
    """
    print(f"\nBuilding Person Directory from enrollment data...")
    
    # Construct the enrollment data path if not provided
    if enrollment_data_path is None:
        enrollment_data_path = get_enrollment_data_path()
    
    if not os.path.exists(enrollment_data_path):
        raise Exception(f"Enrollment data directory not found: {enrollment_data_path}")
    
    subfolders = [d for d in os.listdir(enrollment_data_path) 
                  if os.path.isdir(os.path.join(enrollment_data_path, d))]
    
    print(f"Found {len(subfolders)} subfolders in enrollment data")
    
    person_name_to_id = {}
    
    for subfolder in subfolders:
        person_name = subfolder
        print(f"Processing person: {person_name}")
        
        # Create person
        person_response = client.person_directories.add_person(
            person_directory_id=person_directory_id,
            body={
                "tags": {"name": person_name}
            }
        )
        
        person_id = person_response.person_id
        person_name_to_id[person_name] = person_id
        print(f"Created person with ID: {person_id}")
        
        # Process face images
        person_folder = os.path.join(enrollment_data_path, subfolder)
        image_files = [f for f in os.listdir(person_folder) 
                      if f.lower().endswith(('.jpg', '.png', '.jpeg'))]
        
        print(f"Found {len(image_files)} face images")
        
        for image_file in image_files:
            image_path = os.path.join(person_folder, image_file)
            filename = os.path.basename(image_file)
            print(f"- Adding face from {filename}... ", end="")
            
            try:
                # Read image as bytes directly
                with open(image_path, "rb") as image_file:
                    image_bytes = image_file.read()
                
                # Add face to person using body parameter (testing pattern 1)
                face_response = client.person_directories.add_face(
                    person_directory_id=person_directory_id,
                    body={
                        "faceSource": {
                            "data": image_bytes
                        },
                        "personId": person_id
                    }
                )
                
                print(f"success! Face ID: {face_response.face_id}")
                
            except Exception as ex:
                print(f"failed: {ex}")
    
    print(f"\nCompleted building person directory with {len(subfolders)} persons")
    return person_name_to_id


def identify_persons_in_image(
    client, 
    person_directory_id: str, 
    image_path: str
) -> None:
    """Identify persons in an image using the person directory.
    
    Args:
        client: The ContentUnderstandingClient instance
        person_directory_id: The person directory ID
        image_path: Path to the image file to analyze
        
    Raises:
        AssertionError: If identification fails
    """
    print(f"\nIdentifying Persons in Image...")
    print(f"Processing test image: {os.path.basename(image_path)}")
    
    # Read image as bytes directly - the API will handle base64 encoding internally
    with open(image_path, "rb") as image_file:
        image_bytes = image_file.read()
    
    # Detect faces first
    # Note: This would require a separate face detection API call
    # For now, we'll assume the image contains faces and proceed with identification
    
    # Identify persons in the image
    try:
        identify_response = client.person_directories.identify_person(
            person_directory_id=person_directory_id,
            body={
                "faceSource": {
                    "data": image_bytes
                },
                "maxPersonCandidates": 5
            }
        )
        
        if identify_response.person_candidates and len(identify_response.person_candidates) > 0:
            for candidate in identify_response.person_candidates:
                print(f"Identified person: {candidate.person_id} (Confidence: {candidate.confidence})")
        else:
            print("No persons identified in the image")
            
    except Exception as ex:
        print(f"Error identifying persons: {ex}")


import pytest

class TestContentUnderstandingPersonDirectoriesOperations(ContentUnderstandingClientTestBase):
    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_create(self, contentunderstanding_endpoint):
        """
        Test Summary:
        - Create a person directory with description and tags
        - Verify the person directory was created successfully
        - Clean up the created person directory
        """
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        person_directory_id = generate_person_directory_id_sync(client, "test_person_directories_create")
        created_directory = False

        try:
            # Create person directory using the helper function
            create_person_directory_and_assert(
                client, 
                person_directory_id,
                description=f"Test person directory: {person_directory_id}",
                tags={"test_type": "creation", "environment": "test"}
            )
            created_directory = True

        finally:
            # Always clean up the created person directory, even if the test fails
            delete_person_directory_and_assert(client, person_directory_id, created_directory)

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_update(self, contentunderstanding_endpoint):
        """
        Test Summary:
        - Create initial person directory
        - Get person directory before update to verify initial state
        - Update person directory with new description and tags
        - Get person directory after update to verify changes persisted
        - Clean up created person directory
        """
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        person_directory_id = generate_person_directory_id_sync(client, "test_person_directories_update")
        created_directory = False

        try:
            # Create the initial person directory
            create_person_directory_and_assert(
                client, 
                person_directory_id,
                description=f"Initial person directory for update test: {person_directory_id}",
                tags={"initial_tag": "initial_value"}
            )
            created_directory = True

            # Get the person directory before update to verify initial state
            print(f"Getting person directory {person_directory_id} before update")
            directory_before_update = client.person_directories.get(person_directory_id=person_directory_id)
            assert directory_before_update is not None
            assert directory_before_update.person_directory_id == person_directory_id
            assert directory_before_update.description == f"Initial person directory for update test: {person_directory_id}"
            assert directory_before_update.tags == {"initial_tag": "initial_value"}
            print(f"Initial person directory state verified - description: {directory_before_update.description}, tags: {directory_before_update.tags}")

            # Update the person directory with new description and tags
            print(f"Updating person directory {person_directory_id} with new description and tags")
            
            # Create updated person directory with only allowed properties (description and tags)
            updated_person_directory = PersonDirectory(
                description=f"Updated person directory for update test: {person_directory_id}",
                tags={"initial_tag": "initial_value", "updated_tag": "updated_value"},
            )

            response = client.person_directories.update(
                person_directory_id=person_directory_id,
                resource=updated_person_directory,
                content_type="application/json"
            )

            # Verify the update response
            assert response is not None
            print(f"Update response: {response}")
            
            # Verify the updated person directory has the new tag and updated description
            assert response.person_directory_id == person_directory_id
            assert "updated_tag" in response.tags
            assert response.tags["updated_tag"] == "updated_value"
            assert response.description == f"Updated person directory for update test: {person_directory_id}"
            
            print(f"Successfully updated person directory {person_directory_id} with new description and tags")

            # Get the person directory after update to verify the changes persisted
            print(f"Getting person directory {person_directory_id} after update")
            directory_after_update = client.person_directories.get(person_directory_id=person_directory_id)
            assert directory_after_update is not None
            assert directory_after_update.person_directory_id == person_directory_id
            assert directory_after_update.description == f"Updated person directory for update test: {person_directory_id}"
            assert directory_after_update.tags == {"initial_tag": "initial_value", "updated_tag": "updated_value"}
            print(f"Updated person directory state verified - description: {directory_after_update.description}, tags: {directory_after_update.tags}")

        finally:
            # Always clean up the created person directory, even if the test fails
            delete_person_directory_and_assert(client, person_directory_id, created_directory)

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_get(self, contentunderstanding_endpoint):
        """
        Test Summary:
        - Create a person directory for testing
        - Get the person directory and verify its properties
        - Clean up created person directory
        """
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        person_directory_id = generate_person_directory_id_sync(client, "test_person_directories_get")
        created_directory = False

        try:
            # Create a person directory for testing
            create_person_directory_and_assert(
                client, 
                person_directory_id,
                description=f"Test person directory for get operation: {person_directory_id}",
                tags={"test_type": "get_operation"}
            )
            created_directory = True

            # Get the person directory
            print(f"Getting person directory {person_directory_id}")
            response = client.person_directories.get(person_directory_id=person_directory_id)
            
            # Verify the response
            assert response is not None
            assert response.person_directory_id == person_directory_id
            assert response.description == f"Test person directory for get operation: {person_directory_id}"
            assert response.tags == {"test_type": "get_operation"}
            assert hasattr(response, 'created_at')
            assert hasattr(response, 'last_modified_at')
            assert hasattr(response, 'person_count')
            assert hasattr(response, 'face_count')
            
            print(f"Successfully retrieved person directory: {response.person_directory_id}")
            print(f"Description: {response.description}")
            print(f"Tags: {response.tags}")
            print(f"Person count: {response.person_count}")
            print(f"Face count: {response.face_count}")

        finally:
            # Always clean up the created person directory, even if the test fails
            delete_person_directory_and_assert(client, person_directory_id, created_directory)

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_delete(self, contentunderstanding_endpoint):
        """
        Test Summary:
        - Create a person directory for deletion test
        - Verify person directory exists before deletion
        - Delete the person directory
        - Verify person directory no longer exists after deletion
        """
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        person_directory_id = generate_person_directory_id_sync(client, "test_person_directories_delete")
        created_directory = False

        try:
            # Create a person directory for deletion test
            create_person_directory_and_assert(
                client, 
                person_directory_id,
                description=f"Test person directory for deletion: {person_directory_id}",
                tags={"test_type": "deletion"}
            )
            created_directory = True

            # Verify the person directory exists before deletion
            assert person_directory_exists(client, person_directory_id), f"Created person directory with ID '{person_directory_id}' was not found"
            print(f"Verified person directory {person_directory_id} exists before deletion")

            # Delete the person directory
            print(f"Deleting person directory {person_directory_id}")
            response = client.person_directories.delete(person_directory_id=person_directory_id)
            
            # Verify the delete response
            assert response is None
            
            # Verify the person directory is no longer in the list after deletion
            assert not person_directory_exists(client, person_directory_id), f"Deleted person directory with ID '{person_directory_id}' was found"
            print(f"Verified person directory {person_directory_id} is no longer accessible after deletion")

            created_directory = False
        finally:
            # Clean up if the person directory was created but deletion failed
            delete_person_directory_and_assert(client, person_directory_id, created_directory)

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_list(self, contentunderstanding_endpoint):
        """
        Test Summary:
        - Create a test person directory
        - List all person directories
        - Verify the created person directory is in the list
        - Clean up created person directory
        """
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        person_directory_id = generate_person_directory_id_sync(client, "test_person_directories_list")
        created_directory = False

        try:
            # Create a test person directory
            create_person_directory_and_assert(
                client, 
                person_directory_id,
                description=f"Test person directory for list operation: {person_directory_id}",
                tags={"test_type": "list_operation"}
            )
            created_directory = True

            # List all person directories
            print(f"Listing all person directories")
            response = client.person_directories.list()
            result = list(response)
            
            # Verify we get at least one person directory in the list
            assert len(result) > 0, "Should have at least one person directory in the list"
            print(f"Found {len(result)} person directories")
            
            # Verify that our created person directory is in the list
            created_directory_found = False
            for directory in result:
                assert hasattr(directory, 'person_directory_id'), "Each person directory should have person_directory_id"
                assert hasattr(directory, 'description'), "Each person directory should have description"
                assert hasattr(directory, 'created_at'), "Each person directory should have created_at"
                assert hasattr(directory, 'last_modified_at'), "Each person directory should have last_modified_at"
                assert hasattr(directory, 'person_count'), "Each person directory should have person_count"
                assert hasattr(directory, 'face_count'), "Each person directory should have face_count"
                
                if directory.person_directory_id == person_directory_id:
                    created_directory_found = True
                    assert directory.description == f"Test person directory for list operation: {person_directory_id}"
                    assert directory.tags == {"test_type": "list_operation"}
                    print(f"Found created person directory: {directory.description}")
            
            assert created_directory_found, f"Created person directory with ID '{person_directory_id}' should be in the list"
            print("List person directories test completed successfully")

        finally:
            # Always clean up the created person directory, even if the test fails
            delete_person_directory_and_assert(client, person_directory_id, created_directory)

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_add_person(self, contentunderstanding_endpoint):
        """
        Test Summary:
        - Create a person directory
        - Add a person to the directory with tags
        - Verify the person was added successfully
        - Clean up created person directory
        """
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        person_directory_id = generate_person_directory_id_sync(client, "test_person_directories_add_person")
        created_directory = False

        try:
            # Create a person directory
            create_person_directory_and_assert(
                client, 
                person_directory_id,
                description=f"Test person directory for add person: {person_directory_id}",
                tags={"test_type": "add_person"}
            )
            created_directory = True

            # Add a person to the directory
            print(f"Adding person to directory {person_directory_id}")
            response = client.person_directories.add_person(
                person_directory_id=person_directory_id,
                body={
                    "tags": {
                        "name": "John Doe",
                        "role": "test_subject",
                        "department": "engineering"
                    }
                }
            )

            # Verify the response
            assert response is not None
            assert hasattr(response, 'person_id')
            assert response.person_id is not None
            assert len(response.person_id) > 0
            
            person_id = response.person_id
            print(f"Successfully added person with ID: {person_id}")

            # Verify the person exists in the directory
            person = client.person_directories.get_person(
                person_directory_id=person_directory_id,
                person_id=person_id
            )
            
            assert person is not None
            assert person.person_id == person_id
            if is_live():
                assert person.tags == {
                    "name": "John Doe",
                    "role": "test_subject",
                    "department": "engineering"
                }
            
            print(f"Verified person {person_id} exists in directory with correct tags")

        finally:
            # Always clean up the created person directory, even if the test fails
            delete_person_directory_and_assert(client, person_directory_id, created_directory)

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_update_person(self, contentunderstanding_endpoint):
        """
        Test Summary:
        - Create a person directory and add a person
        - Update the person with new tags and face IDs
        - Verify the person was updated successfully
        - Clean up created person directory
        """
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        person_directory_id = generate_person_directory_id_sync(client, "test_person_directories_update_person")
        created_directory = False

        try:
            # Create a person directory
            create_person_directory_and_assert(
                client, 
                person_directory_id,
                description=f"Test person directory for update person: {person_directory_id}",
                tags={"test_type": "update_person"}
            )
            created_directory = True

            # Add a person to the directory
            print(f"Adding person to directory {person_directory_id}")
            add_response = client.person_directories.add_person(
                person_directory_id=person_directory_id,
                body={
                    "tags": {
                        "name": "Jane Smith",
                        "role": "test_subject"
                    }
                }
            )
            
            person_id = add_response.person_id
            print(f"Created person with ID: {person_id}")

            # Update the person with new tags
            print(f"Updating person {person_id} with new tags")
            from azure.ai.contentunderstanding.models import PersonDirectoryPerson
            
            response = client.person_directories.update_person(
                person_directory_id=person_directory_id,
                person_id=person_id,
                resource=PersonDirectoryPerson(
                    tags={
                        "name": "Jane Smith",
                        "role": "test_subject",
                        "department": "research",
                        "status": "active"
                    }
                ),
                content_type="application/json"
            )

            # Verify the response
            assert response is not None
            print(f"Successfully updated person {person_id}")

            # Verify the person was updated correctly
            updated_person = client.person_directories.get_person(
                person_directory_id=person_directory_id,
                person_id=person_id
            )
            
            assert updated_person is not None
            assert updated_person.person_id == person_id
            if is_live():
                assert updated_person.tags == {
                    "name": "Jane Smith",
                    "role": "test_subject",
                    "department": "research",
                    "status": "active"
                }
            # face_ids should remain unchanged since we only updated tags
            assert hasattr(updated_person, 'face_ids')
            print(f"Verified person {updated_person.person_id} was updated with new tags")

        finally:
            # Always clean up the created person directory, even if the test fails
            delete_person_directory_and_assert(client, person_directory_id, created_directory)

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_get_person(self, contentunderstanding_endpoint):
        """
        Test Summary:
        - Create a person directory and add a person
        - Get the person and verify its properties
        - Clean up created person directory
        """
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        person_directory_id = generate_person_directory_id_sync(client, "test_person_directories_get_person")
        created_directory = False

        try:
            # Create a person directory
            create_person_directory_and_assert(
                client, 
                person_directory_id,
                description=f"Test person directory for get person: {person_directory_id}",
                tags={"test_type": "get_person"}
            )
            created_directory = True

            # Add a person to the directory
            print(f"Adding person to directory {person_directory_id}")
            add_response = client.person_directories.add_person(
                person_directory_id=person_directory_id,
                body={
                    "tags": {
                        "name": "Alice Johnson",
                        "role": "test_subject",
                        "department": "marketing"
                    }
                }
            )
            
            person_id = add_response.person_id
            print(f"Created person with ID: {person_id}")

            # Get the person
            print(f"Getting person {person_id} from directory {person_directory_id}")
            response = client.person_directories.get_person(
                person_directory_id=person_directory_id,
                person_id=person_id
            )

            # Verify the response
            assert response is not None
            if is_live():
                assert response.person_id == person_id
                assert response.tags == {
                    "name": "Alice Johnson",
                    "role": "test_subject",
                    "department": "marketing"
                }
            assert hasattr(response, 'face_ids')
            
            print(f"Successfully retrieved person: {response.person_id}")
            print(f"Tags: {response.tags}")
            print(f"Face IDs: {response.face_ids}")

        finally:
            # Always clean up the created person directory, even if the test fails
            delete_person_directory_and_assert(client, person_directory_id, created_directory)

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_delete_person(self, contentunderstanding_endpoint):
        """
        Test Summary:
        - Create a person directory and add a person
        - Verify the person exists before deletion
        - Delete the person
        - Verify the person no longer exists
        - Clean up created person directory
        """
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        person_directory_id = generate_person_directory_id_sync(client, "test_person_directories_delete_person")
        created_directory = False

        try:
            # Create a person directory
            create_person_directory_and_assert(
                client, 
                person_directory_id,
                description=f"Test person directory for delete person: {person_directory_id}",
                tags={"test_type": "delete_person"}
            )
            created_directory = True

            # Add a person to the directory
            print(f"Adding person to directory {person_directory_id}")
            add_response = client.person_directories.add_person(
                person_directory_id=person_directory_id,
                body={
                    "tags": {
                        "name": "Bob Wilson",
                        "role": "test_subject"
                    }
                }
            )
            
            person_id = add_response.person_id
            print(f"Created person with ID: {person_id}")

            # Verify the person exists before deletion
            person = client.person_directories.get_person(
                person_directory_id=person_directory_id,
                person_id=person_id
            )
            assert person is not None
            assert person.person_id == person_id
            print(f"Verified person {person_id} exists before deletion")

            # Delete the person
            print(f"Deleting person {person_id}")
            response = client.person_directories.delete_person(
                person_directory_id=person_directory_id,
                person_id=person_id
            )

            # Verify the delete response
            assert response is None
            
            # Verify the person no longer exists
            try:
                client.person_directories.get_person(
                    person_directory_id=person_directory_id,
                    person_id=person_id
                )
                assert False, f"Person {person_id} should not exist after deletion"
            except Exception:
                print(f"Verified person {person_id} no longer exists after deletion")

        finally:
            # Always clean up the created person directory, even if the test fails
            delete_person_directory_and_assert(client, person_directory_id, created_directory)

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_list_persons(self, contentunderstanding_endpoint):
        """
        Test Summary:
        - Create a person directory and add multiple persons
        - List all persons in the directory
        - Verify all created persons are in the list
        - Clean up created person directory
        """
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        person_directory_id = generate_person_directory_id_sync(client, "test_person_directories_list_persons")
        created_directory = False

        try:
            # Create a person directory
            create_person_directory_and_assert(
                client, 
                person_directory_id,
                description=f"Test person directory for list persons: {person_directory_id}",
                tags={"test_type": "list_persons"}
            )
            created_directory = True

            # Add multiple persons to the directory
            person_ids = []
            person_names = ["Alice", "Bob", "Charlie"]
            
            for name in person_names:
                print(f"Adding person {name} to directory {person_directory_id}")
                add_response = client.person_directories.add_person(
                    person_directory_id=person_directory_id,
                    body={
                        "tags": {
                            "name": name,
                            "role": "test_subject"
                        }
                    }
                )
                
                person_id = add_response.person_id
                person_ids.append(person_id)
                print(f"Created person {name} with ID: {person_id}")

            # List all persons in the directory
            print(f"Listing all persons in directory {person_directory_id}")
            response = client.person_directories.list_persons(person_directory_id=person_directory_id)
            result = list(response)
            
            # Verify we get the expected number of persons
            assert len(result) >= len(person_ids), f"Expected at least {len(person_ids)} persons, got {len(result)}"
            print(f"Found {len(result)} persons in directory")
            
            # Verify that our created persons are in the list
            found_persons = set()
            for person in result:
                assert hasattr(person, 'person_id'), "Each person should have person_id"
                assert hasattr(person, 'tags'), "Each person should have tags"
                assert hasattr(person, 'face_ids'), "Each person should have face_ids"
                
                if person.person_id in person_ids:
                    found_persons.add(person.person_id)
                    # Find the corresponding name
                    person_name = None
                    for name in person_names:
                        if person.tags.get("name") == name:
                            person_name = name
                            break
                    print(f"Found created person {person_name}: {person.person_id}")
            
            assert len(found_persons) == len(person_ids), f"Expected to find {len(person_ids)} created persons, found {len(found_persons)}"
            print("List persons test completed successfully")

        finally:
            # Always clean up the created person directory, even if the test fails
            delete_person_directory_and_assert(client, person_directory_id, created_directory)

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_add_face(self, contentunderstanding_endpoint):
        """
        Test Summary:
        - Create a person directory and add a person
        - Add a face to the person using image data
        - Verify the face was added successfully
        - Clean up created person directory
        """
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        person_directory_id = generate_person_directory_id_sync(client, "test_person_directories_add_face")
        created_directory = False

        try:
            # Create a person directory
            create_person_directory_and_assert(
                client, 
                person_directory_id,
                description=f"Test person directory for add face: {person_directory_id}",
                tags={"test_type": "add_face"}
            )
            created_directory = True

            # Add a person to the directory
            print(f"Adding person to directory {person_directory_id}")
            add_person_response = client.person_directories.add_person(
                person_directory_id=person_directory_id,
                body={
                    "tags": {
                        "name": "David Brown",
                        "role": "test_subject"
                    }
                }
            )
            
            person_id = add_person_response.person_id
            print(f"Created person with ID: {person_id}")

            # Read test image and convert to base64
            test_file_dir = os.path.dirname(os.path.abspath(__file__))
            image_path = os.path.join(test_file_dir, "test_data", "face", "enrollment_data", "Alex", "Family1-Son1.jpg")
            # Read image as bytes directly
            with open(image_path, "rb") as image_file:
                image_bytes = image_file.read()

            # Add a face to the person using positional parameters (testing pattern 2)
            print(f"Adding face to person {person_id}")
            response = client.person_directories.add_face(
                person_directory_id=person_directory_id,
                body={
                    "faceSource": {
                        "data": image_bytes
                    },
                    "personId": person_id
                }
            )

            # Verify the response
            assert response is not None
            assert hasattr(response, 'face_id')
            assert response.face_id is not None
            assert len(response.face_id) > 0
            
            face_id = response.face_id
            print(f"Successfully added face with ID: {face_id}")

            # Verify the face exists in the directory
            face = client.person_directories.get_face(
                person_directory_id=person_directory_id,
                face_id=face_id
            )
            
            assert face is not None
            assert face.face_id == face_id
            assert face.person_id == person_id
            
            print(f"Verified face {face_id} exists in directory and is associated with person {person_id}")

        finally:
            # Always clean up the created person directory, even if the test fails
            delete_person_directory_and_assert(client, person_directory_id, created_directory)

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_update_face(self, contentunderstanding_endpoint):
        """
        Test Summary:
        - Create a person directory and add a person
        - Add a face to the person
        - Update the face association to a different person
        - Verify the face association was updated
        - Clean up created person directory
        """
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        person_directory_id = generate_person_directory_id_sync(client, "test_person_directories_update_face")
        created_directory = False

        try:
            # Create a person directory
            create_person_directory_and_assert(
                client, 
                person_directory_id,
                description=f"Test person directory for update face: {person_directory_id}",
                tags={"test_type": "update_face"}
            )
            created_directory = True

            # Add two persons to the directory
            print(f"Adding persons to directory {person_directory_id}")
            person1_response = client.person_directories.add_person(
                person_directory_id=person_directory_id,
                body={
                    "tags": {
                        "name": "Emma Wilson",
                        "role": "test_subject_1"
                    }
                }
            )
            
            person2_response = client.person_directories.add_person(
                person_directory_id=person_directory_id,
                body={
                    "tags": {
                        "name": "Frank Davis",
                        "role": "test_subject_2"
                    }
                }
            )
            
            person1_id = person1_response.person_id
            person2_id = person2_response.person_id
            print(f"Created person 1 with ID: {person1_id}")
            print(f"Created person 2 with ID: {person2_id}")

            # Add a face to person 1
            test_file_dir = os.path.dirname(os.path.abspath(__file__))
            image_path = os.path.join(test_file_dir, "test_data", "face", "enrollment_data", "Alex", "Family1-Son1.jpg")
            # Read image as bytes directly
            with open(image_path, "rb") as image_file:
                image_bytes = image_file.read()

            print(f"Adding face to person {person1_id} using FaceSource object (testing pattern 3)")
            from azure.ai.contentunderstanding.models import FaceSource
            face_source = FaceSource(data=image_bytes)
            add_face_response = client.person_directories.add_face(
                person_directory_id=person_directory_id,
                face_source=face_source,
                person_id=person1_id
            )
            
            face_id = add_face_response.face_id
            print(f"Created face with ID: {face_id}")

            # Verify the face is initially associated with person 1
            face = client.person_directories.get_face(
                person_directory_id=person_directory_id,
                face_id=face_id
            )
            assert face.person_id == person1_id
            print(f"Verified face {face_id} is initially associated with person {person1_id}")

            # Update the face association to person 2
            print(f"Updating face {face_id} association to person {person2_id}")
            response = client.person_directories.update_face(
                person_directory_id=person_directory_id,
                face_id=face_id,
            resource={
                    "personId": person2_id
                },
                content_type="application/json"
            )

            # Verify the response
            assert response is not None
            print(f"Successfully updated face {face_id} association")

            # Verify the face is now associated with person 2
            updated_face = client.person_directories.get_face(
                person_directory_id=person_directory_id,
                face_id=face_id
            )
            assert updated_face.person_id == person2_id
            print(f"Verified face {face_id} is now associated with person {person2_id}")

        finally:
            # Always clean up the created person directory, even if the test fails
            delete_person_directory_and_assert(client, person_directory_id, created_directory)

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_get_face(self, contentunderstanding_endpoint):
        """
        Test Summary:
        - Create a person directory and add a person
        - Add a face to the person
        - Get the face and verify its properties
        - Clean up created person directory
        """
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        person_directory_id = generate_person_directory_id_sync(client, "test_person_directories_get_face")
        created_directory = False

        try:
            # Create a person directory
            create_person_directory_and_assert(
                client, 
                person_directory_id,
                description=f"Test person directory for get face: {person_directory_id}",
                tags={"test_type": "get_face"}
            )
            created_directory = True

            # Add a person to the directory
            print(f"Adding person to directory {person_directory_id}")
            add_person_response = client.person_directories.add_person(
                person_directory_id=person_directory_id,
                body={
                    "tags": {
                        "name": "Grace Lee",
                        "role": "test_subject"
                    }
                }
            )
            
            person_id = add_person_response.person_id
            print(f"Created person with ID: {person_id}")

            # Add a face to the person
            test_file_dir = os.path.dirname(os.path.abspath(__file__))
            image_path = os.path.join(test_file_dir, "test_data", "face", "enrollment_data", "Alex", "Family1-Son1.jpg")
            # Read image as bytes directly
            with open(image_path, "rb") as image_file:
                image_bytes = image_file.read()

            print(f"Adding face to person {person_id} using mixed parameters (testing pattern 4)")
            add_face_response = client.person_directories.add_face(
                person_directory_id,
                image_bytes,
                person_id=person_id
            )
            
            face_id = add_face_response.face_id
            print(f"Created face with ID: {face_id}")

            # Get the face
            print(f"Getting face {face_id} from directory {person_directory_id}")
            response = client.person_directories.get_face(
                person_directory_id=person_directory_id,
                face_id=face_id
            )

            # Verify the response
            assert response is not None
            assert response.face_id == face_id
            assert response.person_id == person_id
            assert hasattr(response, 'bounding_box')
            assert hasattr(response, 'image_reference_id')
            
            print(f"Successfully retrieved face: {response.face_id}")
            print(f"Associated with person: {response.person_id}")
            print(f"Bounding box: {response.bounding_box}")

        finally:
            # Always clean up the created person directory, even if the test fails
            delete_person_directory_and_assert(client, person_directory_id, created_directory)

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_delete_face(self, contentunderstanding_endpoint):
        """
        Test Summary:
        - Create a person directory and add a person
        - Add a face to the person
        - Verify the face exists before deletion
        - Delete the face
        - Verify the face no longer exists
        - Clean up created person directory
        """
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        person_directory_id = generate_person_directory_id_sync(client, "test_person_directories_delete_face")
        created_directory = False

        try:
            # Create a person directory
            create_person_directory_and_assert(
                client, 
                person_directory_id,
                description=f"Test person directory for delete face: {person_directory_id}",
                tags={"test_type": "delete_face"}
            )
            created_directory = True

            # Add a person to the directory
            print(f"Adding person to directory {person_directory_id}")
            add_person_response = client.person_directories.add_person(
                person_directory_id=person_directory_id,
                body={
                    "tags": {
                        "name": "Henry Miller",
                        "role": "test_subject"
                    }
                }
            )
            person_id = add_person_response.person_id
            print(f"Created person with ID: {person_id}")

            # Add a face to the person
            test_file_dir = os.path.dirname(os.path.abspath(__file__))
            image_path = os.path.join(test_file_dir, "test_data", "face", "enrollment_data", "Alex", "Family1-Son1.jpg")
            # Read image as bytes directly
            with open(image_path, "rb") as image_file:
                image_bytes = image_file.read()

            print(f"Adding face to person {person_id} using FaceSource object (testing pattern 5)")
            from azure.ai.contentunderstanding.models import FaceSource
            face_source = FaceSource(data=image_bytes)
            add_face_response = client.person_directories.add_face(
                person_directory_id=person_directory_id,
                face_source=face_source,
                person_id=person_id
            )
            
            face_id = add_face_response.face_id
            print(f"Created face with ID: {face_id}")

            # Verify the face exists before deletion
            face = client.person_directories.get_face(
                person_directory_id=person_directory_id,
                face_id=face_id
            )
            assert face is not None
            assert face.face_id == face_id
            print(f"Verified face {face_id} exists before deletion")

            # Delete the face
            print(f"Deleting face {face_id}")
            response = client.person_directories.delete_face(
                person_directory_id=person_directory_id,
                face_id=face_id
            )
            assert response is None

            # Verify the face no longer exists
            try:
                client.person_directories.get_face(
                    person_directory_id=person_directory_id,
                    face_id=face_id
                )
                assert False, f"Face {face_id} should not exist after deletion"
            except Exception:
                print(f"Verified face {face_id} no longer exists after deletion")

        finally:
            # Always clean up the created person directory, even if the test fails
            delete_person_directory_and_assert(client, person_directory_id, created_directory)

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_find_similar_faces(self, contentunderstanding_endpoint):
        """
        Test Summary:
        - Create a person directory and add a person (Bill) with multiple faces
        - Test 1 (Positive): Find similar faces using Dad3 image (same person) - should find matches
        - Test 2 (Negative): Find similar faces using Mom1 image (different person) - should find no matches
        - Verify both positive and negative cases with proper assertions
        - Clean up created person directory
        """
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        person_directory_id = generate_person_directory_id_sync(client, "test_person_directories_find_similar_faces")
        created_directory = False

        try:
            # Create a person directory
            create_person_directory_and_assert(
                client, 
                person_directory_id,
                description=f"Test person directory for find similar faces: {person_directory_id}",
                tags={"test_type": "find_similar_faces"}
            )
            created_directory = True

            # Add a person (Bill) to the directory
            print(f"Adding person (Bill) to directory {person_directory_id}")
            add_person_response = client.person_directories.add_person(
                person_directory_id=person_directory_id,
                body={
                    "tags": {
                        "name": "Bill Wilson",
                        "role": "test_subject"
                    }
                }
            )
            
            person_id = add_person_response.person_id
            print(f"Created person with ID: {person_id}")

            # Add two different faces from Bill's family to the person
            test_file_dir = os.path.dirname(os.path.abspath(__file__))
            
            # Face images to add to the directory
            face_images = [
                "test_data/face/enrollment_data/Bill/Family1-Dad1.jpg",
                "test_data/face/enrollment_data/Bill/Family1-Dad2.jpg"
            ]
            
            face_ids = []
            for i, face_file in enumerate(face_images):
                image_path = os.path.join(test_file_dir, face_file)
                # Read image as bytes directly
                with open(image_path, "rb") as image_file:
                    image_bytes = image_file.read()
                
                print(f"Adding face {i+1} from {face_file} to person {person_id} using FaceSource object (testing pattern 6)")
                from azure.ai.contentunderstanding.models import FaceSource
                face_source = FaceSource(data=image_bytes)
                add_face_response = client.person_directories.add_face(
                    person_directory_id=person_directory_id,
                    face_source=face_source,
                    person_id=person_id
                )
                
                face_id = add_face_response.face_id
                face_ids.append(face_id)
                print(f"Created face {i+1} with ID: {face_id}")

            # Test 1: Find similar faces using Family1-Dad3.jpg (same person - Bill)
            # This should find matches since Dad3 is from the same person as Dad1 and Dad2
            print(f"\nTest 1: Finding similar faces using Family1-Dad3.jpg (same person)")
            dad3_image_path = os.path.join(test_file_dir, "test_data", "face", "enrollment_data", "Bill", "Family1-Dad3.jpg")
            # Read image as bytes directly
            with open(dad3_image_path, "rb") as image_file:
                dad3_image_bytes = image_file.read()
            
            dad3_response = client.person_directories.find_similar_faces(
                person_directory_id=person_directory_id,
                body={
                    "faceSource": {
                        "data": dad3_image_bytes
                    },
                    "maxSimilarFaces": 10
                }
            )

            # Verify Test 1 response (should find matches)
            assert dad3_response is not None
            assert hasattr(dad3_response, 'similar_faces')
            
            # We expect to find similar faces since it's the same person
            assert dad3_response.similar_faces is not None, "Should find similar faces for same person (Dad3 -> Dad1/Dad2)"
            assert len(dad3_response.similar_faces) > 0, "Should find at least one similar face for same person"
            
            print(f"✅ Test 1 passed: Found {len(dad3_response.similar_faces)} similar faces for same person")
            
            for i, similar_face in enumerate(dad3_response.similar_faces):
                assert hasattr(similar_face, 'face_id')
                assert hasattr(similar_face, 'confidence')
                assert similar_face.face_id in face_ids, f"Similar face {similar_face.face_id} should be in our enrolled faces"
                assert similar_face.confidence > 0.0, f"Confidence should be positive: {similar_face.confidence}"
                print(f"  Similar face {i+1}: Face ID {similar_face.face_id}, Confidence {similar_face.confidence}")

            # Test 2: Find similar faces using Family1-Mom1.jpg (different person - Clare)
            # This should find NO matches since Clare is a different person than Bill
            print(f"\nTest 2: Finding similar faces using Family1-Mom1.jpg (different person)")
            mom1_image_path = os.path.join(test_file_dir, "test_data", "face", "enrollment_data", "Clare", "Family1-Mom1.jpg")
            # Read image as bytes directly
            with open(mom1_image_path, "rb") as image_file:
                mom1_image_bytes = image_file.read()
            
            mom1_response = client.person_directories.find_similar_faces(
                person_directory_id=person_directory_id,
                body={
                    "faceSource": {
                        "data": mom1_image_bytes
                    },
                    "maxSimilarFaces": 10
                }
            )

            # Verify Test 2 response (should find no matches)
            assert mom1_response is not None
            assert hasattr(mom1_response, 'similar_faces')
            
            # We expect to find NO similar faces since it's a different person
            if mom1_response.similar_faces and len(mom1_response.similar_faces) > 0:
                # If we unexpectedly find faces, log them but don't fail the test
                # (face similarity algorithms may have different thresholds)
                print(f"⚠️  Unexpected: Found {len(mom1_response.similar_faces)} similar faces for different person")
                for i, similar_face in enumerate(mom1_response.similar_faces):
                    print(f"  Unexpected match {i+1}: Face ID {similar_face.face_id}, Confidence {similar_face.confidence}")
                    # If confidence is very low, this might be acceptable
                    if similar_face.confidence > 0.5:
                        print(f"⚠️  High confidence match ({similar_face.confidence}) for different person - this may indicate an issue")
            else:
                print("✅ Test 2 passed: No similar faces found for different person (as expected)")

            print("Find similar faces test completed successfully")

        finally:
            # Always clean up the created person directory, even if the test fails
            delete_person_directory_and_assert(client, person_directory_id, created_directory)

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_verify_person(self, contentunderstanding_endpoint):
        """
        Test Summary:
        - Create a person directory and add a person with a face
        - Verify the person using a test image
        - Verify the verification results
        - Clean up created person directory
        """
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        person_directory_id = generate_person_directory_id_sync(client, "test_person_directories_verify_person")
        created_directory = False

        try:
            # Create a person directory
            create_person_directory_and_assert(
                client, 
                person_directory_id,
                description=f"Test person directory for verify person: {person_directory_id}",
                tags={"test_type": "verify_person"}
            )
            created_directory = True

            # Add a person to the directory
            print(f"Adding person to directory {person_directory_id}")
            add_person_response = client.person_directories.add_person(
                person_directory_id=person_directory_id,
                body={
                    "tags": {
                        "name": "Kate Anderson",
                        "role": "test_subject"
                    }
                }
            )
            person_id = add_person_response.person_id
            print(f"Created person with ID: {person_id}")

            # Add a face to the person
            test_file_dir = os.path.dirname(os.path.abspath(__file__))
            image_path = os.path.join(test_file_dir, "test_data", "face", "enrollment_data", "Alex", "Family1-Son1.jpg")
            # Read image as bytes directly
            with open(image_path, "rb") as image_file:
                image_bytes = image_file.read()

            print(f"Adding face to person {person_id} using positional parameters (testing pattern 7)")
            add_face_response = client.person_directories.add_face(
                person_directory_id,
                image_bytes,
                person_id=person_id
            )
            face_id = add_face_response.face_id
            print(f"Created face with ID: {face_id}")

            # Verify the person using the same image
            print(f"Verifying person {person_id} with test image")
            response = client.person_directories.verify_person(
                person_directory_id=person_directory_id,
                person_id=person_id,
                body={
                    "faceSource": {
                        "data": image_bytes
                    }
                }
            )

            # Verify the response
            assert response is not None
            assert hasattr(response, 'detected_face')
            assert hasattr(response, 'confidence')
            print(f"Verification result: Detected face = {response.detected_face}, Confidence = {response.confidence}")
            assert response.detected_face is not None, "detected_face should not be None"
            assert isinstance(response.confidence, (int, float)), "confidence should be a number"

        finally:
            # Always clean up the created person directory, even if the test fails
            delete_person_directory_and_assert(client, person_directory_id, created_directory)

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_identify_person(self, contentunderstanding_endpoint):
        """Test identify_person with various calling patterns."""
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        person_directory_id = f"test_person_dir_identify_person_{uuid.uuid4().hex[:8]}"
        created_directory = False

        try:
            # Create a person directory
            create_person_directory_and_assert(
                client,
                person_directory_id,
                description=f"Test person directory for identify person: {person_directory_id}",
                tags={"test_type": "identify_person"}
            )
            created_directory = True

            # Build person directory from enrollment data
            print(f"Building person directory from enrollment data")
            person_name_to_id = build_person_directory_from_enrollment_data(
                client,
                person_directory_id
            )
            
            print(f"Built person directory with {len(person_name_to_id)} persons")

            # Identify persons in a test image
            test_file_dir = os.path.dirname(os.path.abspath(__file__))
            test_image_path = os.path.join(test_file_dir, "test_data", "face", "family.jpg")
            
            print(f"Identifying persons in test image: {os.path.basename(test_image_path)}")
            
            # Test 1: Using body parameter (original method)
            print(f"Test 1: Using body parameter (original method)")
            # Read image as bytes directly
            with open(test_image_path, "rb") as image_file:
                image_bytes = image_file.read()
            response1 = client.person_directories.identify_person(
                person_directory_id=person_directory_id,
                body={
                    "faceSource": {
                        "data": image_bytes
                    },
                    "maxPersonCandidates": 5
                }
            )

            # Verify the response
            assert response1 is not None
            assert hasattr(response1, 'person_candidates')
            print(f"✅ Body parameter method successful: {len(response1.person_candidates) if response1.person_candidates else 0} candidates found")

            # Test 2: Using FaceSource object (new method)
            print(f"Test 2: Using FaceSource object (new method)")
            from azure.ai.contentunderstanding.models import FaceSource
            face_source = FaceSource(data=image_bytes)
            response2 = client.person_directories.identify_person(
                person_directory_id=person_directory_id,
                face_source=face_source,
                max_person_candidates=5
            )

            # Verify the response
            assert response2 is not None
            assert hasattr(response2, 'person_candidates')
            print(f"✅ FaceSource object method successful: {len(response2.person_candidates) if response2.person_candidates else 0} candidates found")

            # Test 3: Using positional bytes parameter (new overloaded method)
            print(f"Test 3: Using positional bytes parameter (new overloaded method)")
            with open(test_image_path, "rb") as image_file:
                image_bytes = image_file.read()
            response3 = client.person_directories.identify_person(
                person_directory_id,
                image_bytes,
                max_person_candidates=5
            )

            # Verify the response
            assert response3 is not None
            assert hasattr(response3, 'person_candidates')
            print(f"✅ Positional bytes method successful: {len(response3.person_candidates) if response3.person_candidates else 0} candidates found")

            # Test 4: Using positional URL parameter (new overloaded method)
            print(f"Test 4: Using positional URL parameter (new overloaded method)")
            test_url = "https://example.com/test-image.jpg"
            try:
                response4 = client.person_directories.identify_person(
                    person_directory_id,
                    test_url,
                    max_person_candidates=5
                )
                print(f"✅ Positional URL method successful: {len(response4.person_candidates) if response4.person_candidates else 0} candidates found")
            except Exception as e:
                print(f"ℹ️  Expected failure with invalid URL: {type(e).__name__}")
                print(f"✅ URL parameter handling works correctly")

            # Verify all methods return consistent results
            if response1.person_candidates and response2.person_candidates and response3.person_candidates:
                assert len(response1.person_candidates) == len(response2.person_candidates)
                assert len(response2.person_candidates) == len(response3.person_candidates)
                print(f"✅ All calling patterns returned consistent results")

        finally:
            # Clean up
            if created_directory:
                try:
                    client.person_directories.delete(person_directory_id=person_directory_id)
                    print(f"✅ Cleaned up test directory: {person_directory_id}")
                except Exception as e:
                    print(f"⚠️  Warning: Failed to clean up test directory {person_directory_id}: {e}")
