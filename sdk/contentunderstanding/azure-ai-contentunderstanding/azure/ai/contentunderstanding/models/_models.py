# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Literal, Mapping, Optional, TYPE_CHECKING, Union, overload

from azure.core.exceptions import ODataV4Format

from .._utils.model_base import Model as _Model, rest_discriminator, rest_field
from ._enums import ContentFieldType, DataSourceKind, KnowledgeSourceKind, MediaContentKind

if TYPE_CHECKING:
    from .. import models as _models


class AnalyzeInput(_Model):
    """Additional input to analyze.

    :ivar url: The URL of the input to analyze.  Only one of url or data should be specified.
     Required.
    :vartype url: str
    :ivar data: Raw image bytes. Provide bytes-like object; do not base64-encode. Only one of url
     or data should be specified.
    :vartype data: bytes
    :ivar name: Name of the input.
    :vartype name: str
    """

    url: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The URL of the input to analyze.  Only one of url or data should be specified. Required."""
    data: Optional[bytes] = rest_field(visibility=["read", "create", "update", "delete", "query"], format="base64")
    """Raw image bytes. Provide bytes-like object; do not base64-encode. Only one of url or data
     should be specified."""
    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the input."""

    @overload
    def __init__(
        self,
        *,
        url: str,
        data: Optional[bytes] = None,
        name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalyzeResult(_Model):
    """Analyze operation result.

    :ivar analyzer_id: The unique identifier of the analyzer.
    :vartype analyzer_id: str
    :ivar api_version: The version of the API used to analyze the document.
    :vartype api_version: str
    :ivar created_at: The date and time when the result was created.
    :vartype created_at: ~datetime.datetime
    :ivar warnings: Warnings encountered while analyzing the document.
    :vartype warnings: list[~azure.core.ODataV4Format]
    :ivar string_encoding: The string encoding used for content spans. Known values are:
     "codePoint", "utf16", and "utf8".
    :vartype string_encoding: str or ~azure.ai.contentunderstanding.models.StringEncoding
    :ivar contents: The extracted content. Required.
    :vartype contents: list[~azure.ai.contentunderstanding.models.MediaContent]
    """

    analyzer_id: Optional[str] = rest_field(
        name="analyzerId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The unique identifier of the analyzer."""
    api_version: Optional[str] = rest_field(
        name="apiVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """The version of the API used to analyze the document."""
    created_at: Optional[datetime.datetime] = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The date and time when the result was created."""
    warnings: Optional[list[ODataV4Format]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Warnings encountered while analyzing the document."""
    string_encoding: Optional[Union[str, "_models.StringEncoding"]] = rest_field(
        name="stringEncoding", visibility=["read", "create", "update", "delete", "query"]
    )
    """The string encoding used for content spans. Known values are: \"codePoint\", \"utf16\", and
     \"utf8\"."""
    contents: list["_models.MediaContent"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The extracted content. Required."""

    @overload
    def __init__(
        self,
        *,
        contents: list["_models.MediaContent"],
        analyzer_id: Optional[str] = None,
        api_version: Optional[str] = None,
        created_at: Optional[datetime.datetime] = None,
        warnings: Optional[list[ODataV4Format]] = None,
        string_encoding: Optional[Union[str, "_models.StringEncoding"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ContentField(_Model):
    """Field extracted from the content.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ArrayField, BooleanField, DateField, IntegerField, NumberField, ObjectField, StringField,
    TimeField

    :ivar type: Semantic data type of the field value. Required. Known values are: "string",
     "date", "time", "number", "integer", "boolean", "array", and "object".
    :vartype type: str or ~azure.ai.contentunderstanding.models.ContentFieldType
    :ivar spans: Span(s) associated with the field value in the markdown content.
    :vartype spans: list[~azure.ai.contentunderstanding.models.ContentSpan]
    :ivar confidence: Confidence of predicting the field value.
    :vartype confidence: float
    :ivar source: Encoded source that identifies the position of the field value in the content.
    :vartype source: str
    """

    __mapping__: dict[str, _Model] = {}
    type: str = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])
    """Semantic data type of the field value. Required. Known values are: \"string\", \"date\",
     \"time\", \"number\", \"integer\", \"boolean\", \"array\", and \"object\"."""
    spans: Optional[list["_models.ContentSpan"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Span(s) associated with the field value in the markdown content."""
    confidence: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Confidence of predicting the field value."""
    source: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Encoded source that identifies the position of the field value in the content."""

    @overload
    def __init__(
        self,
        *,
        type: str,
        spans: Optional[list["_models.ContentSpan"]] = None,
        confidence: Optional[float] = None,
        source: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ArrayField(ContentField, discriminator="array"):
    """Array field extracted from the content.

    :ivar type: Semantic data type of the field value. Required. Known values are: "string",
     "date", "time", "number", "integer", "boolean", "array", and "object".
    :vartype type: str or ~azure.ai.contentunderstanding.models.ContentFieldType
    :ivar spans: Span(s) associated with the field value in the markdown content.
    :vartype spans: list[~azure.ai.contentunderstanding.models.ContentSpan]
    :ivar confidence: Confidence of predicting the field value.
    :vartype confidence: float
    :ivar source: Encoded source that identifies the position of the field value in the content.
    :vartype source: str
    :ivar field_type: Semantic data type of the field value. Required. List of subfields of the
     same type.
    :vartype field_type: str or ~azure.ai.contentunderstanding.models.ARRAY
    :ivar value_array: Array field value.
    :vartype value_array: list[~azure.ai.contentunderstanding.models.ContentField]
    """

    __mapping__: dict[str, _Model] = {}
    type: str = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])
    """Semantic data type of the field value. Required. Known values are: \"string\", \"date\",
     \"time\", \"number\", \"integer\", \"boolean\", \"array\", and \"object\"."""
    field_type: Literal[ContentFieldType.ARRAY] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Semantic data type of the field value. Required. List of subfields of the same type."""
    value_array: Optional[list["_models.ContentField"]] = rest_field(
        name="valueArray", visibility=["read", "create", "update", "delete", "query"]
    )
    """Array field value."""

    @overload
    def __init__(
        self,
        *,
        type: str,
        spans: Optional[list["_models.ContentSpan"]] = None,
        confidence: Optional[float] = None,
        source: Optional[str] = None,
        value_array: Optional[list["_models.ContentField"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.field_type = ContentFieldType.ARRAY  # type: ignore


class MediaContent(_Model):
    """Media content base class.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AudioVisualContent, DocumentContent

    :ivar kind: Content kind. Required. Known values are: "document" and "audioVisual".
    :vartype kind: str or ~azure.ai.contentunderstanding.models.MediaContentKind
    :ivar mime_type: Detected MIME type of the content.  Ex. application/pdf, image/jpeg, etc.
    :vartype mime_type: str
    :ivar category: Classified content category.
    :vartype category: str
    :ivar path: The path of the content in the input.
    :vartype path: str
    :ivar markdown: Markdown representation of the content.
    :vartype markdown: str
    :ivar fields: Extracted fields from the content.
    :vartype fields: dict[str, ~azure.ai.contentunderstanding.models.ContentField]
    """

    __mapping__: dict[str, _Model] = {}
    kind: str = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])
    """Content kind. Required. Known values are: \"document\" and \"audioVisual\"."""
    mime_type: Optional[str] = rest_field(name="mimeType", visibility=["read", "create", "update", "delete", "query"])
    """Detected MIME type of the content.  Ex. application/pdf, image/jpeg, etc."""
    category: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Classified content category."""
    path: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The path of the content in the input."""
    markdown: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Markdown representation of the content."""
    fields: Optional[dict[str, "_models.ContentField"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Extracted fields from the content."""

    @overload
    def __init__(
        self,
        *,
        kind: str,
        mime_type: Optional[str] = None,
        category: Optional[str] = None,
        path: Optional[str] = None,
        markdown: Optional[str] = None,
        fields: Optional[dict[str, "_models.ContentField"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AudioVisualContent(MediaContent, discriminator="audioVisual"):
    """Audio visual content.  Ex. audio/wav, video/mp4.

    :ivar mime_type: Detected MIME type of the content.  Ex. application/pdf, image/jpeg, etc.
    :vartype mime_type: str
    :ivar category: Classified content category.
    :vartype category: str
    :ivar path: The path of the content in the input.
    :vartype path: str
    :ivar markdown: Markdown representation of the content.
    :vartype markdown: str
    :ivar fields: Extracted fields from the content.
    :vartype fields: dict[str, ~azure.ai.contentunderstanding.models.ContentField]
    :ivar kind: Content kind. Required. Audio visual content, such as mp3, mp4, etc.
    :vartype kind: str or ~azure.ai.contentunderstanding.models.AUDIO_VISUAL
    :ivar start_time_ms: Start time of the content in milliseconds. Required.
    :vartype start_time_ms: int
    :ivar end_time_ms: End time of the content in milliseconds. Required.
    :vartype end_time_ms: int
    :ivar width: Width of each video frame in pixels, if applicable.
    :vartype width: int
    :ivar height: Height of each video frame in pixels, if applicable.
    :vartype height: int
    :ivar camera_shot_times_ms: List of camera shot changes in the video, represented by its
     timestamp in milliseconds.  Only if returnDetails is true.
    :vartype camera_shot_times_ms: list[int]
    :ivar key_frame_times_ms: List of key frames in the video, represented by its timestamp in
     milliseconds.  Only if returnDetails is true.
    :vartype key_frame_times_ms: list[int]
    :ivar transcript_phrases: List of transcript phrases.  Only if returnDetails is true.
    :vartype transcript_phrases: list[~azure.ai.contentunderstanding.models.TranscriptPhrase]
    :ivar persons: List of detected persons in the video.  Only if enableFace and returnDetails are
     true.
    :vartype persons: list[~azure.ai.contentunderstanding.models.DetectedPerson]
    :ivar segments: List of audio visual segments.  Only if enableSegmentation and returnDetails
     are true.
    :vartype segments: list[~azure.ai.contentunderstanding.models.AudioVisualSegment]
    """

    kind: Literal[MediaContentKind.AUDIO_VISUAL] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Content kind. Required. Audio visual content, such as mp3, mp4, etc."""
    start_time_ms: int = rest_field(name="startTimeMs", visibility=["read", "create", "update", "delete", "query"])
    """Start time of the content in milliseconds. Required."""
    end_time_ms: int = rest_field(name="endTimeMs", visibility=["read", "create", "update", "delete", "query"])
    """End time of the content in milliseconds. Required."""
    width: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Width of each video frame in pixels, if applicable."""
    height: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Height of each video frame in pixels, if applicable."""
    camera_shot_times_ms: Optional[list[int]] = rest_field(
        name="cameraShotTimesMs", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of camera shot changes in the video, represented by its timestamp in milliseconds.  Only
     if returnDetails is true."""
    key_frame_times_ms: Optional[list[int]] = rest_field(
        name="KeyFrameTimesMs", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of key frames in the video, represented by its timestamp in milliseconds.  Only if
     returnDetails is true."""
    transcript_phrases: Optional[list["_models.TranscriptPhrase"]] = rest_field(
        name="transcriptPhrases", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of transcript phrases.  Only if returnDetails is true."""
    persons: Optional[list["_models.DetectedPerson"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of detected persons in the video.  Only if enableFace and returnDetails are true."""
    segments: Optional[list["_models.AudioVisualSegment"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of audio visual segments.  Only if enableSegmentation and returnDetails are true."""

    @overload
    def __init__(
        self,
        *,
        start_time_ms: int,
        end_time_ms: int,
        mime_type: Optional[str] = None,
        category: Optional[str] = None,
        path: Optional[str] = None,
        markdown: Optional[str] = None,
        fields: Optional[dict[str, "_models.ContentField"]] = None,
        width: Optional[int] = None,
        height: Optional[int] = None,
        camera_shot_times_ms: Optional[list[int]] = None,
        key_frame_times_ms: Optional[list[int]] = None,
        transcript_phrases: Optional[list["_models.TranscriptPhrase"]] = None,
        persons: Optional[list["_models.DetectedPerson"]] = None,
        segments: Optional[list["_models.AudioVisualSegment"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind = MediaContentKind.AUDIO_VISUAL  # type: ignore


class AudioVisualSegment(_Model):
    """Audio visual segment, such as a scene, chapter, etc.

    :ivar segment_id: Segment ID. Required.
    :vartype segment_id: str
    :ivar start_time_ms: Start time of the segment in milliseconds. Required.
    :vartype start_time_ms: int
    :ivar end_time_ms: End time of the segment in milliseconds. Required.
    :vartype end_time_ms: int
    :ivar description: Short description of the segment. Required.
    :vartype description: str
    :ivar span: Span of the segment in the markdown content.
    :vartype span: ~azure.ai.contentunderstanding.models.ContentSpan
    """

    segment_id: str = rest_field(name="segmentId", visibility=["read", "create", "update", "delete", "query"])
    """Segment ID. Required."""
    start_time_ms: int = rest_field(name="startTimeMs", visibility=["read", "create", "update", "delete", "query"])
    """Start time of the segment in milliseconds. Required."""
    end_time_ms: int = rest_field(name="endTimeMs", visibility=["read", "create", "update", "delete", "query"])
    """End time of the segment in milliseconds. Required."""
    description: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Short description of the segment. Required."""
    span: Optional["_models.ContentSpan"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Span of the segment in the markdown content."""

    @overload
    def __init__(
        self,
        *,
        segment_id: str,
        start_time_ms: int,
        end_time_ms: int,
        description: str,
        span: Optional["_models.ContentSpan"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DataSource(_Model):
    """Data source specifying a set of documents.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    BlobDataSource

    :ivar kind: The kind of data source. Required. "blob"
    :vartype kind: str or ~azure.ai.contentunderstanding.models.DataSourceKind
    """

    __mapping__: dict[str, _Model] = {}
    kind: str = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])
    """The kind of data source. Required. \"blob\""""

    @overload
    def __init__(
        self,
        *,
        kind: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class BlobDataSource(DataSource, discriminator="blob"):
    """Blob storage data source.

    :ivar kind: Indicates that the data source is a blob. Required. A blob storage data source.
    :vartype kind: str or ~azure.ai.contentunderstanding.models.BLOB
    :ivar container_url: The URL of the blob container. Required.
    :vartype container_url: str
    :ivar prefix: An optional prefix to filter blobs within the container.
    :vartype prefix: str
    :ivar file_list_path: An optional path to a file listing specific blobs to include.
    :vartype file_list_path: str
    """

    kind: Literal[DataSourceKind.BLOB] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Indicates that the data source is a blob. Required. A blob storage data source."""
    container_url: str = rest_field(name="containerUrl", visibility=["read", "create", "update", "delete", "query"])
    """The URL of the blob container. Required."""
    prefix: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """An optional prefix to filter blobs within the container."""
    file_list_path: Optional[str] = rest_field(
        name="fileListPath", visibility=["read", "create", "update", "delete", "query"]
    )
    """An optional path to a file listing specific blobs to include."""

    @overload
    def __init__(
        self,
        *,
        container_url: str,
        prefix: Optional[str] = None,
        file_list_path: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind = DataSourceKind.BLOB  # type: ignore


class BooleanField(ContentField, discriminator="boolean"):
    """Boolean field extracted from the content.

    :ivar type: Semantic data type of the field value. Required. Known values are: "string",
     "date", "time", "number", "integer", "boolean", "array", and "object".
    :vartype type: str or ~azure.ai.contentunderstanding.models.ContentFieldType
    :ivar spans: Span(s) associated with the field value in the markdown content.
    :vartype spans: list[~azure.ai.contentunderstanding.models.ContentSpan]
    :ivar confidence: Confidence of predicting the field value.
    :vartype confidence: float
    :ivar source: Encoded source that identifies the position of the field value in the content.
    :vartype source: str
    :ivar field_type: Semantic data type of the field value. Required. Boolean value.
    :vartype field_type: str or ~azure.ai.contentunderstanding.models.BOOLEAN
    :ivar value_boolean: Boolean field value.
    :vartype value_boolean: bool
    """

    __mapping__: dict[str, _Model] = {}
    type: str = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])
    """Semantic data type of the field value. Required. Known values are: \"string\", \"date\",
     \"time\", \"number\", \"integer\", \"boolean\", \"array\", and \"object\"."""
    field_type: Literal[ContentFieldType.BOOLEAN] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Semantic data type of the field value. Required. Boolean value."""
    value_boolean: Optional[bool] = rest_field(
        name="valueBoolean", visibility=["read", "create", "update", "delete", "query"]
    )
    """Boolean field value."""

    @overload
    def __init__(
        self,
        *,
        type: str,
        spans: Optional[list["_models.ContentSpan"]] = None,
        confidence: Optional[float] = None,
        source: Optional[str] = None,
        value_boolean: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.field_type = ContentFieldType.BOOLEAN  # type: ignore


class BoundingBox(_Model):
    """Bounding box in an image.

    :ivar left: Left coordinate of the bounding box. Required.
    :vartype left: int
    :ivar top: Top coordinate of the bounding box. Required.
    :vartype top: int
    :ivar width: Width of the bounding box. Required.
    :vartype width: int
    :ivar height: Height of the bounding box. Required.
    :vartype height: int
    """

    left: int = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Left coordinate of the bounding box. Required."""
    top: int = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Top coordinate of the bounding box. Required."""
    width: int = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Width of the bounding box. Required."""
    height: int = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Height of the bounding box. Required."""

    @overload
    def __init__(
        self,
        *,
        left: int,
        top: int,
        width: int,
        height: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ClassifierCategoryDefinition(_Model):
    """A classifier category.

    :ivar description: The description of the category.
    :vartype description: str
    :ivar analyzer_id: Optional analyzer used to process the content.
    :vartype analyzer_id: str
    """

    description: Optional[str] = rest_field(visibility=["read", "create"])
    """The description of the category."""
    analyzer_id: Optional[str] = rest_field(
        name="analyzerId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Optional analyzer used to process the content."""

    @overload
    def __init__(
        self,
        *,
        description: Optional[str] = None,
        analyzer_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ClassifyResult(_Model):
    """Classify operation result.

    :ivar classifier_id: The unique identifier of the classifier.
    :vartype classifier_id: str
    :ivar api_version: The version of the API used to classify the document.
    :vartype api_version: str
    :ivar created_at: The date and time when the result was created.
    :vartype created_at: ~datetime.datetime
    :ivar warnings: Warnings encountered while classifying the document.
    :vartype warnings: list[~azure.core.ODataV4Format]
    :ivar string_encoding: The string encoding used for content spans. Known values are:
     "codePoint", "utf16", and "utf8".
    :vartype string_encoding: str or ~azure.ai.contentunderstanding.models.StringEncoding
    :ivar contents: The classified content. Required.
    :vartype contents: list[~azure.ai.contentunderstanding.models.MediaContent]
    """

    classifier_id: Optional[str] = rest_field(
        name="classifierId", visibility=["read", "create", "update", "delete", "query"]
    )
    """The unique identifier of the classifier."""
    api_version: Optional[str] = rest_field(
        name="apiVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """The version of the API used to classify the document."""
    created_at: Optional[datetime.datetime] = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The date and time when the result was created."""
    warnings: Optional[list[ODataV4Format]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Warnings encountered while classifying the document."""
    string_encoding: Optional[Union[str, "_models.StringEncoding"]] = rest_field(
        name="stringEncoding", visibility=["read", "create", "update", "delete", "query"]
    )
    """The string encoding used for content spans. Known values are: \"codePoint\", \"utf16\", and
     \"utf8\"."""
    contents: list["_models.MediaContent"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The classified content. Required."""

    @overload
    def __init__(
        self,
        *,
        contents: list["_models.MediaContent"],
        classifier_id: Optional[str] = None,
        api_version: Optional[str] = None,
        created_at: Optional[datetime.datetime] = None,
        warnings: Optional[list[ODataV4Format]] = None,
        string_encoding: Optional[Union[str, "_models.StringEncoding"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CompareFacesResult(_Model):
    """Compare faces response.

    :ivar detected_face1: Details of the first detected face. Required.
    :vartype detected_face1: ~azure.ai.contentunderstanding.models.DetectedBoundingBox
    :ivar detected_face2: Details of the second detected face. Required.
    :vartype detected_face2: ~azure.ai.contentunderstanding.models.DetectedBoundingBox
    :ivar confidence: Confidence score of the face comparison. Required.
    :vartype confidence: float
    """

    detected_face1: "_models.DetectedBoundingBox" = rest_field(
        name="detectedFace1", visibility=["read", "create", "update", "delete", "query"]
    )
    """Details of the first detected face. Required."""
    detected_face2: "_models.DetectedBoundingBox" = rest_field(
        name="detectedFace2", visibility=["read", "create", "update", "delete", "query"]
    )
    """Details of the second detected face. Required."""
    confidence: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Confidence score of the face comparison. Required."""

    @overload
    def __init__(
        self,
        *,
        detected_face1: "_models.DetectedBoundingBox",
        detected_face2: "_models.DetectedBoundingBox",
        confidence: float,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ContentAnalyzer(_Model):
    """Analyzer that extracts content and fields from multimodal documents.

    :ivar analyzer_id: The unique identifier of the analyzer. Required.
    :vartype analyzer_id: str
    :ivar description: A description of the analyzer.
    :vartype description: str
    :ivar tags: Tags associated with the analyzer.
    :vartype tags: dict[str, str]
    :ivar status: The status of the analyzer. Required. Known values are: "creating", "ready",
     "deleting", and "failed".
    :vartype status: str or ~azure.ai.contentunderstanding.models.ResourceStatus
    :ivar created_at: The date and time when the analyzer was created. Required.
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_at: The date and time when the analyzer was last modified. Required.
    :vartype last_modified_at: ~datetime.datetime
    :ivar warnings: Warnings encountered while creating the analyzer.
    :vartype warnings: list[~azure.core.ODataV4Format]
    :ivar base_analyzer_id: The analyzer to incrementally train from.
    :vartype base_analyzer_id: str
    :ivar config: Analyzer configuration settings.
    :vartype config: ~azure.ai.contentunderstanding.models.ContentAnalyzerConfig
    :ivar content_field_schema: The schema of fields to extracted.
    :vartype content_field_schema: ~azure.ai.contentunderstanding.models.ContentFieldSchema
    :ivar training_data: The data source containing training data for the analyzer.
    :vartype training_data: ~azure.ai.contentunderstanding.models.DataSource
    :ivar processing_location: The location where the data may be processed. Known values are:
     "geography", "dataZone", and "global".
    :vartype processing_location: str or ~azure.ai.contentunderstanding.models.ProcessingLocation
    :ivar mode: The analysis mode: standard, pro.  Default is standard. Known values are:
     "standard" and "pro".
    :vartype mode: str or ~azure.ai.contentunderstanding.models.AnalysisMode
    :ivar knowledge_sources: Additional knowledge sources used to enhance the analyzer.
    :vartype knowledge_sources: list[~azure.ai.contentunderstanding.models.KnowledgeSource]
    """

    analyzer_id: str = rest_field(name="analyzerId", visibility=["read"])
    """The unique identifier of the analyzer. Required."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A description of the analyzer."""
    tags: Optional[dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Tags associated with the analyzer."""
    status: Union[str, "_models.ResourceStatus"] = rest_field(visibility=["read"])
    """The status of the analyzer. Required. Known values are: \"creating\", \"ready\", \"deleting\",
     and \"failed\"."""
    created_at: datetime.datetime = rest_field(name="createdAt", visibility=["read"], format="rfc3339")
    """The date and time when the analyzer was created. Required."""
    last_modified_at: datetime.datetime = rest_field(name="lastModifiedAt", visibility=["read"], format="rfc3339")
    """The date and time when the analyzer was last modified. Required."""
    warnings: Optional[list[ODataV4Format]] = rest_field(visibility=["read"])
    """Warnings encountered while creating the analyzer."""
    base_analyzer_id: Optional[str] = rest_field(name="baseAnalyzerId", visibility=["read", "create"])
    """The analyzer to incrementally train from."""
    config: Optional["_models.ContentAnalyzerConfig"] = rest_field(visibility=["read", "create"])
    """Analyzer configuration settings."""
    content_field_schema: Optional["_models.ContentFieldSchema"] = rest_field(
        name="fieldSchema", visibility=["read", "create"]
    )
    """The schema of fields to extracted."""
    training_data: Optional["_models.DataSource"] = rest_field(name="trainingData", visibility=["read", "create"])
    """The data source containing training data for the analyzer."""
    processing_location: Optional[Union[str, "_models.ProcessingLocation"]] = rest_field(
        name="processingLocation", visibility=["read", "create"]
    )
    """The location where the data may be processed. Known values are: \"geography\", \"dataZone\",
     and \"global\"."""
    mode: Optional[Union[str, "_models.AnalysisMode"]] = rest_field(visibility=["read", "create"])
    """The analysis mode: standard, pro.  Default is standard. Known values are: \"standard\" and
     \"pro\"."""
    knowledge_sources: Optional[list["_models.KnowledgeSource"]] = rest_field(
        name="knowledgeSources", visibility=["read", "create", "update", "delete", "query"]
    )
    """Additional knowledge sources used to enhance the analyzer."""

    @overload
    def __init__(
        self,
        *,
        description: Optional[str] = None,
        tags: Optional[dict[str, str]] = None,
        base_analyzer_id: Optional[str] = None,
        config: Optional["_models.ContentAnalyzerConfig"] = None,
        content_field_schema: Optional["_models.ContentFieldSchema"] = None,
        training_data: Optional["_models.DataSource"] = None,
        processing_location: Optional[Union[str, "_models.ProcessingLocation"]] = None,
        mode: Optional[Union[str, "_models.AnalysisMode"]] = None,
        knowledge_sources: Optional[list["_models.KnowledgeSource"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ContentAnalyzerConfig(_Model):
    """Configuration settings for an analyzer.

    :ivar return_details: Return all content details.
    :vartype return_details: bool
    :ivar locales: List of locale hints for speech transcription.
    :vartype locales: list[str]
    :ivar enable_face: Enable face detection.
    :vartype enable_face: bool
    :ivar person_directory_id: Specify the person directory used for identifying detected faces.
    :vartype person_directory_id: str
    :ivar enable_ocr: Enable optical character recognition (OCR).
    :vartype enable_ocr: bool
    :ivar enable_layout: Enable layout analysis.
    :vartype enable_layout: bool
    :ivar table_format: Representation format of tables in analyze result markdown. "html"
    :vartype table_format: str or ~azure.ai.contentunderstanding.models.TableFormat
    :ivar enable_formula: Enable mathematical formula detection.
    :vartype enable_formula: bool
    :ivar disable_face_blurring: Disable the default blurring of faces for privacy while processing
     the content.
    :vartype disable_face_blurring: bool
    :ivar disable_content_filtering: Disable content filtering that detects and prevents the output
     of harmful content.
    :vartype disable_content_filtering: bool
    :ivar estimate_field_source_and_confidence: Return grounding source and confidence for
     extracted fields.
    :vartype estimate_field_source_and_confidence: bool
    :ivar segmentation_mode: Segmentation mode used to split audio/visual content. Known values
     are: "noSegmentation", "auto", and "custom".
    :vartype segmentation_mode: str or ~azure.ai.contentunderstanding.models.SegmentationMode
    :ivar segmentation_definition: Segmentation definition for use with custom segmentation mode.
    :vartype segmentation_definition: str
    """

    return_details: Optional[bool] = rest_field(
        name="returnDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Return all content details."""
    locales: Optional[list[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of locale hints for speech transcription."""
    enable_face: Optional[bool] = rest_field(
        name="enableFace", visibility=["read", "create", "update", "delete", "query"]
    )
    """Enable face detection."""
    person_directory_id: Optional[str] = rest_field(
        name="personDirectoryId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Specify the person directory used for identifying detected faces."""
    enable_ocr: Optional[bool] = rest_field(
        name="enableOcr", visibility=["read", "create", "update", "delete", "query"]
    )
    """Enable optical character recognition (OCR)."""
    enable_layout: Optional[bool] = rest_field(
        name="enableLayout", visibility=["read", "create", "update", "delete", "query"]
    )
    """Enable layout analysis."""
    table_format: Optional[Union[str, "_models.TableFormat"]] = rest_field(
        name="tableFormat", visibility=["read", "create", "update", "delete", "query"]
    )
    """Representation format of tables in analyze result markdown. \"html\""""
    enable_formula: Optional[bool] = rest_field(
        name="enableFormula", visibility=["read", "create", "update", "delete", "query"]
    )
    """Enable mathematical formula detection."""
    disable_face_blurring: Optional[bool] = rest_field(
        name="disableFaceBlurring", visibility=["read", "create", "update", "delete", "query"]
    )
    """Disable the default blurring of faces for privacy while processing the content."""
    disable_content_filtering: Optional[bool] = rest_field(
        name="disableContentFiltering", visibility=["read", "create", "update", "delete", "query"]
    )
    """Disable content filtering that detects and prevents the output of harmful content."""
    estimate_field_source_and_confidence: Optional[bool] = rest_field(
        name="estimateFieldSourceAndConfidence", visibility=["read", "create", "update", "delete", "query"]
    )
    """Return grounding source and confidence for extracted fields."""
    segmentation_mode: Optional[Union[str, "_models.SegmentationMode"]] = rest_field(
        name="segmentationMode", visibility=["read", "create", "update", "delete", "query"]
    )
    """Segmentation mode used to split audio/visual content. Known values are: \"noSegmentation\",
     \"auto\", and \"custom\"."""
    segmentation_definition: Optional[str] = rest_field(
        name="segmentationDefinition", visibility=["read", "create", "update", "delete", "query"]
    )
    """Segmentation definition for use with custom segmentation mode."""

    @overload
    def __init__(
        self,
        *,
        return_details: Optional[bool] = None,
        locales: Optional[list[str]] = None,
        enable_face: Optional[bool] = None,
        person_directory_id: Optional[str] = None,
        enable_ocr: Optional[bool] = None,
        enable_layout: Optional[bool] = None,
        table_format: Optional[Union[str, "_models.TableFormat"]] = None,
        enable_formula: Optional[bool] = None,
        disable_face_blurring: Optional[bool] = None,
        disable_content_filtering: Optional[bool] = None,
        estimate_field_source_and_confidence: Optional[bool] = None,
        segmentation_mode: Optional[Union[str, "_models.SegmentationMode"]] = None,
        segmentation_definition: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ContentClassifier(_Model):
    """Classifier that classifies content into categories with optional splitting.

    :ivar classifier_id: The unique identifier of the classifier. Required.
    :vartype classifier_id: str
    :ivar description: A description of the classifier.
    :vartype description: str
    :ivar tags: Tags associated with the classifier.
    :vartype tags: dict[str, str]
    :ivar status: The status of the classifier. Required. Known values are: "creating", "ready",
     "deleting", and "failed".
    :vartype status: str or ~azure.ai.contentunderstanding.models.ResourceStatus
    :ivar created_at: The date and time when the classifier was created. Required.
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_at: The date and time when the classifier was last modified. Required.
    :vartype last_modified_at: ~datetime.datetime
    :ivar warnings: Warnings encountered while creating the classifier.
    :vartype warnings: list[~azure.core.ODataV4Format]
    :ivar categories: The categories to classify against. Required.
    :vartype categories: dict[str,
     ~azure.ai.contentunderstanding.models.ClassifierCategoryDefinition]
    :ivar split_mode: Mode used to split input into content objects. Known values are: "noSplit",
     "perPage", and "auto".
    :vartype split_mode: str or ~azure.ai.contentunderstanding.models.ClassifierSplitMode
    :ivar processing_location: The location where the data may be processed. Known values are:
     "geography", "dataZone", and "global".
    :vartype processing_location: str or ~azure.ai.contentunderstanding.models.ProcessingLocation
    """

    classifier_id: str = rest_field(name="classifierId", visibility=["read"])
    """The unique identifier of the classifier. Required."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A description of the classifier."""
    tags: Optional[dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Tags associated with the classifier."""
    status: Union[str, "_models.ResourceStatus"] = rest_field(visibility=["read"])
    """The status of the classifier. Required. Known values are: \"creating\", \"ready\",
     \"deleting\", and \"failed\"."""
    created_at: datetime.datetime = rest_field(name="createdAt", visibility=["read"], format="rfc3339")
    """The date and time when the classifier was created. Required."""
    last_modified_at: datetime.datetime = rest_field(name="lastModifiedAt", visibility=["read"], format="rfc3339")
    """The date and time when the classifier was last modified. Required."""
    warnings: Optional[list[ODataV4Format]] = rest_field(visibility=["read"])
    """Warnings encountered while creating the classifier."""
    categories: dict[str, "_models.ClassifierCategoryDefinition"] = rest_field(visibility=["read", "create"])
    """The categories to classify against. Required."""
    split_mode: Optional[Union[str, "_models.ClassifierSplitMode"]] = rest_field(
        name="splitMode", visibility=["read", "create"]
    )
    """Mode used to split input into content objects. Known values are: \"noSplit\", \"perPage\", and
     \"auto\"."""
    processing_location: Optional[Union[str, "_models.ProcessingLocation"]] = rest_field(
        name="processingLocation", visibility=["read", "create"]
    )
    """The location where the data may be processed. Known values are: \"geography\", \"dataZone\",
     and \"global\"."""

    @overload
    def __init__(
        self,
        *,
        categories: dict[str, "_models.ClassifierCategoryDefinition"],
        description: Optional[str] = None,
        tags: Optional[dict[str, str]] = None,
        split_mode: Optional[Union[str, "_models.ClassifierSplitMode"]] = None,
        processing_location: Optional[Union[str, "_models.ProcessingLocation"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ContentFieldDefinition(_Model):
    """Definition of the field using a JSON Schema like syntax.

    :ivar method: Generation method. Known values are: "generate", "extract", and "classify".
    :vartype method: str or ~azure.ai.contentunderstanding.models.GenerationMethod
    :ivar type: Semantic data type of the field value. Known values are: "string", "date", "time",
     "number", "integer", "boolean", "array", and "object".
    :vartype type: str or ~azure.ai.contentunderstanding.models.ContentFieldType
    :ivar description: Field description.
    :vartype description: str
    :ivar item_definition: Field type schema of each array element, if type is array.
    :vartype item_definition: ~azure.ai.contentunderstanding.models.ContentFieldDefinition
    :ivar properties: Named sub-fields, if type is object.
    :vartype properties: dict[str, ~azure.ai.contentunderstanding.models.ContentFieldDefinition]
    :ivar examples: Examples of field values.
    :vartype examples: list[str]
    :ivar enum: Enumeration of possible field values.
    :vartype enum: list[str]
    :ivar enum_descriptions: Descriptions for each enumeration value.
    :vartype enum_descriptions: dict[str, str]
    :ivar ref: Reference to another field definition.
    :vartype ref: str
    """

    method: Optional[Union[str, "_models.GenerationMethod"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Generation method. Known values are: \"generate\", \"extract\", and \"classify\"."""
    type: Optional[Union[str, "_models.ContentFieldType"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Semantic data type of the field value. Known values are: \"string\", \"date\", \"time\",
     \"number\", \"integer\", \"boolean\", \"array\", and \"object\"."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Field description."""
    item_definition: Optional["_models.ContentFieldDefinition"] = rest_field(
        name="items", visibility=["read", "create", "update", "delete", "query"]
    )
    """Field type schema of each array element, if type is array."""
    properties: Optional[dict[str, "_models.ContentFieldDefinition"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Named sub-fields, if type is object."""
    examples: Optional[list[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Examples of field values."""
    enum: Optional[list[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Enumeration of possible field values."""
    enum_descriptions: Optional[dict[str, str]] = rest_field(
        name="enumDescriptions", visibility=["read", "create", "update", "delete", "query"]
    )
    """Descriptions for each enumeration value."""
    ref: Optional[str] = rest_field(name="$ref", visibility=["read", "create", "update", "delete", "query"])
    """Reference to another field definition."""

    @overload
    def __init__(
        self,
        *,
        method: Optional[Union[str, "_models.GenerationMethod"]] = None,
        type: Optional[Union[str, "_models.ContentFieldType"]] = None,
        description: Optional[str] = None,
        item_definition: Optional["_models.ContentFieldDefinition"] = None,
        properties: Optional[dict[str, "_models.ContentFieldDefinition"]] = None,
        examples: Optional[list[str]] = None,
        enum: Optional[list[str]] = None,
        enum_descriptions: Optional[dict[str, str]] = None,
        ref: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ContentFieldSchema(_Model):
    """Schema of fields to be extracted from documents.

    :ivar name: The name of the field schema.
    :vartype name: str
    :ivar description: A description of the field schema.
    :vartype description: str
    :ivar fields: The fields defined in the schema. Required.
    :vartype fields: dict[str, ~azure.ai.contentunderstanding.models.ContentFieldDefinition]
    :ivar definitions: Additional definitions referenced by the fields in the schema.
    :vartype definitions: dict[str, ~azure.ai.contentunderstanding.models.ContentFieldDefinition]
    """

    name: Optional[str] = rest_field(visibility=["read", "create"])
    """The name of the field schema."""
    description: Optional[str] = rest_field(visibility=["read", "create"])
    """A description of the field schema."""
    fields: dict[str, "_models.ContentFieldDefinition"] = rest_field(visibility=["read", "create"])
    """The fields defined in the schema. Required."""
    definitions: Optional[dict[str, "_models.ContentFieldDefinition"]] = rest_field(visibility=["read", "create"])
    """Additional definitions referenced by the fields in the schema."""

    @overload
    def __init__(
        self,
        *,
        fields: dict[str, "_models.ContentFieldDefinition"],
        name: Optional[str] = None,
        description: Optional[str] = None,
        definitions: Optional[dict[str, "_models.ContentFieldDefinition"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ContentSpan(_Model):
    """Position of the element in markdown, specified as a character offset and length.

    :ivar offset: Starting position (0-indexed) of the element in markdown, specified in
     characters. Required.
    :vartype offset: int
    :ivar length: Length of the element in markdown, specified in characters. Required.
    :vartype length: int
    """

    offset: int = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Starting position (0-indexed) of the element in markdown, specified in characters. Required."""
    length: int = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Length of the element in markdown, specified in characters. Required."""

    @overload
    def __init__(
        self,
        *,
        offset: int,
        length: int,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DateField(ContentField, discriminator="date"):
    """Date field extracted from the content.

    :ivar type: Semantic data type of the field value. Required. Known values are: "string",
     "date", "time", "number", "integer", "boolean", "array", and "object".
    :vartype type: str or ~azure.ai.contentunderstanding.models.ContentFieldType
    :ivar spans: Span(s) associated with the field value in the markdown content.
    :vartype spans: list[~azure.ai.contentunderstanding.models.ContentSpan]
    :ivar confidence: Confidence of predicting the field value.
    :vartype confidence: float
    :ivar source: Encoded source that identifies the position of the field value in the content.
    :vartype source: str
    :ivar field_type: Semantic data type of the field value. Required. Date, normalized to ISO 8601
     (YYYY-MM-DD) format.
    :vartype field_type: str or ~azure.ai.contentunderstanding.models.DATE
    :ivar value_date: Date field value, in ISO 8601 (YYYY-MM-DD) format.
    :vartype value_date: ~datetime.date
    """

    __mapping__: dict[str, _Model] = {}
    type: str = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])
    """Semantic data type of the field value. Required. Known values are: \"string\", \"date\",
     \"time\", \"number\", \"integer\", \"boolean\", \"array\", and \"object\"."""
    field_type: Literal[ContentFieldType.DATE] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Semantic data type of the field value. Required. Date, normalized to ISO 8601 (YYYY-MM-DD)
     format."""
    value_date: Optional[datetime.date] = rest_field(
        name="valueDate", visibility=["read", "create", "update", "delete", "query"]
    )
    """Date field value, in ISO 8601 (YYYY-MM-DD) format."""

    @overload
    def __init__(
        self,
        *,
        type: str,
        spans: Optional[list["_models.ContentSpan"]] = None,
        confidence: Optional[float] = None,
        source: Optional[str] = None,
        value_date: Optional[datetime.date] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.field_type = ContentFieldType.DATE  # type: ignore


class DetectedBoundingBox(_Model):
    """Detected bounding box of an object.

    :ivar bounding_box: Bounding box of the detected face.
    :vartype bounding_box: ~azure.ai.contentunderstanding.models.BoundingBox
    """

    bounding_box: Optional["_models.BoundingBox"] = rest_field(
        name="boundingBox", visibility=["read", "create", "update", "delete", "query"]
    )
    """Bounding box of the detected face."""

    @overload
    def __init__(
        self,
        *,
        bounding_box: Optional["_models.BoundingBox"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DetectedPerson(_Model):
    """Detected person.

    :ivar person_id: Person identifier in the optional person directory if found.  Otherwise, each
     unknown person is assigned a unique ``Person-{Number}``.
    :vartype person_id: str
    :ivar confidence: Confidence of the person identification, if a person directory is provided.
    :vartype confidence: float
    :ivar source: Encoded source that identifies the position of the person in the input content.
    :vartype source: str
    """

    person_id: Optional[str] = rest_field(name="personId", visibility=["read", "create", "update", "delete", "query"])
    """Person identifier in the optional person directory if found.  Otherwise, each unknown person is
     assigned a unique ``Person-{Number}``."""
    confidence: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Confidence of the person identification, if a person directory is provided."""
    source: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Encoded source that identifies the position of the person in the input content."""

    @overload
    def __init__(
        self,
        *,
        person_id: Optional[str] = None,
        confidence: Optional[float] = None,
        source: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DetectFacesResult(_Model):
    """Detect faces response.

    :ivar detected_faces: List of detected faces. Required.
    :vartype detected_faces: list[~azure.ai.contentunderstanding.models.DetectedBoundingBox]
    """

    detected_faces: list["_models.DetectedBoundingBox"] = rest_field(
        name="detectedFaces", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of detected faces. Required."""

    @overload
    def __init__(
        self,
        *,
        detected_faces: list["_models.DetectedBoundingBox"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DocumentBarcode(_Model):
    """Barcode in a document.

    :ivar kind: Barcode kind. Required. Known values are: "QRCode", "PDF417", "UPCA", "UPCE",
     "Code39", "Code128", "EAN8", "EAN13", "DataBar", "Code93", "Codabar", "DataBarExpanded", "ITF",
     "MicroQRCode", "Aztec", "DataMatrix", and "MaxiCode".
    :vartype kind: str or ~azure.ai.contentunderstanding.models.DocumentBarcodeKind
    :ivar value: Barcode value. Required.
    :vartype value: str
    :ivar source: Encoded source that identifies the position of the barcode in the content.
    :vartype source: str
    :ivar span: Span of the barcode in the markdown content.
    :vartype span: ~azure.ai.contentunderstanding.models.ContentSpan
    :ivar confidence: Confidence of predicting the barcode.
    :vartype confidence: float
    """

    kind: Union[str, "_models.DocumentBarcodeKind"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Barcode kind. Required. Known values are: \"QRCode\", \"PDF417\", \"UPCA\", \"UPCE\",
     \"Code39\", \"Code128\", \"EAN8\", \"EAN13\", \"DataBar\", \"Code93\", \"Codabar\",
     \"DataBarExpanded\", \"ITF\", \"MicroQRCode\", \"Aztec\", \"DataMatrix\", and \"MaxiCode\"."""
    value: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Barcode value. Required."""
    source: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Encoded source that identifies the position of the barcode in the content."""
    span: Optional["_models.ContentSpan"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Span of the barcode in the markdown content."""
    confidence: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Confidence of predicting the barcode."""

    @overload
    def __init__(
        self,
        *,
        kind: Union[str, "_models.DocumentBarcodeKind"],
        value: str,
        source: Optional[str] = None,
        span: Optional["_models.ContentSpan"] = None,
        confidence: Optional[float] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DocumentCaption(_Model):
    """Caption of a table or figure.

    :ivar content: Content of the caption. Required.
    :vartype content: str
    :ivar source: Encoded source that identifies the position of the caption in the content.
    :vartype source: str
    :ivar span: Span of the caption in the markdown content.
    :vartype span: ~azure.ai.contentunderstanding.models.ContentSpan
    :ivar elements: Child elements of the caption.
    :vartype elements: list[str]
    """

    content: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Content of the caption. Required."""
    source: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Encoded source that identifies the position of the caption in the content."""
    span: Optional["_models.ContentSpan"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Span of the caption in the markdown content."""
    elements: Optional[list[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Child elements of the caption."""

    @overload
    def __init__(
        self,
        *,
        content: str,
        source: Optional[str] = None,
        span: Optional["_models.ContentSpan"] = None,
        elements: Optional[list[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DocumentContent(MediaContent, discriminator="document"):
    """Document content.  Ex. text/plain, application/pdf, image/jpeg.

    :ivar mime_type: Detected MIME type of the content.  Ex. application/pdf, image/jpeg, etc.
    :vartype mime_type: str
    :ivar category: Classified content category.
    :vartype category: str
    :ivar path: The path of the content in the input.
    :vartype path: str
    :ivar markdown: Markdown representation of the content.
    :vartype markdown: str
    :ivar fields: Extracted fields from the content.
    :vartype fields: dict[str, ~azure.ai.contentunderstanding.models.ContentField]
    :ivar kind: Content kind. Required. Document content, such as pdf, image, txt, etc.
    :vartype kind: str or ~azure.ai.contentunderstanding.models.DOCUMENT
    :ivar start_page_number: Start page number (1-indexed) of the content. Required.
    :vartype start_page_number: int
    :ivar end_page_number: End page number (1-indexed) of the content. Required.
    :vartype end_page_number: int
    :ivar unit: Length unit used by the width, height, and source properties.
     For images/tiff, the default unit is pixel.  For PDF, the default unit is inch. Known values
     are: "pixel" and "inch".
    :vartype unit: str or ~azure.ai.contentunderstanding.models.LengthUnit
    :ivar pages: List of pages in the document.
    :vartype pages: list[~azure.ai.contentunderstanding.models.DocumentPage]
    :ivar paragraphs: List of paragraphs in the document.  Only if enableOcr and returnDetails are
     true.
    :vartype paragraphs: list[~azure.ai.contentunderstanding.models.DocumentParagraph]
    :ivar sections: List of sections in the document.  Only if enableLayout and returnDetails are
     true.
    :vartype sections: list[~azure.ai.contentunderstanding.models.DocumentSection]
    :ivar tables: List of tables in the document.  Only if enableLayout and returnDetails are true.
    :vartype tables: list[~azure.ai.contentunderstanding.models.DocumentTable]
    :ivar figures: List of figures in the document.  Only if enableLayout and returnDetails are
     true.
    :vartype figures: list[~azure.ai.contentunderstanding.models.DocumentFigure]
    :ivar persons: List of detected persons in the document.  Only if enableFace and returnDetails
     are true.
    :vartype persons: list[~azure.ai.contentunderstanding.models.DetectedPerson]
    """

    kind: Literal[MediaContentKind.DOCUMENT] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Content kind. Required. Document content, such as pdf, image, txt, etc."""
    start_page_number: int = rest_field(
        name="startPageNumber", visibility=["read", "create", "update", "delete", "query"]
    )
    """Start page number (1-indexed) of the content. Required."""
    end_page_number: int = rest_field(name="endPageNumber", visibility=["read", "create", "update", "delete", "query"])
    """End page number (1-indexed) of the content. Required."""
    unit: Optional[Union[str, "_models.LengthUnit"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Length unit used by the width, height, and source properties.
     For images/tiff, the default unit is pixel.  For PDF, the default unit is inch. Known values
     are: \"pixel\" and \"inch\"."""
    pages: Optional[list["_models.DocumentPage"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of pages in the document."""
    paragraphs: Optional[list["_models.DocumentParagraph"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of paragraphs in the document.  Only if enableOcr and returnDetails are true."""
    sections: Optional[list["_models.DocumentSection"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of sections in the document.  Only if enableLayout and returnDetails are true."""
    tables: Optional[list["_models.DocumentTable"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of tables in the document.  Only if enableLayout and returnDetails are true."""
    figures: Optional[list["_models.DocumentFigure"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of figures in the document.  Only if enableLayout and returnDetails are true."""
    persons: Optional[list["_models.DetectedPerson"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of detected persons in the document.  Only if enableFace and returnDetails are true."""

    @overload
    def __init__(
        self,
        *,
        start_page_number: int,
        end_page_number: int,
        mime_type: Optional[str] = None,
        category: Optional[str] = None,
        path: Optional[str] = None,
        markdown: Optional[str] = None,
        fields: Optional[dict[str, "_models.ContentField"]] = None,
        unit: Optional[Union[str, "_models.LengthUnit"]] = None,
        pages: Optional[list["_models.DocumentPage"]] = None,
        paragraphs: Optional[list["_models.DocumentParagraph"]] = None,
        sections: Optional[list["_models.DocumentSection"]] = None,
        tables: Optional[list["_models.DocumentTable"]] = None,
        figures: Optional[list["_models.DocumentFigure"]] = None,
        persons: Optional[list["_models.DetectedPerson"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind = MediaContentKind.DOCUMENT  # type: ignore


class DocumentFigure(_Model):
    """Figure in a document.

    :ivar id: Figure identifier. Required.
    :vartype id: str
    :ivar source: Encoded source that identifies the position of the figure in the content.
    :vartype source: str
    :ivar span: Span of the figure in the markdown content.
    :vartype span: ~azure.ai.contentunderstanding.models.ContentSpan
    :ivar elements: Child elements of the figure, excluding any caption or footnotes.
    :vartype elements: list[str]
    :ivar caption: Figure caption.
    :vartype caption: ~azure.ai.contentunderstanding.models.DocumentCaption
    :ivar footnotes: List of figure footnotes.
    :vartype footnotes: list[~azure.ai.contentunderstanding.models.DocumentFootnote]
    """

    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Figure identifier. Required."""
    source: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Encoded source that identifies the position of the figure in the content."""
    span: Optional["_models.ContentSpan"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Span of the figure in the markdown content."""
    elements: Optional[list[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Child elements of the figure, excluding any caption or footnotes."""
    caption: Optional["_models.DocumentCaption"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Figure caption."""
    footnotes: Optional[list["_models.DocumentFootnote"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of figure footnotes."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        source: Optional[str] = None,
        span: Optional["_models.ContentSpan"] = None,
        elements: Optional[list[str]] = None,
        caption: Optional["_models.DocumentCaption"] = None,
        footnotes: Optional[list["_models.DocumentFootnote"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DocumentFootnote(_Model):
    """Footnote of a table or figure.

    :ivar content: Content of the footnote. Required.
    :vartype content: str
    :ivar source: Encoded source that identifies the position of the footnote in the content.
    :vartype source: str
    :ivar span: Span of the footnote in the markdown content.
    :vartype span: ~azure.ai.contentunderstanding.models.ContentSpan
    :ivar elements: Child elements of the footnote.
    :vartype elements: list[str]
    """

    content: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Content of the footnote. Required."""
    source: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Encoded source that identifies the position of the footnote in the content."""
    span: Optional["_models.ContentSpan"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Span of the footnote in the markdown content."""
    elements: Optional[list[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Child elements of the footnote."""

    @overload
    def __init__(
        self,
        *,
        content: str,
        source: Optional[str] = None,
        span: Optional["_models.ContentSpan"] = None,
        elements: Optional[list[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DocumentFormula(_Model):
    """Mathematical formula in a document.

    :ivar kind: Formula kind. Required. Known values are: "inline" and "display".
    :vartype kind: str or ~azure.ai.contentunderstanding.models.DocumentFormulaKind
    :ivar value: LaTex expression describing the formula. Required.
    :vartype value: str
    :ivar source: Encoded source that identifies the position of the formula in the content.
    :vartype source: str
    :ivar span: Span of the formula in the markdown content.
    :vartype span: ~azure.ai.contentunderstanding.models.ContentSpan
    :ivar confidence: Confidence of predicting the formula.
    :vartype confidence: float
    """

    kind: Union[str, "_models.DocumentFormulaKind"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Formula kind. Required. Known values are: \"inline\" and \"display\"."""
    value: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """LaTex expression describing the formula. Required."""
    source: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Encoded source that identifies the position of the formula in the content."""
    span: Optional["_models.ContentSpan"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Span of the formula in the markdown content."""
    confidence: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Confidence of predicting the formula."""

    @overload
    def __init__(
        self,
        *,
        kind: Union[str, "_models.DocumentFormulaKind"],
        value: str,
        source: Optional[str] = None,
        span: Optional["_models.ContentSpan"] = None,
        confidence: Optional[float] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DocumentLine(_Model):
    """Line in a document, consisting of an contiguous sequence of words.

    :ivar content: Line text. Required.
    :vartype content: str
    :ivar source: Encoded source that identifies the position of the line in the content.
    :vartype source: str
    :ivar span: Span of the line in the markdown content.
    :vartype span: ~azure.ai.contentunderstanding.models.ContentSpan
    """

    content: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Line text. Required."""
    source: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Encoded source that identifies the position of the line in the content."""
    span: Optional["_models.ContentSpan"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Span of the line in the markdown content."""

    @overload
    def __init__(
        self,
        *,
        content: str,
        source: Optional[str] = None,
        span: Optional["_models.ContentSpan"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DocumentPage(_Model):
    """Content from a document page.

    :ivar page_number: Page number (1-based). Required.
    :vartype page_number: int
    :ivar width: Width of the page.
    :vartype width: float
    :ivar height: Height of the page.
    :vartype height: float
    :ivar spans: Span(s) associated with the page in the markdown content.
    :vartype spans: list[~azure.ai.contentunderstanding.models.ContentSpan]
    :ivar angle: The general orientation of the content in clockwise direction,
     measured in degrees between (-180, 180].
     Only if enableOcr is true.
    :vartype angle: float
    :ivar words: List of words in the page.  Only if enableOcr and returnDetails are true.
    :vartype words: list[~azure.ai.contentunderstanding.models.DocumentWord]
    :ivar lines: List of lines in the page.  Only if enableOcr and returnDetails are true.
    :vartype lines: list[~azure.ai.contentunderstanding.models.DocumentLine]
    :ivar barcodes: List of barcodes in the page.  Only if enableBarcode and returnDetails are
     true.
    :vartype barcodes: list[~azure.ai.contentunderstanding.models.DocumentBarcode]
    :ivar formulas: List of mathematical formulas in the page.  Only if enableFormula and
     returnDetails are true.
    :vartype formulas: list[~azure.ai.contentunderstanding.models.DocumentFormula]
    """

    page_number: int = rest_field(name="pageNumber", visibility=["read", "create", "update", "delete", "query"])
    """Page number (1-based). Required."""
    width: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Width of the page."""
    height: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Height of the page."""
    spans: Optional[list["_models.ContentSpan"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Span(s) associated with the page in the markdown content."""
    angle: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The general orientation of the content in clockwise direction,
     measured in degrees between (-180, 180].
     Only if enableOcr is true."""
    words: Optional[list["_models.DocumentWord"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of words in the page.  Only if enableOcr and returnDetails are true."""
    lines: Optional[list["_models.DocumentLine"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of lines in the page.  Only if enableOcr and returnDetails are true."""
    barcodes: Optional[list["_models.DocumentBarcode"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of barcodes in the page.  Only if enableBarcode and returnDetails are true."""
    formulas: Optional[list["_models.DocumentFormula"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of mathematical formulas in the page.  Only if enableFormula and returnDetails are true."""

    @overload
    def __init__(
        self,
        *,
        page_number: int,
        width: Optional[float] = None,
        height: Optional[float] = None,
        spans: Optional[list["_models.ContentSpan"]] = None,
        angle: Optional[float] = None,
        words: Optional[list["_models.DocumentWord"]] = None,
        lines: Optional[list["_models.DocumentLine"]] = None,
        barcodes: Optional[list["_models.DocumentBarcode"]] = None,
        formulas: Optional[list["_models.DocumentFormula"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DocumentParagraph(_Model):
    """Paragraph in a document, generally consisting of an contiguous sequence of lines
    with common alignment and spacing.

    :ivar role: Semantic role of the paragraph. Known values are: "pageHeader", "pageFooter",
     "pageNumber", "title", "sectionHeading", "footnote", and "formulaBlock".
    :vartype role: str or ~azure.ai.contentunderstanding.models.ParagraphRole
    :ivar content: Paragraph text. Required.
    :vartype content: str
    :ivar source: Encoded source that identifies the position of the paragraph in the content.
    :vartype source: str
    :ivar span: Span of the paragraph in the markdown content.
    :vartype span: ~azure.ai.contentunderstanding.models.ContentSpan
    """

    role: Optional[Union[str, "_models.ParagraphRole"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Semantic role of the paragraph. Known values are: \"pageHeader\", \"pageFooter\",
     \"pageNumber\", \"title\", \"sectionHeading\", \"footnote\", and \"formulaBlock\"."""
    content: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Paragraph text. Required."""
    source: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Encoded source that identifies the position of the paragraph in the content."""
    span: Optional["_models.ContentSpan"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Span of the paragraph in the markdown content."""

    @overload
    def __init__(
        self,
        *,
        content: str,
        role: Optional[Union[str, "_models.ParagraphRole"]] = None,
        source: Optional[str] = None,
        span: Optional["_models.ContentSpan"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DocumentSection(_Model):
    """Section in a document.

    :ivar span: Span of the section in the markdown content.
    :vartype span: ~azure.ai.contentunderstanding.models.ContentSpan
    :ivar elements: Child elements of the section.
    :vartype elements: list[str]
    """

    span: Optional["_models.ContentSpan"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Span of the section in the markdown content."""
    elements: Optional[list[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Child elements of the section."""

    @overload
    def __init__(
        self,
        *,
        span: Optional["_models.ContentSpan"] = None,
        elements: Optional[list[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DocumentTable(_Model):
    """Table in a document, consisting table cells arranged in a rectangular layout.

    :ivar row_count: Number of rows in the table. Required.
    :vartype row_count: int
    :ivar column_count: Number of columns in the table. Required.
    :vartype column_count: int
    :ivar cells: Cells contained within the table. Required.
    :vartype cells: list[~azure.ai.contentunderstanding.models.DocumentTableCell]
    :ivar source: Encoded source that identifies the position of the table in the content.
    :vartype source: str
    :ivar span: Span of the table in the markdown content.
    :vartype span: ~azure.ai.contentunderstanding.models.ContentSpan
    :ivar caption: Table caption.
    :vartype caption: ~azure.ai.contentunderstanding.models.DocumentCaption
    :ivar footnotes: List of table footnotes.
    :vartype footnotes: list[~azure.ai.contentunderstanding.models.DocumentFootnote]
    """

    row_count: int = rest_field(name="rowCount", visibility=["read", "create", "update", "delete", "query"])
    """Number of rows in the table. Required."""
    column_count: int = rest_field(name="columnCount", visibility=["read", "create", "update", "delete", "query"])
    """Number of columns in the table. Required."""
    cells: list["_models.DocumentTableCell"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Cells contained within the table. Required."""
    source: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Encoded source that identifies the position of the table in the content."""
    span: Optional["_models.ContentSpan"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Span of the table in the markdown content."""
    caption: Optional["_models.DocumentCaption"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Table caption."""
    footnotes: Optional[list["_models.DocumentFootnote"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of table footnotes."""

    @overload
    def __init__(
        self,
        *,
        row_count: int,
        column_count: int,
        cells: list["_models.DocumentTableCell"],
        source: Optional[str] = None,
        span: Optional["_models.ContentSpan"] = None,
        caption: Optional["_models.DocumentCaption"] = None,
        footnotes: Optional[list["_models.DocumentFootnote"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DocumentTableCell(_Model):
    """Table cell in a document table.

    :ivar kind: Table cell kind. Known values are: "content", "rowHeader", "columnHeader",
     "stubHead", and "description".
    :vartype kind: str or ~azure.ai.contentunderstanding.models.DocumentTableCellKind
    :ivar row_index: Row index of the cell. Required.
    :vartype row_index: int
    :ivar column_index: Column index of the cell. Required.
    :vartype column_index: int
    :ivar row_span: Number of rows spanned by this cell.
    :vartype row_span: int
    :ivar column_span: Number of columns spanned by this cell.
    :vartype column_span: int
    :ivar content: Content of the table cell. Required.
    :vartype content: str
    :ivar source: Encoded source that identifies the position of the table cell in the content.
    :vartype source: str
    :ivar span: Span of the table cell in the markdown content.
    :vartype span: ~azure.ai.contentunderstanding.models.ContentSpan
    :ivar elements: Child elements of the table cell.
    :vartype elements: list[str]
    """

    kind: Optional[Union[str, "_models.DocumentTableCellKind"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Table cell kind. Known values are: \"content\", \"rowHeader\", \"columnHeader\", \"stubHead\",
     and \"description\"."""
    row_index: int = rest_field(name="rowIndex", visibility=["read", "create", "update", "delete", "query"])
    """Row index of the cell. Required."""
    column_index: int = rest_field(name="columnIndex", visibility=["read", "create", "update", "delete", "query"])
    """Column index of the cell. Required."""
    row_span: Optional[int] = rest_field(name="rowSpan", visibility=["read", "create", "update", "delete", "query"])
    """Number of rows spanned by this cell."""
    column_span: Optional[int] = rest_field(
        name="columnSpan", visibility=["read", "create", "update", "delete", "query"]
    )
    """Number of columns spanned by this cell."""
    content: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Content of the table cell. Required."""
    source: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Encoded source that identifies the position of the table cell in the content."""
    span: Optional["_models.ContentSpan"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Span of the table cell in the markdown content."""
    elements: Optional[list[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Child elements of the table cell."""

    @overload
    def __init__(
        self,
        *,
        row_index: int,
        column_index: int,
        content: str,
        kind: Optional[Union[str, "_models.DocumentTableCellKind"]] = None,
        row_span: Optional[int] = None,
        column_span: Optional[int] = None,
        source: Optional[str] = None,
        span: Optional["_models.ContentSpan"] = None,
        elements: Optional[list[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DocumentWord(_Model):
    """Word in a document, consisting of a contiguous sequence of characters.
    For non-space delimited languages, such as Chinese, Japanese, and Korean,
    each character is represented as its own word.

    :ivar content: Word text. Required.
    :vartype content: str
    :ivar source: Encoded source that identifies the position of the word in the content.
    :vartype source: str
    :ivar span: Span of the word in the markdown content.
    :vartype span: ~azure.ai.contentunderstanding.models.ContentSpan
    :ivar confidence: Confidence of predicting the word.
    :vartype confidence: float
    """

    content: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Word text. Required."""
    source: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Encoded source that identifies the position of the word in the content."""
    span: Optional["_models.ContentSpan"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Span of the word in the markdown content."""
    confidence: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Confidence of predicting the word."""

    @overload
    def __init__(
        self,
        *,
        content: str,
        source: Optional[str] = None,
        span: Optional["_models.ContentSpan"] = None,
        confidence: Optional[float] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FaceSource(_Model):
    """Input face source with an optional target bounding box.  If not specified, the largest face
    will be used.

    :ivar url: Image URL.  Only one of url or data should be specified.
    :vartype url: str
    :ivar data: Raw image bytes. Provide bytes-like object; do not base64-encode. Only one of url
     or data should be specified.
    :vartype data: bytes
    :ivar image_reference_id: User provided identifier for the source image.
    :vartype image_reference_id: str
    :ivar target_bounding_box: Bounding box specifying the region of interest.
    :vartype target_bounding_box: ~azure.ai.contentunderstanding.models.BoundingBox
    """

    url: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Image URL.  Only one of url or data should be specified."""
    data: Optional[bytes] = rest_field(visibility=["read", "create", "update", "delete", "query"], format="base64")
    """Raw image bytes. Provide bytes-like object; do not base64-encode. Only one of url or data
     should be specified."""
    image_reference_id: Optional[str] = rest_field(
        name="imageReferenceId", visibility=["read", "create", "update", "delete", "query"]
    )
    """User provided identifier for the source image."""
    target_bounding_box: Optional["_models.BoundingBox"] = rest_field(
        name="targetBoundingBox", visibility=["read", "create", "update", "delete", "query"]
    )
    """Bounding box specifying the region of interest."""

    @overload
    def __init__(
        self,
        *,
        url: Optional[str] = None,
        data: Optional[bytes] = None,
        image_reference_id: Optional[str] = None,
        target_bounding_box: Optional["_models.BoundingBox"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class FindSimilarFacesResult(_Model):
    """Find similar faces response.

    :ivar detected_face: Details of the detected face. Required.
    :vartype detected_face: ~azure.ai.contentunderstanding.models.DetectedBoundingBox
    :ivar similar_faces: List of similar faces. Required.
    :vartype similar_faces: list[~azure.ai.contentunderstanding.models.SimilarFace]
    """

    detected_face: "_models.DetectedBoundingBox" = rest_field(
        name="detectedFace", visibility=["read", "create", "update", "delete", "query"]
    )
    """Details of the detected face. Required."""
    similar_faces: list["_models.SimilarFace"] = rest_field(
        name="similarFaces", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of similar faces. Required."""

    @overload
    def __init__(
        self,
        *,
        detected_face: "_models.DetectedBoundingBox",
        similar_faces: list["_models.SimilarFace"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class IdentifyPersonResult(_Model):
    """Identify person response.

    :ivar detected_face: Details of the detected face. Required.
    :vartype detected_face: ~azure.ai.contentunderstanding.models.DetectedBoundingBox
    :ivar person_candidates: List of person candidates matching the input face. Required.
    :vartype person_candidates: list[~azure.ai.contentunderstanding.models.PersonCandidate]
    """

    detected_face: "_models.DetectedBoundingBox" = rest_field(
        name="detectedFace", visibility=["read", "create", "update", "delete", "query"]
    )
    """Details of the detected face. Required."""
    person_candidates: list["_models.PersonCandidate"] = rest_field(
        name="personCandidates", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of person candidates matching the input face. Required."""

    @overload
    def __init__(
        self,
        *,
        detected_face: "_models.DetectedBoundingBox",
        person_candidates: list["_models.PersonCandidate"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class IntegerField(ContentField, discriminator="integer"):
    """Integer field extracted from the content.

    :ivar type: Semantic data type of the field value. Required. Known values are: "string",
     "date", "time", "number", "integer", "boolean", "array", and "object".
    :vartype type: str or ~azure.ai.contentunderstanding.models.ContentFieldType
    :ivar spans: Span(s) associated with the field value in the markdown content.
    :vartype spans: list[~azure.ai.contentunderstanding.models.ContentSpan]
    :ivar confidence: Confidence of predicting the field value.
    :vartype confidence: float
    :ivar source: Encoded source that identifies the position of the field value in the content.
    :vartype source: str
    :ivar field_type: Semantic data type of the field value. Required. Integer as 64-bit signed
     integer.
    :vartype field_type: str or ~azure.ai.contentunderstanding.models.INTEGER
    :ivar value_integer: Integer field value.
    :vartype value_integer: int
    """

    __mapping__: dict[str, _Model] = {}
    type: str = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])
    """Semantic data type of the field value. Required. Known values are: \"string\", \"date\",
     \"time\", \"number\", \"integer\", \"boolean\", \"array\", and \"object\"."""
    field_type: Literal[ContentFieldType.INTEGER] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Semantic data type of the field value. Required. Integer as 64-bit signed integer."""
    value_integer: Optional[int] = rest_field(
        name="valueInteger", visibility=["read", "create", "update", "delete", "query"]
    )
    """Integer field value."""

    @overload
    def __init__(
        self,
        *,
        type: str,
        spans: Optional[list["_models.ContentSpan"]] = None,
        confidence: Optional[float] = None,
        source: Optional[str] = None,
        value_integer: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.field_type = ContentFieldType.INTEGER  # type: ignore


class KnowledgeSource(_Model):
    """Knowledge source.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    ReferenceKnowledgeSource

    :ivar kind: The kind of knowledge source. Required. "reference"
    :vartype kind: str or ~azure.ai.contentunderstanding.models.KnowledgeSourceKind
    """

    __mapping__: dict[str, _Model] = {}
    kind: str = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])
    """The kind of knowledge source. Required. \"reference\""""

    @overload
    def __init__(
        self,
        *,
        kind: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NumberField(ContentField, discriminator="number"):
    """Number field extracted from the content.

    :ivar type: Semantic data type of the field value. Required. Known values are: "string",
     "date", "time", "number", "integer", "boolean", "array", and "object".
    :vartype type: str or ~azure.ai.contentunderstanding.models.ContentFieldType
    :ivar spans: Span(s) associated with the field value in the markdown content.
    :vartype spans: list[~azure.ai.contentunderstanding.models.ContentSpan]
    :ivar confidence: Confidence of predicting the field value.
    :vartype confidence: float
    :ivar source: Encoded source that identifies the position of the field value in the content.
    :vartype source: str
    :ivar field_type: Semantic data type of the field value. Required. Number as double precision
     floating point.
    :vartype field_type: str or ~azure.ai.contentunderstanding.models.NUMBER
    :ivar value_number: Number field value.
    :vartype value_number: float
    """

    __mapping__: dict[str, _Model] = {}
    type: str = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])
    """Semantic data type of the field value. Required. Known values are: \"string\", \"date\",
     \"time\", \"number\", \"integer\", \"boolean\", \"array\", and \"object\"."""
    field_type: Literal[ContentFieldType.NUMBER] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Semantic data type of the field value. Required. Number as double precision floating point."""
    value_number: Optional[float] = rest_field(
        name="valueNumber", visibility=["read", "create", "update", "delete", "query"]
    )
    """Number field value."""

    @overload
    def __init__(
        self,
        *,
        type: str,
        spans: Optional[list["_models.ContentSpan"]] = None,
        confidence: Optional[float] = None,
        source: Optional[str] = None,
        value_number: Optional[float] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.field_type = ContentFieldType.NUMBER  # type: ignore


class ObjectField(ContentField, discriminator="object"):
    """Object field extracted from the content.

    :ivar type: Semantic data type of the field value. Required. Known values are: "string",
     "date", "time", "number", "integer", "boolean", "array", and "object".
    :vartype type: str or ~azure.ai.contentunderstanding.models.ContentFieldType
    :ivar spans: Span(s) associated with the field value in the markdown content.
    :vartype spans: list[~azure.ai.contentunderstanding.models.ContentSpan]
    :ivar confidence: Confidence of predicting the field value.
    :vartype confidence: float
    :ivar source: Encoded source that identifies the position of the field value in the content.
    :vartype source: str
    :ivar field_type: Semantic data type of the field value. Required. Named list of subfields.
    :vartype field_type: str or ~azure.ai.contentunderstanding.models.OBJECT
    :ivar value_object: Object field value.
    :vartype value_object: dict[str, ~azure.ai.contentunderstanding.models.ContentField]
    """

    __mapping__: dict[str, _Model] = {}
    type: str = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])
    """Semantic data type of the field value. Required. Known values are: \"string\", \"date\",
     \"time\", \"number\", \"integer\", \"boolean\", \"array\", and \"object\"."""
    field_type: Literal[ContentFieldType.OBJECT] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Semantic data type of the field value. Required. Named list of subfields."""
    value_object: Optional[dict[str, "_models.ContentField"]] = rest_field(
        name="valueObject", visibility=["read", "create", "update", "delete", "query"]
    )
    """Object field value."""

    @overload
    def __init__(
        self,
        *,
        type: str,
        spans: Optional[list["_models.ContentSpan"]] = None,
        confidence: Optional[float] = None,
        source: Optional[str] = None,
        value_object: Optional[dict[str, "_models.ContentField"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.field_type = ContentFieldType.OBJECT  # type: ignore


class OperationStatusAnalyzeResultError(_Model):
    """Provides status details for long running operations.

    :ivar id: The unique ID of the operation. Required.
    :vartype id: str
    :ivar status: The status of the operation. Required. Known values are: "NotStarted", "Running",
     "Succeeded", "Failed", and "Canceled".
    :vartype status: str or ~azure.ai.contentunderstanding.models.OperationState
    :ivar error: Error object that describes the error when status is "Failed".
    :vartype error: ~azure.core.ODataV4Format
    :ivar result: The result of the operation.
    :vartype result: ~azure.ai.contentunderstanding.models.AnalyzeResult
    """

    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The unique ID of the operation. Required."""
    status: Union[str, "_models.OperationState"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The status of the operation. Required. Known values are: \"NotStarted\", \"Running\",
     \"Succeeded\", \"Failed\", and \"Canceled\"."""
    error: Optional[ODataV4Format] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Error object that describes the error when status is \"Failed\"."""
    result: Optional["_models.AnalyzeResult"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The result of the operation."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        status: Union[str, "_models.OperationState"],
        error: Optional[ODataV4Format] = None,
        result: Optional["_models.AnalyzeResult"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationStatusClassifyResultError(_Model):
    """Provides status details for long running operations.

    :ivar id: The unique ID of the operation. Required.
    :vartype id: str
    :ivar status: The status of the operation. Required. Known values are: "NotStarted", "Running",
     "Succeeded", "Failed", and "Canceled".
    :vartype status: str or ~azure.ai.contentunderstanding.models.OperationState
    :ivar error: Error object that describes the error when status is "Failed".
    :vartype error: ~azure.core.ODataV4Format
    :ivar result: The result of the operation.
    :vartype result: ~azure.ai.contentunderstanding.models.ClassifyResult
    """

    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The unique ID of the operation. Required."""
    status: Union[str, "_models.OperationState"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The status of the operation. Required. Known values are: \"NotStarted\", \"Running\",
     \"Succeeded\", \"Failed\", and \"Canceled\"."""
    error: Optional[ODataV4Format] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Error object that describes the error when status is \"Failed\"."""
    result: Optional["_models.ClassifyResult"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The result of the operation."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        status: Union[str, "_models.OperationState"],
        error: Optional[ODataV4Format] = None,
        result: Optional["_models.ClassifyResult"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PersonCandidate(_Model):
    """Identified person candidate.

    :ivar person_id: The unique identifier of the person. Required.
    :vartype person_id: str
    :ivar tags: Tags associated with the person.
    :vartype tags: dict[str, str]
    :ivar confidence: Confidence score of the person matching the input face. Required.
    :vartype confidence: float
    """

    person_id: str = rest_field(name="personId", visibility=["read", "create", "update", "delete", "query"])
    """The unique identifier of the person. Required."""
    tags: Optional[dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Tags associated with the person."""
    confidence: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Confidence score of the person matching the input face. Required."""

    @overload
    def __init__(
        self,
        *,
        person_id: str,
        confidence: float,
        tags: Optional[dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PersonDirectory(_Model):
    """Directory of people and their faces.

    :ivar person_directory_id: The unique identifier of the person directory. Required.
    :vartype person_directory_id: str
    :ivar description: A description of the person directory.
    :vartype description: str
    :ivar tags: Tags associated with the person directory.
    :vartype tags: dict[str, str]
    :ivar created_at: The date and time when the person directory was created. Required.
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_at: The date and time when the person directory was last modified.
     Required.
    :vartype last_modified_at: ~datetime.datetime
    :ivar person_count: Number of people in the person directory. Required.
    :vartype person_count: int
    :ivar face_count: Number of faces in the person directory. Required.
    :vartype face_count: int
    """

    person_directory_id: str = rest_field(name="personDirectoryId", visibility=["read"])
    """The unique identifier of the person directory. Required."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A description of the person directory."""
    tags: Optional[dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Tags associated with the person directory."""
    created_at: datetime.datetime = rest_field(name="createdAt", visibility=["read"], format="rfc3339")
    """The date and time when the person directory was created. Required."""
    last_modified_at: datetime.datetime = rest_field(name="lastModifiedAt", visibility=["read"], format="rfc3339")
    """The date and time when the person directory was last modified. Required."""
    person_count: int = rest_field(name="personCount", visibility=["read"])
    """Number of people in the person directory. Required."""
    face_count: int = rest_field(name="faceCount", visibility=["read"])
    """Number of faces in the person directory. Required."""

    @overload
    def __init__(
        self,
        *,
        description: Optional[str] = None,
        tags: Optional[dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PersonDirectoryFace(_Model):
    """Face in a person directory.

    :ivar face_id: The unique identifier of the face. Required.
    :vartype face_id: str
    :ivar person_id: Person associated with the face, if any.
    :vartype person_id: str
    :ivar image_reference_id: User provided identifier for the source image.
    :vartype image_reference_id: str
    :ivar bounding_box: Bounding box of the face in the source image.
    :vartype bounding_box: ~azure.ai.contentunderstanding.models.BoundingBox
    """

    face_id: str = rest_field(name="faceId", visibility=["read"])
    """The unique identifier of the face. Required."""
    person_id: Optional[str] = rest_field(name="personId", visibility=["read", "create", "update", "delete", "query"])
    """Person associated with the face, if any."""
    image_reference_id: Optional[str] = rest_field(name="imageReferenceId", visibility=["read"])
    """User provided identifier for the source image."""
    bounding_box: Optional["_models.BoundingBox"] = rest_field(name="boundingBox", visibility=["read"])
    """Bounding box of the face in the source image."""

    @overload
    def __init__(
        self,
        *,
        person_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PersonDirectoryPerson(_Model):
    """Person in a person directory.

    :ivar person_id: The unique identifier of the person. Required.
    :vartype person_id: str
    :ivar tags: Tags associated with the person.
    :vartype tags: dict[str, str]
    :ivar face_ids: List of faces associated with the person.
    :vartype face_ids: list[str]
    """

    person_id: str = rest_field(name="personId", visibility=["read"])
    """The unique identifier of the person. Required."""
    tags: Optional[dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Tags associated with the person."""
    face_ids: Optional[list[str]] = rest_field(
        name="faceIds", visibility=["read", "create", "update", "delete", "query"]
    )
    """List of faces associated with the person."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[dict[str, str]] = None,
        face_ids: Optional[list[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ReferenceKnowledgeSource(KnowledgeSource, discriminator="reference"):
    """File knowledge source.

    :ivar kind: Indicates that the knowledge source is a reference knowledge source. Required. A
     reference knowledge source.
    :vartype kind: str or ~azure.ai.contentunderstanding.models.REFERENCE
    :ivar container_url: The URL of the blob container. Required.
    :vartype container_url: str
    :ivar prefix: An optional prefix to filter blobs within the container.
    :vartype prefix: str
    :ivar file_list_path: Path to a file listing specific blobs to include. Required.
    :vartype file_list_path: str
    """

    kind: Literal[KnowledgeSourceKind.REFERENCE] = rest_discriminator(name="kind", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Indicates that the knowledge source is a reference knowledge source. Required. A reference
     knowledge source."""
    container_url: str = rest_field(name="containerUrl", visibility=["read", "create", "update", "delete", "query"])
    """The URL of the blob container. Required."""
    prefix: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """An optional prefix to filter blobs within the container."""
    file_list_path: str = rest_field(name="fileListPath", visibility=["read", "create", "update", "delete", "query"])
    """Path to a file listing specific blobs to include. Required."""

    @overload
    def __init__(
        self,
        *,
        container_url: str,
        file_list_path: str,
        prefix: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.kind = KnowledgeSourceKind.REFERENCE  # type: ignore


class ResourceOperationStatusContentAnalyzerContentAnalyzerError(_Model):  # pylint: disable=name-too-long
    """Provides status details for long running operations.

    :ivar id: The unique ID of the operation. Required.
    :vartype id: str
    :ivar status: The status of the operation. Required. Known values are: "NotStarted", "Running",
     "Succeeded", "Failed", and "Canceled".
    :vartype status: str or ~azure.ai.contentunderstanding.models.OperationState
    :ivar error: Error object that describes the error when status is "Failed".
    :vartype error: ~azure.core.ODataV4Format
    :ivar result: The result of the operation.
    :vartype result: ~azure.ai.contentunderstanding.models.ContentAnalyzer
    """

    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The unique ID of the operation. Required."""
    status: Union[str, "_models.OperationState"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The status of the operation. Required. Known values are: \"NotStarted\", \"Running\",
     \"Succeeded\", \"Failed\", and \"Canceled\"."""
    error: Optional[ODataV4Format] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Error object that describes the error when status is \"Failed\"."""
    result: Optional["_models.ContentAnalyzer"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The result of the operation."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        status: Union[str, "_models.OperationState"],
        error: Optional[ODataV4Format] = None,
        result: Optional["_models.ContentAnalyzer"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResourceOperationStatusContentClassifierContentClassifierError(_Model):  # pylint: disable=name-too-long
    """Provides status details for long running operations.

    :ivar id: The unique ID of the operation. Required.
    :vartype id: str
    :ivar status: The status of the operation. Required. Known values are: "NotStarted", "Running",
     "Succeeded", "Failed", and "Canceled".
    :vartype status: str or ~azure.ai.contentunderstanding.models.OperationState
    :ivar error: Error object that describes the error when status is "Failed".
    :vartype error: ~azure.core.ODataV4Format
    :ivar result: The result of the operation.
    :vartype result: ~azure.ai.contentunderstanding.models.ContentClassifier
    """

    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The unique ID of the operation. Required."""
    status: Union[str, "_models.OperationState"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The status of the operation. Required. Known values are: \"NotStarted\", \"Running\",
     \"Succeeded\", \"Failed\", and \"Canceled\"."""
    error: Optional[ODataV4Format] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Error object that describes the error when status is \"Failed\"."""
    result: Optional["_models.ContentClassifier"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The result of the operation."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        status: Union[str, "_models.OperationState"],
        error: Optional[ODataV4Format] = None,
        result: Optional["_models.ContentClassifier"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SimilarFace(_Model):
    """Similar face found in the person directory.

    :ivar face_id: The unique identifier of the face. Required.
    :vartype face_id: str
    :ivar person_id: Person associated with the face, if any.
    :vartype person_id: str
    :ivar image_reference_id: User provided identifier for the source image.
    :vartype image_reference_id: str
    :ivar bounding_box: Bounding box of the face in the source image.
    :vartype bounding_box: ~azure.ai.contentunderstanding.models.BoundingBox
    :ivar confidence: Confidence that this face matches the input face. Required.
    :vartype confidence: float
    """

    face_id: str = rest_field(name="faceId", visibility=["read"])
    """The unique identifier of the face. Required."""
    person_id: Optional[str] = rest_field(name="personId", visibility=["read", "create", "update", "delete", "query"])
    """Person associated with the face, if any."""
    image_reference_id: Optional[str] = rest_field(name="imageReferenceId", visibility=["read"])
    """User provided identifier for the source image."""
    bounding_box: Optional["_models.BoundingBox"] = rest_field(name="boundingBox", visibility=["read"])
    """Bounding box of the face in the source image."""
    confidence: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Confidence that this face matches the input face. Required."""

    @overload
    def __init__(
        self,
        *,
        confidence: float,
        person_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StringField(ContentField, discriminator="string"):
    """String field extracted from the content.

    :ivar type: Semantic data type of the field value. Required. Known values are: "string",
     "date", "time", "number", "integer", "boolean", "array", and "object".
    :vartype type: str or ~azure.ai.contentunderstanding.models.ContentFieldType
    :ivar spans: Span(s) associated with the field value in the markdown content.
    :vartype spans: list[~azure.ai.contentunderstanding.models.ContentSpan]
    :ivar confidence: Confidence of predicting the field value.
    :vartype confidence: float
    :ivar source: Encoded source that identifies the position of the field value in the content.
    :vartype source: str
    :ivar field_type: Semantic data type of the field value. Required. Plain text.
    :vartype field_type: str or ~azure.ai.contentunderstanding.models.STRING
    :ivar value_string: String field value.
    :vartype value_string: str
    """

    __mapping__: dict[str, _Model] = {}
    type: str = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])
    """Semantic data type of the field value. Required. Known values are: \"string\", \"date\",
     \"time\", \"number\", \"integer\", \"boolean\", \"array\", and \"object\"."""
    field_type: Literal[ContentFieldType.STRING] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Semantic data type of the field value. Required. Plain text."""
    value_string: Optional[str] = rest_field(
        name="valueString", visibility=["read", "create", "update", "delete", "query"]
    )
    """String field value."""

    @overload
    def __init__(
        self,
        *,
        type: str,
        spans: Optional[list["_models.ContentSpan"]] = None,
        confidence: Optional[float] = None,
        source: Optional[str] = None,
        value_string: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.field_type = ContentFieldType.STRING  # type: ignore


class TimeField(ContentField, discriminator="time"):
    """Time field extracted from the content.

    :ivar type: Semantic data type of the field value. Required. Known values are: "string",
     "date", "time", "number", "integer", "boolean", "array", and "object".
    :vartype type: str or ~azure.ai.contentunderstanding.models.ContentFieldType
    :ivar spans: Span(s) associated with the field value in the markdown content.
    :vartype spans: list[~azure.ai.contentunderstanding.models.ContentSpan]
    :ivar confidence: Confidence of predicting the field value.
    :vartype confidence: float
    :ivar source: Encoded source that identifies the position of the field value in the content.
    :vartype source: str
    :ivar field_type: Semantic data type of the field value. Required. Time, normalized to ISO 8601
     (hh:mm:ss) format.
    :vartype field_type: str or ~azure.ai.contentunderstanding.models.TIME
    :ivar value_time: Time field value, in ISO 8601 (hh:mm:ss) format.
    :vartype value_time: ~datetime.time
    """

    __mapping__: dict[str, _Model] = {}
    type: str = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])
    """Semantic data type of the field value. Required. Known values are: \"string\", \"date\",
     \"time\", \"number\", \"integer\", \"boolean\", \"array\", and \"object\"."""
    field_type: Literal[ContentFieldType.TIME] = rest_discriminator(name="type", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """Semantic data type of the field value. Required. Time, normalized to ISO 8601 (hh:mm:ss)
     format."""
    value_time: Optional[datetime.time] = rest_field(
        name="valueTime", visibility=["read", "create", "update", "delete", "query"]
    )
    """Time field value, in ISO 8601 (hh:mm:ss) format."""

    @overload
    def __init__(
        self,
        *,
        type: str,
        spans: Optional[list["_models.ContentSpan"]] = None,
        confidence: Optional[float] = None,
        source: Optional[str] = None,
        value_time: Optional[datetime.time] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
        self.field_type = ContentFieldType.TIME  # type: ignore


class TranscriptPhrase(_Model):
    """Transcript phrase.

    :ivar speaker: Speaker index or name.
    :vartype speaker: str
    :ivar start_time_ms: Start time of the phrase in milliseconds. Required.
    :vartype start_time_ms: int
    :ivar end_time_ms: End time of the phrase in milliseconds. Required.
    :vartype end_time_ms: int
    :ivar locale: Detected locale of the phrase.  Ex. en-US.
    :vartype locale: str
    :ivar text: Transcript text. Required.
    :vartype text: str
    :ivar confidence: Confidence of predicting the phrase.
    :vartype confidence: float
    :ivar span: Span of the phrase in the markdown content.
    :vartype span: ~azure.ai.contentunderstanding.models.ContentSpan
    :ivar words: List of words in the phrase. Required.
    :vartype words: list[~azure.ai.contentunderstanding.models.TranscriptWord]
    """

    speaker: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Speaker index or name."""
    start_time_ms: int = rest_field(name="startTimeMs", visibility=["read", "create", "update", "delete", "query"])
    """Start time of the phrase in milliseconds. Required."""
    end_time_ms: int = rest_field(name="endTimeMs", visibility=["read", "create", "update", "delete", "query"])
    """End time of the phrase in milliseconds. Required."""
    locale: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Detected locale of the phrase.  Ex. en-US."""
    text: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Transcript text. Required."""
    confidence: Optional[float] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Confidence of predicting the phrase."""
    span: Optional["_models.ContentSpan"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Span of the phrase in the markdown content."""
    words: list["_models.TranscriptWord"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of words in the phrase. Required."""

    @overload
    def __init__(
        self,
        *,
        start_time_ms: int,
        end_time_ms: int,
        text: str,
        words: list["_models.TranscriptWord"],
        speaker: Optional[str] = None,
        locale: Optional[str] = None,
        confidence: Optional[float] = None,
        span: Optional["_models.ContentSpan"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TranscriptWord(_Model):
    """Transcript word.

    :ivar start_time_ms: Start time of the word in milliseconds. Required.
    :vartype start_time_ms: int
    :ivar end_time_ms: End time of the word in milliseconds. Required.
    :vartype end_time_ms: int
    :ivar text: Transcript text. Required.
    :vartype text: str
    :ivar span: Span of the word in the markdown content.
    :vartype span: ~azure.ai.contentunderstanding.models.ContentSpan
    """

    start_time_ms: int = rest_field(name="startTimeMs", visibility=["read", "create", "update", "delete", "query"])
    """Start time of the word in milliseconds. Required."""
    end_time_ms: int = rest_field(name="endTimeMs", visibility=["read", "create", "update", "delete", "query"])
    """End time of the word in milliseconds. Required."""
    text: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Transcript text. Required."""
    span: Optional["_models.ContentSpan"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Span of the word in the markdown content."""

    @overload
    def __init__(
        self,
        *,
        start_time_ms: int,
        end_time_ms: int,
        text: str,
        span: Optional["_models.ContentSpan"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class VerifyPersonResult(_Model):
    """Verify person response.

    :ivar detected_face: Details of the detected face. Required.
    :vartype detected_face: ~azure.ai.contentunderstanding.models.DetectedBoundingBox
    :ivar confidence: Confidence score of the person verification. Required.
    :vartype confidence: float
    """

    detected_face: "_models.DetectedBoundingBox" = rest_field(
        name="detectedFace", visibility=["read", "create", "update", "delete", "query"]
    )
    """Details of the detected face. Required."""
    confidence: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Confidence score of the person verification. Required."""

    @overload
    def __init__(
        self,
        *,
        detected_face: "_models.DetectedBoundingBox",
        confidence: float,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
