# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import ContentUnderstandingPreparer
from testpreparer_async import ContentUnderstandingClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestContentUnderstandingContentClassifiersOperationsAsync(ContentUnderstandingClientTestBaseAsync):
    @ContentUnderstandingPreparer()
    @recorded_by_proxy_async
    async def test_content_classifiers_get_operation_status(self, contentunderstanding_endpoint):
        client = self.create_async_client(endpoint=contentunderstanding_endpoint)
        response = await client.content_classifiers.get_operation_status(
            classifier_id="str",
            operation_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy_async
    async def test_content_classifiers_begin_create_or_replace(self, contentunderstanding_endpoint):
        client = self.create_async_client(endpoint=contentunderstanding_endpoint)
        response = await (
            await client.content_classifiers.begin_create_or_replace(
                classifier_id="str",
                resource={
                    "categories": {"str": {"analyzerId": "str", "description": "str"}},
                    "classifierId": "str",
                    "createdAt": "2020-02-20 00:00:00",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "status": "str",
                    "description": "str",
                    "processingLocation": "str",
                    "splitMode": "str",
                    "tags": {"str": "str"},
                    "warnings": [~azure.core.ODataV4Format],
                },
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy_async
    async def test_content_classifiers_update(self, contentunderstanding_endpoint):
        client = self.create_async_client(endpoint=contentunderstanding_endpoint)
        response = await client.content_classifiers.update(
            classifier_id="str",
            resource={
                "categories": {"str": {"analyzerId": "str", "description": "str"}},
                "classifierId": "str",
                "createdAt": "2020-02-20 00:00:00",
                "lastModifiedAt": "2020-02-20 00:00:00",
                "status": "str",
                "description": "str",
                "processingLocation": "str",
                "splitMode": "str",
                "tags": {"str": "str"},
                "warnings": [~azure.core.ODataV4Format],
            },
        )

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy_async
    async def test_content_classifiers_get(self, contentunderstanding_endpoint):
        client = self.create_async_client(endpoint=contentunderstanding_endpoint)
        response = await client.content_classifiers.get(
            classifier_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy_async
    async def test_content_classifiers_delete(self, contentunderstanding_endpoint):
        client = self.create_async_client(endpoint=contentunderstanding_endpoint)
        response = await client.content_classifiers.delete(
            classifier_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy_async
    async def test_content_classifiers_list(self, contentunderstanding_endpoint):
        client = self.create_async_client(endpoint=contentunderstanding_endpoint)
        response = client.content_classifiers.list()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy_async
    async def test_content_classifiers_begin_classify(self, contentunderstanding_endpoint):
        client = self.create_async_client(endpoint=contentunderstanding_endpoint)
        response = await (
            await client.content_classifiers.begin_classify(
                classifier_id="str",
                body={"url": "str"},
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy_async
    async def test_content_classifiers_begin_classify_binary(self, contentunderstanding_endpoint):
        client = self.create_async_client(endpoint=contentunderstanding_endpoint)
        response = await (
            await client.content_classifiers.begin_classify_binary(
                classifier_id="str",
                input=bytes("bytes", encoding="utf-8"),
                content_type="str",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy_async
    async def test_content_classifiers_get_result(self, contentunderstanding_endpoint):
        client = self.create_async_client(endpoint=contentunderstanding_endpoint)
        response = await client.content_classifiers.get_result(
            operation_id="str",
        )

        # please add some check logic here by yourself
        # ...
