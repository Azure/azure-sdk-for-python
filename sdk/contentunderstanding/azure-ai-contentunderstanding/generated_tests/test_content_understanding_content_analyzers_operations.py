# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import ContentUnderstandingClientTestBase, ContentUnderstandingPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestContentUnderstandingContentAnalyzersOperations(ContentUnderstandingClientTestBase):
    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_content_analyzers_get_operation_status(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.content_analyzers.get_operation_status(
            analyzer_id="str",
            operation_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_content_analyzers_begin_create_or_replace(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.content_analyzers.begin_create_or_replace(
            analyzer_id="str",
            resource={
                "analyzerId": "str",
                "createdAt": "2020-02-20 00:00:00",
                "lastModifiedAt": "2020-02-20 00:00:00",
                "status": "str",
                "baseAnalyzerId": "str",
                "config": {
                    "disableContentFiltering": bool,
                    "disableFaceBlurring": bool,
                    "enableFace": bool,
                    "enableFormula": bool,
                    "enableLayout": bool,
                    "enableOcr": bool,
                    "estimateFieldSourceAndConfidence": bool,
                    "locales": ["str"],
                    "personDirectoryId": "str",
                    "returnDetails": bool,
                    "segmentationDefinition": "str",
                    "segmentationMode": "str",
                    "tableFormat": "str",
                },
                "description": "str",
                "fieldSchema": {
                    "fields": {
                        "str": {
                            "$ref": "str",
                            "description": "str",
                            "enum": ["str"],
                            "enumDescriptions": {"str": "str"},
                            "examples": ["str"],
                            "items": ...,
                            "method": "str",
                            "properties": {"str": ...},
                            "type": "str",
                        }
                    },
                    "definitions": {
                        "str": {
                            "$ref": "str",
                            "description": "str",
                            "enum": ["str"],
                            "enumDescriptions": {"str": "str"},
                            "examples": ["str"],
                            "items": ...,
                            "method": "str",
                            "properties": {"str": ...},
                            "type": "str",
                        }
                    },
                    "description": "str",
                    "name": "str",
                },
                "knowledgeSources": ["knowledge_source"],
                "mode": "str",
                "processingLocation": "str",
                "tags": {"str": "str"},
                "trainingData": "data_source",
                "warnings": [~azure.core.ODataV4Format],
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_content_analyzers_update(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.content_analyzers.update(
            analyzer_id="str",
            resource={
                "analyzerId": "str",
                "createdAt": "2020-02-20 00:00:00",
                "lastModifiedAt": "2020-02-20 00:00:00",
                "status": "str",
                "baseAnalyzerId": "str",
                "config": {
                    "disableContentFiltering": bool,
                    "disableFaceBlurring": bool,
                    "enableFace": bool,
                    "enableFormula": bool,
                    "enableLayout": bool,
                    "enableOcr": bool,
                    "estimateFieldSourceAndConfidence": bool,
                    "locales": ["str"],
                    "personDirectoryId": "str",
                    "returnDetails": bool,
                    "segmentationDefinition": "str",
                    "segmentationMode": "str",
                    "tableFormat": "str",
                },
                "description": "str",
                "fieldSchema": {
                    "fields": {
                        "str": {
                            "$ref": "str",
                            "description": "str",
                            "enum": ["str"],
                            "enumDescriptions": {"str": "str"},
                            "examples": ["str"],
                            "items": ...,
                            "method": "str",
                            "properties": {"str": ...},
                            "type": "str",
                        }
                    },
                    "definitions": {
                        "str": {
                            "$ref": "str",
                            "description": "str",
                            "enum": ["str"],
                            "enumDescriptions": {"str": "str"},
                            "examples": ["str"],
                            "items": ...,
                            "method": "str",
                            "properties": {"str": ...},
                            "type": "str",
                        }
                    },
                    "description": "str",
                    "name": "str",
                },
                "knowledgeSources": ["knowledge_source"],
                "mode": "str",
                "processingLocation": "str",
                "tags": {"str": "str"},
                "trainingData": "data_source",
                "warnings": [~azure.core.ODataV4Format],
            },
        )

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_content_analyzers_get(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.content_analyzers.get(
            analyzer_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_content_analyzers_delete(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.content_analyzers.delete(
            analyzer_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_content_analyzers_list(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.content_analyzers.list()
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_content_analyzers_begin_analyze(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.content_analyzers.begin_analyze(
            analyzer_id="str",
            body={
                "data": bytes("bytes", encoding="utf-8"),
                "inputs": [{"url": "str", "data": bytes("bytes", encoding="utf-8"), "name": "str"}],
                "url": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_content_analyzers_begin_analyze_binary(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.content_analyzers.begin_analyze_binary(
            analyzer_id="str",
            input=bytes("bytes", encoding="utf-8"),
            content_type="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_content_analyzers_get_result(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.content_analyzers.get_result(
            operation_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_content_analyzers_get_result_file(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.content_analyzers.get_result_file(
            operation_id="str",
            path="str",
        )

        # please add some check logic here by yourself
        # ...
