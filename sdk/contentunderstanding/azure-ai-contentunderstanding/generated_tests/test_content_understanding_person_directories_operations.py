# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import ContentUnderstandingClientTestBase, ContentUnderstandingPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestContentUnderstandingPersonDirectoriesOperations(ContentUnderstandingClientTestBase):
    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_create(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.person_directories.create(
            person_directory_id="str",
            resource={
                "createdAt": "2020-02-20 00:00:00",
                "faceCount": 0,
                "lastModifiedAt": "2020-02-20 00:00:00",
                "personCount": 0,
                "personDirectoryId": "str",
                "description": "str",
                "tags": {"str": "str"},
            },
        )

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_update(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.person_directories.update(
            person_directory_id="str",
            resource={
                "createdAt": "2020-02-20 00:00:00",
                "faceCount": 0,
                "lastModifiedAt": "2020-02-20 00:00:00",
                "personCount": 0,
                "personDirectoryId": "str",
                "description": "str",
                "tags": {"str": "str"},
            },
        )

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_get(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.person_directories.get(
            person_directory_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_delete(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.person_directories.delete(
            person_directory_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_list(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.person_directories.list()
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_add_person(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.person_directories.add_person(
            person_directory_id="str",
            body={"faceIds": ["str"], "tags": {"str": "str"}},
        )

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_update_person(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.person_directories.update_person(
            person_directory_id="str",
            person_id="str",
            resource={"personId": "str", "faceIds": ["str"], "tags": {"str": "str"}},
        )

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_get_person(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.person_directories.get_person(
            person_directory_id="str",
            person_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_delete_person(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.person_directories.delete_person(
            person_directory_id="str",
            person_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_list_persons(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.person_directories.list_persons(
            person_directory_id="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_add_face(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.person_directories.add_face(
            person_directory_id="str",
            body={
                "faceSource": {
                    "data": bytes("bytes", encoding="utf-8"),
                    "imageReferenceId": "str",
                    "targetBoundingBox": {"height": 0, "left": 0, "top": 0, "width": 0},
                    "url": "str",
                },
                "personId": "str",
                "qualityThreshold": "str",
            },
            face_source={
                "data": bytes("bytes", encoding="utf-8"),
                "imageReferenceId": "str",
                "targetBoundingBox": {"height": 0, "left": 0, "top": 0, "width": 0},
                "url": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_update_face(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.person_directories.update_face(
            person_directory_id="str",
            face_id="str",
            resource={
                "faceId": "str",
                "boundingBox": {"height": 0, "left": 0, "top": 0, "width": 0},
                "imageReferenceId": "str",
                "personId": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_get_face(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.person_directories.get_face(
            person_directory_id="str",
            face_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_delete_face(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.person_directories.delete_face(
            person_directory_id="str",
            face_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_list_faces(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.person_directories.list_faces(
            person_directory_id="str",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_identify_person(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.person_directories.identify_person(
            person_directory_id="str",
            body={
                "faceSource": {
                    "data": bytes("bytes", encoding="utf-8"),
                    "imageReferenceId": "str",
                    "targetBoundingBox": {"height": 0, "left": 0, "top": 0, "width": 0},
                    "url": "str",
                },
                "maxPersonCandidates": 0,
            },
            face_source={
                "data": bytes("bytes", encoding="utf-8"),
                "imageReferenceId": "str",
                "targetBoundingBox": {"height": 0, "left": 0, "top": 0, "width": 0},
                "url": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_find_similar_faces(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.person_directories.find_similar_faces(
            person_directory_id="str",
            body={
                "faceSource": {
                    "data": bytes("bytes", encoding="utf-8"),
                    "imageReferenceId": "str",
                    "targetBoundingBox": {"height": 0, "left": 0, "top": 0, "width": 0},
                    "url": "str",
                },
                "maxSimilarFaces": 0,
            },
        )

        # please add some check logic here by yourself
        # ...

    @ContentUnderstandingPreparer()
    @recorded_by_proxy
    def test_person_directories_verify_person(self, contentunderstanding_endpoint):
        client = self.create_client(endpoint=contentunderstanding_endpoint)
        response = client.person_directories.verify_person(
            person_directory_id="str",
            person_id="str",
            body={
                "faceSource": {
                    "data": bytes("bytes", encoding="utf-8"),
                    "imageReferenceId": "str",
                    "targetBoundingBox": {"height": 0, "left": 0, "top": 0, "width": 0},
                    "url": "str",
                }
            },
            face_source={
                "data": bytes("bytes", encoding="utf-8"),
                "imageReferenceId": "str",
                "targetBoundingBox": {"height": 0, "left": 0, "top": 0, "width": 0},
                "url": "str",
            },
        )

        # please add some check logic here by yourself
        # ...
