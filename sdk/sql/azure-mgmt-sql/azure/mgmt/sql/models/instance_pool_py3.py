# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .tracked_resource_py3 import TrackedResource


class InstancePool(TrackedResource):
    """An Azure SQL instance pool.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Required. Resource location.
    :type location: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param sku: The name and tier of the SKU.
    :type sku: ~azure.mgmt.sql.models.Sku
    :param subnet_id: Required. Resource ID of the subnet to place this
     instance pool in.
    :type subnet_id: str
    :param v_cores: Required. Count of vCores belonging to this instance pool.
    :type v_cores: int
    :param license_type: Required. The license type. Possible values are
     'LicenseIncluded' (price for SQL license is included) and 'BasePrice'
     (without SQL license price). Possible values include: 'LicenseIncluded',
     'BasePrice'
    :type license_type: str or ~azure.mgmt.sql.models.InstancePoolLicenseType
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'subnet_id': {'required': True},
        'v_cores': {'required': True},
        'license_type': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'sku': {'key': 'sku', 'type': 'Sku'},
        'subnet_id': {'key': 'properties.subnetId', 'type': 'str'},
        'v_cores': {'key': 'properties.vCores', 'type': 'int'},
        'license_type': {'key': 'properties.licenseType', 'type': 'str'},
    }

    def __init__(self, *, location: str, subnet_id: str, v_cores: int, license_type, tags=None, sku=None, **kwargs) -> None:
        super(InstancePool, self).__init__(location=location, tags=tags, **kwargs)
        self.sku = sku
        self.subnet_id = subnet_id
        self.v_cores = v_cores
        self.license_type = license_type
