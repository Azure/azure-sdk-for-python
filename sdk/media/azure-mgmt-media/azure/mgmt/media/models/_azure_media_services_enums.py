# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class AccountEncryptionKeyType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of key used to encrypt the Account Key.
    """

    #: The Account Key is encrypted with a System Key.
    SYSTEM_KEY = "SystemKey"
    #: The Account Key is encrypted with a Customer Key.
    CUSTOMER_KEY = "CustomerKey"

class ActionType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Indicates the action type.
    """

    #: An internal action.
    INTERNAL = "Internal"

class AssetContainerPermission(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The permissions to set on the SAS URL.
    """

    #: The SAS URL will allow read access to the container.
    READ = "Read"
    #: The SAS URL will allow read and write access to the container.
    READ_WRITE = "ReadWrite"
    #: The SAS URL will allow read, write and delete access to the container.
    READ_WRITE_DELETE = "ReadWriteDelete"

class AssetStorageEncryptionFormat(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The Asset encryption format. One of None or MediaStorageEncryption.
    """

    #: The Asset does not use client-side storage encryption (this is the only allowed value for new
    #: Assets).
    NONE = "None"
    #: The Asset is encrypted with Media Services client-side encryption.
    MEDIA_STORAGE_CLIENT_ENCRYPTION = "MediaStorageClientEncryption"

class ContentKeyPolicyFairPlayRentalAndLeaseKeyType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The rental and lease key type.
    """

    #: Represents a ContentKeyPolicyFairPlayRentalAndLeaseKeyType that is unavailable in current API
    #: version.
    UNKNOWN = "Unknown"
    #: Key duration is not specified.
    UNDEFINED = "Undefined"
    #: Dual expiry for offline rental.
    DUAL_EXPIRY = "DualExpiry"
    #: Content key can be persisted with an unlimited duration.
    PERSISTENT_UNLIMITED = "PersistentUnlimited"
    #: Content key can be persisted and the valid duration is limited by the Rental Duration value.
    PERSISTENT_LIMITED = "PersistentLimited"

class ContentKeyPolicyPlayReadyContentType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The PlayReady content type.
    """

    #: Represents a ContentKeyPolicyPlayReadyContentType that is unavailable in current API version.
    UNKNOWN = "Unknown"
    #: Unspecified content type.
    UNSPECIFIED = "Unspecified"
    #: Ultraviolet download content type.
    ULTRA_VIOLET_DOWNLOAD = "UltraVioletDownload"
    #: Ultraviolet streaming content type.
    ULTRA_VIOLET_STREAMING = "UltraVioletStreaming"

class ContentKeyPolicyPlayReadyLicenseType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The license type.
    """

    #: Represents a ContentKeyPolicyPlayReadyLicenseType that is unavailable in current API version.
    UNKNOWN = "Unknown"
    #: Non persistent license.
    NON_PERSISTENT = "NonPersistent"
    #: Persistent license. Allows offline playback.
    PERSISTENT = "Persistent"

class ContentKeyPolicyPlayReadyUnknownOutputPassingOption(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Configures Unknown output handling settings of the license.
    """

    #: Represents a ContentKeyPolicyPlayReadyUnknownOutputPassingOption that is unavailable in current
    #: API version.
    UNKNOWN = "Unknown"
    #: Passing the video portion of protected content to an Unknown Output is not allowed.
    NOT_ALLOWED = "NotAllowed"
    #: Passing the video portion of protected content to an Unknown Output is allowed.
    ALLOWED = "Allowed"
    #: Passing the video portion of protected content to an Unknown Output is allowed but with
    #: constrained resolution.
    ALLOWED_WITH_VIDEO_CONSTRICTION = "AllowedWithVideoConstriction"

class ContentKeyPolicyRestrictionTokenType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of token.
    """

    #: Represents a ContentKeyPolicyRestrictionTokenType that is unavailable in current API version.
    UNKNOWN = "Unknown"
    #: Simple Web Token.
    SWT = "Swt"
    #: JSON Web Token.
    JWT = "Jwt"

class CreatedByType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of identity that created the resource.
    """

    USER = "User"
    APPLICATION = "Application"
    MANAGED_IDENTITY = "ManagedIdentity"
    KEY = "Key"

class DefaultAction(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The behavior for IP access control in Key Delivery.
    """

    #: All public IP addresses are allowed.
    ALLOW = "Allow"
    #: Public IP addresses are blocked.
    DENY = "Deny"

class EncryptionScheme(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Encryption scheme
    """

    #: NoEncryption scheme.
    NO_ENCRYPTION = "NoEncryption"
    #: EnvelopeEncryption scheme.
    ENVELOPE_ENCRYPTION = "EnvelopeEncryption"
    #: CommonEncryptionCenc scheme.
    COMMON_ENCRYPTION_CENC = "CommonEncryptionCenc"
    #: CommonEncryptionCbcs scheme.
    COMMON_ENCRYPTION_CBCS = "CommonEncryptionCbcs"

class FilterTrackPropertyCompareOperation(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The track property condition operation.
    """

    #: The equal operation.
    EQUAL = "Equal"
    #: The not equal operation.
    NOT_EQUAL = "NotEqual"

class FilterTrackPropertyType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The track property type.
    """

    #: The unknown track property type.
    UNKNOWN = "Unknown"
    #: The type.
    TYPE = "Type"
    #: The name.
    NAME = "Name"
    #: The language.
    LANGUAGE = "Language"
    #: The fourCC.
    FOUR_CC = "FourCC"
    #: The bitrate.
    BITRATE = "Bitrate"

class LiveEventEncodingType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Live event type. When encodingType is set to None, the service simply passes through the
    incoming video and audio layer(s) to the output. When encodingType is set to Standard or
    Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers.
    See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot
    be modified after the live event is created.
    """

    #: A contribution live encoder sends a multiple bitrate stream. The ingested stream passes through
    #: the live event without any further processing. It is also called the pass-through mode.
    NONE = "None"
    #: A contribution live encoder sends a single bitrate stream to the live event and Media Services
    #: creates multiple bitrate streams. The output cannot exceed 720p in resolution.
    STANDARD = "Standard"
    #: A contribution live encoder sends a single bitrate stream to the live event and Media Services
    #: creates multiple bitrate streams. The output cannot exceed 1080p in resolution.
    PREMIUM1080_P = "Premium1080p"
    #: Pending update...
    PASSTHROUGH_BASIC = "PassthroughBasic"
    #: Pending update...
    PASSTHROUGH_STANDARD = "PassthroughStandard"

class LiveEventInputProtocol(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The input protocol for the live event. This is specified at creation time and cannot be
    updated.
    """

    #: Smooth Streaming input will be sent by the contribution encoder to the live event.
    FRAGMENTED_MP4 = "FragmentedMP4"
    #: RTMP input will be sent by the contribution encoder to the live event.
    RTMP = "RTMP"

class LiveEventResourceState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The resource state of the live event. See https://go.microsoft.com/fwlink/?linkid=2139012 for
    more information.
    """

    #: This is the initial state of the live event after creation (unless autostart was set to true.)
    #: No billing occurs in this state. In this state, the live event properties can be updated but
    #: streaming is not allowed.
    STOPPED = "Stopped"
    #: Allocate action was called on the live event and resources are being provisioned for this live
    #: event. Once allocation completes successfully, the live event will transition to StandBy state.
    ALLOCATING = "Allocating"
    #: Live event resources have been provisioned and is ready to start. Billing occurs in this state.
    #: Most properties can still be updated, however ingest or streaming is not allowed during this
    #: state.
    STAND_BY = "StandBy"
    #: The live event is being started and resources are being allocated. No billing occurs in this
    #: state. Updates or streaming are not allowed during this state. If an error occurs, the live
    #: event returns to the Stopped state.
    STARTING = "Starting"
    #: The live event resources have been allocated, ingest and preview URLs have been generated, and
    #: it is capable of receiving live streams. At this point, billing is active. You must explicitly
    #: call Stop on the live event resource to halt further billing.
    RUNNING = "Running"
    #: The live event is being stopped and resources are being de-provisioned. No billing occurs in
    #: this transient state. Updates or streaming are not allowed during this state.
    STOPPING = "Stopping"
    #: The live event is being deleted. No billing occurs in this transient state. Updates or
    #: streaming are not allowed during this state.
    DELETING = "Deleting"

class LiveOutputResourceState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The resource state of the live output.
    """

    #: Live output is being created. No content is archived in the asset until the live output is in
    #: running state.
    CREATING = "Creating"
    #: Live output is running and archiving live streaming content to the asset if there is valid
    #: input from a contribution encoder.
    RUNNING = "Running"
    #: Live output is being deleted. The live asset is being converted from live to on-demand asset.
    #: Any streaming URLs created on the live output asset continue to work.
    DELETING = "Deleting"

class MetricAggregationType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The metric aggregation type
    """

    #: The average.
    AVERAGE = "Average"
    #: The count of a number of items, usually requests.
    COUNT = "Count"
    #: The sum.
    TOTAL = "Total"

class MetricUnit(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The metric unit
    """

    #: The number of bytes.
    BYTES = "Bytes"
    #: The count.
    COUNT = "Count"
    #: The number of milliseconds.
    MILLISECONDS = "Milliseconds"

class PrivateEndpointConnectionProvisioningState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The current provisioning state.
    """

    SUCCEEDED = "Succeeded"
    CREATING = "Creating"
    DELETING = "Deleting"
    FAILED = "Failed"

class PrivateEndpointServiceConnectionStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The private endpoint connection status.
    """

    PENDING = "Pending"
    APPROVED = "Approved"
    REJECTED = "Rejected"

class PublicNetworkAccess(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Whether or not public network access is allowed for resources under the Media Services account.
    """

    #: Public network access is enabled.
    ENABLED = "Enabled"
    #: Public network access is disabled.
    DISABLED = "Disabled"

class StorageAccountType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of the storage account.
    """

    #: The primary storage account for the Media Services account.
    PRIMARY = "Primary"
    #: A secondary storage account for the Media Services account.
    SECONDARY = "Secondary"

class StorageAuthentication(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: System authentication.
    SYSTEM = "System"
    #: Managed Identity authentication.
    MANAGED_IDENTITY = "ManagedIdentity"

class StreamingEndpointResourceState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The resource state of the streaming endpoint.
    """

    #: The initial state of a streaming endpoint after creation. Content is not ready to be streamed
    #: from this endpoint.
    STOPPED = "Stopped"
    #: The streaming endpoint is transitioning to the running state.
    STARTING = "Starting"
    #: The streaming endpoint is running. It is able to stream content to clients.
    RUNNING = "Running"
    #: The streaming endpoint is transitioning to the stopped state.
    STOPPING = "Stopping"
    #: The streaming endpoint is being deleted.
    DELETING = "Deleting"
    #: The streaming endpoint is increasing or decreasing scale units.
    SCALING = "Scaling"

class StreamingLocatorContentKeyType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Encryption type of Content Key
    """

    #: Common Encryption using CENC.
    COMMON_ENCRYPTION_CENC = "CommonEncryptionCenc"
    #: Common Encryption using CBCS.
    COMMON_ENCRYPTION_CBCS = "CommonEncryptionCbcs"
    #: Envelope Encryption.
    ENVELOPE_ENCRYPTION = "EnvelopeEncryption"

class StreamingPolicyStreamingProtocol(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Streaming protocol
    """

    #: HLS protocol.
    HLS = "Hls"
    #: DASH protocol.
    DASH = "Dash"
    #: SmoothStreaming protocol.
    SMOOTH_STREAMING = "SmoothStreaming"
    #: Download protocol.
    DOWNLOAD = "Download"

class StreamOptionsFlag(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Live streaming with no special latency optimizations.
    DEFAULT = "Default"
    #: The live event provides lower end to end latency by reducing its internal buffers. This could
    #: result in more client buffering during playback if network bandwidth is low.
    LOW_LATENCY = "LowLatency"

class StretchMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Specifies how the input video will be resized to fit the desired output resolution(s). Default
    is None
    """

    #: Strictly respects the output resolution specified in the encoding preset without considering
    #: the pixel aspect ratio or display aspect ratio of the input video.
    NONE = "None"
    #: Override the output resolution, and change it to match the display aspect ratio of the input,
    #: without padding. For example, if the input is 1920x1080 and the encoding preset asks for
    #: 1280x1280, then the value in the preset is overridden, and the output will be at 1280x720,
    #: which maintains the input aspect ratio of 16:9.
    AUTO_SIZE = "AutoSize"
    #: Pad the output (with either letterbox or pillar box) to honor the output resolution, while
    #: ensuring that the active video region in the output has the same aspect ratio as the input. For
    #: example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the output
    #: will be at 1280x1280, which contains an inner rectangle of 1280x720 at aspect ratio of 16:9,
    #: and pillar box regions 280 pixels wide at the left and right.
    AUTO_FIT = "AutoFit"

class TrackPropertyCompareOperation(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Track property condition operation
    """

    #: Unknown track property compare operation.
    UNKNOWN = "Unknown"
    #: Equal operation.
    EQUAL = "Equal"

class TrackPropertyType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Track property type
    """

    #: Unknown track property.
    UNKNOWN = "Unknown"
    #: Track FourCC.
    FOUR_CC = "FourCC"
