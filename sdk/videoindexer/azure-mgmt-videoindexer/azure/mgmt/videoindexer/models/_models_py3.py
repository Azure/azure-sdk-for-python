# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._vi_management_client_enums import *


class AccessToken(msrest.serialization.Model):
    """Azure Video Indexer access token.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar access_token: The access token.
    :vartype access_token: str
    """

    _validation = {
        'access_token': {'readonly': True},
    }

    _attribute_map = {
        'access_token': {'key': 'accessToken', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(AccessToken, self).__init__(**kwargs)
        self.access_token = None


class Resource(msrest.serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: Required. The geo-location where the resource lives.
    :vartype location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: Required. The geo-location where the resource lives.
        :paramtype location: str
        """
        super(TrackedResource, self).__init__(**kwargs)
        self.tags = tags
        self.location = location


class Account(TrackedResource):
    """An Azure Video Indexer account.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: Required. The geo-location where the resource lives.
    :vartype location: str
    :ivar identity: Managed service identity (system assigned and/or user assigned identities).
    :vartype identity: ~azure.mgmt.videoindexer.models.ManagedServiceIdentity
    :ivar system_data: The system meta data relating to this resource.
    :vartype system_data: ~azure.mgmt.videoindexer.models.SystemData
    :ivar tenant_id: The account's tenant id.
    :vartype tenant_id: str
    :ivar account_id: The account's data-plane ID.
    :vartype account_id: str
    :ivar account_name: The account's name.
    :vartype account_name: str
    :ivar media_services: The media services details.
    :vartype media_services: ~azure.mgmt.videoindexer.models.MediaServicesForPutRequest
    :ivar total_seconds_indexed: An integer representing the total seconds that have been indexed
     on the account.
    :vartype total_seconds_indexed: int
    :ivar provisioning_state: Gets the status of the account at the time the operation was called.
     Possible values include: "Succeeded", "Failed", "Canceled", "Accepted", "Provisioning",
     "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.videoindexer.models.ProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'system_data': {'readonly': True},
        'tenant_id': {'readonly': True},
        'account_name': {'readonly': True},
        'total_seconds_indexed': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'ManagedServiceIdentity'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'account_id': {'key': 'properties.accountId', 'type': 'str'},
        'account_name': {'key': 'properties.accountName', 'type': 'str'},
        'media_services': {'key': 'properties.mediaServices', 'type': 'MediaServicesForPutRequest'},
        'total_seconds_indexed': {'key': 'properties.totalSecondsIndexed', 'type': 'int'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["ManagedServiceIdentity"] = None,
        account_id: Optional[str] = None,
        media_services: Optional["MediaServicesForPutRequest"] = None,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: Required. The geo-location where the resource lives.
        :paramtype location: str
        :keyword identity: Managed service identity (system assigned and/or user assigned identities).
        :paramtype identity: ~azure.mgmt.videoindexer.models.ManagedServiceIdentity
        :keyword account_id: The account's data-plane ID.
        :paramtype account_id: str
        :keyword media_services: The media services details.
        :paramtype media_services: ~azure.mgmt.videoindexer.models.MediaServicesForPutRequest
        """
        super(Account, self).__init__(tags=tags, location=location, **kwargs)
        self.identity = identity
        self.system_data = None
        self.tenant_id = None
        self.account_id = account_id
        self.account_name = None
        self.media_services = media_services
        self.total_seconds_indexed = None
        self.provisioning_state = None


class AccountCheckNameAvailabilityParameters(msrest.serialization.Model):
    """The parameters used to check the availability of the Video Indexer account name.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required. The VideoIndexer account name.
    :vartype name: str
    :ivar type: Required. The type of resource, Microsoft.VideoIndexer/accounts. Possible values
     include: "Microsoft.VideoIndexer/accounts".
    :vartype type: str or ~azure.mgmt.videoindexer.models.Type
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: str,
        type: Union[str, "Type"],
        **kwargs
    ):
        """
        :keyword name: Required. The VideoIndexer account name.
        :paramtype name: str
        :keyword type: Required. The type of resource, Microsoft.VideoIndexer/accounts. Possible values
         include: "Microsoft.VideoIndexer/accounts".
        :paramtype type: str or ~azure.mgmt.videoindexer.models.Type
        """
        super(AccountCheckNameAvailabilityParameters, self).__init__(**kwargs)
        self.name = name
        self.type = type


class AccountList(msrest.serialization.Model):
    """The list operation response, that contains the data pools and their properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of accounts and their properties.
    :vartype value: list[~azure.mgmt.videoindexer.models.Account]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Account]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(AccountList, self).__init__(**kwargs)
        self.value = None
        self.next_link = next_link


class Tags(msrest.serialization.Model):
    """Resource tags.

    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        """
        super(Tags, self).__init__(**kwargs)
        self.tags = tags


class AccountPatch(Tags):
    """Azure Video Indexer account.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar identity: Managed service identity (system assigned and/or user assigned identities).
    :vartype identity: ~azure.mgmt.videoindexer.models.ManagedServiceIdentity
    :ivar tenant_id: The account's tenant id.
    :vartype tenant_id: str
    :ivar account_id: The account's data-plane ID.
    :vartype account_id: str
    :ivar media_services: The media services details.
    :vartype media_services: ~azure.mgmt.videoindexer.models.MediaServicesForPatchRequest
    :ivar provisioning_state: Gets the status of the account at the time the operation was called.
     Possible values include: "Succeeded", "Failed", "Canceled", "Accepted", "Provisioning",
     "Deleting".
    :vartype provisioning_state: str or ~azure.mgmt.videoindexer.models.ProvisioningState
    """

    _validation = {
        'tenant_id': {'readonly': True},
        'account_id': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'identity': {'key': 'identity', 'type': 'ManagedServiceIdentity'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'account_id': {'key': 'properties.accountId', 'type': 'str'},
        'media_services': {'key': 'properties.mediaServices', 'type': 'MediaServicesForPatchRequest'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["ManagedServiceIdentity"] = None,
        media_services: Optional["MediaServicesForPatchRequest"] = None,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword identity: Managed service identity (system assigned and/or user assigned identities).
        :paramtype identity: ~azure.mgmt.videoindexer.models.ManagedServiceIdentity
        :keyword media_services: The media services details.
        :paramtype media_services: ~azure.mgmt.videoindexer.models.MediaServicesForPatchRequest
        """
        super(AccountPatch, self).__init__(tags=tags, **kwargs)
        self.identity = identity
        self.tenant_id = None
        self.account_id = None
        self.media_services = media_services
        self.provisioning_state = None


class CheckNameAvailabilityResult(msrest.serialization.Model):
    """The CheckNameAvailability operation response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name_available: Gets a boolean value that indicates whether the name is available for you
     to use. If true, the name is available. If false, the name has already been taken.
    :vartype name_available: bool
    :ivar reason: Gets the reason that a Video Indexer account name could not be used. The Reason
     element is only returned if NameAvailable is false. Possible values include: "AlreadyExists".
    :vartype reason: str or ~azure.mgmt.videoindexer.models.Reason
    :ivar message: Gets an error message explaining the Reason value in more detail.
    :vartype message: str
    """

    _validation = {
        'name_available': {'readonly': True},
        'reason': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'name_available': {'key': 'nameAvailable', 'type': 'bool'},
        'reason': {'key': 'reason', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(CheckNameAvailabilityResult, self).__init__(**kwargs)
        self.name_available = None
        self.reason = None
        self.message = None


class ClassicAccount(msrest.serialization.Model):
    """An Azure Video Indexer classic account.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The account's name.
    :vartype name: str
    :ivar location: The account's location.
    :vartype location: str
    :ivar id: The account's id.
    :vartype id: str
    :ivar media_services: The media services details.
    :vartype media_services: ~azure.mgmt.videoindexer.models.ClassicAccountMediaServices
    """

    _validation = {
        'name': {'readonly': True},
        'id': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'media_services': {'key': 'properties.mediaServices', 'type': 'ClassicAccountMediaServices'},
    }

    def __init__(
        self,
        *,
        location: Optional[str] = None,
        media_services: Optional["ClassicAccountMediaServices"] = None,
        **kwargs
    ):
        """
        :keyword location: The account's location.
        :paramtype location: str
        :keyword media_services: The media services details.
        :paramtype media_services: ~azure.mgmt.videoindexer.models.ClassicAccountMediaServices
        """
        super(ClassicAccount, self).__init__(**kwargs)
        self.name = None
        self.location = location
        self.id = None
        self.media_services = media_services


class ClassicAccountMediaServices(msrest.serialization.Model):
    """Azure Video Indexer classic account properties.

    :ivar aad_application_id: The aad application id.
    :vartype aad_application_id: str
    :ivar aad_tenant_id: The aad tenant id.
    :vartype aad_tenant_id: str
    :ivar connected: Represents wether the media services is connected or not.
    :vartype connected: bool
    :ivar event_grid_provider_registered: Represents if the media services event grid is connected
     or not.
    :vartype event_grid_provider_registered: bool
    :ivar name: The media services name.
    :vartype name: str
    :ivar resource_group: The resource group that the media services belong to.
    :vartype resource_group: str
    :ivar streaming_endpoint_started: Represents wether the media services streaming endpoint has
     started.
    :vartype streaming_endpoint_started: bool
    :ivar subscription_id: The media services subscriptionId.
    :vartype subscription_id: str
    """

    _attribute_map = {
        'aad_application_id': {'key': 'aadApplicationId', 'type': 'str'},
        'aad_tenant_id': {'key': 'aadTenantId', 'type': 'str'},
        'connected': {'key': 'connected', 'type': 'bool'},
        'event_grid_provider_registered': {'key': 'eventGridProviderRegistered', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'resource_group': {'key': 'resourceGroup', 'type': 'str'},
        'streaming_endpoint_started': {'key': 'streamingEndpointStarted', 'type': 'bool'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        aad_application_id: Optional[str] = None,
        aad_tenant_id: Optional[str] = None,
        connected: Optional[bool] = None,
        event_grid_provider_registered: Optional[bool] = None,
        name: Optional[str] = None,
        resource_group: Optional[str] = None,
        streaming_endpoint_started: Optional[bool] = None,
        subscription_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword aad_application_id: The aad application id.
        :paramtype aad_application_id: str
        :keyword aad_tenant_id: The aad tenant id.
        :paramtype aad_tenant_id: str
        :keyword connected: Represents wether the media services is connected or not.
        :paramtype connected: bool
        :keyword event_grid_provider_registered: Represents if the media services event grid is
         connected or not.
        :paramtype event_grid_provider_registered: bool
        :keyword name: The media services name.
        :paramtype name: str
        :keyword resource_group: The resource group that the media services belong to.
        :paramtype resource_group: str
        :keyword streaming_endpoint_started: Represents wether the media services streaming endpoint
         has started.
        :paramtype streaming_endpoint_started: bool
        :keyword subscription_id: The media services subscriptionId.
        :paramtype subscription_id: str
        """
        super(ClassicAccountMediaServices, self).__init__(**kwargs)
        self.aad_application_id = aad_application_id
        self.aad_tenant_id = aad_tenant_id
        self.connected = connected
        self.event_grid_provider_registered = event_grid_provider_registered
        self.name = name
        self.resource_group = resource_group
        self.streaming_endpoint_started = streaming_endpoint_started
        self.subscription_id = subscription_id


class ClassicAccountSlim(msrest.serialization.Model):
    """An Azure Video Indexer classic account.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The account's name.
    :vartype name: str
    :ivar location: The account's location.
    :vartype location: str
    :ivar id: The account's id.
    :vartype id: str
    """

    _validation = {
        'name': {'readonly': True},
        'location': {'readonly': True},
        'id': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ClassicAccountSlim, self).__init__(**kwargs)
        self.name = None
        self.location = None
        self.id = None


class ErrorDefinition(msrest.serialization.Model):
    """Error definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: Service specific error code which serves as the substatus for the HTTP error code.
    :vartype code: str
    :ivar message: Description of the error.
    :vartype message: str
    :ivar details: Internal error details.
    :vartype details: list[~azure.mgmt.videoindexer.models.ErrorDefinition]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'details': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDefinition]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ErrorDefinition, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.details = None


class ErrorResponse(msrest.serialization.Model):
    """Error response.

    :ivar error: The error details.
    :vartype error: ~azure.mgmt.videoindexer.models.ErrorDefinition
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorDefinition'},
    }

    def __init__(
        self,
        *,
        error: Optional["ErrorDefinition"] = None,
        **kwargs
    ):
        """
        :keyword error: The error details.
        :paramtype error: ~azure.mgmt.videoindexer.models.ErrorDefinition
        """
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class GenerateAccessTokenParameters(msrest.serialization.Model):
    """Access token generation request's parameters.

    All required parameters must be populated in order to send to Azure.

    :ivar permission_type: Required. The requested permission. Possible values include:
     "Contributor", "Reader".
    :vartype permission_type: str or ~azure.mgmt.videoindexer.models.PermissionType
    :ivar scope: Required. The requested media type. Possible values include: "Video", "Account",
     "Project".
    :vartype scope: str or ~azure.mgmt.videoindexer.models.Scope
    :ivar video_id: The video ID.
    :vartype video_id: str
    :ivar project_id: The project ID.
    :vartype project_id: str
    """

    _validation = {
        'permission_type': {'required': True},
        'scope': {'required': True},
    }

    _attribute_map = {
        'permission_type': {'key': 'permissionType', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
        'video_id': {'key': 'videoId', 'type': 'str'},
        'project_id': {'key': 'projectId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        permission_type: Union[str, "PermissionType"],
        scope: Union[str, "Scope"],
        video_id: Optional[str] = None,
        project_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword permission_type: Required. The requested permission. Possible values include:
         "Contributor", "Reader".
        :paramtype permission_type: str or ~azure.mgmt.videoindexer.models.PermissionType
        :keyword scope: Required. The requested media type. Possible values include: "Video",
         "Account", "Project".
        :paramtype scope: str or ~azure.mgmt.videoindexer.models.Scope
        :keyword video_id: The video ID.
        :paramtype video_id: str
        :keyword project_id: The project ID.
        :paramtype project_id: str
        """
        super(GenerateAccessTokenParameters, self).__init__(**kwargs)
        self.permission_type = permission_type
        self.scope = scope
        self.video_id = video_id
        self.project_id = project_id


class ManagedServiceIdentity(msrest.serialization.Model):
    """Managed service identity (system assigned and/or user assigned identities).

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar principal_id: The service principal ID of the system assigned identity. This property
     will only be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of the system assigned identity. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar type: Required. Type of managed service identity (where both SystemAssigned and
     UserAssigned types are allowed). Possible values include: "None", "SystemAssigned",
     "UserAssigned", "SystemAssigned,UserAssigned".
    :vartype type: str or ~azure.mgmt.videoindexer.models.ManagedServiceIdentityType
    :ivar user_assigned_identities: The set of user assigned identities associated with the
     resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
     The dictionary values can be empty objects ({}) in requests.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.videoindexer.models.UserAssignedIdentity]
    """

    _validation = {
        'principal_id': {'readonly': True},
        'tenant_id': {'readonly': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'user_assigned_identities': {'key': 'userAssignedIdentities', 'type': '{UserAssignedIdentity}'},
    }

    def __init__(
        self,
        *,
        type: Union[str, "ManagedServiceIdentityType"],
        user_assigned_identities: Optional[Dict[str, "UserAssignedIdentity"]] = None,
        **kwargs
    ):
        """
        :keyword type: Required. Type of managed service identity (where both SystemAssigned and
         UserAssigned types are allowed). Possible values include: "None", "SystemAssigned",
         "UserAssigned", "SystemAssigned,UserAssigned".
        :paramtype type: str or ~azure.mgmt.videoindexer.models.ManagedServiceIdentityType
        :keyword user_assigned_identities: The set of user assigned identities associated with the
         resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
         The dictionary values can be empty objects ({}) in requests.
        :paramtype user_assigned_identities: dict[str,
         ~azure.mgmt.videoindexer.models.UserAssignedIdentity]
        """
        super(ManagedServiceIdentity, self).__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = type
        self.user_assigned_identities = user_assigned_identities


class MediaServicesForPatchRequest(msrest.serialization.Model):
    """The media services details.

    :ivar user_assigned_identity: The user assigned identity to be used to grant permissions.
    :vartype user_assigned_identity: str
    """

    _attribute_map = {
        'user_assigned_identity': {'key': 'userAssignedIdentity', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        user_assigned_identity: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword user_assigned_identity: The user assigned identity to be used to grant permissions.
        :paramtype user_assigned_identity: str
        """
        super(MediaServicesForPatchRequest, self).__init__(**kwargs)
        self.user_assigned_identity = user_assigned_identity


class MediaServicesForPutRequest(msrest.serialization.Model):
    """The media services details.

    :ivar resource_id: The media services resource id.
    :vartype resource_id: str
    :ivar user_assigned_identity: The user assigned identity to be used to grant permissions.
    :vartype user_assigned_identity: str
    """

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'user_assigned_identity': {'key': 'userAssignedIdentity', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        resource_id: Optional[str] = None,
        user_assigned_identity: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword resource_id: The media services resource id.
        :paramtype resource_id: str
        :keyword user_assigned_identity: The user assigned identity to be used to grant permissions.
        :paramtype user_assigned_identity: str
        """
        super(MediaServicesForPutRequest, self).__init__(**kwargs)
        self.resource_id = resource_id
        self.user_assigned_identity = user_assigned_identity


class Operation(msrest.serialization.Model):
    """Operation detail payload.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Name of the operation.
    :vartype name: str
    :ivar is_data_action: Indicates whether the operation is a data action.
    :vartype is_data_action: bool
    :ivar action_type: Indicates the action type.
    :vartype action_type: str
    :ivar display: Display of the operation.
    :vartype display: ~azure.mgmt.videoindexer.models.OperationDisplay
    :ivar origin: Origin of the operation.
    :vartype origin: str
    """

    _validation = {
        'name': {'readonly': True},
        'is_data_action': {'readonly': True},
        'action_type': {'readonly': True},
        'display': {'readonly': True},
        'origin': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'is_data_action': {'key': 'isDataAction', 'type': 'bool'},
        'action_type': {'key': 'actionType', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(Operation, self).__init__(**kwargs)
        self.name = None
        self.is_data_action = None
        self.action_type = None
        self.display = None
        self.origin = None


class OperationDisplay(msrest.serialization.Model):
    """Operation display payload.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: Resource provider of the operation.
    :vartype provider: str
    :ivar resource: Resource of the operation.
    :vartype resource: str
    :ivar operation: Localized friendly name for the operation.
    :vartype operation: str
    :ivar description: Localized friendly description for the operation.
    :vartype description: str
    """

    _validation = {
        'provider': {'readonly': True},
        'resource': {'readonly': True},
        'operation': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(msrest.serialization.Model):
    """Available operations of the service.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the Resource Provider.
    :vartype value: list[~azure.mgmt.videoindexer.models.Operation]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(OperationListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class SystemData(msrest.serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Possible values include:
     "User", "Application", "ManagedIdentity", "Key".
    :vartype created_by_type: str or ~azure.mgmt.videoindexer.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Possible
     values include: "User", "Application", "ManagedIdentity", "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.videoindexer.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Possible values
         include: "User", "Application", "ManagedIdentity", "Key".
        :paramtype created_by_type: str or ~azure.mgmt.videoindexer.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Possible
         values include: "User", "Application", "ManagedIdentity", "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.videoindexer.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super(SystemData, self).__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class UserAssignedIdentity(msrest.serialization.Model):
    """User assigned identity properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal ID of the assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client ID of the assigned identity.
    :vartype client_id: str
    """

    _validation = {
        'principal_id': {'readonly': True},
        'client_id': {'readonly': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'client_id': {'key': 'clientId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(UserAssignedIdentity, self).__init__(**kwargs)
        self.principal_id = None
        self.client_id = None


class UserClassicAccountList(msrest.serialization.Model):
    """The list of user classic accounts.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of classic account names and their location.
    :vartype value: list[~azure.mgmt.videoindexer.models.ClassicAccountSlim]
    :ivar next_link: URL to get the next set of operation list results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ClassicAccountSlim]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        next_link: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword next_link: URL to get the next set of operation list results if there are any.
        :paramtype next_link: str
        """
        super(UserClassicAccountList, self).__init__(**kwargs)
        self.value = None
        self.next_link = next_link
