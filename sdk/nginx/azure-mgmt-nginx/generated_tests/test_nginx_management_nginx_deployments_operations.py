# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.nginx import NginxManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestNginxManagementNginxDeploymentsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(NginxManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_nginx_deployments_list_by_subscription(self, resource_group):
        response = self.client.nginx_deployments.list_by_subscription(
            api_version="2025-03-01-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_nginx_deployments_list_by_resource_group(self, resource_group):
        response = self.client.nginx_deployments.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2025-03-01-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_nginx_deployments_get(self, resource_group):
        response = self.client.nginx_deployments.get(
            resource_group_name=resource_group.name,
            nginx_deployment_name="str",
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_nginx_deployments_begin_create_or_update(self, resource_group):
        response = self.client.nginx_deployments.begin_create_or_update(
            resource_group_name=resource_group.name,
            nginx_deployment_name="str",
            resource={
                "location": "str",
                "id": "str",
                "identity": {
                    "type": "str",
                    "principalId": "str",
                    "tenantId": "str",
                    "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                },
                "name": "str",
                "properties": {
                    "autoUpgradeProfile": {"upgradeChannel": "str"},
                    "dataplaneApiEndpoint": "str",
                    "enableDiagnosticsSupport": bool,
                    "ipAddress": "str",
                    "logging": {"storageAccount": {"accountName": "str", "containerName": "str"}},
                    "networkProfile": {
                        "frontEndIPConfiguration": {
                            "privateIPAddresses": [
                                {"privateIPAddress": "str", "privateIPAllocationMethod": "str", "subnetId": "str"}
                            ],
                            "publicIPAddresses": [{"id": "str"}],
                        },
                        "networkInterfaceConfiguration": {"subnetId": "str"},
                    },
                    "nginxAppProtect": {
                        "webApplicationFirewallSettings": {"activationState": "str"},
                        "webApplicationFirewallStatus": {
                            "attackSignaturesPackage": {"revisionDatetime": "str", "version": "str"},
                            "botSignaturesPackage": {"revisionDatetime": "str", "version": "str"},
                            "componentVersions": {"wafEngineVersion": "str", "wafNginxVersion": "str"},
                            "threatCampaignsPackage": {"revisionDatetime": "str", "version": "str"},
                            "wafRelease": "str",
                        },
                    },
                    "nginxVersion": "str",
                    "scalingProperties": {
                        "autoScaleSettings": {"profiles": [{"capacity": {"max": 0, "min": 0}, "name": "str"}]},
                        "capacity": 0,
                    },
                    "userProfile": {"preferredEmail": "str"},
                    "provisioningState": "str",
                },
                "sku": {"name": "str", "capacity": 0, "family": "str", "size": "str", "tier": "str"},
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
            api_version="2025-03-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_nginx_deployments_update(self, resource_group):
        response = self.client.nginx_deployments.update(
            resource_group_name=resource_group.name,
            nginx_deployment_name="str",
            properties={
                "identity": {
                    "type": "str",
                    "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                },
                "properties": {
                    "autoUpgradeProfile": {"upgradeChannel": "str"},
                    "dataplaneApiEndpoint": "str",
                    "enableDiagnosticsSupport": bool,
                    "ipAddress": "str",
                    "logging": {"storageAccount": {"accountName": "str", "containerName": "str"}},
                    "networkProfile": {
                        "frontEndIPConfiguration": {
                            "privateIPAddresses": [
                                {"privateIPAddress": "str", "privateIPAllocationMethod": "str", "subnetId": "str"}
                            ],
                            "publicIPAddresses": [{"id": "str"}],
                        },
                        "networkInterfaceConfiguration": {"subnetId": "str"},
                    },
                    "nginxAppProtect": {
                        "webApplicationFirewallSettings": {"activationState": "str"},
                        "webApplicationFirewallStatus": {
                            "attackSignaturesPackage": {"revisionDatetime": "str", "version": "str"},
                            "botSignaturesPackage": {"revisionDatetime": "str", "version": "str"},
                            "componentVersions": {"wafEngineVersion": "str", "wafNginxVersion": "str"},
                            "threatCampaignsPackage": {"revisionDatetime": "str", "version": "str"},
                            "wafRelease": "str",
                        },
                    },
                    "nginxVersion": "str",
                    "scalingProperties": {
                        "autoScaleSettings": {"profiles": [{"capacity": {"max": 0, "min": 0}, "name": "str"}]},
                        "capacity": 0,
                    },
                    "userProfile": {"preferredEmail": "str"},
                },
                "sku": {"capacity": 0, "family": "str", "name": "str", "size": "str", "tier": "str"},
                "tags": {"str": "str"},
            },
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_nginx_deployments_begin_delete(self, resource_group):
        response = self.client.nginx_deployments.begin_delete(
            resource_group_name=resource_group.name,
            nginx_deployment_name="str",
            api_version="2025-03-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_nginx_deployments_list_default_waf_policies(self, resource_group):
        response = self.client.nginx_deployments.list_default_waf_policies(
            resource_group_name=resource_group.name,
            nginx_deployment_name="str",
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...
