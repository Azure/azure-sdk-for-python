# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Mapping, Optional, TYPE_CHECKING, Union, overload

from .._utils.model_base import Model as _Model, rest_field

if TYPE_CHECKING:
    from .. import models as _models


class AnalysisCreate(_Model):
    """The request body for creating an analysis for an NGINX configuration.

    :ivar config: Required.
    :vartype config: ~azure.mgmt.nginx.models.AnalysisCreateConfig
    """

    config: "_models.AnalysisCreateConfig" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""

    @overload
    def __init__(
        self,
        *,
        config: "_models.AnalysisCreateConfig",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalysisCreateConfig(_Model):
    """AnalysisCreateConfig.

    :ivar root_file: The root file of the NGINX config file(s). It must match one of the files'
     filepath.
    :vartype root_file: str
    :ivar files:
    :vartype files: list[~azure.mgmt.nginx.models.NginxConfigurationFile]
    :ivar protected_files:
    :vartype protected_files: list[~azure.mgmt.nginx.models.NginxConfigurationProtectedFileRequest]
    :ivar package: Nginx Configuration Package.
    :vartype package: ~azure.mgmt.nginx.models.NginxConfigurationPackage
    """

    root_file: Optional[str] = rest_field(name="rootFile", visibility=["read", "create", "update", "delete", "query"])
    """The root file of the NGINX config file(s). It must match one of the files' filepath."""
    files: Optional[list["_models.NginxConfigurationFile"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    protected_files: Optional[list["_models.NginxConfigurationProtectedFileRequest"]] = rest_field(
        name="protectedFiles", visibility=["read", "create", "update", "delete", "query"]
    )
    package: Optional["_models.NginxConfigurationPackage"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Nginx Configuration Package."""

    @overload
    def __init__(
        self,
        *,
        root_file: Optional[str] = None,
        files: Optional[list["_models.NginxConfigurationFile"]] = None,
        protected_files: Optional[list["_models.NginxConfigurationProtectedFileRequest"]] = None,
        package: Optional["_models.NginxConfigurationPackage"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalysisDiagnostic(_Model):
    """An error object found during the analysis of an NGINX configuration.

    :ivar id: Unique identifier for the error.
    :vartype id: str
    :ivar directive: Required.
    :vartype directive: str
    :ivar description: Required.
    :vartype description: str
    :ivar file: the filepath of the most relevant config file. Required.
    :vartype file: str
    :ivar line: Required.
    :vartype line: float
    :ivar message: Required.
    :vartype message: str
    :ivar rule: Required.
    :vartype rule: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Unique identifier for the error."""
    directive: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""
    description: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""
    file: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """the filepath of the most relevant config file. Required."""
    line: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""
    message: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""
    rule: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""

    @overload
    def __init__(
        self,
        *,
        directive: str,
        description: str,
        file: str,
        line: float,
        message: str,
        rule: str,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalysisResult(_Model):
    """The response body for an analysis request. Contains the status of the analysis and any errors.

    :ivar status: The status of the analysis. Required.
    :vartype status: str
    :ivar data:
    :vartype data: ~azure.mgmt.nginx.models.AnalysisResultData
    """

    status: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The status of the analysis. Required."""
    data: Optional["_models.AnalysisResultData"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        status: str,
        data: Optional["_models.AnalysisResultData"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AnalysisResultData(_Model):
    """AnalysisResultData.

    :ivar errors:
    :vartype errors: list[~azure.mgmt.nginx.models.AnalysisDiagnostic]
    :ivar diagnostics:
    :vartype diagnostics: list[~azure.mgmt.nginx.models.DiagnosticItem]
    """

    errors: Optional[list["_models.AnalysisDiagnostic"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    diagnostics: Optional[list["_models.DiagnosticItem"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        errors: Optional[list["_models.AnalysisDiagnostic"]] = None,
        diagnostics: Optional[list["_models.DiagnosticItem"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AutoUpgradeProfile(_Model):
    """Autoupgrade settings of a deployment.

    :ivar upgrade_channel: Channel used for autoupgrade. Required.
    :vartype upgrade_channel: str
    """

    upgrade_channel: str = rest_field(name="upgradeChannel", visibility=["read", "create", "update", "delete", "query"])
    """Channel used for autoupgrade. Required."""

    @overload
    def __init__(
        self,
        *,
        upgrade_channel: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class DiagnosticItem(_Model):
    """A diagnostic is a message associated with an NGINX config. The Analyzer returns diagnostics
    with a level indicating the importance of the diagnostic with optional category.

    :ivar id: Unique identifier for the diagnostic.
    :vartype id: str
    :ivar directive: Required.
    :vartype directive: str
    :ivar description: Required.
    :vartype description: str
    :ivar file: The filepath of the most relevant config file. Required.
    :vartype file: str
    :ivar line: Required.
    :vartype line: float
    :ivar message: Required.
    :vartype message: str
    :ivar rule: Required.
    :vartype rule: str
    :ivar level: Warning or Info. Required. Known values are: "Info" and "Warning".
    :vartype level: str or ~azure.mgmt.nginx.models.Level
    :ivar category: Category of warning like Best-practices, Recommendation, Security etc.
    :vartype category: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Unique identifier for the diagnostic."""
    directive: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""
    description: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""
    file: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The filepath of the most relevant config file. Required."""
    line: float = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""
    message: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""
    rule: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""
    level: Union[str, "_models.Level"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Warning or Info. Required. Known values are: \"Info\" and \"Warning\"."""
    category: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Category of warning like Best-practices, Recommendation, Security etc."""

    @overload
    def __init__(
        self,
        *,
        directive: str,
        description: str,
        file: str,
        line: float,
        message: str,
        rule: str,
        level: Union[str, "_models.Level"],
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        category: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_Model):
    """The resource management error additional info.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_Model):
    """The error detail.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.nginx.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.nginx.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[list["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[list["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_Model):
    """Error response.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.nginx.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class IdentityProperties(_Model):
    """Identity Properties.

    :ivar principal_id:
    :vartype principal_id: str
    :ivar tenant_id:
    :vartype tenant_id: str
    :ivar type: Identity Type. Known values are: "SystemAssigned", "UserAssigned", "SystemAssigned,
     UserAssigned", and "None".
    :vartype type: str or ~azure.mgmt.nginx.models.IdentityType
    :ivar user_assigned_identities: Dictionary of <UserIdentityProperties>.
    :vartype user_assigned_identities: dict[str, ~azure.mgmt.nginx.models.UserIdentityProperties]
    """

    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    tenant_id: Optional[str] = rest_field(name="tenantId", visibility=["read"])
    type: Optional[Union[str, "_models.IdentityType"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Identity Type. Known values are: \"SystemAssigned\", \"UserAssigned\", \"SystemAssigned,
     UserAssigned\", and \"None\"."""
    user_assigned_identities: Optional[dict[str, "_models.UserIdentityProperties"]] = rest_field(
        name="userAssignedIdentities", visibility=["read", "create", "update", "delete", "query"]
    )
    """Dictionary of <UserIdentityProperties>."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.IdentityType"]] = None,
        user_assigned_identities: Optional[dict[str, "_models.UserIdentityProperties"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Resource(_Model):
    """Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.nginx.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class ProxyResource(Resource):
    """Proxy Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.nginx.models.SystemData
    """


class NginxCertificate(ProxyResource):
    """Nginx Certificate.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.nginx.models.SystemData
    :ivar properties: Nginx Certificate Properties.
    :vartype properties: ~azure.mgmt.nginx.models.NginxCertificateProperties
    :ivar location: The geo-location where the resource lives.
    :vartype location: str
    """

    properties: Optional["_models.NginxCertificateProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Nginx Certificate Properties."""
    location: Optional[str] = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.NginxCertificateProperties"] = None,
        location: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxCertificateErrorResponseBody(_Model):
    """Nginx Certificate Error Response Body.

    :ivar code:
    :vartype code: str
    :ivar message:
    :vartype message: str
    """

    code: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    message: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])

    @overload
    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxCertificateProperties(_Model):
    """Nginx Certificate Properties.

    :ivar provisioning_state: Provisioning State. Known values are: "Accepted", "Creating",
     "Updating", "Deleting", "Succeeded", "Failed", "Canceled", "Deleted", and "NotSpecified".
    :vartype provisioning_state: str or ~azure.mgmt.nginx.models.ProvisioningState
    :ivar key_virtual_path:
    :vartype key_virtual_path: str
    :ivar certificate_virtual_path:
    :vartype certificate_virtual_path: str
    :ivar key_vault_secret_id:
    :vartype key_vault_secret_id: str
    :ivar sha1_thumbprint:
    :vartype sha1_thumbprint: str
    :ivar key_vault_secret_version:
    :vartype key_vault_secret_version: str
    :ivar key_vault_secret_created:
    :vartype key_vault_secret_created: ~datetime.datetime
    :ivar certificate_error: Nginx Certificate Error Response Body.
    :vartype certificate_error: ~azure.mgmt.nginx.models.NginxCertificateErrorResponseBody
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning State. Known values are: \"Accepted\", \"Creating\", \"Updating\", \"Deleting\",
     \"Succeeded\", \"Failed\", \"Canceled\", \"Deleted\", and \"NotSpecified\"."""
    key_virtual_path: Optional[str] = rest_field(
        name="keyVirtualPath", visibility=["read", "create", "update", "delete", "query"]
    )
    certificate_virtual_path: Optional[str] = rest_field(
        name="certificateVirtualPath", visibility=["read", "create", "update", "delete", "query"]
    )
    key_vault_secret_id: Optional[str] = rest_field(
        name="keyVaultSecretId", visibility=["read", "create", "update", "delete", "query"]
    )
    sha1_thumbprint: Optional[str] = rest_field(name="sha1Thumbprint", visibility=["read"])
    key_vault_secret_version: Optional[str] = rest_field(name="keyVaultSecretVersion", visibility=["read"])
    key_vault_secret_created: Optional[datetime.datetime] = rest_field(
        name="keyVaultSecretCreated", visibility=["read"], format="rfc3339"
    )
    certificate_error: Optional["_models.NginxCertificateErrorResponseBody"] = rest_field(
        name="certificateError", visibility=["read", "create", "update", "delete", "query"]
    )
    """Nginx Certificate Error Response Body."""

    @overload
    def __init__(
        self,
        *,
        key_virtual_path: Optional[str] = None,
        certificate_virtual_path: Optional[str] = None,
        key_vault_secret_id: Optional[str] = None,
        certificate_error: Optional["_models.NginxCertificateErrorResponseBody"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxConfigurationFile(_Model):
    """Nginx Configuration File.

    :ivar content:
    :vartype content: str
    :ivar virtual_path:
    :vartype virtual_path: str
    """

    content: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    virtual_path: Optional[str] = rest_field(
        name="virtualPath", visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        content: Optional[str] = None,
        virtual_path: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxConfigurationPackage(_Model):
    """Nginx Configuration Package.

    :ivar data:
    :vartype data: str
    :ivar protected_files:
    :vartype protected_files: list[str]
    """

    data: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    protected_files: Optional[list[str]] = rest_field(
        name="protectedFiles", visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        data: Optional[str] = None,
        protected_files: Optional[list[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxConfigurationProtectedFileRequest(_Model):
    """Nginx Configuration Protected File Request.

    :ivar content: The content of the protected file. This value is a PUT only value. If you
     perform a GET request on this value, it will be empty because it is a protected file.
    :vartype content: str
    :ivar virtual_path: The virtual path of the protected file.
    :vartype virtual_path: str
    :ivar content_hash: The hash of the content of the file. This value is used to determine if the
     file has changed.
    :vartype content_hash: str
    """

    content: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The content of the protected file. This value is a PUT only value. If you perform a GET request
     on this value, it will be empty because it is a protected file."""
    virtual_path: Optional[str] = rest_field(
        name="virtualPath", visibility=["read", "create", "update", "delete", "query"]
    )
    """The virtual path of the protected file."""
    content_hash: Optional[str] = rest_field(
        name="contentHash", visibility=["read", "create", "update", "delete", "query"]
    )
    """The hash of the content of the file. This value is used to determine if the file has changed."""

    @overload
    def __init__(
        self,
        *,
        content: Optional[str] = None,
        virtual_path: Optional[str] = None,
        content_hash: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxConfigurationProtectedFileResponse(_Model):
    """Nginx Configuration Protected File Response.

    :ivar virtual_path: The virtual path of the protected file.
    :vartype virtual_path: str
    :ivar content_hash: The hash of the content of the file. This value is used to determine if the
     file has changed.
    :vartype content_hash: str
    """

    virtual_path: Optional[str] = rest_field(
        name="virtualPath", visibility=["read", "create", "update", "delete", "query"]
    )
    """The virtual path of the protected file."""
    content_hash: Optional[str] = rest_field(
        name="contentHash", visibility=["read", "create", "update", "delete", "query"]
    )
    """The hash of the content of the file. This value is used to determine if the file has changed."""

    @overload
    def __init__(
        self,
        *,
        virtual_path: Optional[str] = None,
        content_hash: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxConfigurationRequest(_Model):
    """Nginx Configuration Request.

    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar type:
    :vartype type: str
    :ivar properties: Nginx Configuration Request Properties.
    :vartype properties: ~azure.mgmt.nginx.models.NginxConfigurationRequestProperties
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.nginx.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    name: Optional[str] = rest_field(visibility=["read"])
    type: Optional[str] = rest_field(visibility=["read"])
    properties: Optional["_models.NginxConfigurationRequestProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Nginx Configuration Request Properties."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Metadata pertaining to creation and last modification of the resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.NginxConfigurationRequestProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxConfigurationRequestProperties(_Model):
    """Nginx Configuration Request Properties.

    :ivar provisioning_state: Provisioning State. Known values are: "Accepted", "Creating",
     "Updating", "Deleting", "Succeeded", "Failed", "Canceled", "Deleted", and "NotSpecified".
    :vartype provisioning_state: str or ~azure.mgmt.nginx.models.ProvisioningState
    :ivar files:
    :vartype files: list[~azure.mgmt.nginx.models.NginxConfigurationFile]
    :ivar protected_files:
    :vartype protected_files: list[~azure.mgmt.nginx.models.NginxConfigurationProtectedFileRequest]
    :ivar package: Nginx Configuration Package.
    :vartype package: ~azure.mgmt.nginx.models.NginxConfigurationPackage
    :ivar root_file:
    :vartype root_file: str
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning State. Known values are: \"Accepted\", \"Creating\", \"Updating\", \"Deleting\",
     \"Succeeded\", \"Failed\", \"Canceled\", \"Deleted\", and \"NotSpecified\"."""
    files: Optional[list["_models.NginxConfigurationFile"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    protected_files: Optional[list["_models.NginxConfigurationProtectedFileRequest"]] = rest_field(
        name="protectedFiles", visibility=["read", "create", "update", "delete", "query"]
    )
    package: Optional["_models.NginxConfigurationPackage"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Nginx Configuration Package."""
    root_file: Optional[str] = rest_field(name="rootFile", visibility=["read", "create", "update", "delete", "query"])

    @overload
    def __init__(
        self,
        *,
        files: Optional[list["_models.NginxConfigurationFile"]] = None,
        protected_files: Optional[list["_models.NginxConfigurationProtectedFileRequest"]] = None,
        package: Optional["_models.NginxConfigurationPackage"] = None,
        root_file: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxConfigurationResponse(ProxyResource):
    """Nginx Configuration Response.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.nginx.models.SystemData
    :ivar properties: Nginx Configuration Response Properties.
    :vartype properties: ~azure.mgmt.nginx.models.NginxConfigurationResponseProperties
    """

    properties: Optional["_models.NginxConfigurationResponseProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Nginx Configuration Response Properties."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.NginxConfigurationResponseProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxConfigurationResponseProperties(_Model):
    """Nginx Configuration Response Properties.

    :ivar provisioning_state: Provisioning State. Known values are: "Accepted", "Creating",
     "Updating", "Deleting", "Succeeded", "Failed", "Canceled", "Deleted", and "NotSpecified".
    :vartype provisioning_state: str or ~azure.mgmt.nginx.models.ProvisioningState
    :ivar files:
    :vartype files: list[~azure.mgmt.nginx.models.NginxConfigurationFile]
    :ivar protected_files:
    :vartype protected_files:
     list[~azure.mgmt.nginx.models.NginxConfigurationProtectedFileResponse]
    :ivar package: Nginx Configuration Package.
    :vartype package: ~azure.mgmt.nginx.models.NginxConfigurationPackage
    :ivar root_file:
    :vartype root_file: str
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning State. Known values are: \"Accepted\", \"Creating\", \"Updating\", \"Deleting\",
     \"Succeeded\", \"Failed\", \"Canceled\", \"Deleted\", and \"NotSpecified\"."""
    files: Optional[list["_models.NginxConfigurationFile"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    protected_files: Optional[list["_models.NginxConfigurationProtectedFileResponse"]] = rest_field(
        name="protectedFiles", visibility=["read", "create", "update", "delete", "query"]
    )
    package: Optional["_models.NginxConfigurationPackage"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Nginx Configuration Package."""
    root_file: Optional[str] = rest_field(name="rootFile", visibility=["read", "create", "update", "delete", "query"])

    @overload
    def __init__(
        self,
        *,
        files: Optional[list["_models.NginxConfigurationFile"]] = None,
        protected_files: Optional[list["_models.NginxConfigurationProtectedFileResponse"]] = None,
        package: Optional["_models.NginxConfigurationPackage"] = None,
        root_file: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TrackedResource(Resource):
    """Tracked Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.nginx.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxDeployment(TrackedResource):
    """Nginx Deployment.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.nginx.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Nginx Deployment Properties.
    :vartype properties: ~azure.mgmt.nginx.models.NginxDeploymentProperties
    :ivar identity: Identity Properties.
    :vartype identity: ~azure.mgmt.nginx.models.IdentityProperties
    :ivar sku: Resource Sku.
    :vartype sku: ~azure.mgmt.nginx.models.ResourceSku
    """

    properties: Optional["_models.NginxDeploymentProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Nginx Deployment Properties."""
    identity: Optional["_models.IdentityProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Identity Properties."""
    sku: Optional["_models.ResourceSku"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource Sku."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[dict[str, str]] = None,
        properties: Optional["_models.NginxDeploymentProperties"] = None,
        identity: Optional["_models.IdentityProperties"] = None,
        sku: Optional["_models.ResourceSku"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxDeploymentApiKeyRequest(_Model):
    """Nginx Deployment Api Key Request.

    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar type:
    :vartype type: str
    :ivar properties: Nginx Deployment Api Key Request Properties.
    :vartype properties: ~azure.mgmt.nginx.models.NginxDeploymentApiKeyRequestProperties
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.nginx.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    name: Optional[str] = rest_field(visibility=["read"])
    type: Optional[str] = rest_field(visibility=["read"])
    properties: Optional["_models.NginxDeploymentApiKeyRequestProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Nginx Deployment Api Key Request Properties."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Metadata pertaining to creation and last modification of the resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.NginxDeploymentApiKeyRequestProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxDeploymentApiKeyRequestProperties(_Model):
    """Nginx Deployment Api Key Request Properties.

    :ivar secret_text: Secret text to be used as a Dataplane API Key. This is a write only property
     that can never be read back, but the first three characters will be returned in the 'hint'
     property.
    :vartype secret_text: str
    :ivar end_date_time: The time after which this Dataplane API Key is no longer valid.
    :vartype end_date_time: ~datetime.datetime
    """

    secret_text: Optional[str] = rest_field(
        name="secretText", visibility=["read", "create", "update", "delete", "query"]
    )
    """Secret text to be used as a Dataplane API Key. This is a write only property that can never be
     read back, but the first three characters will be returned in the 'hint' property."""
    end_date_time: Optional[datetime.datetime] = rest_field(
        name="endDateTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The time after which this Dataplane API Key is no longer valid."""

    @overload
    def __init__(
        self,
        *,
        secret_text: Optional[str] = None,
        end_date_time: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxDeploymentApiKeyResponse(ProxyResource):
    """Nginx Deployment Api Key Response.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.nginx.models.SystemData
    :ivar properties: Nginx Deployment Api Key Response Properties.
    :vartype properties: ~azure.mgmt.nginx.models.NginxDeploymentApiKeyResponseProperties
    """

    properties: Optional["_models.NginxDeploymentApiKeyResponseProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Nginx Deployment Api Key Response Properties."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.NginxDeploymentApiKeyResponseProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxDeploymentApiKeyResponseProperties(_Model):
    """Nginx Deployment Api Key Response Properties.

    :ivar hint: The first three characters of the secret text to help identify it in use. This
     property is read-only.
    :vartype hint: str
    :ivar end_date_time: The time after which this Dataplane API Key is no longer valid.
    :vartype end_date_time: ~datetime.datetime
    """

    hint: Optional[str] = rest_field(visibility=["read"])
    """The first three characters of the secret text to help identify it in use. This property is
     read-only."""
    end_date_time: Optional[datetime.datetime] = rest_field(
        name="endDateTime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The time after which this Dataplane API Key is no longer valid."""

    @overload
    def __init__(
        self,
        *,
        end_date_time: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxDeploymentDefaultWafPolicyListResponse(_Model):  # pylint: disable=name-too-long
    """Nginx Deployment Default Waf Policy List Response.

    :ivar value:
    :vartype value: list[~azure.mgmt.nginx.models.NginxDeploymentDefaultWafPolicyProperties]
    :ivar next_link:
    :vartype next_link: str
    """

    value: Optional[list["_models.NginxDeploymentDefaultWafPolicyProperties"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    next_link: Optional[str] = rest_field(name="nextLink", visibility=["read", "create", "update", "delete", "query"])

    @overload
    def __init__(
        self,
        *,
        value: Optional[list["_models.NginxDeploymentDefaultWafPolicyProperties"]] = None,
        next_link: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxDeploymentDefaultWafPolicyProperties(_Model):  # pylint: disable=name-too-long
    """Nginx Deployment Default Waf Policy Properties.

    :ivar content:
    :vartype content: bytes
    :ivar filepath:
    :vartype filepath: str
    """

    content: Optional[bytes] = rest_field(visibility=["read"], format="base64")
    filepath: Optional[str] = rest_field(visibility=["read"])


class NginxDeploymentProperties(_Model):
    """Nginx Deployment Properties.

    :ivar provisioning_state: Provisioning State. Known values are: "Accepted", "Creating",
     "Updating", "Deleting", "Succeeded", "Failed", "Canceled", "Deleted", and "NotSpecified".
    :vartype provisioning_state: str or ~azure.mgmt.nginx.models.ProvisioningState
    :ivar nginx_version:
    :vartype nginx_version: str
    :ivar network_profile: Nginx Network Profile.
    :vartype network_profile: ~azure.mgmt.nginx.models.NginxNetworkProfile
    :ivar ip_address: The IP address of the deployment.
    :vartype ip_address: str
    :ivar enable_diagnostics_support:
    :vartype enable_diagnostics_support: bool
    :ivar logging: Nginx Logging.
    :vartype logging: ~azure.mgmt.nginx.models.NginxLogging
    :ivar scaling_properties: Information on how the deployment will be scaled.
    :vartype scaling_properties: ~azure.mgmt.nginx.models.NginxDeploymentScalingProperties
    :ivar auto_upgrade_profile: Autoupgrade settings of a deployment.
    :vartype auto_upgrade_profile: ~azure.mgmt.nginx.models.AutoUpgradeProfile
    :ivar user_profile: Nginx Deployment User Profile.
    :vartype user_profile: ~azure.mgmt.nginx.models.NginxDeploymentUserProfile
    :ivar nginx_app_protect: Settings for NGINX App Protect (NAP).
    :vartype nginx_app_protect: ~azure.mgmt.nginx.models.NginxDeploymentPropertiesNginxAppProtect
    :ivar dataplane_api_endpoint: Dataplane API endpoint for the caller to update the NGINX state
     of the deployment.
    :vartype dataplane_api_endpoint: str
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning State. Known values are: \"Accepted\", \"Creating\", \"Updating\", \"Deleting\",
     \"Succeeded\", \"Failed\", \"Canceled\", \"Deleted\", and \"NotSpecified\"."""
    nginx_version: Optional[str] = rest_field(name="nginxVersion", visibility=["read"])
    network_profile: Optional["_models.NginxNetworkProfile"] = rest_field(
        name="networkProfile", visibility=["read", "create", "update", "delete", "query"]
    )
    """Nginx Network Profile."""
    ip_address: Optional[str] = rest_field(name="ipAddress", visibility=["read"])
    """The IP address of the deployment."""
    enable_diagnostics_support: Optional[bool] = rest_field(
        name="enableDiagnosticsSupport", visibility=["read", "create", "update", "delete", "query"]
    )
    logging: Optional["_models.NginxLogging"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Nginx Logging."""
    scaling_properties: Optional["_models.NginxDeploymentScalingProperties"] = rest_field(
        name="scalingProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Information on how the deployment will be scaled."""
    auto_upgrade_profile: Optional["_models.AutoUpgradeProfile"] = rest_field(
        name="autoUpgradeProfile", visibility=["read", "create", "update", "delete", "query"]
    )
    """Autoupgrade settings of a deployment."""
    user_profile: Optional["_models.NginxDeploymentUserProfile"] = rest_field(
        name="userProfile", visibility=["read", "create", "update", "delete", "query"]
    )
    """Nginx Deployment User Profile."""
    nginx_app_protect: Optional["_models.NginxDeploymentPropertiesNginxAppProtect"] = rest_field(
        name="nginxAppProtect", visibility=["read", "create", "update", "delete", "query"]
    )
    """Settings for NGINX App Protect (NAP)."""
    dataplane_api_endpoint: Optional[str] = rest_field(name="dataplaneApiEndpoint", visibility=["read"])
    """Dataplane API endpoint for the caller to update the NGINX state of the deployment."""

    @overload
    def __init__(
        self,
        *,
        network_profile: Optional["_models.NginxNetworkProfile"] = None,
        enable_diagnostics_support: Optional[bool] = None,
        logging: Optional["_models.NginxLogging"] = None,
        scaling_properties: Optional["_models.NginxDeploymentScalingProperties"] = None,
        auto_upgrade_profile: Optional["_models.AutoUpgradeProfile"] = None,
        user_profile: Optional["_models.NginxDeploymentUserProfile"] = None,
        nginx_app_protect: Optional["_models.NginxDeploymentPropertiesNginxAppProtect"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxDeploymentPropertiesNginxAppProtect(_Model):
    """Settings for NGINX App Protect (NAP).

    :ivar web_application_firewall_settings: Settings for the NGINX App Protect Web Application
     Firewall (WAF). Required.
    :vartype web_application_firewall_settings:
     ~azure.mgmt.nginx.models.WebApplicationFirewallSettings
    :ivar web_application_firewall_status: The status of the NGINX App Protect Web Application
     Firewall.
    :vartype web_application_firewall_status: ~azure.mgmt.nginx.models.WebApplicationFirewallStatus
    """

    web_application_firewall_settings: "_models.WebApplicationFirewallSettings" = rest_field(
        name="webApplicationFirewallSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Settings for the NGINX App Protect Web Application Firewall (WAF). Required."""
    web_application_firewall_status: Optional["_models.WebApplicationFirewallStatus"] = rest_field(
        name="webApplicationFirewallStatus", visibility=["read"]
    )
    """The status of the NGINX App Protect Web Application Firewall."""

    @overload
    def __init__(
        self,
        *,
        web_application_firewall_settings: "_models.WebApplicationFirewallSettings",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxDeploymentScalingProperties(_Model):
    """Information on how the deployment will be scaled.

    :ivar capacity:
    :vartype capacity: int
    :ivar auto_scale_settings: The settings for enabling automatic scaling of the deployment. If
     this field is specified, 'scale.capacity' must be empty.
    :vartype auto_scale_settings:
     ~azure.mgmt.nginx.models.NginxDeploymentScalingPropertiesAutoScaleSettings
    """

    capacity: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    auto_scale_settings: Optional["_models.NginxDeploymentScalingPropertiesAutoScaleSettings"] = rest_field(
        name="autoScaleSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """The settings for enabling automatic scaling of the deployment. If this field is specified,
     'scale.capacity' must be empty."""

    __flattened_items = ["profiles"]

    @overload
    def __init__(
        self,
        *,
        capacity: Optional[int] = None,
        auto_scale_settings: Optional["_models.NginxDeploymentScalingPropertiesAutoScaleSettings"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.auto_scale_settings is None:
                return None
            return getattr(self.auto_scale_settings, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.auto_scale_settings is None:
                self.auto_scale_settings = self._attr_to_rest_field["auto_scale_settings"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class NginxDeploymentScalingPropertiesAutoScaleSettings(_Model):  # pylint: disable=name-too-long
    """The settings for enabling automatic scaling of the deployment. If this field is specified,
    'scale.capacity' must be empty.

    :ivar profiles: Required.
    :vartype profiles: list[~azure.mgmt.nginx.models.ScaleProfile]
    """

    profiles: list["_models.ScaleProfile"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""

    @overload
    def __init__(
        self,
        *,
        profiles: list["_models.ScaleProfile"],
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxDeploymentUpdateParameters(_Model):
    """Nginx Deployment Update Parameters.

    :ivar identity: Identity Properties.
    :vartype identity: ~azure.mgmt.nginx.models.IdentityProperties
    :ivar tags: Dictionary of <string>.
    :vartype tags: dict[str, str]
    :ivar sku: Resource Sku.
    :vartype sku: ~azure.mgmt.nginx.models.ResourceSku
    :ivar location: The geo-location where the resource lives.
    :vartype location: str
    :ivar properties: Nginx Deployment Update Properties.
    :vartype properties: ~azure.mgmt.nginx.models.NginxDeploymentUpdateProperties
    """

    identity: Optional["_models.IdentityProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Identity Properties."""
    tags: Optional[dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Dictionary of <string>."""
    sku: Optional["_models.ResourceSku"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource Sku."""
    location: Optional[str] = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives."""
    properties: Optional["_models.NginxDeploymentUpdateProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Nginx Deployment Update Properties."""

    @overload
    def __init__(
        self,
        *,
        identity: Optional["_models.IdentityProperties"] = None,
        tags: Optional[dict[str, str]] = None,
        sku: Optional["_models.ResourceSku"] = None,
        location: Optional[str] = None,
        properties: Optional["_models.NginxDeploymentUpdateProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxDeploymentUpdateProperties(_Model):
    """Nginx Deployment Update Properties.

    :ivar enable_diagnostics_support:
    :vartype enable_diagnostics_support: bool
    :ivar logging: Nginx Logging.
    :vartype logging: ~azure.mgmt.nginx.models.NginxLogging
    :ivar scaling_properties: Information on how the deployment will be scaled.
    :vartype scaling_properties: ~azure.mgmt.nginx.models.NginxDeploymentScalingProperties
    :ivar user_profile: Nginx Deployment User Profile.
    :vartype user_profile: ~azure.mgmt.nginx.models.NginxDeploymentUserProfile
    :ivar network_profile: Nginx Network Profile.
    :vartype network_profile: ~azure.mgmt.nginx.models.NginxNetworkProfile
    :ivar auto_upgrade_profile: Autoupgrade settings of a deployment.
    :vartype auto_upgrade_profile: ~azure.mgmt.nginx.models.AutoUpgradeProfile
    :ivar nginx_app_protect: Update settings for NGINX App Protect (NAP).
    :vartype nginx_app_protect:
     ~azure.mgmt.nginx.models.NginxDeploymentUpdatePropertiesNginxAppProtect
    """

    enable_diagnostics_support: Optional[bool] = rest_field(
        name="enableDiagnosticsSupport", visibility=["read", "create", "update", "delete", "query"]
    )
    logging: Optional["_models.NginxLogging"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Nginx Logging."""
    scaling_properties: Optional["_models.NginxDeploymentScalingProperties"] = rest_field(
        name="scalingProperties", visibility=["read", "create", "update", "delete", "query"]
    )
    """Information on how the deployment will be scaled."""
    user_profile: Optional["_models.NginxDeploymentUserProfile"] = rest_field(
        name="userProfile", visibility=["read", "create", "update", "delete", "query"]
    )
    """Nginx Deployment User Profile."""
    network_profile: Optional["_models.NginxNetworkProfile"] = rest_field(
        name="networkProfile", visibility=["read", "create", "update", "delete", "query"]
    )
    """Nginx Network Profile."""
    auto_upgrade_profile: Optional["_models.AutoUpgradeProfile"] = rest_field(
        name="autoUpgradeProfile", visibility=["read", "create", "update", "delete", "query"]
    )
    """Autoupgrade settings of a deployment."""
    nginx_app_protect: Optional["_models.NginxDeploymentUpdatePropertiesNginxAppProtect"] = rest_field(
        name="nginxAppProtect", visibility=["read", "create", "update", "delete", "query"]
    )
    """Update settings for NGINX App Protect (NAP)."""

    @overload
    def __init__(
        self,
        *,
        enable_diagnostics_support: Optional[bool] = None,
        logging: Optional["_models.NginxLogging"] = None,
        scaling_properties: Optional["_models.NginxDeploymentScalingProperties"] = None,
        user_profile: Optional["_models.NginxDeploymentUserProfile"] = None,
        network_profile: Optional["_models.NginxNetworkProfile"] = None,
        auto_upgrade_profile: Optional["_models.AutoUpgradeProfile"] = None,
        nginx_app_protect: Optional["_models.NginxDeploymentUpdatePropertiesNginxAppProtect"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxDeploymentUpdatePropertiesNginxAppProtect(_Model):  # pylint: disable=name-too-long
    """Update settings for NGINX App Protect (NAP).

    :ivar web_application_firewall_settings: Settings for the NGINX App Protect Web Application
     Firewall (WAF).
    :vartype web_application_firewall_settings:
     ~azure.mgmt.nginx.models.WebApplicationFirewallSettings
    """

    web_application_firewall_settings: Optional["_models.WebApplicationFirewallSettings"] = rest_field(
        name="webApplicationFirewallSettings", visibility=["read", "create", "update", "delete", "query"]
    )
    """Settings for the NGINX App Protect Web Application Firewall (WAF)."""

    @overload
    def __init__(
        self,
        *,
        web_application_firewall_settings: Optional["_models.WebApplicationFirewallSettings"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxDeploymentUserProfile(_Model):
    """Nginx Deployment User Profile.

    :ivar preferred_email: The preferred support contact email address of the user used for sending
     alerts and notification. Can be an empty string or a valid email address.
    :vartype preferred_email: str
    """

    preferred_email: Optional[str] = rest_field(
        name="preferredEmail", visibility=["read", "create", "update", "delete", "query"]
    )
    """The preferred support contact email address of the user used for sending alerts and
     notification. Can be an empty string or a valid email address."""

    @overload
    def __init__(
        self,
        *,
        preferred_email: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxDeploymentWafPolicy(ProxyResource):
    """Nginx Deployment Waf Policy.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.nginx.models.SystemData
    :ivar properties: Nginx Deployment Waf Policy Properties.
    :vartype properties: ~azure.mgmt.nginx.models.NginxDeploymentWafPolicyProperties
    """

    properties: Optional["_models.NginxDeploymentWafPolicyProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Nginx Deployment Waf Policy Properties."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.NginxDeploymentWafPolicyProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxDeploymentWafPolicyApplyingStatus(_Model):
    """Nginx Deployment Waf Policy Applying Status.

    :ivar code: Machine readable code indicating the applying status code of a WAF Policy. Known
     values are: "NotApplied", "Applying", "Succeeded", "Failed", and "Removing".
    :vartype code: str or ~azure.mgmt.nginx.models.NginxDeploymentWafPolicyApplyingStatusCode
    :ivar display_status: A readable string of the current status, and sometimes have the reason
     for the current state.
    :vartype display_status: str
    :ivar time: The date and time in UTC the current applying status was set.
    :vartype time: str
    """

    code: Optional[Union[str, "_models.NginxDeploymentWafPolicyApplyingStatusCode"]] = rest_field(visibility=["read"])
    """Machine readable code indicating the applying status code of a WAF Policy. Known values are:
     \"NotApplied\", \"Applying\", \"Succeeded\", \"Failed\", and \"Removing\"."""
    display_status: Optional[str] = rest_field(name="displayStatus", visibility=["read"])
    """A readable string of the current status, and sometimes have the reason for the current state."""
    time: Optional[str] = rest_field(visibility=["read"])
    """The date and time in UTC the current applying status was set."""


class NginxDeploymentWafPolicyCompilingStatus(_Model):
    """Nginx Deployment Waf Policy Compiling Status.

    :ivar code: Machine readable code indicating the compilation status of a WAF Policy. Known
     values are: "NotStarted", "InProgress", "Succeeded", and "Failed".
    :vartype code: str or ~azure.mgmt.nginx.models.NginxDeploymentWafPolicyCompilingStatusCode
    :ivar display_status: A readable string of the current status, and sometimes have the reason
     for the current state. If the CompilingStatus is Failed the Display Status will be The waf
     Policy failed to compile.
    :vartype display_status: str
    :ivar time: The date and time the policy was compiled in UTC.
    :vartype time: str
    """

    code: Optional[Union[str, "_models.NginxDeploymentWafPolicyCompilingStatusCode"]] = rest_field(visibility=["read"])
    """Machine readable code indicating the compilation status of a WAF Policy. Known values are:
     \"NotStarted\", \"InProgress\", \"Succeeded\", and \"Failed\"."""
    display_status: Optional[str] = rest_field(name="displayStatus", visibility=["read"])
    """A readable string of the current status, and sometimes have the reason for the current state.
     If the CompilingStatus is Failed the Display Status will be The waf Policy failed to compile."""
    time: Optional[str] = rest_field(visibility=["read"])
    """The date and time the policy was compiled in UTC."""


class NginxDeploymentWafPolicyMetadata(_Model):
    """Nginx Deployment Waf Policy Metadata.

    :ivar id:
    :vartype id: str
    :ivar name:
    :vartype name: str
    :ivar type:
    :vartype type: str
    :ivar properties: Nginx Deployment Waf Policy Metadata Properties.
    :vartype properties: ~azure.mgmt.nginx.models.NginxDeploymentWafPolicyMetadataProperties
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.nginx.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    name: Optional[str] = rest_field(visibility=["read"])
    type: Optional[str] = rest_field(visibility=["read"])
    properties: Optional["_models.NginxDeploymentWafPolicyMetadataProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Nginx Deployment Waf Policy Metadata Properties."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Metadata pertaining to creation and last modification of the resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.NginxDeploymentWafPolicyMetadataProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxDeploymentWafPolicyMetadataProperties(_Model):  # pylint: disable=name-too-long
    """Nginx Deployment Waf Policy Metadata Properties.

    :ivar filepath:
    :vartype filepath: str
    :ivar provisioning_state: Provisioning State. Known values are: "Accepted", "Creating",
     "Updating", "Deleting", "Succeeded", "Failed", "Canceled", "Deleted", and "NotSpecified".
    :vartype provisioning_state: str or ~azure.mgmt.nginx.models.ProvisioningState
    :ivar compiling_state: Nginx Deployment Waf Policy Compiling Status.
    :vartype compiling_state: ~azure.mgmt.nginx.models.NginxDeploymentWafPolicyCompilingStatus
    :ivar applying_state: Nginx Deployment Waf Policy Applying Status.
    :vartype applying_state: ~azure.mgmt.nginx.models.NginxDeploymentWafPolicyApplyingStatus
    """

    filepath: Optional[str] = rest_field(visibility=["read"])
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning State. Known values are: \"Accepted\", \"Creating\", \"Updating\", \"Deleting\",
     \"Succeeded\", \"Failed\", \"Canceled\", \"Deleted\", and \"NotSpecified\"."""
    compiling_state: Optional["_models.NginxDeploymentWafPolicyCompilingStatus"] = rest_field(
        name="compilingState", visibility=["read"]
    )
    """Nginx Deployment Waf Policy Compiling Status."""
    applying_state: Optional["_models.NginxDeploymentWafPolicyApplyingStatus"] = rest_field(
        name="applyingState", visibility=["read"]
    )
    """Nginx Deployment Waf Policy Applying Status."""


class NginxDeploymentWafPolicyProperties(_Model):
    """Nginx Deployment Waf Policy Properties.

    :ivar provisioning_state: Provisioning State. Known values are: "Accepted", "Creating",
     "Updating", "Deleting", "Succeeded", "Failed", "Canceled", "Deleted", and "NotSpecified".
    :vartype provisioning_state: str or ~azure.mgmt.nginx.models.ProvisioningState
    :ivar content: The byte content of the Policy.
    :vartype content: bytes
    :ivar filepath: The file path where the Policy is to be saved.
    :vartype filepath: str
    :ivar compiling_state: Nginx Deployment Waf Policy Compiling Status.
    :vartype compiling_state: ~azure.mgmt.nginx.models.NginxDeploymentWafPolicyCompilingStatus
    :ivar applying_state: Nginx Deployment Waf Policy Applying Status.
    :vartype applying_state: ~azure.mgmt.nginx.models.NginxDeploymentWafPolicyApplyingStatus
    """

    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning State. Known values are: \"Accepted\", \"Creating\", \"Updating\", \"Deleting\",
     \"Succeeded\", \"Failed\", \"Canceled\", \"Deleted\", and \"NotSpecified\"."""
    content: Optional[bytes] = rest_field(visibility=["read", "create", "update", "delete", "query"], format="base64")
    """The byte content of the Policy."""
    filepath: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The file path where the Policy is to be saved."""
    compiling_state: Optional["_models.NginxDeploymentWafPolicyCompilingStatus"] = rest_field(
        name="compilingState", visibility=["read"]
    )
    """Nginx Deployment Waf Policy Compiling Status."""
    applying_state: Optional["_models.NginxDeploymentWafPolicyApplyingStatus"] = rest_field(
        name="applyingState", visibility=["read"]
    )
    """Nginx Deployment Waf Policy Applying Status."""

    @overload
    def __init__(
        self,
        *,
        content: Optional[bytes] = None,
        filepath: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxFrontendIPConfiguration(_Model):
    """Nginx Frontend IP Configuration.

    :ivar public_ip_addresses:
    :vartype public_ip_addresses: list[~azure.mgmt.nginx.models.NginxPublicIPAddress]
    :ivar private_ip_addresses:
    :vartype private_ip_addresses: list[~azure.mgmt.nginx.models.NginxPrivateIPAddress]
    """

    public_ip_addresses: Optional[list["_models.NginxPublicIPAddress"]] = rest_field(
        name="publicIPAddresses", visibility=["read", "create", "update", "delete", "query"]
    )
    private_ip_addresses: Optional[list["_models.NginxPrivateIPAddress"]] = rest_field(
        name="privateIPAddresses", visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        public_ip_addresses: Optional[list["_models.NginxPublicIPAddress"]] = None,
        private_ip_addresses: Optional[list["_models.NginxPrivateIPAddress"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxLogging(_Model):
    """Nginx Logging.

    :ivar storage_account: Nginx Storage Account.
    :vartype storage_account: ~azure.mgmt.nginx.models.NginxStorageAccount
    """

    storage_account: Optional["_models.NginxStorageAccount"] = rest_field(
        name="storageAccount", visibility=["read", "create", "update", "delete", "query"]
    )
    """Nginx Storage Account."""

    @overload
    def __init__(
        self,
        *,
        storage_account: Optional["_models.NginxStorageAccount"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxNetworkInterfaceConfiguration(_Model):
    """Nginx Network Interface Configuration.

    :ivar subnet_id:
    :vartype subnet_id: str
    """

    subnet_id: Optional[str] = rest_field(name="subnetId", visibility=["read", "create", "update", "delete", "query"])

    @overload
    def __init__(
        self,
        *,
        subnet_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxNetworkProfile(_Model):
    """Nginx Network Profile.

    :ivar front_end_ip_configuration: Nginx Frontend IP Configuration.
    :vartype front_end_ip_configuration: ~azure.mgmt.nginx.models.NginxFrontendIPConfiguration
    :ivar network_interface_configuration: Nginx Network Interface Configuration.
    :vartype network_interface_configuration:
     ~azure.mgmt.nginx.models.NginxNetworkInterfaceConfiguration
    """

    front_end_ip_configuration: Optional["_models.NginxFrontendIPConfiguration"] = rest_field(
        name="frontEndIPConfiguration", visibility=["read", "create", "update", "delete", "query"]
    )
    """Nginx Frontend IP Configuration."""
    network_interface_configuration: Optional["_models.NginxNetworkInterfaceConfiguration"] = rest_field(
        name="networkInterfaceConfiguration", visibility=["read", "create", "update", "delete", "query"]
    )
    """Nginx Network Interface Configuration."""

    @overload
    def __init__(
        self,
        *,
        front_end_ip_configuration: Optional["_models.NginxFrontendIPConfiguration"] = None,
        network_interface_configuration: Optional["_models.NginxNetworkInterfaceConfiguration"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxPrivateIPAddress(_Model):
    """Nginx Private IP Address.

    :ivar private_ip_address:
    :vartype private_ip_address: str
    :ivar private_ip_allocation_method: Nginx Private IP Allocation Method. Known values are:
     "Static" and "Dynamic".
    :vartype private_ip_allocation_method: str or
     ~azure.mgmt.nginx.models.NginxPrivateIPAllocationMethod
    :ivar subnet_id:
    :vartype subnet_id: str
    """

    private_ip_address: Optional[str] = rest_field(
        name="privateIPAddress", visibility=["read", "create", "update", "delete", "query"]
    )
    private_ip_allocation_method: Optional[Union[str, "_models.NginxPrivateIPAllocationMethod"]] = rest_field(
        name="privateIPAllocationMethod", visibility=["read", "create", "update", "delete", "query"]
    )
    """Nginx Private IP Allocation Method. Known values are: \"Static\" and \"Dynamic\"."""
    subnet_id: Optional[str] = rest_field(name="subnetId", visibility=["read", "create", "update", "delete", "query"])

    @overload
    def __init__(
        self,
        *,
        private_ip_address: Optional[str] = None,
        private_ip_allocation_method: Optional[Union[str, "_models.NginxPrivateIPAllocationMethod"]] = None,
        subnet_id: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxPublicIPAddress(_Model):
    """Nginx Public IP Address.

    :ivar id:
    :vartype id: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class NginxStorageAccount(_Model):
    """Nginx Storage Account.

    :ivar account_name:
    :vartype account_name: str
    :ivar container_name:
    :vartype container_name: str
    """

    account_name: Optional[str] = rest_field(
        name="accountName", visibility=["read", "create", "update", "delete", "query"]
    )
    container_name: Optional[str] = rest_field(
        name="containerName", visibility=["read", "create", "update", "delete", "query"]
    )

    @overload
    def __init__(
        self,
        *,
        account_name: Optional[str] = None,
        container_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Operation(_Model):
    """REST API Operation.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for Azure Resource Manager/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.nginx.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.nginx.models.Origin
    :ivar action_type: Extensible enum. Indicates the action type. "Internal" refers to actions
     that are for internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.nginx.models.ActionType
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     \"Microsoft.Compute/virtualMachines/write\",
     \"Microsoft.Compute/virtualMachines/capture/action\"."""
    is_data_action: Optional[bool] = rest_field(name="isDataAction", visibility=["read"])
    """Whether the operation applies to data-plane. This is \"true\" for data-plane operations and
     \"false\" for Azure Resource Manager/control-plane operations."""
    display: Optional["_models.OperationDisplay"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Localized display information for this particular operation."""
    origin: Optional[Union[str, "_models.Origin"]] = rest_field(visibility=["read"])
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
     logs UX. Default value is \"user,system\". Known values are: \"user\", \"system\", and
     \"user,system\"."""
    action_type: Optional[Union[str, "_models.ActionType"]] = rest_field(name="actionType", visibility=["read"])
    """Extensible enum. Indicates the action type. \"Internal\" refers to actions that are for
     internal only APIs. \"Internal\""""

    @overload
    def __init__(
        self,
        *,
        display: Optional["_models.OperationDisplay"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationDisplay(_Model):
    """Localized display information for and operation.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    provider: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring
     Insights\" or \"Microsoft Compute\"."""
    resource: Optional[str] = rest_field(visibility=["read"])
    """The localized friendly name of the resource type related to this operation. E.g. \"Virtual
     Machines\" or \"Job Schedule Collections\"."""
    operation: Optional[str] = rest_field(visibility=["read"])
    """The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create
     or Update Virtual Machine\", \"Restart Virtual Machine\"."""
    description: Optional[str] = rest_field(visibility=["read"])
    """The short, localized friendly description of the operation; suitable for tool tips and detailed
     views."""


class ResourceSku(_Model):
    """Resource Sku.

    :ivar name: Name of the SKU. Required.
    :vartype name: str
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the SKU. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ScaleProfile(_Model):
    """The autoscale profile.

    :ivar name: Required.
    :vartype name: str
    :ivar capacity: The capacity parameters of the profile. Required.
    :vartype capacity: ~azure.mgmt.nginx.models.ScaleProfileCapacity
    """

    name: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Required."""
    capacity: "_models.ScaleProfileCapacity" = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The capacity parameters of the profile. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        capacity: "_models.ScaleProfileCapacity",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ScaleProfileCapacity(_Model):
    """The capacity parameters of the profile.

    :ivar min: The minimum number of NCUs the deployment can be autoscaled to. Required.
    :vartype min: int
    :ivar max: The maximum number of NCUs the deployment can be autoscaled to. Required.
    :vartype max: int
    """

    min: int = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The minimum number of NCUs the deployment can be autoscaled to. Required."""
    max: int = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The maximum number of NCUs the deployment can be autoscaled to. Required."""

    @overload
    def __init__(
        self,
        *,
        min: int,  # pylint: disable=redefined-builtin
        max: int,  # pylint: disable=redefined-builtin
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.nginx.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.nginx.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read", "create", "update", "delete", "query"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(
        name="lastModifiedBy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(
        name="lastModifiedAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserIdentityProperties(_Model):
    """User Identity Properties.

    :ivar principal_id:
    :vartype principal_id: str
    :ivar client_id:
    :vartype client_id: str
    """

    principal_id: Optional[str] = rest_field(name="principalId", visibility=["read"])
    client_id: Optional[str] = rest_field(name="clientId", visibility=["read"])


class WebApplicationFirewallComponentVersions(_Model):
    """Versions of the NGINX App Protect Web Application Firewall (WAF) components.

    :ivar waf_engine_version: The version of the NGINX App Protect Web Application Firewall (WAF)
     engine. Required.
    :vartype waf_engine_version: str
    :ivar waf_nginx_version: The version of the NGINX App Protect Web Application Firewall (WAF)
     module for NGINX. Required.
    :vartype waf_nginx_version: str
    """

    waf_engine_version: str = rest_field(
        name="wafEngineVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """The version of the NGINX App Protect Web Application Firewall (WAF) engine. Required."""
    waf_nginx_version: str = rest_field(
        name="wafNginxVersion", visibility=["read", "create", "update", "delete", "query"]
    )
    """The version of the NGINX App Protect Web Application Firewall (WAF) module for NGINX. Required."""

    @overload
    def __init__(
        self,
        *,
        waf_engine_version: str,
        waf_nginx_version: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WebApplicationFirewallPackage(_Model):
    """NGINX App Protect Web Application Firewall (WAF) Package. Contains the version and revision
    date of the package.

    :ivar version: The version of the NGINX App Protect Web Application Firewall (WAF) package.
     Required.
    :vartype version: str
    :ivar revision_datetime: The date and time of the package revision. Required.
    :vartype revision_datetime: ~datetime.datetime
    """

    version: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The version of the NGINX App Protect Web Application Firewall (WAF) package. Required."""
    revision_datetime: datetime.datetime = rest_field(
        name="revisionDatetime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The date and time of the package revision. Required."""

    @overload
    def __init__(
        self,
        *,
        version: str,
        revision_datetime: datetime.datetime,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WebApplicationFirewallSettings(_Model):
    """Settings for the NGINX App Protect Web Application Firewall (WAF).

    :ivar activation_state: The activation state of the WAF. Use 'Enabled' to enable the WAF and
     'Disabled' to disable it. Known values are: "Enabled" and "Disabled".
    :vartype activation_state: str or ~azure.mgmt.nginx.models.ActivationState
    """

    activation_state: Optional[Union[str, "_models.ActivationState"]] = rest_field(
        name="activationState", visibility=["read", "create", "update", "delete", "query"]
    )
    """The activation state of the WAF. Use 'Enabled' to enable the WAF and 'Disabled' to disable it.
     Known values are: \"Enabled\" and \"Disabled\"."""

    @overload
    def __init__(
        self,
        *,
        activation_state: Optional[Union[str, "_models.ActivationState"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class WebApplicationFirewallStatus(_Model):
    """The status of the NGINX App Protect Web Application Firewall.

    :ivar waf_release: NGINX App Protect WAF release version.
    :vartype waf_release: str
    :ivar attack_signatures_package: Package containing attack signatures for the NGINX App Protect
     Web Application Firewall (WAF).
    :vartype attack_signatures_package: ~azure.mgmt.nginx.models.WebApplicationFirewallPackage
    :ivar bot_signatures_package: Package containing bot signatures for the NGINX App Protect Web
     Application Firewall (WAF).
    :vartype bot_signatures_package: ~azure.mgmt.nginx.models.WebApplicationFirewallPackage
    :ivar threat_campaigns_package: Package containing threat campaigns for the NGINX App Protect
     Web Application Firewall (WAF).
    :vartype threat_campaigns_package: ~azure.mgmt.nginx.models.WebApplicationFirewallPackage
    :ivar component_versions: Versions of the NGINX App Protect Web Application Firewall (WAF)
     components.
    :vartype component_versions: ~azure.mgmt.nginx.models.WebApplicationFirewallComponentVersions
    """

    waf_release: Optional[str] = rest_field(
        name="wafRelease", visibility=["read", "create", "update", "delete", "query"]
    )
    """NGINX App Protect WAF release version."""
    attack_signatures_package: Optional["_models.WebApplicationFirewallPackage"] = rest_field(
        name="attackSignaturesPackage", visibility=["read"]
    )
    """Package containing attack signatures for the NGINX App Protect Web Application Firewall (WAF)."""
    bot_signatures_package: Optional["_models.WebApplicationFirewallPackage"] = rest_field(
        name="botSignaturesPackage", visibility=["read"]
    )
    """Package containing bot signatures for the NGINX App Protect Web Application Firewall (WAF)."""
    threat_campaigns_package: Optional["_models.WebApplicationFirewallPackage"] = rest_field(
        name="threatCampaignsPackage", visibility=["read"]
    )
    """Package containing threat campaigns for the NGINX App Protect Web Application Firewall (WAF)."""
    component_versions: Optional["_models.WebApplicationFirewallComponentVersions"] = rest_field(
        name="componentVersions", visibility=["read"]
    )
    """Versions of the NGINX App Protect Web Application Firewall (WAF) components."""

    @overload
    def __init__(
        self,
        *,
        waf_release: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
