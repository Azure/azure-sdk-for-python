# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Literal, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_discriminator, rest_field
from ._enums import InventoryType

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class Resource(_model_base.Model):
    """Common properties for all Azure Resource Manager resources.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long"""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""
    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AvailabilitySet(TrackedResource):
    """The AvailabilitySets resource definition.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.scvmm.models.AvailabilitySetProperties
    :ivar extended_location: The extended location. Required.
    :vartype extended_location: ~azure.mgmt.scvmm.models.ExtendedLocation
    """

    properties: Optional["_models.AvailabilitySetProperties"] = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource."""
    extended_location: "_models.ExtendedLocation" = rest_field(name="extendedLocation")
    """The extended location. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        extended_location: "_models.ExtendedLocation",
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.AvailabilitySetProperties"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AvailabilitySetListItem(_model_base.Model):
    """Availability Set model.

    :ivar id: Gets the ARM Id of the microsoft.scvmm/availabilitySets resource.
    :vartype id: str
    :ivar name: Gets or sets the name of the availability set.
    :vartype name: str
    """

    id: Optional[str] = rest_field()
    """Gets the ARM Id of the microsoft.scvmm/availabilitySets resource."""
    name: Optional[str] = rest_field()
    """Gets or sets the name of the availability set."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AvailabilitySetProperties(_model_base.Model):
    """Defines the resource properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar availability_set_name: Name of the availability set.
    :vartype availability_set_name: str
    :ivar vmm_server_id: ARM Id of the vmmServer resource in which this resource resides.
    :vartype vmm_server_id: str
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted", and "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ResourceProvisioningState
    """

    availability_set_name: Optional[str] = rest_field(name="availabilitySetName")
    """Name of the availability set."""
    vmm_server_id: Optional[str] = rest_field(name="vmmServerId")
    """ARM Id of the vmmServer resource in which this resource resides."""
    provisioning_state: Optional[Union[str, "_models.ResourceProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the resource. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", \"Accepted\", and \"Created\"."""

    @overload
    def __init__(
        self,
        *,
        availability_set_name: Optional[str] = None,
        vmm_server_id: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AvailabilitySetTagsUpdate(_model_base.Model):
    """The type used for updating tags in AvailabilitySet resources.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Checkpoint(_model_base.Model):
    """Defines the resource properties.

    :ivar parent_checkpoint_id: Gets ID of parent of the checkpoint.
    :vartype parent_checkpoint_id: str
    :ivar checkpoint_id: Gets ID of the checkpoint.
    :vartype checkpoint_id: str
    :ivar name: Gets name of the checkpoint.
    :vartype name: str
    :ivar description: Gets description of the checkpoint.
    :vartype description: str
    """

    parent_checkpoint_id: Optional[str] = rest_field(name="parentCheckpointID")
    """Gets ID of parent of the checkpoint."""
    checkpoint_id: Optional[str] = rest_field(name="checkpointID")
    """Gets ID of the checkpoint."""
    name: Optional[str] = rest_field()
    """Gets name of the checkpoint."""
    description: Optional[str] = rest_field()
    """Gets description of the checkpoint."""

    @overload
    def __init__(
        self,
        *,
        parent_checkpoint_id: Optional[str] = None,
        checkpoint_id: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Cloud(TrackedResource):
    """The Clouds resource definition.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.scvmm.models.CloudProperties
    :ivar extended_location: The extended location. Required.
    :vartype extended_location: ~azure.mgmt.scvmm.models.ExtendedLocation
    """

    properties: Optional["_models.CloudProperties"] = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource."""
    extended_location: "_models.ExtendedLocation" = rest_field(name="extendedLocation")
    """The extended location. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        extended_location: "_models.ExtendedLocation",
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.CloudProperties"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class CloudCapacity(_model_base.Model):
    """Cloud Capacity model.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar cpu_count: CPUCount specifies the maximum number of CPUs that can be allocated in the
     cloud.
    :vartype cpu_count: int
    :ivar memory_m_b: MemoryMB specifies a memory usage limit in megabytes.
    :vartype memory_m_b: int
    :ivar vm_count: VMCount gives the max number of VMs that can be deployed in the cloud.
    :vartype vm_count: int
    """

    cpu_count: Optional[int] = rest_field(name="cpuCount", visibility=["read"])
    """CPUCount specifies the maximum number of CPUs that can be allocated in the cloud."""
    memory_m_b: Optional[int] = rest_field(name="memoryMB", visibility=["read"])
    """MemoryMB specifies a memory usage limit in megabytes."""
    vm_count: Optional[int] = rest_field(name="vmCount", visibility=["read"])
    """VMCount gives the max number of VMs that can be deployed in the cloud."""


class InventoryItemProperties(_model_base.Model):
    """Defines the resource properties.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    CloudInventoryItem, VirtualMachineInventoryItem, VirtualMachineTemplateInventoryItem,
    VirtualNetworkInventoryItem

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar inventory_type: They inventory type. Required. Known values are: "Cloud",
     "VirtualNetwork", "VirtualMachine", and "VirtualMachineTemplate".
    :vartype inventory_type: str or ~azure.mgmt.scvmm.models.InventoryType
    :ivar managed_resource_id: Gets the tracked resource id corresponding to the inventory
     resource.
    :vartype managed_resource_id: str
    :ivar uuid: Gets the UUID (which is assigned by Vmm) for the inventory item.
    :vartype uuid: str
    :ivar inventory_item_name: Gets the Managed Object name in Vmm for the inventory item.
    :vartype inventory_item_name: str
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted", and "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ResourceProvisioningState
    """

    __mapping__: Dict[str, _model_base.Model] = {}
    inventory_type: str = rest_discriminator(name="inventoryType")
    """They inventory type. Required. Known values are: \"Cloud\", \"VirtualNetwork\",
     \"VirtualMachine\", and \"VirtualMachineTemplate\"."""
    managed_resource_id: Optional[str] = rest_field(name="managedResourceId", visibility=["read"])
    """Gets the tracked resource id corresponding to the inventory resource."""
    uuid: Optional[str] = rest_field(visibility=["read"])
    """Gets the UUID (which is assigned by Vmm) for the inventory item."""
    inventory_item_name: Optional[str] = rest_field(name="inventoryItemName", visibility=["read"])
    """Gets the Managed Object name in Vmm for the inventory item."""
    provisioning_state: Optional[Union[str, "_models.ResourceProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the resource. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", \"Accepted\", and \"Created\"."""

    @overload
    def __init__(
        self,
        *,
        inventory_type: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class CloudInventoryItem(InventoryItemProperties, discriminator="Cloud"):
    """The Cloud inventory item.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar managed_resource_id: Gets the tracked resource id corresponding to the inventory
     resource.
    :vartype managed_resource_id: str
    :ivar uuid: Gets the UUID (which is assigned by Vmm) for the inventory item.
    :vartype uuid: str
    :ivar inventory_item_name: Gets the Managed Object name in Vmm for the inventory item.
    :vartype inventory_item_name: str
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted", and "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ResourceProvisioningState
    :ivar inventory_type: They inventory type. Required. Cloud inventory type
    :vartype inventory_type: str or ~azure.mgmt.scvmm.models.CLOUD
    """

    inventory_type: Literal[InventoryType.CLOUD] = rest_discriminator(name="inventoryType")  # type: ignore
    """They inventory type. Required. Cloud inventory type"""


class CloudProperties(_model_base.Model):
    """Defines the resource properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar inventory_item_id: Gets or sets the inventory Item ID for the resource.
    :vartype inventory_item_id: str
    :ivar uuid: Unique ID of the cloud.
    :vartype uuid: str
    :ivar vmm_server_id: ARM Id of the vmmServer resource in which this resource resides.
    :vartype vmm_server_id: str
    :ivar cloud_name: Name of the cloud in VmmServer.
    :vartype cloud_name: str
    :ivar cloud_capacity: Capacity of the cloud.
    :vartype cloud_capacity: ~azure.mgmt.scvmm.models.CloudCapacity
    :ivar storage_qos_policies: List of QoS policies available for the cloud.
    :vartype storage_qos_policies: list[~azure.mgmt.scvmm.models.StorageQosPolicy]
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted", and "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ResourceProvisioningState
    """

    inventory_item_id: Optional[str] = rest_field(name="inventoryItemId")
    """Gets or sets the inventory Item ID for the resource."""
    uuid: Optional[str] = rest_field()
    """Unique ID of the cloud."""
    vmm_server_id: Optional[str] = rest_field(name="vmmServerId")
    """ARM Id of the vmmServer resource in which this resource resides."""
    cloud_name: Optional[str] = rest_field(name="cloudName", visibility=["read"])
    """Name of the cloud in VmmServer."""
    cloud_capacity: Optional["_models.CloudCapacity"] = rest_field(name="cloudCapacity", visibility=["read"])
    """Capacity of the cloud."""
    storage_qos_policies: Optional[List["_models.StorageQosPolicy"]] = rest_field(
        name="storageQoSPolicies", visibility=["read"]
    )
    """List of QoS policies available for the cloud."""
    provisioning_state: Optional[Union[str, "_models.ResourceProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the resource. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", \"Accepted\", and \"Created\"."""

    @overload
    def __init__(
        self,
        *,
        inventory_item_id: Optional[str] = None,
        uuid: Optional[str] = None,
        vmm_server_id: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class CloudTagsUpdate(_model_base.Model):
    """The type used for updating tags in Cloud resources.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_model_base.Model):
    """The resource management error additional info.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_model_base.Model):
    """The error detail.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.scvmm.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.scvmm.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_model_base.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.scvmm.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field()
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ExtendedLocation(_model_base.Model):
    """The extended location.

    :ivar type: The extended location type.
    :vartype type: str
    :ivar name: The extended location name.
    :vartype name: str
    """

    type: Optional[str] = rest_field()
    """The extended location type."""
    name: Optional[str] = rest_field()
    """The extended location name."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[str] = None,
        name: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ExtensionResource(Resource):
    """The base extension resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    """


class ProxyResource(Resource):
    """The base proxy resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    """


class GuestAgent(ProxyResource):
    """Defines the GuestAgent.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.scvmm.models.GuestAgentProperties
    """

    properties: Optional["_models.GuestAgentProperties"] = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.GuestAgentProperties"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class GuestAgentProperties(_model_base.Model):
    """Defines the resource properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar uuid: Gets a unique identifier for this resource.
    :vartype uuid: str
    :ivar credentials: Username / Password Credentials to provision guest agent.
    :vartype credentials: ~azure.mgmt.scvmm.models.GuestCredential
    :ivar http_proxy_config: HTTP Proxy configuration for the VM.
    :vartype http_proxy_config: ~azure.mgmt.scvmm.models.HttpProxyConfiguration
    :ivar provisioning_action: Gets or sets the guest agent provisioning action. Known values are:
     "install", "uninstall", and "repair".
    :vartype provisioning_action: str or ~azure.mgmt.scvmm.models.ProvisioningAction
    :ivar status: Gets the guest agent status.
    :vartype status: str
    :ivar custom_resource_name: Gets the name of the corresponding resource in Kubernetes.
    :vartype custom_resource_name: str
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted", and "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ResourceProvisioningState
    """

    uuid: Optional[str] = rest_field(visibility=["read"])
    """Gets a unique identifier for this resource."""
    credentials: Optional["_models.GuestCredential"] = rest_field()
    """Username / Password Credentials to provision guest agent."""
    http_proxy_config: Optional["_models.HttpProxyConfiguration"] = rest_field(name="httpProxyConfig")
    """HTTP Proxy configuration for the VM."""
    provisioning_action: Optional[Union[str, "_models.ProvisioningAction"]] = rest_field(name="provisioningAction")
    """Gets or sets the guest agent provisioning action. Known values are: \"install\", \"uninstall\",
     and \"repair\"."""
    status: Optional[str] = rest_field(visibility=["read"])
    """Gets the guest agent status."""
    custom_resource_name: Optional[str] = rest_field(name="customResourceName", visibility=["read"])
    """Gets the name of the corresponding resource in Kubernetes."""
    provisioning_state: Optional[Union[str, "_models.ResourceProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the resource. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", \"Accepted\", and \"Created\"."""

    @overload
    def __init__(
        self,
        *,
        credentials: Optional["_models.GuestCredential"] = None,
        http_proxy_config: Optional["_models.HttpProxyConfiguration"] = None,
        provisioning_action: Optional[Union[str, "_models.ProvisioningAction"]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class GuestCredential(_model_base.Model):
    """Username / Password Credentials to connect to guest.

    All required parameters must be populated in order to send to server.

    :ivar username: Gets or sets username to connect with the guest. Required.
    :vartype username: str
    :ivar password: Gets or sets the password to connect with the guest. Required.
    :vartype password: str
    """

    username: str = rest_field()
    """Gets or sets username to connect with the guest. Required."""
    password: str = rest_field(visibility=["create", "update"])
    """Gets or sets the password to connect with the guest. Required."""

    @overload
    def __init__(
        self,
        *,
        username: str,
        password: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class HardwareProfile(_model_base.Model):
    """Defines the resource properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar memory_m_b: MemoryMB is the size of a virtual machine's memory, in MB.
    :vartype memory_m_b: int
    :ivar cpu_count: Gets or sets the number of vCPUs for the vm.
    :vartype cpu_count: int
    :ivar limit_cpu_for_migration: Gets or sets a value indicating whether to enable processor
     compatibility mode for live migration of VMs. Known values are: "true" and "false".
    :vartype limit_cpu_for_migration: str or ~azure.mgmt.scvmm.models.LimitCpuForMigration
    :ivar dynamic_memory_enabled: Gets or sets a value indicating whether to enable dynamic memory
     or not. Known values are: "true" and "false".
    :vartype dynamic_memory_enabled: str or ~azure.mgmt.scvmm.models.DynamicMemoryEnabled
    :ivar dynamic_memory_max_m_b: Gets or sets the max dynamic memory for the vm.
    :vartype dynamic_memory_max_m_b: int
    :ivar dynamic_memory_min_m_b: Gets or sets the min dynamic memory for the vm.
    :vartype dynamic_memory_min_m_b: int
    :ivar is_highly_available: Gets highly available property. Known values are: "true" and
     "false".
    :vartype is_highly_available: str or ~azure.mgmt.scvmm.models.IsHighlyAvailable
    """

    memory_m_b: Optional[int] = rest_field(name="memoryMB")
    """MemoryMB is the size of a virtual machine's memory, in MB."""
    cpu_count: Optional[int] = rest_field(name="cpuCount")
    """Gets or sets the number of vCPUs for the vm."""
    limit_cpu_for_migration: Optional[Union[str, "_models.LimitCpuForMigration"]] = rest_field(
        name="limitCpuForMigration"
    )
    """Gets or sets a value indicating whether to enable processor compatibility mode for live
     migration of VMs. Known values are: \"true\" and \"false\"."""
    dynamic_memory_enabled: Optional[Union[str, "_models.DynamicMemoryEnabled"]] = rest_field(
        name="dynamicMemoryEnabled"
    )
    """Gets or sets a value indicating whether to enable dynamic memory or not. Known values are:
     \"true\" and \"false\"."""
    dynamic_memory_max_m_b: Optional[int] = rest_field(name="dynamicMemoryMaxMB")
    """Gets or sets the max dynamic memory for the vm."""
    dynamic_memory_min_m_b: Optional[int] = rest_field(name="dynamicMemoryMinMB")
    """Gets or sets the min dynamic memory for the vm."""
    is_highly_available: Optional[Union[str, "_models.IsHighlyAvailable"]] = rest_field(
        name="isHighlyAvailable", visibility=["read"]
    )
    """Gets highly available property. Known values are: \"true\" and \"false\"."""

    @overload
    def __init__(
        self,
        *,
        memory_m_b: Optional[int] = None,
        cpu_count: Optional[int] = None,
        limit_cpu_for_migration: Optional[Union[str, "_models.LimitCpuForMigration"]] = None,
        dynamic_memory_enabled: Optional[Union[str, "_models.DynamicMemoryEnabled"]] = None,
        dynamic_memory_max_m_b: Optional[int] = None,
        dynamic_memory_min_m_b: Optional[int] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class HardwareProfileUpdate(_model_base.Model):
    """Defines the resource update properties.

    :ivar memory_m_b: MemoryMB is the size of a virtual machine's memory, in MB.
    :vartype memory_m_b: int
    :ivar cpu_count: Gets or sets the number of vCPUs for the vm.
    :vartype cpu_count: int
    :ivar limit_cpu_for_migration: Gets or sets a value indicating whether to enable processor
     compatibility mode for live migration of VMs. Known values are: "true" and "false".
    :vartype limit_cpu_for_migration: str or ~azure.mgmt.scvmm.models.LimitCpuForMigration
    :ivar dynamic_memory_enabled: Gets or sets a value indicating whether to enable dynamic memory
     or not. Known values are: "true" and "false".
    :vartype dynamic_memory_enabled: str or ~azure.mgmt.scvmm.models.DynamicMemoryEnabled
    :ivar dynamic_memory_max_m_b: Gets or sets the max dynamic memory for the vm.
    :vartype dynamic_memory_max_m_b: int
    :ivar dynamic_memory_min_m_b: Gets or sets the min dynamic memory for the vm.
    :vartype dynamic_memory_min_m_b: int
    """

    memory_m_b: Optional[int] = rest_field(name="memoryMB")
    """MemoryMB is the size of a virtual machine's memory, in MB."""
    cpu_count: Optional[int] = rest_field(name="cpuCount")
    """Gets or sets the number of vCPUs for the vm."""
    limit_cpu_for_migration: Optional[Union[str, "_models.LimitCpuForMigration"]] = rest_field(
        name="limitCpuForMigration"
    )
    """Gets or sets a value indicating whether to enable processor compatibility mode for live
     migration of VMs. Known values are: \"true\" and \"false\"."""
    dynamic_memory_enabled: Optional[Union[str, "_models.DynamicMemoryEnabled"]] = rest_field(
        name="dynamicMemoryEnabled"
    )
    """Gets or sets a value indicating whether to enable dynamic memory or not. Known values are:
     \"true\" and \"false\"."""
    dynamic_memory_max_m_b: Optional[int] = rest_field(name="dynamicMemoryMaxMB")
    """Gets or sets the max dynamic memory for the vm."""
    dynamic_memory_min_m_b: Optional[int] = rest_field(name="dynamicMemoryMinMB")
    """Gets or sets the min dynamic memory for the vm."""

    @overload
    def __init__(
        self,
        *,
        memory_m_b: Optional[int] = None,
        cpu_count: Optional[int] = None,
        limit_cpu_for_migration: Optional[Union[str, "_models.LimitCpuForMigration"]] = None,
        dynamic_memory_enabled: Optional[Union[str, "_models.DynamicMemoryEnabled"]] = None,
        dynamic_memory_max_m_b: Optional[int] = None,
        dynamic_memory_min_m_b: Optional[int] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class HttpProxyConfiguration(_model_base.Model):
    """HTTP Proxy configuration for the VM.

    :ivar https_proxy: Gets or sets httpsProxy url.
    :vartype https_proxy: str
    """

    https_proxy: Optional[str] = rest_field(name="httpsProxy")
    """Gets or sets httpsProxy url."""

    @overload
    def __init__(
        self,
        *,
        https_proxy: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class InfrastructureProfile(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Specifies the vmmServer infrastructure specific settings for the virtual machine instance.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar inventory_item_id: Gets or sets the inventory Item ID for the resource.
    :vartype inventory_item_id: str
    :ivar vmm_server_id: ARM Id of the vmmServer resource in which this resource resides.
    :vartype vmm_server_id: str
    :ivar cloud_id: ARM Id of the cloud resource to use for deploying the vm.
    :vartype cloud_id: str
    :ivar template_id: ARM Id of the template resource to use for deploying the vm.
    :vartype template_id: str
    :ivar vm_name: VMName is the name of VM on the SCVmm server.
    :vartype vm_name: str
    :ivar uuid: Unique ID of the virtual machine.
    :vartype uuid: str
    :ivar last_restored_vm_checkpoint: Last restored checkpoint in the vm.
    :vartype last_restored_vm_checkpoint: ~azure.mgmt.scvmm.models.Checkpoint
    :ivar checkpoints: Checkpoints in the vm.
    :vartype checkpoints: list[~azure.mgmt.scvmm.models.Checkpoint]
    :ivar checkpoint_type: Type of checkpoint supported for the vm.
    :vartype checkpoint_type: str
    :ivar generation: Gets or sets the generation for the vm.
    :vartype generation: int
    :ivar bios_guid: Gets or sets the bios guid for the vm.
    :vartype bios_guid: str
    """

    inventory_item_id: Optional[str] = rest_field(name="inventoryItemId", visibility=["read", "create"])
    """Gets or sets the inventory Item ID for the resource."""
    vmm_server_id: Optional[str] = rest_field(name="vmmServerId", visibility=["read", "create"])
    """ARM Id of the vmmServer resource in which this resource resides."""
    cloud_id: Optional[str] = rest_field(name="cloudId", visibility=["read", "create"])
    """ARM Id of the cloud resource to use for deploying the vm."""
    template_id: Optional[str] = rest_field(name="templateId", visibility=["read", "create"])
    """ARM Id of the template resource to use for deploying the vm."""
    vm_name: Optional[str] = rest_field(name="vmName", visibility=["read", "create"])
    """VMName is the name of VM on the SCVmm server."""
    uuid: Optional[str] = rest_field(visibility=["read", "create"])
    """Unique ID of the virtual machine."""
    last_restored_vm_checkpoint: Optional["_models.Checkpoint"] = rest_field(
        name="lastRestoredVMCheckpoint", visibility=["read"]
    )
    """Last restored checkpoint in the vm."""
    checkpoints: Optional[List["_models.Checkpoint"]] = rest_field(visibility=["read"])
    """Checkpoints in the vm."""
    checkpoint_type: Optional[str] = rest_field(name="checkpointType", visibility=["read", "create", "update"])
    """Type of checkpoint supported for the vm."""
    generation: Optional[int] = rest_field(visibility=["read", "create"])
    """Gets or sets the generation for the vm."""
    bios_guid: Optional[str] = rest_field(name="biosGuid", visibility=["read", "create"])
    """Gets or sets the bios guid for the vm."""

    @overload
    def __init__(
        self,
        *,
        inventory_item_id: Optional[str] = None,
        vmm_server_id: Optional[str] = None,
        cloud_id: Optional[str] = None,
        template_id: Optional[str] = None,
        vm_name: Optional[str] = None,
        uuid: Optional[str] = None,
        checkpoint_type: Optional[str] = None,
        generation: Optional[int] = None,
        bios_guid: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class InfrastructureProfileUpdate(_model_base.Model):
    """Specifies the vmmServer infrastructure specific update settings for the virtual machine
    instance.

    :ivar checkpoint_type: Type of checkpoint supported for the vm.
    :vartype checkpoint_type: str
    """

    checkpoint_type: Optional[str] = rest_field(name="checkpointType", visibility=["read", "create", "update"])
    """Type of checkpoint supported for the vm."""

    @overload
    def __init__(
        self,
        *,
        checkpoint_type: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class InventoryItem(ProxyResource):
    """Defines the inventory item.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.scvmm.models.InventoryItemProperties
    :ivar kind: Metadata used by portal/tooling/etc to render different UX experiences for
     resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported,
     the resource provider must validate and persist this value.
    :vartype kind: str
    """

    properties: Optional["_models.InventoryItemProperties"] = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource."""
    kind: Optional[str] = rest_field()
    """Metadata used by portal/tooling/etc to render different UX experiences for resources of the
     same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource
     provider must validate and persist this value."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.InventoryItemProperties"] = None,
        kind: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class InventoryItemDetails(_model_base.Model):
    """Defines the resource properties.

    :ivar inventory_item_id: Gets or sets the inventory Item ID for the resource.
    :vartype inventory_item_id: str
    :ivar inventory_item_name: Gets or sets the Managed Object name in Vmm for the resource.
    :vartype inventory_item_name: str
    """

    inventory_item_id: Optional[str] = rest_field(name="inventoryItemId")
    """Gets or sets the inventory Item ID for the resource."""
    inventory_item_name: Optional[str] = rest_field(name="inventoryItemName")
    """Gets or sets the Managed Object name in Vmm for the resource."""

    @overload
    def __init__(
        self,
        *,
        inventory_item_id: Optional[str] = None,
        inventory_item_name: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class NetworkInterface(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Network Interface model.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Gets or sets the name of the network interface.
    :vartype name: str
    :ivar display_name: Gets the display name of the network interface as shown in the vmmServer.
     This is the fallback label for a NIC when the name is not set.
    :vartype display_name: str
    :ivar ipv4_addresses: Gets the nic ipv4 addresses.
    :vartype ipv4_addresses: list[str]
    :ivar ipv6_addresses: Gets the nic ipv6 addresses.
    :vartype ipv6_addresses: list[str]
    :ivar mac_address: Gets or sets the nic MAC address.
    :vartype mac_address: str
    :ivar virtual_network_id: Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork
     resource to connect the nic.
    :vartype virtual_network_id: str
    :ivar network_name: Gets the name of the virtual network in vmmServer that the nic is connected
     to.
    :vartype network_name: str
    :ivar ipv4_address_type: Gets or sets the ipv4 address type. Known values are: "Dynamic" and
     "Static".
    :vartype ipv4_address_type: str or ~azure.mgmt.scvmm.models.AllocationMethod
    :ivar ipv6_address_type: Gets or sets the ipv6 address type. Known values are: "Dynamic" and
     "Static".
    :vartype ipv6_address_type: str or ~azure.mgmt.scvmm.models.AllocationMethod
    :ivar mac_address_type: Gets or sets the mac address type. Known values are: "Dynamic" and
     "Static".
    :vartype mac_address_type: str or ~azure.mgmt.scvmm.models.AllocationMethod
    :ivar nic_id: Gets or sets the nic id.
    :vartype nic_id: str
    """

    name: Optional[str] = rest_field()
    """Gets or sets the name of the network interface."""
    display_name: Optional[str] = rest_field(name="displayName", visibility=["read"])
    """Gets the display name of the network interface as shown in the vmmServer. This is the fallback
     label for a NIC when the name is not set."""
    ipv4_addresses: Optional[List[str]] = rest_field(name="ipv4Addresses", visibility=["read"])
    """Gets the nic ipv4 addresses."""
    ipv6_addresses: Optional[List[str]] = rest_field(name="ipv6Addresses", visibility=["read"])
    """Gets the nic ipv6 addresses."""
    mac_address: Optional[str] = rest_field(name="macAddress")
    """Gets or sets the nic MAC address."""
    virtual_network_id: Optional[str] = rest_field(name="virtualNetworkId")
    """Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork resource to connect the nic."""
    network_name: Optional[str] = rest_field(name="networkName", visibility=["read"])
    """Gets the name of the virtual network in vmmServer that the nic is connected to."""
    ipv4_address_type: Optional[Union[str, "_models.AllocationMethod"]] = rest_field(name="ipv4AddressType")
    """Gets or sets the ipv4 address type. Known values are: \"Dynamic\" and \"Static\"."""
    ipv6_address_type: Optional[Union[str, "_models.AllocationMethod"]] = rest_field(name="ipv6AddressType")
    """Gets or sets the ipv6 address type. Known values are: \"Dynamic\" and \"Static\"."""
    mac_address_type: Optional[Union[str, "_models.AllocationMethod"]] = rest_field(name="macAddressType")
    """Gets or sets the mac address type. Known values are: \"Dynamic\" and \"Static\"."""
    nic_id: Optional[str] = rest_field(name="nicId")
    """Gets or sets the nic id."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        mac_address: Optional[str] = None,
        virtual_network_id: Optional[str] = None,
        ipv4_address_type: Optional[Union[str, "_models.AllocationMethod"]] = None,
        ipv6_address_type: Optional[Union[str, "_models.AllocationMethod"]] = None,
        mac_address_type: Optional[Union[str, "_models.AllocationMethod"]] = None,
        nic_id: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class NetworkInterfaceUpdate(_model_base.Model):
    """Network Interface Update model.

    :ivar name: Gets or sets the name of the network interface.
    :vartype name: str
    :ivar mac_address: Gets or sets the nic MAC address.
    :vartype mac_address: str
    :ivar virtual_network_id: Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork
     resource to connect the nic.
    :vartype virtual_network_id: str
    :ivar ipv4_address_type: Gets or sets the ipv4 address type. Known values are: "Dynamic" and
     "Static".
    :vartype ipv4_address_type: str or ~azure.mgmt.scvmm.models.AllocationMethod
    :ivar ipv6_address_type: Gets or sets the ipv6 address type. Known values are: "Dynamic" and
     "Static".
    :vartype ipv6_address_type: str or ~azure.mgmt.scvmm.models.AllocationMethod
    :ivar mac_address_type: Gets or sets the mac address type. Known values are: "Dynamic" and
     "Static".
    :vartype mac_address_type: str or ~azure.mgmt.scvmm.models.AllocationMethod
    :ivar nic_id: Gets or sets the nic id.
    :vartype nic_id: str
    """

    name: Optional[str] = rest_field()
    """Gets or sets the name of the network interface."""
    mac_address: Optional[str] = rest_field(name="macAddress")
    """Gets or sets the nic MAC address."""
    virtual_network_id: Optional[str] = rest_field(name="virtualNetworkId")
    """Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork resource to connect the nic."""
    ipv4_address_type: Optional[Union[str, "_models.AllocationMethod"]] = rest_field(name="ipv4AddressType")
    """Gets or sets the ipv4 address type. Known values are: \"Dynamic\" and \"Static\"."""
    ipv6_address_type: Optional[Union[str, "_models.AllocationMethod"]] = rest_field(name="ipv6AddressType")
    """Gets or sets the ipv6 address type. Known values are: \"Dynamic\" and \"Static\"."""
    mac_address_type: Optional[Union[str, "_models.AllocationMethod"]] = rest_field(name="macAddressType")
    """Gets or sets the mac address type. Known values are: \"Dynamic\" and \"Static\"."""
    nic_id: Optional[str] = rest_field(name="nicId")
    """Gets or sets the nic id."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        mac_address: Optional[str] = None,
        virtual_network_id: Optional[str] = None,
        ipv4_address_type: Optional[Union[str, "_models.AllocationMethod"]] = None,
        ipv6_address_type: Optional[Union[str, "_models.AllocationMethod"]] = None,
        mac_address_type: Optional[Union[str, "_models.AllocationMethod"]] = None,
        nic_id: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class NetworkProfile(_model_base.Model):
    """Defines the resource properties.

    :ivar network_interfaces: Gets or sets the list of network interfaces associated with the
     virtual machine.
    :vartype network_interfaces: list[~azure.mgmt.scvmm.models.NetworkInterface]
    """

    network_interfaces: Optional[List["_models.NetworkInterface"]] = rest_field(name="networkInterfaces")
    """Gets or sets the list of network interfaces associated with the virtual machine."""

    @overload
    def __init__(
        self,
        *,
        network_interfaces: Optional[List["_models.NetworkInterface"]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class NetworkProfileUpdate(_model_base.Model):
    """Defines the resource update properties.

    :ivar network_interfaces: Gets or sets the list of network interfaces associated with the
     virtual machine.
    :vartype network_interfaces: list[~azure.mgmt.scvmm.models.NetworkInterfaceUpdate]
    """

    network_interfaces: Optional[List["_models.NetworkInterfaceUpdate"]] = rest_field(name="networkInterfaces")
    """Gets or sets the list of network interfaces associated with the virtual machine."""

    @overload
    def __init__(
        self,
        *,
        network_interfaces: Optional[List["_models.NetworkInterfaceUpdate"]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Operation(_model_base.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for Azure Resource Manager/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.scvmm.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.scvmm.models.Origin
    :ivar action_type: Extensible enum. Indicates the action type. "Internal" refers to actions
     that are for internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.scvmm.models.ActionType
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     \"Microsoft.Compute/virtualMachines/write\",
     \"Microsoft.Compute/virtualMachines/capture/action\"."""
    is_data_action: Optional[bool] = rest_field(name="isDataAction", visibility=["read"])
    """Whether the operation applies to data-plane. This is \"true\" for data-plane operations and
     \"false\" for Azure Resource Manager/control-plane operations."""
    display: Optional["_models.OperationDisplay"] = rest_field()
    """Localized display information for this particular operation."""
    origin: Optional[Union[str, "_models.Origin"]] = rest_field(visibility=["read"])
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
     logs UX. Default value is \"user,system\". Known values are: \"user\", \"system\", and
     \"user,system\"."""
    action_type: Optional[Union[str, "_models.ActionType"]] = rest_field(name="actionType")
    """Extensible enum. Indicates the action type. \"Internal\" refers to actions that are for
     internal only APIs. \"Internal\""""

    @overload
    def __init__(
        self,
        *,
        display: Optional["_models.OperationDisplay"] = None,
        action_type: Optional[Union[str, "_models.ActionType"]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class OperationDisplay(_model_base.Model):
    """Localized display information for and operation.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    provider: Optional[str] = rest_field()
    """The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring
     Insights\" or \"Microsoft Compute\"."""
    resource: Optional[str] = rest_field()
    """The localized friendly name of the resource type related to this operation. E.g. \"Virtual
     Machines\" or \"Job Schedule Collections\"."""
    operation: Optional[str] = rest_field()
    """The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create
     or Update Virtual Machine\", \"Restart Virtual Machine\"."""
    description: Optional[str] = rest_field()
    """The short, localized friendly description of the operation; suitable for tool tips and detailed
     views."""

    @overload
    def __init__(
        self,
        *,
        provider: Optional[str] = None,
        resource: Optional[str] = None,
        operation: Optional[str] = None,
        description: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class OsProfileForVmInstance(_model_base.Model):
    """Defines the resource properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar admin_password: Admin password of the virtual machine.
    :vartype admin_password: str
    :ivar computer_name: Gets or sets computer name.
    :vartype computer_name: str
    :ivar os_type: Gets the type of the os. Known values are: "Windows", "Linux", and "Other".
    :vartype os_type: str or ~azure.mgmt.scvmm.models.OsType
    :ivar os_sku: Gets os sku.
    :vartype os_sku: str
    :ivar os_version: Gets os version.
    :vartype os_version: str
    """

    admin_password: Optional[str] = rest_field(name="adminPassword", visibility=["create", "update"])
    """Admin password of the virtual machine."""
    computer_name: Optional[str] = rest_field(name="computerName")
    """Gets or sets computer name."""
    os_type: Optional[Union[str, "_models.OsType"]] = rest_field(name="osType", visibility=["read"])
    """Gets the type of the os. Known values are: \"Windows\", \"Linux\", and \"Other\"."""
    os_sku: Optional[str] = rest_field(name="osSku", visibility=["read"])
    """Gets os sku."""
    os_version: Optional[str] = rest_field(name="osVersion", visibility=["read"])
    """Gets os version."""

    @overload
    def __init__(
        self,
        *,
        admin_password: Optional[str] = None,
        computer_name: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class StopVirtualMachineOptions(_model_base.Model):
    """Defines the stop action properties.

    :ivar skip_shutdown: Gets or sets a value indicating whether to request non-graceful VM
     shutdown. True value for this flag indicates non-graceful shutdown whereas false indicates
     otherwise. Defaults to false. Known values are: "true" and "false".
    :vartype skip_shutdown: str or ~azure.mgmt.scvmm.models.SkipShutdown
    """

    skip_shutdown: Optional[Union[str, "_models.SkipShutdown"]] = rest_field(name="skipShutdown")
    """Gets or sets a value indicating whether to request non-graceful VM shutdown. True value for
     this flag indicates non-graceful shutdown whereas false indicates otherwise. Defaults to false.
     Known values are: \"true\" and \"false\"."""

    @overload
    def __init__(
        self,
        *,
        skip_shutdown: Optional[Union[str, "_models.SkipShutdown"]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class StorageProfile(_model_base.Model):
    """Defines the resource properties.

    :ivar disks: Gets or sets the list of virtual disks associated with the virtual machine.
    :vartype disks: list[~azure.mgmt.scvmm.models.VirtualDisk]
    """

    disks: Optional[List["_models.VirtualDisk"]] = rest_field()
    """Gets or sets the list of virtual disks associated with the virtual machine."""

    @overload
    def __init__(
        self,
        *,
        disks: Optional[List["_models.VirtualDisk"]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class StorageProfileUpdate(_model_base.Model):
    """Defines the resource update properties.

    :ivar disks: Gets or sets the list of virtual disks associated with the virtual machine.
    :vartype disks: list[~azure.mgmt.scvmm.models.VirtualDiskUpdate]
    """

    disks: Optional[List["_models.VirtualDiskUpdate"]] = rest_field()
    """Gets or sets the list of virtual disks associated with the virtual machine."""

    @overload
    def __init__(
        self,
        *,
        disks: Optional[List["_models.VirtualDiskUpdate"]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class StorageQosPolicy(_model_base.Model):
    """The StorageQoSPolicy definition.

    :ivar name: The name of the policy.
    :vartype name: str
    :ivar id: The ID of the QoS policy.
    :vartype id: str
    :ivar iops_maximum: The maximum IO operations per second.
    :vartype iops_maximum: int
    :ivar iops_minimum: The minimum IO operations per second.
    :vartype iops_minimum: int
    :ivar bandwidth_limit: The Bandwidth Limit for internet traffic.
    :vartype bandwidth_limit: int
    :ivar policy_id: The underlying policy.
    :vartype policy_id: str
    """

    name: Optional[str] = rest_field()
    """The name of the policy."""
    id: Optional[str] = rest_field()
    """The ID of the QoS policy."""
    iops_maximum: Optional[int] = rest_field(name="iopsMaximum")
    """The maximum IO operations per second."""
    iops_minimum: Optional[int] = rest_field(name="iopsMinimum")
    """The minimum IO operations per second."""
    bandwidth_limit: Optional[int] = rest_field(name="bandwidthLimit")
    """The Bandwidth Limit for internet traffic."""
    policy_id: Optional[str] = rest_field(name="policyId")
    """The underlying policy."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        iops_maximum: Optional[int] = None,
        iops_minimum: Optional[int] = None,
        bandwidth_limit: Optional[int] = None,
        policy_id: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class StorageQosPolicyDetails(_model_base.Model):
    """The StorageQoSPolicyDetails definition.

    :ivar name: The name of the policy.
    :vartype name: str
    :ivar id: The ID of the QoS policy.
    :vartype id: str
    """

    name: Optional[str] = rest_field()
    """The name of the policy."""
    id: Optional[str] = rest_field()
    """The ID of the QoS policy."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SystemData(_model_base.Model):
    """Metadata pertaining to creation and last modification of the resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.scvmm.models.CreatedByType
    :ivar created_at: The type of identity that created the resource.
    :vartype created_at: ~datetime.date
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.scvmm.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.date
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.date] = rest_field(name="createdAt", visibility=["read"])
    """The type of identity that created the resource."""
    last_modified_by: Optional[str] = rest_field(name="lastModifiedBy", visibility=["read"])
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.date] = rest_field(name="lastModifiedAt", visibility=["read"])
    """The timestamp of resource last modification (UTC)."""


class VirtualDisk(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Virtual disk model.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Gets or sets the name of the disk.
    :vartype name: str
    :ivar display_name: Gets the display name of the virtual disk as shown in the vmmServer. This
     is the fallback label for a disk when the name is not set.
    :vartype display_name: str
    :ivar disk_id: Gets or sets the disk id.
    :vartype disk_id: str
    :ivar disk_size_g_b: Gets or sets the disk total size.
    :vartype disk_size_g_b: int
    :ivar max_disk_size_g_b: Gets the max disk size.
    :vartype max_disk_size_g_b: int
    :ivar bus: Gets or sets the disk bus.
    :vartype bus: int
    :ivar lun: Gets or sets the disk lun.
    :vartype lun: int
    :ivar bus_type: Gets or sets the disk bus type.
    :vartype bus_type: str
    :ivar vhd_type: Gets or sets the disk vhd type.
    :vartype vhd_type: str
    :ivar volume_type: Gets the disk volume type.
    :vartype volume_type: str
    :ivar vhd_format_type: Gets the disk vhd format type.
    :vartype vhd_format_type: str
    :ivar template_disk_id: Gets or sets the disk id in the template.
    :vartype template_disk_id: str
    :ivar storage_qos_policy: The QoS policy for the disk.
    :vartype storage_qos_policy: ~azure.mgmt.scvmm.models.StorageQosPolicyDetails
    :ivar create_diff_disk: Gets or sets a value indicating diff disk. Known values are: "true" and
     "false".
    :vartype create_diff_disk: str or ~azure.mgmt.scvmm.models.CreateDiffDisk
    """

    name: Optional[str] = rest_field()
    """Gets or sets the name of the disk."""
    display_name: Optional[str] = rest_field(name="displayName", visibility=["read"])
    """Gets the display name of the virtual disk as shown in the vmmServer. This is the fallback label
     for a disk when the name is not set."""
    disk_id: Optional[str] = rest_field(name="diskId")
    """Gets or sets the disk id."""
    disk_size_g_b: Optional[int] = rest_field(name="diskSizeGB")
    """Gets or sets the disk total size."""
    max_disk_size_g_b: Optional[int] = rest_field(name="maxDiskSizeGB", visibility=["read"])
    """Gets the max disk size."""
    bus: Optional[int] = rest_field()
    """Gets or sets the disk bus."""
    lun: Optional[int] = rest_field()
    """Gets or sets the disk lun."""
    bus_type: Optional[str] = rest_field(name="busType")
    """Gets or sets the disk bus type."""
    vhd_type: Optional[str] = rest_field(name="vhdType")
    """Gets or sets the disk vhd type."""
    volume_type: Optional[str] = rest_field(name="volumeType", visibility=["read"])
    """Gets the disk volume type."""
    vhd_format_type: Optional[str] = rest_field(name="vhdFormatType", visibility=["read"])
    """Gets the disk vhd format type."""
    template_disk_id: Optional[str] = rest_field(name="templateDiskId", visibility=["read", "create"])
    """Gets or sets the disk id in the template."""
    storage_qos_policy: Optional["_models.StorageQosPolicyDetails"] = rest_field(name="storageQoSPolicy")
    """The QoS policy for the disk."""
    create_diff_disk: Optional[Union[str, "_models.CreateDiffDisk"]] = rest_field(
        name="createDiffDisk", visibility=["read", "create"]
    )
    """Gets or sets a value indicating diff disk. Known values are: \"true\" and \"false\"."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        disk_id: Optional[str] = None,
        disk_size_g_b: Optional[int] = None,
        bus: Optional[int] = None,
        lun: Optional[int] = None,
        bus_type: Optional[str] = None,
        vhd_type: Optional[str] = None,
        template_disk_id: Optional[str] = None,
        storage_qos_policy: Optional["_models.StorageQosPolicyDetails"] = None,
        create_diff_disk: Optional[Union[str, "_models.CreateDiffDisk"]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VirtualDiskUpdate(_model_base.Model):
    """Virtual Disk Update model.

    :ivar name: Gets or sets the name of the disk.
    :vartype name: str
    :ivar disk_id: Gets or sets the disk id.
    :vartype disk_id: str
    :ivar disk_size_g_b: Gets or sets the disk total size.
    :vartype disk_size_g_b: int
    :ivar bus: Gets or sets the disk bus.
    :vartype bus: int
    :ivar lun: Gets or sets the disk lun.
    :vartype lun: int
    :ivar bus_type: Gets or sets the disk bus type.
    :vartype bus_type: str
    :ivar vhd_type: Gets or sets the disk vhd type.
    :vartype vhd_type: str
    :ivar storage_qos_policy: The QoS policy for the disk.
    :vartype storage_qos_policy: ~azure.mgmt.scvmm.models.StorageQosPolicyDetails
    """

    name: Optional[str] = rest_field()
    """Gets or sets the name of the disk."""
    disk_id: Optional[str] = rest_field(name="diskId")
    """Gets or sets the disk id."""
    disk_size_g_b: Optional[int] = rest_field(name="diskSizeGB")
    """Gets or sets the disk total size."""
    bus: Optional[int] = rest_field()
    """Gets or sets the disk bus."""
    lun: Optional[int] = rest_field()
    """Gets or sets the disk lun."""
    bus_type: Optional[str] = rest_field(name="busType")
    """Gets or sets the disk bus type."""
    vhd_type: Optional[str] = rest_field(name="vhdType")
    """Gets or sets the disk vhd type."""
    storage_qos_policy: Optional["_models.StorageQosPolicyDetails"] = rest_field(name="storageQoSPolicy")
    """The QoS policy for the disk."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        disk_id: Optional[str] = None,
        disk_size_g_b: Optional[int] = None,
        bus: Optional[int] = None,
        lun: Optional[int] = None,
        bus_type: Optional[str] = None,
        vhd_type: Optional[str] = None,
        storage_qos_policy: Optional["_models.StorageQosPolicyDetails"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VirtualMachineCreateCheckpoint(_model_base.Model):
    """Defines the create checkpoint action properties.

    :ivar name: Name of the checkpoint.
    :vartype name: str
    :ivar description: Description of the checkpoint.
    :vartype description: str
    """

    name: Optional[str] = rest_field()
    """Name of the checkpoint."""
    description: Optional[str] = rest_field()
    """Description of the checkpoint."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        description: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VirtualMachineDeleteCheckpoint(_model_base.Model):
    """Defines the delete checkpoint action properties.

    :ivar id: ID of the checkpoint to be deleted.
    :vartype id: str
    """

    id: Optional[str] = rest_field()
    """ID of the checkpoint to be deleted."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VirtualMachineInstance(ExtensionResource):
    """Define the virtualMachineInstance.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.scvmm.models.VirtualMachineInstanceProperties
    :ivar extended_location: Gets or sets the extended location. Required.
    :vartype extended_location: ~azure.mgmt.scvmm.models.ExtendedLocation
    """

    properties: Optional["_models.VirtualMachineInstanceProperties"] = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource."""
    extended_location: "_models.ExtendedLocation" = rest_field(name="extendedLocation", visibility=["read", "create"])
    """Gets or sets the extended location. Required."""

    @overload
    def __init__(
        self,
        *,
        extended_location: "_models.ExtendedLocation",
        properties: Optional["_models.VirtualMachineInstanceProperties"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VirtualMachineInstanceProperties(_model_base.Model):
    """Defines the resource properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar availability_sets: Availability Sets in vm.
    :vartype availability_sets: list[~azure.mgmt.scvmm.models.AvailabilitySetListItem]
    :ivar os_profile: OS properties.
    :vartype os_profile: ~azure.mgmt.scvmm.models.OsProfileForVmInstance
    :ivar hardware_profile: Hardware properties.
    :vartype hardware_profile: ~azure.mgmt.scvmm.models.HardwareProfile
    :ivar network_profile: Network properties.
    :vartype network_profile: ~azure.mgmt.scvmm.models.NetworkProfile
    :ivar storage_profile: Storage properties.
    :vartype storage_profile: ~azure.mgmt.scvmm.models.StorageProfile
    :ivar infrastructure_profile: Gets the infrastructure profile.
    :vartype infrastructure_profile: ~azure.mgmt.scvmm.models.InfrastructureProfile
    :ivar power_state: Gets the power state of the virtual machine.
    :vartype power_state: str
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted", and "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ResourceProvisioningState
    """

    availability_sets: Optional[List["_models.AvailabilitySetListItem"]] = rest_field(name="availabilitySets")
    """Availability Sets in vm."""
    os_profile: Optional["_models.OsProfileForVmInstance"] = rest_field(name="osProfile", visibility=["read", "create"])
    """OS properties."""
    hardware_profile: Optional["_models.HardwareProfile"] = rest_field(name="hardwareProfile")
    """Hardware properties."""
    network_profile: Optional["_models.NetworkProfile"] = rest_field(name="networkProfile")
    """Network properties."""
    storage_profile: Optional["_models.StorageProfile"] = rest_field(name="storageProfile")
    """Storage properties."""
    infrastructure_profile: Optional["_models.InfrastructureProfile"] = rest_field(name="infrastructureProfile")
    """Gets the infrastructure profile."""
    power_state: Optional[str] = rest_field(name="powerState", visibility=["read"])
    """Gets the power state of the virtual machine."""
    provisioning_state: Optional[Union[str, "_models.ResourceProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the resource. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", \"Accepted\", and \"Created\"."""

    @overload
    def __init__(
        self,
        *,
        availability_sets: Optional[List["_models.AvailabilitySetListItem"]] = None,
        os_profile: Optional["_models.OsProfileForVmInstance"] = None,
        hardware_profile: Optional["_models.HardwareProfile"] = None,
        network_profile: Optional["_models.NetworkProfile"] = None,
        storage_profile: Optional["_models.StorageProfile"] = None,
        infrastructure_profile: Optional["_models.InfrastructureProfile"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VirtualMachineInstanceUpdate(_model_base.Model):
    """The type used for update operations of the VirtualMachineInstance.

    :ivar properties: The update properties of the VirtualMachineInstance.
    :vartype properties: ~azure.mgmt.scvmm.models.VirtualMachineInstanceUpdateProperties
    """

    properties: Optional["_models.VirtualMachineInstanceUpdateProperties"] = rest_field()
    """The update properties of the VirtualMachineInstance."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.VirtualMachineInstanceUpdateProperties"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VirtualMachineInstanceUpdateProperties(_model_base.Model):
    """Virtual Machine Instance Properties Update model.

    :ivar availability_sets: Availability Sets in vm.
    :vartype availability_sets: list[~azure.mgmt.scvmm.models.AvailabilitySetListItem]
    :ivar hardware_profile: Hardware properties.
    :vartype hardware_profile: ~azure.mgmt.scvmm.models.HardwareProfileUpdate
    :ivar network_profile: Network properties.
    :vartype network_profile: ~azure.mgmt.scvmm.models.NetworkProfileUpdate
    :ivar storage_profile: Storage properties.
    :vartype storage_profile: ~azure.mgmt.scvmm.models.StorageProfileUpdate
    :ivar infrastructure_profile: Gets the infrastructure profile.
    :vartype infrastructure_profile: ~azure.mgmt.scvmm.models.InfrastructureProfileUpdate
    """

    availability_sets: Optional[List["_models.AvailabilitySetListItem"]] = rest_field(name="availabilitySets")
    """Availability Sets in vm."""
    hardware_profile: Optional["_models.HardwareProfileUpdate"] = rest_field(name="hardwareProfile")
    """Hardware properties."""
    network_profile: Optional["_models.NetworkProfileUpdate"] = rest_field(name="networkProfile")
    """Network properties."""
    storage_profile: Optional["_models.StorageProfileUpdate"] = rest_field(name="storageProfile")
    """Storage properties."""
    infrastructure_profile: Optional["_models.InfrastructureProfileUpdate"] = rest_field(name="infrastructureProfile")
    """Gets the infrastructure profile."""

    @overload
    def __init__(
        self,
        *,
        availability_sets: Optional[List["_models.AvailabilitySetListItem"]] = None,
        hardware_profile: Optional["_models.HardwareProfileUpdate"] = None,
        network_profile: Optional["_models.NetworkProfileUpdate"] = None,
        storage_profile: Optional["_models.StorageProfileUpdate"] = None,
        infrastructure_profile: Optional["_models.InfrastructureProfileUpdate"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VirtualMachineInventoryItem(
    InventoryItemProperties, discriminator="VirtualMachine"
):  # pylint: disable=too-many-instance-attributes
    """The Virtual machine inventory item.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar managed_resource_id: Gets the tracked resource id corresponding to the inventory
     resource.
    :vartype managed_resource_id: str
    :ivar uuid: Gets the UUID (which is assigned by Vmm) for the inventory item.
    :vartype uuid: str
    :ivar inventory_item_name: Gets the Managed Object name in Vmm for the inventory item.
    :vartype inventory_item_name: str
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted", and "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ResourceProvisioningState
    :ivar os_type: Gets the type of the os. Known values are: "Windows", "Linux", and "Other".
    :vartype os_type: str or ~azure.mgmt.scvmm.models.OsType
    :ivar os_name: Gets os name.
    :vartype os_name: str
    :ivar os_version: Gets os version.
    :vartype os_version: str
    :ivar power_state: Gets the power state of the virtual machine.
    :vartype power_state: str
    :ivar ip_addresses: Gets or sets the nic ip addresses.
    :vartype ip_addresses: list[str]
    :ivar cloud: Cloud inventory resource details where the VM is present.
    :vartype cloud: ~azure.mgmt.scvmm.models.InventoryItemDetails
    :ivar bios_guid: Gets the bios guid.
    :vartype bios_guid: str
    :ivar managed_machine_resource_id: Gets the tracked resource id corresponding to the inventory
     resource.
    :vartype managed_machine_resource_id: str
    :ivar inventory_type: They inventory type. Required. VirtualMachine inventory type
    :vartype inventory_type: str or ~azure.mgmt.scvmm.models.VIRTUAL_MACHINE
    """

    os_type: Optional[Union[str, "_models.OsType"]] = rest_field(name="osType", visibility=["read"])
    """Gets the type of the os. Known values are: \"Windows\", \"Linux\", and \"Other\"."""
    os_name: Optional[str] = rest_field(name="osName", visibility=["read"])
    """Gets os name."""
    os_version: Optional[str] = rest_field(name="osVersion", visibility=["read"])
    """Gets os version."""
    power_state: Optional[str] = rest_field(name="powerState", visibility=["read"])
    """Gets the power state of the virtual machine."""
    ip_addresses: Optional[List[str]] = rest_field(name="ipAddresses")
    """Gets or sets the nic ip addresses."""
    cloud: Optional["_models.InventoryItemDetails"] = rest_field()
    """Cloud inventory resource details where the VM is present."""
    bios_guid: Optional[str] = rest_field(name="biosGuid", visibility=["read"])
    """Gets the bios guid."""
    managed_machine_resource_id: Optional[str] = rest_field(name="managedMachineResourceId", visibility=["read"])
    """Gets the tracked resource id corresponding to the inventory resource."""
    inventory_type: Literal[InventoryType.VIRTUAL_MACHINE] = rest_discriminator(name="inventoryType")  # type: ignore
    """They inventory type. Required. VirtualMachine inventory type"""

    @overload
    def __init__(
        self,
        *,
        ip_addresses: Optional[List[str]] = None,
        cloud: Optional["_models.InventoryItemDetails"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, inventory_type=InventoryType.VIRTUAL_MACHINE, **kwargs)


class VirtualMachineRestoreCheckpoint(_model_base.Model):
    """Defines the restore checkpoint action properties.

    :ivar id: ID of the checkpoint to be restored to.
    :vartype id: str
    """

    id: Optional[str] = rest_field()
    """ID of the checkpoint to be restored to."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VirtualMachineTemplate(TrackedResource):
    """The VirtualMachineTemplates resource definition.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.scvmm.models.VirtualMachineTemplateProperties
    :ivar extended_location: The extended location. Required.
    :vartype extended_location: ~azure.mgmt.scvmm.models.ExtendedLocation
    """

    properties: Optional["_models.VirtualMachineTemplateProperties"] = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource."""
    extended_location: "_models.ExtendedLocation" = rest_field(name="extendedLocation")
    """The extended location. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        extended_location: "_models.ExtendedLocation",
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.VirtualMachineTemplateProperties"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VirtualMachineTemplateInventoryItem(InventoryItemProperties, discriminator="VirtualMachineTemplate"):
    """The Virtual machine template inventory item.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar managed_resource_id: Gets the tracked resource id corresponding to the inventory
     resource.
    :vartype managed_resource_id: str
    :ivar uuid: Gets the UUID (which is assigned by Vmm) for the inventory item.
    :vartype uuid: str
    :ivar inventory_item_name: Gets the Managed Object name in Vmm for the inventory item.
    :vartype inventory_item_name: str
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted", and "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ResourceProvisioningState
    :ivar cpu_count: Gets the desired number of vCPUs for the vm.
    :vartype cpu_count: int
    :ivar memory_m_b: MemoryMB is the desired size of a virtual machine's memory, in MB.
    :vartype memory_m_b: int
    :ivar os_type: Gets the type of the os. Known values are: "Windows", "Linux", and "Other".
    :vartype os_type: str or ~azure.mgmt.scvmm.models.OsType
    :ivar os_name: Gets os name.
    :vartype os_name: str
    :ivar inventory_type: They inventory type. Required. VirtualMachineTemplate inventory type
    :vartype inventory_type: str or ~azure.mgmt.scvmm.models.VIRTUAL_MACHINE_TEMPLATE
    """

    cpu_count: Optional[int] = rest_field(name="cpuCount", visibility=["read"])
    """Gets the desired number of vCPUs for the vm."""
    memory_m_b: Optional[int] = rest_field(name="memoryMB", visibility=["read"])
    """MemoryMB is the desired size of a virtual machine's memory, in MB."""
    os_type: Optional[Union[str, "_models.OsType"]] = rest_field(name="osType", visibility=["read"])
    """Gets the type of the os. Known values are: \"Windows\", \"Linux\", and \"Other\"."""
    os_name: Optional[str] = rest_field(name="osName", visibility=["read"])
    """Gets os name."""
    inventory_type: Literal[InventoryType.VIRTUAL_MACHINE_TEMPLATE] = rest_discriminator(name="inventoryType")  # type: ignore
    """They inventory type. Required. VirtualMachineTemplate inventory type"""


class VirtualMachineTemplateProperties(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Defines the resource properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar inventory_item_id: Gets or sets the inventory Item ID for the resource.
    :vartype inventory_item_id: str
    :ivar uuid: Unique ID of the virtual machine template.
    :vartype uuid: str
    :ivar vmm_server_id: ARM Id of the vmmServer resource in which this resource resides.
    :vartype vmm_server_id: str
    :ivar os_type: Gets the type of the os. Known values are: "Windows", "Linux", and "Other".
    :vartype os_type: str or ~azure.mgmt.scvmm.models.OsType
    :ivar os_name: Gets os name.
    :vartype os_name: str
    :ivar computer_name: Gets computer name.
    :vartype computer_name: str
    :ivar memory_m_b: MemoryMB is the desired size of a virtual machine's memory, in MB.
    :vartype memory_m_b: int
    :ivar cpu_count: Gets the desired number of vCPUs for the vm.
    :vartype cpu_count: int
    :ivar limit_cpu_for_migration: Gets a value indicating whether to enable processor
     compatibility mode for live migration of VMs. Known values are: "true" and "false".
    :vartype limit_cpu_for_migration: str or ~azure.mgmt.scvmm.models.LimitCpuForMigration
    :ivar dynamic_memory_enabled: Gets a value indicating whether to enable dynamic memory or not.
     Known values are: "true" and "false".
    :vartype dynamic_memory_enabled: str or ~azure.mgmt.scvmm.models.DynamicMemoryEnabled
    :ivar is_customizable: Gets a value indicating whether the vm template is customizable or not.
     Known values are: "true" and "false".
    :vartype is_customizable: str or ~azure.mgmt.scvmm.models.IsCustomizable
    :ivar dynamic_memory_max_m_b: Gets the max dynamic memory for the vm.
    :vartype dynamic_memory_max_m_b: int
    :ivar dynamic_memory_min_m_b: Gets the min dynamic memory for the vm.
    :vartype dynamic_memory_min_m_b: int
    :ivar is_highly_available: Gets highly available property. Known values are: "true" and
     "false".
    :vartype is_highly_available: str or ~azure.mgmt.scvmm.models.IsHighlyAvailable
    :ivar generation: Gets the generation for the vm.
    :vartype generation: int
    :ivar network_interfaces: Gets the network interfaces of the template.
    :vartype network_interfaces: list[~azure.mgmt.scvmm.models.NetworkInterface]
    :ivar disks: Gets the disks of the template.
    :vartype disks: list[~azure.mgmt.scvmm.models.VirtualDisk]
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted", and "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ResourceProvisioningState
    """

    inventory_item_id: Optional[str] = rest_field(name="inventoryItemId")
    """Gets or sets the inventory Item ID for the resource."""
    uuid: Optional[str] = rest_field()
    """Unique ID of the virtual machine template."""
    vmm_server_id: Optional[str] = rest_field(name="vmmServerId")
    """ARM Id of the vmmServer resource in which this resource resides."""
    os_type: Optional[Union[str, "_models.OsType"]] = rest_field(name="osType", visibility=["read"])
    """Gets the type of the os. Known values are: \"Windows\", \"Linux\", and \"Other\"."""
    os_name: Optional[str] = rest_field(name="osName", visibility=["read"])
    """Gets os name."""
    computer_name: Optional[str] = rest_field(name="computerName", visibility=["read"])
    """Gets computer name."""
    memory_m_b: Optional[int] = rest_field(name="memoryMB", visibility=["read"])
    """MemoryMB is the desired size of a virtual machine's memory, in MB."""
    cpu_count: Optional[int] = rest_field(name="cpuCount", visibility=["read"])
    """Gets the desired number of vCPUs for the vm."""
    limit_cpu_for_migration: Optional[Union[str, "_models.LimitCpuForMigration"]] = rest_field(
        name="limitCpuForMigration", visibility=["read"]
    )
    """Gets a value indicating whether to enable processor compatibility mode for live migration of
     VMs. Known values are: \"true\" and \"false\"."""
    dynamic_memory_enabled: Optional[Union[str, "_models.DynamicMemoryEnabled"]] = rest_field(
        name="dynamicMemoryEnabled", visibility=["read"]
    )
    """Gets a value indicating whether to enable dynamic memory or not. Known values are: \"true\" and
     \"false\"."""
    is_customizable: Optional[Union[str, "_models.IsCustomizable"]] = rest_field(
        name="isCustomizable", visibility=["read"]
    )
    """Gets a value indicating whether the vm template is customizable or not. Known values are:
     \"true\" and \"false\"."""
    dynamic_memory_max_m_b: Optional[int] = rest_field(name="dynamicMemoryMaxMB", visibility=["read"])
    """Gets the max dynamic memory for the vm."""
    dynamic_memory_min_m_b: Optional[int] = rest_field(name="dynamicMemoryMinMB", visibility=["read"])
    """Gets the min dynamic memory for the vm."""
    is_highly_available: Optional[Union[str, "_models.IsHighlyAvailable"]] = rest_field(
        name="isHighlyAvailable", visibility=["read"]
    )
    """Gets highly available property. Known values are: \"true\" and \"false\"."""
    generation: Optional[int] = rest_field(visibility=["read"])
    """Gets the generation for the vm."""
    network_interfaces: Optional[List["_models.NetworkInterface"]] = rest_field(
        name="networkInterfaces", visibility=["read"]
    )
    """Gets the network interfaces of the template."""
    disks: Optional[List["_models.VirtualDisk"]] = rest_field(visibility=["read"])
    """Gets the disks of the template."""
    provisioning_state: Optional[Union[str, "_models.ResourceProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the resource. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", \"Accepted\", and \"Created\"."""

    @overload
    def __init__(
        self,
        *,
        inventory_item_id: Optional[str] = None,
        uuid: Optional[str] = None,
        vmm_server_id: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VirtualMachineTemplateTagsUpdate(_model_base.Model):
    """The type used for updating tags in VirtualMachineTemplate resources.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VirtualNetwork(TrackedResource):
    """The VirtualNetworks resource definition.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.scvmm.models.VirtualNetworkProperties
    :ivar extended_location: The extended location. Required.
    :vartype extended_location: ~azure.mgmt.scvmm.models.ExtendedLocation
    """

    properties: Optional["_models.VirtualNetworkProperties"] = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource."""
    extended_location: "_models.ExtendedLocation" = rest_field(name="extendedLocation")
    """The extended location. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        extended_location: "_models.ExtendedLocation",
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.VirtualNetworkProperties"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VirtualNetworkInventoryItem(InventoryItemProperties, discriminator="VirtualNetwork"):
    """The Virtual network inventory item.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar managed_resource_id: Gets the tracked resource id corresponding to the inventory
     resource.
    :vartype managed_resource_id: str
    :ivar uuid: Gets the UUID (which is assigned by Vmm) for the inventory item.
    :vartype uuid: str
    :ivar inventory_item_name: Gets the Managed Object name in Vmm for the inventory item.
    :vartype inventory_item_name: str
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted", and "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ResourceProvisioningState
    :ivar inventory_type: They inventory type. Required. VirtualNetwork inventory type
    :vartype inventory_type: str or ~azure.mgmt.scvmm.models.VIRTUAL_NETWORK
    """

    inventory_type: Literal[InventoryType.VIRTUAL_NETWORK] = rest_discriminator(name="inventoryType")  # type: ignore
    """They inventory type. Required. VirtualNetwork inventory type"""


class VirtualNetworkProperties(_model_base.Model):
    """Defines the resource properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar inventory_item_id: Gets or sets the inventory Item ID for the resource.
    :vartype inventory_item_id: str
    :ivar uuid: Unique ID of the virtual network.
    :vartype uuid: str
    :ivar vmm_server_id: ARM Id of the vmmServer resource in which this resource resides.
    :vartype vmm_server_id: str
    :ivar network_name: Name of the virtual network in vmmServer.
    :vartype network_name: str
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted", and "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ResourceProvisioningState
    """

    inventory_item_id: Optional[str] = rest_field(name="inventoryItemId")
    """Gets or sets the inventory Item ID for the resource."""
    uuid: Optional[str] = rest_field()
    """Unique ID of the virtual network."""
    vmm_server_id: Optional[str] = rest_field(name="vmmServerId")
    """ARM Id of the vmmServer resource in which this resource resides."""
    network_name: Optional[str] = rest_field(name="networkName", visibility=["read"])
    """Name of the virtual network in vmmServer."""
    provisioning_state: Optional[Union[str, "_models.ResourceProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the resource. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", \"Accepted\", and \"Created\"."""

    @overload
    def __init__(
        self,
        *,
        inventory_item_id: Optional[str] = None,
        uuid: Optional[str] = None,
        vmm_server_id: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VirtualNetworkTagsUpdate(_model_base.Model):
    """The type used for updating tags in VirtualNetwork resources.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VmInstanceHybridIdentityMetadata(ProxyResource):
    """Defines the HybridIdentityMetadata.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.scvmm.models.VmInstanceHybridIdentityMetadataProperties
    """

    properties: Optional["_models.VmInstanceHybridIdentityMetadataProperties"] = rest_field(
        visibility=["read", "create"]
    )
    """The resource-specific properties for this resource."""

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.VmInstanceHybridIdentityMetadataProperties"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VmInstanceHybridIdentityMetadataProperties(_model_base.Model):  # pylint: disable=name-too-long
    """Describes the properties of Hybrid Identity Metadata for a Virtual Machine.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar resource_uid: The unique identifier for the resource.
    :vartype resource_uid: str
    :ivar public_key: Gets or sets the Public Key.
    :vartype public_key: str
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted", and "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ResourceProvisioningState
    """

    resource_uid: Optional[str] = rest_field(name="resourceUid")
    """The unique identifier for the resource."""
    public_key: Optional[str] = rest_field(name="publicKey")
    """Gets or sets the Public Key."""
    provisioning_state: Optional[Union[str, "_models.ResourceProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the resource. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", \"Accepted\", and \"Created\"."""

    @overload
    def __init__(
        self,
        *,
        resource_uid: Optional[str] = None,
        public_key: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VmmCredential(_model_base.Model):
    """Credentials to connect to VmmServer.

    :ivar username: Username to use to connect to VmmServer.
    :vartype username: str
    :ivar password: Password to use to connect to VmmServer.
    :vartype password: str
    """

    username: Optional[str] = rest_field()
    """Username to use to connect to VmmServer."""
    password: Optional[str] = rest_field(visibility=["create", "update"])
    """Password to use to connect to VmmServer."""

    @overload
    def __init__(
        self,
        *,
        username: Optional[str] = None,
        password: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VmmServer(TrackedResource):
    """The VmmServers resource definition.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.scvmm.models.SystemData
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.scvmm.models.VmmServerProperties
    :ivar extended_location: The extended location. Required.
    :vartype extended_location: ~azure.mgmt.scvmm.models.ExtendedLocation
    """

    properties: Optional["_models.VmmServerProperties"] = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource."""
    extended_location: "_models.ExtendedLocation" = rest_field(name="extendedLocation")
    """The extended location. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        extended_location: "_models.ExtendedLocation",
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.VmmServerProperties"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VmmServerProperties(_model_base.Model):
    """Defines the resource properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar credentials: Credentials to connect to VmmServer.
    :vartype credentials: ~azure.mgmt.scvmm.models.VmmCredential
    :ivar fqdn: Fqdn is the hostname/ip of the vmmServer. Required.
    :vartype fqdn: str
    :ivar port: Port is the port on which the vmmServer is listening.
    :vartype port: int
    :ivar connection_status: Gets the connection status to the vmmServer.
    :vartype connection_status: str
    :ivar error_message: Gets any error message if connection to vmmServer is having any issue.
    :vartype error_message: str
    :ivar uuid: Unique ID of vmmServer.
    :vartype uuid: str
    :ivar version: Version is the version of the vmmSever.
    :vartype version: str
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Succeeded",
     "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted", and "Created".
    :vartype provisioning_state: str or ~azure.mgmt.scvmm.models.ResourceProvisioningState
    """

    credentials: Optional["_models.VmmCredential"] = rest_field()
    """Credentials to connect to VmmServer."""
    fqdn: str = rest_field()
    """Fqdn is the hostname/ip of the vmmServer. Required."""
    port: Optional[int] = rest_field()
    """Port is the port on which the vmmServer is listening."""
    connection_status: Optional[str] = rest_field(name="connectionStatus", visibility=["read"])
    """Gets the connection status to the vmmServer."""
    error_message: Optional[str] = rest_field(name="errorMessage", visibility=["read"])
    """Gets any error message if connection to vmmServer is having any issue."""
    uuid: Optional[str] = rest_field(visibility=["read"])
    """Unique ID of vmmServer."""
    version: Optional[str] = rest_field(visibility=["read"])
    """Version is the version of the vmmSever."""
    provisioning_state: Optional[Union[str, "_models.ResourceProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the resource. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     \"Provisioning\", \"Updating\", \"Deleting\", \"Accepted\", and \"Created\"."""

    @overload
    def __init__(
        self,
        *,
        fqdn: str,
        credentials: Optional["_models.VmmCredential"] = None,
        port: Optional[int] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VmmServerTagsUpdate(_model_base.Model):
    """The type used for updating tags in VmmServer resources.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
