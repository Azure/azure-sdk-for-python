# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import json
import sys
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._model_base import AzureJSONEncoder
from ..._operations._operations import (
    build_event_grid_publish_cloud_event_request,
    build_event_grid_publish_event_grid_event_request,
    build_event_grid_publish_event_request,
)
from .._vendor import EventGridClientMixinABC

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class EventGridClientOperationsMixin(EventGridClientMixinABC):
    @overload
    async def publish_event(  # pylint: disable=inconsistent-return-statements
        self, events: _models.GeneralEvent, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """publish_event.

        :param events: Required.
        :type events: ~eventgrid.models.GeneralEvent
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def publish_event(  # pylint: disable=inconsistent-return-statements
        self, events: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """publish_event.

        :param events: Required.
        :type events: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def publish_event(  # pylint: disable=inconsistent-return-statements
        self, events: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """publish_event.

        :param events: Required.
        :type events: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def publish_event(  # pylint: disable=inconsistent-return-statements
        self, events: Union[_models.GeneralEvent, JSON, IO], **kwargs: Any
    ) -> None:
        """publish_event.

        :param events: Is one of the following types: GeneralEvent, JSON, IO Required.
        :type events: ~eventgrid.models.GeneralEvent or JSON or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(events, (IO, bytes)):
            _content = events
        else:
            _content = json.dumps(events, cls=AzureJSONEncoder)  # type: ignore

        request = build_event_grid_publish_event_request(
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace_async
    async def publish_cloud_event(  # pylint: disable=inconsistent-return-statements
        self, events: _models.CloudEventEvent, **kwargs: Any
    ) -> None:
        """publish_cloud_event.

        :param events: Required.
        :type events: ~eventgrid.models.CloudEventEvent
        :keyword content_type: Default value is "application/cloudevents-batch+json; charset=utf-8".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: str = kwargs.pop(
            "content_type", _headers.pop("content-type", "application/cloudevents-batch+json; charset=utf-8")
        )
        cls: ClsType[None] = kwargs.pop("cls", None)

        _content = json.dumps(events, cls=AzureJSONEncoder)  # type: ignore

        request = build_event_grid_publish_cloud_event_request(
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    async def publish_event_grid_event(  # pylint: disable=inconsistent-return-statements
        self, events: _models.EventGridEvent, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """publish_event_grid_event.

        :param events: Required.
        :type events: ~eventgrid.models.EventGridEvent
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def publish_event_grid_event(  # pylint: disable=inconsistent-return-statements
        self, events: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """publish_event_grid_event.

        :param events: Required.
        :type events: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def publish_event_grid_event(  # pylint: disable=inconsistent-return-statements
        self, events: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """publish_event_grid_event.

        :param events: Required.
        :type events: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def publish_event_grid_event(  # pylint: disable=inconsistent-return-statements
        self, events: Union[_models.EventGridEvent, JSON, IO], **kwargs: Any
    ) -> None:
        """publish_event_grid_event.

        :param events: Is one of the following types: EventGridEvent, JSON, IO Required.
        :type events: ~eventgrid.models.EventGridEvent or JSON or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(events, (IO, bytes)):
            _content = events
        else:
            _content = json.dumps(events, cls=AzureJSONEncoder)  # type: ignore

        request = build_event_grid_publish_event_grid_event_request(
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})
