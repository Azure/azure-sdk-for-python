# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import json
from typing import Any, Callable, Dict, IO, List, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._model_base import AzureJSONEncoder
from .._serialization import Serializer
from .._vendor import EventGridClientMixinABC

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_event_grid_publish_event_grid_events_request(*, api_version: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    # Construct URL
    _url = "/?overload=EventGridEvent"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_event_grid_publish_cloud_event_events_request(
    *, api_version: str, aeg_channel_name: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    # Construct URL
    _url = "/?overload=cloudEvent"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if aeg_channel_name is not None:
        _params["aeg-channel-name"] = _SERIALIZER.query("aeg_channel_name", aeg_channel_name, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_event_grid_publish_custom_event_events_request(*, api_version: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    # Construct URL
    _url = "/?overload=customEvent"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


class EventGridClientOperationsMixin(EventGridClientMixinABC):
    @overload
    def publish_event_grid_events(  # pylint: disable=inconsistent-return-statements
        self, events: List[_models.EventGridEvent], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Publishes a batch of events to an Azure Event Grid topic.

        :param events: An array of events to be published to Event Grid. Required.
        :type events: list[~eventgrid.models.EventGridEvent]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def publish_event_grid_events(  # pylint: disable=inconsistent-return-statements
        self, events: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Publishes a batch of events to an Azure Event Grid topic.

        :param events: An array of events to be published to Event Grid. Required.
        :type events: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def publish_event_grid_events(  # pylint: disable=inconsistent-return-statements
        self, events: Union[List[_models.EventGridEvent], IO], **kwargs: Any
    ) -> None:
        """Publishes a batch of events to an Azure Event Grid topic.

        :param events: An array of events to be published to Event Grid. Is either a [EventGridEvent]
         type or a IO type. Required.
        :type events: list[~eventgrid.models.EventGridEvent] or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(events, (IO, bytes)):
            _content = events
        else:
            _content = json.dumps(events, cls=AzureJSONEncoder)  # type: ignore

        request = build_event_grid_publish_event_grid_events_request(
            api_version=self._config.api_version,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "topicHostname": self._serialize.url(
                "self._config.topic_hostname", self._config.topic_hostname, "str", skip_quote=True
            ),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    def publish_cloud_event_events(  # pylint: disable=inconsistent-return-statements
        self,
        events: List[_models.CloudEventEvent],
        *,
        aeg_channel_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Publishes a batch of events to an Azure Event Grid topic.

        :param events: An array of events to be published to Event Grid. Required.
        :type events: list[~eventgrid.models.CloudEventEvent]
        :keyword aeg_channel_name: Required only when publishing to partner namespaces with partner
         topic routing mode ChannelNameHeader. Default value is None.
        :paramtype aeg_channel_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def publish_cloud_event_events(  # pylint: disable=inconsistent-return-statements
        self,
        events: IO,
        *,
        aeg_channel_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Publishes a batch of events to an Azure Event Grid topic.

        :param events: An array of events to be published to Event Grid. Required.
        :type events: IO
        :keyword aeg_channel_name: Required only when publishing to partner namespaces with partner
         topic routing mode ChannelNameHeader. Default value is None.
        :paramtype aeg_channel_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def publish_cloud_event_events(  # pylint: disable=inconsistent-return-statements
        self, events: Union[List[_models.CloudEventEvent], IO], *, aeg_channel_name: Optional[str] = None, **kwargs: Any
    ) -> None:
        """Publishes a batch of events to an Azure Event Grid topic.

        :param events: An array of events to be published to Event Grid. Is either a [CloudEventEvent]
         type or a IO type. Required.
        :type events: list[~eventgrid.models.CloudEventEvent] or IO
        :keyword aeg_channel_name: Required only when publishing to partner namespaces with partner
         topic routing mode ChannelNameHeader. Default value is None.
        :paramtype aeg_channel_name: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(events, (IO, bytes)):
            _content = events
        else:
            _content = json.dumps(events, cls=AzureJSONEncoder)  # type: ignore

        request = build_event_grid_publish_cloud_event_events_request(
            api_version=self._config.api_version,
            aeg_channel_name=aeg_channel_name,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "topicHostname": self._serialize.url(
                "self._config.topic_hostname", self._config.topic_hostname, "str", skip_quote=True
            ),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    def publish_custom_event_events(  # pylint: disable=inconsistent-return-statements
        self, events: List[_models.CustomEventEvent], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Publishes a batch of events to an Azure Event Grid topic.

        :param events: An array of events to be published to Event Grid. Required.
        :type events: list[~eventgrid.models.CustomEventEvent]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def publish_custom_event_events(  # pylint: disable=inconsistent-return-statements
        self, events: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Publishes a batch of events to an Azure Event Grid topic.

        :param events: An array of events to be published to Event Grid. Required.
        :type events: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def publish_custom_event_events(  # pylint: disable=inconsistent-return-statements
        self, events: Union[List[_models.CustomEventEvent], IO], **kwargs: Any
    ) -> None:
        """Publishes a batch of events to an Azure Event Grid topic.

        :param events: An array of events to be published to Event Grid. Is either a [CustomEventEvent]
         type or a IO type. Required.
        :type events: list[~eventgrid.models.CustomEventEvent] or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(events, (IO, bytes)):
            _content = events
        else:
            _content = json.dumps(events, cls=AzureJSONEncoder)  # type: ignore

        request = build_event_grid_publish_custom_event_events_request(
            api_version=self._config.api_version,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "topicHostname": self._serialize.url(
                "self._config.topic_hostname", self._config.topic_hostname, "str", skip_quote=True
            ),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})
