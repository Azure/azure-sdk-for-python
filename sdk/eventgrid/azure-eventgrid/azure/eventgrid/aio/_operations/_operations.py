# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import json
from typing import Any, Callable, Dict, IO, List, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._model_base import AzureJSONEncoder
from ..._operations._operations import (
    build_event_grid_publisher_publish_cloud_events_request,
    build_event_grid_publisher_publish_custom_events_request,
    build_event_grid_publisher_publish_event_grid_events_request,
)
from .._vendor import EventGridPublisherClientMixinABC

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class EventGridPublisherClientOperationsMixin(EventGridPublisherClientMixinABC):
    @distributed_trace_async
    async def _publish_cloud_events(  # pylint: disable=inconsistent-return-statements
        self, events: List[_models._models.CloudEventEvent], *, channel_name: Optional[str] = None, **kwargs: Any
    ) -> None:
        """Publish CloudEvents.

        :param events: Events being published. Required.
        :type events: list[~azure.eventgrid.models.CloudEventEvent]
        :keyword channel_name: Required only when publishing to partner namespaces with partner topic
         routing mode ChannelNameHeader. Default value is None.
        :paramtype channel_name: str
        :keyword content_type: content type. Default value is "application/cloudevents-batch+json;
         charset=utf-8".
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: str = kwargs.pop(
            "content_type", _headers.pop("content-type", "application/cloudevents-batch+json; charset=utf-8")
        )
        cls: ClsType[None] = kwargs.pop("cls", None)

        _content = json.dumps(events, cls=AzureJSONEncoder, exclude_readonly=True)  # type: ignore

        request = build_event_grid_publisher_publish_cloud_events_request(
            channel_name=channel_name,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    async def _publish_event_grid_events(  # pylint: disable=inconsistent-return-statements
        self, events: List[_models._models.EventGridEvent], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        ...

    @overload
    async def _publish_event_grid_events(  # pylint: disable=inconsistent-return-statements
        self, events: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        ...

    @distributed_trace_async
    async def _publish_event_grid_events(  # pylint: disable=inconsistent-return-statements
        self, events: Union[List[_models._models.EventGridEvent], IO], **kwargs: Any
    ) -> None:
        """Publish EventGridEvents.

        :param events: Events being published. Is either a [EventGridEvent] type or a IO type.
         Required.
        :type events: list[~azure.eventgrid.models.EventGridEvent] or IO
        :keyword content_type: content type. Default value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("content-type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(events, (IOBase, bytes)):
            _content = events
        else:
            _content = json.dumps(events, cls=AzureJSONEncoder, exclude_readonly=True)  # type: ignore

        request = build_event_grid_publisher_publish_event_grid_events_request(
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @overload
    async def _publish_custom_events(  # pylint: disable=inconsistent-return-statements
        self, events: List[_models._models.CustomEventEvent], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        ...

    @overload
    async def _publish_custom_events(  # pylint: disable=inconsistent-return-statements
        self, events: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        ...

    @distributed_trace_async
    async def _publish_custom_events(  # pylint: disable=inconsistent-return-statements
        self, events: Union[List[_models._models.CustomEventEvent], IO], **kwargs: Any
    ) -> None:
        """Publish custom events.

        :param events: Events being published. Is either a [CustomEventEvent] type or a IO type.
         Required.
        :type events: list[~azure.eventgrid.models.CustomEventEvent] or IO
        :keyword content_type: content type. Default value is None.
        :paramtype content_type: str
        :keyword bool stream: Whether to stream the response of this operation. Defaults to False. You
         will have to context manage the returned stream.
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("content-type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(events, (IOBase, bytes)):
            _content = events
        else:
            _content = json.dumps(events, cls=AzureJSONEncoder, exclude_readonly=True)  # type: ignore

        request = build_event_grid_publisher_publish_custom_events_request(
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})
