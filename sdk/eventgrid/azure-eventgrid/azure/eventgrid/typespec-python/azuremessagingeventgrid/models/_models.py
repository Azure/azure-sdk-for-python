# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, List, Mapping, Optional, TYPE_CHECKING, overload

from .. import _model_base
from .._model_base import rest_field

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class BrokerProperties(_model_base.Model):
    """Properties of the Event Broker operation.

    All required parameters must be populated in order to send to Azure.

    :ivar lock_token: The token used to lock the event. Required.
    :vartype lock_token: ~azuremessagingeventgrid.models.LockToken
    """

    lock_token: "_models.LockToken" = rest_field(name="lockToken")
    """The token used to lock the event. Required. """

    @overload
    def __init__(
        self,
        *,
        lock_token: "_models.LockToken",
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class CloudEventEvent(_model_base.Model):
    """Properties of an event published to an Azure Messaging EventGrid Namespace topic using the
    CloudEvent 1.0 Schema.

    All required parameters must be populated in order to send to Azure.

    :ivar id: An identifier for the event. The combination of id and source must be unique for each
     distinct event. Required.
    :vartype id: str
    :ivar source: Identifies the context in which an event happened. The combination of id and
     source must be unique for each distinct event. Required.
    :vartype source: str
    :ivar data: Event data specific to the event type.
    :vartype data: ~azuremessagingeventgrid.models.object
    :ivar type: Type of event related to the originating occurrence. Required.
    :vartype type: str
    :ivar time: The time (in UTC) the event was generated, in RFC3339 format.
    :vartype time: ~datetime.datetime
    :ivar spec_version: The version of the CloudEvents specification which the event uses.
     Required.
    :vartype spec_version: str
    :ivar data_schema: Identifies the schema that data adheres to.
    :vartype data_schema: str
    :ivar data_content_type: Content type of data value.
    :vartype data_content_type: str
    :ivar subject: This describes the subject of the event in the context of the event producer
     (identified by source).
    :vartype subject: str
    """

    id: str = rest_field()
    """An identifier for the event. The combination of id and source must be unique for each distinct event. Required. """
    source: str = rest_field()
    """Identifies the context in which an event happened. The combination of id and source must be unique for each distinct event. Required. """
    data: Optional["_models.object"] = rest_field()
    """Event data specific to the event type. """
    type: str = rest_field()
    """Type of event related to the originating occurrence. Required. """
    time: Optional[datetime.datetime] = rest_field()
    """The time (in UTC) the event was generated, in RFC3339 format. """
    spec_version: str = rest_field(name="specVersion")
    """The version of the CloudEvents specification which the event uses. Required. """
    data_schema: Optional[str] = rest_field(name="dataSchema")
    """Identifies the schema that data adheres to. """
    data_content_type: Optional[str] = rest_field(name="dataContentType")
    """Content type of data value. """
    subject: Optional[str] = rest_field()
    """This describes the subject of the event in the context of the event producer (identified by source). """

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        source: str,
        type: str,
        spec_version: str,
        data: Optional["_models.object"] = None,
        time: Optional[datetime.datetime] = None,
        data_schema: Optional[str] = None,
        data_content_type: Optional[str] = None,
        subject: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class FailedLockToken(_model_base.Model):
    """Failed LockToken information.

    All required parameters must be populated in order to send to Azure.

    :ivar lock_token: LockToken value. Required.
    :vartype lock_token: ~azuremessagingeventgrid.models.LockToken
    :ivar error_code: Error code. Required.
    :vartype error_code: int
    :ivar error_description: Description of the error. Required.
    :vartype error_description: str
    """

    lock_token: "_models.LockToken" = rest_field(name="lockToken")
    """LockToken value. Required. """
    error_code: int = rest_field(name="errorCode")
    """Error code. Required. """
    error_description: str = rest_field(name="errorDescription")
    """Description of the error. Required. """

    @overload
    def __init__(
        self,
        *,
        lock_token: "_models.LockToken",
        error_code: int,
        error_description: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class LockToken(_model_base.Model):
    """LockToken information.

    All required parameters must be populated in order to send to Azure.

    :ivar lock_token: The token used to lock the event. Required.
    :vartype lock_token: str
    """

    lock_token: str = rest_field(name="lockToken")
    """The token used to lock the event. Required. """

    @overload
    def __init__(
        self,
        *,
        lock_token: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class LockTokensResponse(_model_base.Model):
    """Details of the LockTokens information. This is used for both Acknowledge and Release operation
    response.

    All required parameters must be populated in order to send to Azure.

    :ivar failed_lock_tokens: Array of LockToken values for failed cloud events. Required.
    :vartype failed_lock_tokens: list[~azuremessagingeventgrid.models.FailedLockToken]
    :ivar succeeded_lock_tokens: Array of LockToken values for succeeded cloud events. Required.
    :vartype succeeded_lock_tokens: list[str]
    """

    failed_lock_tokens: List["_models.FailedLockToken"] = rest_field(name="failedLockTokens")
    """Array of LockToken values for failed cloud events. Required. """
    succeeded_lock_tokens: List[str] = rest_field(name="succeededLockTokens")
    """Array of LockToken values for succeeded cloud events. Required. """

    @overload
    def __init__(
        self,
        *,
        failed_lock_tokens: List["_models.FailedLockToken"],
        succeeded_lock_tokens: List[str],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class object(_model_base.Model):
    """object."""


class ReceiveDetails(_model_base.Model):
    """Receive operation details per Cloud Event.

    All required parameters must be populated in order to send to Azure.

    :ivar broker_properties: The Event Broker details. Required.
    :vartype broker_properties: ~azuremessagingeventgrid.models.BrokerProperties
    :ivar event: Cloud Event details. Required.
    :vartype event: ~azuremessagingeventgrid.models.CloudEventEvent
    """

    broker_properties: "_models.BrokerProperties" = rest_field(name="brokerProperties")
    """The Event Broker details. Required. """
    event: "_models.CloudEventEvent" = rest_field()
    """Cloud Event details. Required. """

    @overload
    def __init__(
        self,
        *,
        broker_properties: "_models.BrokerProperties",
        event: "_models.CloudEventEvent",
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ReceiveResponse(_model_base.Model):
    """Details of the Receive operation response.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Array of receive responses, one per cloud event. Required.
    :vartype value: list[~azuremessagingeventgrid.models.ReceiveDetails]
    """

    value: List["_models.ReceiveDetails"] = rest_field()
    """Array of receive responses, one per cloud event. Required. """

    @overload
    def __init__(
        self,
        *,
        value: List["_models.ReceiveDetails"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
