# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import TYPE_CHECKING

from azure.core import PipelineClient
from azure.servicebus import ReceivedMessage
from msrest import Deserializer, Serializer
import json

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any

from ._models import DeserializedEvent
from ._helpers import generate_shared_access_signature
from . import _constants as constants

class EventGridConsumer:
    """
    A consumer responsible for deserializing event handler messages into a list of event type objects
    specified in the EventGridEvents/CloudEvents.
    """

    def __init__(self, **kwargs):
        # type: (Any) -> None
        pass

    def deserialize_events(self, events, **kwargs):
        # type: (azure.eventhub.EventData, azure.functions.EventGridEvent, azure.servicebus.message.ReceivedMessage, azure.functions.HttpRequest, azure.storage.queue.QueueMessage) -> List[models.DeserializedEvent]
        """A message of a list of events in CloudEvent/EventGridEvent format from an event handler will be parsed and returned as a list of
        EventContainer objects.
        :param events: The event handler message to be deserialized.
        :type events: azure.eventhub.EventData or azure.functions.EventGridEvent or  azure.servicebus.Message or azure.functions.HttpRequest or azure.storage.queue.QueueMessage
        :rtype: List[models.DeserializedEvent]

        :raise: :class:`ValueError`, when events are not of CloudEvent or EventGridEvent format.
        """
        if isinstance(events, ReceivedMessage):
            dict_event = json.loads(str(events))
            return [DeserializedEvent(dict_event)]

        return None