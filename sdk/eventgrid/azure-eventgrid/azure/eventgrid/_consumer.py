# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import TYPE_CHECKING
import json
import six
import logging

from azure.core import PipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any

_LOGGER = logging.getLogger(__name__)

from ._models import DeserializedEvent

class EventGridConsumer(object):
    """
    A consumer responsible for deserializing event handler messages, to allow for access to strongly typed Event objects.
    """

    def deserialize_event(self, event, **kwargs):
        # type: (Union[str, dict, bytes]) -> models.DeserializedEvent
        """Single event following CloudEvent/EventGridEvent schema will be parsed and returned as DeserializedEvent.
        :param event: The event to be deserialized.
        :type event: Union[str, dict, bytes]
        :keyword str encoding: The encoding that should be used. Defaults to 'utf-8'
        :rtype: models.DeserializedEvent
        :raises: :class:`ValueError`, when events do not follow CloudEvent or EventGridEvent schema.
        """
        encode = kwargs.pop('encoding', 'utf-8')
        try:
            if isinstance(event, six.binary_type):
                event = json.loads(event.decode(encode))
            elif isinstance(event, six.string_types):
                event = json.loads(event)
            return DeserializedEvent(event)
        except Exception as err:
            _LOGGER.error('Error: cannot deserialize event. Event does not have a valid format. Event must be a string, dict, or bytes following the CloudEvent/EventGridEvent schema.')
            _LOGGER.error('Your event: {}'.format(event))
            _LOGGER.error(err)
            raise ValueError('Error: cannot deserialize event. Event does not have a valid format. Event must be a string, dict, or bytes following the CloudEvent/EventGridEvent schema.')
