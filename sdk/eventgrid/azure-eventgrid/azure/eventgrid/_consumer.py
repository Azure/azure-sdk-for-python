# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import TYPE_CHECKING
from base64 import b64decode
import json

from azure.core import PipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any

from ._models import DeserializedEvent
from ._helpers import generate_shared_access_signature
from . import _constants as constants

class EventGridConsumer(object):
    """
    A consumer responsible for deserializing event handler messages, to allow for access to strongly typed Event objects.
    """

    def deserialize_event(self, event, is_bytes=False, **kwargs):
        # type: (Union[str, dict]) -> models.DeserializedEvent
        """Single event in CloudEvent/EventGridEvent format will be parsed and returned as DeserializedEvent.
        :param event: The event to be deserialized. If string is bytes string, is_bytes arg must be set to True.
        :type event: Union[str, dict]
        :param is_bytes: True/False value depending on whether event is bytes string. Set to False by default.
        :type is_bytes: bool 
        :rtype: models.DeserializedEvent

        :raise: :class:`ValueError`, when events are not of CloudEvent or EventGridEvent format.
        """
        try:
            if is_bytes:
                dict_event = json.loads(b64decode(event))
                deserialized_event = DeserializedEvent(dict_event)
            elif isinstance(event, str):
                dict_event = json.loads(event)
                deserialized_event = DeserializedEvent(dict_event)
            elif isinstance(event, dict):
                deserialized_event = DeserializedEvent(event)
        except ValueError as e:
            print('deserialize_events(): Event does not have a valid format. Event must be a string, dict, or bytes following the CloudEvent/EventGridEvent schema.')
            print('If you are passing in a byte string, pass is_bytes=True into args.')
            print('Your event: {}'.format(event))
            print(e)

        return deserialized_event
