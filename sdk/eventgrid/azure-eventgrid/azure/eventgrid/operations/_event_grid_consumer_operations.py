# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class EventGridConsumerOperationsMixin(object):
    def consume_message_from_event_handler(self, message, **kwargs):
        """A message of a list of events from an event handler will be deserialized and returned as a list of
        BaseEventType objects.
        :param message: The `EventBatch` object to be sent or a list of `EventGridEvent`/`CloudEvent` to be sent
         in a batch.
        :type message: Union[azure.eventhub.EventData, azure.functions.EventGridEvent, azure.servicebus.Message, azure.functions.HttpRequest, azure.storage.queue.QueueMessage]
        :rtype: List[models.BaseEventType]
        """
        pass
