# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class AppConfigurationKeyValueDeletedEventData(Model):
    """Schema of the Data property of an EventGridEvent for an
    Microsoft.AppConfiguration.KeyValueDeleted event.

    :param key: The key used to identify the key-value that was deleted.
    :type key: str
    :param label: The label, if any, used to identify the key-value that was
     deleted.
    :type label: str
    :param etag: The etag representing the key-value that was deleted.
    :type etag: str
    """

    _attribute_map = {
        'key': {'key': 'key', 'type': 'str'},
        'label': {'key': 'label', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AppConfigurationKeyValueDeletedEventData, self).__init__(**kwargs)
        self.key = kwargs.get('key', None)
        self.label = kwargs.get('label', None)
        self.etag = kwargs.get('etag', None)


class AppConfigurationKeyValueModifiedEventData(Model):
    """Schema of the Data property of an EventGridEvent for an
    Microsoft.AppConfiguration.KeyValueModified event.

    :param key: The key used to identify the key-value that was modified.
    :type key: str
    :param label: The label, if any, used to identify the key-value that was
     modified.
    :type label: str
    :param etag: The etag representing the new state of the key-value.
    :type etag: str
    """

    _attribute_map = {
        'key': {'key': 'key', 'type': 'str'},
        'label': {'key': 'label', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AppConfigurationKeyValueModifiedEventData, self).__init__(**kwargs)
        self.key = kwargs.get('key', None)
        self.label = kwargs.get('label', None)
        self.etag = kwargs.get('etag', None)


class ContainerRegistryArtifactEventData(Model):
    """The content of the event request message.

    :param id: The event ID.
    :type id: str
    :param timestamp: The time at which the event occurred.
    :type timestamp: datetime
    :param action: The action that encompasses the provided event.
    :type action: str
    :param target: The target of the event.
    :type target: ~azure.eventgrid.models.ContainerRegistryArtifactEventTarget
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'action': {'key': 'action', 'type': 'str'},
        'target': {'key': 'target', 'type': 'ContainerRegistryArtifactEventTarget'},
    }

    def __init__(self, **kwargs):
        super(ContainerRegistryArtifactEventData, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.timestamp = kwargs.get('timestamp', None)
        self.action = kwargs.get('action', None)
        self.target = kwargs.get('target', None)


class ContainerRegistryArtifactEventTarget(Model):
    """The target of the event.

    :param media_type: The MIME type of the artifact.
    :type media_type: str
    :param size: The size in bytes of the artifact.
    :type size: long
    :param digest: The digest of the artifact.
    :type digest: str
    :param repository: The repository name of the artifact.
    :type repository: str
    :param tag: The tag of the artifact.
    :type tag: str
    :param name: The name of the artifact.
    :type name: str
    :param version: The version of the artifact.
    :type version: str
    """

    _attribute_map = {
        'media_type': {'key': 'mediaType', 'type': 'str'},
        'size': {'key': 'size', 'type': 'long'},
        'digest': {'key': 'digest', 'type': 'str'},
        'repository': {'key': 'repository', 'type': 'str'},
        'tag': {'key': 'tag', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ContainerRegistryArtifactEventTarget, self).__init__(**kwargs)
        self.media_type = kwargs.get('media_type', None)
        self.size = kwargs.get('size', None)
        self.digest = kwargs.get('digest', None)
        self.repository = kwargs.get('repository', None)
        self.tag = kwargs.get('tag', None)
        self.name = kwargs.get('name', None)
        self.version = kwargs.get('version', None)


class ContainerRegistryChartDeletedEventData(ContainerRegistryArtifactEventData):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ContainerRegistry.ChartDeleted event.

    :param id: The event ID.
    :type id: str
    :param timestamp: The time at which the event occurred.
    :type timestamp: datetime
    :param action: The action that encompasses the provided event.
    :type action: str
    :param target: The target of the event.
    :type target: ~azure.eventgrid.models.ContainerRegistryArtifactEventTarget
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'action': {'key': 'action', 'type': 'str'},
        'target': {'key': 'target', 'type': 'ContainerRegistryArtifactEventTarget'},
    }

    def __init__(self, **kwargs):
        super(ContainerRegistryChartDeletedEventData, self).__init__(**kwargs)


class ContainerRegistryChartPushedEventData(ContainerRegistryArtifactEventData):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ContainerRegistry.ChartPushed event.

    :param id: The event ID.
    :type id: str
    :param timestamp: The time at which the event occurred.
    :type timestamp: datetime
    :param action: The action that encompasses the provided event.
    :type action: str
    :param target: The target of the event.
    :type target: ~azure.eventgrid.models.ContainerRegistryArtifactEventTarget
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'action': {'key': 'action', 'type': 'str'},
        'target': {'key': 'target', 'type': 'ContainerRegistryArtifactEventTarget'},
    }

    def __init__(self, **kwargs):
        super(ContainerRegistryChartPushedEventData, self).__init__(**kwargs)


class ContainerRegistryEventActor(Model):
    """The agent that initiated the event. For most situations, this could be from
    the authorization context of the request.

    :param name: The subject or username associated with the request context
     that generated the event.
    :type name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ContainerRegistryEventActor, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)


class ContainerRegistryEventData(Model):
    """The content of the event request message.

    :param id: The event ID.
    :type id: str
    :param timestamp: The time at which the event occurred.
    :type timestamp: datetime
    :param action: The action that encompasses the provided event.
    :type action: str
    :param target: The target of the event.
    :type target: ~azure.eventgrid.models.ContainerRegistryEventTarget
    :param request: The request that generated the event.
    :type request: ~azure.eventgrid.models.ContainerRegistryEventRequest
    :param actor: The agent that initiated the event. For most situations,
     this could be from the authorization context of the request.
    :type actor: ~azure.eventgrid.models.ContainerRegistryEventActor
    :param source: The registry node that generated the event. Put
     differently, while the actor initiates the event, the source generates it.
    :type source: ~azure.eventgrid.models.ContainerRegistryEventSource
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'action': {'key': 'action', 'type': 'str'},
        'target': {'key': 'target', 'type': 'ContainerRegistryEventTarget'},
        'request': {'key': 'request', 'type': 'ContainerRegistryEventRequest'},
        'actor': {'key': 'actor', 'type': 'ContainerRegistryEventActor'},
        'source': {'key': 'source', 'type': 'ContainerRegistryEventSource'},
    }

    def __init__(self, **kwargs):
        super(ContainerRegistryEventData, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.timestamp = kwargs.get('timestamp', None)
        self.action = kwargs.get('action', None)
        self.target = kwargs.get('target', None)
        self.request = kwargs.get('request', None)
        self.actor = kwargs.get('actor', None)
        self.source = kwargs.get('source', None)


class ContainerRegistryEventRequest(Model):
    """The request that generated the event.

    :param id: The ID of the request that initiated the event.
    :type id: str
    :param addr: The IP or hostname and possibly port of the client connection
     that initiated the event. This is the RemoteAddr from the standard http
     request.
    :type addr: str
    :param host: The externally accessible hostname of the registry instance,
     as specified by the http host header on incoming requests.
    :type host: str
    :param method: The request method that generated the event.
    :type method: str
    :param useragent: The user agent header of the request.
    :type useragent: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'addr': {'key': 'addr', 'type': 'str'},
        'host': {'key': 'host', 'type': 'str'},
        'method': {'key': 'method', 'type': 'str'},
        'useragent': {'key': 'useragent', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ContainerRegistryEventRequest, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.addr = kwargs.get('addr', None)
        self.host = kwargs.get('host', None)
        self.method = kwargs.get('method', None)
        self.useragent = kwargs.get('useragent', None)


class ContainerRegistryEventSource(Model):
    """The registry node that generated the event. Put differently, while the
    actor initiates the event, the source generates it.

    :param addr: The IP or hostname and the port of the registry node that
     generated the event. Generally, this will be resolved by os.Hostname()
     along with the running port.
    :type addr: str
    :param instance_id: The running instance of an application. Changes after
     each restart.
    :type instance_id: str
    """

    _attribute_map = {
        'addr': {'key': 'addr', 'type': 'str'},
        'instance_id': {'key': 'instanceID', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ContainerRegistryEventSource, self).__init__(**kwargs)
        self.addr = kwargs.get('addr', None)
        self.instance_id = kwargs.get('instance_id', None)


class ContainerRegistryEventTarget(Model):
    """The target of the event.

    :param media_type: The MIME type of the referenced object.
    :type media_type: str
    :param size: The number of bytes of the content. Same as Length field.
    :type size: long
    :param digest: The digest of the content, as defined by the Registry V2
     HTTP API Specification.
    :type digest: str
    :param length: The number of bytes of the content. Same as Size field.
    :type length: long
    :param repository: The repository name.
    :type repository: str
    :param url: The direct URL to the content.
    :type url: str
    :param tag: The tag name.
    :type tag: str
    """

    _attribute_map = {
        'media_type': {'key': 'mediaType', 'type': 'str'},
        'size': {'key': 'size', 'type': 'long'},
        'digest': {'key': 'digest', 'type': 'str'},
        'length': {'key': 'length', 'type': 'long'},
        'repository': {'key': 'repository', 'type': 'str'},
        'url': {'key': 'url', 'type': 'str'},
        'tag': {'key': 'tag', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ContainerRegistryEventTarget, self).__init__(**kwargs)
        self.media_type = kwargs.get('media_type', None)
        self.size = kwargs.get('size', None)
        self.digest = kwargs.get('digest', None)
        self.length = kwargs.get('length', None)
        self.repository = kwargs.get('repository', None)
        self.url = kwargs.get('url', None)
        self.tag = kwargs.get('tag', None)


class ContainerRegistryImageDeletedEventData(ContainerRegistryEventData):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ContainerRegistry.ImageDeleted event.

    :param id: The event ID.
    :type id: str
    :param timestamp: The time at which the event occurred.
    :type timestamp: datetime
    :param action: The action that encompasses the provided event.
    :type action: str
    :param target: The target of the event.
    :type target: ~azure.eventgrid.models.ContainerRegistryEventTarget
    :param request: The request that generated the event.
    :type request: ~azure.eventgrid.models.ContainerRegistryEventRequest
    :param actor: The agent that initiated the event. For most situations,
     this could be from the authorization context of the request.
    :type actor: ~azure.eventgrid.models.ContainerRegistryEventActor
    :param source: The registry node that generated the event. Put
     differently, while the actor initiates the event, the source generates it.
    :type source: ~azure.eventgrid.models.ContainerRegistryEventSource
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'action': {'key': 'action', 'type': 'str'},
        'target': {'key': 'target', 'type': 'ContainerRegistryEventTarget'},
        'request': {'key': 'request', 'type': 'ContainerRegistryEventRequest'},
        'actor': {'key': 'actor', 'type': 'ContainerRegistryEventActor'},
        'source': {'key': 'source', 'type': 'ContainerRegistryEventSource'},
    }

    def __init__(self, **kwargs):
        super(ContainerRegistryImageDeletedEventData, self).__init__(**kwargs)


class ContainerRegistryImagePushedEventData(ContainerRegistryEventData):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ContainerRegistry.ImagePushed event.

    :param id: The event ID.
    :type id: str
    :param timestamp: The time at which the event occurred.
    :type timestamp: datetime
    :param action: The action that encompasses the provided event.
    :type action: str
    :param target: The target of the event.
    :type target: ~azure.eventgrid.models.ContainerRegistryEventTarget
    :param request: The request that generated the event.
    :type request: ~azure.eventgrid.models.ContainerRegistryEventRequest
    :param actor: The agent that initiated the event. For most situations,
     this could be from the authorization context of the request.
    :type actor: ~azure.eventgrid.models.ContainerRegistryEventActor
    :param source: The registry node that generated the event. Put
     differently, while the actor initiates the event, the source generates it.
    :type source: ~azure.eventgrid.models.ContainerRegistryEventSource
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'action': {'key': 'action', 'type': 'str'},
        'target': {'key': 'target', 'type': 'ContainerRegistryEventTarget'},
        'request': {'key': 'request', 'type': 'ContainerRegistryEventRequest'},
        'actor': {'key': 'actor', 'type': 'ContainerRegistryEventActor'},
        'source': {'key': 'source', 'type': 'ContainerRegistryEventSource'},
    }

    def __init__(self, **kwargs):
        super(ContainerRegistryImagePushedEventData, self).__init__(**kwargs)


class DeviceConnectionStateEventInfo(Model):
    """Information about the device connection state event.

    :param sequence_number: Sequence number is string representation of a
     hexadecimal number. string compare can be used to identify the larger
     number because both in ASCII and HEX numbers come after alphabets. If you
     are converting the string to hex, then the number is a 256 bit number.
    :type sequence_number: str
    """

    _attribute_map = {
        'sequence_number': {'key': 'sequenceNumber', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(DeviceConnectionStateEventInfo, self).__init__(**kwargs)
        self.sequence_number = kwargs.get('sequence_number', None)


class DeviceConnectionStateEventProperties(Model):
    """Schema of the Data property of an EventGridEvent for a device connection
    state event (DeviceConnected, DeviceDisconnected).

    :param device_id: The unique identifier of the device. This case-sensitive
     string can be up to 128 characters long, and supports ASCII 7-bit
     alphanumeric characters plus the following special characters: - : . + % _
     &#35; * ? ! ( ) , = @ ; $ '.
    :type device_id: str
    :param module_id: The unique identifier of the module. This case-sensitive
     string can be up to 128 characters long, and supports ASCII 7-bit
     alphanumeric characters plus the following special characters: - : . + % _
     &#35; * ? ! ( ) , = @ ; $ '.
    :type module_id: str
    :param hub_name: Name of the IoT Hub where the device was created or
     deleted.
    :type hub_name: str
    :param device_connection_state_event_info: Information about the device
     connection state event.
    :type device_connection_state_event_info:
     ~azure.eventgrid.models.DeviceConnectionStateEventInfo
    """

    _attribute_map = {
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'module_id': {'key': 'moduleId', 'type': 'str'},
        'hub_name': {'key': 'hubName', 'type': 'str'},
        'device_connection_state_event_info': {'key': 'deviceConnectionStateEventInfo', 'type': 'DeviceConnectionStateEventInfo'},
    }

    def __init__(self, **kwargs):
        super(DeviceConnectionStateEventProperties, self).__init__(**kwargs)
        self.device_id = kwargs.get('device_id', None)
        self.module_id = kwargs.get('module_id', None)
        self.hub_name = kwargs.get('hub_name', None)
        self.device_connection_state_event_info = kwargs.get('device_connection_state_event_info', None)


class DeviceLifeCycleEventProperties(Model):
    """Schema of the Data property of an EventGridEvent for a device life cycle
    event (DeviceCreated, DeviceDeleted).

    :param device_id: The unique identifier of the device. This case-sensitive
     string can be up to 128 characters long, and supports ASCII 7-bit
     alphanumeric characters plus the following special characters: - : . + % _
     &#35; * ? ! ( ) , = @ ; $ '.
    :type device_id: str
    :param hub_name: Name of the IoT Hub where the device was created or
     deleted.
    :type hub_name: str
    :param twin: Information about the device twin, which is the cloud
     representation of application device metadata.
    :type twin: ~azure.eventgrid.models.DeviceTwinInfo
    """

    _attribute_map = {
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'hub_name': {'key': 'hubName', 'type': 'str'},
        'twin': {'key': 'twin', 'type': 'DeviceTwinInfo'},
    }

    def __init__(self, **kwargs):
        super(DeviceLifeCycleEventProperties, self).__init__(**kwargs)
        self.device_id = kwargs.get('device_id', None)
        self.hub_name = kwargs.get('hub_name', None)
        self.twin = kwargs.get('twin', None)


class DeviceTelemetryEventProperties(Model):
    """Schema of the Data property of an EventGridEvent for a device telemetry
    event (DeviceTelemetry).

    :param body: The content of the message from the device.
    :type body: object
    :param properties: Application properties are user-defined strings that
     can be added to the message. These fields are optional.
    :type properties: dict[str, str]
    :param system_properties: System properties help identify contents and
     source of the messages.
    :type system_properties: dict[str, str]
    """

    _attribute_map = {
        'body': {'key': 'body', 'type': 'object'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'system_properties': {'key': 'systemProperties', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(DeviceTelemetryEventProperties, self).__init__(**kwargs)
        self.body = kwargs.get('body', None)
        self.properties = kwargs.get('properties', None)
        self.system_properties = kwargs.get('system_properties', None)


class DeviceTwinInfo(Model):
    """Information about the device twin, which is the cloud representation of
    application device metadata.

    :param authentication_type: Authentication type used for this device:
     either SAS, SelfSigned, or CertificateAuthority.
    :type authentication_type: str
    :param cloud_to_device_message_count: Count of cloud to device messages
     sent to this device.
    :type cloud_to_device_message_count: float
    :param connection_state: Whether the device is connected or disconnected.
    :type connection_state: str
    :param device_id: The unique identifier of the device twin.
    :type device_id: str
    :param etag: A piece of information that describes the content of the
     device twin. Each etag is guaranteed to be unique per device twin.
    :type etag: str
    :param last_activity_time: The ISO8601 timestamp of the last activity.
    :type last_activity_time: str
    :param properties: Properties JSON element.
    :type properties: ~azure.eventgrid.models.DeviceTwinInfoProperties
    :param status: Whether the device twin is enabled or disabled.
    :type status: str
    :param status_update_time: The ISO8601 timestamp of the last device twin
     status update.
    :type status_update_time: str
    :param version: An integer that is incremented by one each time the device
     twin is updated.
    :type version: float
    :param x509_thumbprint: The thumbprint is a unique value for the x509
     certificate, commonly used to find a particular certificate in a
     certificate store. The thumbprint is dynamically generated using the SHA1
     algorithm, and does not physically exist in the certificate.
    :type x509_thumbprint:
     ~azure.eventgrid.models.DeviceTwinInfoX509Thumbprint
    """

    _attribute_map = {
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'cloud_to_device_message_count': {'key': 'cloudToDeviceMessageCount', 'type': 'float'},
        'connection_state': {'key': 'connectionState', 'type': 'str'},
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'last_activity_time': {'key': 'lastActivityTime', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'DeviceTwinInfoProperties'},
        'status': {'key': 'status', 'type': 'str'},
        'status_update_time': {'key': 'statusUpdateTime', 'type': 'str'},
        'version': {'key': 'version', 'type': 'float'},
        'x509_thumbprint': {'key': 'x509Thumbprint', 'type': 'DeviceTwinInfoX509Thumbprint'},
    }

    def __init__(self, **kwargs):
        super(DeviceTwinInfo, self).__init__(**kwargs)
        self.authentication_type = kwargs.get('authentication_type', None)
        self.cloud_to_device_message_count = kwargs.get('cloud_to_device_message_count', None)
        self.connection_state = kwargs.get('connection_state', None)
        self.device_id = kwargs.get('device_id', None)
        self.etag = kwargs.get('etag', None)
        self.last_activity_time = kwargs.get('last_activity_time', None)
        self.properties = kwargs.get('properties', None)
        self.status = kwargs.get('status', None)
        self.status_update_time = kwargs.get('status_update_time', None)
        self.version = kwargs.get('version', None)
        self.x509_thumbprint = kwargs.get('x509_thumbprint', None)


class DeviceTwinInfoProperties(Model):
    """Properties JSON element.

    :param desired: A portion of the properties that can be written only by
     the application back-end, and read by the device.
    :type desired: ~azure.eventgrid.models.DeviceTwinProperties
    :param reported: A portion of the properties that can be written only by
     the device, and read by the application back-end.
    :type reported: ~azure.eventgrid.models.DeviceTwinProperties
    """

    _attribute_map = {
        'desired': {'key': 'desired', 'type': 'DeviceTwinProperties'},
        'reported': {'key': 'reported', 'type': 'DeviceTwinProperties'},
    }

    def __init__(self, **kwargs):
        super(DeviceTwinInfoProperties, self).__init__(**kwargs)
        self.desired = kwargs.get('desired', None)
        self.reported = kwargs.get('reported', None)


class DeviceTwinInfoX509Thumbprint(Model):
    """The thumbprint is a unique value for the x509 certificate, commonly used to
    find a particular certificate in a certificate store. The thumbprint is
    dynamically generated using the SHA1 algorithm, and does not physically
    exist in the certificate.

    :param primary_thumbprint: Primary thumbprint for the x509 certificate.
    :type primary_thumbprint: str
    :param secondary_thumbprint: Secondary thumbprint for the x509
     certificate.
    :type secondary_thumbprint: str
    """

    _attribute_map = {
        'primary_thumbprint': {'key': 'primaryThumbprint', 'type': 'str'},
        'secondary_thumbprint': {'key': 'secondaryThumbprint', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(DeviceTwinInfoX509Thumbprint, self).__init__(**kwargs)
        self.primary_thumbprint = kwargs.get('primary_thumbprint', None)
        self.secondary_thumbprint = kwargs.get('secondary_thumbprint', None)


class DeviceTwinMetadata(Model):
    """Metadata information for the properties JSON document.

    :param last_updated: The ISO8601 timestamp of the last time the properties
     were updated.
    :type last_updated: str
    """

    _attribute_map = {
        'last_updated': {'key': 'lastUpdated', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(DeviceTwinMetadata, self).__init__(**kwargs)
        self.last_updated = kwargs.get('last_updated', None)


class DeviceTwinProperties(Model):
    """A portion of the properties that can be written only by the application
    back-end, and read by the device.

    :param metadata: Metadata information for the properties JSON document.
    :type metadata: ~azure.eventgrid.models.DeviceTwinMetadata
    :param version: Version of device twin properties.
    :type version: float
    """

    _attribute_map = {
        'metadata': {'key': 'metadata', 'type': 'DeviceTwinMetadata'},
        'version': {'key': 'version', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(DeviceTwinProperties, self).__init__(**kwargs)
        self.metadata = kwargs.get('metadata', None)
        self.version = kwargs.get('version', None)


class EventGridEvent(Model):
    """Properties of an event published to an Event Grid topic.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. An unique identifier for the event.
    :type id: str
    :param topic: The resource path of the event source.
    :type topic: str
    :param subject: Required. A resource path relative to the topic path.
    :type subject: str
    :param data: Required. Event data specific to the event type.
    :type data: object
    :param event_type: Required. The type of the event that occurred.
    :type event_type: str
    :param event_time: Required. The time (in UTC) the event was generated.
    :type event_time: datetime
    :ivar metadata_version: The schema version of the event metadata.
    :vartype metadata_version: str
    :param data_version: Required. The schema version of the data object.
    :type data_version: str
    """

    _validation = {
        'id': {'required': True},
        'subject': {'required': True},
        'data': {'required': True},
        'event_type': {'required': True},
        'event_time': {'required': True},
        'metadata_version': {'readonly': True},
        'data_version': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'topic': {'key': 'topic', 'type': 'str'},
        'subject': {'key': 'subject', 'type': 'str'},
        'data': {'key': 'data', 'type': 'object'},
        'event_type': {'key': 'eventType', 'type': 'str'},
        'event_time': {'key': 'eventTime', 'type': 'iso-8601'},
        'metadata_version': {'key': 'metadataVersion', 'type': 'str'},
        'data_version': {'key': 'dataVersion', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EventGridEvent, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.topic = kwargs.get('topic', None)
        self.subject = kwargs.get('subject', None)
        self.data = kwargs.get('data', None)
        self.event_type = kwargs.get('event_type', None)
        self.event_time = kwargs.get('event_time', None)
        self.metadata_version = None
        self.data_version = kwargs.get('data_version', None)


class EventHubCaptureFileCreatedEventData(Model):
    """Schema of the Data property of an EventGridEvent for an
    Microsoft.EventHub.CaptureFileCreated event.

    :param fileurl: The path to the capture file.
    :type fileurl: str
    :param file_type: The file type of the capture file.
    :type file_type: str
    :param partition_id: The shard ID.
    :type partition_id: str
    :param size_in_bytes: The file size.
    :type size_in_bytes: int
    :param event_count: The number of events in the file.
    :type event_count: int
    :param first_sequence_number: The smallest sequence number from the queue.
    :type first_sequence_number: int
    :param last_sequence_number: The last sequence number from the queue.
    :type last_sequence_number: int
    :param first_enqueue_time: The first time from the queue.
    :type first_enqueue_time: datetime
    :param last_enqueue_time: The last time from the queue.
    :type last_enqueue_time: datetime
    """

    _attribute_map = {
        'fileurl': {'key': 'fileurl', 'type': 'str'},
        'file_type': {'key': 'fileType', 'type': 'str'},
        'partition_id': {'key': 'partitionId', 'type': 'str'},
        'size_in_bytes': {'key': 'sizeInBytes', 'type': 'int'},
        'event_count': {'key': 'eventCount', 'type': 'int'},
        'first_sequence_number': {'key': 'firstSequenceNumber', 'type': 'int'},
        'last_sequence_number': {'key': 'lastSequenceNumber', 'type': 'int'},
        'first_enqueue_time': {'key': 'firstEnqueueTime', 'type': 'iso-8601'},
        'last_enqueue_time': {'key': 'lastEnqueueTime', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(EventHubCaptureFileCreatedEventData, self).__init__(**kwargs)
        self.fileurl = kwargs.get('fileurl', None)
        self.file_type = kwargs.get('file_type', None)
        self.partition_id = kwargs.get('partition_id', None)
        self.size_in_bytes = kwargs.get('size_in_bytes', None)
        self.event_count = kwargs.get('event_count', None)
        self.first_sequence_number = kwargs.get('first_sequence_number', None)
        self.last_sequence_number = kwargs.get('last_sequence_number', None)
        self.first_enqueue_time = kwargs.get('first_enqueue_time', None)
        self.last_enqueue_time = kwargs.get('last_enqueue_time', None)


class IotHubDeviceConnectedEventData(DeviceConnectionStateEventProperties):
    """Event data for Microsoft.Devices.DeviceConnected event.

    :param device_id: The unique identifier of the device. This case-sensitive
     string can be up to 128 characters long, and supports ASCII 7-bit
     alphanumeric characters plus the following special characters: - : . + % _
     &#35; * ? ! ( ) , = @ ; $ '.
    :type device_id: str
    :param module_id: The unique identifier of the module. This case-sensitive
     string can be up to 128 characters long, and supports ASCII 7-bit
     alphanumeric characters plus the following special characters: - : . + % _
     &#35; * ? ! ( ) , = @ ; $ '.
    :type module_id: str
    :param hub_name: Name of the IoT Hub where the device was created or
     deleted.
    :type hub_name: str
    :param device_connection_state_event_info: Information about the device
     connection state event.
    :type device_connection_state_event_info:
     ~azure.eventgrid.models.DeviceConnectionStateEventInfo
    """

    _attribute_map = {
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'module_id': {'key': 'moduleId', 'type': 'str'},
        'hub_name': {'key': 'hubName', 'type': 'str'},
        'device_connection_state_event_info': {'key': 'deviceConnectionStateEventInfo', 'type': 'DeviceConnectionStateEventInfo'},
    }

    def __init__(self, **kwargs):
        super(IotHubDeviceConnectedEventData, self).__init__(**kwargs)


class IotHubDeviceCreatedEventData(DeviceLifeCycleEventProperties):
    """Event data for Microsoft.Devices.DeviceCreated event.

    :param device_id: The unique identifier of the device. This case-sensitive
     string can be up to 128 characters long, and supports ASCII 7-bit
     alphanumeric characters plus the following special characters: - : . + % _
     &#35; * ? ! ( ) , = @ ; $ '.
    :type device_id: str
    :param hub_name: Name of the IoT Hub where the device was created or
     deleted.
    :type hub_name: str
    :param twin: Information about the device twin, which is the cloud
     representation of application device metadata.
    :type twin: ~azure.eventgrid.models.DeviceTwinInfo
    """

    _attribute_map = {
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'hub_name': {'key': 'hubName', 'type': 'str'},
        'twin': {'key': 'twin', 'type': 'DeviceTwinInfo'},
    }

    def __init__(self, **kwargs):
        super(IotHubDeviceCreatedEventData, self).__init__(**kwargs)


class IotHubDeviceDeletedEventData(DeviceLifeCycleEventProperties):
    """Event data for Microsoft.Devices.DeviceDeleted event.

    :param device_id: The unique identifier of the device. This case-sensitive
     string can be up to 128 characters long, and supports ASCII 7-bit
     alphanumeric characters plus the following special characters: - : . + % _
     &#35; * ? ! ( ) , = @ ; $ '.
    :type device_id: str
    :param hub_name: Name of the IoT Hub where the device was created or
     deleted.
    :type hub_name: str
    :param twin: Information about the device twin, which is the cloud
     representation of application device metadata.
    :type twin: ~azure.eventgrid.models.DeviceTwinInfo
    """

    _attribute_map = {
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'hub_name': {'key': 'hubName', 'type': 'str'},
        'twin': {'key': 'twin', 'type': 'DeviceTwinInfo'},
    }

    def __init__(self, **kwargs):
        super(IotHubDeviceDeletedEventData, self).__init__(**kwargs)


class IotHubDeviceDisconnectedEventData(DeviceConnectionStateEventProperties):
    """Event data for Microsoft.Devices.DeviceDisconnected event.

    :param device_id: The unique identifier of the device. This case-sensitive
     string can be up to 128 characters long, and supports ASCII 7-bit
     alphanumeric characters plus the following special characters: - : . + % _
     &#35; * ? ! ( ) , = @ ; $ '.
    :type device_id: str
    :param module_id: The unique identifier of the module. This case-sensitive
     string can be up to 128 characters long, and supports ASCII 7-bit
     alphanumeric characters plus the following special characters: - : . + % _
     &#35; * ? ! ( ) , = @ ; $ '.
    :type module_id: str
    :param hub_name: Name of the IoT Hub where the device was created or
     deleted.
    :type hub_name: str
    :param device_connection_state_event_info: Information about the device
     connection state event.
    :type device_connection_state_event_info:
     ~azure.eventgrid.models.DeviceConnectionStateEventInfo
    """

    _attribute_map = {
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'module_id': {'key': 'moduleId', 'type': 'str'},
        'hub_name': {'key': 'hubName', 'type': 'str'},
        'device_connection_state_event_info': {'key': 'deviceConnectionStateEventInfo', 'type': 'DeviceConnectionStateEventInfo'},
    }

    def __init__(self, **kwargs):
        super(IotHubDeviceDisconnectedEventData, self).__init__(**kwargs)


class IotHubDeviceTelemetryEventData(DeviceTelemetryEventProperties):
    """Event data for Microsoft.Devices.DeviceTelemetry event.

    :param body: The content of the message from the device.
    :type body: object
    :param properties: Application properties are user-defined strings that
     can be added to the message. These fields are optional.
    :type properties: dict[str, str]
    :param system_properties: System properties help identify contents and
     source of the messages.
    :type system_properties: dict[str, str]
    """

    _attribute_map = {
        'body': {'key': 'body', 'type': 'object'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'system_properties': {'key': 'systemProperties', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(IotHubDeviceTelemetryEventData, self).__init__(**kwargs)


class KeyVaultCertificateExpiredEventData(Model):
    """Schema of the Data property of an EventGridEvent for an CertificateExpired
    event.

    :param id: The id of the object that triggered this event.
    :type id: str
    :param vault_name: Key vault name of the object that triggered this event.
    :type vault_name: str
    :param object_type: The type of the object that triggered this event
    :type object_type: str
    :param object_name: The name of the object that triggered this event
    :type object_name: str
    :param version: The version of the object that triggered this event
    :type version: str
    :param nbf: Not before date of the object that triggered this event
    :type nbf: float
    :param exp: The expiration date of the object that triggered this event
    :type exp: float
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'vault_name': {'key': 'vaultName', 'type': 'str'},
        'object_type': {'key': 'objectType', 'type': 'str'},
        'object_name': {'key': 'objectName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'nbf': {'key': 'nbf', 'type': 'float'},
        'exp': {'key': 'exp', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(KeyVaultCertificateExpiredEventData, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.vault_name = kwargs.get('vault_name', None)
        self.object_type = kwargs.get('object_type', None)
        self.object_name = kwargs.get('object_name', None)
        self.version = kwargs.get('version', None)
        self.nbf = kwargs.get('nbf', None)
        self.exp = kwargs.get('exp', None)


class KeyVaultCertificateNearExpiryEventData(Model):
    """Schema of the Data property of an EventGridEvent for an
    CertificateNearExpiry event.

    :param id: The id of the object that triggered this event.
    :type id: str
    :param vault_name: Key vault name of the object that triggered this event.
    :type vault_name: str
    :param object_type: The type of the object that triggered this event
    :type object_type: str
    :param object_name: The name of the object that triggered this event
    :type object_name: str
    :param version: The version of the object that triggered this event
    :type version: str
    :param nbf: Not before date of the object that triggered this event
    :type nbf: float
    :param exp: The expiration date of the object that triggered this event
    :type exp: float
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'vault_name': {'key': 'vaultName', 'type': 'str'},
        'object_type': {'key': 'objectType', 'type': 'str'},
        'object_name': {'key': 'objectName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'nbf': {'key': 'nbf', 'type': 'float'},
        'exp': {'key': 'exp', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(KeyVaultCertificateNearExpiryEventData, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.vault_name = kwargs.get('vault_name', None)
        self.object_type = kwargs.get('object_type', None)
        self.object_name = kwargs.get('object_name', None)
        self.version = kwargs.get('version', None)
        self.nbf = kwargs.get('nbf', None)
        self.exp = kwargs.get('exp', None)


class KeyVaultCertificateNewVersionCreatedEventData(Model):
    """Schema of the Data property of an EventGridEvent for an
    CertificateNewVersionCreated event.

    :param id: The id of the object that triggered this event.
    :type id: str
    :param vault_name: Key vault name of the object that triggered this event.
    :type vault_name: str
    :param object_type: The type of the object that triggered this event
    :type object_type: str
    :param object_name: The name of the object that triggered this event
    :type object_name: str
    :param version: The version of the object that triggered this event
    :type version: str
    :param nbf: Not before date of the object that triggered this event
    :type nbf: float
    :param exp: The expiration date of the object that triggered this event
    :type exp: float
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'vault_name': {'key': 'vaultName', 'type': 'str'},
        'object_type': {'key': 'objectType', 'type': 'str'},
        'object_name': {'key': 'objectName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'nbf': {'key': 'nbf', 'type': 'float'},
        'exp': {'key': 'exp', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(KeyVaultCertificateNewVersionCreatedEventData, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.vault_name = kwargs.get('vault_name', None)
        self.object_type = kwargs.get('object_type', None)
        self.object_name = kwargs.get('object_name', None)
        self.version = kwargs.get('version', None)
        self.nbf = kwargs.get('nbf', None)
        self.exp = kwargs.get('exp', None)


class KeyVaultKeyExpiredEventData(Model):
    """Schema of the Data property of an EventGridEvent for an KeyExpired event.

    :param id: The id of the object that triggered this event.
    :type id: str
    :param vault_name: Key vault name of the object that triggered this event.
    :type vault_name: str
    :param object_type: The type of the object that triggered this event
    :type object_type: str
    :param object_name: The name of the object that triggered this event
    :type object_name: str
    :param version: The version of the object that triggered this event
    :type version: str
    :param nbf: Not before date of the object that triggered this event
    :type nbf: float
    :param exp: The expiration date of the object that triggered this event
    :type exp: float
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'vault_name': {'key': 'vaultName', 'type': 'str'},
        'object_type': {'key': 'objectType', 'type': 'str'},
        'object_name': {'key': 'objectName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'nbf': {'key': 'nbf', 'type': 'float'},
        'exp': {'key': 'exp', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(KeyVaultKeyExpiredEventData, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.vault_name = kwargs.get('vault_name', None)
        self.object_type = kwargs.get('object_type', None)
        self.object_name = kwargs.get('object_name', None)
        self.version = kwargs.get('version', None)
        self.nbf = kwargs.get('nbf', None)
        self.exp = kwargs.get('exp', None)


class KeyVaultKeyNearExpiryEventData(Model):
    """Schema of the Data property of an EventGridEvent for an KeyNearExpiry
    event.

    :param id: The id of the object that triggered this event.
    :type id: str
    :param vault_name: Key vault name of the object that triggered this event.
    :type vault_name: str
    :param object_type: The type of the object that triggered this event
    :type object_type: str
    :param object_name: The name of the object that triggered this event
    :type object_name: str
    :param version: The version of the object that triggered this event
    :type version: str
    :param nbf: Not before date of the object that triggered this event
    :type nbf: float
    :param exp: The expiration date of the object that triggered this event
    :type exp: float
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'vault_name': {'key': 'vaultName', 'type': 'str'},
        'object_type': {'key': 'objectType', 'type': 'str'},
        'object_name': {'key': 'objectName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'nbf': {'key': 'nbf', 'type': 'float'},
        'exp': {'key': 'exp', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(KeyVaultKeyNearExpiryEventData, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.vault_name = kwargs.get('vault_name', None)
        self.object_type = kwargs.get('object_type', None)
        self.object_name = kwargs.get('object_name', None)
        self.version = kwargs.get('version', None)
        self.nbf = kwargs.get('nbf', None)
        self.exp = kwargs.get('exp', None)


class KeyVaultKeyNewVersionCreatedEventData(Model):
    """Schema of the Data property of an EventGridEvent for an
    KeyNewVersionCreated event.

    :param id: The id of the object that triggered this event.
    :type id: str
    :param vault_name: Key vault name of the object that triggered this event.
    :type vault_name: str
    :param object_type: The type of the object that triggered this event
    :type object_type: str
    :param object_name: The name of the object that triggered this event
    :type object_name: str
    :param version: The version of the object that triggered this event
    :type version: str
    :param nbf: Not before date of the object that triggered this event
    :type nbf: float
    :param exp: The expiration date of the object that triggered this event
    :type exp: float
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'vault_name': {'key': 'vaultName', 'type': 'str'},
        'object_type': {'key': 'objectType', 'type': 'str'},
        'object_name': {'key': 'objectName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'nbf': {'key': 'nbf', 'type': 'float'},
        'exp': {'key': 'exp', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(KeyVaultKeyNewVersionCreatedEventData, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.vault_name = kwargs.get('vault_name', None)
        self.object_type = kwargs.get('object_type', None)
        self.object_name = kwargs.get('object_name', None)
        self.version = kwargs.get('version', None)
        self.nbf = kwargs.get('nbf', None)
        self.exp = kwargs.get('exp', None)


class KeyVaultSecretExpiredEventData(Model):
    """Schema of the Data property of an EventGridEvent for an SecretExpired
    event.

    :param id: The id of the object that triggered this event.
    :type id: str
    :param vault_name: Key vault name of the object that triggered this event.
    :type vault_name: str
    :param object_type: The type of the object that triggered this event
    :type object_type: str
    :param object_name: The name of the object that triggered this event
    :type object_name: str
    :param version: The version of the object that triggered this event
    :type version: str
    :param nbf: Not before date of the object that triggered this event
    :type nbf: float
    :param exp: The expiration date of the object that triggered this event
    :type exp: float
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'vault_name': {'key': 'vaultName', 'type': 'str'},
        'object_type': {'key': 'objectType', 'type': 'str'},
        'object_name': {'key': 'objectName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'nbf': {'key': 'nbf', 'type': 'float'},
        'exp': {'key': 'exp', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(KeyVaultSecretExpiredEventData, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.vault_name = kwargs.get('vault_name', None)
        self.object_type = kwargs.get('object_type', None)
        self.object_name = kwargs.get('object_name', None)
        self.version = kwargs.get('version', None)
        self.nbf = kwargs.get('nbf', None)
        self.exp = kwargs.get('exp', None)


class KeyVaultSecretNearExpiryEventData(Model):
    """Schema of the Data property of an EventGridEvent for an SecretNearExpiry
    event.

    :param id: The id of the object that triggered this event.
    :type id: str
    :param vault_name: Key vault name of the object that triggered this event.
    :type vault_name: str
    :param object_type: The type of the object that triggered this event
    :type object_type: str
    :param object_name: The name of the object that triggered this event
    :type object_name: str
    :param version: The version of the object that triggered this event
    :type version: str
    :param nbf: Not before date of the object that triggered this event
    :type nbf: float
    :param exp: The expiration date of the object that triggered this event
    :type exp: float
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'vault_name': {'key': 'vaultName', 'type': 'str'},
        'object_type': {'key': 'objectType', 'type': 'str'},
        'object_name': {'key': 'objectName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'nbf': {'key': 'nbf', 'type': 'float'},
        'exp': {'key': 'exp', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(KeyVaultSecretNearExpiryEventData, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.vault_name = kwargs.get('vault_name', None)
        self.object_type = kwargs.get('object_type', None)
        self.object_name = kwargs.get('object_name', None)
        self.version = kwargs.get('version', None)
        self.nbf = kwargs.get('nbf', None)
        self.exp = kwargs.get('exp', None)


class KeyVaultSecretNewVersionCreatedEventData(Model):
    """Schema of the Data property of an EventGridEvent for an
    SecretNewVersionCreated event.

    :param id: The id of the object that triggered this event.
    :type id: str
    :param vault_name: Key vault name of the object that triggered this event.
    :type vault_name: str
    :param object_type: The type of the object that triggered this event
    :type object_type: str
    :param object_name: The name of the object that triggered this event
    :type object_name: str
    :param version: The version of the object that triggered this event
    :type version: str
    :param nbf: Not before date of the object that triggered this event
    :type nbf: float
    :param exp: The expiration date of the object that triggered this event
    :type exp: float
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'vault_name': {'key': 'vaultName', 'type': 'str'},
        'object_type': {'key': 'objectType', 'type': 'str'},
        'object_name': {'key': 'objectName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'nbf': {'key': 'nbf', 'type': 'float'},
        'exp': {'key': 'exp', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(KeyVaultSecretNewVersionCreatedEventData, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.vault_name = kwargs.get('vault_name', None)
        self.object_type = kwargs.get('object_type', None)
        self.object_name = kwargs.get('object_name', None)
        self.version = kwargs.get('version', None)
        self.nbf = kwargs.get('nbf', None)
        self.exp = kwargs.get('exp', None)


class MachineLearningServicesDatasetDriftDetectedEventData(Model):
    """Schema of the Data property of an EventGridEvent for an
    Microsoft.MachineLearningServices.DatasetDriftDetected event.

    :param data_drift_id: The ID of the data drift monitor that triggered the
     event.
    :type data_drift_id: str
    :param data_drift_name: The name of the data drift monitor that triggered
     the event.
    :type data_drift_name: str
    :param run_id: The ID of the Run that detected data drift.
    :type run_id: str
    :param base_dataset_id: The ID of the base Dataset used to detect drift.
    :type base_dataset_id: str
    :param target_dataset_id: The ID of the target Dataset used to detect
     drift.
    :type target_dataset_id: str
    :param drift_coefficient: The coefficient result that triggered the event.
    :type drift_coefficient: float
    :param start_time: The start time of the target dataset time series that
     resulted in drift detection.
    :type start_time: datetime
    :param end_time: The end time of the target dataset time series that
     resulted in drift detection.
    :type end_time: datetime
    """

    _attribute_map = {
        'data_drift_id': {'key': 'dataDriftId', 'type': 'str'},
        'data_drift_name': {'key': 'dataDriftName', 'type': 'str'},
        'run_id': {'key': 'runId', 'type': 'str'},
        'base_dataset_id': {'key': 'baseDatasetId', 'type': 'str'},
        'target_dataset_id': {'key': 'targetDatasetId', 'type': 'str'},
        'drift_coefficient': {'key': 'driftCoefficient', 'type': 'float'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(MachineLearningServicesDatasetDriftDetectedEventData, self).__init__(**kwargs)
        self.data_drift_id = kwargs.get('data_drift_id', None)
        self.data_drift_name = kwargs.get('data_drift_name', None)
        self.run_id = kwargs.get('run_id', None)
        self.base_dataset_id = kwargs.get('base_dataset_id', None)
        self.target_dataset_id = kwargs.get('target_dataset_id', None)
        self.drift_coefficient = kwargs.get('drift_coefficient', None)
        self.start_time = kwargs.get('start_time', None)
        self.end_time = kwargs.get('end_time', None)


class MachineLearningServicesModelDeployedEventData(Model):
    """Schema of the Data property of an EventGridEvent for an
    Microsoft.MachineLearningServices.ModelDeployed event.

    :param service_name: The name of the deployed service.
    :type service_name: str
    :param service_compute_type: The compute type (e.g. ACI, AKS) of the
     deployed service.
    :type service_compute_type: str
    :param model_ids: A common separated list of model IDs. The IDs of the
     models deployed in the service.
    :type model_ids: str
    :param service_tags: The tags of the deployed service.
    :type service_tags: object
    :param service_properties: The properties of the deployed service.
    :type service_properties: object
    """

    _attribute_map = {
        'service_name': {'key': 'serviceName', 'type': 'str'},
        'service_compute_type': {'key': 'serviceComputeType', 'type': 'str'},
        'model_ids': {'key': 'modelIds', 'type': 'str'},
        'service_tags': {'key': 'serviceTags', 'type': 'object'},
        'service_properties': {'key': 'serviceProperties', 'type': 'object'},
    }

    def __init__(self, **kwargs):
        super(MachineLearningServicesModelDeployedEventData, self).__init__(**kwargs)
        self.service_name = kwargs.get('service_name', None)
        self.service_compute_type = kwargs.get('service_compute_type', None)
        self.model_ids = kwargs.get('model_ids', None)
        self.service_tags = kwargs.get('service_tags', None)
        self.service_properties = kwargs.get('service_properties', None)


class MachineLearningServicesModelRegisteredEventData(Model):
    """Schema of the Data property of an EventGridEvent for an
    Microsoft.MachineLearningServices.ModelRegistered event.

    :param model_name: The name of the model that was registered.
    :type model_name: str
    :param model_version: The version of the model that was registered.
    :type model_version: int
    :param model_tags: The tags of the model that was registered.
    :type model_tags: object
    :param model_properties: The properties of the model that was registered.
    :type model_properties: object
    """

    _attribute_map = {
        'model_name': {'key': 'modelName', 'type': 'str'},
        'model_version': {'key': 'modelVersion', 'type': 'int'},
        'model_tags': {'key': 'modelTags', 'type': 'object'},
        'model_properties': {'key': 'modelProperties', 'type': 'object'},
    }

    def __init__(self, **kwargs):
        super(MachineLearningServicesModelRegisteredEventData, self).__init__(**kwargs)
        self.model_name = kwargs.get('model_name', None)
        self.model_version = kwargs.get('model_version', None)
        self.model_tags = kwargs.get('model_tags', None)
        self.model_properties = kwargs.get('model_properties', None)


class MachineLearningServicesRunCompletedEventData(Model):
    """Schema of the Data property of an EventGridEvent for an
    Microsoft.MachineLearningServices.RunCompleted event.

    :param experiment_id: The ID of the experiment that the run belongs to.
    :type experiment_id: str
    :param experiment_name: The name of the experiment that the run belongs
     to.
    :type experiment_name: str
    :param run_id: The ID of the Run that was completed.
    :type run_id: str
    :param run_type: The Run Type of the completed Run.
    :type run_type: str
    :param run_tags: The tags of the completed Run.
    :type run_tags: object
    :param run_properties: The properties of the completed Run.
    :type run_properties: object
    """

    _attribute_map = {
        'experiment_id': {'key': 'experimentId', 'type': 'str'},
        'experiment_name': {'key': 'experimentName', 'type': 'str'},
        'run_id': {'key': 'runId', 'type': 'str'},
        'run_type': {'key': 'runType', 'type': 'str'},
        'run_tags': {'key': 'runTags', 'type': 'object'},
        'run_properties': {'key': 'runProperties', 'type': 'object'},
    }

    def __init__(self, **kwargs):
        super(MachineLearningServicesRunCompletedEventData, self).__init__(**kwargs)
        self.experiment_id = kwargs.get('experiment_id', None)
        self.experiment_name = kwargs.get('experiment_name', None)
        self.run_id = kwargs.get('run_id', None)
        self.run_type = kwargs.get('run_type', None)
        self.run_tags = kwargs.get('run_tags', None)
        self.run_properties = kwargs.get('run_properties', None)


class MapsGeofenceEventProperties(Model):
    """Schema of the Data property of an EventGridEvent for a Geofence event
    (GeofenceEntered, GeofenceExited, GeofenceResult).

    :param expired_geofence_geometry_id: Lists of the geometry ID of the
     geofence which is expired relative to the user time in the request.
    :type expired_geofence_geometry_id: list[str]
    :param geometries: Lists the fence geometries that either fully contain
     the coordinate position or have an overlap with the searchBuffer around
     the fence.
    :type geometries: list[~azure.eventgrid.models.MapsGeofenceGeometry]
    :param invalid_period_geofence_geometry_id: Lists of the geometry ID of
     the geofence which is in invalid period relative to the user time in the
     request.
    :type invalid_period_geofence_geometry_id: list[str]
    :param is_event_published: True if at least one event is published to the
     Azure Maps event subscriber, false if no event is published to the Azure
     Maps event subscriber.
    :type is_event_published: bool
    """

    _attribute_map = {
        'expired_geofence_geometry_id': {'key': 'expiredGeofenceGeometryId', 'type': '[str]'},
        'geometries': {'key': 'geometries', 'type': '[MapsGeofenceGeometry]'},
        'invalid_period_geofence_geometry_id': {'key': 'invalidPeriodGeofenceGeometryId', 'type': '[str]'},
        'is_event_published': {'key': 'isEventPublished', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(MapsGeofenceEventProperties, self).__init__(**kwargs)
        self.expired_geofence_geometry_id = kwargs.get('expired_geofence_geometry_id', None)
        self.geometries = kwargs.get('geometries', None)
        self.invalid_period_geofence_geometry_id = kwargs.get('invalid_period_geofence_geometry_id', None)
        self.is_event_published = kwargs.get('is_event_published', None)


class MapsGeofenceEnteredEventData(MapsGeofenceEventProperties):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Maps.GeofenceEntered event.

    :param expired_geofence_geometry_id: Lists of the geometry ID of the
     geofence which is expired relative to the user time in the request.
    :type expired_geofence_geometry_id: list[str]
    :param geometries: Lists the fence geometries that either fully contain
     the coordinate position or have an overlap with the searchBuffer around
     the fence.
    :type geometries: list[~azure.eventgrid.models.MapsGeofenceGeometry]
    :param invalid_period_geofence_geometry_id: Lists of the geometry ID of
     the geofence which is in invalid period relative to the user time in the
     request.
    :type invalid_period_geofence_geometry_id: list[str]
    :param is_event_published: True if at least one event is published to the
     Azure Maps event subscriber, false if no event is published to the Azure
     Maps event subscriber.
    :type is_event_published: bool
    """

    _attribute_map = {
        'expired_geofence_geometry_id': {'key': 'expiredGeofenceGeometryId', 'type': '[str]'},
        'geometries': {'key': 'geometries', 'type': '[MapsGeofenceGeometry]'},
        'invalid_period_geofence_geometry_id': {'key': 'invalidPeriodGeofenceGeometryId', 'type': '[str]'},
        'is_event_published': {'key': 'isEventPublished', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(MapsGeofenceEnteredEventData, self).__init__(**kwargs)


class MapsGeofenceExitedEventData(MapsGeofenceEventProperties):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Maps.GeofenceExited event.

    :param expired_geofence_geometry_id: Lists of the geometry ID of the
     geofence which is expired relative to the user time in the request.
    :type expired_geofence_geometry_id: list[str]
    :param geometries: Lists the fence geometries that either fully contain
     the coordinate position or have an overlap with the searchBuffer around
     the fence.
    :type geometries: list[~azure.eventgrid.models.MapsGeofenceGeometry]
    :param invalid_period_geofence_geometry_id: Lists of the geometry ID of
     the geofence which is in invalid period relative to the user time in the
     request.
    :type invalid_period_geofence_geometry_id: list[str]
    :param is_event_published: True if at least one event is published to the
     Azure Maps event subscriber, false if no event is published to the Azure
     Maps event subscriber.
    :type is_event_published: bool
    """

    _attribute_map = {
        'expired_geofence_geometry_id': {'key': 'expiredGeofenceGeometryId', 'type': '[str]'},
        'geometries': {'key': 'geometries', 'type': '[MapsGeofenceGeometry]'},
        'invalid_period_geofence_geometry_id': {'key': 'invalidPeriodGeofenceGeometryId', 'type': '[str]'},
        'is_event_published': {'key': 'isEventPublished', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(MapsGeofenceExitedEventData, self).__init__(**kwargs)


class MapsGeofenceGeometry(Model):
    """The geofence geometry.

    :param device_id: ID of the device.
    :type device_id: str
    :param distance: Distance from the coordinate to the closest border of the
     geofence. Positive means the coordinate is outside of the geofence. If the
     coordinate is outside of the geofence, but more than the value of
     searchBuffer away from the closest geofence border, then the value is 999.
     Negative means the coordinate is inside of the geofence. If the coordinate
     is inside the polygon, but more than the value of searchBuffer away from
     the closest geofencing border,then the value is -999. A value of 999 means
     that there is great confidence the coordinate is well outside the
     geofence. A value of -999 means that there is great confidence the
     coordinate is well within the geofence.
    :type distance: float
    :param geometry_id: The unique ID for the geofence geometry.
    :type geometry_id: str
    :param nearest_lat: Latitude of the nearest point of the geometry.
    :type nearest_lat: float
    :param nearest_lon: Longitude of the nearest point of the geometry.
    :type nearest_lon: float
    :param ud_id: The unique id returned from user upload service when
     uploading a geofence. Will not be included in geofencing post API.
    :type ud_id: str
    """

    _attribute_map = {
        'device_id': {'key': 'deviceId', 'type': 'str'},
        'distance': {'key': 'distance', 'type': 'float'},
        'geometry_id': {'key': 'geometryId', 'type': 'str'},
        'nearest_lat': {'key': 'nearestLat', 'type': 'float'},
        'nearest_lon': {'key': 'nearestLon', 'type': 'float'},
        'ud_id': {'key': 'udId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(MapsGeofenceGeometry, self).__init__(**kwargs)
        self.device_id = kwargs.get('device_id', None)
        self.distance = kwargs.get('distance', None)
        self.geometry_id = kwargs.get('geometry_id', None)
        self.nearest_lat = kwargs.get('nearest_lat', None)
        self.nearest_lon = kwargs.get('nearest_lon', None)
        self.ud_id = kwargs.get('ud_id', None)


class MapsGeofenceResultEventData(MapsGeofenceEventProperties):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Maps.GeofenceResult event.

    :param expired_geofence_geometry_id: Lists of the geometry ID of the
     geofence which is expired relative to the user time in the request.
    :type expired_geofence_geometry_id: list[str]
    :param geometries: Lists the fence geometries that either fully contain
     the coordinate position or have an overlap with the searchBuffer around
     the fence.
    :type geometries: list[~azure.eventgrid.models.MapsGeofenceGeometry]
    :param invalid_period_geofence_geometry_id: Lists of the geometry ID of
     the geofence which is in invalid period relative to the user time in the
     request.
    :type invalid_period_geofence_geometry_id: list[str]
    :param is_event_published: True if at least one event is published to the
     Azure Maps event subscriber, false if no event is published to the Azure
     Maps event subscriber.
    :type is_event_published: bool
    """

    _attribute_map = {
        'expired_geofence_geometry_id': {'key': 'expiredGeofenceGeometryId', 'type': '[str]'},
        'geometries': {'key': 'geometries', 'type': '[MapsGeofenceGeometry]'},
        'invalid_period_geofence_geometry_id': {'key': 'invalidPeriodGeofenceGeometryId', 'type': '[str]'},
        'is_event_published': {'key': 'isEventPublished', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(MapsGeofenceResultEventData, self).__init__(**kwargs)


class MediaJobStateChangeEventData(Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Media.JobStateChange event.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar previous_state: The previous state of the Job. Possible values
     include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing',
     'Queued', 'Scheduled'
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :ivar state: The new state of the Job. Possible values include:
     'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued',
     'Scheduled'
    :vartype state: str or ~azure.eventgrid.models.MediaJobState
    :param correlation_data: Gets the Job correlation data.
    :type correlation_data: dict[str, str]
    """

    _validation = {
        'previous_state': {'readonly': True},
        'state': {'readonly': True},
    }

    _attribute_map = {
        'previous_state': {'key': 'previousState', 'type': 'MediaJobState'},
        'state': {'key': 'state', 'type': 'MediaJobState'},
        'correlation_data': {'key': 'correlationData', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(MediaJobStateChangeEventData, self).__init__(**kwargs)
        self.previous_state = None
        self.state = None
        self.correlation_data = kwargs.get('correlation_data', None)


class MediaJobCanceledEventData(MediaJobStateChangeEventData):
    """Job canceled event data.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar previous_state: The previous state of the Job. Possible values
     include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing',
     'Queued', 'Scheduled'
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :ivar state: The new state of the Job. Possible values include:
     'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued',
     'Scheduled'
    :vartype state: str or ~azure.eventgrid.models.MediaJobState
    :param correlation_data: Gets the Job correlation data.
    :type correlation_data: dict[str, str]
    :param outputs: Gets the Job outputs.
    :type outputs: list[~azure.eventgrid.models.MediaJobOutput]
    """

    _validation = {
        'previous_state': {'readonly': True},
        'state': {'readonly': True},
    }

    _attribute_map = {
        'previous_state': {'key': 'previousState', 'type': 'MediaJobState'},
        'state': {'key': 'state', 'type': 'MediaJobState'},
        'correlation_data': {'key': 'correlationData', 'type': '{str}'},
        'outputs': {'key': 'outputs', 'type': '[MediaJobOutput]'},
    }

    def __init__(self, **kwargs):
        super(MediaJobCanceledEventData, self).__init__(**kwargs)
        self.outputs = kwargs.get('outputs', None)


class MediaJobCancelingEventData(MediaJobStateChangeEventData):
    """Job canceling event data.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar previous_state: The previous state of the Job. Possible values
     include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing',
     'Queued', 'Scheduled'
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :ivar state: The new state of the Job. Possible values include:
     'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued',
     'Scheduled'
    :vartype state: str or ~azure.eventgrid.models.MediaJobState
    :param correlation_data: Gets the Job correlation data.
    :type correlation_data: dict[str, str]
    """

    _validation = {
        'previous_state': {'readonly': True},
        'state': {'readonly': True},
    }

    _attribute_map = {
        'previous_state': {'key': 'previousState', 'type': 'MediaJobState'},
        'state': {'key': 'state', 'type': 'MediaJobState'},
        'correlation_data': {'key': 'correlationData', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(MediaJobCancelingEventData, self).__init__(**kwargs)


class MediaJobError(Model):
    """Details of JobOutput errors.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar code: Error code describing the error. Possible values include:
     'ServiceError', 'ServiceTransientError', 'DownloadNotAccessible',
     'DownloadTransientError', 'UploadNotAccessible', 'UploadTransientError',
     'ConfigurationUnsupported', 'ContentMalformed', 'ContentUnsupported'
    :vartype code: str or ~azure.eventgrid.models.MediaJobErrorCode
    :ivar message: A human-readable language-dependent representation of the
     error.
    :vartype message: str
    :ivar category: Helps with categorization of errors. Possible values
     include: 'Service', 'Download', 'Upload', 'Configuration', 'Content'
    :vartype category: str or ~azure.eventgrid.models.MediaJobErrorCategory
    :ivar retry: Indicates that it may be possible to retry the Job. If retry
     is unsuccessful, please contact Azure support via Azure Portal. Possible
     values include: 'DoNotRetry', 'MayRetry'
    :vartype retry: str or ~azure.eventgrid.models.MediaJobRetry
    :ivar details: An array of details about specific errors that led to this
     reported error.
    :vartype details: list[~azure.eventgrid.models.MediaJobErrorDetail]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'category': {'readonly': True},
        'retry': {'readonly': True},
        'details': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'MediaJobErrorCode'},
        'message': {'key': 'message', 'type': 'str'},
        'category': {'key': 'category', 'type': 'MediaJobErrorCategory'},
        'retry': {'key': 'retry', 'type': 'MediaJobRetry'},
        'details': {'key': 'details', 'type': '[MediaJobErrorDetail]'},
    }

    def __init__(self, **kwargs):
        super(MediaJobError, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.category = None
        self.retry = None
        self.details = None


class MediaJobErrorDetail(Model):
    """Details of JobOutput errors.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar code: Code describing the error detail.
    :vartype code: str
    :ivar message: A human-readable representation of the error.
    :vartype message: str
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(MediaJobErrorDetail, self).__init__(**kwargs)
        self.code = None
        self.message = None


class MediaJobErroredEventData(MediaJobStateChangeEventData):
    """Job error state event data.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar previous_state: The previous state of the Job. Possible values
     include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing',
     'Queued', 'Scheduled'
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :ivar state: The new state of the Job. Possible values include:
     'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued',
     'Scheduled'
    :vartype state: str or ~azure.eventgrid.models.MediaJobState
    :param correlation_data: Gets the Job correlation data.
    :type correlation_data: dict[str, str]
    :param outputs: Gets the Job outputs.
    :type outputs: list[~azure.eventgrid.models.MediaJobOutput]
    """

    _validation = {
        'previous_state': {'readonly': True},
        'state': {'readonly': True},
    }

    _attribute_map = {
        'previous_state': {'key': 'previousState', 'type': 'MediaJobState'},
        'state': {'key': 'state', 'type': 'MediaJobState'},
        'correlation_data': {'key': 'correlationData', 'type': '{str}'},
        'outputs': {'key': 'outputs', 'type': '[MediaJobOutput]'},
    }

    def __init__(self, **kwargs):
        super(MediaJobErroredEventData, self).__init__(**kwargs)
        self.outputs = kwargs.get('outputs', None)


class MediaJobFinishedEventData(MediaJobStateChangeEventData):
    """Job finished event data.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar previous_state: The previous state of the Job. Possible values
     include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing',
     'Queued', 'Scheduled'
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :ivar state: The new state of the Job. Possible values include:
     'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued',
     'Scheduled'
    :vartype state: str or ~azure.eventgrid.models.MediaJobState
    :param correlation_data: Gets the Job correlation data.
    :type correlation_data: dict[str, str]
    :param outputs: Gets the Job outputs.
    :type outputs: list[~azure.eventgrid.models.MediaJobOutput]
    """

    _validation = {
        'previous_state': {'readonly': True},
        'state': {'readonly': True},
    }

    _attribute_map = {
        'previous_state': {'key': 'previousState', 'type': 'MediaJobState'},
        'state': {'key': 'state', 'type': 'MediaJobState'},
        'correlation_data': {'key': 'correlationData', 'type': '{str}'},
        'outputs': {'key': 'outputs', 'type': '[MediaJobOutput]'},
    }

    def __init__(self, **kwargs):
        super(MediaJobFinishedEventData, self).__init__(**kwargs)
        self.outputs = kwargs.get('outputs', None)


class MediaJobOutput(Model):
    """The event data for a Job output.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: MediaJobOutputAsset

    All required parameters must be populated in order to send to Azure.

    :param error: Gets the Job output error.
    :type error: ~azure.eventgrid.models.MediaJobError
    :param label: Gets the Job output label.
    :type label: str
    :param progress: Required. Gets the Job output progress.
    :type progress: long
    :param state: Required. Gets the Job output state. Possible values
     include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing',
     'Queued', 'Scheduled'
    :type state: str or ~azure.eventgrid.models.MediaJobState
    :param odatatype: Required. Constant filled by server.
    :type odatatype: str
    """

    _validation = {
        'progress': {'required': True},
        'state': {'required': True},
        'odatatype': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'MediaJobError'},
        'label': {'key': 'label', 'type': 'str'},
        'progress': {'key': 'progress', 'type': 'long'},
        'state': {'key': 'state', 'type': 'MediaJobState'},
        'odatatype': {'key': '@odata\\.type', 'type': 'str'},
    }

    _subtype_map = {
        'odatatype': {'#Microsoft.Media.JobOutputAsset': 'MediaJobOutputAsset'}
    }

    def __init__(self, **kwargs):
        super(MediaJobOutput, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)
        self.label = kwargs.get('label', None)
        self.progress = kwargs.get('progress', None)
        self.state = kwargs.get('state', None)
        self.odatatype = None


class MediaJobOutputAsset(MediaJobOutput):
    """The event data for a Job output asset.

    All required parameters must be populated in order to send to Azure.

    :param error: Gets the Job output error.
    :type error: ~azure.eventgrid.models.MediaJobError
    :param label: Gets the Job output label.
    :type label: str
    :param progress: Required. Gets the Job output progress.
    :type progress: long
    :param state: Required. Gets the Job output state. Possible values
     include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing',
     'Queued', 'Scheduled'
    :type state: str or ~azure.eventgrid.models.MediaJobState
    :param odatatype: Required. Constant filled by server.
    :type odatatype: str
    :param asset_name: Gets the Job output asset name.
    :type asset_name: str
    """

    _validation = {
        'progress': {'required': True},
        'state': {'required': True},
        'odatatype': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'MediaJobError'},
        'label': {'key': 'label', 'type': 'str'},
        'progress': {'key': 'progress', 'type': 'long'},
        'state': {'key': 'state', 'type': 'MediaJobState'},
        'odatatype': {'key': '@odata\\.type', 'type': 'str'},
        'asset_name': {'key': 'assetName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(MediaJobOutputAsset, self).__init__(**kwargs)
        self.asset_name = kwargs.get('asset_name', None)
        self.odatatype = '#Microsoft.Media.JobOutputAsset'


class MediaJobOutputStateChangeEventData(Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Media.JobOutputStateChange event.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar previous_state: The previous state of the Job. Possible values
     include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing',
     'Queued', 'Scheduled'
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :param output: Gets the output.
    :type output: ~azure.eventgrid.models.MediaJobOutput
    :param job_correlation_data: Gets the Job correlation data.
    :type job_correlation_data: dict[str, str]
    """

    _validation = {
        'previous_state': {'readonly': True},
    }

    _attribute_map = {
        'previous_state': {'key': 'previousState', 'type': 'MediaJobState'},
        'output': {'key': 'output', 'type': 'MediaJobOutput'},
        'job_correlation_data': {'key': 'jobCorrelationData', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(MediaJobOutputStateChangeEventData, self).__init__(**kwargs)
        self.previous_state = None
        self.output = kwargs.get('output', None)
        self.job_correlation_data = kwargs.get('job_correlation_data', None)


class MediaJobOutputCanceledEventData(MediaJobOutputStateChangeEventData):
    """Job output canceled event data.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar previous_state: The previous state of the Job. Possible values
     include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing',
     'Queued', 'Scheduled'
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :param output: Gets the output.
    :type output: ~azure.eventgrid.models.MediaJobOutput
    :param job_correlation_data: Gets the Job correlation data.
    :type job_correlation_data: dict[str, str]
    """

    _validation = {
        'previous_state': {'readonly': True},
    }

    _attribute_map = {
        'previous_state': {'key': 'previousState', 'type': 'MediaJobState'},
        'output': {'key': 'output', 'type': 'MediaJobOutput'},
        'job_correlation_data': {'key': 'jobCorrelationData', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(MediaJobOutputCanceledEventData, self).__init__(**kwargs)


class MediaJobOutputCancelingEventData(MediaJobOutputStateChangeEventData):
    """Job output canceling event data.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar previous_state: The previous state of the Job. Possible values
     include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing',
     'Queued', 'Scheduled'
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :param output: Gets the output.
    :type output: ~azure.eventgrid.models.MediaJobOutput
    :param job_correlation_data: Gets the Job correlation data.
    :type job_correlation_data: dict[str, str]
    """

    _validation = {
        'previous_state': {'readonly': True},
    }

    _attribute_map = {
        'previous_state': {'key': 'previousState', 'type': 'MediaJobState'},
        'output': {'key': 'output', 'type': 'MediaJobOutput'},
        'job_correlation_data': {'key': 'jobCorrelationData', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(MediaJobOutputCancelingEventData, self).__init__(**kwargs)


class MediaJobOutputErroredEventData(MediaJobOutputStateChangeEventData):
    """Job output error event data.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar previous_state: The previous state of the Job. Possible values
     include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing',
     'Queued', 'Scheduled'
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :param output: Gets the output.
    :type output: ~azure.eventgrid.models.MediaJobOutput
    :param job_correlation_data: Gets the Job correlation data.
    :type job_correlation_data: dict[str, str]
    """

    _validation = {
        'previous_state': {'readonly': True},
    }

    _attribute_map = {
        'previous_state': {'key': 'previousState', 'type': 'MediaJobState'},
        'output': {'key': 'output', 'type': 'MediaJobOutput'},
        'job_correlation_data': {'key': 'jobCorrelationData', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(MediaJobOutputErroredEventData, self).__init__(**kwargs)


class MediaJobOutputFinishedEventData(MediaJobOutputStateChangeEventData):
    """Job output finished event data.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar previous_state: The previous state of the Job. Possible values
     include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing',
     'Queued', 'Scheduled'
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :param output: Gets the output.
    :type output: ~azure.eventgrid.models.MediaJobOutput
    :param job_correlation_data: Gets the Job correlation data.
    :type job_correlation_data: dict[str, str]
    """

    _validation = {
        'previous_state': {'readonly': True},
    }

    _attribute_map = {
        'previous_state': {'key': 'previousState', 'type': 'MediaJobState'},
        'output': {'key': 'output', 'type': 'MediaJobOutput'},
        'job_correlation_data': {'key': 'jobCorrelationData', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(MediaJobOutputFinishedEventData, self).__init__(**kwargs)


class MediaJobOutputProcessingEventData(MediaJobOutputStateChangeEventData):
    """Job output processing event data.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar previous_state: The previous state of the Job. Possible values
     include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing',
     'Queued', 'Scheduled'
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :param output: Gets the output.
    :type output: ~azure.eventgrid.models.MediaJobOutput
    :param job_correlation_data: Gets the Job correlation data.
    :type job_correlation_data: dict[str, str]
    """

    _validation = {
        'previous_state': {'readonly': True},
    }

    _attribute_map = {
        'previous_state': {'key': 'previousState', 'type': 'MediaJobState'},
        'output': {'key': 'output', 'type': 'MediaJobOutput'},
        'job_correlation_data': {'key': 'jobCorrelationData', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(MediaJobOutputProcessingEventData, self).__init__(**kwargs)


class MediaJobOutputProgressEventData(Model):
    """Job Output Progress Event Data.

    :param label: Gets the Job output label.
    :type label: str
    :param progress: Gets the Job output progress.
    :type progress: long
    :param job_correlation_data: Gets the Job correlation data.
    :type job_correlation_data: dict[str, str]
    """

    _attribute_map = {
        'label': {'key': 'label', 'type': 'str'},
        'progress': {'key': 'progress', 'type': 'long'},
        'job_correlation_data': {'key': 'jobCorrelationData', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(MediaJobOutputProgressEventData, self).__init__(**kwargs)
        self.label = kwargs.get('label', None)
        self.progress = kwargs.get('progress', None)
        self.job_correlation_data = kwargs.get('job_correlation_data', None)


class MediaJobOutputScheduledEventData(MediaJobOutputStateChangeEventData):
    """Job output scheduled event data.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar previous_state: The previous state of the Job. Possible values
     include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing',
     'Queued', 'Scheduled'
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :param output: Gets the output.
    :type output: ~azure.eventgrid.models.MediaJobOutput
    :param job_correlation_data: Gets the Job correlation data.
    :type job_correlation_data: dict[str, str]
    """

    _validation = {
        'previous_state': {'readonly': True},
    }

    _attribute_map = {
        'previous_state': {'key': 'previousState', 'type': 'MediaJobState'},
        'output': {'key': 'output', 'type': 'MediaJobOutput'},
        'job_correlation_data': {'key': 'jobCorrelationData', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(MediaJobOutputScheduledEventData, self).__init__(**kwargs)


class MediaJobProcessingEventData(MediaJobStateChangeEventData):
    """Job processing event data.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar previous_state: The previous state of the Job. Possible values
     include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing',
     'Queued', 'Scheduled'
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :ivar state: The new state of the Job. Possible values include:
     'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued',
     'Scheduled'
    :vartype state: str or ~azure.eventgrid.models.MediaJobState
    :param correlation_data: Gets the Job correlation data.
    :type correlation_data: dict[str, str]
    """

    _validation = {
        'previous_state': {'readonly': True},
        'state': {'readonly': True},
    }

    _attribute_map = {
        'previous_state': {'key': 'previousState', 'type': 'MediaJobState'},
        'state': {'key': 'state', 'type': 'MediaJobState'},
        'correlation_data': {'key': 'correlationData', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(MediaJobProcessingEventData, self).__init__(**kwargs)


class MediaJobScheduledEventData(MediaJobStateChangeEventData):
    """Job scheduled event data.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar previous_state: The previous state of the Job. Possible values
     include: 'Canceled', 'Canceling', 'Error', 'Finished', 'Processing',
     'Queued', 'Scheduled'
    :vartype previous_state: str or ~azure.eventgrid.models.MediaJobState
    :ivar state: The new state of the Job. Possible values include:
     'Canceled', 'Canceling', 'Error', 'Finished', 'Processing', 'Queued',
     'Scheduled'
    :vartype state: str or ~azure.eventgrid.models.MediaJobState
    :param correlation_data: Gets the Job correlation data.
    :type correlation_data: dict[str, str]
    """

    _validation = {
        'previous_state': {'readonly': True},
        'state': {'readonly': True},
    }

    _attribute_map = {
        'previous_state': {'key': 'previousState', 'type': 'MediaJobState'},
        'state': {'key': 'state', 'type': 'MediaJobState'},
        'correlation_data': {'key': 'correlationData', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(MediaJobScheduledEventData, self).__init__(**kwargs)


class MediaLiveEventConnectionRejectedEventData(Model):
    """Encoder connection rejected event data.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar ingest_url: Gets the ingest URL provided by the live event.
    :vartype ingest_url: str
    :ivar stream_id: Gets the stream Id.
    :vartype stream_id: str
    :ivar encoder_ip: Gets the remote IP.
    :vartype encoder_ip: str
    :ivar encoder_port: Gets the remote port.
    :vartype encoder_port: str
    :ivar result_code: Gets the result code.
    :vartype result_code: str
    """

    _validation = {
        'ingest_url': {'readonly': True},
        'stream_id': {'readonly': True},
        'encoder_ip': {'readonly': True},
        'encoder_port': {'readonly': True},
        'result_code': {'readonly': True},
    }

    _attribute_map = {
        'ingest_url': {'key': 'ingestUrl', 'type': 'str'},
        'stream_id': {'key': 'streamId', 'type': 'str'},
        'encoder_ip': {'key': 'encoderIp', 'type': 'str'},
        'encoder_port': {'key': 'encoderPort', 'type': 'str'},
        'result_code': {'key': 'resultCode', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(MediaLiveEventConnectionRejectedEventData, self).__init__(**kwargs)
        self.ingest_url = None
        self.stream_id = None
        self.encoder_ip = None
        self.encoder_port = None
        self.result_code = None


class MediaLiveEventEncoderConnectedEventData(Model):
    """Encoder connect event data.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar ingest_url: Gets the ingest URL provided by the live event.
    :vartype ingest_url: str
    :ivar stream_id: Gets the stream Id.
    :vartype stream_id: str
    :ivar encoder_ip: Gets the remote IP.
    :vartype encoder_ip: str
    :ivar encoder_port: Gets the remote port.
    :vartype encoder_port: str
    """

    _validation = {
        'ingest_url': {'readonly': True},
        'stream_id': {'readonly': True},
        'encoder_ip': {'readonly': True},
        'encoder_port': {'readonly': True},
    }

    _attribute_map = {
        'ingest_url': {'key': 'ingestUrl', 'type': 'str'},
        'stream_id': {'key': 'streamId', 'type': 'str'},
        'encoder_ip': {'key': 'encoderIp', 'type': 'str'},
        'encoder_port': {'key': 'encoderPort', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(MediaLiveEventEncoderConnectedEventData, self).__init__(**kwargs)
        self.ingest_url = None
        self.stream_id = None
        self.encoder_ip = None
        self.encoder_port = None


class MediaLiveEventEncoderDisconnectedEventData(Model):
    """Encoder disconnected event data.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar ingest_url: Gets the ingest URL provided by the live event.
    :vartype ingest_url: str
    :ivar stream_id: Gets the stream Id.
    :vartype stream_id: str
    :ivar encoder_ip: Gets the remote IP.
    :vartype encoder_ip: str
    :ivar encoder_port: Gets the remote port.
    :vartype encoder_port: str
    :ivar result_code: Gets the result code.
    :vartype result_code: str
    """

    _validation = {
        'ingest_url': {'readonly': True},
        'stream_id': {'readonly': True},
        'encoder_ip': {'readonly': True},
        'encoder_port': {'readonly': True},
        'result_code': {'readonly': True},
    }

    _attribute_map = {
        'ingest_url': {'key': 'ingestUrl', 'type': 'str'},
        'stream_id': {'key': 'streamId', 'type': 'str'},
        'encoder_ip': {'key': 'encoderIp', 'type': 'str'},
        'encoder_port': {'key': 'encoderPort', 'type': 'str'},
        'result_code': {'key': 'resultCode', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(MediaLiveEventEncoderDisconnectedEventData, self).__init__(**kwargs)
        self.ingest_url = None
        self.stream_id = None
        self.encoder_ip = None
        self.encoder_port = None
        self.result_code = None


class MediaLiveEventIncomingDataChunkDroppedEventData(Model):
    """Ingest fragment dropped event data.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar timestamp: Gets the timestamp of the data chunk dropped.
    :vartype timestamp: str
    :ivar track_type: Gets the type of the track (Audio / Video).
    :vartype track_type: str
    :ivar bitrate: Gets the bitrate of the track.
    :vartype bitrate: long
    :ivar timescale: Gets the timescale of the Timestamp.
    :vartype timescale: str
    :ivar result_code: Gets the result code for fragment drop operation.
    :vartype result_code: str
    :ivar track_name: Gets the name of the track for which fragment is
     dropped.
    :vartype track_name: str
    """

    _validation = {
        'timestamp': {'readonly': True},
        'track_type': {'readonly': True},
        'bitrate': {'readonly': True},
        'timescale': {'readonly': True},
        'result_code': {'readonly': True},
        'track_name': {'readonly': True},
    }

    _attribute_map = {
        'timestamp': {'key': 'timestamp', 'type': 'str'},
        'track_type': {'key': 'trackType', 'type': 'str'},
        'bitrate': {'key': 'bitrate', 'type': 'long'},
        'timescale': {'key': 'timescale', 'type': 'str'},
        'result_code': {'key': 'resultCode', 'type': 'str'},
        'track_name': {'key': 'trackName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(MediaLiveEventIncomingDataChunkDroppedEventData, self).__init__(**kwargs)
        self.timestamp = None
        self.track_type = None
        self.bitrate = None
        self.timescale = None
        self.result_code = None
        self.track_name = None


class MediaLiveEventIncomingStreamReceivedEventData(Model):
    """Encoder connect event data.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar ingest_url: Gets the ingest URL provided by the live event.
    :vartype ingest_url: str
    :ivar track_type: Gets the type of the track (Audio / Video).
    :vartype track_type: str
    :ivar track_name: Gets the track name.
    :vartype track_name: str
    :ivar bitrate: Gets the bitrate of the track.
    :vartype bitrate: long
    :ivar encoder_ip: Gets the remote IP.
    :vartype encoder_ip: str
    :ivar encoder_port: Gets the remote port.
    :vartype encoder_port: str
    :ivar timestamp: Gets the first timestamp of the data chunk received.
    :vartype timestamp: str
    :ivar duration: Gets the duration of the first data chunk.
    :vartype duration: str
    :ivar timescale: Gets the timescale in which timestamp is represented.
    :vartype timescale: str
    """

    _validation = {
        'ingest_url': {'readonly': True},
        'track_type': {'readonly': True},
        'track_name': {'readonly': True},
        'bitrate': {'readonly': True},
        'encoder_ip': {'readonly': True},
        'encoder_port': {'readonly': True},
        'timestamp': {'readonly': True},
        'duration': {'readonly': True},
        'timescale': {'readonly': True},
    }

    _attribute_map = {
        'ingest_url': {'key': 'ingestUrl', 'type': 'str'},
        'track_type': {'key': 'trackType', 'type': 'str'},
        'track_name': {'key': 'trackName', 'type': 'str'},
        'bitrate': {'key': 'bitrate', 'type': 'long'},
        'encoder_ip': {'key': 'encoderIp', 'type': 'str'},
        'encoder_port': {'key': 'encoderPort', 'type': 'str'},
        'timestamp': {'key': 'timestamp', 'type': 'str'},
        'duration': {'key': 'duration', 'type': 'str'},
        'timescale': {'key': 'timescale', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(MediaLiveEventIncomingStreamReceivedEventData, self).__init__(**kwargs)
        self.ingest_url = None
        self.track_type = None
        self.track_name = None
        self.bitrate = None
        self.encoder_ip = None
        self.encoder_port = None
        self.timestamp = None
        self.duration = None
        self.timescale = None


class MediaLiveEventIncomingStreamsOutOfSyncEventData(Model):
    """Incoming streams out of sync event data.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar min_last_timestamp: Gets the minimum last timestamp received.
    :vartype min_last_timestamp: str
    :ivar type_of_stream_with_min_last_timestamp: Gets the type of stream with
     minimum last timestamp.
    :vartype type_of_stream_with_min_last_timestamp: str
    :ivar max_last_timestamp: Gets the maximum timestamp among all the tracks
     (audio or video).
    :vartype max_last_timestamp: str
    :ivar type_of_stream_with_max_last_timestamp: Gets the type of stream with
     maximum last timestamp.
    :vartype type_of_stream_with_max_last_timestamp: str
    :ivar timescale_of_min_last_timestamp: Gets the timescale in which
     "MinLastTimestamp" is represented.
    :vartype timescale_of_min_last_timestamp: str
    :ivar timescale_of_max_last_timestamp: Gets the timescale in which
     "MaxLastTimestamp" is represented.
    :vartype timescale_of_max_last_timestamp: str
    """

    _validation = {
        'min_last_timestamp': {'readonly': True},
        'type_of_stream_with_min_last_timestamp': {'readonly': True},
        'max_last_timestamp': {'readonly': True},
        'type_of_stream_with_max_last_timestamp': {'readonly': True},
        'timescale_of_min_last_timestamp': {'readonly': True},
        'timescale_of_max_last_timestamp': {'readonly': True},
    }

    _attribute_map = {
        'min_last_timestamp': {'key': 'minLastTimestamp', 'type': 'str'},
        'type_of_stream_with_min_last_timestamp': {'key': 'typeOfStreamWithMinLastTimestamp', 'type': 'str'},
        'max_last_timestamp': {'key': 'maxLastTimestamp', 'type': 'str'},
        'type_of_stream_with_max_last_timestamp': {'key': 'typeOfStreamWithMaxLastTimestamp', 'type': 'str'},
        'timescale_of_min_last_timestamp': {'key': 'timescaleOfMinLastTimestamp', 'type': 'str'},
        'timescale_of_max_last_timestamp': {'key': 'timescaleOfMaxLastTimestamp', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(MediaLiveEventIncomingStreamsOutOfSyncEventData, self).__init__(**kwargs)
        self.min_last_timestamp = None
        self.type_of_stream_with_min_last_timestamp = None
        self.max_last_timestamp = None
        self.type_of_stream_with_max_last_timestamp = None
        self.timescale_of_min_last_timestamp = None
        self.timescale_of_max_last_timestamp = None


class MediaLiveEventIncomingVideoStreamsOutOfSyncEventData(Model):
    """Incoming video stream out of synch event data.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar first_timestamp: Gets the first timestamp received for one of the
     quality levels.
    :vartype first_timestamp: str
    :ivar first_duration: Gets the duration of the data chunk with first
     timestamp.
    :vartype first_duration: str
    :ivar second_timestamp: Gets the timestamp received for some other quality
     levels.
    :vartype second_timestamp: str
    :ivar second_duration: Gets the duration of the data chunk with second
     timestamp.
    :vartype second_duration: str
    :ivar timescale: Gets the timescale in which both the timestamps and
     durations are represented.
    :vartype timescale: str
    """

    _validation = {
        'first_timestamp': {'readonly': True},
        'first_duration': {'readonly': True},
        'second_timestamp': {'readonly': True},
        'second_duration': {'readonly': True},
        'timescale': {'readonly': True},
    }

    _attribute_map = {
        'first_timestamp': {'key': 'firstTimestamp', 'type': 'str'},
        'first_duration': {'key': 'firstDuration', 'type': 'str'},
        'second_timestamp': {'key': 'secondTimestamp', 'type': 'str'},
        'second_duration': {'key': 'secondDuration', 'type': 'str'},
        'timescale': {'key': 'timescale', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(MediaLiveEventIncomingVideoStreamsOutOfSyncEventData, self).__init__(**kwargs)
        self.first_timestamp = None
        self.first_duration = None
        self.second_timestamp = None
        self.second_duration = None
        self.timescale = None


class MediaLiveEventIngestHeartbeatEventData(Model):
    """Ingest fragment dropped event data.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar track_type: Gets the type of the track (Audio / Video).
    :vartype track_type: str
    :ivar track_name: Gets the track name.
    :vartype track_name: str
    :ivar bitrate: Gets the bitrate of the track.
    :vartype bitrate: long
    :ivar incoming_bitrate: Gets the incoming bitrate.
    :vartype incoming_bitrate: long
    :ivar last_timestamp: Gets the last timestamp.
    :vartype last_timestamp: str
    :ivar timescale: Gets the timescale of the last timestamp.
    :vartype timescale: str
    :ivar overlap_count: Gets the fragment Overlap count.
    :vartype overlap_count: long
    :ivar discontinuity_count: Gets the fragment Discontinuity count.
    :vartype discontinuity_count: long
    :ivar nonincreasing_count: Gets Non increasing count.
    :vartype nonincreasing_count: long
    :ivar unexpected_bitrate: Gets a value indicating whether unexpected
     bitrate is present or not.
    :vartype unexpected_bitrate: bool
    :ivar state: Gets the state of the live event.
    :vartype state: str
    :ivar healthy: Gets a value indicating whether preview is healthy or not.
    :vartype healthy: bool
    """

    _validation = {
        'track_type': {'readonly': True},
        'track_name': {'readonly': True},
        'bitrate': {'readonly': True},
        'incoming_bitrate': {'readonly': True},
        'last_timestamp': {'readonly': True},
        'timescale': {'readonly': True},
        'overlap_count': {'readonly': True},
        'discontinuity_count': {'readonly': True},
        'nonincreasing_count': {'readonly': True},
        'unexpected_bitrate': {'readonly': True},
        'state': {'readonly': True},
        'healthy': {'readonly': True},
    }

    _attribute_map = {
        'track_type': {'key': 'trackType', 'type': 'str'},
        'track_name': {'key': 'trackName', 'type': 'str'},
        'bitrate': {'key': 'bitrate', 'type': 'long'},
        'incoming_bitrate': {'key': 'incomingBitrate', 'type': 'long'},
        'last_timestamp': {'key': 'lastTimestamp', 'type': 'str'},
        'timescale': {'key': 'timescale', 'type': 'str'},
        'overlap_count': {'key': 'overlapCount', 'type': 'long'},
        'discontinuity_count': {'key': 'discontinuityCount', 'type': 'long'},
        'nonincreasing_count': {'key': 'nonincreasingCount', 'type': 'long'},
        'unexpected_bitrate': {'key': 'unexpectedBitrate', 'type': 'bool'},
        'state': {'key': 'state', 'type': 'str'},
        'healthy': {'key': 'healthy', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(MediaLiveEventIngestHeartbeatEventData, self).__init__(**kwargs)
        self.track_type = None
        self.track_name = None
        self.bitrate = None
        self.incoming_bitrate = None
        self.last_timestamp = None
        self.timescale = None
        self.overlap_count = None
        self.discontinuity_count = None
        self.nonincreasing_count = None
        self.unexpected_bitrate = None
        self.state = None
        self.healthy = None


class MediaLiveEventTrackDiscontinuityDetectedEventData(Model):
    """Ingest track discontinuity detected event data.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar track_type: Gets the type of the track (Audio / Video).
    :vartype track_type: str
    :ivar track_name: Gets the track name.
    :vartype track_name: str
    :ivar bitrate: Gets the bitrate.
    :vartype bitrate: long
    :ivar previous_timestamp: Gets the timestamp of the previous fragment.
    :vartype previous_timestamp: str
    :ivar new_timestamp: Gets the timestamp of the current fragment.
    :vartype new_timestamp: str
    :ivar timescale: Gets the timescale in which both timestamps and
     discontinuity gap are represented.
    :vartype timescale: str
    :ivar discontinuity_gap: Gets the discontinuity gap between
     PreviousTimestamp and NewTimestamp.
    :vartype discontinuity_gap: str
    """

    _validation = {
        'track_type': {'readonly': True},
        'track_name': {'readonly': True},
        'bitrate': {'readonly': True},
        'previous_timestamp': {'readonly': True},
        'new_timestamp': {'readonly': True},
        'timescale': {'readonly': True},
        'discontinuity_gap': {'readonly': True},
    }

    _attribute_map = {
        'track_type': {'key': 'trackType', 'type': 'str'},
        'track_name': {'key': 'trackName', 'type': 'str'},
        'bitrate': {'key': 'bitrate', 'type': 'long'},
        'previous_timestamp': {'key': 'previousTimestamp', 'type': 'str'},
        'new_timestamp': {'key': 'newTimestamp', 'type': 'str'},
        'timescale': {'key': 'timescale', 'type': 'str'},
        'discontinuity_gap': {'key': 'discontinuityGap', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(MediaLiveEventTrackDiscontinuityDetectedEventData, self).__init__(**kwargs)
        self.track_type = None
        self.track_name = None
        self.bitrate = None
        self.previous_timestamp = None
        self.new_timestamp = None
        self.timescale = None
        self.discontinuity_gap = None


class RedisExportRDBCompletedEventData(Model):
    """Schema of the Data property of an EventGridEvent for an
    Microsoft.Cache.ExportRDBCompleted event.

    :param timestamp: The time at which the event occurred.
    :type timestamp: datetime
    :param name: The name of this event.
    :type name: str
    :param status: The status of this event. Failed or  succeeded
    :type status: str
    """

    _attribute_map = {
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(RedisExportRDBCompletedEventData, self).__init__(**kwargs)
        self.timestamp = kwargs.get('timestamp', None)
        self.name = kwargs.get('name', None)
        self.status = kwargs.get('status', None)


class RedisImportRDBCompletedEventData(Model):
    """Schema of the Data property of an EventGridEvent for an
    Microsoft.Cache.ImportRDBCompleted event.

    :param timestamp: The time at which the event occurred.
    :type timestamp: datetime
    :param name: The name of this event.
    :type name: str
    :param status: The status of this event. Failed or  succeeded
    :type status: str
    """

    _attribute_map = {
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(RedisImportRDBCompletedEventData, self).__init__(**kwargs)
        self.timestamp = kwargs.get('timestamp', None)
        self.name = kwargs.get('name', None)
        self.status = kwargs.get('status', None)


class RedisPatchingCompletedEventData(Model):
    """Schema of the Data property of an EventGridEvent for an
    Microsoft.Cache.PatchingCompleted event.

    :param timestamp: The time at which the event occurred.
    :type timestamp: datetime
    :param name: The name of this event.
    :type name: str
    :param status: The status of this event. Failed or  succeeded
    :type status: str
    """

    _attribute_map = {
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(RedisPatchingCompletedEventData, self).__init__(**kwargs)
        self.timestamp = kwargs.get('timestamp', None)
        self.name = kwargs.get('name', None)
        self.status = kwargs.get('status', None)


class RedisScalingCompletedEventData(Model):
    """Schema of the Data property of an EventGridEvent for an
    Microsoft.Cache.ScalingCompleted event.

    :param timestamp: The time at which the event occurred.
    :type timestamp: datetime
    :param name: The name of this event.
    :type name: str
    :param status: The status of this event. Failed or  succeeded
    :type status: str
    """

    _attribute_map = {
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(RedisScalingCompletedEventData, self).__init__(**kwargs)
        self.timestamp = kwargs.get('timestamp', None)
        self.name = kwargs.get('name', None)
        self.status = kwargs.get('status', None)


class ResourceActionCancelData(Model):
    """Schema of the Data property of an EventGridEvent for an
    Microsoft.Resources.ResourceActionCancel event. This is raised when a
    resource action operation is canceled.

    :param tenant_id: The tenant ID of the resource.
    :type tenant_id: str
    :param subscription_id: The subscription ID of the resource.
    :type subscription_id: str
    :param resource_group: The resource group of the resource.
    :type resource_group: str
    :param resource_provider: The resource provider performing the operation.
    :type resource_provider: str
    :param resource_uri: The URI of the resource in the operation.
    :type resource_uri: str
    :param operation_name: The operation that was performed.
    :type operation_name: str
    :param status: The status of the operation.
    :type status: str
    :param authorization: The requested authorization for the operation.
    :type authorization: str
    :param claims: The properties of the claims.
    :type claims: str
    :param correlation_id: An operation ID used for troubleshooting.
    :type correlation_id: str
    :param http_request: The details of the operation.
    :type http_request: str
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
        'resource_group': {'key': 'resourceGroup', 'type': 'str'},
        'resource_provider': {'key': 'resourceProvider', 'type': 'str'},
        'resource_uri': {'key': 'resourceUri', 'type': 'str'},
        'operation_name': {'key': 'operationName', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'authorization': {'key': 'authorization', 'type': 'str'},
        'claims': {'key': 'claims', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'http_request': {'key': 'httpRequest', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ResourceActionCancelData, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.subscription_id = kwargs.get('subscription_id', None)
        self.resource_group = kwargs.get('resource_group', None)
        self.resource_provider = kwargs.get('resource_provider', None)
        self.resource_uri = kwargs.get('resource_uri', None)
        self.operation_name = kwargs.get('operation_name', None)
        self.status = kwargs.get('status', None)
        self.authorization = kwargs.get('authorization', None)
        self.claims = kwargs.get('claims', None)
        self.correlation_id = kwargs.get('correlation_id', None)
        self.http_request = kwargs.get('http_request', None)


class ResourceActionFailureData(Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Resources.ResourceActionFailure event. This is raised when a
    resource action operation fails.

    :param tenant_id: The tenant ID of the resource.
    :type tenant_id: str
    :param subscription_id: The subscription ID of the resource.
    :type subscription_id: str
    :param resource_group: The resource group of the resource.
    :type resource_group: str
    :param resource_provider: The resource provider performing the operation.
    :type resource_provider: str
    :param resource_uri: The URI of the resource in the operation.
    :type resource_uri: str
    :param operation_name: The operation that was performed.
    :type operation_name: str
    :param status: The status of the operation.
    :type status: str
    :param authorization: The requested authorization for the operation.
    :type authorization: str
    :param claims: The properties of the claims.
    :type claims: str
    :param correlation_id: An operation ID used for troubleshooting.
    :type correlation_id: str
    :param http_request: The details of the operation.
    :type http_request: str
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
        'resource_group': {'key': 'resourceGroup', 'type': 'str'},
        'resource_provider': {'key': 'resourceProvider', 'type': 'str'},
        'resource_uri': {'key': 'resourceUri', 'type': 'str'},
        'operation_name': {'key': 'operationName', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'authorization': {'key': 'authorization', 'type': 'str'},
        'claims': {'key': 'claims', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'http_request': {'key': 'httpRequest', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ResourceActionFailureData, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.subscription_id = kwargs.get('subscription_id', None)
        self.resource_group = kwargs.get('resource_group', None)
        self.resource_provider = kwargs.get('resource_provider', None)
        self.resource_uri = kwargs.get('resource_uri', None)
        self.operation_name = kwargs.get('operation_name', None)
        self.status = kwargs.get('status', None)
        self.authorization = kwargs.get('authorization', None)
        self.claims = kwargs.get('claims', None)
        self.correlation_id = kwargs.get('correlation_id', None)
        self.http_request = kwargs.get('http_request', None)


class ResourceActionSuccessData(Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Resources.ResourceActionSuccess event. This is raised when a
    resource action operation succeeds.

    :param tenant_id: The tenant ID of the resource.
    :type tenant_id: str
    :param subscription_id: The subscription ID of the resource.
    :type subscription_id: str
    :param resource_group: The resource group of the resource.
    :type resource_group: str
    :param resource_provider: The resource provider performing the operation.
    :type resource_provider: str
    :param resource_uri: The URI of the resource in the operation.
    :type resource_uri: str
    :param operation_name: The operation that was performed.
    :type operation_name: str
    :param status: The status of the operation.
    :type status: str
    :param authorization: The requested authorization for the operation.
    :type authorization: str
    :param claims: The properties of the claims.
    :type claims: str
    :param correlation_id: An operation ID used for troubleshooting.
    :type correlation_id: str
    :param http_request: The details of the operation.
    :type http_request: str
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
        'resource_group': {'key': 'resourceGroup', 'type': 'str'},
        'resource_provider': {'key': 'resourceProvider', 'type': 'str'},
        'resource_uri': {'key': 'resourceUri', 'type': 'str'},
        'operation_name': {'key': 'operationName', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'authorization': {'key': 'authorization', 'type': 'str'},
        'claims': {'key': 'claims', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'http_request': {'key': 'httpRequest', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ResourceActionSuccessData, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.subscription_id = kwargs.get('subscription_id', None)
        self.resource_group = kwargs.get('resource_group', None)
        self.resource_provider = kwargs.get('resource_provider', None)
        self.resource_uri = kwargs.get('resource_uri', None)
        self.operation_name = kwargs.get('operation_name', None)
        self.status = kwargs.get('status', None)
        self.authorization = kwargs.get('authorization', None)
        self.claims = kwargs.get('claims', None)
        self.correlation_id = kwargs.get('correlation_id', None)
        self.http_request = kwargs.get('http_request', None)


class ResourceDeleteCancelData(Model):
    """Schema of the Data property of an EventGridEvent for an
    Microsoft.Resources.ResourceDeleteCancel event. This is raised when a
    resource delete operation is canceled.

    :param tenant_id: The tenant ID of the resource.
    :type tenant_id: str
    :param subscription_id: The subscription ID of the resource.
    :type subscription_id: str
    :param resource_group: The resource group of the resource.
    :type resource_group: str
    :param resource_provider: The resource provider performing the operation.
    :type resource_provider: str
    :param resource_uri: The URI of the resource in the operation.
    :type resource_uri: str
    :param operation_name: The operation that was performed.
    :type operation_name: str
    :param status: The status of the operation.
    :type status: str
    :param authorization: The requested authorization for the operation.
    :type authorization: str
    :param claims: The properties of the claims.
    :type claims: str
    :param correlation_id: An operation ID used for troubleshooting.
    :type correlation_id: str
    :param http_request: The details of the operation.
    :type http_request: str
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
        'resource_group': {'key': 'resourceGroup', 'type': 'str'},
        'resource_provider': {'key': 'resourceProvider', 'type': 'str'},
        'resource_uri': {'key': 'resourceUri', 'type': 'str'},
        'operation_name': {'key': 'operationName', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'authorization': {'key': 'authorization', 'type': 'str'},
        'claims': {'key': 'claims', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'http_request': {'key': 'httpRequest', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ResourceDeleteCancelData, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.subscription_id = kwargs.get('subscription_id', None)
        self.resource_group = kwargs.get('resource_group', None)
        self.resource_provider = kwargs.get('resource_provider', None)
        self.resource_uri = kwargs.get('resource_uri', None)
        self.operation_name = kwargs.get('operation_name', None)
        self.status = kwargs.get('status', None)
        self.authorization = kwargs.get('authorization', None)
        self.claims = kwargs.get('claims', None)
        self.correlation_id = kwargs.get('correlation_id', None)
        self.http_request = kwargs.get('http_request', None)


class ResourceDeleteFailureData(Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Resources.ResourceDeleteFailure event. This is raised when a
    resource delete operation fails.

    :param tenant_id: The tenant ID of the resource.
    :type tenant_id: str
    :param subscription_id: The subscription ID of the resource.
    :type subscription_id: str
    :param resource_group: The resource group of the resource.
    :type resource_group: str
    :param resource_provider: The resource provider performing the operation.
    :type resource_provider: str
    :param resource_uri: The URI of the resource in the operation.
    :type resource_uri: str
    :param operation_name: The operation that was performed.
    :type operation_name: str
    :param status: The status of the operation.
    :type status: str
    :param authorization: The requested authorization for the operation.
    :type authorization: str
    :param claims: The properties of the claims.
    :type claims: str
    :param correlation_id: An operation ID used for troubleshooting.
    :type correlation_id: str
    :param http_request: The details of the operation.
    :type http_request: str
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
        'resource_group': {'key': 'resourceGroup', 'type': 'str'},
        'resource_provider': {'key': 'resourceProvider', 'type': 'str'},
        'resource_uri': {'key': 'resourceUri', 'type': 'str'},
        'operation_name': {'key': 'operationName', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'authorization': {'key': 'authorization', 'type': 'str'},
        'claims': {'key': 'claims', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'http_request': {'key': 'httpRequest', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ResourceDeleteFailureData, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.subscription_id = kwargs.get('subscription_id', None)
        self.resource_group = kwargs.get('resource_group', None)
        self.resource_provider = kwargs.get('resource_provider', None)
        self.resource_uri = kwargs.get('resource_uri', None)
        self.operation_name = kwargs.get('operation_name', None)
        self.status = kwargs.get('status', None)
        self.authorization = kwargs.get('authorization', None)
        self.claims = kwargs.get('claims', None)
        self.correlation_id = kwargs.get('correlation_id', None)
        self.http_request = kwargs.get('http_request', None)


class ResourceDeleteSuccessData(Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Resources.ResourceDeleteSuccess event. This is raised when a
    resource delete operation succeeds.

    :param tenant_id: The tenant ID of the resource.
    :type tenant_id: str
    :param subscription_id: The subscription ID of the resource.
    :type subscription_id: str
    :param resource_group: The resource group of the resource.
    :type resource_group: str
    :param resource_provider: The resource provider performing the operation.
    :type resource_provider: str
    :param resource_uri: The URI of the resource in the operation.
    :type resource_uri: str
    :param operation_name: The operation that was performed.
    :type operation_name: str
    :param status: The status of the operation.
    :type status: str
    :param authorization: The requested authorization for the operation.
    :type authorization: str
    :param claims: The properties of the claims.
    :type claims: str
    :param correlation_id: An operation ID used for troubleshooting.
    :type correlation_id: str
    :param http_request: The details of the operation.
    :type http_request: str
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
        'resource_group': {'key': 'resourceGroup', 'type': 'str'},
        'resource_provider': {'key': 'resourceProvider', 'type': 'str'},
        'resource_uri': {'key': 'resourceUri', 'type': 'str'},
        'operation_name': {'key': 'operationName', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'authorization': {'key': 'authorization', 'type': 'str'},
        'claims': {'key': 'claims', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'http_request': {'key': 'httpRequest', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ResourceDeleteSuccessData, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.subscription_id = kwargs.get('subscription_id', None)
        self.resource_group = kwargs.get('resource_group', None)
        self.resource_provider = kwargs.get('resource_provider', None)
        self.resource_uri = kwargs.get('resource_uri', None)
        self.operation_name = kwargs.get('operation_name', None)
        self.status = kwargs.get('status', None)
        self.authorization = kwargs.get('authorization', None)
        self.claims = kwargs.get('claims', None)
        self.correlation_id = kwargs.get('correlation_id', None)
        self.http_request = kwargs.get('http_request', None)


class ResourceWriteCancelData(Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Resources.ResourceWriteCancel event. This is raised when a
    resource create or update operation is canceled.

    :param tenant_id: The tenant ID of the resource.
    :type tenant_id: str
    :param subscription_id: The subscription ID of the resource.
    :type subscription_id: str
    :param resource_group: The resource group of the resource.
    :type resource_group: str
    :param resource_provider: The resource provider performing the operation.
    :type resource_provider: str
    :param resource_uri: The URI of the resource in the operation.
    :type resource_uri: str
    :param operation_name: The operation that was performed.
    :type operation_name: str
    :param status: The status of the operation.
    :type status: str
    :param authorization: The requested authorization for the operation.
    :type authorization: str
    :param claims: The properties of the claims.
    :type claims: str
    :param correlation_id: An operation ID used for troubleshooting.
    :type correlation_id: str
    :param http_request: The details of the operation.
    :type http_request: str
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
        'resource_group': {'key': 'resourceGroup', 'type': 'str'},
        'resource_provider': {'key': 'resourceProvider', 'type': 'str'},
        'resource_uri': {'key': 'resourceUri', 'type': 'str'},
        'operation_name': {'key': 'operationName', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'authorization': {'key': 'authorization', 'type': 'str'},
        'claims': {'key': 'claims', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'http_request': {'key': 'httpRequest', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ResourceWriteCancelData, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.subscription_id = kwargs.get('subscription_id', None)
        self.resource_group = kwargs.get('resource_group', None)
        self.resource_provider = kwargs.get('resource_provider', None)
        self.resource_uri = kwargs.get('resource_uri', None)
        self.operation_name = kwargs.get('operation_name', None)
        self.status = kwargs.get('status', None)
        self.authorization = kwargs.get('authorization', None)
        self.claims = kwargs.get('claims', None)
        self.correlation_id = kwargs.get('correlation_id', None)
        self.http_request = kwargs.get('http_request', None)


class ResourceWriteFailureData(Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Resources.ResourceWriteFailure event. This is raised when a
    resource create or update operation fails.

    :param tenant_id: The tenant ID of the resource.
    :type tenant_id: str
    :param subscription_id: The subscription ID of the resource.
    :type subscription_id: str
    :param resource_group: The resource group of the resource.
    :type resource_group: str
    :param resource_provider: The resource provider performing the operation.
    :type resource_provider: str
    :param resource_uri: The URI of the resource in the operation.
    :type resource_uri: str
    :param operation_name: The operation that was performed.
    :type operation_name: str
    :param status: The status of the operation.
    :type status: str
    :param authorization: The requested authorization for the operation.
    :type authorization: str
    :param claims: The properties of the claims.
    :type claims: str
    :param correlation_id: An operation ID used for troubleshooting.
    :type correlation_id: str
    :param http_request: The details of the operation.
    :type http_request: str
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
        'resource_group': {'key': 'resourceGroup', 'type': 'str'},
        'resource_provider': {'key': 'resourceProvider', 'type': 'str'},
        'resource_uri': {'key': 'resourceUri', 'type': 'str'},
        'operation_name': {'key': 'operationName', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'authorization': {'key': 'authorization', 'type': 'str'},
        'claims': {'key': 'claims', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'http_request': {'key': 'httpRequest', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ResourceWriteFailureData, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.subscription_id = kwargs.get('subscription_id', None)
        self.resource_group = kwargs.get('resource_group', None)
        self.resource_provider = kwargs.get('resource_provider', None)
        self.resource_uri = kwargs.get('resource_uri', None)
        self.operation_name = kwargs.get('operation_name', None)
        self.status = kwargs.get('status', None)
        self.authorization = kwargs.get('authorization', None)
        self.claims = kwargs.get('claims', None)
        self.correlation_id = kwargs.get('correlation_id', None)
        self.http_request = kwargs.get('http_request', None)


class ResourceWriteSuccessData(Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.Resources.ResourceWriteSuccess event. This is raised when a
    resource create or update operation succeeds.

    :param tenant_id: The tenant ID of the resource.
    :type tenant_id: str
    :param subscription_id: The subscription ID of the resource.
    :type subscription_id: str
    :param resource_group: The resource group of the resource.
    :type resource_group: str
    :param resource_provider: The resource provider performing the operation.
    :type resource_provider: str
    :param resource_uri: The URI of the resource in the operation.
    :type resource_uri: str
    :param operation_name: The operation that was performed.
    :type operation_name: str
    :param status: The status of the operation.
    :type status: str
    :param authorization: The requested authorization for the operation.
    :type authorization: str
    :param claims: The properties of the claims.
    :type claims: str
    :param correlation_id: An operation ID used for troubleshooting.
    :type correlation_id: str
    :param http_request: The details of the operation.
    :type http_request: str
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
        'resource_group': {'key': 'resourceGroup', 'type': 'str'},
        'resource_provider': {'key': 'resourceProvider', 'type': 'str'},
        'resource_uri': {'key': 'resourceUri', 'type': 'str'},
        'operation_name': {'key': 'operationName', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'authorization': {'key': 'authorization', 'type': 'str'},
        'claims': {'key': 'claims', 'type': 'str'},
        'correlation_id': {'key': 'correlationId', 'type': 'str'},
        'http_request': {'key': 'httpRequest', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ResourceWriteSuccessData, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.subscription_id = kwargs.get('subscription_id', None)
        self.resource_group = kwargs.get('resource_group', None)
        self.resource_provider = kwargs.get('resource_provider', None)
        self.resource_uri = kwargs.get('resource_uri', None)
        self.operation_name = kwargs.get('operation_name', None)
        self.status = kwargs.get('status', None)
        self.authorization = kwargs.get('authorization', None)
        self.claims = kwargs.get('claims', None)
        self.correlation_id = kwargs.get('correlation_id', None)
        self.http_request = kwargs.get('http_request', None)


class ServiceBusActiveMessagesAvailableWithNoListenersEventData(Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ServiceBus.ActiveMessagesAvailableWithNoListeners event.

    :param namespace_name: The namespace name of the Microsoft.ServiceBus
     resource.
    :type namespace_name: str
    :param request_uri: The endpoint of the Microsoft.ServiceBus resource.
    :type request_uri: str
    :param entity_type: The entity type of the Microsoft.ServiceBus resource.
     Could be one of 'queue' or 'subscriber'.
    :type entity_type: str
    :param queue_name: The name of the Microsoft.ServiceBus queue. If the
     entity type is of type 'subscriber', then this value will be null.
    :type queue_name: str
    :param topic_name: The name of the Microsoft.ServiceBus topic. If the
     entity type is of type 'queue', then this value will be null.
    :type topic_name: str
    :param subscription_name: The name of the Microsoft.ServiceBus topic's
     subscription. If the entity type is of type 'queue', then this value will
     be null.
    :type subscription_name: str
    """

    _attribute_map = {
        'namespace_name': {'key': 'namespaceName', 'type': 'str'},
        'request_uri': {'key': 'requestUri', 'type': 'str'},
        'entity_type': {'key': 'entityType', 'type': 'str'},
        'queue_name': {'key': 'queueName', 'type': 'str'},
        'topic_name': {'key': 'topicName', 'type': 'str'},
        'subscription_name': {'key': 'subscriptionName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ServiceBusActiveMessagesAvailableWithNoListenersEventData, self).__init__(**kwargs)
        self.namespace_name = kwargs.get('namespace_name', None)
        self.request_uri = kwargs.get('request_uri', None)
        self.entity_type = kwargs.get('entity_type', None)
        self.queue_name = kwargs.get('queue_name', None)
        self.topic_name = kwargs.get('topic_name', None)
        self.subscription_name = kwargs.get('subscription_name', None)


class ServiceBusDeadletterMessagesAvailableWithNoListenersEventData(Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.ServiceBus.DeadletterMessagesAvailableWithNoListenersEvent event.

    :param namespace_name: The namespace name of the Microsoft.ServiceBus
     resource.
    :type namespace_name: str
    :param request_uri: The endpoint of the Microsoft.ServiceBus resource.
    :type request_uri: str
    :param entity_type: The entity type of the Microsoft.ServiceBus resource.
     Could be one of 'queue' or 'subscriber'.
    :type entity_type: str
    :param queue_name: The name of the Microsoft.ServiceBus queue. If the
     entity type is of type 'subscriber', then this value will be null.
    :type queue_name: str
    :param topic_name: The name of the Microsoft.ServiceBus topic. If the
     entity type is of type 'queue', then this value will be null.
    :type topic_name: str
    :param subscription_name: The name of the Microsoft.ServiceBus topic's
     subscription. If the entity type is of type 'queue', then this value will
     be null.
    :type subscription_name: str
    """

    _attribute_map = {
        'namespace_name': {'key': 'namespaceName', 'type': 'str'},
        'request_uri': {'key': 'requestUri', 'type': 'str'},
        'entity_type': {'key': 'entityType', 'type': 'str'},
        'queue_name': {'key': 'queueName', 'type': 'str'},
        'topic_name': {'key': 'topicName', 'type': 'str'},
        'subscription_name': {'key': 'subscriptionName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ServiceBusDeadletterMessagesAvailableWithNoListenersEventData, self).__init__(**kwargs)
        self.namespace_name = kwargs.get('namespace_name', None)
        self.request_uri = kwargs.get('request_uri', None)
        self.entity_type = kwargs.get('entity_type', None)
        self.queue_name = kwargs.get('queue_name', None)
        self.topic_name = kwargs.get('topic_name', None)
        self.subscription_name = kwargs.get('subscription_name', None)


class SignalRServiceClientConnectionConnectedEventData(Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.SignalRService.ClientConnectionConnected event.

    :param timestamp: The time at which the event occurred.
    :type timestamp: datetime
    :param hub_name: The hub of connected client connection.
    :type hub_name: str
    :param connection_id: The connection Id of connected client connection.
    :type connection_id: str
    :param user_id: The user Id of connected client connection.
    :type user_id: str
    """

    _attribute_map = {
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'hub_name': {'key': 'hubName', 'type': 'str'},
        'connection_id': {'key': 'connectionId', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SignalRServiceClientConnectionConnectedEventData, self).__init__(**kwargs)
        self.timestamp = kwargs.get('timestamp', None)
        self.hub_name = kwargs.get('hub_name', None)
        self.connection_id = kwargs.get('connection_id', None)
        self.user_id = kwargs.get('user_id', None)


class SignalRServiceClientConnectionDisconnectedEventData(Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.SignalRService.ClientConnectionDisconnected event.

    :param timestamp: The time at which the event occurred.
    :type timestamp: datetime
    :param hub_name: The hub of connected client connection.
    :type hub_name: str
    :param connection_id: The connection Id of connected client connection.
    :type connection_id: str
    :param user_id: The user Id of connected client connection.
    :type user_id: str
    :param error_message: The message of error that cause the client
     connection disconnected.
    :type error_message: str
    """

    _attribute_map = {
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'hub_name': {'key': 'hubName', 'type': 'str'},
        'connection_id': {'key': 'connectionId', 'type': 'str'},
        'user_id': {'key': 'userId', 'type': 'str'},
        'error_message': {'key': 'errorMessage', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SignalRServiceClientConnectionDisconnectedEventData, self).__init__(**kwargs)
        self.timestamp = kwargs.get('timestamp', None)
        self.hub_name = kwargs.get('hub_name', None)
        self.connection_id = kwargs.get('connection_id', None)
        self.user_id = kwargs.get('user_id', None)
        self.error_message = kwargs.get('error_message', None)


class StorageBlobCreatedEventData(Model):
    """Schema of the Data property of an EventGridEvent for an
    Microsoft.Storage.BlobCreated event.

    :param api: The name of the API/operation that triggered this event.
    :type api: str
    :param client_request_id: A request id provided by the client of the
     storage API operation that triggered this event.
    :type client_request_id: str
    :param request_id: The request id generated by the Storage service for the
     storage API operation that triggered this event.
    :type request_id: str
    :param e_tag: The etag of the blob at the time this event was triggered.
    :type e_tag: str
    :param content_type: The content type of the blob. This is the same as
     what would be returned in the Content-Type header from the blob.
    :type content_type: str
    :param content_length: The size of the blob in bytes. This is the same as
     what would be returned in the Content-Length header from the blob.
    :type content_length: long
    :param content_offset: The offset of the blob in bytes.
    :type content_offset: long
    :param blob_type: The type of blob.
    :type blob_type: str
    :param url: The path to the blob.
    :type url: str
    :param sequencer: An opaque string value representing the logical sequence
     of events for any particular blob name. Users can use standard string
     comparison to understand the relative sequence of two events on the same
     blob name.
    :type sequencer: str
    :param identity: The identity of the requester that triggered this event.
    :type identity: str
    :param storage_diagnostics: For service use only. Diagnostic data
     occasionally included by the Azure Storage service. This property should
     be ignored by event consumers.
    :type storage_diagnostics: object
    """

    _attribute_map = {
        'api': {'key': 'api', 'type': 'str'},
        'client_request_id': {'key': 'clientRequestId', 'type': 'str'},
        'request_id': {'key': 'requestId', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'content_length': {'key': 'contentLength', 'type': 'long'},
        'content_offset': {'key': 'contentOffset', 'type': 'long'},
        'blob_type': {'key': 'blobType', 'type': 'str'},
        'url': {'key': 'url', 'type': 'str'},
        'sequencer': {'key': 'sequencer', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'str'},
        'storage_diagnostics': {'key': 'storageDiagnostics', 'type': 'object'},
    }

    def __init__(self, **kwargs):
        super(StorageBlobCreatedEventData, self).__init__(**kwargs)
        self.api = kwargs.get('api', None)
        self.client_request_id = kwargs.get('client_request_id', None)
        self.request_id = kwargs.get('request_id', None)
        self.e_tag = kwargs.get('e_tag', None)
        self.content_type = kwargs.get('content_type', None)
        self.content_length = kwargs.get('content_length', None)
        self.content_offset = kwargs.get('content_offset', None)
        self.blob_type = kwargs.get('blob_type', None)
        self.url = kwargs.get('url', None)
        self.sequencer = kwargs.get('sequencer', None)
        self.identity = kwargs.get('identity', None)
        self.storage_diagnostics = kwargs.get('storage_diagnostics', None)


class StorageBlobDeletedEventData(Model):
    """Schema of the Data property of an EventGridEvent for an
    Microsoft.Storage.BlobDeleted event.

    :param api: The name of the API/operation that triggered this event.
    :type api: str
    :param client_request_id: A request id provided by the client of the
     storage API operation that triggered this event.
    :type client_request_id: str
    :param request_id: The request id generated by the Storage service for the
     storage API operation that triggered this event.
    :type request_id: str
    :param content_type: The content type of the blob. This is the same as
     what would be returned in the Content-Type header from the blob.
    :type content_type: str
    :param blob_type: The type of blob.
    :type blob_type: str
    :param url: The path to the blob.
    :type url: str
    :param sequencer: An opaque string value representing the logical sequence
     of events for any particular blob name. Users can use standard string
     comparison to understand the relative sequence of two events on the same
     blob name.
    :type sequencer: str
    :param identity: The identity of the requester that triggered this event.
    :type identity: str
    :param storage_diagnostics: For service use only. Diagnostic data
     occasionally included by the Azure Storage service. This property should
     be ignored by event consumers.
    :type storage_diagnostics: object
    """

    _attribute_map = {
        'api': {'key': 'api', 'type': 'str'},
        'client_request_id': {'key': 'clientRequestId', 'type': 'str'},
        'request_id': {'key': 'requestId', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'blob_type': {'key': 'blobType', 'type': 'str'},
        'url': {'key': 'url', 'type': 'str'},
        'sequencer': {'key': 'sequencer', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'str'},
        'storage_diagnostics': {'key': 'storageDiagnostics', 'type': 'object'},
    }

    def __init__(self, **kwargs):
        super(StorageBlobDeletedEventData, self).__init__(**kwargs)
        self.api = kwargs.get('api', None)
        self.client_request_id = kwargs.get('client_request_id', None)
        self.request_id = kwargs.get('request_id', None)
        self.content_type = kwargs.get('content_type', None)
        self.blob_type = kwargs.get('blob_type', None)
        self.url = kwargs.get('url', None)
        self.sequencer = kwargs.get('sequencer', None)
        self.identity = kwargs.get('identity', None)
        self.storage_diagnostics = kwargs.get('storage_diagnostics', None)


class StorageBlobRenamedEventData(Model):
    """Schema of the Data property of an EventGridEvent for an
    Microsoft.Storage.BlobRenamed event.

    :param api: The name of the API/operation that triggered this event.
    :type api: str
    :param client_request_id: A request id provided by the client of the
     storage API operation that triggered this event.
    :type client_request_id: str
    :param request_id: The request id generated by the storage service for the
     storage API operation that triggered this event.
    :type request_id: str
    :param source_url: The path to the blob that was renamed.
    :type source_url: str
    :param destination_url: The new path to the blob after the rename
     operation.
    :type destination_url: str
    :param sequencer: An opaque string value representing the logical sequence
     of events for any particular blob name. Users can use standard string
     comparison to understand the relative sequence of two events on the same
     blob name.
    :type sequencer: str
    :param identity: The identity of the requester that triggered this event.
    :type identity: str
    :param storage_diagnostics: For service use only. Diagnostic data
     occasionally included by the Azure Storage service. This property should
     be ignored by event consumers.
    :type storage_diagnostics: object
    """

    _attribute_map = {
        'api': {'key': 'api', 'type': 'str'},
        'client_request_id': {'key': 'clientRequestId', 'type': 'str'},
        'request_id': {'key': 'requestId', 'type': 'str'},
        'source_url': {'key': 'sourceUrl', 'type': 'str'},
        'destination_url': {'key': 'destinationUrl', 'type': 'str'},
        'sequencer': {'key': 'sequencer', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'str'},
        'storage_diagnostics': {'key': 'storageDiagnostics', 'type': 'object'},
    }

    def __init__(self, **kwargs):
        super(StorageBlobRenamedEventData, self).__init__(**kwargs)
        self.api = kwargs.get('api', None)
        self.client_request_id = kwargs.get('client_request_id', None)
        self.request_id = kwargs.get('request_id', None)
        self.source_url = kwargs.get('source_url', None)
        self.destination_url = kwargs.get('destination_url', None)
        self.sequencer = kwargs.get('sequencer', None)
        self.identity = kwargs.get('identity', None)
        self.storage_diagnostics = kwargs.get('storage_diagnostics', None)


class StorageDirectoryCreatedEventData(Model):
    """Schema of the Data property of an EventGridEvent for an
    Microsoft.Storage.DirectoryCreated event.

    :param api: The name of the API/operation that triggered this event.
    :type api: str
    :param client_request_id: A request id provided by the client of the
     storage API operation that triggered this event.
    :type client_request_id: str
    :param request_id: The request id generated by the storage service for the
     storage API operation that triggered this event.
    :type request_id: str
    :param e_tag: The etag of the directory at the time this event was
     triggered.
    :type e_tag: str
    :param url: The path to the directory.
    :type url: str
    :param sequencer: An opaque string value representing the logical sequence
     of events for any particular directory name. Users can use standard string
     comparison to understand the relative sequence of two events on the same
     directory name.
    :type sequencer: str
    :param identity: The identity of the requester that triggered this event.
    :type identity: str
    :param storage_diagnostics: For service use only. Diagnostic data
     occasionally included by the Azure Storage service. This property should
     be ignored by event consumers.
    :type storage_diagnostics: object
    """

    _attribute_map = {
        'api': {'key': 'api', 'type': 'str'},
        'client_request_id': {'key': 'clientRequestId', 'type': 'str'},
        'request_id': {'key': 'requestId', 'type': 'str'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'url': {'key': 'url', 'type': 'str'},
        'sequencer': {'key': 'sequencer', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'str'},
        'storage_diagnostics': {'key': 'storageDiagnostics', 'type': 'object'},
    }

    def __init__(self, **kwargs):
        super(StorageDirectoryCreatedEventData, self).__init__(**kwargs)
        self.api = kwargs.get('api', None)
        self.client_request_id = kwargs.get('client_request_id', None)
        self.request_id = kwargs.get('request_id', None)
        self.e_tag = kwargs.get('e_tag', None)
        self.url = kwargs.get('url', None)
        self.sequencer = kwargs.get('sequencer', None)
        self.identity = kwargs.get('identity', None)
        self.storage_diagnostics = kwargs.get('storage_diagnostics', None)


class StorageDirectoryDeletedEventData(Model):
    """Schema of the Data property of an EventGridEvent for an
    Microsoft.Storage.DirectoryDeleted event.

    :param api: The name of the API/operation that triggered this event.
    :type api: str
    :param client_request_id: A request id provided by the client of the
     storage API operation that triggered this event.
    :type client_request_id: str
    :param request_id: The request id generated by the storage service for the
     storage API operation that triggered this event.
    :type request_id: str
    :param url: The path to the deleted directory.
    :type url: str
    :param recursive: Is this event for a recursive delete operation.
    :type recursive: bool
    :param sequencer: An opaque string value representing the logical sequence
     of events for any particular directory name. Users can use standard string
     comparison to understand the relative sequence of two events on the same
     directory name.
    :type sequencer: str
    :param identity: The identity of the requester that triggered this event.
    :type identity: str
    :param storage_diagnostics: For service use only. Diagnostic data
     occasionally included by the Azure Storage service. This property should
     be ignored by event consumers.
    :type storage_diagnostics: object
    """

    _attribute_map = {
        'api': {'key': 'api', 'type': 'str'},
        'client_request_id': {'key': 'clientRequestId', 'type': 'str'},
        'request_id': {'key': 'requestId', 'type': 'str'},
        'url': {'key': 'url', 'type': 'str'},
        'recursive': {'key': 'recursive', 'type': 'bool'},
        'sequencer': {'key': 'sequencer', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'str'},
        'storage_diagnostics': {'key': 'storageDiagnostics', 'type': 'object'},
    }

    def __init__(self, **kwargs):
        super(StorageDirectoryDeletedEventData, self).__init__(**kwargs)
        self.api = kwargs.get('api', None)
        self.client_request_id = kwargs.get('client_request_id', None)
        self.request_id = kwargs.get('request_id', None)
        self.url = kwargs.get('url', None)
        self.recursive = kwargs.get('recursive', None)
        self.sequencer = kwargs.get('sequencer', None)
        self.identity = kwargs.get('identity', None)
        self.storage_diagnostics = kwargs.get('storage_diagnostics', None)


class StorageDirectoryRenamedEventData(Model):
    """Schema of the Data property of an EventGridEvent for an
    Microsoft.Storage.DirectoryRenamed event.

    :param api: The name of the API/operation that triggered this event.
    :type api: str
    :param client_request_id: A request id provided by the client of the
     storage API operation that triggered this event.
    :type client_request_id: str
    :param request_id: The request id generated by the storage service for the
     storage API operation that triggered this event.
    :type request_id: str
    :param source_url: The path to the directory that was renamed.
    :type source_url: str
    :param destination_url: The new path to the directory after the rename
     operation.
    :type destination_url: str
    :param sequencer: An opaque string value representing the logical sequence
     of events for any particular directory name. Users can use standard string
     comparison to understand the relative sequence of two events on the same
     directory name.
    :type sequencer: str
    :param identity: The identity of the requester that triggered this event.
    :type identity: str
    :param storage_diagnostics: For service use only. Diagnostic data
     occasionally included by the Azure Storage service. This property should
     be ignored by event consumers.
    :type storage_diagnostics: object
    """

    _attribute_map = {
        'api': {'key': 'api', 'type': 'str'},
        'client_request_id': {'key': 'clientRequestId', 'type': 'str'},
        'request_id': {'key': 'requestId', 'type': 'str'},
        'source_url': {'key': 'sourceUrl', 'type': 'str'},
        'destination_url': {'key': 'destinationUrl', 'type': 'str'},
        'sequencer': {'key': 'sequencer', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'str'},
        'storage_diagnostics': {'key': 'storageDiagnostics', 'type': 'object'},
    }

    def __init__(self, **kwargs):
        super(StorageDirectoryRenamedEventData, self).__init__(**kwargs)
        self.api = kwargs.get('api', None)
        self.client_request_id = kwargs.get('client_request_id', None)
        self.request_id = kwargs.get('request_id', None)
        self.source_url = kwargs.get('source_url', None)
        self.destination_url = kwargs.get('destination_url', None)
        self.sequencer = kwargs.get('sequencer', None)
        self.identity = kwargs.get('identity', None)
        self.storage_diagnostics = kwargs.get('storage_diagnostics', None)


class SubscriptionDeletedEventData(Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.EventGrid.SubscriptionDeletedEvent.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar event_subscription_id: The Azure resource ID of the deleted event
     subscription.
    :vartype event_subscription_id: str
    """

    _validation = {
        'event_subscription_id': {'readonly': True},
    }

    _attribute_map = {
        'event_subscription_id': {'key': 'eventSubscriptionId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SubscriptionDeletedEventData, self).__init__(**kwargs)
        self.event_subscription_id = None


class SubscriptionValidationEventData(Model):
    """Schema of the Data property of an EventGridEvent for a
    Microsoft.EventGrid.SubscriptionValidationEvent.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar validation_code: The validation code sent by Azure Event Grid to
     validate an event subscription. To complete the validation handshake, the
     subscriber must either respond with this validation code as part of the
     validation response, or perform a GET request on the validationUrl
     (available starting version 2018-05-01-preview).
    :vartype validation_code: str
    :ivar validation_url: The validation URL sent by Azure Event Grid
     (available starting version 2018-05-01-preview). To complete the
     validation handshake, the subscriber must either respond with the
     validationCode as part of the validation response, or perform a GET
     request on the validationUrl (available starting version
     2018-05-01-preview).
    :vartype validation_url: str
    """

    _validation = {
        'validation_code': {'readonly': True},
        'validation_url': {'readonly': True},
    }

    _attribute_map = {
        'validation_code': {'key': 'validationCode', 'type': 'str'},
        'validation_url': {'key': 'validationUrl', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SubscriptionValidationEventData, self).__init__(**kwargs)
        self.validation_code = None
        self.validation_url = None


class SubscriptionValidationResponse(Model):
    """To complete an event subscription validation handshake, a subscriber can
    use either the validationCode or the validationUrl received in a
    SubscriptionValidationEvent. When the validationCode is used, the
    SubscriptionValidationResponse can be used to build the response.

    :param validation_response: The validation response sent by the subscriber
     to Azure Event Grid to complete the validation of an event subscription.
    :type validation_response: str
    """

    _attribute_map = {
        'validation_response': {'key': 'validationResponse', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SubscriptionValidationResponse, self).__init__(**kwargs)
        self.validation_response = kwargs.get('validation_response', None)
