# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import json
import sys
from typing import Any, Callable, Dict, IO, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._model_base import SdkJSONEncoder, _deserialize
from .._serialization import Serializer

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_device_location_verify_request(*, apc_gateway_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-02-09-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/device-location/location:verify"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["apc-gateway-id"] = _SERIALIZER.header("apc_gateway_id", apc_gateway_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_device_network_retrieve_request(*, apc_gateway_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-02-09-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/device-network/network:retrieve"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["apc-gateway-id"] = _SERIALIZER.header("apc_gateway_id", apc_gateway_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_number_verification_verify_without_code_request(  # pylint: disable=name-too-long
    *, apc_gateway_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-02-09-preview"))
    # Construct URL
    _url = "/number-verification/number:verify"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["apc-gateway-id"] = _SERIALIZER.header("apc_gateway_id", apc_gateway_id, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_number_verification_verify_with_code_request(  # pylint: disable=name-too-long
    *, apc_gateway_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-02-09-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/number-verification/number:verify"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["apc-gateway-id"] = _SERIALIZER.header("apc_gateway_id", apc_gateway_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_sim_swap_retrieve_request(*, apc_gateway_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-02-09-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/sim-swap/sim-swap:retrieve"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["apc-gateway-id"] = _SERIALIZER.header("apc_gateway_id", apc_gateway_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_sim_swap_verify_request(*, apc_gateway_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2024-02-09-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/sim-swap/sim-swap:verify"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["apc-gateway-id"] = _SERIALIZER.header("apc_gateway_id", apc_gateway_id, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


class DeviceLocationOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.programmableconnectivity.ProgrammableConnectivityClient`'s
        :attr:`device_location` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    def verify(
        self,
        body: _models.DeviceLocationVerificationContent,
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.DeviceLocationVerificationResult:
        # pylint: disable=line-too-long
        """Verifies whether a device is within a specified location area, defined as an accuracy (radius)
        around a point, specified by longitude and latitude.

        :param body: Required.
        :type body: ~azure.programmableconnectivity.models.DeviceLocationVerificationContent
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: DeviceLocationVerificationResult. The DeviceLocationVerificationResult is compatible
         with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.DeviceLocationVerificationResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "accuracy": 0,  # Accuracy expected for location verification in kilometers.
                      Required.
                    "device": {
                        "ipv4Address": {
                            "ipv4": "str",  # An IPv4 address. This may be specified as
                              an exact address, or as a subnet in CIDR notation. Required.
                            "port": 0  # User equipment port. Required.
                        },
                        "ipv6Address": {
                            "ipv6": "str",  # An IPv6 address. This may be specified as
                              an exact address, or as a subnet in CIDR notation. Required.
                            "port": 0  # User equipment port. Required.
                        },
                        "networkAccessIdentifier": "str",  # Optional. External identifier or
                          network access identifier of the device.
                        "phoneNumber": "str"  # Optional. Phone number in E.164 format
                          (starting with country code), and optionally prefixed with '+'.
                    },
                    "latitude": 0.0,  # Latitude of location to be verified. Required.
                    "longitude": 0.0,  # Longitude of location to be verified. Required.
                    "networkIdentifier": {
                        "identifier": "str",  # The network identifier, based on the
                          identifierType: an IPv4 address, and IPv6 address, or a Network Code. A
                          Network Code may be obtained from APC documentation or from the APC
                          /Network:retrieve endpoint. Required.
                        "identifierType": "str"  # The type of identifier for the network.
                          one of: 'IPv4', 'IPv6', 'NetworkCode'. Required.
                    }
                }

                # response body for status code(s): 200
                response == {
                    "verificationResult": bool  # True if the location is in the specified area,
                      False otherwise. Required.
                }
        """

    @overload
    def verify(
        self, body: JSON, *, apc_gateway_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.DeviceLocationVerificationResult:
        """Verifies whether a device is within a specified location area, defined as an accuracy (radius)
        around a point, specified by longitude and latitude.

        :param body: Required.
        :type body: JSON
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: DeviceLocationVerificationResult. The DeviceLocationVerificationResult is compatible
         with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.DeviceLocationVerificationResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "verificationResult": bool  # True if the location is in the specified area,
                      False otherwise. Required.
                }
        """

    @overload
    def verify(
        self, body: IO[bytes], *, apc_gateway_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.DeviceLocationVerificationResult:
        """Verifies whether a device is within a specified location area, defined as an accuracy (radius)
        around a point, specified by longitude and latitude.

        :param body: Required.
        :type body: IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: DeviceLocationVerificationResult. The DeviceLocationVerificationResult is compatible
         with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.DeviceLocationVerificationResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "verificationResult": bool  # True if the location is in the specified area,
                      False otherwise. Required.
                }
        """

    @distributed_trace
    def verify(
        self,
        body: Union[_models.DeviceLocationVerificationContent, JSON, IO[bytes]],
        *,
        apc_gateway_id: str,
        **kwargs: Any
    ) -> _models.DeviceLocationVerificationResult:
        # pylint: disable=line-too-long
        """Verifies whether a device is within a specified location area, defined as an accuracy (radius)
        around a point, specified by longitude and latitude.

        :param body: Is one of the following types: DeviceLocationVerificationContent, JSON, IO[bytes]
         Required.
        :type body: ~azure.programmableconnectivity.models.DeviceLocationVerificationContent or JSON or
         IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :return: DeviceLocationVerificationResult. The DeviceLocationVerificationResult is compatible
         with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.DeviceLocationVerificationResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "accuracy": 0,  # Accuracy expected for location verification in kilometers.
                      Required.
                    "device": {
                        "ipv4Address": {
                            "ipv4": "str",  # An IPv4 address. This may be specified as
                              an exact address, or as a subnet in CIDR notation. Required.
                            "port": 0  # User equipment port. Required.
                        },
                        "ipv6Address": {
                            "ipv6": "str",  # An IPv6 address. This may be specified as
                              an exact address, or as a subnet in CIDR notation. Required.
                            "port": 0  # User equipment port. Required.
                        },
                        "networkAccessIdentifier": "str",  # Optional. External identifier or
                          network access identifier of the device.
                        "phoneNumber": "str"  # Optional. Phone number in E.164 format
                          (starting with country code), and optionally prefixed with '+'.
                    },
                    "latitude": 0.0,  # Latitude of location to be verified. Required.
                    "longitude": 0.0,  # Longitude of location to be verified. Required.
                    "networkIdentifier": {
                        "identifier": "str",  # The network identifier, based on the
                          identifierType: an IPv4 address, and IPv6 address, or a Network Code. A
                          Network Code may be obtained from APC documentation or from the APC
                          /Network:retrieve endpoint. Required.
                        "identifierType": "str"  # The type of identifier for the network.
                          one of: 'IPv4', 'IPv6', 'NetworkCode'. Required.
                    }
                }

                # response body for status code(s): 200
                response == {
                    "verificationResult": bool  # True if the location is in the specified area,
                      False otherwise. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.DeviceLocationVerificationResult] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_device_location_verify_request(
            apc_gateway_id=apc_gateway_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )
        response_headers["x-ms-request-id"] = self._deserialize("str", response.headers.get("x-ms-request-id"))

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.DeviceLocationVerificationResult, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore


class DeviceNetworkOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.programmableconnectivity.ProgrammableConnectivityClient`'s
        :attr:`device_network` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    def retrieve(
        self,
        body: _models.NetworkIdentifier,
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.NetworkRetrievalResult:
        # pylint: disable=line-too-long
        """Retrieves the network a given device is on. Returns network in a networkCode format that can be
        used for other APIs.

        :param body: Required.
        :type body: ~azure.programmableconnectivity.models.NetworkIdentifier
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: NetworkRetrievalResult. The NetworkRetrievalResult is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.NetworkRetrievalResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "identifier": "str",  # The network identifier, based on the identifierType:
                      an IPv4 address, and IPv6 address, or a Network Code. A Network Code may be
                      obtained from APC documentation or from the APC /Network:retrieve endpoint.
                      Required.
                    "identifierType": "str"  # The type of identifier for the network. one of:
                      'IPv4', 'IPv6', 'NetworkCode'. Required.
                }

                # response body for status code(s): 200
                response == {
                    "networkCode": "str"  # The identifier for the network. This can be used as
                      the networkIdentifier for the service APIs. Required.
                }
        """

    @overload
    def retrieve(
        self, body: JSON, *, apc_gateway_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.NetworkRetrievalResult:
        # pylint: disable=line-too-long
        """Retrieves the network a given device is on. Returns network in a networkCode format that can be
        used for other APIs.

        :param body: Required.
        :type body: JSON
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: NetworkRetrievalResult. The NetworkRetrievalResult is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.NetworkRetrievalResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "networkCode": "str"  # The identifier for the network. This can be used as
                      the networkIdentifier for the service APIs. Required.
                }
        """

    @overload
    def retrieve(
        self, body: IO[bytes], *, apc_gateway_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.NetworkRetrievalResult:
        # pylint: disable=line-too-long
        """Retrieves the network a given device is on. Returns network in a networkCode format that can be
        used for other APIs.

        :param body: Required.
        :type body: IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: NetworkRetrievalResult. The NetworkRetrievalResult is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.NetworkRetrievalResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "networkCode": "str"  # The identifier for the network. This can be used as
                      the networkIdentifier for the service APIs. Required.
                }
        """

    @distributed_trace
    def retrieve(
        self, body: Union[_models.NetworkIdentifier, JSON, IO[bytes]], *, apc_gateway_id: str, **kwargs: Any
    ) -> _models.NetworkRetrievalResult:
        # pylint: disable=line-too-long
        """Retrieves the network a given device is on. Returns network in a networkCode format that can be
        used for other APIs.

        :param body: Is one of the following types: NetworkIdentifier, JSON, IO[bytes] Required.
        :type body: ~azure.programmableconnectivity.models.NetworkIdentifier or JSON or IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :return: NetworkRetrievalResult. The NetworkRetrievalResult is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.NetworkRetrievalResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "identifier": "str",  # The network identifier, based on the identifierType:
                      an IPv4 address, and IPv6 address, or a Network Code. A Network Code may be
                      obtained from APC documentation or from the APC /Network:retrieve endpoint.
                      Required.
                    "identifierType": "str"  # The type of identifier for the network. one of:
                      'IPv4', 'IPv6', 'NetworkCode'. Required.
                }

                # response body for status code(s): 200
                response == {
                    "networkCode": "str"  # The identifier for the network. This can be used as
                      the networkIdentifier for the service APIs. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.NetworkRetrievalResult] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_device_network_retrieve_request(
            apc_gateway_id=apc_gateway_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )
        response_headers["x-ms-request-id"] = self._deserialize("str", response.headers.get("x-ms-request-id"))

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.NetworkRetrievalResult, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore


class NumberVerificationOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.programmableconnectivity.ProgrammableConnectivityClient`'s
        :attr:`number_verification` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    def verify_without_code(  # pylint: disable=inconsistent-return-statements
        self,
        body: _models.NumberVerificationWithoutCodeContent,
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        # pylint: disable=line-too-long
        """Verifies the phone number (MSISDN) associated with a device. As part of the frontend
        authorization flow, the device is redirected to the operator network to authenticate directly.

        :param body: Required.
        :type body: ~azure.programmableconnectivity.models.NumberVerificationWithoutCodeContent
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "networkIdentifier": {
                        "identifier": "str",  # The network identifier, based on the
                          identifierType: an IPv4 address, and IPv6 address, or a Network Code. A
                          Network Code may be obtained from APC documentation or from the APC
                          /Network:retrieve endpoint. Required.
                        "identifierType": "str"  # The type of identifier for the network.
                          one of: 'IPv4', 'IPv6', 'NetworkCode'. Required.
                    },
                    "redirectUri": "str",  # Redirect URI to backend application. Required.
                    "hashedPhoneNumber": "str",  # Optional. Hashed phone number. SHA-256 (in
                      hexadecimal representation) of the mobile phone number in **E.164 format
                      (starting with country code)**. Optionally prefixed with '+'.
                    "phoneNumber": "str"  # Optional. Phone number in E.164 format (starting with
                      country code), and optionally prefixed with '+'.
                }
        """

    @overload
    def verify_without_code(  # pylint: disable=inconsistent-return-statements
        self, body: JSON, *, apc_gateway_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Verifies the phone number (MSISDN) associated with a device. As part of the frontend
        authorization flow, the device is redirected to the operator network to authenticate directly.

        :param body: Required.
        :type body: JSON
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def verify_without_code(  # pylint: disable=inconsistent-return-statements
        self, body: IO[bytes], *, apc_gateway_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Verifies the phone number (MSISDN) associated with a device. As part of the frontend
        authorization flow, the device is redirected to the operator network to authenticate directly.

        :param body: Required.
        :type body: IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def verify_without_code(  # pylint: disable=inconsistent-return-statements
        self,
        body: Union[_models.NumberVerificationWithoutCodeContent, JSON, IO[bytes]],
        *,
        apc_gateway_id: str,
        **kwargs: Any
    ) -> None:
        # pylint: disable=line-too-long
        """Verifies the phone number (MSISDN) associated with a device. As part of the frontend
        authorization flow, the device is redirected to the operator network to authenticate directly.

        :param body: Is one of the following types: NumberVerificationWithoutCodeContent, JSON,
         IO[bytes] Required.
        :type body: ~azure.programmableconnectivity.models.NumberVerificationWithoutCodeContent or JSON
         or IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "networkIdentifier": {
                        "identifier": "str",  # The network identifier, based on the
                          identifierType: an IPv4 address, and IPv6 address, or a Network Code. A
                          Network Code may be obtained from APC documentation or from the APC
                          /Network:retrieve endpoint. Required.
                        "identifierType": "str"  # The type of identifier for the network.
                          one of: 'IPv4', 'IPv6', 'NetworkCode'. Required.
                    },
                    "redirectUri": "str",  # Redirect URI to backend application. Required.
                    "hashedPhoneNumber": "str",  # Optional. Hashed phone number. SHA-256 (in
                      hexadecimal representation) of the mobile phone number in **E.164 format
                      (starting with country code)**. Optionally prefixed with '+'.
                    "phoneNumber": "str"  # Optional. Phone number in E.164 format (starting with
                      country code), and optionally prefixed with '+'.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_number_verification_verify_without_code_request(
            apc_gateway_id=apc_gateway_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [302]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["location"] = self._deserialize("str", response.headers.get("location"))
        response_headers["x-ms-request-id"] = self._deserialize("str", response.headers.get("x-ms-request-id"))
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if cls:
            return cls(pipeline_response, None, response_headers)  # type: ignore

    @overload
    def verify_with_code(
        self,
        body: _models.NumberVerificationWithCodeContent,
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.NumberVerificationResult:
        """Verifies the phone number (MSISDN) associated with a device.

        :param body: Required.
        :type body: ~azure.programmableconnectivity.models.NumberVerificationWithCodeContent
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: NumberVerificationResult. The NumberVerificationResult is compatible with
         MutableMapping
        :rtype: ~azure.programmableconnectivity.models.NumberVerificationResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "apcCode": "str"  # The code provided by APC in exchange for the operator
                      code. Required.
                }

                # response body for status code(s): 200
                response == {
                    "verificationResult": bool  # True if number if the phone number matches the
                      device, False otherwise. Required.
                }
        """

    @overload
    def verify_with_code(
        self, body: JSON, *, apc_gateway_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.NumberVerificationResult:
        """Verifies the phone number (MSISDN) associated with a device.

        :param body: Required.
        :type body: JSON
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: NumberVerificationResult. The NumberVerificationResult is compatible with
         MutableMapping
        :rtype: ~azure.programmableconnectivity.models.NumberVerificationResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "verificationResult": bool  # True if number if the phone number matches the
                      device, False otherwise. Required.
                }
        """

    @overload
    def verify_with_code(
        self, body: IO[bytes], *, apc_gateway_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.NumberVerificationResult:
        """Verifies the phone number (MSISDN) associated with a device.

        :param body: Required.
        :type body: IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: NumberVerificationResult. The NumberVerificationResult is compatible with
         MutableMapping
        :rtype: ~azure.programmableconnectivity.models.NumberVerificationResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "verificationResult": bool  # True if number if the phone number matches the
                      device, False otherwise. Required.
                }
        """

    @distributed_trace
    def verify_with_code(
        self,
        body: Union[_models.NumberVerificationWithCodeContent, JSON, IO[bytes]],
        *,
        apc_gateway_id: str,
        **kwargs: Any
    ) -> _models.NumberVerificationResult:
        """Verifies the phone number (MSISDN) associated with a device.

        :param body: Is one of the following types: NumberVerificationWithCodeContent, JSON, IO[bytes]
         Required.
        :type body: ~azure.programmableconnectivity.models.NumberVerificationWithCodeContent or JSON or
         IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :return: NumberVerificationResult. The NumberVerificationResult is compatible with
         MutableMapping
        :rtype: ~azure.programmableconnectivity.models.NumberVerificationResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "apcCode": "str"  # The code provided by APC in exchange for the operator
                      code. Required.
                }

                # response body for status code(s): 200
                response == {
                    "verificationResult": bool  # True if number if the phone number matches the
                      device, False otherwise. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.NumberVerificationResult] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_number_verification_verify_with_code_request(
            apc_gateway_id=apc_gateway_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )
        response_headers["x-ms-request-id"] = self._deserialize("str", response.headers.get("x-ms-request-id"))

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.NumberVerificationResult, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore


class SimSwapOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.programmableconnectivity.ProgrammableConnectivityClient`'s
        :attr:`sim_swap` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    def retrieve(
        self,
        body: _models.SimSwapRetrievalContent,
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SimSwapRetrievalResult:
        # pylint: disable=line-too-long
        """Provides timestamp of latest SIM swap.

        :param body: Required.
        :type body: ~azure.programmableconnectivity.models.SimSwapRetrievalContent
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: SimSwapRetrievalResult. The SimSwapRetrievalResult is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.SimSwapRetrievalResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "networkIdentifier": {
                        "identifier": "str",  # The network identifier, based on the
                          identifierType: an IPv4 address, and IPv6 address, or a Network Code. A
                          Network Code may be obtained from APC documentation or from the APC
                          /Network:retrieve endpoint. Required.
                        "identifierType": "str"  # The type of identifier for the network.
                          one of: 'IPv4', 'IPv6', 'NetworkCode'. Required.
                    },
                    "phoneNumber": "str"  # Optional. Phone number in E.164 format (starting with
                      country code), and optionally prefixed with '+'.
                }

                # response body for status code(s): 200
                response == {
                    "date": "2020-02-20 00:00:00"  # Optional. Datetime of most recent swap for
                      SIM.
                }
        """

    @overload
    def retrieve(
        self, body: JSON, *, apc_gateway_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.SimSwapRetrievalResult:
        """Provides timestamp of latest SIM swap.

        :param body: Required.
        :type body: JSON
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: SimSwapRetrievalResult. The SimSwapRetrievalResult is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.SimSwapRetrievalResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "date": "2020-02-20 00:00:00"  # Optional. Datetime of most recent swap for
                      SIM.
                }
        """

    @overload
    def retrieve(
        self, body: IO[bytes], *, apc_gateway_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.SimSwapRetrievalResult:
        """Provides timestamp of latest SIM swap.

        :param body: Required.
        :type body: IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: SimSwapRetrievalResult. The SimSwapRetrievalResult is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.SimSwapRetrievalResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "date": "2020-02-20 00:00:00"  # Optional. Datetime of most recent swap for
                      SIM.
                }
        """

    @distributed_trace
    def retrieve(
        self, body: Union[_models.SimSwapRetrievalContent, JSON, IO[bytes]], *, apc_gateway_id: str, **kwargs: Any
    ) -> _models.SimSwapRetrievalResult:
        # pylint: disable=line-too-long
        """Provides timestamp of latest SIM swap.

        :param body: Is one of the following types: SimSwapRetrievalContent, JSON, IO[bytes] Required.
        :type body: ~azure.programmableconnectivity.models.SimSwapRetrievalContent or JSON or IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :return: SimSwapRetrievalResult. The SimSwapRetrievalResult is compatible with MutableMapping
        :rtype: ~azure.programmableconnectivity.models.SimSwapRetrievalResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "networkIdentifier": {
                        "identifier": "str",  # The network identifier, based on the
                          identifierType: an IPv4 address, and IPv6 address, or a Network Code. A
                          Network Code may be obtained from APC documentation or from the APC
                          /Network:retrieve endpoint. Required.
                        "identifierType": "str"  # The type of identifier for the network.
                          one of: 'IPv4', 'IPv6', 'NetworkCode'. Required.
                    },
                    "phoneNumber": "str"  # Optional. Phone number in E.164 format (starting with
                      country code), and optionally prefixed with '+'.
                }

                # response body for status code(s): 200
                response == {
                    "date": "2020-02-20 00:00:00"  # Optional. Datetime of most recent swap for
                      SIM.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SimSwapRetrievalResult] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_sim_swap_retrieve_request(
            apc_gateway_id=apc_gateway_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )
        response_headers["x-ms-request-id"] = self._deserialize("str", response.headers.get("x-ms-request-id"))

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.SimSwapRetrievalResult, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    def verify(
        self,
        body: _models.SimSwapVerificationContent,
        *,
        apc_gateway_id: str,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.SimSwapVerificationResult:
        # pylint: disable=line-too-long
        """Verifies if a SIM swap has been performed during a past period (defined in the request with
        'maxAgeHours' attribute). Returns 'True' if a SIM swap has occured.

        :param body: Required.
        :type body: ~azure.programmableconnectivity.models.SimSwapVerificationContent
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: SimSwapVerificationResult. The SimSwapVerificationResult is compatible with
         MutableMapping
        :rtype: ~azure.programmableconnectivity.models.SimSwapVerificationResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "networkIdentifier": {
                        "identifier": "str",  # The network identifier, based on the
                          identifierType: an IPv4 address, and IPv6 address, or a Network Code. A
                          Network Code may be obtained from APC documentation or from the APC
                          /Network:retrieve endpoint. Required.
                        "identifierType": "str"  # The type of identifier for the network.
                          one of: 'IPv4', 'IPv6', 'NetworkCode'. Required.
                    },
                    "maxAgeHours": 0,  # Optional. Maximum lookback for SimSwap verification.
                    "phoneNumber": "str"  # Optional. Phone number in E.164 format (starting with
                      country code), and optionally prefixed with '+'.
                }

                # response body for status code(s): 200
                response == {
                    "verificationResult": bool  # True if the SIM has swapped in the specified
                      period, False otherwise. Required.
                }
        """

    @overload
    def verify(
        self, body: JSON, *, apc_gateway_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.SimSwapVerificationResult:
        """Verifies if a SIM swap has been performed during a past period (defined in the request with
        'maxAgeHours' attribute). Returns 'True' if a SIM swap has occured.

        :param body: Required.
        :type body: JSON
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: SimSwapVerificationResult. The SimSwapVerificationResult is compatible with
         MutableMapping
        :rtype: ~azure.programmableconnectivity.models.SimSwapVerificationResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "verificationResult": bool  # True if the SIM has swapped in the specified
                      period, False otherwise. Required.
                }
        """

    @overload
    def verify(
        self, body: IO[bytes], *, apc_gateway_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> _models.SimSwapVerificationResult:
        """Verifies if a SIM swap has been performed during a past period (defined in the request with
        'maxAgeHours' attribute). Returns 'True' if a SIM swap has occured.

        :param body: Required.
        :type body: IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: SimSwapVerificationResult. The SimSwapVerificationResult is compatible with
         MutableMapping
        :rtype: ~azure.programmableconnectivity.models.SimSwapVerificationResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "verificationResult": bool  # True if the SIM has swapped in the specified
                      period, False otherwise. Required.
                }
        """

    @distributed_trace
    def verify(
        self, body: Union[_models.SimSwapVerificationContent, JSON, IO[bytes]], *, apc_gateway_id: str, **kwargs: Any
    ) -> _models.SimSwapVerificationResult:
        # pylint: disable=line-too-long
        """Verifies if a SIM swap has been performed during a past period (defined in the request with
        'maxAgeHours' attribute). Returns 'True' if a SIM swap has occured.

        :param body: Is one of the following types: SimSwapVerificationContent, JSON, IO[bytes]
         Required.
        :type body: ~azure.programmableconnectivity.models.SimSwapVerificationContent or JSON or
         IO[bytes]
        :keyword apc_gateway_id: The identifier of the APC Gateway resource which should handle this
         request. Required.
        :paramtype apc_gateway_id: str
        :return: SimSwapVerificationResult. The SimSwapVerificationResult is compatible with
         MutableMapping
        :rtype: ~azure.programmableconnectivity.models.SimSwapVerificationResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "networkIdentifier": {
                        "identifier": "str",  # The network identifier, based on the
                          identifierType: an IPv4 address, and IPv6 address, or a Network Code. A
                          Network Code may be obtained from APC documentation or from the APC
                          /Network:retrieve endpoint. Required.
                        "identifierType": "str"  # The type of identifier for the network.
                          one of: 'IPv4', 'IPv6', 'NetworkCode'. Required.
                    },
                    "maxAgeHours": 0,  # Optional. Maximum lookback for SimSwap verification.
                    "phoneNumber": "str"  # Optional. Phone number in E.164 format (starting with
                      country code), and optionally prefixed with '+'.
                }

                # response body for status code(s): 200
                response == {
                    "verificationResult": bool  # True if the SIM has swapped in the specified
                      period, False otherwise. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.SimSwapVerificationResult] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_sim_swap_verify_request(
            apc_gateway_id=apc_gateway_id,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )
        response_headers["x-ms-request-id"] = self._deserialize("str", response.headers.get("x-ms-request-id"))

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.SimSwapVerificationResult, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore
