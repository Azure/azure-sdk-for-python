# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class ActionType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs."""

    INTERNAL = "Internal"


class AddonPhase(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Observed phase of the addon on the target cluster. Possible values include: 'pending',
    'provisioning', 'provisioning {HelmChartInstalled}', 'provisioning {MSICertificateDownloaded}',
    'provisioned', 'deleting', 'failed', 'upgrading'.
    """

    PENDING = "pending"
    PROVISIONING = "provisioning"
    PROVISIONING_HELM_CHART_INSTALLED_ = "provisioning {HelmChartInstalled}"
    PROVISIONING_MSI_CERTIFICATE_DOWNLOADED_ = "provisioning {MSICertificateDownloaded}"
    PROVISIONED = "provisioned"
    DELETING = "deleting"
    FAILED = "failed"
    UPGRADING = "upgrading"


class AzureHybridBenefit(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Indicates whether Azure Hybrid Benefit is opted in."""

    TRUE = "True"
    FALSE = "False"
    NOT_APPLICABLE = "NotApplicable"


class CreatedByType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of identity that created the resource."""

    USER = "User"
    APPLICATION = "Application"
    MANAGED_IDENTITY = "ManagedIdentity"
    KEY = "Key"


class ExtendedLocationTypes(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The extended location type."""

    CUSTOM_LOCATION = "CustomLocation"


class NetworkPolicy(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """NetworkPolicy - Network policy used for building Kubernetes network. Possible values include:
    'calico', 'flannel'. Default is 'calico'.
    """

    CALICO = "calico"
    FLANNEL = "flannel"


class Origin(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
    logs UX. Default value is "user,system".
    """

    USER = "user"
    SYSTEM = "system"
    USER_SYSTEM = "user,system"


class OSSKU(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType is Linux. The
    default is Windows2019 when OSType is Windows.
    """

    CBL_MARINER = "CBLMariner"
    """Use Mariner as the OS for node images."""
    WINDOWS2019 = "Windows2019"
    """Use Windows2019 as the OS for node images."""
    WINDOWS2022 = "Windows2022"
    """Use Windows2022 as the OS for node images."""


class OsType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The particular KubernetesVersion's Image's OS Type (Linux, Windows)."""

    WINDOWS = "Windows"
    LINUX = "Linux"


class ProvisioningState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """ProvisioningState."""

    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    CANCELED = "Canceled"
    IN_PROGRESS = "InProgress"
    DELETING = "Deleting"
    UPDATING = "Updating"
    ACCEPTED = "Accepted"
    CREATED = "Created"


class ResourceProvisioningState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Provisioning state of the resource."""

    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    CANCELED = "Canceled"
    CREATING = "Creating"
    DELETING = "Deleting"
    UPDATING = "Updating"
    UPGRADING = "Upgrading"
    IN_PROGRESS = "InProgress"
    ACCEPTED = "Accepted"
    CREATED = "Created"
