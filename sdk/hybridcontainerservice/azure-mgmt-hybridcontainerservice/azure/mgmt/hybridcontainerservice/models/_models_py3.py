# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .. import _serialization

if sys.version_info >= (3, 8):
    from typing import Literal  # pylint: disable=no-name-in-module, ungrouped-imports
else:
    from typing_extensions import Literal  # type: ignore  # pylint: disable=ungrouped-imports

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class AddonStatusProfile(_serialization.Model):
    """Defines the addon status profile.

    :ivar name: Name of the addon.
    :vartype name: str
    :ivar phase: Observed phase of the addon on the target cluster. Possible values include:
     'pending', 'provisioning', 'provisioning {HelmChartInstalled}', 'provisioning
     {MSICertificateDownloaded}', 'provisioned', 'deleting', 'failed', 'upgrading'. Known values
     are: "pending", "provisioning", "provisioning {HelmChartInstalled}", "provisioning
     {MSICertificateDownloaded}", "provisioned", "deleting", "failed", and "upgrading".
    :vartype phase: str or ~azure.mgmt.hybridcontainerservice.models.AddonPhase
    :ivar ready: Indicates whether the addon is ready.
    :vartype ready: bool
    :ivar error_message: Error message while deploying the addon.
    :vartype error_message: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "phase": {"key": "phase", "type": "str"},
        "ready": {"key": "ready", "type": "bool"},
        "error_message": {"key": "errorMessage", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        phase: Optional[Union[str, "_models.AddonPhase"]] = None,
        ready: Optional[bool] = None,
        error_message: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: Name of the addon.
        :paramtype name: str
        :keyword phase: Observed phase of the addon on the target cluster. Possible values include:
         'pending', 'provisioning', 'provisioning {HelmChartInstalled}', 'provisioning
         {MSICertificateDownloaded}', 'provisioned', 'deleting', 'failed', 'upgrading'. Known values
         are: "pending", "provisioning", "provisioning {HelmChartInstalled}", "provisioning
         {MSICertificateDownloaded}", "provisioned", "deleting", "failed", and "upgrading".
        :paramtype phase: str or ~azure.mgmt.hybridcontainerservice.models.AddonPhase
        :keyword ready: Indicates whether the addon is ready.
        :paramtype ready: bool
        :keyword error_message: Error message while deploying the addon.
        :paramtype error_message: str
        """
        super().__init__(**kwargs)
        self.name = name
        self.phase = phase
        self.ready = ready
        self.error_message = error_message


class AgentPool(_serialization.Model):  # pylint: disable=too-many-instance-attributes
    """The agentPool resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Resource Name.
    :vartype name: str
    :ivar type: Resource Type.
    :vartype type: str
    :ivar location: The resource location.
    :vartype location: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.hybridcontainerservice.models.SystemData
    :ivar extended_location: Extended Location definition.
    :vartype extended_location: ~azure.mgmt.hybridcontainerservice.models.ExtendedLocation
    :ivar availability_zones: AvailabilityZones - The list of Availability zones to use for nodes.
     Datacenter racks modelled as zones.
    :vartype availability_zones: list[str]
    :ivar os_type: The particular KubernetesVersion's Image's OS Type (Linux, Windows). Known
     values are: "Windows" and "Linux".
    :vartype os_type: str or ~azure.mgmt.hybridcontainerservice.models.OsType
    :ivar os_sku: Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType
     is Linux. The default is Windows2019 when OSType is Windows. Known values are: "CBLMariner",
     "Windows2019", and "Windows2022".
    :vartype os_sku: str or ~azure.mgmt.hybridcontainerservice.models.OSSKU
    :ivar node_image_version: The version of node image.
    :vartype node_image_version: str
    :ivar count: Count - Number of agents to host docker containers. Allowed values must be in the
     range of 1 to 100 (inclusive). The default value is 1.
    :vartype count: int
    :ivar vm_size: VmSize - The size of the agent pool VMs.
    :vartype vm_size: str
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Succeeded",
     "Failed", "Canceled", "Creating", "Deleting", "Updating", "Upgrading", "InProgress",
     "Accepted", and "Created".
    :vartype provisioning_state: str or
     ~azure.mgmt.hybridcontainerservice.models.ResourceProvisioningState
    :ivar status: Defines the observed state of the agent pool.
    :vartype status: ~azure.mgmt.hybridcontainerservice.models.AgentPoolProvisioningStatusStatus
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "location": {"key": "location", "type": "str"},
        "tags": {"key": "tags", "type": "{str}"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "extended_location": {"key": "extendedLocation", "type": "ExtendedLocation"},
        "availability_zones": {"key": "properties.availabilityZones", "type": "[str]"},
        "os_type": {"key": "properties.osType", "type": "str"},
        "os_sku": {"key": "properties.osSKU", "type": "str"},
        "node_image_version": {"key": "properties.nodeImageVersion", "type": "str"},
        "count": {"key": "properties.count", "type": "int"},
        "vm_size": {"key": "properties.vmSize", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "status": {"key": "properties.status", "type": "AgentPoolProvisioningStatusStatus"},
    }

    def __init__(
        self,
        *,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
        availability_zones: Optional[List[str]] = None,
        os_type: Optional[Union[str, "_models.OsType"]] = None,
        os_sku: Optional[Union[str, "_models.OSSKU"]] = None,
        node_image_version: Optional[str] = None,
        count: int = 1,
        vm_size: Optional[str] = None,
        status: Optional["_models.AgentPoolProvisioningStatusStatus"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword location: The resource location.
        :paramtype location: str
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword extended_location: Extended Location definition.
        :paramtype extended_location: ~azure.mgmt.hybridcontainerservice.models.ExtendedLocation
        :keyword availability_zones: AvailabilityZones - The list of Availability zones to use for
         nodes. Datacenter racks modelled as zones.
        :paramtype availability_zones: list[str]
        :keyword os_type: The particular KubernetesVersion's Image's OS Type (Linux, Windows). Known
         values are: "Windows" and "Linux".
        :paramtype os_type: str or ~azure.mgmt.hybridcontainerservice.models.OsType
        :keyword os_sku: Specifies the OS SKU used by the agent pool. The default is CBLMariner if
         OSType is Linux. The default is Windows2019 when OSType is Windows. Known values are:
         "CBLMariner", "Windows2019", and "Windows2022".
        :paramtype os_sku: str or ~azure.mgmt.hybridcontainerservice.models.OSSKU
        :keyword node_image_version: The version of node image.
        :paramtype node_image_version: str
        :keyword count: Count - Number of agents to host docker containers. Allowed values must be in
         the range of 1 to 100 (inclusive). The default value is 1.
        :paramtype count: int
        :keyword vm_size: VmSize - The size of the agent pool VMs.
        :paramtype vm_size: str
        :keyword status: Defines the observed state of the agent pool.
        :paramtype status: ~azure.mgmt.hybridcontainerservice.models.AgentPoolProvisioningStatusStatus
        """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.location = location
        self.tags = tags
        self.system_data = None
        self.extended_location = extended_location
        self.availability_zones = availability_zones
        self.os_type = os_type
        self.os_sku = os_sku
        self.node_image_version = node_image_version
        self.count = count
        self.vm_size = vm_size
        self.provisioning_state = None
        self.status = status


class AgentPoolListResult(_serialization.Model):
    """A list of agent pool resources.

    :ivar value:
    :vartype value: list[~azure.mgmt.hybridcontainerservice.models.AgentPool]
    :ivar next_link:
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[AgentPool]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: Optional[List["_models.AgentPool"]] = None, next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value:
        :paramtype value: list[~azure.mgmt.hybridcontainerservice.models.AgentPool]
        :keyword next_link:
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class AgentPoolName(_serialization.Model):
    """AgentPool Name.

    :ivar name: Unique name of the agent pool profile in the context of the subscription and
     resource group.
    :vartype name: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, name: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword name: Unique name of the agent pool profile in the context of the subscription and
         resource group.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.name = name


class AgentPoolPatch(_serialization.Model):
    """The agentPool resource patch definition.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
    }

    def __init__(self, *, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.tags = tags


class AgentPoolProfile(_serialization.Model):
    """AgentPool configuration.

    :ivar availability_zones: AvailabilityZones - The list of Availability zones to use for nodes.
     Datacenter racks modelled as zones.
    :vartype availability_zones: list[str]
    :ivar os_type: The particular KubernetesVersion's Image's OS Type (Linux, Windows). Known
     values are: "Windows" and "Linux".
    :vartype os_type: str or ~azure.mgmt.hybridcontainerservice.models.OsType
    :ivar os_sku: Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType
     is Linux. The default is Windows2019 when OSType is Windows. Known values are: "CBLMariner",
     "Windows2019", and "Windows2022".
    :vartype os_sku: str or ~azure.mgmt.hybridcontainerservice.models.OSSKU
    :ivar node_image_version: The version of node image.
    :vartype node_image_version: str
    """

    _attribute_map = {
        "availability_zones": {"key": "availabilityZones", "type": "[str]"},
        "os_type": {"key": "osType", "type": "str"},
        "os_sku": {"key": "osSKU", "type": "str"},
        "node_image_version": {"key": "nodeImageVersion", "type": "str"},
    }

    def __init__(
        self,
        *,
        availability_zones: Optional[List[str]] = None,
        os_type: Optional[Union[str, "_models.OsType"]] = None,
        os_sku: Optional[Union[str, "_models.OSSKU"]] = None,
        node_image_version: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword availability_zones: AvailabilityZones - The list of Availability zones to use for
         nodes. Datacenter racks modelled as zones.
        :paramtype availability_zones: list[str]
        :keyword os_type: The particular KubernetesVersion's Image's OS Type (Linux, Windows). Known
         values are: "Windows" and "Linux".
        :paramtype os_type: str or ~azure.mgmt.hybridcontainerservice.models.OsType
        :keyword os_sku: Specifies the OS SKU used by the agent pool. The default is CBLMariner if
         OSType is Linux. The default is Windows2019 when OSType is Windows. Known values are:
         "CBLMariner", "Windows2019", and "Windows2022".
        :paramtype os_sku: str or ~azure.mgmt.hybridcontainerservice.models.OSSKU
        :keyword node_image_version: The version of node image.
        :paramtype node_image_version: str
        """
        super().__init__(**kwargs)
        self.availability_zones = availability_zones
        self.os_type = os_type
        self.os_sku = os_sku
        self.node_image_version = node_image_version


class AgentPoolProvisioningStatus(_serialization.Model):
    """The agentPool resource provisioning status definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Succeeded",
     "Failed", "Canceled", "Creating", "Deleting", "Updating", "Upgrading", "InProgress",
     "Accepted", and "Created".
    :vartype provisioning_state: str or
     ~azure.mgmt.hybridcontainerservice.models.ResourceProvisioningState
    :ivar status: Defines the observed state of the agent pool.
    :vartype status: ~azure.mgmt.hybridcontainerservice.models.AgentPoolProvisioningStatusStatus
    """

    _validation = {
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "status": {"key": "status", "type": "AgentPoolProvisioningStatusStatus"},
    }

    def __init__(self, *, status: Optional["_models.AgentPoolProvisioningStatusStatus"] = None, **kwargs: Any) -> None:
        """
        :keyword status: Defines the observed state of the agent pool.
        :paramtype status: ~azure.mgmt.hybridcontainerservice.models.AgentPoolProvisioningStatusStatus
        """
        super().__init__(**kwargs)
        self.provisioning_state = None
        self.status = status


class AgentPoolUpdateProfile(_serialization.Model):
    """AgentPool update configuration.

    :ivar count: Count - Number of agents to host docker containers. Allowed values must be in the
     range of 1 to 100 (inclusive). The default value is 1.
    :vartype count: int
    :ivar vm_size: VmSize - The size of the agent pool VMs.
    :vartype vm_size: str
    """

    _attribute_map = {
        "count": {"key": "count", "type": "int"},
        "vm_size": {"key": "vmSize", "type": "str"},
    }

    def __init__(self, *, count: int = 1, vm_size: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword count: Count - Number of agents to host docker containers. Allowed values must be in
         the range of 1 to 100 (inclusive). The default value is 1.
        :paramtype count: int
        :keyword vm_size: VmSize - The size of the agent pool VMs.
        :paramtype vm_size: str
        """
        super().__init__(**kwargs)
        self.count = count
        self.vm_size = vm_size


class AgentPoolProperties(AgentPoolProfile, AgentPoolUpdateProfile, AgentPoolProvisioningStatus):
    """AgentPoolProperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Succeeded",
     "Failed", "Canceled", "Creating", "Deleting", "Updating", "Upgrading", "InProgress",
     "Accepted", and "Created".
    :vartype provisioning_state: str or
     ~azure.mgmt.hybridcontainerservice.models.ResourceProvisioningState
    :ivar status: Defines the observed state of the agent pool.
    :vartype status: ~azure.mgmt.hybridcontainerservice.models.AgentPoolProvisioningStatusStatus
    :ivar count: Count - Number of agents to host docker containers. Allowed values must be in the
     range of 1 to 100 (inclusive). The default value is 1.
    :vartype count: int
    :ivar vm_size: VmSize - The size of the agent pool VMs.
    :vartype vm_size: str
    :ivar availability_zones: AvailabilityZones - The list of Availability zones to use for nodes.
     Datacenter racks modelled as zones.
    :vartype availability_zones: list[str]
    :ivar os_type: The particular KubernetesVersion's Image's OS Type (Linux, Windows). Known
     values are: "Windows" and "Linux".
    :vartype os_type: str or ~azure.mgmt.hybridcontainerservice.models.OsType
    :ivar os_sku: Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType
     is Linux. The default is Windows2019 when OSType is Windows. Known values are: "CBLMariner",
     "Windows2019", and "Windows2022".
    :vartype os_sku: str or ~azure.mgmt.hybridcontainerservice.models.OSSKU
    :ivar node_image_version: The version of node image.
    :vartype node_image_version: str
    """

    _validation = {
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "status": {"key": "status", "type": "AgentPoolProvisioningStatusStatus"},
        "count": {"key": "count", "type": "int"},
        "vm_size": {"key": "vmSize", "type": "str"},
        "availability_zones": {"key": "availabilityZones", "type": "[str]"},
        "os_type": {"key": "osType", "type": "str"},
        "os_sku": {"key": "osSKU", "type": "str"},
        "node_image_version": {"key": "nodeImageVersion", "type": "str"},
    }

    def __init__(
        self,
        *,
        status: Optional["_models.AgentPoolProvisioningStatusStatus"] = None,
        count: int = 1,
        vm_size: Optional[str] = None,
        availability_zones: Optional[List[str]] = None,
        os_type: Optional[Union[str, "_models.OsType"]] = None,
        os_sku: Optional[Union[str, "_models.OSSKU"]] = None,
        node_image_version: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword status: Defines the observed state of the agent pool.
        :paramtype status: ~azure.mgmt.hybridcontainerservice.models.AgentPoolProvisioningStatusStatus
        :keyword count: Count - Number of agents to host docker containers. Allowed values must be in
         the range of 1 to 100 (inclusive). The default value is 1.
        :paramtype count: int
        :keyword vm_size: VmSize - The size of the agent pool VMs.
        :paramtype vm_size: str
        :keyword availability_zones: AvailabilityZones - The list of Availability zones to use for
         nodes. Datacenter racks modelled as zones.
        :paramtype availability_zones: list[str]
        :keyword os_type: The particular KubernetesVersion's Image's OS Type (Linux, Windows). Known
         values are: "Windows" and "Linux".
        :paramtype os_type: str or ~azure.mgmt.hybridcontainerservice.models.OsType
        :keyword os_sku: Specifies the OS SKU used by the agent pool. The default is CBLMariner if
         OSType is Linux. The default is Windows2019 when OSType is Windows. Known values are:
         "CBLMariner", "Windows2019", and "Windows2022".
        :paramtype os_sku: str or ~azure.mgmt.hybridcontainerservice.models.OSSKU
        :keyword node_image_version: The version of node image.
        :paramtype node_image_version: str
        """
        super().__init__(
            availability_zones=availability_zones,
            os_type=os_type,
            os_sku=os_sku,
            node_image_version=node_image_version,
            count=count,
            vm_size=vm_size,
            status=status,
            **kwargs
        )
        self.provisioning_state = None
        self.status = status
        self.count = count
        self.vm_size = vm_size
        self.availability_zones = availability_zones
        self.os_type = os_type
        self.os_sku = os_sku
        self.node_image_version = node_image_version


class AgentPoolProvisioningStatusOperationStatus(_serialization.Model):
    """Contains Provisioning errors.

    :ivar error:
    :vartype error:
     ~azure.mgmt.hybridcontainerservice.models.AgentPoolProvisioningStatusOperationStatusError
    :ivar operation_id:
    :vartype operation_id: str
    :ivar status:
    :vartype status: str
    """

    _attribute_map = {
        "error": {"key": "error", "type": "AgentPoolProvisioningStatusOperationStatusError"},
        "operation_id": {"key": "operationId", "type": "str"},
        "status": {"key": "status", "type": "str"},
    }

    def __init__(
        self,
        *,
        error: Optional["_models.AgentPoolProvisioningStatusOperationStatusError"] = None,
        operation_id: Optional[str] = None,
        status: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword error:
        :paramtype error:
         ~azure.mgmt.hybridcontainerservice.models.AgentPoolProvisioningStatusOperationStatusError
        :keyword operation_id:
        :paramtype operation_id: str
        :keyword status:
        :paramtype status: str
        """
        super().__init__(**kwargs)
        self.error = error
        self.operation_id = operation_id
        self.status = status


class AgentPoolProvisioningStatusOperationStatusError(_serialization.Model):
    """AgentPoolProvisioningStatusOperationStatusError.

    :ivar code:
    :vartype code: str
    :ivar message:
    :vartype message: str
    """

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
    }

    def __init__(self, *, code: Optional[str] = None, message: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword code:
        :paramtype code: str
        :keyword message:
        :paramtype message: str
        """
        super().__init__(**kwargs)
        self.code = code
        self.message = message


class AgentPoolProvisioningStatusStatus(_serialization.Model):
    """Defines the observed state of the agent pool.

    :ivar error_message: ErrorMessage - Error messages during creation of agent pool.
    :vartype error_message: str
    :ivar operation_status: Contains Provisioning errors.
    :vartype operation_status:
     ~azure.mgmt.hybridcontainerservice.models.AgentPoolProvisioningStatusOperationStatus
    :ivar ready_replicas:
    :vartype ready_replicas: list[~azure.mgmt.hybridcontainerservice.models.AgentPoolUpdateProfile]
    """

    _attribute_map = {
        "error_message": {"key": "errorMessage", "type": "str"},
        "operation_status": {"key": "operationStatus", "type": "AgentPoolProvisioningStatusOperationStatus"},
        "ready_replicas": {"key": "readyReplicas", "type": "[AgentPoolUpdateProfile]"},
    }

    def __init__(
        self,
        *,
        error_message: Optional[str] = None,
        operation_status: Optional["_models.AgentPoolProvisioningStatusOperationStatus"] = None,
        ready_replicas: Optional[List["_models.AgentPoolUpdateProfile"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword error_message: ErrorMessage - Error messages during creation of agent pool.
        :paramtype error_message: str
        :keyword operation_status: Contains Provisioning errors.
        :paramtype operation_status:
         ~azure.mgmt.hybridcontainerservice.models.AgentPoolProvisioningStatusOperationStatus
        :keyword ready_replicas:
        :paramtype ready_replicas:
         list[~azure.mgmt.hybridcontainerservice.models.AgentPoolUpdateProfile]
        """
        super().__init__(**kwargs)
        self.error_message = error_message
        self.operation_status = operation_status
        self.ready_replicas = ready_replicas


class CloudProviderProfile(_serialization.Model):
    """CloudProviderProfile - The underlying cloud infra provider properties.

    :ivar infra_network_profile: InfraNetworkProfile - List of infra network profiles for the
     provisioned cluster.
    :vartype infra_network_profile:
     ~azure.mgmt.hybridcontainerservice.models.CloudProviderProfileInfraNetworkProfile
    """

    _attribute_map = {
        "infra_network_profile": {"key": "infraNetworkProfile", "type": "CloudProviderProfileInfraNetworkProfile"},
    }

    def __init__(
        self,
        *,
        infra_network_profile: Optional["_models.CloudProviderProfileInfraNetworkProfile"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword infra_network_profile: InfraNetworkProfile - List of infra network profiles for the
         provisioned cluster.
        :paramtype infra_network_profile:
         ~azure.mgmt.hybridcontainerservice.models.CloudProviderProfileInfraNetworkProfile
        """
        super().__init__(**kwargs)
        self.infra_network_profile = infra_network_profile


class CloudProviderProfileInfraNetworkProfile(_serialization.Model):
    """InfraNetworkProfile - List of infra network profiles for the provisioned cluster.

    :ivar vnet_subnet_ids: Array of references to azure resource corresponding to the Network
     object e.g.
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/logicalNetworks/{logicalNetworkName}.
    :vartype vnet_subnet_ids: list[str]
    """

    _attribute_map = {
        "vnet_subnet_ids": {"key": "vnetSubnetIds", "type": "[str]"},
    }

    def __init__(self, *, vnet_subnet_ids: Optional[List[str]] = None, **kwargs: Any) -> None:
        """
        :keyword vnet_subnet_ids: Array of references to azure resource corresponding to the Network
         object e.g.
         /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/logicalNetworks/{logicalNetworkName}.
        :paramtype vnet_subnet_ids: list[str]
        """
        super().__init__(**kwargs)
        self.vnet_subnet_ids = vnet_subnet_ids


class ControlPlaneEndpointProfile(_serialization.Model):
    """controlPlaneEndpoint - API server endpoint for the control plane.

    :ivar control_plane_endpoint: API server endpoint for the control plane.
    :vartype control_plane_endpoint:
     ~azure.mgmt.hybridcontainerservice.models.ControlPlaneEndpointProfileControlPlaneEndpoint
    """

    _attribute_map = {
        "control_plane_endpoint": {
            "key": "controlPlaneEndpoint",
            "type": "ControlPlaneEndpointProfileControlPlaneEndpoint",
        },
    }

    def __init__(
        self,
        *,
        control_plane_endpoint: Optional["_models.ControlPlaneEndpointProfileControlPlaneEndpoint"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword control_plane_endpoint: API server endpoint for the control plane.
        :paramtype control_plane_endpoint:
         ~azure.mgmt.hybridcontainerservice.models.ControlPlaneEndpointProfileControlPlaneEndpoint
        """
        super().__init__(**kwargs)
        self.control_plane_endpoint = control_plane_endpoint


class ControlPlaneEndpointProfileControlPlaneEndpoint(_serialization.Model):
    """API server endpoint for the control plane.

    :ivar host_ip: Host IP address for API server.
    :vartype host_ip: str
    :ivar port: Port for the API server.
    :vartype port: int
    """

    _attribute_map = {
        "host_ip": {"key": "hostIP", "type": "str"},
        "port": {"key": "port", "type": "int"},
    }

    def __init__(self, *, host_ip: Optional[str] = None, port: Optional[int] = None, **kwargs: Any) -> None:
        """
        :keyword host_ip: Host IP address for API server.
        :paramtype host_ip: str
        :keyword port: Port for the API server.
        :paramtype port: int
        """
        super().__init__(**kwargs)
        self.host_ip = host_ip
        self.port = port


class LinuxProfile(_serialization.Model):
    """LinuxProfile - Profile for Linux VMs in the container service cluster.

    :ivar linux_profile: Profile for Linux VMs in the container service cluster.
    :vartype linux_profile: ~azure.mgmt.hybridcontainerservice.models.LinuxProfileProperties
    """

    _attribute_map = {
        "linux_profile": {"key": "linuxProfile", "type": "LinuxProfileProperties"},
    }

    def __init__(self, *, linux_profile: Optional["_models.LinuxProfileProperties"] = None, **kwargs: Any) -> None:
        """
        :keyword linux_profile: Profile for Linux VMs in the container service cluster.
        :paramtype linux_profile: ~azure.mgmt.hybridcontainerservice.models.LinuxProfileProperties
        """
        super().__init__(**kwargs)
        self.linux_profile = linux_profile


class NamedAgentPoolProfile(AgentPoolProfile, AgentPoolUpdateProfile, AgentPoolName):
    """Agent pool profile along with a name parameter.

    :ivar name: Unique name of the agent pool profile in the context of the subscription and
     resource group.
    :vartype name: str
    :ivar count: Count - Number of agents to host docker containers. Allowed values must be in the
     range of 1 to 100 (inclusive). The default value is 1.
    :vartype count: int
    :ivar vm_size: VmSize - The size of the agent pool VMs.
    :vartype vm_size: str
    :ivar availability_zones: AvailabilityZones - The list of Availability zones to use for nodes.
     Datacenter racks modelled as zones.
    :vartype availability_zones: list[str]
    :ivar os_type: The particular KubernetesVersion's Image's OS Type (Linux, Windows). Known
     values are: "Windows" and "Linux".
    :vartype os_type: str or ~azure.mgmt.hybridcontainerservice.models.OsType
    :ivar os_sku: Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType
     is Linux. The default is Windows2019 when OSType is Windows. Known values are: "CBLMariner",
     "Windows2019", and "Windows2022".
    :vartype os_sku: str or ~azure.mgmt.hybridcontainerservice.models.OSSKU
    :ivar node_image_version: The version of node image.
    :vartype node_image_version: str
    """

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "count": {"key": "count", "type": "int"},
        "vm_size": {"key": "vmSize", "type": "str"},
        "availability_zones": {"key": "availabilityZones", "type": "[str]"},
        "os_type": {"key": "osType", "type": "str"},
        "os_sku": {"key": "osSKU", "type": "str"},
        "node_image_version": {"key": "nodeImageVersion", "type": "str"},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        count: int = 1,
        vm_size: Optional[str] = None,
        availability_zones: Optional[List[str]] = None,
        os_type: Optional[Union[str, "_models.OsType"]] = None,
        os_sku: Optional[Union[str, "_models.OSSKU"]] = None,
        node_image_version: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: Unique name of the agent pool profile in the context of the subscription and
         resource group.
        :paramtype name: str
        :keyword count: Count - Number of agents to host docker containers. Allowed values must be in
         the range of 1 to 100 (inclusive). The default value is 1.
        :paramtype count: int
        :keyword vm_size: VmSize - The size of the agent pool VMs.
        :paramtype vm_size: str
        :keyword availability_zones: AvailabilityZones - The list of Availability zones to use for
         nodes. Datacenter racks modelled as zones.
        :paramtype availability_zones: list[str]
        :keyword os_type: The particular KubernetesVersion's Image's OS Type (Linux, Windows). Known
         values are: "Windows" and "Linux".
        :paramtype os_type: str or ~azure.mgmt.hybridcontainerservice.models.OsType
        :keyword os_sku: Specifies the OS SKU used by the agent pool. The default is CBLMariner if
         OSType is Linux. The default is Windows2019 when OSType is Windows. Known values are:
         "CBLMariner", "Windows2019", and "Windows2022".
        :paramtype os_sku: str or ~azure.mgmt.hybridcontainerservice.models.OSSKU
        :keyword node_image_version: The version of node image.
        :paramtype node_image_version: str
        """
        super().__init__(
            availability_zones=availability_zones,
            os_type=os_type,
            os_sku=os_sku,
            node_image_version=node_image_version,
            count=count,
            vm_size=vm_size,
            name=name,
            **kwargs
        )
        self.name = name
        self.count = count
        self.vm_size = vm_size
        self.availability_zones = availability_zones
        self.os_type = os_type
        self.os_sku = os_sku
        self.node_image_version = node_image_version


class ControlPlaneProfile(NamedAgentPoolProfile, ControlPlaneEndpointProfile, LinuxProfile):
    """ControlPlaneProfile - The control plane properties for the provisioned cluster.

    :ivar linux_profile: Profile for Linux VMs in the container service cluster.
    :vartype linux_profile: ~azure.mgmt.hybridcontainerservice.models.LinuxProfileProperties
    :ivar control_plane_endpoint: API server endpoint for the control plane.
    :vartype control_plane_endpoint:
     ~azure.mgmt.hybridcontainerservice.models.ControlPlaneEndpointProfileControlPlaneEndpoint
    :ivar name: Unique name of the agent pool profile in the context of the subscription and
     resource group.
    :vartype name: str
    :ivar count: Count - Number of agents to host docker containers. Allowed values must be in the
     range of 1 to 100 (inclusive). The default value is 1.
    :vartype count: int
    :ivar vm_size: VmSize - The size of the agent pool VMs.
    :vartype vm_size: str
    :ivar availability_zones: AvailabilityZones - The list of Availability zones to use for nodes.
     Datacenter racks modelled as zones.
    :vartype availability_zones: list[str]
    :ivar os_type: The particular KubernetesVersion's Image's OS Type (Linux, Windows). Known
     values are: "Windows" and "Linux".
    :vartype os_type: str or ~azure.mgmt.hybridcontainerservice.models.OsType
    :ivar os_sku: Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType
     is Linux. The default is Windows2019 when OSType is Windows. Known values are: "CBLMariner",
     "Windows2019", and "Windows2022".
    :vartype os_sku: str or ~azure.mgmt.hybridcontainerservice.models.OSSKU
    :ivar node_image_version: The version of node image.
    :vartype node_image_version: str
    """

    _attribute_map = {
        "linux_profile": {"key": "linuxProfile", "type": "LinuxProfileProperties"},
        "control_plane_endpoint": {
            "key": "controlPlaneEndpoint",
            "type": "ControlPlaneEndpointProfileControlPlaneEndpoint",
        },
        "name": {"key": "name", "type": "str"},
        "count": {"key": "count", "type": "int"},
        "vm_size": {"key": "vmSize", "type": "str"},
        "availability_zones": {"key": "availabilityZones", "type": "[str]"},
        "os_type": {"key": "osType", "type": "str"},
        "os_sku": {"key": "osSKU", "type": "str"},
        "node_image_version": {"key": "nodeImageVersion", "type": "str"},
    }

    def __init__(
        self,
        *,
        linux_profile: Optional["_models.LinuxProfileProperties"] = None,
        control_plane_endpoint: Optional["_models.ControlPlaneEndpointProfileControlPlaneEndpoint"] = None,
        name: Optional[str] = None,
        count: int = 1,
        vm_size: Optional[str] = None,
        availability_zones: Optional[List[str]] = None,
        os_type: Optional[Union[str, "_models.OsType"]] = None,
        os_sku: Optional[Union[str, "_models.OSSKU"]] = None,
        node_image_version: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword linux_profile: Profile for Linux VMs in the container service cluster.
        :paramtype linux_profile: ~azure.mgmt.hybridcontainerservice.models.LinuxProfileProperties
        :keyword control_plane_endpoint: API server endpoint for the control plane.
        :paramtype control_plane_endpoint:
         ~azure.mgmt.hybridcontainerservice.models.ControlPlaneEndpointProfileControlPlaneEndpoint
        :keyword name: Unique name of the agent pool profile in the context of the subscription and
         resource group.
        :paramtype name: str
        :keyword count: Count - Number of agents to host docker containers. Allowed values must be in
         the range of 1 to 100 (inclusive). The default value is 1.
        :paramtype count: int
        :keyword vm_size: VmSize - The size of the agent pool VMs.
        :paramtype vm_size: str
        :keyword availability_zones: AvailabilityZones - The list of Availability zones to use for
         nodes. Datacenter racks modelled as zones.
        :paramtype availability_zones: list[str]
        :keyword os_type: The particular KubernetesVersion's Image's OS Type (Linux, Windows). Known
         values are: "Windows" and "Linux".
        :paramtype os_type: str or ~azure.mgmt.hybridcontainerservice.models.OsType
        :keyword os_sku: Specifies the OS SKU used by the agent pool. The default is CBLMariner if
         OSType is Linux. The default is Windows2019 when OSType is Windows. Known values are:
         "CBLMariner", "Windows2019", and "Windows2022".
        :paramtype os_sku: str or ~azure.mgmt.hybridcontainerservice.models.OSSKU
        :keyword node_image_version: The version of node image.
        :paramtype node_image_version: str
        """
        super().__init__(
            name=name,
            count=count,
            vm_size=vm_size,
            availability_zones=availability_zones,
            os_type=os_type,
            os_sku=os_sku,
            node_image_version=node_image_version,
            control_plane_endpoint=control_plane_endpoint,
            linux_profile=linux_profile,
            **kwargs
        )
        self.linux_profile = linux_profile
        self.control_plane_endpoint = control_plane_endpoint
        self.name = name
        self.count = count
        self.vm_size = vm_size
        self.availability_zones = availability_zones
        self.os_type = os_type
        self.os_sku = os_sku
        self.node_image_version = node_image_version


class CredentialResult(_serialization.Model):
    """The credential result response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the credential.
    :vartype name: str
    :ivar value: Base64-encoded Kubernetes configuration file.
    :vartype value: bytes
    """

    _validation = {
        "name": {"readonly": True},
        "value": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "value": {"key": "value", "type": "bytearray"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.name = None
        self.value = None


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.hybridcontainerservice.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.hybridcontainerservice.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.hybridcontainerservice.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.hybridcontainerservice.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class ExtendedLocation(_serialization.Model):
    """Extended Location definition.

    :ivar type: The extended location type. "CustomLocation"
    :vartype type: str or ~azure.mgmt.hybridcontainerservice.models.ExtendedLocationTypes
    :ivar name: The extended location name.
    :vartype name: str
    """

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.ExtendedLocationTypes"]] = None,
        name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: The extended location type. "CustomLocation"
        :paramtype type: str or ~azure.mgmt.hybridcontainerservice.models.ExtendedLocationTypes
        :keyword name: The extended location name.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.type = type
        self.name = name


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.hybridcontainerservice.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.system_data = None


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.hybridcontainerservice.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)


class HybridIdentityMetadata(ProxyResource):
    """Defines the hybridIdentityMetadata.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.hybridcontainerservice.models.SystemData
    :ivar resource_uid: Unique id of the parent provisioned cluster resource.
    :vartype resource_uid: str
    :ivar public_key: Onboarding public key for provisioning the Managed identity for the HybridAKS
     cluster.
    :vartype public_key: str
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Succeeded",
     "Failed", "Canceled", "Creating", "Deleting", "Updating", "Upgrading", "InProgress",
     "Accepted", and "Created".
    :vartype provisioning_state: str or
     ~azure.mgmt.hybridcontainerservice.models.ResourceProvisioningState
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "resource_uid": {"key": "properties.resourceUid", "type": "str"},
        "public_key": {"key": "properties.publicKey", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
    }

    def __init__(self, *, resource_uid: Optional[str] = None, public_key: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword resource_uid: Unique id of the parent provisioned cluster resource.
        :paramtype resource_uid: str
        :keyword public_key: Onboarding public key for provisioning the Managed identity for the
         HybridAKS cluster.
        :paramtype public_key: str
        """
        super().__init__(**kwargs)
        self.resource_uid = resource_uid
        self.public_key = public_key
        self.provisioning_state = None


class HybridIdentityMetadataList(_serialization.Model):
    """List of hybridIdentityMetadata.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: Url to follow for getting next page of hybridIdentityMetadata.
    :vartype next_link: str
    :ivar value: Array of hybridIdentityMetadata. Required.
    :vartype value: list[~azure.mgmt.hybridcontainerservice.models.HybridIdentityMetadata]
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "next_link": {"key": "nextLink", "type": "str"},
        "value": {"key": "value", "type": "[HybridIdentityMetadata]"},
    }

    def __init__(
        self, *, value: List["_models.HybridIdentityMetadata"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword next_link: Url to follow for getting next page of hybridIdentityMetadata.
        :paramtype next_link: str
        :keyword value: Array of hybridIdentityMetadata. Required.
        :paramtype value: list[~azure.mgmt.hybridcontainerservice.models.HybridIdentityMetadata]
        """
        super().__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class KubernetesPatchVersions(_serialization.Model):
    """Kubernetes Patch Version profile.

    :ivar readiness: Whether the kubernetes version variant (Linux, Windows, Windows2022) is ready
     or not.
    :vartype readiness: list[~azure.mgmt.hybridcontainerservice.models.KubernetesVersionReadiness]
    :ivar upgrades: Possible upgrade path for given patch version.
    :vartype upgrades: list[str]
    """

    _attribute_map = {
        "readiness": {"key": "readiness", "type": "[KubernetesVersionReadiness]"},
        "upgrades": {"key": "upgrades", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        readiness: Optional[List["_models.KubernetesVersionReadiness"]] = None,
        upgrades: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword readiness: Whether the kubernetes version variant (Linux, Windows, Windows2022) is
         ready or not.
        :paramtype readiness:
         list[~azure.mgmt.hybridcontainerservice.models.KubernetesVersionReadiness]
        :keyword upgrades: Possible upgrade path for given patch version.
        :paramtype upgrades: list[str]
        """
        super().__init__(**kwargs)
        self.readiness = readiness
        self.upgrades = upgrades


class KubernetesVersionCapabilities(_serialization.Model):
    """Capabilities on this kubernetes version.

    :ivar support_plan:
    :vartype support_plan: list[str]
    """

    _attribute_map = {
        "support_plan": {"key": "supportPlan", "type": "[str]"},
    }

    def __init__(self, *, support_plan: Optional[List[Literal["KubernetesOfficial"]]] = None, **kwargs: Any) -> None:
        """
        :keyword support_plan:
        :paramtype support_plan: list[str]
        """
        super().__init__(**kwargs)
        self.support_plan = support_plan


class KubernetesVersionProfile(ProxyResource):
    """The supported kubernetes versions.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.hybridcontainerservice.models.SystemData
    :ivar extended_location: Extended Location definition.
    :vartype extended_location: ~azure.mgmt.hybridcontainerservice.models.ExtendedLocation
    :ivar properties:
    :vartype properties:
     ~azure.mgmt.hybridcontainerservice.models.KubernetesVersionProfileProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "properties": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "extended_location": {"key": "extendedLocation", "type": "ExtendedLocation"},
        "properties": {"key": "properties", "type": "KubernetesVersionProfileProperties"},
    }

    def __init__(self, *, extended_location: Optional["_models.ExtendedLocation"] = None, **kwargs: Any) -> None:
        """
        :keyword extended_location: Extended Location definition.
        :paramtype extended_location: ~azure.mgmt.hybridcontainerservice.models.ExtendedLocation
        """
        super().__init__(**kwargs)
        self.extended_location = extended_location
        self.properties = None


class KubernetesVersionProfileList(_serialization.Model):
    """A list of kubernetes version resources.

    :ivar value:
    :vartype value: list[~azure.mgmt.hybridcontainerservice.models.KubernetesVersionProfile]
    :ivar next_link:
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[KubernetesVersionProfile]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.KubernetesVersionProfile"]] = None,
        next_link: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword value:
        :paramtype value: list[~azure.mgmt.hybridcontainerservice.models.KubernetesVersionProfile]
        :keyword next_link:
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class KubernetesVersionProfileProperties(_serialization.Model):
    """KubernetesVersionProfileProperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Succeeded",
     "Failed", "Canceled", "Creating", "Deleting", "Updating", "Upgrading", "InProgress",
     "Accepted", and "Created".
    :vartype provisioning_state: str or
     ~azure.mgmt.hybridcontainerservice.models.ResourceProvisioningState
    :ivar values: List of supported Kubernetes versions.
    :vartype values: list[~azure.mgmt.hybridcontainerservice.models.KubernetesVersionProperties]
    """

    _validation = {
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "values": {"key": "values", "type": "[KubernetesVersionProperties]"},
    }

    def __init__(self, *, values: Optional[List["_models.KubernetesVersionProperties"]] = None, **kwargs: Any) -> None:
        """
        :keyword values: List of supported Kubernetes versions.
        :paramtype values: list[~azure.mgmt.hybridcontainerservice.models.KubernetesVersionProperties]
        """
        super().__init__(**kwargs)
        self.provisioning_state = None
        self.values = values


class KubernetesVersionProperties(_serialization.Model):
    """Kubernetes version profile for given major.minor release.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar version: major.minor version of Kubernetes release.
    :vartype version: str
    :ivar capabilities: Capabilities on this kubernetes version.
    :vartype capabilities: ~azure.mgmt.hybridcontainerservice.models.KubernetesVersionCapabilities
    :ivar is_preview: Whether this version is in preview mode.
    :vartype is_preview: bool
    :ivar patch_versions: Patch versions of a Kubernetes release.
    :vartype patch_versions: dict[str,
     ~azure.mgmt.hybridcontainerservice.models.KubernetesPatchVersions]
    """

    _validation = {
        "version": {"readonly": True},
        "capabilities": {"readonly": True},
        "is_preview": {"readonly": True},
        "patch_versions": {"readonly": True},
    }

    _attribute_map = {
        "version": {"key": "version", "type": "str"},
        "capabilities": {"key": "capabilities", "type": "KubernetesVersionCapabilities"},
        "is_preview": {"key": "isPreview", "type": "bool"},
        "patch_versions": {"key": "patchVersions", "type": "{KubernetesPatchVersions}"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.version = None
        self.capabilities = None
        self.is_preview = None
        self.patch_versions = None


class KubernetesVersionReadiness(_serialization.Model):
    """Whether a particular kubernetes version's variant (CBLMariner, Windows, Windows2022) is ready
    or not.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar os_type: The particular KubernetesVersion's Image's OS Type (Linux, Windows). Known
     values are: "Windows" and "Linux".
    :vartype os_type: str or ~azure.mgmt.hybridcontainerservice.models.OsType
    :ivar os_sku: Specifies the OS SKU used by the agent pool. The default is CBLMariner if OSType
     is Linux. The default is Windows2019 when OSType is Windows. Known values are: "CBLMariner",
     "Windows2019", and "Windows2022".
    :vartype os_sku: str or ~azure.mgmt.hybridcontainerservice.models.OSSKU
    :ivar ready: Whether or not the given image is ready.
    :vartype ready: bool
    :ivar error_message: If image is not ready, the error message for version not being ready.
    :vartype error_message: str
    """

    _validation = {
        "os_type": {"readonly": True},
        "ready": {"readonly": True},
        "error_message": {"readonly": True},
    }

    _attribute_map = {
        "os_type": {"key": "osType", "type": "str"},
        "os_sku": {"key": "osSku", "type": "str"},
        "ready": {"key": "ready", "type": "bool"},
        "error_message": {"key": "errorMessage", "type": "str"},
    }

    def __init__(self, *, os_sku: Optional[Union[str, "_models.OSSKU"]] = None, **kwargs: Any) -> None:
        """
        :keyword os_sku: Specifies the OS SKU used by the agent pool. The default is CBLMariner if
         OSType is Linux. The default is Windows2019 when OSType is Windows. Known values are:
         "CBLMariner", "Windows2019", and "Windows2022".
        :paramtype os_sku: str or ~azure.mgmt.hybridcontainerservice.models.OSSKU
        """
        super().__init__(**kwargs)
        self.os_type = None
        self.os_sku = os_sku
        self.ready = None
        self.error_message = None


class LinuxProfileProperties(_serialization.Model):
    """LinuxProfile - Profile for Linux VMs in the container service cluster.

    :ivar ssh: SSH - SSH configuration for Linux-based VMs running on Azure.
    :vartype ssh: ~azure.mgmt.hybridcontainerservice.models.LinuxProfilePropertiesSsh
    """

    _attribute_map = {
        "ssh": {"key": "ssh", "type": "LinuxProfilePropertiesSsh"},
    }

    def __init__(self, *, ssh: Optional["_models.LinuxProfilePropertiesSsh"] = None, **kwargs: Any) -> None:
        """
        :keyword ssh: SSH - SSH configuration for Linux-based VMs running on Azure.
        :paramtype ssh: ~azure.mgmt.hybridcontainerservice.models.LinuxProfilePropertiesSsh
        """
        super().__init__(**kwargs)
        self.ssh = ssh


class LinuxProfilePropertiesSsh(_serialization.Model):
    """SSH - SSH configuration for Linux-based VMs running on Azure.

    :ivar public_keys: PublicKeys - The list of SSH public keys used to authenticate with
     Linux-based VMs. Only expect one key specified.
    :vartype public_keys:
     list[~azure.mgmt.hybridcontainerservice.models.LinuxProfilePropertiesSshPublicKeysItem]
    """

    _attribute_map = {
        "public_keys": {"key": "publicKeys", "type": "[LinuxProfilePropertiesSshPublicKeysItem]"},
    }

    def __init__(
        self, *, public_keys: Optional[List["_models.LinuxProfilePropertiesSshPublicKeysItem"]] = None, **kwargs: Any
    ) -> None:
        """
        :keyword public_keys: PublicKeys - The list of SSH public keys used to authenticate with
         Linux-based VMs. Only expect one key specified.
        :paramtype public_keys:
         list[~azure.mgmt.hybridcontainerservice.models.LinuxProfilePropertiesSshPublicKeysItem]
        """
        super().__init__(**kwargs)
        self.public_keys = public_keys


class LinuxProfilePropertiesSshPublicKeysItem(_serialization.Model):
    """LinuxProfilePropertiesSshPublicKeysItem.

    :ivar key_data: KeyData - Certificate public key used to authenticate with VMs through SSH. The
     certificate must be in PEM format with or without headers.
    :vartype key_data: str
    """

    _attribute_map = {
        "key_data": {"key": "keyData", "type": "str"},
    }

    def __init__(self, *, key_data: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword key_data: KeyData - Certificate public key used to authenticate with VMs through SSH.
         The certificate must be in PEM format with or without headers.
        :paramtype key_data: str
        """
        super().__init__(**kwargs)
        self.key_data = key_data


class ListCredentialResponse(_serialization.Model):
    """The list kubeconfig result response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Operation Id.
    :vartype id: str
    :ivar name: Operation Name.
    :vartype name: str
    :ivar resource_id: ARM Resource Id of the provisioned cluster instance.
    :vartype resource_id: str
    :ivar status: Provisioning state of the resource. Known values are: "Succeeded", "Failed",
     "Canceled", "Creating", "Deleting", "Updating", "Upgrading", "InProgress", "Accepted", and
     "Created".
    :vartype status: str or ~azure.mgmt.hybridcontainerservice.models.ResourceProvisioningState
    :ivar error:
    :vartype error: ~azure.mgmt.hybridcontainerservice.models.ListCredentialResponseError
    :ivar properties:
    :vartype properties: ~azure.mgmt.hybridcontainerservice.models.ListCredentialResponseProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "resource_id": {"readonly": True},
        "status": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "resource_id": {"key": "resourceId", "type": "str"},
        "status": {"key": "status", "type": "str"},
        "error": {"key": "error", "type": "ListCredentialResponseError"},
        "properties": {"key": "properties", "type": "ListCredentialResponseProperties"},
    }

    def __init__(
        self,
        *,
        error: Optional["_models.ListCredentialResponseError"] = None,
        properties: Optional["_models.ListCredentialResponseProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword error:
        :paramtype error: ~azure.mgmt.hybridcontainerservice.models.ListCredentialResponseError
        :keyword properties:
        :paramtype properties:
         ~azure.mgmt.hybridcontainerservice.models.ListCredentialResponseProperties
        """
        super().__init__(**kwargs)
        self.id = None
        self.name = None
        self.resource_id = None
        self.status = None
        self.error = error
        self.properties = properties


class ListCredentialResponseError(_serialization.Model):
    """ListCredentialResponseError.

    :ivar code:
    :vartype code: str
    :ivar message:
    :vartype message: str
    """

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
    }

    def __init__(self, *, code: Optional[str] = None, message: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword code:
        :paramtype code: str
        :keyword message:
        :paramtype message: str
        """
        super().__init__(**kwargs)
        self.code = code
        self.message = message


class ListCredentialResponseProperties(_serialization.Model):
    """ListCredentialResponseProperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar kubeconfigs: Base64-encoded Kubernetes configuration file.
    :vartype kubeconfigs: list[~azure.mgmt.hybridcontainerservice.models.CredentialResult]
    """

    _validation = {
        "kubeconfigs": {"readonly": True},
    }

    _attribute_map = {
        "kubeconfigs": {"key": "kubeconfigs", "type": "[CredentialResult]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.kubeconfigs = None


class NetworkProfile(_serialization.Model):
    """NetworkProfile - Profile of network configuration.

    :ivar load_balancer_profile: LoadBalancerProfile - Profile of the cluster load balancer.
    :vartype load_balancer_profile:
     ~azure.mgmt.hybridcontainerservice.models.NetworkProfileLoadBalancerProfile
    :ivar network_policy: NetworkPolicy - Network policy used for building Kubernetes network.
     Possible values include: 'calico', 'flannel'. Default is 'calico'. Known values are: "calico"
     and "flannel".
    :vartype network_policy: str or ~azure.mgmt.hybridcontainerservice.models.NetworkPolicy
    :ivar pod_cidr: PodCidr - A CIDR notation IP range from which to assign pod IPs when kubenet is
     used.
    :vartype pod_cidr: str
    """

    _attribute_map = {
        "load_balancer_profile": {"key": "loadBalancerProfile", "type": "NetworkProfileLoadBalancerProfile"},
        "network_policy": {"key": "networkPolicy", "type": "str"},
        "pod_cidr": {"key": "podCidr", "type": "str"},
    }

    def __init__(
        self,
        *,
        load_balancer_profile: Optional["_models.NetworkProfileLoadBalancerProfile"] = None,
        network_policy: Union[str, "_models.NetworkPolicy"] = "calico",
        pod_cidr: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword load_balancer_profile: LoadBalancerProfile - Profile of the cluster load balancer.
        :paramtype load_balancer_profile:
         ~azure.mgmt.hybridcontainerservice.models.NetworkProfileLoadBalancerProfile
        :keyword network_policy: NetworkPolicy - Network policy used for building Kubernetes network.
         Possible values include: 'calico', 'flannel'. Default is 'calico'. Known values are: "calico"
         and "flannel".
        :paramtype network_policy: str or ~azure.mgmt.hybridcontainerservice.models.NetworkPolicy
        :keyword pod_cidr: PodCidr - A CIDR notation IP range from which to assign pod IPs when kubenet
         is used.
        :paramtype pod_cidr: str
        """
        super().__init__(**kwargs)
        self.load_balancer_profile = load_balancer_profile
        self.network_policy = network_policy
        self.pod_cidr = pod_cidr


class NetworkProfileLoadBalancerProfile(_serialization.Model):
    """LoadBalancerProfile - Profile of the cluster load balancer.

    :ivar count: Count - Number of load balancer VMs. The default value is 0.
    :vartype count: int
    """

    _attribute_map = {
        "count": {"key": "count", "type": "int"},
    }

    def __init__(self, *, count: int = 0, **kwargs: Any) -> None:
        """
        :keyword count: Count - Number of load balancer VMs. The default value is 0.
        :paramtype count: int
        """
        super().__init__(**kwargs)
        self.count = count


class Operation(_serialization.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.hybridcontainerservice.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.hybridcontainerservice.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.hybridcontainerservice.models.ActionType
    """

    _validation = {
        "name": {"readonly": True},
        "is_data_action": {"readonly": True},
        "origin": {"readonly": True},
        "action_type": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "action_type": {"key": "actionType", "type": "str"},
    }

    def __init__(self, *, display: Optional["_models.OperationDisplay"] = None, **kwargs: Any) -> None:
        """
        :keyword display: Localized display information for this particular operation.
        :paramtype display: ~azure.mgmt.hybridcontainerservice.models.OperationDisplay
        """
        super().__init__(**kwargs)
        self.name = None
        self.is_data_action = None
        self.display = display
        self.origin = None
        self.action_type = None


class OperationDisplay(_serialization.Model):
    """Localized display information for this particular operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    _validation = {
        "provider": {"readonly": True},
        "resource": {"readonly": True},
        "operation": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(_serialization.Model):
    """A list of REST API operations supported by an Azure Resource Provider. It contains an URL link
    to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the resource provider.
    :vartype value: list[~azure.mgmt.hybridcontainerservice.models.Operation]
    :ivar next_link: URL to get the next set of operation list results (if there are any).
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Operation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value = None
        self.next_link = None


class ProvisionedClusterLicenseProfile(_serialization.Model):
    """The license profile of the provisioned cluster.

    :ivar azure_hybrid_benefit: Indicates whether Azure Hybrid Benefit is opted in. Known values
     are: "True", "False", and "NotApplicable".
    :vartype azure_hybrid_benefit: str or
     ~azure.mgmt.hybridcontainerservice.models.AzureHybridBenefit
    """

    _attribute_map = {
        "azure_hybrid_benefit": {"key": "azureHybridBenefit", "type": "str"},
    }

    def __init__(
        self, *, azure_hybrid_benefit: Union[str, "_models.AzureHybridBenefit"] = "NotApplicable", **kwargs: Any
    ) -> None:
        """
        :keyword azure_hybrid_benefit: Indicates whether Azure Hybrid Benefit is opted in. Known values
         are: "True", "False", and "NotApplicable".
        :paramtype azure_hybrid_benefit: str or
         ~azure.mgmt.hybridcontainerservice.models.AzureHybridBenefit
        """
        super().__init__(**kwargs)
        self.azure_hybrid_benefit = azure_hybrid_benefit


class ProvisionedClusterPoolUpgradeProfile(_serialization.Model):
    """The list of available upgrade versions.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar kubernetes_version: The Kubernetes version (major.minor.patch).
    :vartype kubernetes_version: str
    :ivar name: The Agent Pool name.
    :vartype name: str
    :ivar os_type: The particular KubernetesVersion's Image's OS Type (Linux, Windows). Known
     values are: "Windows" and "Linux".
    :vartype os_type: str or ~azure.mgmt.hybridcontainerservice.models.OsType
    :ivar upgrades: List of orchestrator types and versions available for upgrade.
    :vartype upgrades:
     list[~azure.mgmt.hybridcontainerservice.models.ProvisionedClusterPoolUpgradeProfileProperties]
    """

    _validation = {
        "kubernetes_version": {"readonly": True},
        "name": {"readonly": True},
        "os_type": {"readonly": True},
    }

    _attribute_map = {
        "kubernetes_version": {"key": "kubernetesVersion", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "os_type": {"key": "osType", "type": "str"},
        "upgrades": {"key": "upgrades", "type": "[ProvisionedClusterPoolUpgradeProfileProperties]"},
    }

    def __init__(
        self,
        *,
        upgrades: Optional[List["_models.ProvisionedClusterPoolUpgradeProfileProperties"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword upgrades: List of orchestrator types and versions available for upgrade.
        :paramtype upgrades:
         list[~azure.mgmt.hybridcontainerservice.models.ProvisionedClusterPoolUpgradeProfileProperties]
        """
        super().__init__(**kwargs)
        self.kubernetes_version = None
        self.name = None
        self.os_type = None
        self.upgrades = upgrades


class ProvisionedClusterPoolUpgradeProfileProperties(_serialization.Model):
    """The upgrade properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar kubernetes_version: The Kubernetes version (major.minor.patch).
    :vartype kubernetes_version: str
    :ivar is_preview: Whether the Kubernetes version is currently in preview.
    :vartype is_preview: bool
    """

    _validation = {
        "kubernetes_version": {"readonly": True},
        "is_preview": {"readonly": True},
    }

    _attribute_map = {
        "kubernetes_version": {"key": "kubernetesVersion", "type": "str"},
        "is_preview": {"key": "isPreview", "type": "bool"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.kubernetes_version = None
        self.is_preview = None


class ProvisionedClusterProperties(_serialization.Model):
    """All properties of the provisioned cluster.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar linux_profile: LinuxProfile - The profile for Linux VMs in the Provisioned Cluster.
    :vartype linux_profile: ~azure.mgmt.hybridcontainerservice.models.LinuxProfileProperties
    :ivar control_plane: ControlPlane - ControlPlane Configuration.
    :vartype control_plane: ~azure.mgmt.hybridcontainerservice.models.ControlPlaneProfile
    :ivar kubernetes_version: KubernetesVersion - Version of Kubernetes specified when creating the
     managed cluster.
    :vartype kubernetes_version: str
    :ivar network_profile: NetworkProfile - Profile of network configuration.
    :vartype network_profile: ~azure.mgmt.hybridcontainerservice.models.NetworkProfile
    :ivar agent_pool_profiles: The agent pools of the cluster.
    :vartype agent_pool_profiles:
     list[~azure.mgmt.hybridcontainerservice.models.NamedAgentPoolProfile]
    :ivar cloud_provider_profile: The underlying cloud infra provider properties.
    :vartype cloud_provider_profile: ~azure.mgmt.hybridcontainerservice.models.CloudProviderProfile
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Succeeded",
     "Failed", "Canceled", "Creating", "Deleting", "Updating", "Upgrading", "InProgress",
     "Accepted", and "Created".
    :vartype provisioning_state: str or
     ~azure.mgmt.hybridcontainerservice.models.ResourceProvisioningState
    :ivar status: HybridAKSClusterStatus defines the observed state of HybridAKSCluster.
    :vartype status: ~azure.mgmt.hybridcontainerservice.models.ProvisionedClusterPropertiesStatus
    :ivar license_profile: The license profile of the provisioned cluster.
    :vartype license_profile:
     ~azure.mgmt.hybridcontainerservice.models.ProvisionedClusterLicenseProfile
    """

    _validation = {
        "provisioning_state": {"readonly": True},
        "status": {"readonly": True},
    }

    _attribute_map = {
        "linux_profile": {"key": "linuxProfile", "type": "LinuxProfileProperties"},
        "control_plane": {"key": "controlPlane", "type": "ControlPlaneProfile"},
        "kubernetes_version": {"key": "kubernetesVersion", "type": "str"},
        "network_profile": {"key": "networkProfile", "type": "NetworkProfile"},
        "agent_pool_profiles": {"key": "agentPoolProfiles", "type": "[NamedAgentPoolProfile]"},
        "cloud_provider_profile": {"key": "cloudProviderProfile", "type": "CloudProviderProfile"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "status": {"key": "status", "type": "ProvisionedClusterPropertiesStatus"},
        "license_profile": {"key": "licenseProfile", "type": "ProvisionedClusterLicenseProfile"},
    }

    def __init__(
        self,
        *,
        linux_profile: Optional["_models.LinuxProfileProperties"] = None,
        control_plane: Optional["_models.ControlPlaneProfile"] = None,
        kubernetes_version: Optional[str] = None,
        network_profile: Optional["_models.NetworkProfile"] = None,
        agent_pool_profiles: Optional[List["_models.NamedAgentPoolProfile"]] = None,
        cloud_provider_profile: Optional["_models.CloudProviderProfile"] = None,
        license_profile: Optional["_models.ProvisionedClusterLicenseProfile"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword linux_profile: LinuxProfile - The profile for Linux VMs in the Provisioned Cluster.
        :paramtype linux_profile: ~azure.mgmt.hybridcontainerservice.models.LinuxProfileProperties
        :keyword control_plane: ControlPlane - ControlPlane Configuration.
        :paramtype control_plane: ~azure.mgmt.hybridcontainerservice.models.ControlPlaneProfile
        :keyword kubernetes_version: KubernetesVersion - Version of Kubernetes specified when creating
         the managed cluster.
        :paramtype kubernetes_version: str
        :keyword network_profile: NetworkProfile - Profile of network configuration.
        :paramtype network_profile: ~azure.mgmt.hybridcontainerservice.models.NetworkProfile
        :keyword agent_pool_profiles: The agent pools of the cluster.
        :paramtype agent_pool_profiles:
         list[~azure.mgmt.hybridcontainerservice.models.NamedAgentPoolProfile]
        :keyword cloud_provider_profile: The underlying cloud infra provider properties.
        :paramtype cloud_provider_profile:
         ~azure.mgmt.hybridcontainerservice.models.CloudProviderProfile
        :keyword license_profile: The license profile of the provisioned cluster.
        :paramtype license_profile:
         ~azure.mgmt.hybridcontainerservice.models.ProvisionedClusterLicenseProfile
        """
        super().__init__(**kwargs)
        self.linux_profile = linux_profile
        self.control_plane = control_plane
        self.kubernetes_version = kubernetes_version
        self.network_profile = network_profile
        self.agent_pool_profiles = agent_pool_profiles
        self.cloud_provider_profile = cloud_provider_profile
        self.provisioning_state = None
        self.status = None
        self.license_profile = license_profile


class ProvisionedClusterPropertiesStatus(_serialization.Model):
    """HybridAKSClusterStatus defines the observed state of HybridAKSCluster.

    :ivar control_plane_status: Status of the control plane components.
    :vartype control_plane_status:
     list[~azure.mgmt.hybridcontainerservice.models.AddonStatusProfile]
    :ivar error_message: ErrorMessage - Error messages during creation of cluster.
    :vartype error_message: str
    :ivar operation_status: Contains Provisioning errors.
    :vartype operation_status:
     ~azure.mgmt.hybridcontainerservice.models.ProvisionedClusterPropertiesStatusOperationStatus
    """

    _attribute_map = {
        "control_plane_status": {"key": "controlPlaneStatus", "type": "[AddonStatusProfile]"},
        "error_message": {"key": "errorMessage", "type": "str"},
        "operation_status": {"key": "operationStatus", "type": "ProvisionedClusterPropertiesStatusOperationStatus"},
    }

    def __init__(
        self,
        *,
        control_plane_status: Optional[List["_models.AddonStatusProfile"]] = None,
        error_message: Optional[str] = None,
        operation_status: Optional["_models.ProvisionedClusterPropertiesStatusOperationStatus"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword control_plane_status: Status of the control plane components.
        :paramtype control_plane_status:
         list[~azure.mgmt.hybridcontainerservice.models.AddonStatusProfile]
        :keyword error_message: ErrorMessage - Error messages during creation of cluster.
        :paramtype error_message: str
        :keyword operation_status: Contains Provisioning errors.
        :paramtype operation_status:
         ~azure.mgmt.hybridcontainerservice.models.ProvisionedClusterPropertiesStatusOperationStatus
        """
        super().__init__(**kwargs)
        self.control_plane_status = control_plane_status
        self.error_message = error_message
        self.operation_status = operation_status


class ProvisionedClusterPropertiesStatusOperationStatus(_serialization.Model):
    """Contains Provisioning errors.

    :ivar error:
    :vartype error:
     ~azure.mgmt.hybridcontainerservice.models.ProvisionedClusterPropertiesStatusOperationStatusError
    :ivar operation_id:
    :vartype operation_id: str
    :ivar status:
    :vartype status: str
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ProvisionedClusterPropertiesStatusOperationStatusError"},
        "operation_id": {"key": "operationId", "type": "str"},
        "status": {"key": "status", "type": "str"},
    }

    def __init__(
        self,
        *,
        error: Optional["_models.ProvisionedClusterPropertiesStatusOperationStatusError"] = None,
        operation_id: Optional[str] = None,
        status: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword error:
        :paramtype error:
         ~azure.mgmt.hybridcontainerservice.models.ProvisionedClusterPropertiesStatusOperationStatusError
        :keyword operation_id:
        :paramtype operation_id: str
        :keyword status:
        :paramtype status: str
        """
        super().__init__(**kwargs)
        self.error = error
        self.operation_id = operation_id
        self.status = status


class ProvisionedClusterPropertiesStatusOperationStatusError(_serialization.Model):
    """ProvisionedClusterPropertiesStatusOperationStatusError.

    :ivar code:
    :vartype code: str
    :ivar message:
    :vartype message: str
    """

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
    }

    def __init__(self, *, code: Optional[str] = None, message: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword code:
        :paramtype code: str
        :keyword message:
        :paramtype message: str
        """
        super().__init__(**kwargs)
        self.code = code
        self.message = message


class ProvisionedClusters(ProxyResource):
    """The provisionedClusterInstances resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.hybridcontainerservice.models.SystemData
    :ivar properties: All properties of the provisioned cluster.
    :vartype properties: ~azure.mgmt.hybridcontainerservice.models.ProvisionedClusterProperties
    :ivar extended_location: Extended Location definition.
    :vartype extended_location: ~azure.mgmt.hybridcontainerservice.models.ExtendedLocation
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "properties": {"key": "properties", "type": "ProvisionedClusterProperties"},
        "extended_location": {"key": "extendedLocation", "type": "ExtendedLocation"},
    }

    def __init__(
        self,
        *,
        properties: Optional["_models.ProvisionedClusterProperties"] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword properties: All properties of the provisioned cluster.
        :paramtype properties: ~azure.mgmt.hybridcontainerservice.models.ProvisionedClusterProperties
        :keyword extended_location: Extended Location definition.
        :paramtype extended_location: ~azure.mgmt.hybridcontainerservice.models.ExtendedLocation
        """
        super().__init__(**kwargs)
        self.properties = properties
        self.extended_location = extended_location


class ProvisionedClustersListResult(_serialization.Model):
    """A list of provisioned clusters resources.

    :ivar value:
    :vartype value: list[~azure.mgmt.hybridcontainerservice.models.ProvisionedClusters]
    :ivar next_link:
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[ProvisionedClusters]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.ProvisionedClusters"]] = None,
        next_link: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword value:
        :paramtype value: list[~azure.mgmt.hybridcontainerservice.models.ProvisionedClusters]
        :keyword next_link:
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ProvisionedClusterUpgradeProfile(ProxyResource):
    """The list of available upgrades for compute pools.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.hybridcontainerservice.models.SystemData
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Succeeded",
     "Failed", "Canceled", "Creating", "Deleting", "Updating", "Upgrading", "InProgress",
     "Accepted", and "Created".
    :vartype provisioning_state: str or
     ~azure.mgmt.hybridcontainerservice.models.ResourceProvisioningState
    :ivar control_plane_profile: The list of available upgrade versions for the control plane.
     Required.
    :vartype control_plane_profile:
     ~azure.mgmt.hybridcontainerservice.models.ProvisionedClusterPoolUpgradeProfile
    :ivar agent_pool_profiles: The list of available upgrade versions for agent pools. Required.
    :vartype agent_pool_profiles:
     list[~azure.mgmt.hybridcontainerservice.models.ProvisionedClusterPoolUpgradeProfile]
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "control_plane_profile": {"required": True},
        "agent_pool_profiles": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "control_plane_profile": {
            "key": "properties.controlPlaneProfile",
            "type": "ProvisionedClusterPoolUpgradeProfile",
        },
        "agent_pool_profiles": {
            "key": "properties.agentPoolProfiles",
            "type": "[ProvisionedClusterPoolUpgradeProfile]",
        },
    }

    def __init__(
        self,
        *,
        control_plane_profile: "_models.ProvisionedClusterPoolUpgradeProfile",
        agent_pool_profiles: List["_models.ProvisionedClusterPoolUpgradeProfile"],
        **kwargs: Any
    ) -> None:
        """
        :keyword control_plane_profile: The list of available upgrade versions for the control plane.
         Required.
        :paramtype control_plane_profile:
         ~azure.mgmt.hybridcontainerservice.models.ProvisionedClusterPoolUpgradeProfile
        :keyword agent_pool_profiles: The list of available upgrade versions for agent pools. Required.
        :paramtype agent_pool_profiles:
         list[~azure.mgmt.hybridcontainerservice.models.ProvisionedClusterPoolUpgradeProfile]
        """
        super().__init__(**kwargs)
        self.provisioning_state = None
        self.control_plane_profile = control_plane_profile
        self.agent_pool_profiles = agent_pool_profiles


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.hybridcontainerservice.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.hybridcontainerservice.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or ~azure.mgmt.hybridcontainerservice.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or
         ~azure.mgmt.hybridcontainerservice.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.hybridcontainerservice.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.location = location


class VirtualNetwork(TrackedResource):
    """The virtualNetworks resource definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.hybridcontainerservice.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: HybridAKSNetworkSpec defines the desired state of HybridAKSNetwork.
    :vartype properties: ~azure.mgmt.hybridcontainerservice.models.VirtualNetworkProperties
    :ivar extended_location:
    :vartype extended_location:
     ~azure.mgmt.hybridcontainerservice.models.VirtualNetworkExtendedLocation
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "properties": {"key": "properties", "type": "VirtualNetworkProperties"},
        "extended_location": {"key": "extendedLocation", "type": "VirtualNetworkExtendedLocation"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.VirtualNetworkProperties"] = None,
        extended_location: Optional["_models.VirtualNetworkExtendedLocation"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword properties: HybridAKSNetworkSpec defines the desired state of HybridAKSNetwork.
        :paramtype properties: ~azure.mgmt.hybridcontainerservice.models.VirtualNetworkProperties
        :keyword extended_location:
        :paramtype extended_location:
         ~azure.mgmt.hybridcontainerservice.models.VirtualNetworkExtendedLocation
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.properties = properties
        self.extended_location = extended_location


class VirtualNetworkExtendedLocation(_serialization.Model):
    """VirtualNetworkExtendedLocation.

    :ivar type: The extended location type.
    :vartype type: str
    :ivar name: The extended location name.
    :vartype name: str
    """

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, type: Optional[str] = None, name: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword type: The extended location type.
        :paramtype type: str
        :keyword name: The extended location name.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.type = type
        self.name = name


class VirtualNetworkProperties(_serialization.Model):
    """HybridAKSNetworkSpec defines the desired state of HybridAKSNetwork.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar infra_vnet_profile:
    :vartype infra_vnet_profile:
     ~azure.mgmt.hybridcontainerservice.models.VirtualNetworkPropertiesInfraVnetProfile
    :ivar vip_pool: Virtual IP Pool for Kubernetes.
    :vartype vip_pool:
     list[~azure.mgmt.hybridcontainerservice.models.VirtualNetworkPropertiesVipPoolItem]
    :ivar vmip_pool: IP Pool for Virtual Machines.
    :vartype vmip_pool:
     list[~azure.mgmt.hybridcontainerservice.models.VirtualNetworkPropertiesVmipPoolItem]
    :ivar dhcp_servers: Address of the DHCP servers associated with the network.
    :vartype dhcp_servers: list[str]
    :ivar dns_servers: Address of the DNS servers associated with the network.
    :vartype dns_servers: list[str]
    :ivar gateway: Address of the Gateway associated with the network.
    :vartype gateway: str
    :ivar ip_address_prefix: IP Address Prefix of the network.
    :vartype ip_address_prefix: str
    :ivar vlan_id: VLAN Id used by the network.
    :vartype vlan_id: int
    :ivar provisioning_state: Known values are: "Succeeded", "Failed", "Canceled", "InProgress",
     "Deleting", "Updating", "Accepted", and "Created".
    :vartype provisioning_state: str or ~azure.mgmt.hybridcontainerservice.models.ProvisioningState
    :ivar status: HybridAKSNetworkStatus defines the observed state of HybridAKSNetwork.
    :vartype status: ~azure.mgmt.hybridcontainerservice.models.VirtualNetworkPropertiesStatus
    """

    _validation = {
        "provisioning_state": {"readonly": True},
        "status": {"readonly": True},
    }

    _attribute_map = {
        "infra_vnet_profile": {"key": "infraVnetProfile", "type": "VirtualNetworkPropertiesInfraVnetProfile"},
        "vip_pool": {"key": "vipPool", "type": "[VirtualNetworkPropertiesVipPoolItem]"},
        "vmip_pool": {"key": "vmipPool", "type": "[VirtualNetworkPropertiesVmipPoolItem]"},
        "dhcp_servers": {"key": "dhcpServers", "type": "[str]"},
        "dns_servers": {"key": "dnsServers", "type": "[str]"},
        "gateway": {"key": "gateway", "type": "str"},
        "ip_address_prefix": {"key": "ipAddressPrefix", "type": "str"},
        "vlan_id": {"key": "vlanID", "type": "int"},
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "status": {"key": "status", "type": "VirtualNetworkPropertiesStatus"},
    }

    def __init__(
        self,
        *,
        infra_vnet_profile: Optional["_models.VirtualNetworkPropertiesInfraVnetProfile"] = None,
        vip_pool: Optional[List["_models.VirtualNetworkPropertiesVipPoolItem"]] = None,
        vmip_pool: Optional[List["_models.VirtualNetworkPropertiesVmipPoolItem"]] = None,
        dhcp_servers: Optional[List[str]] = None,
        dns_servers: Optional[List[str]] = None,
        gateway: Optional[str] = None,
        ip_address_prefix: Optional[str] = None,
        vlan_id: Optional[int] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword infra_vnet_profile:
        :paramtype infra_vnet_profile:
         ~azure.mgmt.hybridcontainerservice.models.VirtualNetworkPropertiesInfraVnetProfile
        :keyword vip_pool: Virtual IP Pool for Kubernetes.
        :paramtype vip_pool:
         list[~azure.mgmt.hybridcontainerservice.models.VirtualNetworkPropertiesVipPoolItem]
        :keyword vmip_pool: IP Pool for Virtual Machines.
        :paramtype vmip_pool:
         list[~azure.mgmt.hybridcontainerservice.models.VirtualNetworkPropertiesVmipPoolItem]
        :keyword dhcp_servers: Address of the DHCP servers associated with the network.
        :paramtype dhcp_servers: list[str]
        :keyword dns_servers: Address of the DNS servers associated with the network.
        :paramtype dns_servers: list[str]
        :keyword gateway: Address of the Gateway associated with the network.
        :paramtype gateway: str
        :keyword ip_address_prefix: IP Address Prefix of the network.
        :paramtype ip_address_prefix: str
        :keyword vlan_id: VLAN Id used by the network.
        :paramtype vlan_id: int
        """
        super().__init__(**kwargs)
        self.infra_vnet_profile = infra_vnet_profile
        self.vip_pool = vip_pool
        self.vmip_pool = vmip_pool
        self.dhcp_servers = dhcp_servers
        self.dns_servers = dns_servers
        self.gateway = gateway
        self.ip_address_prefix = ip_address_prefix
        self.vlan_id = vlan_id
        self.provisioning_state = None
        self.status = None


class VirtualNetworkPropertiesInfraVnetProfile(_serialization.Model):
    """VirtualNetworkPropertiesInfraVnetProfile.

    :ivar hci: Infra network profile for HCI platform.
    :vartype hci:
     ~azure.mgmt.hybridcontainerservice.models.VirtualNetworkPropertiesInfraVnetProfileHci
    :ivar vmware: Infra network profile for VMware platform.
    :vartype vmware:
     ~azure.mgmt.hybridcontainerservice.models.VirtualNetworkPropertiesInfraVnetProfileVmware
    """

    _attribute_map = {
        "hci": {"key": "hci", "type": "VirtualNetworkPropertiesInfraVnetProfileHci"},
        "vmware": {"key": "vmware", "type": "VirtualNetworkPropertiesInfraVnetProfileVmware"},
    }

    def __init__(
        self,
        *,
        hci: Optional["_models.VirtualNetworkPropertiesInfraVnetProfileHci"] = None,
        vmware: Optional["_models.VirtualNetworkPropertiesInfraVnetProfileVmware"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword hci: Infra network profile for HCI platform.
        :paramtype hci:
         ~azure.mgmt.hybridcontainerservice.models.VirtualNetworkPropertiesInfraVnetProfileHci
        :keyword vmware: Infra network profile for VMware platform.
        :paramtype vmware:
         ~azure.mgmt.hybridcontainerservice.models.VirtualNetworkPropertiesInfraVnetProfileVmware
        """
        super().__init__(**kwargs)
        self.hci = hci
        self.vmware = vmware


class VirtualNetworkPropertiesInfraVnetProfileHci(_serialization.Model):
    """Infra network profile for HCI platform.

    :ivar moc_group: Resource group in MOC(Microsoft On-premises Cloud).
    :vartype moc_group: str
    :ivar moc_location: Location in MOC(Microsoft On-premises Cloud).
    :vartype moc_location: str
    :ivar moc_vnet_name: Virtual Network name in MOC(Microsoft On-premises Cloud).
    :vartype moc_vnet_name: str
    """

    _attribute_map = {
        "moc_group": {"key": "mocGroup", "type": "str"},
        "moc_location": {"key": "mocLocation", "type": "str"},
        "moc_vnet_name": {"key": "mocVnetName", "type": "str"},
    }

    def __init__(
        self,
        *,
        moc_group: Optional[str] = None,
        moc_location: Optional[str] = None,
        moc_vnet_name: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword moc_group: Resource group in MOC(Microsoft On-premises Cloud).
        :paramtype moc_group: str
        :keyword moc_location: Location in MOC(Microsoft On-premises Cloud).
        :paramtype moc_location: str
        :keyword moc_vnet_name: Virtual Network name in MOC(Microsoft On-premises Cloud).
        :paramtype moc_vnet_name: str
        """
        super().__init__(**kwargs)
        self.moc_group = moc_group
        self.moc_location = moc_location
        self.moc_vnet_name = moc_vnet_name


class VirtualNetworkPropertiesInfraVnetProfileVmware(_serialization.Model):
    """Infra network profile for VMware platform.

    :ivar segment_name: Name of the network segment in VSphere.
    :vartype segment_name: str
    """

    _attribute_map = {
        "segment_name": {"key": "segmentName", "type": "str"},
    }

    def __init__(self, *, segment_name: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword segment_name: Name of the network segment in VSphere.
        :paramtype segment_name: str
        """
        super().__init__(**kwargs)
        self.segment_name = segment_name


class VirtualNetworkPropertiesStatus(_serialization.Model):
    """HybridAKSNetworkStatus defines the observed state of HybridAKSNetwork.

    :ivar operation_status: Contains Provisioning errors.
    :vartype operation_status:
     ~azure.mgmt.hybridcontainerservice.models.VirtualNetworkPropertiesStatusOperationStatus
    """

    _attribute_map = {
        "operation_status": {"key": "operationStatus", "type": "VirtualNetworkPropertiesStatusOperationStatus"},
    }

    def __init__(
        self,
        *,
        operation_status: Optional["_models.VirtualNetworkPropertiesStatusOperationStatus"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword operation_status: Contains Provisioning errors.
        :paramtype operation_status:
         ~azure.mgmt.hybridcontainerservice.models.VirtualNetworkPropertiesStatusOperationStatus
        """
        super().__init__(**kwargs)
        self.operation_status = operation_status


class VirtualNetworkPropertiesStatusOperationStatus(_serialization.Model):
    """Contains Provisioning errors.

    :ivar error:
    :vartype error:
     ~azure.mgmt.hybridcontainerservice.models.VirtualNetworkPropertiesStatusOperationStatusError
    :ivar operation_id:
    :vartype operation_id: str
    :ivar phase: Phase represents the current phase of the virtual network provisioning. E.g.
     Pending, Running, Terminating, Failed etc.
    :vartype phase: str
    :ivar status:
    :vartype status: str
    """

    _attribute_map = {
        "error": {"key": "error", "type": "VirtualNetworkPropertiesStatusOperationStatusError"},
        "operation_id": {"key": "operationId", "type": "str"},
        "phase": {"key": "phase", "type": "str"},
        "status": {"key": "status", "type": "str"},
    }

    def __init__(
        self,
        *,
        error: Optional["_models.VirtualNetworkPropertiesStatusOperationStatusError"] = None,
        operation_id: Optional[str] = None,
        phase: Optional[str] = None,
        status: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword error:
        :paramtype error:
         ~azure.mgmt.hybridcontainerservice.models.VirtualNetworkPropertiesStatusOperationStatusError
        :keyword operation_id:
        :paramtype operation_id: str
        :keyword phase: Phase represents the current phase of the virtual network provisioning. E.g.
         Pending, Running, Terminating, Failed etc.
        :paramtype phase: str
        :keyword status:
        :paramtype status: str
        """
        super().__init__(**kwargs)
        self.error = error
        self.operation_id = operation_id
        self.phase = phase
        self.status = status


class VirtualNetworkPropertiesStatusOperationStatusError(_serialization.Model):
    """VirtualNetworkPropertiesStatusOperationStatusError.

    :ivar code:
    :vartype code: str
    :ivar message:
    :vartype message: str
    """

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
    }

    def __init__(self, *, code: Optional[str] = None, message: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword code:
        :paramtype code: str
        :keyword message:
        :paramtype message: str
        """
        super().__init__(**kwargs)
        self.code = code
        self.message = message


class VirtualNetworkPropertiesVipPoolItem(_serialization.Model):
    """VirtualNetworkPropertiesVipPoolItem.

    :ivar end_ip: Ending IP address for the IP Pool.
    :vartype end_ip: str
    :ivar start_ip: Starting IP address for the IP Pool.
    :vartype start_ip: str
    """

    _attribute_map = {
        "end_ip": {"key": "endIP", "type": "str"},
        "start_ip": {"key": "startIP", "type": "str"},
    }

    def __init__(self, *, end_ip: Optional[str] = None, start_ip: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword end_ip: Ending IP address for the IP Pool.
        :paramtype end_ip: str
        :keyword start_ip: Starting IP address for the IP Pool.
        :paramtype start_ip: str
        """
        super().__init__(**kwargs)
        self.end_ip = end_ip
        self.start_ip = start_ip


class VirtualNetworkPropertiesVmipPoolItem(_serialization.Model):
    """VirtualNetworkPropertiesVmipPoolItem.

    :ivar end_ip: Ending IP address for the IP Pool.
    :vartype end_ip: str
    :ivar start_ip: Starting IP address for the IP Pool.
    :vartype start_ip: str
    """

    _attribute_map = {
        "end_ip": {"key": "endIP", "type": "str"},
        "start_ip": {"key": "startIP", "type": "str"},
    }

    def __init__(self, *, end_ip: Optional[str] = None, start_ip: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword end_ip: Ending IP address for the IP Pool.
        :paramtype end_ip: str
        :keyword start_ip: Starting IP address for the IP Pool.
        :paramtype start_ip: str
        """
        super().__init__(**kwargs)
        self.end_ip = end_ip
        self.start_ip = start_ip


class VirtualNetworksListResult(_serialization.Model):
    """VirtualNetworksListResult.

    :ivar value:
    :vartype value: list[~azure.mgmt.hybridcontainerservice.models.VirtualNetwork]
    :ivar next_link:
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[VirtualNetwork]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: Optional[List["_models.VirtualNetwork"]] = None, next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value:
        :paramtype value: list[~azure.mgmt.hybridcontainerservice.models.VirtualNetwork]
        :keyword next_link:
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class VirtualNetworksPatch(_serialization.Model):
    """The virtualNetworks resource patch definition.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
    }

    def __init__(self, *, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.tags = tags


class VmSkuCapabilities(_serialization.Model):
    """describes the vm sku capabilities object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: An invariant to describe the feature.
    :vartype name: str
    :ivar value: An invariant if the feature is measured by quantity.
    :vartype value: str
    """

    _validation = {
        "name": {"readonly": True},
        "value": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "value": {"key": "value", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.name = None
        self.value = None


class VmSkuProfile(ProxyResource):
    """The list of supported VM SKUs.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.hybridcontainerservice.models.SystemData
    :ivar extended_location: Extended Location definition.
    :vartype extended_location: ~azure.mgmt.hybridcontainerservice.models.ExtendedLocation
    :ivar properties:
    :vartype properties: ~azure.mgmt.hybridcontainerservice.models.VmSkuProfileProperties
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "properties": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "extended_location": {"key": "extendedLocation", "type": "ExtendedLocation"},
        "properties": {"key": "properties", "type": "VmSkuProfileProperties"},
    }

    def __init__(self, *, extended_location: Optional["_models.ExtendedLocation"] = None, **kwargs: Any) -> None:
        """
        :keyword extended_location: Extended Location definition.
        :paramtype extended_location: ~azure.mgmt.hybridcontainerservice.models.ExtendedLocation
        """
        super().__init__(**kwargs)
        self.extended_location = extended_location
        self.properties = None


class VmSkuProfileList(_serialization.Model):
    """A list of VM SKU resources.

    :ivar value:
    :vartype value: list[~azure.mgmt.hybridcontainerservice.models.VmSkuProfile]
    :ivar next_link:
    :vartype next_link: str
    """

    _attribute_map = {
        "value": {"key": "value", "type": "[VmSkuProfile]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: Optional[List["_models.VmSkuProfile"]] = None, next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value:
        :paramtype value: list[~azure.mgmt.hybridcontainerservice.models.VmSkuProfile]
        :keyword next_link:
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class VmSkuProfileProperties(_serialization.Model):
    """VmSkuProfileProperties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Succeeded",
     "Failed", "Canceled", "Creating", "Deleting", "Updating", "Upgrading", "InProgress",
     "Accepted", and "Created".
    :vartype provisioning_state: str or
     ~azure.mgmt.hybridcontainerservice.models.ResourceProvisioningState
    :ivar values: Array of HybridAKS Support VM Skus.
    :vartype values: list[~azure.mgmt.hybridcontainerservice.models.VmSkuProperties]
    """

    _validation = {
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "provisioning_state": {"key": "provisioningState", "type": "str"},
        "values": {"key": "values", "type": "[VmSkuProperties]"},
    }

    def __init__(self, *, values: Optional[List["_models.VmSkuProperties"]] = None, **kwargs: Any) -> None:
        """
        :keyword values: Array of HybridAKS Support VM Skus.
        :paramtype values: list[~azure.mgmt.hybridcontainerservice.models.VmSkuProperties]
        """
        super().__init__(**kwargs)
        self.provisioning_state = None
        self.values = values


class VmSkuProperties(_serialization.Model):
    """The profile for supported VM skus.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar resource_type: The resource type of the vm.
    :vartype resource_type: str
    :ivar capabilities: A name value pair to describe the specific vm's capability.
    :vartype capabilities: list[~azure.mgmt.hybridcontainerservice.models.VmSkuCapabilities]
    :ivar name: The name of the VM Family.
    :vartype name: str
    :ivar tier: The tier of the VM Family.
    :vartype tier: str
    :ivar size: The size of the VM Family.
    :vartype size: str
    """

    _validation = {
        "resource_type": {"readonly": True},
        "capabilities": {"readonly": True},
        "name": {"readonly": True},
        "tier": {"readonly": True},
        "size": {"readonly": True},
    }

    _attribute_map = {
        "resource_type": {"key": "resourceType", "type": "str"},
        "capabilities": {"key": "capabilities", "type": "[VmSkuCapabilities]"},
        "name": {"key": "name", "type": "str"},
        "tier": {"key": "tier", "type": "str"},
        "size": {"key": "size", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.resource_type = None
        self.capabilities = None
        self.name = None
        self.tier = None
        self.size = None
