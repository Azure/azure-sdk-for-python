# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class AzureAsyncOperationResults(Model):
    """The results of Azure-AsyncOperation.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The fully qualified ID for the management group.  For example,
     /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
    :vartype id: str
    :ivar type: The type of the resource.  For example,
     Microsoft.Management/managementGroups
    :vartype type: str
    :ivar name: The name of the management group. For example,
     00000000-0000-0000-0000-000000000000
    :vartype name: str
    :ivar status: The current status of the asynchronous operation performed .
     For example, Running, Succeeded, Failed
    :vartype status: str
    :param tenant_id: The AAD Tenant ID associated with the management group.
     For example, 00000000-0000-0000-0000-000000000000
    :type tenant_id: str
    :param display_name: The friendly name of the management group.
    :type display_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
        'status': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
    }

    def __init__(self, *, tenant_id: str=None, display_name: str=None, **kwargs) -> None:
        super(AzureAsyncOperationResults, self).__init__(**kwargs)
        self.id = None
        self.type = None
        self.name = None
        self.status = None
        self.tenant_id = tenant_id
        self.display_name = display_name


class CheckNameAvailabilityRequest(Model):
    """Management group name availability check parameters.

    :param name: the name to check for availability
    :type name: str
    :param type: fully qualified resource type which includes provider
     namespace. Possible values include: 'Microsoft.Management/managementGroup'
    :type type: str or ~azure.mgmt.managementgroups.models.Type
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'Type'},
    }

    def __init__(self, *, name: str=None, type=None, **kwargs) -> None:
        super(CheckNameAvailabilityRequest, self).__init__(**kwargs)
        self.name = name
        self.type = type


class CheckNameAvailabilityResult(Model):
    """Describes the result of the request to check management group name
    availability.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name_available: Required. True indicates name is valid and
     available. False indicates the name is invalid, unavailable, or both.
    :vartype name_available: bool
    :ivar reason: Required if nameAvailable == false. Invalid indicates the
     name provided does not match the resource provider's naming requirements
     (incorrect length, unsupported characters, etc.) AlreadyExists indicates
     that the name is already in use and is therefore unavailable. Possible
     values include: 'Invalid', 'AlreadyExists'
    :vartype reason: str or ~azure.mgmt.managementgroups.models.Reason
    :ivar message: Required if nameAvailable == false. Localized. If reason ==
     invalid, provide the user with the reason why the given name is invalid,
     and provide the resource naming requirements so that the user can select a
     valid name. If reason == AlreadyExists, explain that is already in use,
     and direct them to select a different name.
    :vartype message: str
    """

    _validation = {
        'name_available': {'readonly': True},
        'reason': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'name_available': {'key': 'nameAvailable', 'type': 'bool'},
        'reason': {'key': 'reason', 'type': 'Reason'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(CheckNameAvailabilityResult, self).__init__(**kwargs)
        self.name_available = None
        self.reason = None
        self.message = None


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class CreateManagementGroupChildInfo(Model):
    """The child information of a management group used during creation.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar type: The type of child resource. The fully qualified resource type
     which includes provider namespace (e.g.
     Microsoft.Management/managementGroups). Possible values include:
     'Microsoft.Management/managementGroups', '/subscriptions'
    :vartype type: str or ~azure.mgmt.managementgroups.models.enum
    :ivar id: The fully qualified ID for the child resource (management group
     or subscription).  For example,
     /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
    :vartype id: str
    :ivar name: The name of the child entity.
    :vartype name: str
    :ivar display_name: The friendly name of the child resource.
    :vartype display_name: str
    :ivar roles: The roles definitions associated with the management group.
    :vartype roles: list[str]
    :ivar children: The list of children.
    :vartype children:
     list[~azure.mgmt.managementgroups.models.CreateManagementGroupChildInfo]
    """

    _validation = {
        'type': {'readonly': True},
        'id': {'readonly': True},
        'name': {'readonly': True},
        'display_name': {'readonly': True},
        'roles': {'readonly': True},
        'children': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'roles': {'key': 'roles', 'type': '[str]'},
        'children': {'key': 'children', 'type': '[CreateManagementGroupChildInfo]'},
    }

    def __init__(self, **kwargs) -> None:
        super(CreateManagementGroupChildInfo, self).__init__(**kwargs)
        self.type = None
        self.id = None
        self.name = None
        self.display_name = None
        self.roles = None
        self.children = None


class CreateManagementGroupDetails(Model):
    """The details of a management group used during creation.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar version: The version number of the object.
    :vartype version: float
    :ivar updated_time: The date and time when this object was last updated.
    :vartype updated_time: datetime
    :ivar updated_by: The identity of the principal or process that updated
     the object.
    :vartype updated_by: str
    :param parent: Parent.
    :type parent: ~azure.mgmt.managementgroups.models.CreateParentGroupInfo
    """

    _validation = {
        'version': {'readonly': True},
        'updated_time': {'readonly': True},
        'updated_by': {'readonly': True},
    }

    _attribute_map = {
        'version': {'key': 'version', 'type': 'float'},
        'updated_time': {'key': 'updatedTime', 'type': 'iso-8601'},
        'updated_by': {'key': 'updatedBy', 'type': 'str'},
        'parent': {'key': 'parent', 'type': 'CreateParentGroupInfo'},
    }

    def __init__(self, *, parent=None, **kwargs) -> None:
        super(CreateManagementGroupDetails, self).__init__(**kwargs)
        self.version = None
        self.updated_time = None
        self.updated_by = None
        self.parent = parent


class CreateManagementGroupRequest(Model):
    """Management group creation parameters.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The fully qualified ID for the management group.  For example,
     /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
    :vartype id: str
    :ivar type: The type of the resource.  For example,
     Microsoft.Management/managementGroups
    :vartype type: str
    :param name: The name of the management group. For example,
     00000000-0000-0000-0000-000000000000
    :type name: str
    :ivar tenant_id: The AAD Tenant ID associated with the management group.
     For example, 00000000-0000-0000-0000-000000000000
    :vartype tenant_id: str
    :param display_name: The friendly name of the management group. If no
     value is passed then this  field will be set to the groupId.
    :type display_name: str
    :ivar roles: The roles definitions associated with the management group.
    :vartype roles: list[str]
    :param details: Details.
    :type details:
     ~azure.mgmt.managementgroups.models.CreateManagementGroupDetails
    :ivar children: The list of children.
    :vartype children:
     list[~azure.mgmt.managementgroups.models.CreateManagementGroupChildInfo]
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'tenant_id': {'readonly': True},
        'roles': {'readonly': True},
        'children': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'roles': {'key': 'properties.roles', 'type': '[str]'},
        'details': {'key': 'properties.details', 'type': 'CreateManagementGroupDetails'},
        'children': {'key': 'properties.children', 'type': '[CreateManagementGroupChildInfo]'},
    }

    def __init__(self, *, name: str=None, display_name: str=None, details=None, **kwargs) -> None:
        super(CreateManagementGroupRequest, self).__init__(**kwargs)
        self.id = None
        self.type = None
        self.name = name
        self.tenant_id = None
        self.display_name = display_name
        self.roles = None
        self.details = details
        self.children = None


class CreateOrUpdateSettingsRequest(Model):
    """Parameters for creating or updating Management Group settings.

    :param require_authorization_for_group_creation: Indicates whether RBAC
     access is required upon group creation under the root Management Group. If
     set to true, user will require Microsoft.Management/managementGroups/write
     action on the root Management Group scope in order to create new Groups
     directly under the root. This will prevent new users from creating new
     Management Groups, unless they are given access.
    :type require_authorization_for_group_creation: bool
    :param default_management_group: Settings that sets the default Management
     Group under which new subscriptions get added in this tenant. For example,
     /providers/Microsoft.Management/managementGroups/defaultGroup
    :type default_management_group: str
    """

    _attribute_map = {
        'require_authorization_for_group_creation': {'key': 'properties.requireAuthorizationForGroupCreation', 'type': 'bool'},
        'default_management_group': {'key': 'properties.defaultManagementGroup', 'type': 'str'},
    }

    def __init__(self, *, require_authorization_for_group_creation: bool=None, default_management_group: str=None, **kwargs) -> None:
        super(CreateOrUpdateSettingsRequest, self).__init__(**kwargs)
        self.require_authorization_for_group_creation = require_authorization_for_group_creation
        self.default_management_group = default_management_group


class CreateParentGroupInfo(Model):
    """(Optional) The ID of the parent management group used during creation.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param id: The fully qualified ID for the parent management group.  For
     example,
     /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
    :type id: str
    :ivar name: The name of the parent management group
    :vartype name: str
    :ivar display_name: The friendly name of the parent management group.
    :vartype display_name: str
    """

    _validation = {
        'name': {'readonly': True},
        'display_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(self, *, id: str=None, **kwargs) -> None:
        super(CreateParentGroupInfo, self).__init__(**kwargs)
        self.id = id
        self.name = None
        self.display_name = None


class DescendantInfo(Model):
    """The descendant.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The fully qualified ID for the descendant.  For example,
     /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
     or /subscriptions/0000000-0000-0000-0000-000000000000
    :vartype id: str
    :ivar type: The type of the resource. For example,
     Microsoft.Management/managementGroups or /subscriptions
    :vartype type: str
    :ivar name: The name of the descendant. For example,
     00000000-0000-0000-0000-000000000000
    :vartype name: str
    :param display_name: The friendly name of the management group.
    :type display_name: str
    :param parent: Parent.
    :type parent:
     ~azure.mgmt.managementgroups.models.DescendantParentGroupInfo
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'parent': {'key': 'properties.parent', 'type': 'DescendantParentGroupInfo'},
    }

    def __init__(self, *, display_name: str=None, parent=None, **kwargs) -> None:
        super(DescendantInfo, self).__init__(**kwargs)
        self.id = None
        self.type = None
        self.name = None
        self.display_name = display_name
        self.parent = parent


class DescendantParentGroupInfo(Model):
    """The ID of the parent management group.

    :param id: The fully qualified ID for the parent management group.  For
     example,
     /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(self, *, id: str=None, **kwargs) -> None:
        super(DescendantParentGroupInfo, self).__init__(**kwargs)
        self.id = id


class EntityHierarchyItem(Model):
    """The management group details for the hierarchy view.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The fully qualified ID for the management group.  For example,
     /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
    :vartype id: str
    :ivar type: The type of the resource.  For example,
     Microsoft.Management/managementGroups
    :vartype type: str
    :ivar name: The name of the management group. For example,
     00000000-0000-0000-0000-000000000000
    :vartype name: str
    :param display_name: The friendly name of the management group.
    :type display_name: str
    :param permissions: Permissions. Possible values include: 'noaccess',
     'view', 'edit', 'delete'
    :type permissions: str or ~azure.mgmt.managementgroups.models.enum
    :param children: The list of children.
    :type children:
     list[~azure.mgmt.managementgroups.models.EntityHierarchyItem]
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'permissions': {'key': 'properties.permissions', 'type': 'str'},
        'children': {'key': 'properties.children', 'type': '[EntityHierarchyItem]'},
    }

    def __init__(self, *, display_name: str=None, permissions=None, children=None, **kwargs) -> None:
        super(EntityHierarchyItem, self).__init__(**kwargs)
        self.id = None
        self.type = None
        self.name = None
        self.display_name = display_name
        self.permissions = permissions
        self.children = children


class EntityInfo(Model):
    """The entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The fully qualified ID for the entity.  For example,
     /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
    :vartype id: str
    :ivar type: The type of the resource. For example,
     Microsoft.Management/managementGroups
    :vartype type: str
    :ivar name: The name of the entity. For example,
     00000000-0000-0000-0000-000000000000
    :vartype name: str
    :param tenant_id: The AAD Tenant ID associated with the entity. For
     example, 00000000-0000-0000-0000-000000000000
    :type tenant_id: str
    :param display_name: The friendly name of the management group.
    :type display_name: str
    :param parent: Parent.
    :type parent: ~azure.mgmt.managementgroups.models.EntityParentGroupInfo
    :param permissions: Permissions. Possible values include: 'noaccess',
     'view', 'edit', 'delete'
    :type permissions: str or ~azure.mgmt.managementgroups.models.enum
    :param inherited_permissions: Inherited Permissions. Possible values
     include: 'noaccess', 'view', 'edit', 'delete'
    :type inherited_permissions: str or
     ~azure.mgmt.managementgroups.models.enum
    :param number_of_descendants: Number of Descendants.
    :type number_of_descendants: int
    :param number_of_children: Number of Children. Number of children is the
     number of Groups and Subscriptions that are exactly one level underneath
     the current Group.
    :type number_of_children: int
    :param number_of_child_groups: Number of Child Groups. Number of children
     is the number of Groups that are exactly one level underneath the current
     Group.
    :type number_of_child_groups: int
    :param parent_display_name_chain: The parent display name chain from the
     root group to the immediate parent
    :type parent_display_name_chain: list[str]
    :param parent_name_chain: The parent name chain from the root group to the
     immediate parent
    :type parent_name_chain: list[str]
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'parent': {'key': 'properties.parent', 'type': 'EntityParentGroupInfo'},
        'permissions': {'key': 'properties.permissions', 'type': 'str'},
        'inherited_permissions': {'key': 'properties.inheritedPermissions', 'type': 'str'},
        'number_of_descendants': {'key': 'properties.numberOfDescendants', 'type': 'int'},
        'number_of_children': {'key': 'properties.numberOfChildren', 'type': 'int'},
        'number_of_child_groups': {'key': 'properties.numberOfChildGroups', 'type': 'int'},
        'parent_display_name_chain': {'key': 'properties.parentDisplayNameChain', 'type': '[str]'},
        'parent_name_chain': {'key': 'properties.parentNameChain', 'type': '[str]'},
    }

    def __init__(self, *, tenant_id: str=None, display_name: str=None, parent=None, permissions=None, inherited_permissions=None, number_of_descendants: int=None, number_of_children: int=None, number_of_child_groups: int=None, parent_display_name_chain=None, parent_name_chain=None, **kwargs) -> None:
        super(EntityInfo, self).__init__(**kwargs)
        self.id = None
        self.type = None
        self.name = None
        self.tenant_id = tenant_id
        self.display_name = display_name
        self.parent = parent
        self.permissions = permissions
        self.inherited_permissions = inherited_permissions
        self.number_of_descendants = number_of_descendants
        self.number_of_children = number_of_children
        self.number_of_child_groups = number_of_child_groups
        self.parent_display_name_chain = parent_display_name_chain
        self.parent_name_chain = parent_name_chain


class EntityParentGroupInfo(Model):
    """(Optional) The ID of the parent management group.

    :param id: The fully qualified ID for the parent management group.  For
     example,
     /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(self, *, id: str=None, **kwargs) -> None:
        super(EntityParentGroupInfo, self).__init__(**kwargs)
        self.id = id


class ErrorDetails(Model):
    """The details of the error.

    :param code: One of a server-defined set of error codes.
    :type code: str
    :param message: A human-readable representation of the error.
    :type message: str
    :param details: A human-readable representation of the error's details.
    :type details: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'details': {'key': 'details', 'type': 'str'},
    }

    def __init__(self, *, code: str=None, message: str=None, details: str=None, **kwargs) -> None:
        super(ErrorDetails, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.details = details


class ErrorResponse(Model):
    """The error object.

    :param error: Error.
    :type error: ~azure.mgmt.managementgroups.models.ErrorDetails
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorDetails'},
    }

    def __init__(self, *, error=None, **kwargs) -> None:
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class ErrorResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ErrorResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorResponseException, self).__init__(deserialize, response, 'ErrorResponse', *args)


class HierarchySettings(Model):
    """Settings defined at the Management Group scope.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The fully qualified ID for the settings object.  For example,
     /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000/settings/default.
    :vartype id: str
    :ivar type: The type of the resource.  For example,
     Microsoft.Management/managementGroups/settings.
    :vartype type: str
    :ivar name: The name of the object. In this case, default.
    :vartype name: str
    :param tenant_id: The AAD Tenant ID associated with the hierarchy
     settings. For example, 00000000-0000-0000-0000-000000000000
    :type tenant_id: str
    :param require_authorization_for_group_creation: Indicates whether RBAC
     access is required upon group creation under the root Management Group. If
     set to true, user will require Microsoft.Management/managementGroups/write
     action on the root Management Group scope in order to create new Groups
     directly under the root. This will prevent new users from creating new
     Management Groups, unless they are given access.
    :type require_authorization_for_group_creation: bool
    :param default_management_group: Settings that sets the default Management
     Group under which new subscriptions get added in this tenant. For example,
     /providers/Microsoft.Management/managementGroups/defaultGroup
    :type default_management_group: str
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'require_authorization_for_group_creation': {'key': 'properties.requireAuthorizationForGroupCreation', 'type': 'bool'},
        'default_management_group': {'key': 'properties.defaultManagementGroup', 'type': 'str'},
    }

    def __init__(self, *, tenant_id: str=None, require_authorization_for_group_creation: bool=None, default_management_group: str=None, **kwargs) -> None:
        super(HierarchySettings, self).__init__(**kwargs)
        self.id = None
        self.type = None
        self.name = None
        self.tenant_id = tenant_id
        self.require_authorization_for_group_creation = require_authorization_for_group_creation
        self.default_management_group = default_management_group


class HierarchySettingsInfo(Model):
    """The hierarchy settings resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The fully qualified ID for the settings object.  For example,
     /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000/settings/default.
    :vartype id: str
    :ivar type: The type of the resource.  For example,
     Microsoft.Management/managementGroups/settings.
    :vartype type: str
    :ivar name: The name of the object. In this case, default.
    :vartype name: str
    :param tenant_id: The AAD Tenant ID associated with the hierarchy
     settings. For example, 00000000-0000-0000-0000-000000000000
    :type tenant_id: str
    :param require_authorization_for_group_creation: Indicates whether RBAC
     access is required upon group creation under the root Management Group. If
     set to true, user will require Microsoft.Management/managementGroups/write
     action on the root Management Group scope in order to create new Groups
     directly under the root. This will prevent new users from creating new
     Management Groups, unless they are given access.
    :type require_authorization_for_group_creation: bool
    :param default_management_group: Settings that sets the default Management
     Group under which new subscriptions get added in this tenant. For example,
     /providers/Microsoft.Management/managementGroups/defaultGroup
    :type default_management_group: str
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'require_authorization_for_group_creation': {'key': 'properties.requireAuthorizationForGroupCreation', 'type': 'bool'},
        'default_management_group': {'key': 'properties.defaultManagementGroup', 'type': 'str'},
    }

    def __init__(self, *, tenant_id: str=None, require_authorization_for_group_creation: bool=None, default_management_group: str=None, **kwargs) -> None:
        super(HierarchySettingsInfo, self).__init__(**kwargs)
        self.id = None
        self.type = None
        self.name = None
        self.tenant_id = tenant_id
        self.require_authorization_for_group_creation = require_authorization_for_group_creation
        self.default_management_group = default_management_group


class HierarchySettingsList(Model):
    """Lists all hierarchy settings.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param value: The list of hierarchy settings.
    :type value:
     list[~azure.mgmt.managementgroups.models.HierarchySettingsInfo]
    :ivar next_link: The URL to use for getting the next set of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[HierarchySettingsInfo]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(self, *, value=None, **kwargs) -> None:
        super(HierarchySettingsList, self).__init__(**kwargs)
        self.value = value
        self.next_link = None


class ManagementGroup(Model):
    """The management group details.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The fully qualified ID for the management group.  For example,
     /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
    :vartype id: str
    :ivar type: The type of the resource.  For example,
     Microsoft.Management/managementGroups
    :vartype type: str
    :ivar name: The name of the management group. For example,
     00000000-0000-0000-0000-000000000000
    :vartype name: str
    :param tenant_id: The AAD Tenant ID associated with the management group.
     For example, 00000000-0000-0000-0000-000000000000
    :type tenant_id: str
    :param display_name: The friendly name of the management group.
    :type display_name: str
    :param roles: The role definitions associated with the management group.
    :type roles: list[str]
    :param details: Details.
    :type details: ~azure.mgmt.managementgroups.models.ManagementGroupDetails
    :param children: The list of children.
    :type children:
     list[~azure.mgmt.managementgroups.models.ManagementGroupChildInfo]
    :param path: The path from the root to the current group.
    :type path:
     list[~azure.mgmt.managementgroups.models.ManagementGroupPathElement]
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'roles': {'key': 'properties.roles', 'type': '[str]'},
        'details': {'key': 'properties.details', 'type': 'ManagementGroupDetails'},
        'children': {'key': 'properties.children', 'type': '[ManagementGroupChildInfo]'},
        'path': {'key': 'properties.path', 'type': '[ManagementGroupPathElement]'},
    }

    def __init__(self, *, tenant_id: str=None, display_name: str=None, roles=None, details=None, children=None, path=None, **kwargs) -> None:
        super(ManagementGroup, self).__init__(**kwargs)
        self.id = None
        self.type = None
        self.name = None
        self.tenant_id = tenant_id
        self.display_name = display_name
        self.roles = roles
        self.details = details
        self.children = children
        self.path = path


class ManagementGroupChildInfo(Model):
    """The child information of a management group.

    :param type: The type of child resource. The fully qualified resource type
     which includes provider namespace (e.g.
     Microsoft.Management/managementGroups). Possible values include:
     'Microsoft.Management/managementGroups', '/subscriptions'
    :type type: str or ~azure.mgmt.managementgroups.models.enum
    :param id: The fully qualified ID for the child resource (management group
     or subscription).  For example,
     /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
    :type id: str
    :param name: The name of the child entity.
    :type name: str
    :param display_name: The friendly name of the child resource.
    :type display_name: str
    :param roles: The roles definitions associated with the management group.
    :type roles: list[str]
    :param children: The list of children.
    :type children:
     list[~azure.mgmt.managementgroups.models.ManagementGroupChildInfo]
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'roles': {'key': 'roles', 'type': '[str]'},
        'children': {'key': 'children', 'type': '[ManagementGroupChildInfo]'},
    }

    def __init__(self, *, type=None, id: str=None, name: str=None, display_name: str=None, roles=None, children=None, **kwargs) -> None:
        super(ManagementGroupChildInfo, self).__init__(**kwargs)
        self.type = type
        self.id = id
        self.name = name
        self.display_name = display_name
        self.roles = roles
        self.children = children


class ManagementGroupDetails(Model):
    """The details of a management group.

    :param version: The version number of the object.
    :type version: float
    :param updated_time: The date and time when this object was last updated.
    :type updated_time: datetime
    :param updated_by: The identity of the principal or process that updated
     the object.
    :type updated_by: str
    :param parent: Parent.
    :type parent: ~azure.mgmt.managementgroups.models.ParentGroupInfo
    """

    _attribute_map = {
        'version': {'key': 'version', 'type': 'float'},
        'updated_time': {'key': 'updatedTime', 'type': 'iso-8601'},
        'updated_by': {'key': 'updatedBy', 'type': 'str'},
        'parent': {'key': 'parent', 'type': 'ParentGroupInfo'},
    }

    def __init__(self, *, version: float=None, updated_time=None, updated_by: str=None, parent=None, **kwargs) -> None:
        super(ManagementGroupDetails, self).__init__(**kwargs)
        self.version = version
        self.updated_time = updated_time
        self.updated_by = updated_by
        self.parent = parent


class ManagementGroupInfo(Model):
    """The management group resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The fully qualified ID for the management group.  For example,
     /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
    :vartype id: str
    :ivar type: The type of the resource. For example,
     Microsoft.Management/managementGroups
    :vartype type: str
    :ivar name: The name of the management group. For example,
     00000000-0000-0000-0000-000000000000
    :vartype name: str
    :param tenant_id: The AAD Tenant ID associated with the management group.
     For example, 00000000-0000-0000-0000-000000000000
    :type tenant_id: str
    :param display_name: The friendly name of the management group.
    :type display_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
    }

    def __init__(self, *, tenant_id: str=None, display_name: str=None, **kwargs) -> None:
        super(ManagementGroupInfo, self).__init__(**kwargs)
        self.id = None
        self.type = None
        self.name = None
        self.tenant_id = tenant_id
        self.display_name = display_name


class ManagementGroupPathElement(Model):
    """A path element of a management group ancestors.

    :param name: The name of the group.
    :type name: str
    :param display_name: The friendly name of the group.
    :type display_name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(self, *, name: str=None, display_name: str=None, **kwargs) -> None:
        super(ManagementGroupPathElement, self).__init__(**kwargs)
        self.name = name
        self.display_name = display_name


class Operation(Model):
    """Operation supported by the Microsoft.Management resource provider.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name: Operation name: {provider}/{resource}/{operation}.
    :vartype name: str
    :param display: Display.
    :type display:
     ~azure.mgmt.managementgroups.models.OperationDisplayProperties
    """

    _validation = {
        'name': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplayProperties'},
    }

    def __init__(self, *, display=None, **kwargs) -> None:
        super(Operation, self).__init__(**kwargs)
        self.name = None
        self.display = display


class OperationDisplayProperties(Model):
    """The object that represents the operation.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar provider: The name of the provider.
    :vartype provider: str
    :ivar resource: The resource on which the operation is performed.
    :vartype resource: str
    :ivar operation: The operation that can be performed.
    :vartype operation: str
    :ivar description: Operation description.
    :vartype description: str
    """

    _validation = {
        'provider': {'readonly': True},
        'resource': {'readonly': True},
        'operation': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(OperationDisplayProperties, self).__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationResults(Model):
    """The results of an asynchronous operation.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The fully qualified ID for the management group.  For example,
     /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
    :vartype id: str
    :ivar type: The type of the resource.  For example,
     Microsoft.Management/managementGroups
    :vartype type: str
    :ivar name: The name of the management group. For example,
     00000000-0000-0000-0000-000000000000
    :vartype name: str
    :param tenant_id: The AAD Tenant ID associated with the management group.
     For example, 00000000-0000-0000-0000-000000000000
    :type tenant_id: str
    :param display_name: The friendly name of the management group.
    :type display_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
    }

    def __init__(self, *, tenant_id: str=None, display_name: str=None, **kwargs) -> None:
        super(OperationResults, self).__init__(**kwargs)
        self.id = None
        self.type = None
        self.name = None
        self.tenant_id = tenant_id
        self.display_name = display_name


class ParentGroupInfo(Model):
    """(Optional) The ID of the parent management group.

    :param id: The fully qualified ID for the parent management group.  For
     example,
     /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
    :type id: str
    :param name: The name of the parent management group
    :type name: str
    :param display_name: The friendly name of the parent management group.
    :type display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(self, *, id: str=None, name: str=None, display_name: str=None, **kwargs) -> None:
        super(ParentGroupInfo, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.display_name = display_name


class PatchManagementGroupRequest(Model):
    """Management group patch parameters.

    :param display_name: The friendly name of the management group.
    :type display_name: str
    :param parent_id: (Optional) The fully qualified ID for the parent
     management group.  For example,
     /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
    :type parent_id: str
    """

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'parent_id': {'key': 'parentId', 'type': 'str'},
    }

    def __init__(self, *, display_name: str=None, parent_id: str=None, **kwargs) -> None:
        super(PatchManagementGroupRequest, self).__init__(**kwargs)
        self.display_name = display_name
        self.parent_id = parent_id


class TenantBackfillStatusResult(Model):
    """The tenant backfill status.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar tenant_id: The AAD Tenant ID associated with the management group.
     For example, 00000000-0000-0000-0000-000000000000
    :vartype tenant_id: str
    :ivar status: The status of the Tenant Backfill. Possible values include:
     'NotStarted', 'NotStartedButGroupsExist', 'Started', 'Failed',
     'Cancelled', 'Completed'
    :vartype status: str or ~azure.mgmt.managementgroups.models.Status
    """

    _validation = {
        'tenant_id': {'readonly': True},
        'status': {'readonly': True},
    }

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'Status'},
    }

    def __init__(self, **kwargs) -> None:
        super(TenantBackfillStatusResult, self).__init__(**kwargs)
        self.tenant_id = None
        self.status = None
