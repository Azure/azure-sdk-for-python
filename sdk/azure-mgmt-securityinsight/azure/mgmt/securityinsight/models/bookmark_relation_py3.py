# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .relation_base_py3 import RelationBase


class BookmarkRelation(RelationBase):
    """Represents a bookmark relation.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :ivar kind: The type of relation node. Possible values include:
     'CasesToBookmarks'
    :vartype kind: str or ~azure.mgmt.securityinsight.models.RelationTypes
    :param etag: ETag for relation
    :type etag: str
    :param relation_name: Required. Name of relation
    :type relation_name: str
    :param bookmark_id: Required. The case related bookmark id
    :type bookmark_id: str
    :param case_identifier: Required. The case identifier
    :type case_identifier: str
    :param case_title: The case title
    :type case_title: str
    :param case_severity: The case severity
    :type case_severity: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'readonly': True},
        'relation_name': {'required': True},
        'bookmark_id': {'required': True},
        'case_identifier': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'relation_name': {'key': 'properties.relationName', 'type': 'str'},
        'bookmark_id': {'key': 'properties.bookmarkId', 'type': 'str'},
        'case_identifier': {'key': 'properties.caseIdentifier', 'type': 'str'},
        'case_title': {'key': 'properties.caseTitle', 'type': 'str'},
        'case_severity': {'key': 'properties.caseSeverity', 'type': 'str'},
    }

    def __init__(self, *, relation_name: str, bookmark_id: str, case_identifier: str, etag: str=None, case_title: str=None, case_severity: str=None, **kwargs) -> None:
        super(BookmarkRelation, self).__init__(etag=etag, **kwargs)
        self.relation_name = relation_name
        self.bookmark_id = bookmark_id
        self.case_identifier = case_identifier
        self.case_title = case_title
        self.case_severity = case_severity
