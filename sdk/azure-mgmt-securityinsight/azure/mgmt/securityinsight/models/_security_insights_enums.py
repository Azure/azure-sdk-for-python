# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from enum import Enum


class DataTypeState(str, Enum):

    enabled = "Enabled"
    disabled = "Disabled"


class AlertRuleKind(str, Enum):

    scheduled = "Scheduled"
    microsoft_security_incident_creation = "MicrosoftSecurityIncidentCreation"
    fusion = "Fusion"


class TemplateStatus(str, Enum):

    installed = "Installed"  #: Alert rule template installed. and can not use more then once
    available = "Available"  #: Alert rule template is available.
    not_available = "NotAvailable"  #: Alert rule template is not available


class TriggerOperator(str, Enum):

    greater_than = "GreaterThan"
    less_than = "LessThan"
    equal = "Equal"
    not_equal = "NotEqual"


class AlertSeverity(str, Enum):

    high = "High"  #: High severity
    medium = "Medium"  #: Medium severity
    low = "Low"  #: Low severity
    informational = "Informational"  #: Informational severity


class MicrosoftSecurityProductName(str, Enum):

    microsoft_cloud_app_security = "Microsoft Cloud App Security"
    azure_security_center = "Azure Security Center"
    azure_advanced_threat_protection = "Azure Advanced Threat Protection"
    azure_active_directory_identity_protection = "Azure Active Directory Identity Protection"
    azure_security_centerfor_io_t = "Azure Security Center for IoT"


class AttackTactic(str, Enum):

    initial_access = "InitialAccess"
    execution = "Execution"
    persistence = "Persistence"
    privilege_escalation = "PrivilegeEscalation"
    defense_evasion = "DefenseEvasion"
    credential_access = "CredentialAccess"
    discovery = "Discovery"
    lateral_movement = "LateralMovement"
    collection = "Collection"
    exfiltration = "Exfiltration"
    command_and_control = "CommandAndControl"
    impact = "Impact"


class CaseSeverity(str, Enum):

    critical = "Critical"  #: Critical severity
    high = "High"  #: High severity
    medium = "Medium"  #: Medium severity
    low = "Low"  #: Low severity
    informational = "Informational"  #: Informational severity


class DataConnectorKind(str, Enum):

    azure_active_directory = "AzureActiveDirectory"
    azure_security_center = "AzureSecurityCenter"
    microsoft_cloud_app_security = "MicrosoftCloudAppSecurity"
    threat_intelligence = "ThreatIntelligence"
    office365 = "Office365"
    amazon_web_services_cloud_trail = "AmazonWebServicesCloudTrail"
    azure_advanced_threat_protection = "AzureAdvancedThreatProtection"
    microsoft_defender_advanced_threat_protection = "MicrosoftDefenderAdvancedThreatProtection"


class IncidentClassification(str, Enum):

    undetermined = "Undetermined"  #: Incident classification was undetermined
    true_positive = "TruePositive"  #: Incident was true positive
    benign_positive = "BenignPositive"  #: Incident was benign positive
    false_positive = "FalsePositive"  #: Incident was false positive


class IncidentClassificationReason(str, Enum):

    suspicious_activity = "SuspiciousActivity"  #: Classification reason was suspicious activity
    suspicious_but_expected = "SuspiciousButExpected"  #: Classification reason was suspicious but expected
    incorrect_alert_logic = "IncorrectAlertLogic"  #: Classification reason was incorrect alert logic
    inaccurate_data = "InaccurateData"  #: Classification reason was inaccurate data


class IncidentLabelType(str, Enum):

    user = "User"  #: Label manually created by a user
    system = "System"  #: Label automatically created by the system


class IncidentSeverity(str, Enum):

    high = "High"  #: High severity
    medium = "Medium"  #: Medium severity
    low = "Low"  #: Low severity
    informational = "Informational"  #: Informational severity


class IncidentStatus(str, Enum):

    new = "New"  #: An active incident which isn't being handled currently
    active = "Active"  #: An active incident which is being handled
    closed = "Closed"  #: A non-active incident


class SettingKind(str, Enum):

    ueba_settings = "UebaSettings"
    toggle_settings = "ToggleSettings"


class LicenseStatus(str, Enum):

    enabled = "Enabled"
    disabled = "Disabled"


class StatusInMcas(str, Enum):

    enabled = "Enabled"
    disabled = "Disabled"
