# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .relation_base_py3 import RelationBase


class RelationsModelInput(RelationBase):
    """Relation input model.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :ivar kind: The type of relation node. Possible values include:
     'CasesToBookmarks'
    :vartype kind: str or ~azure.mgmt.securityinsight.models.RelationTypes
    :param etag: ETag for relation
    :type etag: str
    :param relation_name: Name of relation
    :type relation_name: str
    :param source_relation_node: Relation source node
    :type source_relation_node:
     ~azure.mgmt.securityinsight.models.RelationNode
    :param target_relation_node: Relation target node
    :type target_relation_node:
     ~azure.mgmt.securityinsight.models.RelationNode
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'relation_name': {'key': 'properties.relationName', 'type': 'str'},
        'source_relation_node': {'key': 'properties.sourceRelationNode', 'type': 'RelationNode'},
        'target_relation_node': {'key': 'properties.targetRelationNode', 'type': 'RelationNode'},
    }

    def __init__(self, *, etag: str=None, relation_name: str=None, source_relation_node=None, target_relation_node=None, **kwargs) -> None:
        super(RelationsModelInput, self).__init__(etag=etag, **kwargs)
        self.relation_name = relation_name
        self.source_relation_node = source_relation_node
        self.target_relation_node = target_relation_node
