# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Optional, TypeVar

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._workloads_client_operations import build_sap_availability_zone_details_request, build_sap_disk_configurations_request, build_sap_sizing_recommendations_request, build_sap_supported_sku_request
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class WorkloadsClientOperationsMixin:

    @distributed_trace_async
    async def sap_sizing_recommendations(
        self,
        location: str,
        sap_sizing_recommendation: Optional["_models.SAPSizingRecommendationRequest"] = None,
        **kwargs: Any
    ) -> "_models.SAPSizingRecommendationResult":
        """Get SAP sizing recommendations.

        :param location: The name of Azure region.
        :type location: str
        :param sap_sizing_recommendation: SAP Sizing Recommendation Request body. Default value is
         None.
        :type sap_sizing_recommendation: ~azure.mgmt.workloads.models.SAPSizingRecommendationRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SAPSizingRecommendationResult, or the result of cls(response)
        :rtype: ~azure.mgmt.workloads.models.SAPSizingRecommendationResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SAPSizingRecommendationResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-12-01-preview")  # type: str
        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if sap_sizing_recommendation is not None:
            _json = self._serialize.body(sap_sizing_recommendation, 'SAPSizingRecommendationRequest')
        else:
            _json = None

        request = build_sap_sizing_recommendations_request(
            subscription_id=self._config.subscription_id,
            location=location,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self.sap_sizing_recommendations.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SAPSizingRecommendationResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    sap_sizing_recommendations.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getSizingRecommendations"}  # type: ignore


    @distributed_trace_async
    async def sap_supported_sku(
        self,
        location: str,
        sap_supported_sku: Optional["_models.SAPSupportedSkusRequest"] = None,
        **kwargs: Any
    ) -> "_models.SAPSupportedResourceSkusResult":
        """Get SAP supported SKUs.

        :param location: The name of Azure region.
        :type location: str
        :param sap_supported_sku: SAP Supported SKU Request body. Default value is None.
        :type sap_supported_sku: ~azure.mgmt.workloads.models.SAPSupportedSkusRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SAPSupportedResourceSkusResult, or the result of cls(response)
        :rtype: ~azure.mgmt.workloads.models.SAPSupportedResourceSkusResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SAPSupportedResourceSkusResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-12-01-preview")  # type: str
        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if sap_supported_sku is not None:
            _json = self._serialize.body(sap_supported_sku, 'SAPSupportedSkusRequest')
        else:
            _json = None

        request = build_sap_supported_sku_request(
            subscription_id=self._config.subscription_id,
            location=location,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self.sap_supported_sku.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SAPSupportedResourceSkusResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    sap_supported_sku.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getSapSupportedSku"}  # type: ignore


    @distributed_trace_async
    async def sap_disk_configurations(
        self,
        location: str,
        sap_disk_configurations: Optional["_models.SAPDiskConfigurationsRequest"] = None,
        **kwargs: Any
    ) -> "_models.SAPDiskConfigurationsResult":
        """Get SAP Disk Configurations.

        :param location: The name of Azure region.
        :type location: str
        :param sap_disk_configurations: SAP Disk Configurations Request body. Default value is None.
        :type sap_disk_configurations: ~azure.mgmt.workloads.models.SAPDiskConfigurationsRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SAPDiskConfigurationsResult, or the result of cls(response)
        :rtype: ~azure.mgmt.workloads.models.SAPDiskConfigurationsResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SAPDiskConfigurationsResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-12-01-preview")  # type: str
        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if sap_disk_configurations is not None:
            _json = self._serialize.body(sap_disk_configurations, 'SAPDiskConfigurationsRequest')
        else:
            _json = None

        request = build_sap_disk_configurations_request(
            subscription_id=self._config.subscription_id,
            location=location,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self.sap_disk_configurations.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SAPDiskConfigurationsResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    sap_disk_configurations.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getDiskConfigurations"}  # type: ignore


    @distributed_trace_async
    async def sap_availability_zone_details(
        self,
        location: str,
        sap_availability_zone_details: Optional["_models.SAPAvailabilityZoneDetailsRequest"] = None,
        **kwargs: Any
    ) -> "_models.SAPAvailabilityZoneDetailsResult":
        """Get SAP Availability Zone Details.

        :param location: The name of Azure region.
        :type location: str
        :param sap_availability_zone_details: SAP Availability Zone Details Request body. Default value
         is None.
        :type sap_availability_zone_details:
         ~azure.mgmt.workloads.models.SAPAvailabilityZoneDetailsRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SAPAvailabilityZoneDetailsResult, or the result of cls(response)
        :rtype: ~azure.mgmt.workloads.models.SAPAvailabilityZoneDetailsResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SAPAvailabilityZoneDetailsResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-12-01-preview")  # type: str
        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if sap_availability_zone_details is not None:
            _json = self._serialize.body(sap_availability_zone_details, 'SAPAvailabilityZoneDetailsRequest')
        else:
            _json = None

        request = build_sap_availability_zone_details_request(
            subscription_id=self._config.subscription_id,
            location=location,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self.sap_availability_zone_details.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SAPAvailabilityZoneDetailsResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    sap_availability_zone_details.metadata = {'url': "/subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getAvailabilityZoneDetails"}  # type: ignore

