# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class ApiError(Model):
    """ApiError.

    :param code: Gets or sets the azure metrics error code
    :type code: str
    :param message: Gets or sets the azure metrics error message
    :type message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ApiError, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)


class ApiFailureResponse(Model):
    """ApiFailureResponse.

    :param error:
    :type error: ~azure.monitor.models.ApiError
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ApiError'},
    }

    def __init__(self, **kwargs):
        super(ApiFailureResponse, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class AzureMetricsBaseData(Model):
    """AzureMetricsBaseData.

    All required parameters must be populated in order to send to Azure.

    :param metric: Required. Gets or sets the Metric name
    :type metric: str
    :param namespace: Required. Gets or sets the Metric namespace
    :type namespace: str
    :param dim_names: Gets or sets the list of dimension names (optional)
    :type dim_names: list[str]
    :param series: Required. Gets or sets the list of time series data for the
     metric (one per unique dimension combination)
    :type series: list[~azure.monitor.models.AzureTimeSeriesData]
    """

    _validation = {
        'metric': {'required': True},
        'namespace': {'required': True},
        'series': {'required': True},
    }

    _attribute_map = {
        'metric': {'key': 'metric', 'type': 'str'},
        'namespace': {'key': 'namespace', 'type': 'str'},
        'dim_names': {'key': 'dimNames', 'type': '[str]'},
        'series': {'key': 'series', 'type': '[AzureTimeSeriesData]'},
    }

    def __init__(self, **kwargs):
        super(AzureMetricsBaseData, self).__init__(**kwargs)
        self.metric = kwargs.get('metric', None)
        self.namespace = kwargs.get('namespace', None)
        self.dim_names = kwargs.get('dim_names', None)
        self.series = kwargs.get('series', None)


class AzureMetricsData(Model):
    """AzureMetricsData.

    All required parameters must be populated in order to send to Azure.

    :param base_data: Required.
    :type base_data: ~azure.monitor.models.AzureMetricsBaseData
    """

    _validation = {
        'base_data': {'required': True},
    }

    _attribute_map = {
        'base_data': {'key': 'baseData', 'type': 'AzureMetricsBaseData'},
    }

    def __init__(self, **kwargs):
        super(AzureMetricsData, self).__init__(**kwargs)
        self.base_data = kwargs.get('base_data', None)


class AzureMetricsDocument(Model):
    """AzureMetricsDocument.

    All required parameters must be populated in order to send to Azure.

    :param time: Required. Gets or sets Time property (in ISO 8601 format)
    :type time: str
    :param data: Required.
    :type data: ~azure.monitor.models.AzureMetricsData
    """

    _validation = {
        'time': {'required': True},
        'data': {'required': True},
    }

    _attribute_map = {
        'time': {'key': 'time', 'type': 'str'},
        'data': {'key': 'data', 'type': 'AzureMetricsData'},
    }

    def __init__(self, **kwargs):
        super(AzureMetricsDocument, self).__init__(**kwargs)
        self.time = kwargs.get('time', None)
        self.data = kwargs.get('data', None)


class AzureMetricsResult(Model):
    """AzureMetricsResult.

    :param status_code: Http status code response
    :type status_code: int
    :param api_failure_response:
    :type api_failure_response: ~azure.monitor.models.ApiFailureResponse
    """

    _attribute_map = {
        'status_code': {'key': 'statusCode', 'type': 'int'},
        'api_failure_response': {'key': 'apiFailureResponse', 'type': 'ApiFailureResponse'},
    }

    def __init__(self, **kwargs):
        super(AzureMetricsResult, self).__init__(**kwargs)
        self.status_code = kwargs.get('status_code', None)
        self.api_failure_response = kwargs.get('api_failure_response', None)


class AzureMetricsResultException(HttpOperationError):
    """Server responsed with exception of type: 'AzureMetricsResult'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(AzureMetricsResultException, self).__init__(deserialize, response, 'AzureMetricsResult', *args)


class AzureTimeSeriesData(Model):
    """AzureTimeSeriesData.

    All required parameters must be populated in order to send to Azure.

    :param dim_values: Gets or sets dimension values
    :type dim_values: list[str]
    :param min: Required. Gets or sets Min value
    :type min: float
    :param max: Required. Gets or sets Max value
    :type max: float
    :param sum: Required. Gets or sets Sum value
    :type sum: float
    :param count: Required. Gets or sets Count value
    :type count: int
    """

    _validation = {
        'min': {'required': True},
        'max': {'required': True},
        'sum': {'required': True},
        'count': {'required': True},
    }

    _attribute_map = {
        'dim_values': {'key': 'dimValues', 'type': '[str]'},
        'min': {'key': 'min', 'type': 'float'},
        'max': {'key': 'max', 'type': 'float'},
        'sum': {'key': 'sum', 'type': 'float'},
        'count': {'key': 'count', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(AzureTimeSeriesData, self).__init__(**kwargs)
        self.dim_values = kwargs.get('dim_values', None)
        self.min = kwargs.get('min', None)
        self.max = kwargs.get('max', None)
        self.sum = kwargs.get('sum', None)
        self.count = kwargs.get('count', None)


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }
