# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import ContainerRegistryPreparer
from testpreparer_async import ContainerRegistryClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestContainerRegistryContainerRegistryBlobOperationsAsync(ContainerRegistryClientTestBaseAsync):
    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_blob_get_blob(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry_blob.get_blob(
            name="str"
,
            digest="str"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_blob_check_blob_exists(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry_blob.check_blob_exists(
            name="str"
,
            digest="str"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_blob_delete_blob(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry_blob.delete_blob(
            name="str"
,
            digest="str"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_blob_mount_blob(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry_blob.mount_blob(
            name="str"
,
            from_parameter="str"
,
            mount="str"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_blob_get_upload_status(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry_blob.get_upload_status(
            location="str"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_blob_upload_chunk(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry_blob.upload_chunk(
            location="str"
,
            value=bytes("bytes", encoding="utf-8")
,
            content_type="str"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_blob_complete_upload(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry_blob.complete_upload(
            location="str"
,
            digest="str"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_blob_cancel_upload(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry_blob.cancel_upload(
            location="str"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_blob_start_upload(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry_blob.start_upload(
            name="str"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_blob_get_chunk(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry_blob.get_chunk(
            name="str"
,
            digest="str"
,
            range="str"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_blob_check_chunk_exists(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry_blob.check_chunk_exists(
            name="str"
,
            digest="str"
,
            range="str"
,
        )
        
        # please add some check logic here by yourself
        # ...

