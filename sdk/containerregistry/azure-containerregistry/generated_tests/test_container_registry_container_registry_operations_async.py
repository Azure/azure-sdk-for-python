# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import ContainerRegistryPreparer
from testpreparer_async import ContainerRegistryClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestContainerRegistryContainerRegistryOperationsAsync(ContainerRegistryClientTestBaseAsync):
    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_check_docker_v2_support(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry.check_docker_v2_support(
        )
        
        # please add some check logic here by yourself
        # ...

    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_get_manifest(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry.get_manifest(
            name="str"
,
            reference="str"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_create_manifest(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry.create_manifest(
            name="str"
,
            reference="str"
,
            payload={
                "schemaVersion": 0
            }
,
        )
        
        # please add some check logic here by yourself
        # ...

    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_delete_manifest(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry.delete_manifest(
            name="str"
,
            reference="str"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_get_repositories(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = client.container_registry.get_repositories(
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_get_properties(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry.get_properties(
            name="str"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_delete_repository(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry.delete_repository(
            name="str"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_update_properties(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry.update_properties(
            name="str"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_get_tags(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry.get_tags(
            name="str"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_get_tag_properties(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry.get_tag_properties(
            name="str"
,
            reference="str"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_update_tag_attributes(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry.update_tag_attributes(
            name="str"
,
            reference="str"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_delete_tag(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry.delete_tag(
            name="str"
,
            reference="str"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_get_manifests(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry.get_manifests(
            name="str"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_get_manifest_properties(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry.get_manifest_properties(
            name="str"
,
            digest="str"
,
        )
        
        # please add some check logic here by yourself
        # ...

    @ContainerRegistryPreparer()
    @recorded_by_proxy_async
    async def test_container_registry_update_manifest_properties(self, containerregistry_endpoint):
        client = self.create_async_client(endpoint=containerregistry_endpoint)
        response = await client.container_registry.update_manifest_properties(
            name="str"
,
            digest="str"
,
        )
        
        # please add some check logic here by yourself
        # ...

