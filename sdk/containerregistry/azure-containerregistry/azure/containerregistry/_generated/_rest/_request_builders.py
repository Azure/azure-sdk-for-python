# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.4.0, generator: @autorest/python@5.6.4)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING

from azure.core.pipeline.transport._base import _format_url_section
from azure.core.rest import HttpRequest
from msrest import Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, IO, Optional

_SERIALIZER = Serializer()


def build_containerregistry_check_docker_v2_support_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Tells whether this Docker Registry instance supports Docker Registry HTTP API v2.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/v2/')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistry_get_manifest_request(
    name,  # type: str
    reference,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Get the manifest identified by ``name`` and ``reference`` where ``reference`` can be a tag or
    digest.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :param name: Name of the image (including the namespace).
    :type name: str
    :param reference: A tag or a digest, pointing to a specific image.
    :type reference: str
    :keyword accept: Accept header string delimited by comma. For example,
     application/vnd.docker.distribution.manifest.v2+json.
    :paramtype accept: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    accept = kwargs.pop('accept', None)  # type: Optional[str]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/v2/{name}/manifests/{reference}')
    path_format_arguments = {
        'name': _SERIALIZER.url("name", name, 'str'),
        'reference': _SERIALIZER.url("reference", reference, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if accept is not None:
        header_parameters['accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistry_create_manifest_request(
    name,  # type: str
    reference,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Put the manifest identified by ``name`` and ``reference`` where ``reference`` can be a tag or
    digest.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :param name: Name of the image (including the namespace).
    :type name: str
    :param reference: A tag or a digest, pointing to a specific image.
    :type reference: str
    :keyword content: Manifest body, can take v1 or v2 values depending on accept header.
    :paramtype content: Any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    content_type = kwargs.pop("content_type", None)
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/v2/{name}/manifests/{reference}')
    path_format_arguments = {
        'name': _SERIALIZER.url("name", name, 'str'),
        'reference': _SERIALIZER.url("reference", reference, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistry_delete_manifest_request(
    name,  # type: str
    reference,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Delete the manifest identified by ``name`` and ``reference``. Note that a manifest can *only*
    be deleted by ``digest``.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :param name: Name of the image (including the namespace).
    :type name: str
    :param reference: Digest of a BLOB.
    :type reference: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/v2/{name}/manifests/{reference}')
    path_format_arguments = {
        'name': _SERIALIZER.url("name", name, 'str'),
        'reference': _SERIALIZER.url("reference", reference, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistry_get_repositories_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """List repositories.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :keyword last: Query parameter for the last item in previous query. Result set will include
     values lexically after last.
    :paramtype last: str
    :keyword n: query parameter for max number of items.
    :paramtype n: int
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    last = kwargs.pop('last', None)  # type: Optional[str]
    n = kwargs.pop('n', None)  # type: Optional[int]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/acr/v1/_catalog')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if last is not None:
        query_parameters['last'] = _SERIALIZER.query("last", last, 'str')
    if n is not None:
        query_parameters['n'] = _SERIALIZER.query("n", n, 'int')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistry_get_properties_request(
    name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Get repository attributes.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :param name: Name of the image (including the namespace).
    :type name: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/acr/v1/{name}')
    path_format_arguments = {
        'name': _SERIALIZER.url("name", name, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistry_delete_repository_request(
    name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Delete the repository identified by ``name``.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :param name: Name of the image (including the namespace).
    :type name: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/acr/v1/{name}')
    path_format_arguments = {
        'name': _SERIALIZER.url("name", name, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistry_set_properties_request(
    name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Update the attribute identified by ``name`` where ``reference`` is the name of the repository.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :param name: Name of the image (including the namespace).
    :type name: str
    :keyword json: Repository attribute value.
    :paramtype json: Any
    :keyword content: Repository attribute value.
    :paramtype content: Any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    content_type = kwargs.pop("content_type", None)
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/acr/v1/{name}')
    path_format_arguments = {
        'name': _SERIALIZER.url("name", name, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PATCH",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistry_get_tags_request(
    name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """List tags of a repository.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :param name: Name of the image (including the namespace).
    :type name: str
    :keyword last: Query parameter for the last item in previous query. Result set will include
     values lexically after last.
    :paramtype last: str
    :keyword n: query parameter for max number of items.
    :paramtype n: int
    :keyword orderby: orderby query parameter.
    :paramtype orderby: str
    :keyword digest: filter by digest.
    :paramtype digest: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    last = kwargs.pop('last', None)  # type: Optional[str]
    n = kwargs.pop('n', None)  # type: Optional[int]
    orderby = kwargs.pop('orderby', None)  # type: Optional[str]
    digest = kwargs.pop('digest', None)  # type: Optional[str]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/acr/v1/{name}/_tags')
    path_format_arguments = {
        'name': _SERIALIZER.url("name", name, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if last is not None:
        query_parameters['last'] = _SERIALIZER.query("last", last, 'str')
    if n is not None:
        query_parameters['n'] = _SERIALIZER.query("n", n, 'int')
    if orderby is not None:
        query_parameters['orderby'] = _SERIALIZER.query("orderby", orderby, 'str')
    if digest is not None:
        query_parameters['digest'] = _SERIALIZER.query("digest", digest, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistry_get_tag_properties_request(
    name,  # type: str
    reference,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Get tag attributes by tag.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :param name: Name of the image (including the namespace).
    :type name: str
    :param reference: Tag name.
    :type reference: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/acr/v1/{name}/_tags/{reference}')
    path_format_arguments = {
        'name': _SERIALIZER.url("name", name, 'str'),
        'reference': _SERIALIZER.url("reference", reference, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistry_update_tag_attributes_request(
    name,  # type: str
    reference,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Update tag attributes.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :param name: Name of the image (including the namespace).
    :type name: str
    :param reference: Tag name.
    :type reference: str
    :keyword json: Repository attribute value.
    :paramtype json: Any
    :keyword content: Repository attribute value.
    :paramtype content: Any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    content_type = kwargs.pop("content_type", None)
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/acr/v1/{name}/_tags/{reference}')
    path_format_arguments = {
        'name': _SERIALIZER.url("name", name, 'str'),
        'reference': _SERIALIZER.url("reference", reference, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PATCH",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistry_delete_tag_request(
    name,  # type: str
    reference,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Delete tag.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :param name: Name of the image (including the namespace).
    :type name: str
    :param reference: Tag name.
    :type reference: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/acr/v1/{name}/_tags/{reference}')
    path_format_arguments = {
        'name': _SERIALIZER.url("name", name, 'str'),
        'reference': _SERIALIZER.url("reference", reference, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistry_get_manifests_request(
    name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """List manifests of a repository.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :param name: Name of the image (including the namespace).
    :type name: str
    :keyword last: Query parameter for the last item in previous query. Result set will include
     values lexically after last.
    :paramtype last: str
    :keyword n: query parameter for max number of items.
    :paramtype n: int
    :keyword orderby: orderby query parameter.
    :paramtype orderby: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    last = kwargs.pop('last', None)  # type: Optional[str]
    n = kwargs.pop('n', None)  # type: Optional[int]
    orderby = kwargs.pop('orderby', None)  # type: Optional[str]
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/acr/v1/{name}/_manifests')
    path_format_arguments = {
        'name': _SERIALIZER.url("name", name, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if last is not None:
        query_parameters['last'] = _SERIALIZER.query("last", last, 'str')
    if n is not None:
        query_parameters['n'] = _SERIALIZER.query("n", n, 'int')
    if orderby is not None:
        query_parameters['orderby'] = _SERIALIZER.query("orderby", orderby, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistry_get_manifest_properties_request(
    name,  # type: str
    digest,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Get manifest attributes.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :param name: Name of the image (including the namespace).
    :type name: str
    :param digest: Digest of a BLOB.
    :type digest: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/acr/v1/{name}/_manifests/{digest}')
    path_format_arguments = {
        'name': _SERIALIZER.url("name", name, 'str'),
        'digest': _SERIALIZER.url("digest", digest, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistry_update_manifest_properties_request(
    name,  # type: str
    digest,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Update properties of a manifest.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :param name: Name of the image (including the namespace).
    :type name: str
    :param digest: Digest of a BLOB.
    :type digest: str
    :keyword json: Repository attribute value.
    :paramtype json: Any
    :keyword content: Repository attribute value.
    :paramtype content: Any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    content_type = kwargs.pop("content_type", None)
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/acr/v1/{name}/_manifests/{digest}')
    path_format_arguments = {
        'name': _SERIALIZER.url("name", name, 'str'),
        'digest': _SERIALIZER.url("digest", digest, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PATCH",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistryblob_get_blob_request(
    name,  # type: str
    digest,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Retrieve the blob from the registry identified by digest.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :param name: Name of the image (including the namespace).
    :type name: str
    :param digest: Digest of a BLOB.
    :type digest: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    accept = "application/octet-stream"

    # Construct URL
    url = kwargs.pop("template_url", '/v2/{name}/blobs/{digest}')
    path_format_arguments = {
        'name': _SERIALIZER.url("name", name, 'str'),
        'digest': _SERIALIZER.url("digest", digest, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistryblob_check_blob_exists_request(
    name,  # type: str
    digest,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Same as GET, except only the headers are returned.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :param name: Name of the image (including the namespace).
    :type name: str
    :param digest: Digest of a BLOB.
    :type digest: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/v2/{name}/blobs/{digest}')
    path_format_arguments = {
        'name': _SERIALIZER.url("name", name, 'str'),
        'digest': _SERIALIZER.url("digest", digest, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="HEAD",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistryblob_delete_blob_request(
    name,  # type: str
    digest,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Removes an already uploaded blob.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :param name: Name of the image (including the namespace).
    :type name: str
    :param digest: Digest of a BLOB.
    :type digest: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    accept = "application/octet-stream"

    # Construct URL
    url = kwargs.pop("template_url", '/v2/{name}/blobs/{digest}')
    path_format_arguments = {
        'name': _SERIALIZER.url("name", name, 'str'),
        'digest': _SERIALIZER.url("digest", digest, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistryblob_mount_blob_request(
    name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Mount a blob identified by the ``mount`` parameter from another repository.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :param name: Name of the image (including the namespace).
    :type name: str
    :keyword from_parameter: Name of the source repository.
    :paramtype from_parameter: str
    :keyword mount: Digest of blob to mount from the source repository.
    :paramtype mount: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    from_parameter = kwargs.pop('from_parameter')  # type: str
    mount = kwargs.pop('mount')  # type: str
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/v2/{name}/blobs/uploads/')
    path_format_arguments = {
        'name': _SERIALIZER.url("name", name, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['from'] = _SERIALIZER.query("from_parameter", from_parameter, 'str')
    query_parameters['mount'] = _SERIALIZER.query("mount", mount, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistryblob_get_upload_status_request(
    location,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Retrieve status of upload identified by uuid. The primary purpose of this endpoint is to
    resolve the current status of a resumable upload.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :param location: Link acquired from upload start or previous chunk. Note, do not include
     initial / (must do substring(1) ).
    :type location: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/{nextBlobUuidLink}')
    path_format_arguments = {
        'nextBlobUuidLink': _SERIALIZER.url("location", location, 'str', skip_quote=True),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistryblob_upload_chunk_request(
    location,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Upload a stream of data without completing the upload.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :param location: Link acquired from upload start or previous chunk. Note, do not include
     initial / (must do substring(1) ).
    :type location: str
    :keyword content: Raw data of blob.
    :paramtype content: IO
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    content_type = kwargs.pop("content_type", None)
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/{nextBlobUuidLink}')
    path_format_arguments = {
        'nextBlobUuidLink': _SERIALIZER.url("location", location, 'str', skip_quote=True),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PATCH",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistryblob_complete_upload_request(
    location,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Complete the upload, providing all the data in the body, if necessary. A request without a body
    will just complete the upload with previously uploaded content.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :param location: Link acquired from upload start or previous chunk. Note, do not include
     initial / (must do substring(1) ).
    :type location: str
    :keyword content: Optional raw data of blob.
    :paramtype content: IO
    :keyword digest: Digest of a BLOB.
    :paramtype digest: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    digest = kwargs.pop('digest')  # type: str
    content_type = kwargs.pop("content_type", None)
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/{nextBlobUuidLink}')
    path_format_arguments = {
        'nextBlobUuidLink': _SERIALIZER.url("location", location, 'str', skip_quote=True),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['digest'] = _SERIALIZER.query("digest", digest, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistryblob_cancel_upload_request(
    location,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Cancel outstanding upload processes, releasing associated resources. If this is not called, the
    unfinished uploads will eventually timeout.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :param location: Link acquired from upload start or previous chunk. Note, do not include
     initial / (must do substring(1) ).
    :type location: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/{nextBlobUuidLink}')
    path_format_arguments = {
        'nextBlobUuidLink': _SERIALIZER.url("location", location, 'str', skip_quote=True),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistryblob_start_upload_request(
    name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Initiate a resumable blob upload with an empty request body.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :param name: Name of the image (including the namespace).
    :type name: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/v2/{name}/blobs/uploads/')
    path_format_arguments = {
        'name': _SERIALIZER.url("name", name, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistryblob_get_chunk_request(
    name,  # type: str
    digest,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Retrieve the blob from the registry identified by ``digest``. This endpoint may also support
    RFC7233 compliant range requests. Support can be detected by issuing a HEAD request. If the
    header ``Accept-Range: bytes`` is returned, range requests can be used to fetch partial
    content.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :param name: Name of the image (including the namespace).
    :type name: str
    :param digest: Digest of a BLOB.
    :type digest: str
    :keyword range: Format : bytes=:code:`<start>`-:code:`<end>`,  HTTP Range header specifying
     blob chunk.
    :paramtype range: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    range = kwargs.pop('range')  # type: str
    accept = "application/octet-stream"

    # Construct URL
    url = kwargs.pop("template_url", '/v2/{name}/blobs/{digest}')
    path_format_arguments = {
        'name': _SERIALIZER.url("name", name, 'str'),
        'digest': _SERIALIZER.url("digest", digest, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    header_parameters['Range'] = _SERIALIZER.header("range", range, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_containerregistryblob_check_chunk_exists_request(
    name,  # type: str
    digest,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Same as GET, except only the headers are returned.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :param name: Name of the image (including the namespace).
    :type name: str
    :param digest: Digest of a BLOB.
    :type digest: str
    :keyword range: Format : bytes=:code:`<start>`-:code:`<end>`,  HTTP Range header specifying
     blob chunk.
    :paramtype range: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    range = kwargs.pop('range')  # type: str
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/v2/{name}/blobs/{digest}')
    path_format_arguments = {
        'name': _SERIALIZER.url("name", name, 'str'),
        'digest': _SERIALIZER.url("digest", digest, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')
    header_parameters['Range'] = _SERIALIZER.header("range", range, 'str')

    return HttpRequest(
        method="HEAD",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_authentication_exchange_aad_access_token_for_acr_refresh_token_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Exchange AAD tokens for an ACR refresh Token.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :keyword data: Can take a value of access_token.
    :paramtype data: str
    :keyword content: Indicates the name of your Azure container registry.
    :paramtype content: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    content_type = kwargs.pop("content_type", None)
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/oauth2/exchange')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )


def build_authentication_exchange_acr_refresh_token_for_acr_access_token_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Exchange ACR Refresh token for an ACR Access Token.

    See https://aka.ms/azsdk/python/llcwiki for how to incorporate this request_builder into your code flow.

    :keyword data: Grant type is expected to be refresh_token.
    :paramtype data: str
    :keyword content: Indicates the name of your Azure container registry.
    :paramtype content: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's `send_request` method.
     See https://aka.ms/azsdk/python/llcwiki for how to incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """
    content_type = kwargs.pop("content_type", None)
    accept = "application/json"

    # Construct URL
    url = kwargs.pop("template_url", '/oauth2/token')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        headers=header_parameters,
        **kwargs
    )

