# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import TYPE_CHECKING

from azure.core import PipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any

    from azure.core.credentials import TokenCredential

from ._configuration import AzureContainerRegistryConfiguration
from .operations import V2SupportOperations
from .operations import ManifestsOperations
from .operations import BlobOperations
from .operations import RepositoryOperations
from .operations import TagOperations
from .operations import RefreshTokensOperations
from .operations import AccessTokensOperations
from . import models


class AzureContainerRegistry(object):
    """Metadata API definition for the Azure Container Registry runtime.

    :ivar v2_support: V2SupportOperations operations
    :vartype v2_support: azure.containerregistry.operations.V2SupportOperations
    :ivar manifests: ManifestsOperations operations
    :vartype manifests: azure.containerregistry.operations.ManifestsOperations
    :ivar blob: BlobOperations operations
    :vartype blob: azure.containerregistry.operations.BlobOperations
    :ivar repository: RepositoryOperations operations
    :vartype repository: azure.containerregistry.operations.RepositoryOperations
    :ivar tag: TagOperations operations
    :vartype tag: azure.containerregistry.operations.TagOperations
    :ivar refresh_tokens: RefreshTokensOperations operations
    :vartype refresh_tokens: azure.containerregistry.operations.RefreshTokensOperations
    :ivar access_tokens: AccessTokensOperations operations
    :vartype access_tokens: azure.containerregistry.operations.AccessTokensOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials.TokenCredential
    :param url: Registry login URL.
    :type url: str
    """

    def __init__(
        self,
        credential,  # type: "TokenCredential"
        url,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        base_url = '{url}'
        self._config = AzureContainerRegistryConfiguration(credential, url, **kwargs)
        self._client = PipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)

        self.v2_support = V2SupportOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.manifests = ManifestsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.blob = BlobOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.repository = RepositoryOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.tag = TagOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.refresh_tokens = RefreshTokensOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.access_tokens = AccessTokensOperations(
            self._client, self._config, self._serialize, self._deserialize)

    def close(self):
        # type: () -> None
        self._client.close()

    def __enter__(self):
        # type: () -> AzureContainerRegistry
        self._client.__enter__()
        return self

    def __exit__(self, *exc_details):
        # type: (Any) -> None
        self._client.__exit__(*exc_details)
