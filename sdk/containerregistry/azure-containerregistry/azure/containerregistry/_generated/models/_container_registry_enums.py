# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.2.4, generator: {generator})
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class RegistryArtifactOrderBy(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Sort options for ordering registry artifacts in a collection.
    """

    #: Order registry artifacts by LastUpdatedOn field, from most recently updated to least recently
    #: updated.
    LAST_UPDATED_ON_DESCENDING = "timedesc"
    #: Order  registry artifacts by LastUpdatedOn field, from least recently updated to most recently
    #: updated.
    LAST_UPDATED_ON_ASCENDING = "timeasc"

class TagOrderBy(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    #: Order tags by LastUpdatedOn field, from most recently updated to least recently updated.
    LAST_UPDATED_ON_DESCENDING = "timedesc"
    #: Order tags by LastUpdatedOn field, from least recently updated to most recently updated.
    LAST_UPDATED_ON_ASCENDING = "timeasc"
