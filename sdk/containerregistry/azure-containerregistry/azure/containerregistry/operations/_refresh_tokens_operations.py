# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.pipeline import ClientRawResponse

from .. import models


class RefreshTokensOperations(object):
    """RefreshTokensOperations operations.

    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self.config = config

    def get_from_exchange(
            self, grant_type, service, tenant=None, refresh_token=None, access_token=None, custom_headers=None, raw=False, **operation_config):
        """Exchange AAD tokens for an ACR refresh Token.

        :param grant_type: Can take a value of access_token_refresh_token, or
         access_token, or refresh_token. Possible values include:
         'access_token_refresh_token', 'access_token', 'refresh_token'
        :type grant_type: str
        :param service: Indicates the name of your Azure container registry.
        :type service: str
        :param tenant: AAD tenant associated to the AAD credentials.
        :type tenant: str
        :param refresh_token: AAD refresh token, mandatory when grant_type is
         access_token_refresh_token or refresh_token
        :type refresh_token: str
        :param access_token: AAD access token, mandatory when grant_type is
         access_token_refresh_token or access_token.
        :type access_token: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: RefreshToken or ClientRawResponse if raw=true
        :rtype: ~azure.containerregistry.models.RefreshToken or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`AcrErrorsException<azure.containerregistry.models.AcrErrorsException>`
        """
        # Construct URL
        url = self.get_from_exchange.metadata['url']
        path_format_arguments = {
            'url': self._serialize.url("self.config.login_uri", self.config.login_uri, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/x-www-form-urlencoded'
        if custom_headers:
            header_parameters.update(custom_headers)

        # Construct form data
        form_data_content = {
            'grant_type': grant_type,
            'service': service,
            'tenant': tenant,
            'refresh_token': refresh_token,
            'access_token': access_token,
        }

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, form_content=form_data_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.AcrErrorsException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('RefreshToken', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_from_exchange.metadata = {'url': '/oauth2/exchange'}
