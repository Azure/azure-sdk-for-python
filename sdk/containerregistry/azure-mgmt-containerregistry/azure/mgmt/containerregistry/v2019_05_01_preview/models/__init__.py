# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from ._models_py3 import ActiveDirectoryObject
from ._models_py3 import GenerateCredentialsParameters
from ._models_py3 import GenerateCredentialsResult
from ._models_py3 import ProxyResource
from ._models_py3 import ScopeMap
from ._models_py3 import ScopeMapListResult
from ._models_py3 import ScopeMapUpdateParameters
from ._models_py3 import SystemData
from ._models_py3 import Token
from ._models_py3 import TokenCertificate
from ._models_py3 import TokenCredentialsProperties
from ._models_py3 import TokenListResult
from ._models_py3 import TokenPassword
from ._models_py3 import TokenUpdateParameters

from ._container_registry_management_client_enums import CreatedByType
from ._container_registry_management_client_enums import LastModifiedByType
from ._container_registry_management_client_enums import ProvisioningState
from ._container_registry_management_client_enums import TokenCertificateName
from ._container_registry_management_client_enums import TokenPasswordName
from ._container_registry_management_client_enums import TokenStatus
from ._patch import __all__ as _patch_all
from ._patch import *  # pylint: disable=unused-wildcard-import
from ._patch import patch_sdk as _patch_sdk

__all__ = [
    "ActiveDirectoryObject",
    "GenerateCredentialsParameters",
    "GenerateCredentialsResult",
    "ProxyResource",
    "ScopeMap",
    "ScopeMapListResult",
    "ScopeMapUpdateParameters",
    "SystemData",
    "Token",
    "TokenCertificate",
    "TokenCredentialsProperties",
    "TokenListResult",
    "TokenPassword",
    "TokenUpdateParameters",
    "CreatedByType",
    "LastModifiedByType",
    "ProvisioningState",
    "TokenCertificateName",
    "TokenPasswordName",
    "TokenStatus",
]
__all__.extend([p for p in _patch_all if p not in __all__])
_patch_sdk()
