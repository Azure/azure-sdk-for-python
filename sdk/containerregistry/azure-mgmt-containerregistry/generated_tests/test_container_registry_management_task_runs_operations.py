# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.containerregistry import ContainerRegistryManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestContainerRegistryManagementTaskRunsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(ContainerRegistryManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_task_runs_get(self, resource_group):
        response = self.client.task_runs.get(
            resource_group_name=resource_group.name,
            registry_name="str",
            task_run_name="str",
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_task_runs_begin_create(self, resource_group):
        response = self.client.task_runs.begin_create(
            resource_group_name=resource_group.name,
            registry_name="str",
            task_run_name="str",
            task_run={
                "forceUpdateTag": "str",
                "id": "str",
                "identity": {
                    "principalId": "str",
                    "tenantId": "str",
                    "type": "str",
                    "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                },
                "location": "str",
                "name": "str",
                "provisioningState": "str",
                "runRequest": "run_request",
                "runResult": {
                    "agentConfiguration": {"cpu": 0},
                    "agentPoolName": "str",
                    "createTime": "2020-02-20 00:00:00",
                    "customRegistries": ["str"],
                    "finishTime": "2020-02-20 00:00:00",
                    "id": "str",
                    "imageUpdateTrigger": {
                        "id": "str",
                        "images": [{"digest": "str", "registry": "str", "repository": "str", "tag": "str"}],
                        "timestamp": "2020-02-20 00:00:00",
                    },
                    "isArchiveEnabled": False,
                    "lastUpdatedTime": "2020-02-20 00:00:00",
                    "logArtifact": {"digest": "str", "registry": "str", "repository": "str", "tag": "str"},
                    "name": "str",
                    "outputImages": [{"digest": "str", "registry": "str", "repository": "str", "tag": "str"}],
                    "platform": {"os": "str", "architecture": "str", "variant": "str"},
                    "provisioningState": "str",
                    "runErrorMessage": "str",
                    "runId": "str",
                    "runType": "str",
                    "sourceRegistryAuth": "str",
                    "sourceTrigger": {
                        "branchName": "str",
                        "commitId": "str",
                        "eventType": "str",
                        "id": "str",
                        "providerType": "str",
                        "pullRequestId": "str",
                        "repositoryUrl": "str",
                    },
                    "startTime": "2020-02-20 00:00:00",
                    "status": "str",
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "task": "str",
                    "timerTrigger": {"scheduleOccurrence": "str", "timerTriggerName": "str"},
                    "type": "str",
                    "updateTriggerToken": "str",
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "type": "str",
            },
            api_version="2025-03-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_task_runs_delete(self, resource_group):
        response = self.client.task_runs.delete(
            resource_group_name=resource_group.name,
            registry_name="str",
            task_run_name="str",
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_task_runs_begin_update(self, resource_group):
        response = self.client.task_runs.begin_update(
            resource_group_name=resource_group.name,
            registry_name="str",
            task_run_name="str",
            update_parameters={
                "forceUpdateTag": "str",
                "identity": {
                    "principalId": "str",
                    "tenantId": "str",
                    "type": "str",
                    "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                },
                "location": "str",
                "runRequest": "run_request",
                "tags": {"str": "str"},
            },
            api_version="2025-03-01-preview",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_task_runs_get_details(self, resource_group):
        response = self.client.task_runs.get_details(
            resource_group_name=resource_group.name,
            registry_name="str",
            task_run_name="str",
            api_version="2025-03-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_task_runs_list(self, resource_group):
        response = self.client.task_runs.list(
            resource_group_name=resource_group.name,
            registry_name="str",
            api_version="2025-03-01-preview",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...
