# Stubs for azure.storage.filedatalake._data_lake_file_client (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._deserialize import process_storage_error
from ._generated.models import StorageErrorException
from ._models import FileProperties
from ._path_client import PathClient
from ._serialize import get_access_conditions, get_mod_conditions, get_path_http_headers
from ._shared.base_client import parse_connection_str
from ._shared.request_handlers import get_length, read_length
from ._shared.response_handlers import return_response_headers
from typing import Any, Optional

class DataLakeFileClient(PathClient):
    def __init__(self, account_url: str, file_system_name: str, file_path: str, credential: Optional[Any]=..., **kwargs: Any) -> None: ...
    @classmethod
    def from_connection_string(cls: Any, conn_str: str, file_system_name: str, file_path: str, credential: Optional[Any]=..., **kwargs: Any) -> DataLakeFileClient: ...
    def create_file(self, content_settings: Optional[ContentSettings]=..., metadata: Optional[Dict[str, str]]=..., **kwargs: Any) -> Dict[str, Union[str, datetime]]: ...
    def delete_file(self, **kwargs: Any) -> None: ...
    def get_file_properties(self, **kwargs: Any) -> FileProperties: ...
    def append_data(self, data: Union[AnyStr, Iterable[AnyStr], IO[AnyStr]], offset: int, length: Optional[int]=..., **kwargs: Any) -> Dict[str, Union[str, datetime, int]]: ...
    def flush_data(self, offset: int, retain_uncommitted_data: Optional[bool]=..., **kwargs: Any) -> Dict[str, Union[str, datetime]]: ...
    def read_file(self, offset: Optional[int]=..., length: Optional[int]=..., stream: Optional[IO]=..., **kwargs: Any) -> Union[int, byte]: ...
    def rename_file(self, rename_destination: Any, **kwargs: Any): ...
