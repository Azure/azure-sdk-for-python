# Stubs for azure.storage.filedatalake.aio._data_lake_file_client_async (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .._data_lake_file_client import DataLakeFileClient as DataLakeFileClientBase
from .._deserialize import process_storage_error
from .._generated.models import StorageErrorException
from .._models import FileProperties
from ..aio._upload_helper import upload_datalake_file
from ._path_client_async import PathClient
from typing import Any, Optional

class DataLakeFileClient(PathClient, DataLakeFileClientBase):
    def __init__(self, account_url: str, file_system_name: str, file_path: str, credential: Optional[Any]=..., **kwargs: Any) -> None: ...
    async def create_file(self, content_settings: Optional[ContentSettings]=..., metadata: Optional[Dict[str, str]]=..., **kwargs: Any) -> Dict[str, Union[str, datetime]]: ...
    async def delete_file(self, **kwargs: Any) -> None: ...
    async def get_file_properties(self, **kwargs: Any) -> FileProperties: ...
    def upload_data(self, data: Union[AnyStr, Iterable[AnyStr], IO[AnyStr]], length: Optional[int]=..., metadata: Optional[bool]=..., **kwargs: Any) -> Dict[str, Any]: ...
    async def append_data(self, data: Union[AnyStr, Iterable[AnyStr], IO[AnyStr]], offset: int, length: Optional[int]=..., **kwargs: Any) -> Dict[str, Union[str, datetime, int]]: ...
    async def flush_data(self, offset: int, retain_uncommitted_data: Optional[bool]=..., **kwargs: Any) -> Dict[str, Union[str, datetime]]: ...
    async def read_file(self, offset: Optional[int]=..., length: Optional[int]=..., stream: Optional[IO]=..., **kwargs: Any) -> Union[int, byte]: ...
    async def rename_file(self, new_name: Any, **kwargs: Any): ...
