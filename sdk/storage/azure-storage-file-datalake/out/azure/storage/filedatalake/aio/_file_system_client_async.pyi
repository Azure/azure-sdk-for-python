# Stubs for azure.storage.filedatalake.aio._file_system_client_async (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .._file_system_client import FileSystemClient as FileSystemClientBase
from .._generated.aio import DataLakeStorageClient
from .._models import ContentSettings, FileSystemProperties, PublicAccess
from .._shared.base_client_async import AsyncStorageAccountHostsMixin
from .._shared.policies_async import ExponentialRetry
from ._data_lake_directory_client_async import DataLakeDirectoryClient
from ._data_lake_file_client_async import DataLakeFileClient
from ._data_lake_lease_async import DataLakeLeaseClient
from ._models import PathPropertiesPaged
from datetime import datetime
from typing import Any, Dict, Optional, Union

class FileSystemClient(AsyncStorageAccountHostsMixin, FileSystemClientBase):
    def __init__(self, account_url: str, file_system_name: str, credential: Optional[Any]=..., **kwargs: Any) -> None: ...
    async def acquire_lease(self, lease_duration: int=..., lease_id: Optional[str]=..., **kwargs: Any) -> DataLakeLeaseClient: ...
    async def create_file_system(self, metadata: Optional[Dict[str, str]]=..., public_access: Optional[PublicAccess]=..., **kwargs: Any) -> Dict[str, Union[str, datetime]]: ...
    async def delete_file_system(self, **kwargs: Any) -> None: ...
    async def get_file_system_properties(self, **kwargs: Any) -> FileSystemProperties: ...
    async def set_file_system_metadata(self, metadata: Optional[Dict[str, str]]=..., **kwargs: Any) -> Dict[str, Union[str, datetime]]: ...
    async def set_file_system_access_policy(self, signed_identifiers: Dict[str, AccessPolicy], public_access: Optional[Union[str, PublicAccess]]=..., **kwargs: Any) -> Dict[str, Union[str, datetime]]: ...
    def get_paths(self, path: Optional[str]=..., recursive: Optional[bool]=..., max_results: Optional[int]=..., **kwargs: Any) -> ItemPaged[PathProperties]: ...
    async def create_directory(self, directory: Union[DirectoryProperties, str], content_settings: Optional[ContentSettings]=..., metadata: Optional[Dict[str, str]]=..., **kwargs: Any) -> DataLakeDirectoryClient: ...
    async def delete_directory(self, directory: Union[DirectoryProperties, str], **kwargs: Any) -> DataLakeDirectoryClient: ...
    async def create_file(self, file: Union[FileProperties, str], **kwargs: Any) -> DataLakeFileClient: ...
    async def delete_file(self, file: Union[FileProperties, str], lease: Optional[Union[DataLakeLeaseClient, str]]=..., **kwargs: Any) -> DataLakeFileClient: ...
    def get_root_directory_client(self) -> DataLakeDirectoryClient: ...
    def get_directory_client(self, directory: Union[DirectoryProperties, str]) -> DataLakeDirectoryClient: ...
    def get_file_client(self, file_path: Union[FileProperties, str]) -> DataLakeFileClient: ...
