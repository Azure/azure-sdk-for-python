# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import AzureBlobStoragePreparer
from testpreparer_async import AzureBlobStorageTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureBlobStorageBlockBlobOperationsAsync(AzureBlobStorageTestBaseAsync):
    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_block_blob_upload(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.block_blob.upload(
            content_length=0,
            body=b"bytes",
            blob_type="BlockBlob",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_block_blob_put_blob_from_url(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.block_blob.put_blob_from_url(
            content_length=0,
            copy_source="str",
            blob_type="BlockBlob",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_block_blob_stage_block(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.block_blob.stage_block(
            block_id="str",
            content_length=0,
            body=b"bytes",
            comp="block",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_block_blob_stage_block_from_url(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.block_blob.stage_block_from_url(
            block_id="str",
            content_length=0,
            source_url="str",
            comp="block",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_block_blob_commit_block_list(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.block_blob.commit_block_list(
            blocks={"Committed": ["str"], "Latest": ["str"], "Uncommitted": ["str"]},
            comp="blocklist",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_block_blob_get_block_list(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.block_blob.get_block_list(
            list_type="str",
            comp="blocklist",
        )

        # please add some check logic here by yourself
        # ...
