# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import AzureBlobStoragePreparer
from testpreparer_async import AzureBlobStorageTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureBlobStorageBlobOperationsAsync(AzureBlobStorageTestBaseAsync):
    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_blob_download(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.blob.download()

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_blob_get_properties(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.blob.get_properties()

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_blob_delete(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.blob.delete()

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_blob_undelete(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.blob.undelete(
            comp="undelete",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_blob_set_expiry(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.blob.set_expiry(
            expiry_options="str",
            comp="expiry",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_blob_set_http_headers(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.blob.set_http_headers(
            comp="properties",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_blob_set_immutability_policy(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.blob.set_immutability_policy(
            comp="immutabilityPolicies",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_blob_delete_immutability_policy(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.blob.delete_immutability_policy(
            comp="immutabilityPolicies",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_blob_set_legal_hold(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.blob.set_legal_hold(
            legal_hold=bool,
            comp="legalhold",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_blob_set_metadata(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.blob.set_metadata(
            comp="metadata",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_blob_acquire_lease(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.blob.acquire_lease(
            comp="lease",
            action="acquire",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_blob_release_lease(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.blob.release_lease(
            lease_id="str",
            comp="lease",
            action="release",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_blob_renew_lease(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.blob.renew_lease(
            lease_id="str",
            comp="lease",
            action="renew",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_blob_change_lease(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.blob.change_lease(
            lease_id="str",
            proposed_lease_id="str",
            comp="lease",
            action="change",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_blob_break_lease(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.blob.break_lease(
            comp="lease",
            action="break",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_blob_create_snapshot(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.blob.create_snapshot(
            comp="snapshot",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_blob_start_copy_from_url(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.blob.start_copy_from_url(
            copy_source="str",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_blob_copy_from_url(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.blob.copy_from_url(
            copy_source="str",
            x_ms_requires_sync="true",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_blob_abort_copy_from_url(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.blob.abort_copy_from_url(
            copy_id="str",
            comp="copy",
            copy_action_abort_constant="abort",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_blob_set_tier(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.blob.set_tier(
            tier="str",
            comp="tier",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_blob_get_account_info(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.blob.get_account_info(
            restype="account",
            comp="properties",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_blob_query(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.blob.query(
            comp="query",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_blob_get_tags(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.blob.get_tags(
            comp="tags",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_blob_set_tags(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.blob.set_tags(
            comp="tags",
        )

        # please add some check logic here by yourself
        # ...
