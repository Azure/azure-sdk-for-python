# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import AzureBlobStoragePreparer
from testpreparer_async import AzureBlobStorageTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureBlobStoragePageBlobOperationsAsync(AzureBlobStorageTestBaseAsync):
    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_page_blob_create(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.page_blob.create(
            content_length=0,
            blob_content_length=0,
            blob_type="PageBlob",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_page_blob_upload_pages(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.page_blob.upload_pages(
            content_length=0,
            body=b"bytes",
            comp="page",
            page_write="update",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_page_blob_clear_pages(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.page_blob.clear_pages(
            content_length=0,
            comp="page",
            page_write="clear",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_page_blob_upload_pages_from_url(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.page_blob.upload_pages_from_url(
            source_url="str",
            source_range="str",
            content_length=0,
            range="str",
            comp="page",
            page_write="update",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_page_blob_get_page_ranges(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.page_blob.get_page_ranges(
            comp="pagelist",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_page_blob_get_page_ranges_diff(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.page_blob.get_page_ranges_diff(
            comp="pagelist",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_page_blob_resize(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.page_blob.resize(
            blob_content_length=0,
            comp="properties",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_page_blob_update_sequence_number(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.page_blob.update_sequence_number(
            sequence_number_action="str",
            comp="properties",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_page_blob_copy_incremental(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.page_blob.copy_incremental(
            copy_source="str",
            comp="incrementalcopy",
        )

        # please add some check logic here by yourself
        # ...
