# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import AzureBlobStoragePreparer
from testpreparer_async import AzureBlobStorageTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureBlobStorageAppendBlobOperationsAsync(AzureBlobStorageTestBaseAsync):
    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_append_blob_create(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.append_blob.create(
            content_length=0,
            blob_type="AppendBlob",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_append_blob_append_block(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.append_blob.append_block(
            content_length=0,
            body=b"bytes",
            comp="appendblock",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_append_blob_append_block_from_url(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.append_blob.append_block_from_url(
            source_url="str",
            content_length=0,
            comp="appendblock",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_append_blob_seal(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.append_blob.seal(
            comp="seal",
        )

        # please add some check logic here by yourself
        # ...
