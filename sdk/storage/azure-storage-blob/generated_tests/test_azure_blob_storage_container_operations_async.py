# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import AzureBlobStoragePreparer
from testpreparer_async import AzureBlobStorageTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureBlobStorageContainerOperationsAsync(AzureBlobStorageTestBaseAsync):
    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_container_create(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.container.create(
            restype="container",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_container_get_properties(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.container.get_properties(
            restype="container",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_container_delete(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.container.delete(
            restype="container",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_container_set_metadata(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.container.set_metadata(
            restype="container",
            comp="metadata",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_container_get_access_policy(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.container.get_access_policy(
            restype="container",
            comp="acl",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_container_set_access_policy(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.container.set_access_policy(
            restype="container",
            comp="acl",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_container_restore(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.container.restore(
            restype="container",
            comp="undelete",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_container_rename(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.container.rename(
            source_container_name="str",
            restype="container",
            comp="rename",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_container_submit_batch(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.container.submit_batch(
            content_length=0,
            body=b"bytes",
            restype="container",
            comp="batch",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_container_filter_blobs(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.container.filter_blobs(
            restype="container",
            comp="blobs",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_container_acquire_lease(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.container.acquire_lease(
            comp="lease",
            restype="container",
            action="acquire",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_container_release_lease(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.container.release_lease(
            lease_id="str",
            comp="lease",
            restype="container",
            action="release",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_container_renew_lease(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.container.renew_lease(
            lease_id="str",
            comp="lease",
            restype="container",
            action="renew",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_container_break_lease(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.container.break_lease(
            comp="lease",
            restype="container",
            action="break",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_container_change_lease(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.container.change_lease(
            lease_id="str",
            proposed_lease_id="str",
            comp="lease",
            restype="container",
            action="change",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_container_list_blob_flat_segment(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.container.list_blob_flat_segment(
            restype="container",
            comp="list",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_container_list_blob_hierarchy_segment(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.container.list_blob_hierarchy_segment(
            delimiter="str",
            restype="container",
            comp="list",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy_async
    async def test_container_get_account_info(self, azureblobstorage_endpoint):
        client = self.create_async_client(endpoint=azureblobstorage_endpoint)
        response = await client.container.get_account_info(
            restype="account",
            comp="properties",
        )

        # please add some check logic here by yourself
        # ...
