# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import AzureBlobStoragePreparer, AzureBlobStorageTestBase


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestAzureBlobStorageServiceOperations(AzureBlobStorageTestBase):
    @AzureBlobStoragePreparer()
    @recorded_by_proxy
    def test_service_set_properties(self, azureblobstorage_endpoint):
        client = self.create_client(endpoint=azureblobstorage_endpoint)
        response = client.service.set_properties(
            storage_service_properties={
                "Cors": [
                    {
                        "AllowedHeaders": "str",
                        "AllowedMethods": "str",
                        "AllowedOrigins": "str",
                        "ExposedHeaders": "str",
                        "MaxAgeInSeconds": 0,
                    }
                ],
                "DefaultServiceVersion": "str",
                "DeleteRetentionPolicy": {"Enabled": bool, "AllowPermanentDelete": bool, "Days": 0},
                "HourMetrics": {
                    "Enabled": bool,
                    "IncludeAPIs": bool,
                    "RetentionPolicy": {"Enabled": bool, "AllowPermanentDelete": bool, "Days": 0},
                    "Version": "str",
                },
                "Logging": {
                    "Delete": bool,
                    "Read": bool,
                    "RetentionPolicy": {"Enabled": bool, "AllowPermanentDelete": bool, "Days": 0},
                    "Version": "str",
                    "Write": bool,
                },
                "MinuteMetrics": {
                    "Enabled": bool,
                    "IncludeAPIs": bool,
                    "RetentionPolicy": {"Enabled": bool, "AllowPermanentDelete": bool, "Days": 0},
                    "Version": "str",
                },
                "StaticWebsite": {
                    "Enabled": bool,
                    "DefaultIndexDocumentPath": "str",
                    "ErrorDocument404Path": "str",
                    "IndexDocument": "str",
                },
            },
            restype="service",
            comp="properties",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy
    def test_service_get_properties(self, azureblobstorage_endpoint):
        client = self.create_client(endpoint=azureblobstorage_endpoint)
        response = client.service.get_properties(
            restype="service",
            comp="properties",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy
    def test_service_get_statistics(self, azureblobstorage_endpoint):
        client = self.create_client(endpoint=azureblobstorage_endpoint)
        response = client.service.get_statistics(
            restype="service",
            comp="stats",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy
    def test_service_list_containers_segment(self, azureblobstorage_endpoint):
        client = self.create_client(endpoint=azureblobstorage_endpoint)
        response = client.service.list_containers_segment(
            comp="list",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy
    def test_service_get_user_delegation_key(self, azureblobstorage_endpoint):
        client = self.create_client(endpoint=azureblobstorage_endpoint)
        response = client.service.get_user_delegation_key(
            key_info={"Expiry": "str", "Start": "str"},
            restype="service",
            comp="userdelegationkey",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy
    def test_service_get_account_info(self, azureblobstorage_endpoint):
        client = self.create_client(endpoint=azureblobstorage_endpoint)
        response = client.service.get_account_info(
            restype="account",
            comp="properties",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy
    def test_service_submit_batch(self, azureblobstorage_endpoint):
        client = self.create_client(endpoint=azureblobstorage_endpoint)
        response = client.service.submit_batch(
            content_length=0,
            body=b"bytes",
            comp="batch",
        )

        # please add some check logic here by yourself
        # ...

    @AzureBlobStoragePreparer()
    @recorded_by_proxy
    def test_service_filter_blobs(self, azureblobstorage_endpoint):
        client = self.create_client(endpoint=azureblobstorage_endpoint)
        response = client.service.filter_blobs(
            comp="blobs",
        )

        # please add some check logic here by yourself
        # ...
