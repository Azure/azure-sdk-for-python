# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
from azure.core.configuration import Configuration
from azure.core.pipeline import policies

from ..version import VERSION


class AzureBlobStorageConfiguration(Configuration):
    """Configuration for AzureBlobStorage
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param credentials: Credentials needed for the client to connect to Azure.
    :type credentials: :mod:`A msrestazure Credentials
     object<msrestazure.azure_active_directory>`
    :param url: The URL of the service account, container, or blob that is the
     targe of the desired operation.
    :type url: str
    :param filter: The filter parameter enables the caller to query blobs
     whose tags match a given expression. The given expression must evaluate to
     true for a blob to be returned in the results.
    :type filter: str
    :param path_rename_mode: Determines the behavior of the rename operation.
     Possible values include: 'legacy', 'posix'
    :type path_rename_mode: str or ~blob.models.PathRenameMode
    :ivar version: Specifies the version of the operation to use for this
     request.
    :type version: str
    """

    def __init__(self, credentials, url, filter, path_rename_mode=None, **kwargs):

        if credentials is None:
            raise ValueError("Parameter 'credentials' must not be None.")
        if url is None:
            raise ValueError("Parameter 'url' must not be None.")
        if filter is None:
            raise ValueError("Parameter 'filter' must not be None.")

        super(AzureBlobStorageConfiguration, self).__init__(**kwargs)
        self._configure(**kwargs)

        self.user_agent_policy.add_user_agent('azsdk-python-azureblobstorage/{}'.format(VERSION))
        self.generate_client_request_id = True

        self.credentials = credentials
        self.url = url
        self.filter = filter
        self.path_rename_mode = path_rename_mode
        self.version = "2019-02-02"

    def _configure(self, **kwargs):
        self.user_agent_policy = kwargs.get('user_agent_policy') or policies.UserAgentPolicy(**kwargs)
        self.headers_policy = kwargs.get('headers_policy') or policies.HeadersPolicy(**kwargs)
        self.proxy_policy = kwargs.get('proxy_policy') or policies.ProxyPolicy(**kwargs)
        self.logging_policy = kwargs.get('logging_policy') or policies.NetworkTraceLoggingPolicy(**kwargs)
        self.retry_policy = kwargs.get('retry_policy') or policies.AsyncRetryPolicy(**kwargs)
        self.custom_hook_policy = kwargs.get('custom_hook_policy') or policies.CustomHookPolicy(**kwargs)
        self.redirect_policy = kwargs.get('redirect_policy') or policies.AsyncRedirectPolicy(**kwargs)
