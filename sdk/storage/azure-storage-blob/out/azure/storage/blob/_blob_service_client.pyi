# Stubs for azure.storage.blob._blob_service_client (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._blob_client import BlobClient
from ._container_client import ContainerClient
from ._deserialize import service_properties_deserialize, service_stats_deserialize
from ._generated import AzureBlobStorage
from ._generated.models import KeyInfo, StorageErrorException, StorageServiceProperties
from ._lease import BlobLeaseClient
from ._models import BlobAnalyticsLogging, BlobProperties, ContainerProperties, ContainerPropertiesPaged, CorsRule, Metrics, PublicAccess, RetentionPolicy, StaticWebsite
from ._shared.base_client import StorageAccountHostsMixin, TransportWrapper, parse_connection_str, parse_query
from ._shared.models import LocationMode, UserDelegationKey
from ._shared.parser import _to_utc_datetime
from ._shared.response_handlers import parse_to_internal_user_delegation_key, process_storage_error, return_response_headers
from azure.core.paging import ItemPaged
from datetime import datetime
from typing import Any, Dict, List, Optional, Union

class BlobServiceClient(StorageAccountHostsMixin):
    def __init__(self, account_url: str, credential: Optional[Any]=..., **kwargs: Any) -> None: ...
    @classmethod
    def from_connection_string(cls: Any, conn_str: str, credential: Optional[Any]=..., **kwargs: Any) -> BlobServiceClient: ...
    def get_user_delegation_key(self, key_start_time: datetime, key_expiry_time: datetime, **kwargs: Any) -> UserDelegationKey: ...
    def get_account_information(self, **kwargs: Any) -> Dict[str, str]: ...
    def get_service_stats(self, **kwargs: Any) -> Dict[str, Any]: ...
    def get_service_properties(self, **kwargs: Any) -> Dict[str, Any]: ...
    def set_service_properties(self, analytics_logging: Optional[BlobAnalyticsLogging]=..., hour_metrics: Optional[Metrics]=..., minute_metrics: Optional[Metrics]=..., cors: Optional[List[CorsRule]]=..., target_version: Optional[str]=..., delete_retention_policy: Optional[RetentionPolicy]=..., static_website: Optional[StaticWebsite]=..., **kwargs: Any) -> None: ...
    def list_containers(self, name_starts_with: Optional[str]=..., include_metadata: Optional[bool]=..., **kwargs: Any) -> ItemPaged[ContainerProperties]: ...
    def create_container(self, name: str, metadata: Optional[Dict[str, str]]=..., public_access: Optional[Union[PublicAccess, str]]=..., **kwargs: Any) -> ContainerClient: ...
    def delete_container(self, container: Union[ContainerProperties, str], lease: Optional[Union[BlobLeaseClient, str]]=..., **kwargs: Any) -> None: ...
    def get_container_client(self, container: Union[ContainerProperties, str]) -> ContainerClient: ...
    def get_blob_client(self, container: Union[ContainerProperties, str], blob: Union[BlobProperties, str], snapshot: Optional[Union[Dict[str, Any], str]]=...) -> BlobClient: ...
