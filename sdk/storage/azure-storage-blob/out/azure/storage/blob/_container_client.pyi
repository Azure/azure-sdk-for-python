# Stubs for azure.storage.blob._container_client (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._blob_client import BlobClient
from ._deserialize import deserialize_container_properties
from ._generated import AzureBlobStorage
from ._generated.models import SignedIdentifier, StorageErrorException
from ._lease import BlobLeaseClient, get_access_conditions
from ._models import AccessPolicy, BlobPrefix, BlobProperties, BlobPropertiesPaged, BlobType, ContainerProperties, ContentSettings, PremiumPageBlobTier, PublicAccess, StandardBlobTier
from ._serialize import get_modify_conditions
from ._shared.base_client import StorageAccountHostsMixin, TransportWrapper, parse_connection_str, parse_query
from ._shared.request_handlers import add_metadata_headers, serialize_iso
from ._shared.response_handlers import process_storage_error, return_headers_and_deserialized, return_response_headers
from azure.core.paging import ItemPaged
from azure.core.pipeline.transport import HttpResponse
from datetime import datetime
from typing import Any, AnyStr, Dict, IO, Iterable, Iterator, Optional, Union

class ContainerClient(StorageAccountHostsMixin):
    container_name: Any = ...
    def __init__(self, account_url: str, container_name: str, credential: Optional[Any]=..., **kwargs: Any) -> None: ...
    @classmethod
    def from_container_url(cls: Any, container_url: str, credential: Optional[Any]=..., **kwargs: Any) -> ContainerClient: ...
    @classmethod
    def from_connection_string(cls: Any, conn_str: str, container_name: str, credential: Optional[Any]=..., **kwargs: Any) -> ContainerClient: ...
    def create_container(self, metadata: Optional[Dict[str, str]]=..., public_access: Optional[Union[PublicAccess, str]]=..., **kwargs: Any) -> None: ...
    def delete_container(self, **kwargs: Any) -> None: ...
    def acquire_lease(self, lease_duration: int=..., lease_id: Optional[str]=..., **kwargs: Any) -> BlobLeaseClient: ...
    def get_account_information(self, **kwargs: Any) -> Dict[str, str]: ...
    def get_container_properties(self, **kwargs: Any) -> ContainerProperties: ...
    def set_container_metadata(self, metadata: Optional[Dict[str, str]]=..., **kwargs: Any) -> Dict[str, Union[str, datetime]]: ...
    def get_container_access_policy(self, **kwargs: Any) -> Dict[str, Any]: ...
    def set_container_access_policy(self, signed_identifiers: Dict[str, AccessPolicy], public_access: Optional[Union[str, PublicAccess]]=..., **kwargs: Any) -> Dict[str, Union[str, datetime]]: ...
    def list_blobs(self, name_starts_with: Optional[str]=..., include: Optional[Any]=..., **kwargs: Any) -> ItemPaged[BlobProperties]: ...
    def walk_blobs(self, name_starts_with: Optional[str]=..., include: Optional[Any]=..., delimiter: str=..., **kwargs: Optional[Any]) -> ItemPaged[BlobProperties]: ...
    def upload_blob(self, name: Union[str, BlobProperties], data: Union[Iterable[AnyStr], IO[AnyStr]], blob_type: Union[str, BlobType]=..., length: Optional[int]=..., metadata: Optional[Dict[str, str]]=..., **kwargs: Any) -> BlobClient: ...
    def delete_blob(self, blob: Union[str, BlobProperties], delete_snapshots: Optional[str]=..., **kwargs: Any) -> None: ...
    def download_blob(self, blob: Union[str, BlobProperties], offset: Optional[int]=..., length: Optional[int]=..., **kwargs: Any) -> StorageStreamDownloader: ...
    def delete_blobs(self, *blobs: Any, **kwargs: Any) -> Iterator[HttpResponse]: ...
    def set_standard_blob_tier_blobs(self, standard_blob_tier: Union[str, StandardBlobTier], *blobs: Union[str, BlobProperties], **kwargs: Any) -> Iterator[HttpResponse]: ...
    def set_premium_page_blob_tier_blobs(self, premium_page_blob_tier: Union[str, PremiumPageBlobTier], *blobs: Union[str, BlobProperties], **kwargs: Any) -> Iterator[HttpResponse]: ...
    def get_blob_client(self, blob: Union[str, BlobProperties], snapshot: str=...) -> BlobClient: ...
