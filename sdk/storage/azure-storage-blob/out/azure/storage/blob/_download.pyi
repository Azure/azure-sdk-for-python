# Stubs for azure.storage.blob._download (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._deserialize import get_page_ranges_result
from ._shared.encryption import decrypt_blob
from ._shared.request_handlers import validate_and_format_range_headers
from ._shared.response_handlers import parse_length_from_content_range, process_storage_error
from typing import Any, Optional

def process_range_and_offset(start_range: Any, end_range: Any, length: Any, encryption: Any): ...
def process_content(data: Any, start_offset: Any, end_offset: Any, encryption: Any): ...

class _ChunkDownloader:
    client: Any = ...
    non_empty_ranges: Any = ...
    chunk_size: Any = ...
    total_size: Any = ...
    start_index: Any = ...
    end_index: Any = ...
    stream: Any = ...
    stream_lock: Any = ...
    progress_lock: Any = ...
    stream_start: Any = ...
    progress_total: Any = ...
    encryption_options: Any = ...
    validate_content: Any = ...
    request_options: Any = ...
    def __init__(self, client: Optional[Any] = ..., non_empty_ranges: Optional[Any] = ..., total_size: Optional[Any] = ..., chunk_size: Optional[Any] = ..., current_progress: Optional[Any] = ..., start_range: Optional[Any] = ..., end_range: Optional[Any] = ..., stream: Optional[Any] = ..., parallel: Optional[Any] = ..., validate_content: Optional[Any] = ..., encryption_options: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def get_chunk_offsets(self) -> None: ...
    def process_chunk(self, chunk_start: Any) -> None: ...
    def yield_chunk(self, chunk_start: Any): ...

class _ChunkIterator:
    size: Any = ...
    def __init__(self, size: Any, content: Any, downloader: Any) -> None: ...
    def __len__(self): ...
    def __iter__(self): ...
    def __next__(self): ...
    next: Any = ...

class StorageStreamDownloader:
    name: Any = ...
    container: Any = ...
    properties: Any = ...
    size: Any = ...
    def __init__(self, clients: Optional[Any] = ..., config: Optional[Any] = ..., start_range: Optional[Any] = ..., end_range: Optional[Any] = ..., validate_content: Optional[Any] = ..., encryption_options: Optional[Any] = ..., max_concurrency: int = ..., name: Optional[Any] = ..., container: Optional[Any] = ..., encoding: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def __len__(self): ...
    def chunks(self): ...
    def readall(self): ...
    def content_as_bytes(self, max_concurrency: int = ...): ...
    def content_as_text(self, max_concurrency: int = ..., encoding: str = ...): ...
    def readinto(self, stream: Any): ...
    def download_to_stream(self, stream: Any, max_concurrency: int = ...): ...
