# Stubs for azure.storage.blob._models (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._generated.models import AccessPolicy as GenAccessPolicy, BlobItem, CorsRule as GeneratedCorsRule, Logging as GeneratedLogging, Metrics as GeneratedMetrics, RetentionPolicy as GeneratedRetentionPolicy, StaticWebsite as GeneratedStaticWebsite, StorageErrorException
from ._shared import decode_base64_to_text
from ._shared.models import DictMixin, get_enum_value
from ._shared.response_handlers import process_storage_error, return_context_and_deserialized
from azure.core.paging import ItemPaged, PageIterator
from enum import Enum
from typing import Any, Optional

class BlobType(str, Enum):
    BlockBlob: str = ...
    PageBlob: str = ...
    AppendBlob: str = ...

class BlockState(str, Enum):
    Committed: str = ...
    Latest: str = ...
    Uncommitted: str = ...

class StandardBlobTier(str, Enum):
    Archive: str = ...
    Cool: str = ...
    Hot: str = ...

class PremiumPageBlobTier(str, Enum):
    P4: str = ...
    P6: str = ...
    P10: str = ...
    P20: str = ...
    P30: str = ...
    P40: str = ...
    P50: str = ...
    P60: str = ...

class SequenceNumberAction(str, Enum):
    Increment: str = ...
    Max: str = ...
    Update: str = ...

class PublicAccess(str, Enum):
    OFF: str = ...
    Blob: str = ...
    Container: str = ...

class BlobAnalyticsLogging(GeneratedLogging):
    version: Any = ...
    delete: Any = ...
    read: Any = ...
    write: Any = ...
    retention_policy: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class Metrics(GeneratedMetrics):
    version: Any = ...
    enabled: Any = ...
    include_apis: Any = ...
    retention_policy: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class RetentionPolicy(GeneratedRetentionPolicy):
    enabled: Any = ...
    days: Any = ...
    def __init__(self, enabled: bool = ..., days: Optional[Any] = ...) -> None: ...

class StaticWebsite(GeneratedStaticWebsite):
    enabled: Any = ...
    index_document: Any = ...
    error_document404_path: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class CorsRule(GeneratedCorsRule):
    allowed_origins: Any = ...
    allowed_methods: Any = ...
    allowed_headers: Any = ...
    exposed_headers: Any = ...
    max_age_in_seconds: Any = ...
    def __init__(self, allowed_origins: Any, allowed_methods: Any, **kwargs: Any) -> None: ...

class ContainerProperties(DictMixin):
    name: Any = ...
    last_modified: Any = ...
    etag: Any = ...
    lease: Any = ...
    public_access: Any = ...
    has_immutability_policy: Any = ...
    has_legal_hold: Any = ...
    metadata: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class ContainerPropertiesPaged(PageIterator):
    service_endpoint: Any = ...
    prefix: Any = ...
    marker: Any = ...
    results_per_page: Any = ...
    location_mode: Any = ...
    current_page: Any = ...
    def __init__(self, command: Any, prefix: Optional[Any] = ..., results_per_page: Optional[Any] = ..., continuation_token: Optional[Any] = ...) -> None: ...

class BlobProperties(DictMixin):
    name: Any = ...
    container: Any = ...
    snapshot: Any = ...
    blob_type: Any = ...
    metadata: Any = ...
    encrypted_metadata: Any = ...
    last_modified: Any = ...
    etag: Any = ...
    size: Any = ...
    content_range: Any = ...
    append_blob_committed_block_count: Any = ...
    page_blob_sequence_number: Any = ...
    server_encrypted: Any = ...
    copy: Any = ...
    content_settings: Any = ...
    lease: Any = ...
    blob_tier: Any = ...
    blob_tier_change_time: Any = ...
    blob_tier_inferred: Any = ...
    deleted: bool = ...
    deleted_time: Any = ...
    remaining_retention_days: Any = ...
    creation_time: Any = ...
    archive_status: Any = ...
    encryption_key_sha256: Any = ...
    request_server_encrypted: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class BlobPropertiesPaged(PageIterator):
    service_endpoint: Any = ...
    prefix: Any = ...
    marker: Any = ...
    results_per_page: Any = ...
    container: Any = ...
    delimiter: Any = ...
    current_page: Any = ...
    location_mode: Any = ...
    def __init__(self, command: Any, container: Optional[Any] = ..., prefix: Optional[Any] = ..., results_per_page: Optional[Any] = ..., continuation_token: Optional[Any] = ..., delimiter: Optional[Any] = ..., location_mode: Optional[Any] = ...) -> None: ...

class BlobPrefix(ItemPaged, DictMixin):
    name: Any = ...
    prefix: Any = ...
    results_per_page: Any = ...
    container: Any = ...
    delimiter: Any = ...
    location_mode: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class BlobPrefixPaged(BlobPropertiesPaged):
    name: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class LeaseProperties(DictMixin):
    status: Any = ...
    state: Any = ...
    duration: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class ContentSettings(DictMixin):
    content_type: Any = ...
    content_encoding: Any = ...
    content_language: Any = ...
    content_md5: Any = ...
    content_disposition: Any = ...
    cache_control: Any = ...
    def __init__(self, content_type: Optional[Any] = ..., content_encoding: Optional[Any] = ..., content_language: Optional[Any] = ..., content_disposition: Optional[Any] = ..., cache_control: Optional[Any] = ..., content_md5: Optional[Any] = ..., **kwargs: Any) -> None: ...

class CopyProperties(DictMixin):
    id: Any = ...
    source: Any = ...
    status: Any = ...
    progress: Any = ...
    completion_time: Any = ...
    status_description: Any = ...
    incremental_copy: Any = ...
    destination_snapshot: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class BlobBlock(DictMixin):
    id: Any = ...
    state: Any = ...
    size: Any = ...
    def __init__(self, block_id: Any, state: Any = ...) -> None: ...

class PageRange(DictMixin):
    start: Any = ...
    end: Any = ...
    def __init__(self, start: Optional[Any] = ..., end: Optional[Any] = ...) -> None: ...

class AccessPolicy(GenAccessPolicy):
    start: Any = ...
    expiry: Any = ...
    permission: Any = ...
    def __init__(self, permission: Optional[Any] = ..., expiry: Optional[Any] = ..., start: Optional[Any] = ...) -> None: ...

class ContainerSasPermissions:
    read: Any = ...
    write: Any = ...
    delete: Any = ...
    list: Any = ...
    def __init__(self, read: bool = ..., write: bool = ..., delete: bool = ..., list: bool = ...) -> None: ...
    @classmethod
    def from_string(cls, permission: Any): ...

class BlobSasPermissions:
    read: Any = ...
    add: Any = ...
    create: Any = ...
    write: Any = ...
    delete: Any = ...
    def __init__(self, read: bool = ..., add: bool = ..., create: bool = ..., write: bool = ..., delete: bool = ...) -> None: ...
    @classmethod
    def from_string(cls, permission: Any): ...

class CustomerProvidedEncryptionKey:
    key_value: Any = ...
    key_hash: Any = ...
    algorithm: str = ...
    def __init__(self, key_value: Any, key_hash: Any) -> None: ...
