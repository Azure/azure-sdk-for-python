# Stubs for azure.storage.blob.aio._blob_client_async (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .._blob_client import BlobClient as BlobClientBase
from .._deserialize import deserialize_blob_properties, get_page_ranges_result
from .._generated.aio import AzureBlobStorage
from .._generated.models import CpkInfo, StorageErrorException
from .._lease import get_access_conditions
from .._models import BlobBlock, BlobProperties, BlobSasPermissions, BlobType, ContainerProperties, ContentSettings, PremiumPageBlobTier, SequenceNumberAction, StandardBlobTier
from .._serialize import get_modify_conditions
from .._shared.base_client_async import AsyncStorageAccountHostsMixin
from .._shared.policies_async import ExponentialRetry
from .._shared.response_handlers import process_storage_error, return_response_headers
from ._download_async import StorageStreamDownloader
from ._lease_async import BlobLeaseClient
from ._upload_helpers import upload_append_blob, upload_block_blob, upload_page_blob
from datetime import datetime
from typing import Any, AnyStr, Dict, IO, Iterable, List, Optional, Tuple, Union

class BlobClient(AsyncStorageAccountHostsMixin, BlobClientBase):
    def __init__(self, account_url: str, container_name: str, blob_name: str, snapshot: Optional[Union[str, Dict[str, Any]]]=..., credential: Optional[Any]=..., **kwargs: Any) -> None: ...
    async def get_account_information(self, **kwargs: Optional[int]) -> Dict[str, str]: ...
    async def upload_blob(self, data: Union[Iterable[AnyStr], IO[AnyStr]], blob_type: Union[str, BlobType]=..., length: Optional[int]=..., metadata: Optional[Dict[str, str]]=..., **kwargs: Any) -> Any: ...
    async def download_blob(self, offset: Optional[int]=..., length: Optional[int]=..., **kwargs: Any) -> StorageStreamDownloader: ...
    async def delete_blob(self, delete_snapshots: bool=..., **kwargs: Any) -> None: ...
    async def undelete_blob(self, **kwargs: Any) -> None: ...
    async def get_blob_properties(self, **kwargs: Any) -> BlobProperties: ...
    async def set_http_headers(self, content_settings: Optional[ContentSettings]=..., **kwargs: Any) -> None: ...
    async def set_blob_metadata(self, metadata: Optional[Dict[str, str]]=..., **kwargs: Any) -> Dict[str, Union[str, datetime]]: ...
    async def create_page_blob(self, size: int, content_settings: Optional[ContentSettings]=..., metadata: Optional[Dict[str, str]]=..., premium_page_blob_tier: Optional[Union[str, PremiumPageBlobTier]]=..., **kwargs: Any) -> Dict[str, Union[str, datetime]]: ...
    async def create_append_blob(self, content_settings: Optional[ContentSettings]=..., metadata: Optional[Dict[str, str]]=..., **kwargs: Any) -> Dict[str, Union[str, datetime]]: ...
    async def create_snapshot(self, metadata: Optional[Dict[str, str]]=..., **kwargs: Any) -> Dict[str, Union[str, datetime]]: ...
    async def start_copy_from_url(self, source_url: str, metadata: Optional[Dict[str, str]]=..., incremental_copy: bool=..., **kwargs: Any) -> Any: ...
    async def abort_copy(self, copy_id: Union[str, Dict[str, Any], BlobProperties], **kwargs: Any) -> None: ...
    async def acquire_lease(self, lease_duration: int=..., lease_id: Optional[str]=..., **kwargs: Any) -> BlobLeaseClient: ...
    async def set_standard_blob_tier(self, standard_blob_tier: Union[str, StandardBlobTier], **kwargs: Any) -> None: ...
    async def stage_block(self, block_id: str, data: Union[Iterable[AnyStr], IO[AnyStr]], length: Optional[int]=..., **kwargs: Any) -> None: ...
    async def stage_block_from_url(self, block_id: str, source_url: str, source_offset: Optional[int]=..., source_length: Optional[int]=..., source_content_md5: Optional[Union[bytes, bytearray]]=..., **kwargs: Any) -> None: ...
    async def get_block_list(self, block_list_type: Optional[str]=..., **kwargs: Any) -> Tuple[List[BlobBlock], List[BlobBlock]]: ...
    async def commit_block_list(self, block_list: List[BlobBlock], content_settings: Optional[ContentSettings]=..., metadata: Optional[Dict[str, str]]=..., **kwargs: Any) -> Dict[str, Union[str, datetime]]: ...
    async def set_premium_page_blob_tier(self, premium_page_blob_tier: Union[str, PremiumPageBlobTier], **kwargs: Any) -> None: ...
    async def get_page_ranges(self, offset: Optional[int]=..., length: Optional[int]=..., previous_snapshot_diff: Optional[Union[str, Dict[str, Any]]]=..., **kwargs: Any) -> Tuple[List[Dict[str, int]], List[Dict[str, int]]]: ...
    async def set_sequence_number(self, sequence_number_action: Union[str, SequenceNumberAction], sequence_number: Optional[str]=..., **kwargs: Any) -> Dict[str, Union[str, datetime]]: ...
    async def resize_blob(self, size: int, **kwargs: Any) -> Dict[str, Union[str, datetime]]: ...
    async def upload_page(self, page: bytes, offset: int, length: int, **kwargs: Any) -> Dict[str, Union[str, datetime]]: ...
    async def upload_pages_from_url(self, source_url: str, offset: int, length: int, source_offset: int, **kwargs: Any) -> Dict[str, Any]: ...
    async def clear_page(self, offset: int, length: int, **kwargs: Any) -> Dict[str, Union[str, datetime]]: ...
    async def append_block(self, data: Union[AnyStr, Iterable[AnyStr], IO[AnyStr]], length: Optional[int]=..., **kwargs: Any) -> Dict[str, Union[str, datetime, int]]: ...
    async def append_block_from_url(self, copy_source_url: str, source_offset: Optional[int]=..., source_length: Optional[int]=..., **kwargs: Any) -> Dict[str, Union[str, datetime, int]]: ...
