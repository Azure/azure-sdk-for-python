# Stubs for azure.storage.blob.aio._container_client_async (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .._container_client import ContainerClient as ContainerClientBase, _get_blob_name
from .._deserialize import deserialize_container_properties
from .._generated.aio import AzureBlobStorage
from .._generated.models import SignedIdentifier, StorageErrorException
from .._lease import get_access_conditions
from .._models import AccessPolicy, BlobProperties, BlobType, ContainerProperties, ContainerSasPermissions, ContentSettings, PremiumPageBlobTier, PublicAccess, StandardBlobTier
from .._serialize import get_modify_conditions
from .._shared.base_client_async import AsyncStorageAccountHostsMixin, AsyncTransportWrapper
from .._shared.policies_async import ExponentialRetry
from .._shared.request_handlers import add_metadata_headers, serialize_iso
from .._shared.response_handlers import process_storage_error, return_headers_and_deserialized, return_response_headers
from ._blob_client_async import BlobClient
from ._download_async import StorageStreamDownloader
from ._lease_async import BlobLeaseClient
from ._models import BlobPrefix, BlobPropertiesPaged
from azure.core.async_paging import AsyncItemPaged
from azure.core.pipeline.transport import AsyncHttpResponse
from datetime import datetime
from typing import Any, AnyStr, AsyncIterator, Dict, IO, Iterable, Optional, Union

class ContainerClient(AsyncStorageAccountHostsMixin, ContainerClientBase):
    def __init__(self, account_url: str, container_name: str, credential: Optional[Any]=..., **kwargs: Any) -> None: ...
    async def create_container(self, metadata: Optional[Dict[str, str]]=..., public_access: Optional[Union[PublicAccess, str]]=..., **kwargs: Any) -> None: ...
    async def delete_container(self, **kwargs: Any) -> None: ...
    async def acquire_lease(self, lease_duration: int=..., lease_id: Optional[str]=..., **kwargs: Any) -> BlobLeaseClient: ...
    async def get_account_information(self, **kwargs: Any) -> Dict[str, str]: ...
    async def get_container_properties(self, **kwargs: Any) -> ContainerProperties: ...
    async def set_container_metadata(self, metadata: Optional[Dict[str, str]]=..., **kwargs: Any) -> Dict[str, Union[str, datetime]]: ...
    async def get_container_access_policy(self, **kwargs: Any) -> Dict[str, Any]: ...
    async def set_container_access_policy(self, signed_identifiers: Dict[str, AccessPolicy], public_access: Optional[Union[str, PublicAccess]]=..., **kwargs: Any) -> Dict[str, Union[str, datetime]]: ...
    def list_blobs(self, name_starts_with: Optional[str]=..., include: Optional[Any]=..., **kwargs: Any) -> AsyncItemPaged[BlobProperties]: ...
    def walk_blobs(self, name_starts_with: Optional[str]=..., include: Optional[Any]=..., delimiter: str=..., **kwargs: Optional[Any]) -> AsyncItemPaged[BlobProperties]: ...
    async def upload_blob(self, name: Union[str, BlobProperties], data: Union[Iterable[AnyStr], IO[AnyStr]], blob_type: Union[str, BlobType]=..., length: Optional[int]=..., metadata: Optional[Dict[str, str]]=..., **kwargs: Any) -> BlobClient: ...
    async def delete_blob(self, blob: Union[str, BlobProperties], delete_snapshots: Optional[str]=..., **kwargs: Any) -> None: ...
    async def download_blob(self, blob: Union[str, BlobProperties], offset: Optional[int]=..., length: Optional[int]=..., **kwargs: Any) -> StorageStreamDownloader: ...
    async def delete_blobs(self, *blobs: Union[str, BlobProperties], delete_snapshots: Optional[str]=..., lease: Optional[Union[str, BlobLeaseClient]]=..., **kwargs: Any) -> AsyncIterator[AsyncHttpResponse]: ...
    async def set_standard_blob_tier_blobs(self, standard_blob_tier: Union[str, StandardBlobTier], *blobs: Union[str, BlobProperties], **kwargs: Any) -> AsyncIterator[AsyncHttpResponse]: ...
    async def set_premium_page_blob_tier_blobs(self, premium_page_blob_tier: Union[str, PremiumPageBlobTier], *blobs: Union[str, BlobProperties], **kwargs: Any) -> AsyncIterator[AsyncHttpResponse]: ...
    def get_blob_client(self, blob: Union[BlobProperties, str], snapshot: str=...) -> BlobClient: ...
