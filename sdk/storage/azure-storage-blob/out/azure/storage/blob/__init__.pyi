# Stubs for azure.storage.blob (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._blob_client import BlobClient as BlobClient
from ._blob_service_client import BlobServiceClient as BlobServiceClient
from ._container_client import ContainerClient as ContainerClient
from ._download import StorageStreamDownloader as StorageStreamDownloader
from ._generated.models import RehydratePriority as RehydratePriority
from ._lease import BlobLeaseClient as BlobLeaseClient
from ._models import AccessPolicy as AccessPolicy, BlobAnalyticsLogging as BlobAnalyticsLogging, BlobBlock as BlobBlock, BlobProperties as BlobProperties, BlobSasPermissions as BlobSasPermissions, BlobType as BlobType, BlockState as BlockState, ContainerProperties as ContainerProperties, ContainerSasPermissions as ContainerSasPermissions, ContentSettings as ContentSettings, CopyProperties as CopyProperties, CorsRule as CorsRule, CustomerProvidedEncryptionKey as CustomerProvidedEncryptionKey, LeaseProperties as LeaseProperties, Metrics as Metrics, PageRange as PageRange, PremiumPageBlobTier as PremiumPageBlobTier, PublicAccess as PublicAccess, RetentionPolicy as RetentionPolicy, SequenceNumberAction as SequenceNumberAction, StandardBlobTier as StandardBlobTier, StaticWebsite as StaticWebsite
from ._shared.models import AccountSasPermissions as AccountSasPermissions, LocationMode as LocationMode, ResourceTypes as ResourceTypes, StorageErrorCode as StorageErrorCode, UserDelegationKey as UserDelegationKey
from ._shared.policies import ExponentialRetry as ExponentialRetry, LinearRetry as LinearRetry
from ._shared.response_handlers import PartialBatchErrorException as PartialBatchErrorException
from ._shared_access_signature import generate_account_sas as generate_account_sas, generate_blob_sas as generate_blob_sas, generate_container_sas as generate_container_sas
from typing import Any, AnyStr, Dict, IO, Iterable, Union

def upload_blob_to_url(blob_url: str, data: Union[Iterable[AnyStr], IO[AnyStr]], credential: Any=..., **kwargs: Any) -> Dict[str, Any]: ...
def download_blob_from_url(blob_url: str, output: str, credential: Any=..., **kwargs: Any) -> None: ...
