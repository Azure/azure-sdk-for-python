# Stubs for azure.storage.fileshare.aio._file_client_async (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .._deserialize import deserialize_file_properties, deserialize_file_stream
from .._file_client import ShareFileClient as ShareFileClientBase
from .._generated.aio import AzureFileStorage
from .._generated.models import FileHTTPHeaders, HandleItem, StorageErrorException
from .._generated.version import VERSION
from .._models import ContentSettings, CopyFileSmbInfo, FileProperties, NTFSAttributes, ShareProperties
from .._parser import _datetime_to_str, _get_file_permission
from .._serialize import get_access_conditions, validate_copy_mode
from .._shared.base_client_async import AsyncStorageAccountHostsMixin
from .._shared.parser import _str
from .._shared.policies_async import ExponentialRetry
from .._shared.request_handlers import add_metadata_headers, get_length
from .._shared.response_handlers import process_storage_error, return_response_headers
from .._shared.uploads_async import FileChunkUploader, IterStreamer, upload_data_chunks
from ._download_async import StorageStreamDownloader
from ._lease_async import ShareFileLeaseClient
from ._models import HandlesPaged
from azure.core.async_paging import AsyncItemPaged
from datetime import datetime
from typing import Any, Dict, Iterable, List, Optional, Union

class ShareFileClient(AsyncStorageAccountHostsMixin, ShareFileClientBase):
    def __init__(self, account_url: str, share_name: str, file_path: str, snapshot: Optional[Union[str, Dict[str, Any]]]=..., credential: Optional[Any]=..., **kwargs: Any) -> None: ...
    async def acquire_lease(self, lease_id: Optional[str]=..., **kwargs: Any) -> BlobLeaseClient: ...
    async def create_file(self, size: int, file_attributes: Union[str, NTFSAttributes]=..., file_creation_time: Union[str, datetime]=..., file_last_write_time: Union[str, datetime]=..., file_permission: Optional[str]=..., permission_key: Optional[str]=..., **kwargs: Any) -> Dict[str, Any]: ...
    async def upload_file(self, data: Any, length: Optional[int]=..., file_attributes: Union[str, NTFSAttributes]=..., file_creation_time: Union[str, datetime]=..., file_last_write_time: Union[str, datetime]=..., file_permission: Optional[str]=..., permission_key: Optional[str]=..., **kwargs: Any) -> Dict[str, Any]: ...
    async def start_copy_from_url(self, source_url: str, file_permission_copy_mode: Optional[str]=..., file_permission: Optional[str]=..., file_permission_key: Optional[str]=..., copy_file_smb_info: Any=..., **kwargs: Any) -> Any: ...
    async def abort_copy(self, copy_id: Union[str, FileProperties], **kwargs: Any) -> None: ...
    async def download_file(self, offset: Optional[int]=..., length: Optional[int]=..., **kwargs: Any) -> Iterable[bytes]: ...
    async def delete_file(self, **kwargs: Any) -> None: ...
    async def get_file_properties(self, **kwargs: Any) -> FileProperties: ...
    async def set_http_headers(self, content_settings: ContentSettings, file_attributes: Union[str, NTFSAttributes]=..., file_creation_time: Union[str, datetime]=..., file_last_write_time: Union[str, datetime]=..., file_permission: Optional[str]=..., permission_key: Optional[str]=..., **kwargs: Any) -> Dict[str, Any]: ...
    async def set_file_metadata(self, metadata: Optional[Dict[str, Any]]=..., **kwargs: Any) -> Dict[str, Any]: ...
    async def upload_range(self, data: bytes, offset: int, length: int, **kwargs: Any) -> Dict[str, Any]: ...
    async def upload_range_from_url(self, source_url: str, offset: int, length: int, source_offset: int, **kwargs: Any) -> Dict[str, Any]: ...
    async def get_ranges(self, offset: Optional[int]=..., length: Optional[int]=..., **kwargs: Any) -> List[Dict[str, int]]: ...
    async def clear_range(self, offset: int, length: int, **kwargs: Any) -> Dict[str, Any]: ...
    async def resize_file(self, size: int, **kwargs: Any) -> Dict[str, Any]: ...
    def list_handles(self, **kwargs: Any) -> AsyncItemPaged: ...
    async def close_handle(self, handle: Union[str, HandleItem], **kwargs: Any) -> Dict[str, int]: ...
    async def close_all_handles(self, **kwargs: Any) -> Dict[str, int]: ...
