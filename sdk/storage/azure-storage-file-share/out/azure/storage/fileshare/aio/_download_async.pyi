# Stubs for azure.storage.fileshare.aio._download_async (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .._download import _ChunkDownloader, process_range_and_offset
from .._shared.encryption import decrypt_blob
from .._shared.request_handlers import validate_and_format_range_headers
from .._shared.response_handlers import parse_length_from_content_range, process_storage_error
from typing import Any, Optional

async def process_content(data: Any, start_offset: Any, end_offset: Any, encryption: Any): ...

class _AsyncChunkDownloader(_ChunkDownloader):
    stream_lock: Any = ...
    progress_lock: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...
    async def process_chunk(self, chunk_start: Any) -> None: ...
    async def yield_chunk(self, chunk_start: Any): ...

class _AsyncChunkIterator:
    size: Any = ...
    def __init__(self, size: Any, content: Any, downloader: Any) -> None: ...
    def __len__(self): ...
    def __iter__(self) -> None: ...
    def __aiter__(self): ...
    async def __anext__(self): ...

class StorageStreamDownloader:
    name: Any = ...
    path: Any = ...
    share: Any = ...
    properties: Any = ...
    size: Any = ...
    def __init__(self, client: Optional[Any] = ..., config: Optional[Any] = ..., start_range: Optional[Any] = ..., end_range: Optional[Any] = ..., validate_content: Optional[Any] = ..., encryption_options: Optional[Any] = ..., max_concurrency: int = ..., name: Optional[Any] = ..., path: Optional[Any] = ..., share: Optional[Any] = ..., encoding: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def __len__(self): ...
    def chunks(self): ...
    async def readall(self): ...
    async def content_as_bytes(self, max_concurrency: int = ...): ...
    async def content_as_text(self, max_concurrency: int = ..., encoding: str = ...): ...
    async def readinto(self, stream: Any): ...
    async def download_to_stream(self, stream: Any, max_concurrency: int = ...): ...
