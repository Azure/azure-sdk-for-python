# Stubs for azure.storage.fileshare._directory_client (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._deserialize import deserialize_directory_properties
from ._file_client import ShareFileClient
from ._generated import AzureFileStorage
from ._generated.models import HandleItem, StorageErrorException
from ._generated.version import VERSION
from ._models import ContentSettings, DirectoryProperties, DirectoryPropertiesPaged, HandlesPaged, NTFSAttributes, ShareProperties
from ._parser import _datetime_to_str, _get_file_permission
from ._shared.base_client import StorageAccountHostsMixin, TransportWrapper, parse_connection_str, parse_query
from ._shared.parser import _str
from ._shared.request_handlers import add_metadata_headers
from ._shared.response_handlers import process_storage_error, return_response_headers
from azure.core.paging import ItemPaged
from datetime import datetime
from typing import Any, Dict, Optional, Union

class ShareDirectoryClient(StorageAccountHostsMixin):
    snapshot: Any = ...
    share_name: Any = ...
    directory_path: Any = ...
    def __init__(self, account_url: str, share_name: str, directory_path: str, snapshot: Optional[Union[str, Dict[str, Any]]]=..., credential: Optional[Any]=..., **kwargs: Optional[Any]) -> None: ...
    @classmethod
    def from_directory_url(cls: Any, directory_url: str, snapshot: Optional[Union[str, Dict[str, Any]]]=..., credential: Optional[Any]=..., **kwargs: Optional[Any]) -> ShareDirectoryClient: ...
    @classmethod
    def from_connection_string(cls: Any, conn_str: str, share_name: str, directory_path: str, credential: Optional[Any]=..., **kwargs: Any) -> ShareDirectoryClient: ...
    def get_file_client(self, file_name: str, **kwargs: Any) -> ShareFileClient: ...
    def get_subdirectory_client(self, directory_name: str, **kwargs: Any) -> ShareDirectoryClient: ...
    def create_directory(self, **kwargs: Any) -> Dict[str, Any]: ...
    def delete_directory(self, **kwargs: Any) -> None: ...
    def list_directories_and_files(self, name_starts_with: Optional[str]=..., **kwargs: Any) -> ItemPaged: ...
    def list_handles(self, recursive: bool=..., **kwargs: Any) -> ItemPaged: ...
    def close_handle(self, handle: Union[str, HandleItem], **kwargs: Any) -> Dict[str, int]: ...
    def close_all_handles(self, recursive: bool=..., **kwargs: Any) -> Dict[str, int]: ...
    def get_directory_properties(self, **kwargs: Any) -> DirectoryProperties: ...
    def set_directory_metadata(self, metadata: Dict[str, Any], **kwargs: Any) -> Dict[str, Any]: ...
    def set_http_headers(self, file_attributes: Union[str, NTFSAttributes]=..., file_creation_time: Union[str, datetime]=..., file_last_write_time: Union[str, datetime]=..., file_permission: Optional[str]=..., permission_key: Optional[str]=..., **kwargs: Any) -> Dict[str, Any]: ...
    def create_subdirectory(self, directory_name: str, **kwargs: Any) -> ShareDirectoryClient: ...
    def delete_subdirectory(self, directory_name: str, **kwargs: Any) -> None: ...
    def upload_file(self, file_name: str, data: Any, length: Optional[int]=..., **kwargs: Any) -> ShareFileClient: ...
    def delete_file(self, file_name: str, **kwargs: Optional[Any]) -> None: ...
