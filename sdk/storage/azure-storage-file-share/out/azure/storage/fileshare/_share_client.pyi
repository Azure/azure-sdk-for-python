# Stubs for azure.storage.fileshare._share_client (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._deserialize import deserialize_permission, deserialize_permission_key, deserialize_share_properties
from ._directory_client import ShareDirectoryClient
from ._file_client import ShareFileClient
from ._generated import AzureFileStorage
from ._generated.models import DeleteSnapshotsOptionType, SharePermission, SignedIdentifier, StorageErrorException
from ._generated.version import VERSION
from ._models import AccessPolicy, ShareProperties
from ._shared.base_client import StorageAccountHostsMixin, TransportWrapper, parse_connection_str, parse_query
from ._shared.request_handlers import add_metadata_headers, serialize_iso
from ._shared.response_handlers import process_storage_error, return_headers_and_deserialized, return_response_headers
from typing import Any, Dict, Iterable, Optional, Union

class ShareClient(StorageAccountHostsMixin):
    snapshot: Any = ...
    share_name: Any = ...
    def __init__(self, account_url: str, share_name: str, snapshot: Optional[Union[str, Dict[str, Any]]]=..., credential: Optional[Any]=..., **kwargs: Any) -> None: ...
    @classmethod
    def from_share_url(cls: Any, share_url: str, snapshot: Optional[Union[str, Dict[str, Any]]]=..., credential: Optional[Any]=..., **kwargs: Any) -> ShareClient: ...
    @classmethod
    def from_connection_string(cls: Any, conn_str: str, share_name: str, snapshot: Optional[str]=..., credential: Optional[Any]=..., **kwargs: Any) -> ShareClient: ...
    def get_directory_client(self, directory_path: Optional[str]=...) -> ShareDirectoryClient: ...
    def get_file_client(self, file_path: str) -> ShareFileClient: ...
    def create_share(self, **kwargs: Any) -> Dict[str, Any]: ...
    def create_snapshot(self, **kwargs: Optional[Any]) -> Dict[str, Any]: ...
    def delete_share(self, delete_snapshots: Optional[bool]=..., **kwargs: Any) -> None: ...
    def get_share_properties(self, **kwargs: Any) -> ShareProperties: ...
    def set_share_quota(self, quota: int, **kwargs: Any) -> Dict[str, Any]: ...
    def set_share_metadata(self, metadata: Dict[str, Any], **kwargs: Any) -> Dict[str, Any]: ...
    def get_share_access_policy(self, **kwargs: Any) -> Dict[str, Any]: ...
    def set_share_access_policy(self, signed_identifiers: Dict[str, AccessPolicy], **kwargs: Any) -> Dict[str, str]: ...
    def get_share_stats(self, **kwargs: Any) -> int: ...
    def list_directories_and_files(self, directory_name: Optional[str]=..., name_starts_with: Optional[str]=..., marker: Optional[str]=..., **kwargs: Any) -> Iterable[Dict[str, str]]: ...
    def create_permission_for_share(self, file_permission: str, **kwargs: Any) -> str: ...
    def get_permission_for_share(self, permission_key: str, **kwargs: Any) -> str: ...
    def create_directory(self, directory_name: str, **kwargs: Any) -> ShareDirectoryClient: ...
    def delete_directory(self, directory_name: str, **kwargs: Any) -> None: ...
