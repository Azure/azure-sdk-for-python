# Stubs for azure.storage.file.aio.share_client_async (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .._deserialize import deserialize_permission, deserialize_share_properties
from .._generated.aio import AzureFileStorage
from .._generated.models import DeleteSnapshotsOptionType, SignedIdentifier, StorageErrorException
from .._generated.version import VERSION
from .._shared.base_client_async import AsyncStorageAccountHostsMixin
from .._shared.policies_async import ExponentialRetry
from .._shared.request_handlers import add_metadata_headers, serialize_iso
from .._shared.response_handlers import process_storage_error, return_headers_and_deserialized, return_response_headers
from ..models import AccessPolicy, ShareProperties
from ..share_client import ShareClient as ShareClientBase
from .directory_client_async import DirectoryClient
from .file_client_async import FileClient
from typing import Any, Dict, Optional, Union

class ShareClient(AsyncStorageAccountHostsMixin, ShareClientBase):
    def __init__(self, share_url: str, share: Optional[Union[str, ShareProperties]]=..., snapshot: Optional[Union[str, Dict[str, Any]]]=..., credential: Optional[Any]=..., loop: Any=..., **kwargs: Any) -> None: ...
    def get_directory_client(self, directory_path: Optional[str]=...) -> DirectoryClient: ...
    def get_file_client(self, file_path: str) -> FileClient: ...
    async def create_share(self, metadata: Optional[Dict[str, str]]=..., quota: Optional[int]=..., timeout: Optional[int]=..., **kwargs: Optional[Any]) -> Dict[str, Any]: ...
    async def create_snapshot(self, metadata: Optional[Dict[str, str]]=..., timeout: Optional[int]=..., **kwargs: Optional[Any]) -> Dict[str, Any]: ...
    async def delete_share(self, delete_snapshots: Optional[bool]=..., timeout: Optional[int]=..., **kwargs: Any) -> None: ...
    async def get_share_properties(self, timeout: Optional[int]=..., **kwargs: Any) -> ShareProperties: ...
    async def set_share_quota(self, quota: int, timeout: Optional[int]=..., **kwargs: Any) -> Dict[str, Any]: ...
    async def set_share_metadata(self, metadata: Dict[str, Any], timeout: Optional[int]=..., **kwargs: Any) -> Dict[str, Any]: ...
    async def get_share_access_policy(self, timeout: Optional[int]=..., **kwargs: Any) -> Dict[str, Any]: ...
    async def set_share_access_policy(self, signed_identifiers: Optional[Dict[str, Optional[AccessPolicy]]]=..., timeout: Optional[int]=..., **kwargs: Any) -> Dict[str, str]: ...
    async def get_share_stats(self, timeout: Optional[int]=..., **kwargs: Any) -> int: ...
    def list_directories_and_files(self, directory_name: Optional[str]=..., name_starts_with: Optional[str]=..., marker: Optional[str]=..., timeout: Optional[int]=..., **kwargs: Any) -> Iterable[dict[str, str]]: ...
    async def create_permission_for_share(self, file_permission: str, timeout: Optional[int]=..., **kwargs: Any) -> str: ...
    async def get_permission_for_share(self, file_permission_key: str, timeout: Optional[int]=..., **kwargs: Any) -> str: ...
    async def create_directory(self, directory_name: str, metadata: Optional[Dict[str, Any]]=..., timeout: Optional[int]=..., **kwargs: Any) -> DirectoryClient: ...
