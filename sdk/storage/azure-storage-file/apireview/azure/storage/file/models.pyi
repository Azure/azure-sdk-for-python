# Stubs for azure.storage.file.models (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._generated.models import AccessPolicy as GenAccessPolicy, CorsRule as GeneratedCorsRule, DirectoryItem, Metrics as GeneratedMetrics, RetentionPolicy as GeneratedRetentionPolicy, StorageErrorException
from ._shared.models import DictMixin, get_enum_value
from ._shared.response_handlers import process_storage_error, return_context_and_deserialized
from azure.core.paging import PageIterator
from typing import Any, Optional

class Metrics(GeneratedMetrics):
    version: Any = ...
    enabled: Any = ...
    include_apis: Any = ...
    retention_policy: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class RetentionPolicy(GeneratedRetentionPolicy):
    enabled: Any = ...
    days: Any = ...
    def __init__(self, enabled: bool = ..., days: Optional[Any] = ...) -> None: ...

class CorsRule(GeneratedCorsRule):
    allowed_origins: Any = ...
    allowed_methods: Any = ...
    allowed_headers: Any = ...
    exposed_headers: Any = ...
    max_age_in_seconds: Any = ...
    def __init__(self, allowed_origins: Any, allowed_methods: Any, **kwargs: Any) -> None: ...

class AccessPolicy(GenAccessPolicy):
    start: Any = ...
    expiry: Any = ...
    permission: Any = ...
    def __init__(self, permission: Optional[Any] = ..., expiry: Optional[Any] = ..., start: Optional[Any] = ...) -> None: ...

class ContentSettings(DictMixin):
    content_type: Any = ...
    content_encoding: Any = ...
    content_language: Any = ...
    content_md5: Any = ...
    content_disposition: Any = ...
    cache_control: Any = ...
    def __init__(self, content_type: Optional[Any] = ..., content_encoding: Optional[Any] = ..., content_language: Optional[Any] = ..., content_disposition: Optional[Any] = ..., cache_control: Optional[Any] = ..., content_md5: Optional[Any] = ..., **kwargs: Any) -> None: ...

class ShareProperties(DictMixin):
    name: Any = ...
    last_modified: Any = ...
    etag: Any = ...
    quota: Any = ...
    metadata: Any = ...
    snapshot: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class SharePropertiesPaged(PageIterator):
    service_endpoint: Any = ...
    prefix: Any = ...
    marker: Any = ...
    results_per_page: Any = ...
    location_mode: Any = ...
    current_page: Any = ...
    def __init__(self, command: Any, prefix: Optional[Any] = ..., results_per_page: Optional[Any] = ..., continuation_token: Optional[Any] = ...) -> None: ...

class Handle(DictMixin):
    id: Any = ...
    path: Any = ...
    file_id: Any = ...
    parent_id: Any = ...
    session_id: Any = ...
    client_ip: Any = ...
    open_time: Any = ...
    last_reconnect_time: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class HandlesPaged(PageIterator):
    marker: Any = ...
    results_per_page: Any = ...
    location_mode: Any = ...
    current_page: Any = ...
    def __init__(self, command: Any, results_per_page: Optional[Any] = ..., continuation_token: Optional[Any] = ...) -> None: ...

class DirectoryProperties(DictMixin):
    name: Any = ...
    last_modified: Any = ...
    etag: Any = ...
    server_encrypted: Any = ...
    metadata: Any = ...
    change_time: Any = ...
    creation_time: Any = ...
    last_write_time: Any = ...
    file_attributes: Any = ...
    permission_key: Any = ...
    file_id: Any = ...
    parent_id: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class DirectoryPropertiesPaged(PageIterator):
    service_endpoint: Any = ...
    prefix: Any = ...
    marker: Any = ...
    results_per_page: Any = ...
    location_mode: Any = ...
    current_page: Any = ...
    def __init__(self, command: Any, prefix: Optional[Any] = ..., results_per_page: Optional[Any] = ..., continuation_token: Optional[Any] = ...) -> None: ...

class FileProperties(DictMixin):
    name: Any = ...
    path: Any = ...
    share: Any = ...
    snapshot: Any = ...
    content_length: Any = ...
    metadata: Any = ...
    file_type: Any = ...
    last_modified: Any = ...
    etag: Any = ...
    size: Any = ...
    content_range: Any = ...
    server_encrypted: Any = ...
    copy: Any = ...
    content_settings: Any = ...
    change_time: Any = ...
    creation_time: Any = ...
    last_write_time: Any = ...
    file_attributes: Any = ...
    permission_key: Any = ...
    file_id: Any = ...
    parent_id: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class CopyProperties(DictMixin):
    id: Any = ...
    source: Any = ...
    status: Any = ...
    progress: Any = ...
    completion_time: Any = ...
    status_description: Any = ...
    incremental_copy: Any = ...
    destination_snapshot: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class FilePermissions:
    CREATE: FilePermissions = ...
    DELETE: FilePermissions = ...
    READ: FilePermissions = ...
    WRITE: FilePermissions = ...
    read: Any = ...
    create: Any = ...
    write: Any = ...
    delete: Any = ...
    def __init__(self, read: bool = ..., create: bool = ..., write: bool = ..., delete: bool = ..., _str: Optional[Any] = ...) -> None: ...
    def __or__(self, other: Any): ...
    def __add__(self, other: Any): ...

class SharePermissions:
    LIST: SharePermissions = ...
    DELETE: SharePermissions = ...
    READ: SharePermissions = ...
    WRITE: SharePermissions = ...
    read: Any = ...
    write: Any = ...
    delete: Any = ...
    list: Any = ...
    def __init__(self, read: bool = ..., write: bool = ..., delete: bool = ..., list: bool = ..., _str: Optional[Any] = ...) -> None: ...
    def __or__(self, other: Any): ...
    def __add__(self, other: Any): ...

class NTFSAttributes:
    read_only: Any = ...
    hidden: Any = ...
    system: Any = ...
    none: Any = ...
    directory: Any = ...
    archive: Any = ...
    temporary: Any = ...
    offline: Any = ...
    not_content_indexed: Any = ...
    no_scrub_data: Any = ...
    def __init__(self, read_only: bool = ..., hidden: bool = ..., system: bool = ..., none: bool = ..., directory: bool = ..., archive: bool = ..., temporary: bool = ..., offline: bool = ..., not_content_indexed: bool = ..., no_scrub_data: bool = ..., _str: Optional[Any] = ...) -> None: ...
    def __or__(self, other: Any): ...
    def __add__(self, other: Any): ...
