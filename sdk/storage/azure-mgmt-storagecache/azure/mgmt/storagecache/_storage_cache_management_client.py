# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from copy import deepcopy
from typing import Any, Optional, TYPE_CHECKING, cast
from typing_extensions import Self

from azure.core.pipeline import policies
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.settings import settings
from azure.mgmt.core import ARMPipelineClient
from azure.mgmt.core.policies import ARMAutoResourceProviderRegistrationPolicy
from azure.mgmt.core.tools import get_arm_endpoints

from . import models as _models
from ._configuration import StorageCacheManagementClientConfiguration
from ._utils.serialization import Deserializer, Serializer
from .operations import (
    AmlFilesystemsOperations,
    AscOperationsOperations,
    AscUsagesOperations,
    AutoExportJobsOperations,
    AutoImportJobsOperations,
    CachesOperations,
    ImportJobsOperations,
    Operations,
    SkusOperations,
    StorageTargetOperations,
    StorageTargetsOperations,
    UsageModelsOperations,
    _StorageCacheManagementClientOperationsMixin,
)

if TYPE_CHECKING:
    from azure.core import AzureClouds
    from azure.core.credentials import TokenCredential


class StorageCacheManagementClient(
    _StorageCacheManagementClientOperationsMixin
):  # pylint: disable=too-many-instance-attributes
    """Azure Managed Lustre provides a fully managed LustreÂ® file system, integrated with Blob
    storage, for use on demand. These operations create and manage Azure Managed Lustre file
    systems.

    :ivar aml_filesystems: AmlFilesystemsOperations operations
    :vartype aml_filesystems: azure.mgmt.storagecache.operations.AmlFilesystemsOperations
    :ivar auto_export_jobs: AutoExportJobsOperations operations
    :vartype auto_export_jobs: azure.mgmt.storagecache.operations.AutoExportJobsOperations
    :ivar import_jobs: ImportJobsOperations operations
    :vartype import_jobs: azure.mgmt.storagecache.operations.ImportJobsOperations
    :ivar auto_import_jobs: AutoImportJobsOperations operations
    :vartype auto_import_jobs: azure.mgmt.storagecache.operations.AutoImportJobsOperations
    :ivar operations: Operations operations
    :vartype operations: azure.mgmt.storagecache.operations.Operations
    :ivar skus: SkusOperations operations
    :vartype skus: azure.mgmt.storagecache.operations.SkusOperations
    :ivar usage_models: UsageModelsOperations operations
    :vartype usage_models: azure.mgmt.storagecache.operations.UsageModelsOperations
    :ivar asc_operations: AscOperationsOperations operations
    :vartype asc_operations: azure.mgmt.storagecache.operations.AscOperationsOperations
    :ivar asc_usages: AscUsagesOperations operations
    :vartype asc_usages: azure.mgmt.storagecache.operations.AscUsagesOperations
    :ivar caches: CachesOperations operations
    :vartype caches: azure.mgmt.storagecache.operations.CachesOperations
    :ivar storage_targets: StorageTargetsOperations operations
    :vartype storage_targets: azure.mgmt.storagecache.operations.StorageTargetsOperations
    :ivar storage_target: StorageTargetOperations operations
    :vartype storage_target: azure.mgmt.storagecache.operations.StorageTargetOperations
    :param credential: Credential needed for the client to connect to Azure. Required.
    :type credential: ~azure.core.credentials.TokenCredential
    :param subscription_id: The ID of the target subscription. Required.
    :type subscription_id: str
    :param base_url: Service URL. Default value is None.
    :type base_url: str
    :keyword cloud_setting: The cloud setting for which to get the ARM endpoint. Default value is
     None.
    :paramtype cloud_setting: ~azure.core.AzureClouds
    :keyword api_version: Api Version. Default value is "2025-07-01". Note that overriding this
     default value may result in unsupported behavior.
    :paramtype api_version: str
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
     Retry-After header is present.
    """

    def __init__(
        self,
        credential: "TokenCredential",
        subscription_id: str,
        base_url: Optional[str] = None,
        *,
        cloud_setting: Optional["AzureClouds"] = None,
        **kwargs: Any
    ) -> None:
        _cloud = cloud_setting or settings.current.azure_cloud  # type: ignore
        _endpoints = get_arm_endpoints(_cloud)
        if not base_url:
            base_url = _endpoints["resource_manager"]
        credential_scopes = kwargs.pop("credential_scopes", _endpoints["credential_scopes"])
        self._config = StorageCacheManagementClientConfiguration(
            credential=credential,
            subscription_id=subscription_id,
            cloud_setting=cloud_setting,
            credential_scopes=credential_scopes,
            **kwargs
        )

        _policies = kwargs.pop("policies", None)
        if _policies is None:
            _policies = [
                policies.RequestIdPolicy(**kwargs),
                self._config.headers_policy,
                self._config.user_agent_policy,
                self._config.proxy_policy,
                policies.ContentDecodePolicy(**kwargs),
                ARMAutoResourceProviderRegistrationPolicy(),
                self._config.redirect_policy,
                self._config.retry_policy,
                self._config.authentication_policy,
                self._config.custom_hook_policy,
                self._config.logging_policy,
                policies.DistributedTracingPolicy(**kwargs),
                policies.SensitiveHeaderCleanupPolicy(**kwargs) if self._config.redirect_policy else None,
                self._config.http_logging_policy,
            ]
        self._client: ARMPipelineClient = ARMPipelineClient(base_url=cast(str, base_url), policies=_policies, **kwargs)

        client_models = {k: v for k, v in _models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)
        self._serialize.client_side_validation = False
        self.aml_filesystems = AmlFilesystemsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.auto_export_jobs = AutoExportJobsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.import_jobs = ImportJobsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.auto_import_jobs = AutoImportJobsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.operations = Operations(self._client, self._config, self._serialize, self._deserialize)
        self.skus = SkusOperations(self._client, self._config, self._serialize, self._deserialize)
        self.usage_models = UsageModelsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.asc_operations = AscOperationsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.asc_usages = AscUsagesOperations(self._client, self._config, self._serialize, self._deserialize)
        self.caches = CachesOperations(self._client, self._config, self._serialize, self._deserialize)
        self.storage_targets = StorageTargetsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.storage_target = StorageTargetOperations(self._client, self._config, self._serialize, self._deserialize)

    def _send_request(self, request: HttpRequest, *, stream: bool = False, **kwargs: Any) -> HttpResponse:
        """Runs the network request through the client's chained policies.

        >>> from azure.core.rest import HttpRequest
        >>> request = HttpRequest("GET", "https://www.example.org/")
        <HttpRequest [GET], url: 'https://www.example.org/'>
        >>> response = client._send_request(request)
        <HttpResponse: 200 OK>

        For more information on this code flow, see https://aka.ms/azsdk/dpcodegen/python/send_request

        :param request: The network request you want to make. Required.
        :type request: ~azure.core.rest.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to False.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.rest.HttpResponse
        """

        request_copy = deepcopy(request)
        request_copy.url = self._client.format_url(request_copy.url)
        return self._client.send_request(request_copy, stream=stream, **kwargs)  # type: ignore

    def close(self) -> None:
        self._client.close()

    def __enter__(self) -> Self:
        self._client.__enter__()
        return self

    def __exit__(self, *exc_details: Any) -> None:
        self._client.__exit__(*exc_details)
