# pylint: disable=line-too-long,useless-suppression
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=wrong-import-position

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ._patch import *  # pylint: disable=unused-wildcard-import

from ._aml_filesystems_operations import AmlFilesystemsOperations  # type: ignore
from ._auto_export_jobs_operations import AutoExportJobsOperations  # type: ignore
from ._import_jobs_operations import ImportJobsOperations  # type: ignore
from ._auto_import_jobs_operations import AutoImportJobsOperations  # type: ignore
from ._storage_cache_management_client_operations import _StorageCacheManagementClientOperationsMixin  # type: ignore # pylint: disable=unused-import
from ._operations import Operations  # type: ignore
from ._skus_operations import SkusOperations  # type: ignore
from ._usage_models_operations import UsageModelsOperations  # type: ignore
from ._asc_operations_operations import AscOperationsOperations  # type: ignore
from ._asc_usages_operations import AscUsagesOperations  # type: ignore
from ._caches_operations import CachesOperations  # type: ignore
from ._storage_targets_operations import StorageTargetsOperations  # type: ignore
from ._storage_target_operations import StorageTargetOperations  # type: ignore

from ._patch import __all__ as _patch_all
from ._patch import *
from ._patch import patch_sdk as _patch_sdk

__all__ = [
    "AmlFilesystemsOperations",
    "AutoExportJobsOperations",
    "ImportJobsOperations",
    "AutoImportJobsOperations",
    "Operations",
    "SkusOperations",
    "UsageModelsOperations",
    "AscOperationsOperations",
    "AscUsagesOperations",
    "CachesOperations",
    "StorageTargetsOperations",
    "StorageTargetOperations",
]
__all__.extend([p for p in _patch_all if p not in __all__])  # pyright: ignore
_patch_sdk()
