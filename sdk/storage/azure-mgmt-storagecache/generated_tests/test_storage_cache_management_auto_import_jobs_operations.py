# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.storagecache import StorageCacheManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestStorageCacheManagementAutoImportJobsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(StorageCacheManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_auto_import_jobs_begin_delete(self, resource_group):
        response = self.client.auto_import_jobs.begin_delete(
            resource_group_name=resource_group.name,
            aml_filesystem_name="str",
            auto_import_job_name="str",
            api_version="2025-07-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_auto_import_jobs_get(self, resource_group):
        response = self.client.auto_import_jobs.get(
            resource_group_name=resource_group.name,
            aml_filesystem_name="str",
            auto_import_job_name="str",
            api_version="2025-07-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_auto_import_jobs_begin_create_or_update(self, resource_group):
        response = self.client.auto_import_jobs.begin_create_or_update(
            resource_group_name=resource_group.name,
            aml_filesystem_name="str",
            auto_import_job_name="str",
            auto_import_job={
                "location": "str",
                "adminStatus": "Enable",
                "autoImportPrefixes": ["str"],
                "blobSyncEvents": {
                    "deletions": 0,
                    "importedDirectories": 0,
                    "importedFiles": 0,
                    "importedSymlinks": 0,
                    "lastChangeFeedEventConsumedTime": "2020-02-20 00:00:00",
                    "lastTimeFullySynchronized": "2020-02-20 00:00:00",
                    "preexistingDirectories": 0,
                    "preexistingFiles": 0,
                    "preexistingSymlinks": 0,
                    "rateOfBlobImport": 0,
                    "totalBlobsImported": 0,
                    "totalConflicts": 0,
                    "totalErrors": 0,
                },
                "conflictResolutionMode": "str",
                "enableDeletions": False,
                "id": "str",
                "importedDirectories": 0,
                "importedFiles": 0,
                "importedSymlinks": 0,
                "lastCompletionTimeUTC": "2020-02-20 00:00:00",
                "lastStartedTimeUTC": "2020-02-20 00:00:00",
                "maximumErrors": 0,
                "name": "str",
                "preexistingDirectories": 0,
                "preexistingFiles": 0,
                "preexistingSymlinks": 0,
                "provisioningState": "str",
                "rateOfBlobImport": 0,
                "rateOfBlobWalk": 0,
                "scanEndTime": "2020-02-20 00:00:00",
                "scanStartTime": "2020-02-20 00:00:00",
                "state": "str",
                "statusCode": "str",
                "statusMessage": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "totalBlobsImported": 0,
                "totalBlobsWalked": 0,
                "totalConflicts": 0,
                "totalErrors": 0,
                "type": "str",
            },
            api_version="2025-07-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_auto_import_jobs_begin_update(self, resource_group):
        response = self.client.auto_import_jobs.begin_update(
            resource_group_name=resource_group.name,
            aml_filesystem_name="str",
            auto_import_job_name="str",
            auto_import_job={"adminStatus": "str", "tags": {"str": "str"}},
            api_version="2025-07-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_auto_import_jobs_list_by_aml_filesystem(self, resource_group):
        response = self.client.auto_import_jobs.list_by_aml_filesystem(
            resource_group_name=resource_group.name,
            aml_filesystem_name="str",
            api_version="2025-07-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...
