# Stubs for azure.storage.queue.aio.queue_client_async (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .._shared.policies_async import ExponentialRetry
from ..queue_client import QueueClient as QueueClientBase
from azure.core.async_paging import AsyncItemPaged
from azure.storage.queue._shared.base_client_async import AsyncStorageAccountHostsMixin
from azure.storage.queue.models import AccessPolicy, QueueMessage, QueueProperties
from typing import Any, Dict, List, Optional, Union

class QueueClient(AsyncStorageAccountHostsMixin, QueueClientBase):
    def __init__(self, queue_url: str, queue: Optional[Union[QueueProperties, str]]=..., credential: Optional[Any]=..., loop: Any=..., **kwargs: Any) -> None: ...
    async def create_queue(self, metadata: Optional[Dict[str, Any]]=..., timeout: Optional[int]=..., **kwargs: Optional[Any]) -> None: ...
    async def delete_queue(self, timeout: Optional[int]=..., **kwargs: Optional[Any]) -> None: ...
    async def get_queue_properties(self, timeout: Optional[int]=..., **kwargs: Optional[Any]) -> QueueProperties: ...
    async def set_queue_metadata(self, metadata: Optional[Dict[str, Any]]=..., timeout: Optional[int]=..., **kwargs: Optional[Any]) -> None: ...
    async def get_queue_access_policy(self, timeout: Optional[int]=..., **kwargs: Optional[Any]) -> Dict[str, Any]: ...
    async def set_queue_access_policy(self, signed_identifiers: Optional[Dict[str, Optional[AccessPolicy]]]=..., timeout: Optional[int]=..., **kwargs: Optional[Any]) -> None: ...
    async def enqueue_message(self, content: Any, visibility_timeout: Optional[int]=..., time_to_live: Optional[int]=..., timeout: Optional[int]=..., **kwargs: Optional[Any]) -> QueueMessage: ...
    def receive_messages(self, messages_per_page: Optional[int]=..., visibility_timeout: Optional[int]=..., timeout: Optional[int]=..., **kwargs: Optional[Any]) -> AsyncItemPaged[Message]: ...
    async def update_message(self, message: Any, visibility_timeout: int=..., pop_receipt: Optional[str]=..., content: Optional[Any]=..., timeout: Optional[int]=..., **kwargs: Any) -> QueueMessage: ...
    async def peek_messages(self, max_messages: Optional[int]=..., timeout: Optional[int]=..., **kwargs: Optional[Any]) -> List[QueueMessage]: ...
    async def clear_messages(self, timeout: Optional[int]=..., **kwargs: Optional[Any]) -> None: ...
    async def delete_message(self, message: Any, pop_receipt: Optional[str]=..., timeout: Optional[str]=..., **kwargs: Optional[int]) -> None: ...
