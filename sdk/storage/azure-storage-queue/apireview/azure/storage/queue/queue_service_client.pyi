# Stubs for azure.storage.queue.queue_service_client (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._generated import AzureQueueStorage
from ._generated.models import StorageErrorException, StorageServiceProperties
from ._shared.base_client import StorageAccountHostsMixin, parse_connection_str, parse_query
from ._shared.models import AccountPermissions, LocationMode, ResourceTypes, Services
from ._shared.response_handlers import process_storage_error
from ._shared.shared_access_signature import SharedAccessSignature
from .models import CorsRule, Logging, Metrics, QueueProperties, QueuePropertiesPaged
from .queue_client import QueueClient
from azure.core.paging import ItemPaged
from datetime import datetime
from typing import Any, Dict, List, Optional, Union

class QueueServiceClient(StorageAccountHostsMixin):
    def __init__(self, account_url: str, credential: Optional[Any]=..., **kwargs: Any) -> None: ...
    @classmethod
    def from_connection_string(cls: Any, conn_str: str, credential: Optional[Any]=..., **kwargs: Any) -> QueueServiceClient: ...
    def generate_shared_access_signature(self, resource_types: Union[ResourceTypes, str], permission: Union[AccountPermissions, str], expiry: Optional[Union[datetime, str]], start: Optional[Union[datetime, str]]=..., ip: Optional[str]=..., protocol: Optional[str]=...) -> str: ...
    def get_service_stats(self, timeout: Optional[int]=..., **kwargs: Optional[Any]) -> Dict[str, Any]: ...
    def get_service_properties(self, timeout: Optional[int]=..., **kwargs: Optional[Any]) -> Dict[str, Any]: ...
    def set_service_properties(self, logging: Optional[Logging]=..., hour_metrics: Optional[Metrics]=..., minute_metrics: Optional[Metrics]=..., cors: Optional[List[CorsRule]]=..., timeout: Optional[int]=..., **kwargs: Any) -> None: ...
    def list_queues(self, name_starts_with: Optional[str]=..., include_metadata: Optional[bool]=..., results_per_page: Optional[int]=..., timeout: Optional[int]=..., **kwargs: Any) -> ItemPaged[QueueProperties]: ...
    def create_queue(self, name: str, metadata: Optional[Dict[str, str]]=..., timeout: Optional[int]=..., **kwargs: Any) -> QueueClient: ...
    def delete_queue(self, queue: Union[QueueProperties, str], timeout: Optional[int]=..., **kwargs: Any) -> None: ...
    def get_queue_client(self, queue: Union[QueueProperties, str], **kwargs: Optional[Any]) -> QueueClient: ...
