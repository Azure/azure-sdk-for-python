# Stubs for azure.storage.queue.models (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._generated.models import AccessPolicy as GenAccessPolicy, CorsRule as GeneratedCorsRule, Logging as GeneratedLogging, Metrics as GeneratedMetrics, RetentionPolicy as GeneratedRetentionPolicy, StorageErrorException
from ._shared.models import DictMixin
from ._shared.response_handlers import process_storage_error, return_context_and_deserialized
from azure.core.paging import PageIterator
from typing import Any, Optional

class Logging(GeneratedLogging):
    version: Any = ...
    delete: Any = ...
    read: Any = ...
    write: Any = ...
    retention_policy: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class Metrics(GeneratedMetrics):
    version: Any = ...
    enabled: Any = ...
    include_apis: Any = ...
    retention_policy: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class RetentionPolicy(GeneratedRetentionPolicy):
    enabled: Any = ...
    days: Any = ...
    def __init__(self, enabled: bool = ..., days: Optional[Any] = ...) -> None: ...

class CorsRule(GeneratedCorsRule):
    allowed_origins: Any = ...
    allowed_methods: Any = ...
    allowed_headers: Any = ...
    exposed_headers: Any = ...
    max_age_in_seconds: Any = ...
    def __init__(self, allowed_origins: Any, allowed_methods: Any, **kwargs: Any) -> None: ...

class AccessPolicy(GenAccessPolicy):
    start: Any = ...
    expiry: Any = ...
    permission: Any = ...
    def __init__(self, permission: Optional[Any] = ..., expiry: Optional[Any] = ..., start: Optional[Any] = ...) -> None: ...

class QueueMessage(DictMixin):
    id: Any = ...
    insertion_time: Any = ...
    expiration_time: Any = ...
    dequeue_count: Any = ...
    content: Any = ...
    pop_receipt: Any = ...
    time_next_visible: Any = ...
    def __init__(self, content: Optional[Any] = ...) -> None: ...

class MessagesPaged(PageIterator):
    results_per_page: Any = ...
    def __init__(self, command: Any, results_per_page: Optional[Any] = ..., continuation_token: Optional[Any] = ...) -> None: ...

class QueueProperties(DictMixin):
    name: Any = ...
    metadata: Any = ...
    approximate_message_count: Any = ...
    def __init__(self, **kwargs: Any) -> None: ...

class QueuePropertiesPaged(PageIterator):
    service_endpoint: Any = ...
    prefix: Any = ...
    marker: Any = ...
    results_per_page: Any = ...
    location_mode: Any = ...
    def __init__(self, command: Any, prefix: Optional[Any] = ..., results_per_page: Optional[Any] = ..., continuation_token: Optional[Any] = ...) -> None: ...

class QueuePermissions:
    READ: QueuePermissions = ...
    ADD: QueuePermissions = ...
    UPDATE: QueuePermissions = ...
    PROCESS: QueuePermissions = ...
    read: Any = ...
    add: Any = ...
    update: Any = ...
    process: Any = ...
    def __init__(self, read: bool = ..., add: bool = ..., update: bool = ..., process: bool = ..., _str: Optional[Any] = ...) -> None: ...
    def __or__(self, other: Any): ...
    def __add__(self, other: Any): ...
