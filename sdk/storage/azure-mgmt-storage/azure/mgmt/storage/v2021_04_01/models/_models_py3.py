# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, TYPE_CHECKING, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    import __init__ as _models


class AccessPolicy(msrest.serialization.Model):
    """AccessPolicy.

    :ivar start_time: Start time of the access policy.
    :vartype start_time: ~datetime.datetime
    :ivar expiry_time: Expiry time of the access policy.
    :vartype expiry_time: ~datetime.datetime
    :ivar permission: List of abbreviated permissions.
    :vartype permission: str
    """

    _attribute_map = {
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'expiry_time': {'key': 'expiryTime', 'type': 'iso-8601'},
        'permission': {'key': 'permission', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        start_time: Optional[datetime.datetime] = None,
        expiry_time: Optional[datetime.datetime] = None,
        permission: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword start_time: Start time of the access policy.
        :paramtype start_time: ~datetime.datetime
        :keyword expiry_time: Expiry time of the access policy.
        :paramtype expiry_time: ~datetime.datetime
        :keyword permission: List of abbreviated permissions.
        :paramtype permission: str
        """
        super(AccessPolicy, self).__init__(**kwargs)
        self.start_time = start_time
        self.expiry_time = expiry_time
        self.permission = permission


class AccountSasParameters(msrest.serialization.Model):
    """The parameters to list SAS credentials of a storage account.

    All required parameters must be populated in order to send to Azure.

    :ivar services: Required. The signed services accessible with the account SAS. Possible values
     include: Blob (b), Queue (q), Table (t), File (f). Known values are: "b", "q", "t", "f".
    :vartype services: str or ~azure.mgmt.storage.v2021_04_01.models.Services
    :ivar resource_types: Required. The signed resource types that are accessible with the account
     SAS. Service (s): Access to service-level APIs; Container (c): Access to container-level APIs;
     Object (o): Access to object-level APIs for blobs, queue messages, table entities, and files.
     Known values are: "s", "c", "o".
    :vartype resource_types: str or ~azure.mgmt.storage.v2021_04_01.models.SignedResourceTypes
    :ivar permissions: Required. The signed permissions for the account SAS. Possible values
     include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process
     (p). Known values are: "r", "d", "w", "l", "a", "c", "u", "p".
    :vartype permissions: str or ~azure.mgmt.storage.v2021_04_01.models.Permissions
    :ivar ip_address_or_range: An IP address or a range of IP addresses from which to accept
     requests.
    :vartype ip_address_or_range: str
    :ivar protocols: The protocol permitted for a request made with the account SAS. Known values
     are: "https,http", "https".
    :vartype protocols: str or ~azure.mgmt.storage.v2021_04_01.models.HttpProtocol
    :ivar shared_access_start_time: The time at which the SAS becomes valid.
    :vartype shared_access_start_time: ~datetime.datetime
    :ivar shared_access_expiry_time: Required. The time at which the shared access signature
     becomes invalid.
    :vartype shared_access_expiry_time: ~datetime.datetime
    :ivar key_to_sign: The key to sign the account SAS token with.
    :vartype key_to_sign: str
    """

    _validation = {
        'services': {'required': True},
        'resource_types': {'required': True},
        'permissions': {'required': True},
        'shared_access_expiry_time': {'required': True},
    }

    _attribute_map = {
        'services': {'key': 'signedServices', 'type': 'str'},
        'resource_types': {'key': 'signedResourceTypes', 'type': 'str'},
        'permissions': {'key': 'signedPermission', 'type': 'str'},
        'ip_address_or_range': {'key': 'signedIp', 'type': 'str'},
        'protocols': {'key': 'signedProtocol', 'type': 'str'},
        'shared_access_start_time': {'key': 'signedStart', 'type': 'iso-8601'},
        'shared_access_expiry_time': {'key': 'signedExpiry', 'type': 'iso-8601'},
        'key_to_sign': {'key': 'keyToSign', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        services: Union[str, "_models.Services"],
        resource_types: Union[str, "_models.SignedResourceTypes"],
        permissions: Union[str, "_models.Permissions"],
        shared_access_expiry_time: datetime.datetime,
        ip_address_or_range: Optional[str] = None,
        protocols: Optional[Union[str, "_models.HttpProtocol"]] = None,
        shared_access_start_time: Optional[datetime.datetime] = None,
        key_to_sign: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword services: Required. The signed services accessible with the account SAS. Possible
         values include: Blob (b), Queue (q), Table (t), File (f). Known values are: "b", "q", "t", "f".
        :paramtype services: str or ~azure.mgmt.storage.v2021_04_01.models.Services
        :keyword resource_types: Required. The signed resource types that are accessible with the
         account SAS. Service (s): Access to service-level APIs; Container (c): Access to
         container-level APIs; Object (o): Access to object-level APIs for blobs, queue messages, table
         entities, and files. Known values are: "s", "c", "o".
        :paramtype resource_types: str or ~azure.mgmt.storage.v2021_04_01.models.SignedResourceTypes
        :keyword permissions: Required. The signed permissions for the account SAS. Possible values
         include: Read (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process
         (p). Known values are: "r", "d", "w", "l", "a", "c", "u", "p".
        :paramtype permissions: str or ~azure.mgmt.storage.v2021_04_01.models.Permissions
        :keyword ip_address_or_range: An IP address or a range of IP addresses from which to accept
         requests.
        :paramtype ip_address_or_range: str
        :keyword protocols: The protocol permitted for a request made with the account SAS. Known
         values are: "https,http", "https".
        :paramtype protocols: str or ~azure.mgmt.storage.v2021_04_01.models.HttpProtocol
        :keyword shared_access_start_time: The time at which the SAS becomes valid.
        :paramtype shared_access_start_time: ~datetime.datetime
        :keyword shared_access_expiry_time: Required. The time at which the shared access signature
         becomes invalid.
        :paramtype shared_access_expiry_time: ~datetime.datetime
        :keyword key_to_sign: The key to sign the account SAS token with.
        :paramtype key_to_sign: str
        """
        super(AccountSasParameters, self).__init__(**kwargs)
        self.services = services
        self.resource_types = resource_types
        self.permissions = permissions
        self.ip_address_or_range = ip_address_or_range
        self.protocols = protocols
        self.shared_access_start_time = shared_access_start_time
        self.shared_access_expiry_time = shared_access_expiry_time
        self.key_to_sign = key_to_sign


class ActiveDirectoryProperties(msrest.serialization.Model):
    """Settings properties for Active Directory (AD).

    All required parameters must be populated in order to send to Azure.

    :ivar domain_name: Required. Specifies the primary domain that the AD DNS server is
     authoritative for.
    :vartype domain_name: str
    :ivar net_bios_domain_name: Required. Specifies the NetBIOS domain name.
    :vartype net_bios_domain_name: str
    :ivar forest_name: Required. Specifies the Active Directory forest to get.
    :vartype forest_name: str
    :ivar domain_guid: Required. Specifies the domain GUID.
    :vartype domain_guid: str
    :ivar domain_sid: Required. Specifies the security identifier (SID).
    :vartype domain_sid: str
    :ivar azure_storage_sid: Required. Specifies the security identifier (SID) for Azure Storage.
    :vartype azure_storage_sid: str
    """

    _validation = {
        'domain_name': {'required': True},
        'net_bios_domain_name': {'required': True},
        'forest_name': {'required': True},
        'domain_guid': {'required': True},
        'domain_sid': {'required': True},
        'azure_storage_sid': {'required': True},
    }

    _attribute_map = {
        'domain_name': {'key': 'domainName', 'type': 'str'},
        'net_bios_domain_name': {'key': 'netBiosDomainName', 'type': 'str'},
        'forest_name': {'key': 'forestName', 'type': 'str'},
        'domain_guid': {'key': 'domainGuid', 'type': 'str'},
        'domain_sid': {'key': 'domainSid', 'type': 'str'},
        'azure_storage_sid': {'key': 'azureStorageSid', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        domain_name: str,
        net_bios_domain_name: str,
        forest_name: str,
        domain_guid: str,
        domain_sid: str,
        azure_storage_sid: str,
        **kwargs
    ):
        """
        :keyword domain_name: Required. Specifies the primary domain that the AD DNS server is
         authoritative for.
        :paramtype domain_name: str
        :keyword net_bios_domain_name: Required. Specifies the NetBIOS domain name.
        :paramtype net_bios_domain_name: str
        :keyword forest_name: Required. Specifies the Active Directory forest to get.
        :paramtype forest_name: str
        :keyword domain_guid: Required. Specifies the domain GUID.
        :paramtype domain_guid: str
        :keyword domain_sid: Required. Specifies the security identifier (SID).
        :paramtype domain_sid: str
        :keyword azure_storage_sid: Required. Specifies the security identifier (SID) for Azure
         Storage.
        :paramtype azure_storage_sid: str
        """
        super(ActiveDirectoryProperties, self).__init__(**kwargs)
        self.domain_name = domain_name
        self.net_bios_domain_name = net_bios_domain_name
        self.forest_name = forest_name
        self.domain_guid = domain_guid
        self.domain_sid = domain_sid
        self.azure_storage_sid = azure_storage_sid


class Resource(msrest.serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class AzureEntityResource(Resource):
    """The resource model definition for an Azure Resource Manager resource with an etag.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar etag: Resource Etag.
    :vartype etag: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(AzureEntityResource, self).__init__(**kwargs)
        self.etag = None


class AzureFilesIdentityBasedAuthentication(msrest.serialization.Model):
    """Settings for Azure Files identity based authentication.

    All required parameters must be populated in order to send to Azure.

    :ivar directory_service_options: Required. Indicates the directory service used. Known values
     are: "None", "AADDS", "AD".
    :vartype directory_service_options: str or
     ~azure.mgmt.storage.v2021_04_01.models.DirectoryServiceOptions
    :ivar active_directory_properties: Required if choose AD.
    :vartype active_directory_properties:
     ~azure.mgmt.storage.v2021_04_01.models.ActiveDirectoryProperties
    :ivar default_share_permission: Default share permission for users using Kerberos
     authentication if RBAC role is not assigned. Known values are: "None",
     "StorageFileDataSmbShareReader", "StorageFileDataSmbShareContributor",
     "StorageFileDataSmbShareElevatedContributor", "StorageFileDataSmbShareOwner".
    :vartype default_share_permission: str or
     ~azure.mgmt.storage.v2021_04_01.models.DefaultSharePermission
    """

    _validation = {
        'directory_service_options': {'required': True},
    }

    _attribute_map = {
        'directory_service_options': {'key': 'directoryServiceOptions', 'type': 'str'},
        'active_directory_properties': {'key': 'activeDirectoryProperties', 'type': 'ActiveDirectoryProperties'},
        'default_share_permission': {'key': 'defaultSharePermission', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        directory_service_options: Union[str, "_models.DirectoryServiceOptions"],
        active_directory_properties: Optional["_models.ActiveDirectoryProperties"] = None,
        default_share_permission: Optional[Union[str, "_models.DefaultSharePermission"]] = None,
        **kwargs
    ):
        """
        :keyword directory_service_options: Required. Indicates the directory service used. Known
         values are: "None", "AADDS", "AD".
        :paramtype directory_service_options: str or
         ~azure.mgmt.storage.v2021_04_01.models.DirectoryServiceOptions
        :keyword active_directory_properties: Required if choose AD.
        :paramtype active_directory_properties:
         ~azure.mgmt.storage.v2021_04_01.models.ActiveDirectoryProperties
        :keyword default_share_permission: Default share permission for users using Kerberos
         authentication if RBAC role is not assigned. Known values are: "None",
         "StorageFileDataSmbShareReader", "StorageFileDataSmbShareContributor",
         "StorageFileDataSmbShareElevatedContributor", "StorageFileDataSmbShareOwner".
        :paramtype default_share_permission: str or
         ~azure.mgmt.storage.v2021_04_01.models.DefaultSharePermission
        """
        super(AzureFilesIdentityBasedAuthentication, self).__init__(**kwargs)
        self.directory_service_options = directory_service_options
        self.active_directory_properties = active_directory_properties
        self.default_share_permission = default_share_permission


class BlobContainer(AzureEntityResource):
    """Properties of the blob container, including Id, resource name, resource type, Etag.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar etag: Resource Etag.
    :vartype etag: str
    :ivar version: The version of the deleted blob container.
    :vartype version: str
    :ivar deleted: Indicates whether the blob container was deleted.
    :vartype deleted: bool
    :ivar deleted_time: Blob container deletion time.
    :vartype deleted_time: ~datetime.datetime
    :ivar remaining_retention_days: Remaining retention days for soft deleted blob container.
    :vartype remaining_retention_days: int
    :ivar default_encryption_scope: Default the container to use specified encryption scope for all
     writes.
    :vartype default_encryption_scope: str
    :ivar deny_encryption_scope_override: Block override of encryption scope from the container
     default.
    :vartype deny_encryption_scope_override: bool
    :ivar public_access: Specifies whether data in the container may be accessed publicly and the
     level of access. Known values are: "Container", "Blob", "None".
    :vartype public_access: str or ~azure.mgmt.storage.v2021_04_01.models.PublicAccess
    :ivar last_modified_time: Returns the date and time the container was last modified.
    :vartype last_modified_time: ~datetime.datetime
    :ivar lease_status: The lease status of the container. Known values are: "Locked", "Unlocked".
    :vartype lease_status: str or ~azure.mgmt.storage.v2021_04_01.models.LeaseStatus
    :ivar lease_state: Lease state of the container. Known values are: "Available", "Leased",
     "Expired", "Breaking", "Broken".
    :vartype lease_state: str or ~azure.mgmt.storage.v2021_04_01.models.LeaseState
    :ivar lease_duration: Specifies whether the lease on a container is of infinite or fixed
     duration, only when the container is leased. Known values are: "Infinite", "Fixed".
    :vartype lease_duration: str or ~azure.mgmt.storage.v2021_04_01.models.LeaseDuration
    :ivar metadata: A name-value pair to associate with the container as metadata.
    :vartype metadata: dict[str, str]
    :ivar immutability_policy: The ImmutabilityPolicy property of the container.
    :vartype immutability_policy:
     ~azure.mgmt.storage.v2021_04_01.models.ImmutabilityPolicyProperties
    :ivar legal_hold: The LegalHold property of the container.
    :vartype legal_hold: ~azure.mgmt.storage.v2021_04_01.models.LegalHoldProperties
    :ivar has_legal_hold: The hasLegalHold public property is set to true by SRP if there are at
     least one existing tag. The hasLegalHold public property is set to false by SRP if all existing
     legal hold tags are cleared out. There can be a maximum of 1000 blob containers with
     hasLegalHold=true for a given account.
    :vartype has_legal_hold: bool
    :ivar has_immutability_policy: The hasImmutabilityPolicy public property is set to true by SRP
     if ImmutabilityPolicy has been created for this container. The hasImmutabilityPolicy public
     property is set to false by SRP if ImmutabilityPolicy has not been created for this container.
    :vartype has_immutability_policy: bool
    :ivar immutable_storage_with_versioning: The object level immutability property of the
     container. The property is immutable and can only be set to true at the container creation
     time. Existing containers must undergo a migration process.
    :vartype immutable_storage_with_versioning:
     ~azure.mgmt.storage.v2021_04_01.models.ImmutableStorageWithVersioning
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'version': {'readonly': True},
        'deleted': {'readonly': True},
        'deleted_time': {'readonly': True},
        'remaining_retention_days': {'readonly': True},
        'last_modified_time': {'readonly': True},
        'lease_status': {'readonly': True},
        'lease_state': {'readonly': True},
        'lease_duration': {'readonly': True},
        'immutability_policy': {'readonly': True},
        'legal_hold': {'readonly': True},
        'has_legal_hold': {'readonly': True},
        'has_immutability_policy': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'version': {'key': 'properties.version', 'type': 'str'},
        'deleted': {'key': 'properties.deleted', 'type': 'bool'},
        'deleted_time': {'key': 'properties.deletedTime', 'type': 'iso-8601'},
        'remaining_retention_days': {'key': 'properties.remainingRetentionDays', 'type': 'int'},
        'default_encryption_scope': {'key': 'properties.defaultEncryptionScope', 'type': 'str'},
        'deny_encryption_scope_override': {'key': 'properties.denyEncryptionScopeOverride', 'type': 'bool'},
        'public_access': {'key': 'properties.publicAccess', 'type': 'str'},
        'last_modified_time': {'key': 'properties.lastModifiedTime', 'type': 'iso-8601'},
        'lease_status': {'key': 'properties.leaseStatus', 'type': 'str'},
        'lease_state': {'key': 'properties.leaseState', 'type': 'str'},
        'lease_duration': {'key': 'properties.leaseDuration', 'type': 'str'},
        'metadata': {'key': 'properties.metadata', 'type': '{str}'},
        'immutability_policy': {'key': 'properties.immutabilityPolicy', 'type': 'ImmutabilityPolicyProperties'},
        'legal_hold': {'key': 'properties.legalHold', 'type': 'LegalHoldProperties'},
        'has_legal_hold': {'key': 'properties.hasLegalHold', 'type': 'bool'},
        'has_immutability_policy': {'key': 'properties.hasImmutabilityPolicy', 'type': 'bool'},
        'immutable_storage_with_versioning': {'key': 'properties.immutableStorageWithVersioning', 'type': 'ImmutableStorageWithVersioning'},
    }

    def __init__(
        self,
        *,
        default_encryption_scope: Optional[str] = None,
        deny_encryption_scope_override: Optional[bool] = None,
        public_access: Optional[Union[str, "_models.PublicAccess"]] = None,
        metadata: Optional[Dict[str, str]] = None,
        immutable_storage_with_versioning: Optional["_models.ImmutableStorageWithVersioning"] = None,
        **kwargs
    ):
        """
        :keyword default_encryption_scope: Default the container to use specified encryption scope for
         all writes.
        :paramtype default_encryption_scope: str
        :keyword deny_encryption_scope_override: Block override of encryption scope from the container
         default.
        :paramtype deny_encryption_scope_override: bool
        :keyword public_access: Specifies whether data in the container may be accessed publicly and
         the level of access. Known values are: "Container", "Blob", "None".
        :paramtype public_access: str or ~azure.mgmt.storage.v2021_04_01.models.PublicAccess
        :keyword metadata: A name-value pair to associate with the container as metadata.
        :paramtype metadata: dict[str, str]
        :keyword immutable_storage_with_versioning: The object level immutability property of the
         container. The property is immutable and can only be set to true at the container creation
         time. Existing containers must undergo a migration process.
        :paramtype immutable_storage_with_versioning:
         ~azure.mgmt.storage.v2021_04_01.models.ImmutableStorageWithVersioning
        """
        super(BlobContainer, self).__init__(**kwargs)
        self.version = None
        self.deleted = None
        self.deleted_time = None
        self.remaining_retention_days = None
        self.default_encryption_scope = default_encryption_scope
        self.deny_encryption_scope_override = deny_encryption_scope_override
        self.public_access = public_access
        self.last_modified_time = None
        self.lease_status = None
        self.lease_state = None
        self.lease_duration = None
        self.metadata = metadata
        self.immutability_policy = None
        self.legal_hold = None
        self.has_legal_hold = None
        self.has_immutability_policy = None
        self.immutable_storage_with_versioning = immutable_storage_with_versioning


class BlobInventoryPolicy(Resource):
    """The storage account blob inventory policy.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.storage.v2021_04_01.models.SystemData
    :ivar last_modified_time: Returns the last modified date and time of the blob inventory policy.
    :vartype last_modified_time: ~datetime.datetime
    :ivar policy: The storage account blob inventory policy object. It is composed of policy rules.
    :vartype policy: ~azure.mgmt.storage.v2021_04_01.models.BlobInventoryPolicySchema
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'last_modified_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'last_modified_time': {'key': 'properties.lastModifiedTime', 'type': 'iso-8601'},
        'policy': {'key': 'properties.policy', 'type': 'BlobInventoryPolicySchema'},
    }

    def __init__(
        self,
        *,
        policy: Optional["_models.BlobInventoryPolicySchema"] = None,
        **kwargs
    ):
        """
        :keyword policy: The storage account blob inventory policy object. It is composed of policy
         rules.
        :paramtype policy: ~azure.mgmt.storage.v2021_04_01.models.BlobInventoryPolicySchema
        """
        super(BlobInventoryPolicy, self).__init__(**kwargs)
        self.system_data = None
        self.last_modified_time = None
        self.policy = policy


class BlobInventoryPolicyDefinition(msrest.serialization.Model):
    """An object that defines the blob inventory rule.

    All required parameters must be populated in order to send to Azure.

    :ivar filters: An object that defines the filter set.
    :vartype filters: ~azure.mgmt.storage.v2021_04_01.models.BlobInventoryPolicyFilter
    :ivar format: Required. This is a required field, it specifies the format for the inventory
     files. Known values are: "Csv", "Parquet".
    :vartype format: str or ~azure.mgmt.storage.v2021_04_01.models.Format
    :ivar schedule: Required. This is a required field. This field is used to schedule an inventory
     formation. Known values are: "Daily", "Weekly".
    :vartype schedule: str or ~azure.mgmt.storage.v2021_04_01.models.Schedule
    :ivar object_type: Required. This is a required field. This field specifies the scope of the
     inventory created either at the blob or container level. Known values are: "Blob", "Container".
    :vartype object_type: str or ~azure.mgmt.storage.v2021_04_01.models.ObjectType
    :ivar schema_fields: Required. This is a required field. This field specifies the fields and
     properties of the object to be included in the inventory. The Schema field value 'Name' is
     always required. The valid values for this field for the 'Blob' definition.objectType include
     'Name, Creation-Time, Last-Modified, Content-Length, Content-MD5, BlobType, AccessTier,
     AccessTierChangeTime, Expiry-Time, hdi_isfolder, Owner, Group, Permissions, Acl, Snapshot,
     VersionId, IsCurrentVersion, Metadata, LastAccessTime'. The valid values for 'Container'
     definition.objectType include 'Name, Last-Modified, Metadata, LeaseStatus, LeaseState,
     LeaseDuration, PublicAccess, HasImmutabilityPolicy, HasLegalHold'. Schema field values
     'Expiry-Time, hdi_isfolder, Owner, Group, Permissions, Acl' are valid only for Hns enabled
     accounts.
    :vartype schema_fields: list[str]
    """

    _validation = {
        'format': {'required': True},
        'schedule': {'required': True},
        'object_type': {'required': True},
        'schema_fields': {'required': True},
    }

    _attribute_map = {
        'filters': {'key': 'filters', 'type': 'BlobInventoryPolicyFilter'},
        'format': {'key': 'format', 'type': 'str'},
        'schedule': {'key': 'schedule', 'type': 'str'},
        'object_type': {'key': 'objectType', 'type': 'str'},
        'schema_fields': {'key': 'schemaFields', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        format: Union[str, "_models.Format"],
        schedule: Union[str, "_models.Schedule"],
        object_type: Union[str, "_models.ObjectType"],
        schema_fields: List[str],
        filters: Optional["_models.BlobInventoryPolicyFilter"] = None,
        **kwargs
    ):
        """
        :keyword filters: An object that defines the filter set.
        :paramtype filters: ~azure.mgmt.storage.v2021_04_01.models.BlobInventoryPolicyFilter
        :keyword format: Required. This is a required field, it specifies the format for the inventory
         files. Known values are: "Csv", "Parquet".
        :paramtype format: str or ~azure.mgmt.storage.v2021_04_01.models.Format
        :keyword schedule: Required. This is a required field. This field is used to schedule an
         inventory formation. Known values are: "Daily", "Weekly".
        :paramtype schedule: str or ~azure.mgmt.storage.v2021_04_01.models.Schedule
        :keyword object_type: Required. This is a required field. This field specifies the scope of the
         inventory created either at the blob or container level. Known values are: "Blob", "Container".
        :paramtype object_type: str or ~azure.mgmt.storage.v2021_04_01.models.ObjectType
        :keyword schema_fields: Required. This is a required field. This field specifies the fields and
         properties of the object to be included in the inventory. The Schema field value 'Name' is
         always required. The valid values for this field for the 'Blob' definition.objectType include
         'Name, Creation-Time, Last-Modified, Content-Length, Content-MD5, BlobType, AccessTier,
         AccessTierChangeTime, Expiry-Time, hdi_isfolder, Owner, Group, Permissions, Acl, Snapshot,
         VersionId, IsCurrentVersion, Metadata, LastAccessTime'. The valid values for 'Container'
         definition.objectType include 'Name, Last-Modified, Metadata, LeaseStatus, LeaseState,
         LeaseDuration, PublicAccess, HasImmutabilityPolicy, HasLegalHold'. Schema field values
         'Expiry-Time, hdi_isfolder, Owner, Group, Permissions, Acl' are valid only for Hns enabled
         accounts.
        :paramtype schema_fields: list[str]
        """
        super(BlobInventoryPolicyDefinition, self).__init__(**kwargs)
        self.filters = filters
        self.format = format
        self.schedule = schedule
        self.object_type = object_type
        self.schema_fields = schema_fields


class BlobInventoryPolicyFilter(msrest.serialization.Model):
    """An object that defines the blob inventory rule filter conditions. For 'Blob' definition.objectType all filter properties are applicable, 'blobTypes' is required and others are optional. For 'Container' definition.objectType only prefixMatch is applicable and is optional.

    :ivar prefix_match: An array of strings for blob prefixes to be matched.
    :vartype prefix_match: list[str]
    :ivar blob_types: An array of predefined enum values. Valid values include blockBlob,
     appendBlob, pageBlob. Hns accounts does not support pageBlobs. This field is required when
     definition.objectType property is set to 'Blob'.
    :vartype blob_types: list[str]
    :ivar include_blob_versions: Includes blob versions in blob inventory when value is set to
     true. The definition.schemaFields values 'VersionId and IsCurrentVersion' are required if this
     property is set to true, else they must be excluded.
    :vartype include_blob_versions: bool
    :ivar include_snapshots: Includes blob snapshots in blob inventory when value is set to true.
     The definition.schemaFields value 'Snapshot' is required if this property is set to true, else
     it must be excluded.
    :vartype include_snapshots: bool
    """

    _attribute_map = {
        'prefix_match': {'key': 'prefixMatch', 'type': '[str]'},
        'blob_types': {'key': 'blobTypes', 'type': '[str]'},
        'include_blob_versions': {'key': 'includeBlobVersions', 'type': 'bool'},
        'include_snapshots': {'key': 'includeSnapshots', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        prefix_match: Optional[List[str]] = None,
        blob_types: Optional[List[str]] = None,
        include_blob_versions: Optional[bool] = None,
        include_snapshots: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword prefix_match: An array of strings for blob prefixes to be matched.
        :paramtype prefix_match: list[str]
        :keyword blob_types: An array of predefined enum values. Valid values include blockBlob,
         appendBlob, pageBlob. Hns accounts does not support pageBlobs. This field is required when
         definition.objectType property is set to 'Blob'.
        :paramtype blob_types: list[str]
        :keyword include_blob_versions: Includes blob versions in blob inventory when value is set to
         true. The definition.schemaFields values 'VersionId and IsCurrentVersion' are required if this
         property is set to true, else they must be excluded.
        :paramtype include_blob_versions: bool
        :keyword include_snapshots: Includes blob snapshots in blob inventory when value is set to
         true. The definition.schemaFields value 'Snapshot' is required if this property is set to true,
         else it must be excluded.
        :paramtype include_snapshots: bool
        """
        super(BlobInventoryPolicyFilter, self).__init__(**kwargs)
        self.prefix_match = prefix_match
        self.blob_types = blob_types
        self.include_blob_versions = include_blob_versions
        self.include_snapshots = include_snapshots


class BlobInventoryPolicyRule(msrest.serialization.Model):
    """An object that wraps the blob inventory rule. Each rule is uniquely defined by name.

    All required parameters must be populated in order to send to Azure.

    :ivar enabled: Required. Rule is enabled when set to true.
    :vartype enabled: bool
    :ivar name: Required. A rule name can contain any combination of alpha numeric characters. Rule
     name is case-sensitive. It must be unique within a policy.
    :vartype name: str
    :ivar destination: Required. Container name where blob inventory files are stored. Must be
     pre-created.
    :vartype destination: str
    :ivar definition: Required. An object that defines the blob inventory policy rule.
    :vartype definition: ~azure.mgmt.storage.v2021_04_01.models.BlobInventoryPolicyDefinition
    """

    _validation = {
        'enabled': {'required': True},
        'name': {'required': True},
        'destination': {'required': True},
        'definition': {'required': True},
    }

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'destination': {'key': 'destination', 'type': 'str'},
        'definition': {'key': 'definition', 'type': 'BlobInventoryPolicyDefinition'},
    }

    def __init__(
        self,
        *,
        enabled: bool,
        name: str,
        destination: str,
        definition: "_models.BlobInventoryPolicyDefinition",
        **kwargs
    ):
        """
        :keyword enabled: Required. Rule is enabled when set to true.
        :paramtype enabled: bool
        :keyword name: Required. A rule name can contain any combination of alpha numeric characters.
         Rule name is case-sensitive. It must be unique within a policy.
        :paramtype name: str
        :keyword destination: Required. Container name where blob inventory files are stored. Must be
         pre-created.
        :paramtype destination: str
        :keyword definition: Required. An object that defines the blob inventory policy rule.
        :paramtype definition: ~azure.mgmt.storage.v2021_04_01.models.BlobInventoryPolicyDefinition
        """
        super(BlobInventoryPolicyRule, self).__init__(**kwargs)
        self.enabled = enabled
        self.name = name
        self.destination = destination
        self.definition = definition


class BlobInventoryPolicySchema(msrest.serialization.Model):
    """The storage account blob inventory policy rules.

    All required parameters must be populated in order to send to Azure.

    :ivar enabled: Required. Policy is enabled if set to true.
    :vartype enabled: bool
    :ivar type: Required. The valid value is Inventory. Known values are: "Inventory".
    :vartype type: str or ~azure.mgmt.storage.v2021_04_01.models.InventoryRuleType
    :ivar rules: Required. The storage account blob inventory policy rules. The rule is applied
     when it is enabled.
    :vartype rules: list[~azure.mgmt.storage.v2021_04_01.models.BlobInventoryPolicyRule]
    """

    _validation = {
        'enabled': {'required': True},
        'type': {'required': True},
        'rules': {'required': True},
    }

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'type': {'key': 'type', 'type': 'str'},
        'rules': {'key': 'rules', 'type': '[BlobInventoryPolicyRule]'},
    }

    def __init__(
        self,
        *,
        enabled: bool,
        type: Union[str, "_models.InventoryRuleType"],
        rules: List["_models.BlobInventoryPolicyRule"],
        **kwargs
    ):
        """
        :keyword enabled: Required. Policy is enabled if set to true.
        :paramtype enabled: bool
        :keyword type: Required. The valid value is Inventory. Known values are: "Inventory".
        :paramtype type: str or ~azure.mgmt.storage.v2021_04_01.models.InventoryRuleType
        :keyword rules: Required. The storage account blob inventory policy rules. The rule is applied
         when it is enabled.
        :paramtype rules: list[~azure.mgmt.storage.v2021_04_01.models.BlobInventoryPolicyRule]
        """
        super(BlobInventoryPolicySchema, self).__init__(**kwargs)
        self.enabled = enabled
        self.type = type
        self.rules = rules


class BlobRestoreParameters(msrest.serialization.Model):
    """Blob restore parameters.

    All required parameters must be populated in order to send to Azure.

    :ivar time_to_restore: Required. Restore blob to the specified time.
    :vartype time_to_restore: ~datetime.datetime
    :ivar blob_ranges: Required. Blob ranges to restore.
    :vartype blob_ranges: list[~azure.mgmt.storage.v2021_04_01.models.BlobRestoreRange]
    """

    _validation = {
        'time_to_restore': {'required': True},
        'blob_ranges': {'required': True},
    }

    _attribute_map = {
        'time_to_restore': {'key': 'timeToRestore', 'type': 'iso-8601'},
        'blob_ranges': {'key': 'blobRanges', 'type': '[BlobRestoreRange]'},
    }

    def __init__(
        self,
        *,
        time_to_restore: datetime.datetime,
        blob_ranges: List["_models.BlobRestoreRange"],
        **kwargs
    ):
        """
        :keyword time_to_restore: Required. Restore blob to the specified time.
        :paramtype time_to_restore: ~datetime.datetime
        :keyword blob_ranges: Required. Blob ranges to restore.
        :paramtype blob_ranges: list[~azure.mgmt.storage.v2021_04_01.models.BlobRestoreRange]
        """
        super(BlobRestoreParameters, self).__init__(**kwargs)
        self.time_to_restore = time_to_restore
        self.blob_ranges = blob_ranges


class BlobRestoreRange(msrest.serialization.Model):
    """Blob range.

    All required parameters must be populated in order to send to Azure.

    :ivar start_range: Required. Blob start range. This is inclusive. Empty means account start.
    :vartype start_range: str
    :ivar end_range: Required. Blob end range. This is exclusive. Empty means account end.
    :vartype end_range: str
    """

    _validation = {
        'start_range': {'required': True},
        'end_range': {'required': True},
    }

    _attribute_map = {
        'start_range': {'key': 'startRange', 'type': 'str'},
        'end_range': {'key': 'endRange', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        start_range: str,
        end_range: str,
        **kwargs
    ):
        """
        :keyword start_range: Required. Blob start range. This is inclusive. Empty means account start.
        :paramtype start_range: str
        :keyword end_range: Required. Blob end range. This is exclusive. Empty means account end.
        :paramtype end_range: str
        """
        super(BlobRestoreRange, self).__init__(**kwargs)
        self.start_range = start_range
        self.end_range = end_range


class BlobRestoreStatus(msrest.serialization.Model):
    """Blob restore status.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar status: The status of blob restore progress. Possible values are: - InProgress: Indicates
     that blob restore is ongoing. - Complete: Indicates that blob restore has been completed
     successfully. - Failed: Indicates that blob restore is failed. Known values are: "InProgress",
     "Complete", "Failed".
    :vartype status: str or ~azure.mgmt.storage.v2021_04_01.models.BlobRestoreProgressStatus
    :ivar failure_reason: Failure reason when blob restore is failed.
    :vartype failure_reason: str
    :ivar restore_id: Id for tracking blob restore request.
    :vartype restore_id: str
    :ivar parameters: Blob restore request parameters.
    :vartype parameters: ~azure.mgmt.storage.v2021_04_01.models.BlobRestoreParameters
    """

    _validation = {
        'status': {'readonly': True},
        'failure_reason': {'readonly': True},
        'restore_id': {'readonly': True},
        'parameters': {'readonly': True},
    }

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'failure_reason': {'key': 'failureReason', 'type': 'str'},
        'restore_id': {'key': 'restoreId', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': 'BlobRestoreParameters'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(BlobRestoreStatus, self).__init__(**kwargs)
        self.status = None
        self.failure_reason = None
        self.restore_id = None
        self.parameters = None


class BlobServiceItems(msrest.serialization.Model):
    """BlobServiceItems.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of blob services returned.
    :vartype value: list[~azure.mgmt.storage.v2021_04_01.models.BlobServiceProperties]
    """

    _validation = {
        'value': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[BlobServiceProperties]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(BlobServiceItems, self).__init__(**kwargs)
        self.value = None


class BlobServiceProperties(Resource):
    """The properties of a storage account’s Blob service.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar sku: Sku name and tier.
    :vartype sku: ~azure.mgmt.storage.v2021_04_01.models.Sku
    :ivar cors: Specifies CORS rules for the Blob service. You can include up to five CorsRule
     elements in the request. If no CorsRule elements are included in the request body, all CORS
     rules will be deleted, and CORS will be disabled for the Blob service.
    :vartype cors: ~azure.mgmt.storage.v2021_04_01.models.CorsRules
    :ivar default_service_version: DefaultServiceVersion indicates the default version to use for
     requests to the Blob service if an incoming request’s version is not specified. Possible values
     include version 2008-10-27 and all more recent versions.
    :vartype default_service_version: str
    :ivar delete_retention_policy: The blob service properties for blob soft delete.
    :vartype delete_retention_policy: ~azure.mgmt.storage.v2021_04_01.models.DeleteRetentionPolicy
    :ivar is_versioning_enabled: Versioning is enabled if set to true.
    :vartype is_versioning_enabled: bool
    :ivar automatic_snapshot_policy_enabled: Deprecated in favor of isVersioningEnabled property.
    :vartype automatic_snapshot_policy_enabled: bool
    :ivar change_feed: The blob service properties for change feed events.
    :vartype change_feed: ~azure.mgmt.storage.v2021_04_01.models.ChangeFeed
    :ivar restore_policy: The blob service properties for blob restore policy.
    :vartype restore_policy: ~azure.mgmt.storage.v2021_04_01.models.RestorePolicyProperties
    :ivar container_delete_retention_policy: The blob service properties for container soft delete.
    :vartype container_delete_retention_policy:
     ~azure.mgmt.storage.v2021_04_01.models.DeleteRetentionPolicy
    :ivar last_access_time_tracking_policy: The blob service property to configure last access time
     based tracking policy.
    :vartype last_access_time_tracking_policy:
     ~azure.mgmt.storage.v2021_04_01.models.LastAccessTimeTrackingPolicy
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'sku': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'Sku'},
        'cors': {'key': 'properties.cors', 'type': 'CorsRules'},
        'default_service_version': {'key': 'properties.defaultServiceVersion', 'type': 'str'},
        'delete_retention_policy': {'key': 'properties.deleteRetentionPolicy', 'type': 'DeleteRetentionPolicy'},
        'is_versioning_enabled': {'key': 'properties.isVersioningEnabled', 'type': 'bool'},
        'automatic_snapshot_policy_enabled': {'key': 'properties.automaticSnapshotPolicyEnabled', 'type': 'bool'},
        'change_feed': {'key': 'properties.changeFeed', 'type': 'ChangeFeed'},
        'restore_policy': {'key': 'properties.restorePolicy', 'type': 'RestorePolicyProperties'},
        'container_delete_retention_policy': {'key': 'properties.containerDeleteRetentionPolicy', 'type': 'DeleteRetentionPolicy'},
        'last_access_time_tracking_policy': {'key': 'properties.lastAccessTimeTrackingPolicy', 'type': 'LastAccessTimeTrackingPolicy'},
    }

    def __init__(
        self,
        *,
        cors: Optional["_models.CorsRules"] = None,
        default_service_version: Optional[str] = None,
        delete_retention_policy: Optional["_models.DeleteRetentionPolicy"] = None,
        is_versioning_enabled: Optional[bool] = None,
        automatic_snapshot_policy_enabled: Optional[bool] = None,
        change_feed: Optional["_models.ChangeFeed"] = None,
        restore_policy: Optional["_models.RestorePolicyProperties"] = None,
        container_delete_retention_policy: Optional["_models.DeleteRetentionPolicy"] = None,
        last_access_time_tracking_policy: Optional["_models.LastAccessTimeTrackingPolicy"] = None,
        **kwargs
    ):
        """
        :keyword cors: Specifies CORS rules for the Blob service. You can include up to five CorsRule
         elements in the request. If no CorsRule elements are included in the request body, all CORS
         rules will be deleted, and CORS will be disabled for the Blob service.
        :paramtype cors: ~azure.mgmt.storage.v2021_04_01.models.CorsRules
        :keyword default_service_version: DefaultServiceVersion indicates the default version to use
         for requests to the Blob service if an incoming request’s version is not specified. Possible
         values include version 2008-10-27 and all more recent versions.
        :paramtype default_service_version: str
        :keyword delete_retention_policy: The blob service properties for blob soft delete.
        :paramtype delete_retention_policy:
         ~azure.mgmt.storage.v2021_04_01.models.DeleteRetentionPolicy
        :keyword is_versioning_enabled: Versioning is enabled if set to true.
        :paramtype is_versioning_enabled: bool
        :keyword automatic_snapshot_policy_enabled: Deprecated in favor of isVersioningEnabled
         property.
        :paramtype automatic_snapshot_policy_enabled: bool
        :keyword change_feed: The blob service properties for change feed events.
        :paramtype change_feed: ~azure.mgmt.storage.v2021_04_01.models.ChangeFeed
        :keyword restore_policy: The blob service properties for blob restore policy.
        :paramtype restore_policy: ~azure.mgmt.storage.v2021_04_01.models.RestorePolicyProperties
        :keyword container_delete_retention_policy: The blob service properties for container soft
         delete.
        :paramtype container_delete_retention_policy:
         ~azure.mgmt.storage.v2021_04_01.models.DeleteRetentionPolicy
        :keyword last_access_time_tracking_policy: The blob service property to configure last access
         time based tracking policy.
        :paramtype last_access_time_tracking_policy:
         ~azure.mgmt.storage.v2021_04_01.models.LastAccessTimeTrackingPolicy
        """
        super(BlobServiceProperties, self).__init__(**kwargs)
        self.sku = None
        self.cors = cors
        self.default_service_version = default_service_version
        self.delete_retention_policy = delete_retention_policy
        self.is_versioning_enabled = is_versioning_enabled
        self.automatic_snapshot_policy_enabled = automatic_snapshot_policy_enabled
        self.change_feed = change_feed
        self.restore_policy = restore_policy
        self.container_delete_retention_policy = container_delete_retention_policy
        self.last_access_time_tracking_policy = last_access_time_tracking_policy


class ChangeFeed(msrest.serialization.Model):
    """The blob service properties for change feed events.

    :ivar enabled: Indicates whether change feed event logging is enabled for the Blob service.
    :vartype enabled: bool
    :ivar retention_in_days: Indicates the duration of changeFeed retention in days. Minimum value
     is 1 day and maximum value is 146000 days (400 years). A null value indicates an infinite
     retention of the change feed.
    :vartype retention_in_days: int
    """

    _validation = {
        'retention_in_days': {'maximum': 146000, 'minimum': 1},
    }

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'retention_in_days': {'key': 'retentionInDays', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        retention_in_days: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword enabled: Indicates whether change feed event logging is enabled for the Blob service.
        :paramtype enabled: bool
        :keyword retention_in_days: Indicates the duration of changeFeed retention in days. Minimum
         value is 1 day and maximum value is 146000 days (400 years). A null value indicates an infinite
         retention of the change feed.
        :paramtype retention_in_days: int
        """
        super(ChangeFeed, self).__init__(**kwargs)
        self.enabled = enabled
        self.retention_in_days = retention_in_days


class CheckNameAvailabilityResult(msrest.serialization.Model):
    """The CheckNameAvailability operation response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name_available: Gets a boolean value that indicates whether the name is available for you
     to use. If true, the name is available. If false, the name has already been taken or is invalid
     and cannot be used.
    :vartype name_available: bool
    :ivar reason: Gets the reason that a storage account name could not be used. The Reason element
     is only returned if NameAvailable is false. Known values are: "AccountNameInvalid",
     "AlreadyExists".
    :vartype reason: str or ~azure.mgmt.storage.v2021_04_01.models.Reason
    :ivar message: Gets an error message explaining the Reason value in more detail.
    :vartype message: str
    """

    _validation = {
        'name_available': {'readonly': True},
        'reason': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'name_available': {'key': 'nameAvailable', 'type': 'bool'},
        'reason': {'key': 'reason', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(CheckNameAvailabilityResult, self).__init__(**kwargs)
        self.name_available = None
        self.reason = None
        self.message = None


class CloudErrorAutoGenerated(msrest.serialization.Model):
    """An error response from the Storage service.

    :ivar error: An error response from the Storage service.
    :vartype error: ~azure.mgmt.storage.v2021_04_01.models.CloudErrorBodyAutoGenerated
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'CloudErrorBodyAutoGenerated'},
    }

    def __init__(
        self,
        *,
        error: Optional["_models.CloudErrorBodyAutoGenerated"] = None,
        **kwargs
    ):
        """
        :keyword error: An error response from the Storage service.
        :paramtype error: ~azure.mgmt.storage.v2021_04_01.models.CloudErrorBodyAutoGenerated
        """
        super(CloudErrorAutoGenerated, self).__init__(**kwargs)
        self.error = error


class CloudErrorBody(msrest.serialization.Model):
    """An error response from the Storage service.

    :ivar code: An identifier for the error. Codes are invariant and are intended to be consumed
     programmatically.
    :vartype code: str
    :ivar message: A message describing the error, intended to be suitable for display in a user
     interface.
    :vartype message: str
    :ivar target: The target of the particular error. For example, the name of the property in
     error.
    :vartype target: str
    :ivar details: A list of additional details about the error.
    :vartype details: list[~azure.mgmt.storage.v2021_04_01.models.CloudErrorBody]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CloudErrorBody]'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        target: Optional[str] = None,
        details: Optional[List["_models.CloudErrorBody"]] = None,
        **kwargs
    ):
        """
        :keyword code: An identifier for the error. Codes are invariant and are intended to be consumed
         programmatically.
        :paramtype code: str
        :keyword message: A message describing the error, intended to be suitable for display in a user
         interface.
        :paramtype message: str
        :keyword target: The target of the particular error. For example, the name of the property in
         error.
        :paramtype target: str
        :keyword details: A list of additional details about the error.
        :paramtype details: list[~azure.mgmt.storage.v2021_04_01.models.CloudErrorBody]
        """
        super(CloudErrorBody, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details


class CloudErrorBodyAutoGenerated(msrest.serialization.Model):
    """An error response from the Storage service.

    :ivar code: An identifier for the error. Codes are invariant and are intended to be consumed
     programmatically.
    :vartype code: str
    :ivar message: A message describing the error, intended to be suitable for display in a user
     interface.
    :vartype message: str
    :ivar target: The target of the particular error. For example, the name of the property in
     error.
    :vartype target: str
    :ivar details: A list of additional details about the error.
    :vartype details: list[~azure.mgmt.storage.v2021_04_01.models.CloudErrorBodyAutoGenerated]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CloudErrorBodyAutoGenerated]'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        target: Optional[str] = None,
        details: Optional[List["_models.CloudErrorBodyAutoGenerated"]] = None,
        **kwargs
    ):
        """
        :keyword code: An identifier for the error. Codes are invariant and are intended to be consumed
         programmatically.
        :paramtype code: str
        :keyword message: A message describing the error, intended to be suitable for display in a user
         interface.
        :paramtype message: str
        :keyword target: The target of the particular error. For example, the name of the property in
         error.
        :paramtype target: str
        :keyword details: A list of additional details about the error.
        :paramtype details: list[~azure.mgmt.storage.v2021_04_01.models.CloudErrorBodyAutoGenerated]
        """
        super(CloudErrorBodyAutoGenerated, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details


class CorsRule(msrest.serialization.Model):
    """Specifies a CORS rule for the Blob service.

    All required parameters must be populated in order to send to Azure.

    :ivar allowed_origins: Required. Required if CorsRule element is present. A list of origin
     domains that will be allowed via CORS, or "*" to allow all domains.
    :vartype allowed_origins: list[str]
    :ivar allowed_methods: Required. Required if CorsRule element is present. A list of HTTP
     methods that are allowed to be executed by the origin.
    :vartype allowed_methods: list[str or
     ~azure.mgmt.storage.v2021_04_01.models.CorsRuleAllowedMethodsItem]
    :ivar max_age_in_seconds: Required. Required if CorsRule element is present. The number of
     seconds that the client/browser should cache a preflight response.
    :vartype max_age_in_seconds: int
    :ivar exposed_headers: Required. Required if CorsRule element is present. A list of response
     headers to expose to CORS clients.
    :vartype exposed_headers: list[str]
    :ivar allowed_headers: Required. Required if CorsRule element is present. A list of headers
     allowed to be part of the cross-origin request.
    :vartype allowed_headers: list[str]
    """

    _validation = {
        'allowed_origins': {'required': True},
        'allowed_methods': {'required': True},
        'max_age_in_seconds': {'required': True},
        'exposed_headers': {'required': True},
        'allowed_headers': {'required': True},
    }

    _attribute_map = {
        'allowed_origins': {'key': 'allowedOrigins', 'type': '[str]'},
        'allowed_methods': {'key': 'allowedMethods', 'type': '[str]'},
        'max_age_in_seconds': {'key': 'maxAgeInSeconds', 'type': 'int'},
        'exposed_headers': {'key': 'exposedHeaders', 'type': '[str]'},
        'allowed_headers': {'key': 'allowedHeaders', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        allowed_origins: List[str],
        allowed_methods: List[Union[str, "_models.CorsRuleAllowedMethodsItem"]],
        max_age_in_seconds: int,
        exposed_headers: List[str],
        allowed_headers: List[str],
        **kwargs
    ):
        """
        :keyword allowed_origins: Required. Required if CorsRule element is present. A list of origin
         domains that will be allowed via CORS, or "*" to allow all domains.
        :paramtype allowed_origins: list[str]
        :keyword allowed_methods: Required. Required if CorsRule element is present. A list of HTTP
         methods that are allowed to be executed by the origin.
        :paramtype allowed_methods: list[str or
         ~azure.mgmt.storage.v2021_04_01.models.CorsRuleAllowedMethodsItem]
        :keyword max_age_in_seconds: Required. Required if CorsRule element is present. The number of
         seconds that the client/browser should cache a preflight response.
        :paramtype max_age_in_seconds: int
        :keyword exposed_headers: Required. Required if CorsRule element is present. A list of response
         headers to expose to CORS clients.
        :paramtype exposed_headers: list[str]
        :keyword allowed_headers: Required. Required if CorsRule element is present. A list of headers
         allowed to be part of the cross-origin request.
        :paramtype allowed_headers: list[str]
        """
        super(CorsRule, self).__init__(**kwargs)
        self.allowed_origins = allowed_origins
        self.allowed_methods = allowed_methods
        self.max_age_in_seconds = max_age_in_seconds
        self.exposed_headers = exposed_headers
        self.allowed_headers = allowed_headers


class CorsRules(msrest.serialization.Model):
    """Sets the CORS rules. You can include up to five CorsRule elements in the request.

    :ivar cors_rules: The List of CORS rules. You can include up to five CorsRule elements in the
     request.
    :vartype cors_rules: list[~azure.mgmt.storage.v2021_04_01.models.CorsRule]
    """

    _attribute_map = {
        'cors_rules': {'key': 'corsRules', 'type': '[CorsRule]'},
    }

    def __init__(
        self,
        *,
        cors_rules: Optional[List["_models.CorsRule"]] = None,
        **kwargs
    ):
        """
        :keyword cors_rules: The List of CORS rules. You can include up to five CorsRule elements in
         the request.
        :paramtype cors_rules: list[~azure.mgmt.storage.v2021_04_01.models.CorsRule]
        """
        super(CorsRules, self).__init__(**kwargs)
        self.cors_rules = cors_rules


class CustomDomain(msrest.serialization.Model):
    """The custom domain assigned to this storage account. This can be set via Update.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required. Gets or sets the custom domain name assigned to the storage account. Name
     is the CNAME source.
    :vartype name: str
    :ivar use_sub_domain_name: Indicates whether indirect CName validation is enabled. Default
     value is false. This should only be set on updates.
    :vartype use_sub_domain_name: bool
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'use_sub_domain_name': {'key': 'useSubDomainName', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        name: str,
        use_sub_domain_name: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword name: Required. Gets or sets the custom domain name assigned to the storage account.
         Name is the CNAME source.
        :paramtype name: str
        :keyword use_sub_domain_name: Indicates whether indirect CName validation is enabled. Default
         value is false. This should only be set on updates.
        :paramtype use_sub_domain_name: bool
        """
        super(CustomDomain, self).__init__(**kwargs)
        self.name = name
        self.use_sub_domain_name = use_sub_domain_name


class DateAfterCreation(msrest.serialization.Model):
    """Object to define the number of days after creation.

    All required parameters must be populated in order to send to Azure.

    :ivar days_after_creation_greater_than: Required. Value indicating the age in days after
     creation.
    :vartype days_after_creation_greater_than: float
    """

    _validation = {
        'days_after_creation_greater_than': {'required': True, 'minimum': 0, 'multiple': 1},
    }

    _attribute_map = {
        'days_after_creation_greater_than': {'key': 'daysAfterCreationGreaterThan', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        days_after_creation_greater_than: float,
        **kwargs
    ):
        """
        :keyword days_after_creation_greater_than: Required. Value indicating the age in days after
         creation.
        :paramtype days_after_creation_greater_than: float
        """
        super(DateAfterCreation, self).__init__(**kwargs)
        self.days_after_creation_greater_than = days_after_creation_greater_than


class DateAfterModification(msrest.serialization.Model):
    """Object to define the number of days after object last modification Or last access. Properties daysAfterModificationGreaterThan and daysAfterLastAccessTimeGreaterThan are mutually exclusive.

    :ivar days_after_modification_greater_than: Value indicating the age in days after last
     modification.
    :vartype days_after_modification_greater_than: float
    :ivar days_after_last_access_time_greater_than: Value indicating the age in days after last
     blob access. This property can only be used in conjunction with last access time tracking
     policy.
    :vartype days_after_last_access_time_greater_than: float
    """

    _validation = {
        'days_after_modification_greater_than': {'minimum': 0, 'multiple': 1},
        'days_after_last_access_time_greater_than': {'minimum': 0, 'multiple': 1},
    }

    _attribute_map = {
        'days_after_modification_greater_than': {'key': 'daysAfterModificationGreaterThan', 'type': 'float'},
        'days_after_last_access_time_greater_than': {'key': 'daysAfterLastAccessTimeGreaterThan', 'type': 'float'},
    }

    def __init__(
        self,
        *,
        days_after_modification_greater_than: Optional[float] = None,
        days_after_last_access_time_greater_than: Optional[float] = None,
        **kwargs
    ):
        """
        :keyword days_after_modification_greater_than: Value indicating the age in days after last
         modification.
        :paramtype days_after_modification_greater_than: float
        :keyword days_after_last_access_time_greater_than: Value indicating the age in days after last
         blob access. This property can only be used in conjunction with last access time tracking
         policy.
        :paramtype days_after_last_access_time_greater_than: float
        """
        super(DateAfterModification, self).__init__(**kwargs)
        self.days_after_modification_greater_than = days_after_modification_greater_than
        self.days_after_last_access_time_greater_than = days_after_last_access_time_greater_than


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ProxyResource, self).__init__(**kwargs)


class DeletedAccount(ProxyResource):
    """Deleted storage account.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar storage_account_resource_id: Full resource id of the original storage account.
    :vartype storage_account_resource_id: str
    :ivar location: Location of the deleted account.
    :vartype location: str
    :ivar restore_reference: Can be used to attempt recovering this deleted account via
     PutStorageAccount API.
    :vartype restore_reference: str
    :ivar creation_time: Creation time of the deleted account.
    :vartype creation_time: str
    :ivar deletion_time: Deletion time of the deleted account.
    :vartype deletion_time: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'storage_account_resource_id': {'readonly': True},
        'location': {'readonly': True},
        'restore_reference': {'readonly': True},
        'creation_time': {'readonly': True},
        'deletion_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'storage_account_resource_id': {'key': 'properties.storageAccountResourceId', 'type': 'str'},
        'location': {'key': 'properties.location', 'type': 'str'},
        'restore_reference': {'key': 'properties.restoreReference', 'type': 'str'},
        'creation_time': {'key': 'properties.creationTime', 'type': 'str'},
        'deletion_time': {'key': 'properties.deletionTime', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(DeletedAccount, self).__init__(**kwargs)
        self.storage_account_resource_id = None
        self.location = None
        self.restore_reference = None
        self.creation_time = None
        self.deletion_time = None


class DeletedAccountListResult(msrest.serialization.Model):
    """The response from the List Deleted Accounts operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Gets the list of deleted accounts and their properties.
    :vartype value: list[~azure.mgmt.storage.v2021_04_01.models.DeletedAccount]
    :ivar next_link: Request URL that can be used to query next page of deleted accounts. Returned
     when total number of requested deleted accounts exceed maximum page size.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DeletedAccount]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(DeletedAccountListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class DeletedShare(msrest.serialization.Model):
    """The deleted share to be restored.

    All required parameters must be populated in order to send to Azure.

    :ivar deleted_share_name: Required. Required. Identify the name of the deleted share that will
     be restored.
    :vartype deleted_share_name: str
    :ivar deleted_share_version: Required. Required. Identify the version of the deleted share that
     will be restored.
    :vartype deleted_share_version: str
    """

    _validation = {
        'deleted_share_name': {'required': True},
        'deleted_share_version': {'required': True},
    }

    _attribute_map = {
        'deleted_share_name': {'key': 'deletedShareName', 'type': 'str'},
        'deleted_share_version': {'key': 'deletedShareVersion', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        deleted_share_name: str,
        deleted_share_version: str,
        **kwargs
    ):
        """
        :keyword deleted_share_name: Required. Required. Identify the name of the deleted share that
         will be restored.
        :paramtype deleted_share_name: str
        :keyword deleted_share_version: Required. Required. Identify the version of the deleted share
         that will be restored.
        :paramtype deleted_share_version: str
        """
        super(DeletedShare, self).__init__(**kwargs)
        self.deleted_share_name = deleted_share_name
        self.deleted_share_version = deleted_share_version


class DeleteRetentionPolicy(msrest.serialization.Model):
    """The service properties for soft delete.

    :ivar enabled: Indicates whether DeleteRetentionPolicy is enabled.
    :vartype enabled: bool
    :ivar days: Indicates the number of days that the deleted item should be retained. The minimum
     specified value can be 1 and the maximum value can be 365.
    :vartype days: int
    """

    _validation = {
        'days': {'maximum': 365, 'minimum': 1},
    }

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'days': {'key': 'days', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        days: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword enabled: Indicates whether DeleteRetentionPolicy is enabled.
        :paramtype enabled: bool
        :keyword days: Indicates the number of days that the deleted item should be retained. The
         minimum specified value can be 1 and the maximum value can be 365.
        :paramtype days: int
        """
        super(DeleteRetentionPolicy, self).__init__(**kwargs)
        self.enabled = enabled
        self.days = days


class Dimension(msrest.serialization.Model):
    """Dimension of blobs, possibly be blob type or access tier.

    :ivar name: Display name of dimension.
    :vartype name: str
    :ivar display_name: Display name of dimension.
    :vartype display_name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword name: Display name of dimension.
        :paramtype name: str
        :keyword display_name: Display name of dimension.
        :paramtype display_name: str
        """
        super(Dimension, self).__init__(**kwargs)
        self.name = name
        self.display_name = display_name


class Encryption(msrest.serialization.Model):
    """The encryption settings on the storage account.

    All required parameters must be populated in order to send to Azure.

    :ivar services: List of services which support encryption.
    :vartype services: ~azure.mgmt.storage.v2021_04_01.models.EncryptionServices
    :ivar key_source: Required. The encryption keySource (provider). Possible values
     (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault. Known values are:
     "Microsoft.Storage", "Microsoft.Keyvault". Default value: "Microsoft.Storage".
    :vartype key_source: str or ~azure.mgmt.storage.v2021_04_01.models.KeySource
    :ivar require_infrastructure_encryption: A boolean indicating whether or not the service
     applies a secondary layer of encryption with platform managed keys for data at rest.
    :vartype require_infrastructure_encryption: bool
    :ivar key_vault_properties: Properties provided by key vault.
    :vartype key_vault_properties: ~azure.mgmt.storage.v2021_04_01.models.KeyVaultProperties
    :ivar encryption_identity: The identity to be used with service-side encryption at rest.
    :vartype encryption_identity: ~azure.mgmt.storage.v2021_04_01.models.EncryptionIdentity
    """

    _validation = {
        'key_source': {'required': True},
    }

    _attribute_map = {
        'services': {'key': 'services', 'type': 'EncryptionServices'},
        'key_source': {'key': 'keySource', 'type': 'str'},
        'require_infrastructure_encryption': {'key': 'requireInfrastructureEncryption', 'type': 'bool'},
        'key_vault_properties': {'key': 'keyvaultproperties', 'type': 'KeyVaultProperties'},
        'encryption_identity': {'key': 'identity', 'type': 'EncryptionIdentity'},
    }

    def __init__(
        self,
        *,
        key_source: Union[str, "_models.KeySource"] = "Microsoft.Storage",
        services: Optional["_models.EncryptionServices"] = None,
        require_infrastructure_encryption: Optional[bool] = None,
        key_vault_properties: Optional["_models.KeyVaultProperties"] = None,
        encryption_identity: Optional["_models.EncryptionIdentity"] = None,
        **kwargs
    ):
        """
        :keyword services: List of services which support encryption.
        :paramtype services: ~azure.mgmt.storage.v2021_04_01.models.EncryptionServices
        :keyword key_source: Required. The encryption keySource (provider). Possible values
         (case-insensitive):  Microsoft.Storage, Microsoft.Keyvault. Known values are:
         "Microsoft.Storage", "Microsoft.Keyvault". Default value: "Microsoft.Storage".
        :paramtype key_source: str or ~azure.mgmt.storage.v2021_04_01.models.KeySource
        :keyword require_infrastructure_encryption: A boolean indicating whether or not the service
         applies a secondary layer of encryption with platform managed keys for data at rest.
        :paramtype require_infrastructure_encryption: bool
        :keyword key_vault_properties: Properties provided by key vault.
        :paramtype key_vault_properties: ~azure.mgmt.storage.v2021_04_01.models.KeyVaultProperties
        :keyword encryption_identity: The identity to be used with service-side encryption at rest.
        :paramtype encryption_identity: ~azure.mgmt.storage.v2021_04_01.models.EncryptionIdentity
        """
        super(Encryption, self).__init__(**kwargs)
        self.services = services
        self.key_source = key_source
        self.require_infrastructure_encryption = require_infrastructure_encryption
        self.key_vault_properties = key_vault_properties
        self.encryption_identity = encryption_identity


class EncryptionIdentity(msrest.serialization.Model):
    """Encryption identity for the storage account.

    :ivar encryption_user_assigned_identity: Resource identifier of the UserAssigned identity to be
     associated with server-side encryption on the storage account.
    :vartype encryption_user_assigned_identity: str
    """

    _attribute_map = {
        'encryption_user_assigned_identity': {'key': 'userAssignedIdentity', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        encryption_user_assigned_identity: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword encryption_user_assigned_identity: Resource identifier of the UserAssigned identity to
         be associated with server-side encryption on the storage account.
        :paramtype encryption_user_assigned_identity: str
        """
        super(EncryptionIdentity, self).__init__(**kwargs)
        self.encryption_user_assigned_identity = encryption_user_assigned_identity


class EncryptionScope(Resource):
    """The Encryption Scope resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar source: The provider for the encryption scope. Possible values (case-insensitive):
     Microsoft.Storage, Microsoft.KeyVault. Known values are: "Microsoft.Storage",
     "Microsoft.KeyVault".
    :vartype source: str or ~azure.mgmt.storage.v2021_04_01.models.EncryptionScopeSource
    :ivar state: The state of the encryption scope. Possible values (case-insensitive):  Enabled,
     Disabled. Known values are: "Enabled", "Disabled".
    :vartype state: str or ~azure.mgmt.storage.v2021_04_01.models.EncryptionScopeState
    :ivar creation_time: Gets the creation date and time of the encryption scope in UTC.
    :vartype creation_time: ~datetime.datetime
    :ivar last_modified_time: Gets the last modification date and time of the encryption scope in
     UTC.
    :vartype last_modified_time: ~datetime.datetime
    :ivar key_vault_properties: The key vault properties for the encryption scope. This is a
     required field if encryption scope 'source' attribute is set to 'Microsoft.KeyVault'.
    :vartype key_vault_properties:
     ~azure.mgmt.storage.v2021_04_01.models.EncryptionScopeKeyVaultProperties
    :ivar require_infrastructure_encryption: A boolean indicating whether or not the service
     applies a secondary layer of encryption with platform managed keys for data at rest.
    :vartype require_infrastructure_encryption: bool
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'creation_time': {'readonly': True},
        'last_modified_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'source': {'key': 'properties.source', 'type': 'str'},
        'state': {'key': 'properties.state', 'type': 'str'},
        'creation_time': {'key': 'properties.creationTime', 'type': 'iso-8601'},
        'last_modified_time': {'key': 'properties.lastModifiedTime', 'type': 'iso-8601'},
        'key_vault_properties': {'key': 'properties.keyVaultProperties', 'type': 'EncryptionScopeKeyVaultProperties'},
        'require_infrastructure_encryption': {'key': 'properties.requireInfrastructureEncryption', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        source: Optional[Union[str, "_models.EncryptionScopeSource"]] = None,
        state: Optional[Union[str, "_models.EncryptionScopeState"]] = None,
        key_vault_properties: Optional["_models.EncryptionScopeKeyVaultProperties"] = None,
        require_infrastructure_encryption: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword source: The provider for the encryption scope. Possible values (case-insensitive):
         Microsoft.Storage, Microsoft.KeyVault. Known values are: "Microsoft.Storage",
         "Microsoft.KeyVault".
        :paramtype source: str or ~azure.mgmt.storage.v2021_04_01.models.EncryptionScopeSource
        :keyword state: The state of the encryption scope. Possible values (case-insensitive):
         Enabled, Disabled. Known values are: "Enabled", "Disabled".
        :paramtype state: str or ~azure.mgmt.storage.v2021_04_01.models.EncryptionScopeState
        :keyword key_vault_properties: The key vault properties for the encryption scope. This is a
         required field if encryption scope 'source' attribute is set to 'Microsoft.KeyVault'.
        :paramtype key_vault_properties:
         ~azure.mgmt.storage.v2021_04_01.models.EncryptionScopeKeyVaultProperties
        :keyword require_infrastructure_encryption: A boolean indicating whether or not the service
         applies a secondary layer of encryption with platform managed keys for data at rest.
        :paramtype require_infrastructure_encryption: bool
        """
        super(EncryptionScope, self).__init__(**kwargs)
        self.source = source
        self.state = state
        self.creation_time = None
        self.last_modified_time = None
        self.key_vault_properties = key_vault_properties
        self.require_infrastructure_encryption = require_infrastructure_encryption


class EncryptionScopeKeyVaultProperties(msrest.serialization.Model):
    """The key vault properties for the encryption scope. This is a required field if encryption scope 'source' attribute is set to 'Microsoft.KeyVault'.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar key_uri: The object identifier for a key vault key object. When applied, the encryption
     scope will use the key referenced by the identifier to enable customer-managed key support on
     this encryption scope.
    :vartype key_uri: str
    :ivar current_versioned_key_identifier: The object identifier of the current versioned Key
     Vault Key in use.
    :vartype current_versioned_key_identifier: str
    :ivar last_key_rotation_timestamp: Timestamp of last rotation of the Key Vault Key.
    :vartype last_key_rotation_timestamp: ~datetime.datetime
    """

    _validation = {
        'current_versioned_key_identifier': {'readonly': True},
        'last_key_rotation_timestamp': {'readonly': True},
    }

    _attribute_map = {
        'key_uri': {'key': 'keyUri', 'type': 'str'},
        'current_versioned_key_identifier': {'key': 'currentVersionedKeyIdentifier', 'type': 'str'},
        'last_key_rotation_timestamp': {'key': 'lastKeyRotationTimestamp', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        key_uri: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword key_uri: The object identifier for a key vault key object. When applied, the
         encryption scope will use the key referenced by the identifier to enable customer-managed key
         support on this encryption scope.
        :paramtype key_uri: str
        """
        super(EncryptionScopeKeyVaultProperties, self).__init__(**kwargs)
        self.key_uri = key_uri
        self.current_versioned_key_identifier = None
        self.last_key_rotation_timestamp = None


class EncryptionScopeListResult(msrest.serialization.Model):
    """List of encryption scopes requested, and if paging is required, a URL to the next page of encryption scopes.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of encryption scopes requested.
    :vartype value: list[~azure.mgmt.storage.v2021_04_01.models.EncryptionScope]
    :ivar next_link: Request URL that can be used to query next page of encryption scopes. Returned
     when total number of requested encryption scopes exceeds the maximum page size.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[EncryptionScope]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(EncryptionScopeListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class EncryptionService(msrest.serialization.Model):
    """A service that allows server-side encryption to be used.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar enabled: A boolean indicating whether or not the service encrypts the data as it is
     stored.
    :vartype enabled: bool
    :ivar last_enabled_time: Gets a rough estimate of the date/time when the encryption was last
     enabled by the user. Only returned when encryption is enabled. There might be some unencrypted
     blobs which were written after this time, as it is just a rough estimate.
    :vartype last_enabled_time: ~datetime.datetime
    :ivar key_type: Encryption key type to be used for the encryption service. 'Account' key type
     implies that an account-scoped encryption key will be used. 'Service' key type implies that a
     default service key is used. Known values are: "Service", "Account".
    :vartype key_type: str or ~azure.mgmt.storage.v2021_04_01.models.KeyType
    """

    _validation = {
        'last_enabled_time': {'readonly': True},
    }

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'last_enabled_time': {'key': 'lastEnabledTime', 'type': 'iso-8601'},
        'key_type': {'key': 'keyType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        key_type: Optional[Union[str, "_models.KeyType"]] = None,
        **kwargs
    ):
        """
        :keyword enabled: A boolean indicating whether or not the service encrypts the data as it is
         stored.
        :paramtype enabled: bool
        :keyword key_type: Encryption key type to be used for the encryption service. 'Account' key
         type implies that an account-scoped encryption key will be used. 'Service' key type implies
         that a default service key is used. Known values are: "Service", "Account".
        :paramtype key_type: str or ~azure.mgmt.storage.v2021_04_01.models.KeyType
        """
        super(EncryptionService, self).__init__(**kwargs)
        self.enabled = enabled
        self.last_enabled_time = None
        self.key_type = key_type


class EncryptionServices(msrest.serialization.Model):
    """A list of services that support encryption.

    :ivar blob: The encryption function of the blob storage service.
    :vartype blob: ~azure.mgmt.storage.v2021_04_01.models.EncryptionService
    :ivar file: The encryption function of the file storage service.
    :vartype file: ~azure.mgmt.storage.v2021_04_01.models.EncryptionService
    :ivar table: The encryption function of the table storage service.
    :vartype table: ~azure.mgmt.storage.v2021_04_01.models.EncryptionService
    :ivar queue: The encryption function of the queue storage service.
    :vartype queue: ~azure.mgmt.storage.v2021_04_01.models.EncryptionService
    """

    _attribute_map = {
        'blob': {'key': 'blob', 'type': 'EncryptionService'},
        'file': {'key': 'file', 'type': 'EncryptionService'},
        'table': {'key': 'table', 'type': 'EncryptionService'},
        'queue': {'key': 'queue', 'type': 'EncryptionService'},
    }

    def __init__(
        self,
        *,
        blob: Optional["_models.EncryptionService"] = None,
        file: Optional["_models.EncryptionService"] = None,
        table: Optional["_models.EncryptionService"] = None,
        queue: Optional["_models.EncryptionService"] = None,
        **kwargs
    ):
        """
        :keyword blob: The encryption function of the blob storage service.
        :paramtype blob: ~azure.mgmt.storage.v2021_04_01.models.EncryptionService
        :keyword file: The encryption function of the file storage service.
        :paramtype file: ~azure.mgmt.storage.v2021_04_01.models.EncryptionService
        :keyword table: The encryption function of the table storage service.
        :paramtype table: ~azure.mgmt.storage.v2021_04_01.models.EncryptionService
        :keyword queue: The encryption function of the queue storage service.
        :paramtype queue: ~azure.mgmt.storage.v2021_04_01.models.EncryptionService
        """
        super(EncryptionServices, self).__init__(**kwargs)
        self.blob = blob
        self.file = file
        self.table = table
        self.queue = queue


class Endpoints(msrest.serialization.Model):
    """The URIs that are used to perform a retrieval of a public blob, queue, table, web or dfs object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar blob: Gets the blob endpoint.
    :vartype blob: str
    :ivar queue: Gets the queue endpoint.
    :vartype queue: str
    :ivar table: Gets the table endpoint.
    :vartype table: str
    :ivar file: Gets the file endpoint.
    :vartype file: str
    :ivar web: Gets the web endpoint.
    :vartype web: str
    :ivar dfs: Gets the dfs endpoint.
    :vartype dfs: str
    :ivar microsoft_endpoints: Gets the microsoft routing storage endpoints.
    :vartype microsoft_endpoints:
     ~azure.mgmt.storage.v2021_04_01.models.StorageAccountMicrosoftEndpoints
    :ivar internet_endpoints: Gets the internet routing storage endpoints.
    :vartype internet_endpoints:
     ~azure.mgmt.storage.v2021_04_01.models.StorageAccountInternetEndpoints
    """

    _validation = {
        'blob': {'readonly': True},
        'queue': {'readonly': True},
        'table': {'readonly': True},
        'file': {'readonly': True},
        'web': {'readonly': True},
        'dfs': {'readonly': True},
    }

    _attribute_map = {
        'blob': {'key': 'blob', 'type': 'str'},
        'queue': {'key': 'queue', 'type': 'str'},
        'table': {'key': 'table', 'type': 'str'},
        'file': {'key': 'file', 'type': 'str'},
        'web': {'key': 'web', 'type': 'str'},
        'dfs': {'key': 'dfs', 'type': 'str'},
        'microsoft_endpoints': {'key': 'microsoftEndpoints', 'type': 'StorageAccountMicrosoftEndpoints'},
        'internet_endpoints': {'key': 'internetEndpoints', 'type': 'StorageAccountInternetEndpoints'},
    }

    def __init__(
        self,
        *,
        microsoft_endpoints: Optional["_models.StorageAccountMicrosoftEndpoints"] = None,
        internet_endpoints: Optional["_models.StorageAccountInternetEndpoints"] = None,
        **kwargs
    ):
        """
        :keyword microsoft_endpoints: Gets the microsoft routing storage endpoints.
        :paramtype microsoft_endpoints:
         ~azure.mgmt.storage.v2021_04_01.models.StorageAccountMicrosoftEndpoints
        :keyword internet_endpoints: Gets the internet routing storage endpoints.
        :paramtype internet_endpoints:
         ~azure.mgmt.storage.v2021_04_01.models.StorageAccountInternetEndpoints
        """
        super(Endpoints, self).__init__(**kwargs)
        self.blob = None
        self.queue = None
        self.table = None
        self.file = None
        self.web = None
        self.dfs = None
        self.microsoft_endpoints = microsoft_endpoints
        self.internet_endpoints = internet_endpoints


class ErrorResponse(msrest.serialization.Model):
    """An error response from the storage resource provider.

    :ivar error: Azure Storage Resource Provider error response body.
    :vartype error: ~azure.mgmt.storage.v2021_04_01.models.ErrorResponseBody
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorResponseBody'},
    }

    def __init__(
        self,
        *,
        error: Optional["_models.ErrorResponseBody"] = None,
        **kwargs
    ):
        """
        :keyword error: Azure Storage Resource Provider error response body.
        :paramtype error: ~azure.mgmt.storage.v2021_04_01.models.ErrorResponseBody
        """
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class ErrorResponseBody(msrest.serialization.Model):
    """Error response body contract.

    :ivar code: An identifier for the error. Codes are invariant and are intended to be consumed
     programmatically.
    :vartype code: str
    :ivar message: A message describing the error, intended to be suitable for display in a user
     interface.
    :vartype message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword code: An identifier for the error. Codes are invariant and are intended to be consumed
         programmatically.
        :paramtype code: str
        :keyword message: A message describing the error, intended to be suitable for display in a user
         interface.
        :paramtype message: str
        """
        super(ErrorResponseBody, self).__init__(**kwargs)
        self.code = code
        self.message = message


class ExtendedLocation(msrest.serialization.Model):
    """The complex type of the extended location.

    :ivar name: The name of the extended location.
    :vartype name: str
    :ivar type: The type of the extended location. Known values are: "EdgeZone".
    :vartype type: str or ~azure.mgmt.storage.v2021_04_01.models.ExtendedLocationTypes
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        type: Optional[Union[str, "_models.ExtendedLocationTypes"]] = None,
        **kwargs
    ):
        """
        :keyword name: The name of the extended location.
        :paramtype name: str
        :keyword type: The type of the extended location. Known values are: "EdgeZone".
        :paramtype type: str or ~azure.mgmt.storage.v2021_04_01.models.ExtendedLocationTypes
        """
        super(ExtendedLocation, self).__init__(**kwargs)
        self.name = name
        self.type = type


class FileServiceItems(msrest.serialization.Model):
    """FileServiceItems.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of file services returned.
    :vartype value: list[~azure.mgmt.storage.v2021_04_01.models.FileServiceProperties]
    """

    _validation = {
        'value': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[FileServiceProperties]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(FileServiceItems, self).__init__(**kwargs)
        self.value = None


class FileServiceProperties(Resource):
    """The properties of File services in storage account.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar sku: Sku name and tier.
    :vartype sku: ~azure.mgmt.storage.v2021_04_01.models.Sku
    :ivar cors: Specifies CORS rules for the File service. You can include up to five CorsRule
     elements in the request. If no CorsRule elements are included in the request body, all CORS
     rules will be deleted, and CORS will be disabled for the File service.
    :vartype cors: ~azure.mgmt.storage.v2021_04_01.models.CorsRules
    :ivar share_delete_retention_policy: The file service properties for share soft delete.
    :vartype share_delete_retention_policy:
     ~azure.mgmt.storage.v2021_04_01.models.DeleteRetentionPolicy
    :ivar protocol_settings: Protocol settings for file service.
    :vartype protocol_settings: ~azure.mgmt.storage.v2021_04_01.models.ProtocolSettings
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'sku': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'Sku'},
        'cors': {'key': 'properties.cors', 'type': 'CorsRules'},
        'share_delete_retention_policy': {'key': 'properties.shareDeleteRetentionPolicy', 'type': 'DeleteRetentionPolicy'},
        'protocol_settings': {'key': 'properties.protocolSettings', 'type': 'ProtocolSettings'},
    }

    def __init__(
        self,
        *,
        cors: Optional["_models.CorsRules"] = None,
        share_delete_retention_policy: Optional["_models.DeleteRetentionPolicy"] = None,
        protocol_settings: Optional["_models.ProtocolSettings"] = None,
        **kwargs
    ):
        """
        :keyword cors: Specifies CORS rules for the File service. You can include up to five CorsRule
         elements in the request. If no CorsRule elements are included in the request body, all CORS
         rules will be deleted, and CORS will be disabled for the File service.
        :paramtype cors: ~azure.mgmt.storage.v2021_04_01.models.CorsRules
        :keyword share_delete_retention_policy: The file service properties for share soft delete.
        :paramtype share_delete_retention_policy:
         ~azure.mgmt.storage.v2021_04_01.models.DeleteRetentionPolicy
        :keyword protocol_settings: Protocol settings for file service.
        :paramtype protocol_settings: ~azure.mgmt.storage.v2021_04_01.models.ProtocolSettings
        """
        super(FileServiceProperties, self).__init__(**kwargs)
        self.sku = None
        self.cors = cors
        self.share_delete_retention_policy = share_delete_retention_policy
        self.protocol_settings = protocol_settings


class FileShare(AzureEntityResource):
    """Properties of the file share, including Id, resource name, resource type, Etag.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar etag: Resource Etag.
    :vartype etag: str
    :ivar last_modified_time: Returns the date and time the share was last modified.
    :vartype last_modified_time: ~datetime.datetime
    :ivar metadata: A name-value pair to associate with the share as metadata.
    :vartype metadata: dict[str, str]
    :ivar share_quota: The maximum size of the share, in gigabytes. Must be greater than 0, and
     less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400.
    :vartype share_quota: int
    :ivar enabled_protocols: The authentication protocol that is used for the file share. Can only
     be specified when creating a share. Known values are: "SMB", "NFS".
    :vartype enabled_protocols: str or ~azure.mgmt.storage.v2021_04_01.models.EnabledProtocols
    :ivar root_squash: The property is for NFS share only. The default is NoRootSquash. Known
     values are: "NoRootSquash", "RootSquash", "AllSquash".
    :vartype root_squash: str or ~azure.mgmt.storage.v2021_04_01.models.RootSquashType
    :ivar version: The version of the share.
    :vartype version: str
    :ivar deleted: Indicates whether the share was deleted.
    :vartype deleted: bool
    :ivar deleted_time: The deleted time if the share was deleted.
    :vartype deleted_time: ~datetime.datetime
    :ivar remaining_retention_days: Remaining retention days for share that was soft deleted.
    :vartype remaining_retention_days: int
    :ivar access_tier: Access tier for specific share. GpV2 account can choose between
     TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium. Known
     values are: "TransactionOptimized", "Hot", "Cool", "Premium".
    :vartype access_tier: str or ~azure.mgmt.storage.v2021_04_01.models.ShareAccessTier
    :ivar access_tier_change_time: Indicates the last modification time for share access tier.
    :vartype access_tier_change_time: ~datetime.datetime
    :ivar access_tier_status: Indicates if there is a pending transition for access tier.
    :vartype access_tier_status: str
    :ivar share_usage_bytes: The approximate size of the data stored on the share. Note that this
     value may not include all recently created or recently resized files.
    :vartype share_usage_bytes: long
    :ivar lease_status: The lease status of the share. Known values are: "Locked", "Unlocked".
    :vartype lease_status: str or ~azure.mgmt.storage.v2021_04_01.models.LeaseStatus
    :ivar lease_state: Lease state of the share. Known values are: "Available", "Leased",
     "Expired", "Breaking", "Broken".
    :vartype lease_state: str or ~azure.mgmt.storage.v2021_04_01.models.LeaseState
    :ivar lease_duration: Specifies whether the lease on a share is of infinite or fixed duration,
     only when the share is leased. Known values are: "Infinite", "Fixed".
    :vartype lease_duration: str or ~azure.mgmt.storage.v2021_04_01.models.LeaseDuration
    :ivar signed_identifiers: List of stored access policies specified on the share.
    :vartype signed_identifiers: list[~azure.mgmt.storage.v2021_04_01.models.SignedIdentifier]
    :ivar snapshot_time: Creation time of share snapshot returned in the response of list shares
     with expand param "snapshots".
    :vartype snapshot_time: ~datetime.datetime
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'last_modified_time': {'readonly': True},
        'share_quota': {'maximum': 102400, 'minimum': 1},
        'version': {'readonly': True},
        'deleted': {'readonly': True},
        'deleted_time': {'readonly': True},
        'remaining_retention_days': {'readonly': True},
        'access_tier_change_time': {'readonly': True},
        'access_tier_status': {'readonly': True},
        'share_usage_bytes': {'readonly': True},
        'lease_status': {'readonly': True},
        'lease_state': {'readonly': True},
        'lease_duration': {'readonly': True},
        'snapshot_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'last_modified_time': {'key': 'properties.lastModifiedTime', 'type': 'iso-8601'},
        'metadata': {'key': 'properties.metadata', 'type': '{str}'},
        'share_quota': {'key': 'properties.shareQuota', 'type': 'int'},
        'enabled_protocols': {'key': 'properties.enabledProtocols', 'type': 'str'},
        'root_squash': {'key': 'properties.rootSquash', 'type': 'str'},
        'version': {'key': 'properties.version', 'type': 'str'},
        'deleted': {'key': 'properties.deleted', 'type': 'bool'},
        'deleted_time': {'key': 'properties.deletedTime', 'type': 'iso-8601'},
        'remaining_retention_days': {'key': 'properties.remainingRetentionDays', 'type': 'int'},
        'access_tier': {'key': 'properties.accessTier', 'type': 'str'},
        'access_tier_change_time': {'key': 'properties.accessTierChangeTime', 'type': 'iso-8601'},
        'access_tier_status': {'key': 'properties.accessTierStatus', 'type': 'str'},
        'share_usage_bytes': {'key': 'properties.shareUsageBytes', 'type': 'long'},
        'lease_status': {'key': 'properties.leaseStatus', 'type': 'str'},
        'lease_state': {'key': 'properties.leaseState', 'type': 'str'},
        'lease_duration': {'key': 'properties.leaseDuration', 'type': 'str'},
        'signed_identifiers': {'key': 'properties.signedIdentifiers', 'type': '[SignedIdentifier]'},
        'snapshot_time': {'key': 'properties.snapshotTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        metadata: Optional[Dict[str, str]] = None,
        share_quota: Optional[int] = None,
        enabled_protocols: Optional[Union[str, "_models.EnabledProtocols"]] = None,
        root_squash: Optional[Union[str, "_models.RootSquashType"]] = None,
        access_tier: Optional[Union[str, "_models.ShareAccessTier"]] = None,
        signed_identifiers: Optional[List["_models.SignedIdentifier"]] = None,
        **kwargs
    ):
        """
        :keyword metadata: A name-value pair to associate with the share as metadata.
        :paramtype metadata: dict[str, str]
        :keyword share_quota: The maximum size of the share, in gigabytes. Must be greater than 0, and
         less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400.
        :paramtype share_quota: int
        :keyword enabled_protocols: The authentication protocol that is used for the file share. Can
         only be specified when creating a share. Known values are: "SMB", "NFS".
        :paramtype enabled_protocols: str or ~azure.mgmt.storage.v2021_04_01.models.EnabledProtocols
        :keyword root_squash: The property is for NFS share only. The default is NoRootSquash. Known
         values are: "NoRootSquash", "RootSquash", "AllSquash".
        :paramtype root_squash: str or ~azure.mgmt.storage.v2021_04_01.models.RootSquashType
        :keyword access_tier: Access tier for specific share. GpV2 account can choose between
         TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium. Known
         values are: "TransactionOptimized", "Hot", "Cool", "Premium".
        :paramtype access_tier: str or ~azure.mgmt.storage.v2021_04_01.models.ShareAccessTier
        :keyword signed_identifiers: List of stored access policies specified on the share.
        :paramtype signed_identifiers: list[~azure.mgmt.storage.v2021_04_01.models.SignedIdentifier]
        """
        super(FileShare, self).__init__(**kwargs)
        self.last_modified_time = None
        self.metadata = metadata
        self.share_quota = share_quota
        self.enabled_protocols = enabled_protocols
        self.root_squash = root_squash
        self.version = None
        self.deleted = None
        self.deleted_time = None
        self.remaining_retention_days = None
        self.access_tier = access_tier
        self.access_tier_change_time = None
        self.access_tier_status = None
        self.share_usage_bytes = None
        self.lease_status = None
        self.lease_state = None
        self.lease_duration = None
        self.signed_identifiers = signed_identifiers
        self.snapshot_time = None


class FileShareItem(AzureEntityResource):
    """The file share properties be listed out.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar etag: Resource Etag.
    :vartype etag: str
    :ivar last_modified_time: Returns the date and time the share was last modified.
    :vartype last_modified_time: ~datetime.datetime
    :ivar metadata: A name-value pair to associate with the share as metadata.
    :vartype metadata: dict[str, str]
    :ivar share_quota: The maximum size of the share, in gigabytes. Must be greater than 0, and
     less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400.
    :vartype share_quota: int
    :ivar enabled_protocols: The authentication protocol that is used for the file share. Can only
     be specified when creating a share. Known values are: "SMB", "NFS".
    :vartype enabled_protocols: str or ~azure.mgmt.storage.v2021_04_01.models.EnabledProtocols
    :ivar root_squash: The property is for NFS share only. The default is NoRootSquash. Known
     values are: "NoRootSquash", "RootSquash", "AllSquash".
    :vartype root_squash: str or ~azure.mgmt.storage.v2021_04_01.models.RootSquashType
    :ivar version: The version of the share.
    :vartype version: str
    :ivar deleted: Indicates whether the share was deleted.
    :vartype deleted: bool
    :ivar deleted_time: The deleted time if the share was deleted.
    :vartype deleted_time: ~datetime.datetime
    :ivar remaining_retention_days: Remaining retention days for share that was soft deleted.
    :vartype remaining_retention_days: int
    :ivar access_tier: Access tier for specific share. GpV2 account can choose between
     TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium. Known
     values are: "TransactionOptimized", "Hot", "Cool", "Premium".
    :vartype access_tier: str or ~azure.mgmt.storage.v2021_04_01.models.ShareAccessTier
    :ivar access_tier_change_time: Indicates the last modification time for share access tier.
    :vartype access_tier_change_time: ~datetime.datetime
    :ivar access_tier_status: Indicates if there is a pending transition for access tier.
    :vartype access_tier_status: str
    :ivar share_usage_bytes: The approximate size of the data stored on the share. Note that this
     value may not include all recently created or recently resized files.
    :vartype share_usage_bytes: long
    :ivar lease_status: The lease status of the share. Known values are: "Locked", "Unlocked".
    :vartype lease_status: str or ~azure.mgmt.storage.v2021_04_01.models.LeaseStatus
    :ivar lease_state: Lease state of the share. Known values are: "Available", "Leased",
     "Expired", "Breaking", "Broken".
    :vartype lease_state: str or ~azure.mgmt.storage.v2021_04_01.models.LeaseState
    :ivar lease_duration: Specifies whether the lease on a share is of infinite or fixed duration,
     only when the share is leased. Known values are: "Infinite", "Fixed".
    :vartype lease_duration: str or ~azure.mgmt.storage.v2021_04_01.models.LeaseDuration
    :ivar signed_identifiers: List of stored access policies specified on the share.
    :vartype signed_identifiers: list[~azure.mgmt.storage.v2021_04_01.models.SignedIdentifier]
    :ivar snapshot_time: Creation time of share snapshot returned in the response of list shares
     with expand param "snapshots".
    :vartype snapshot_time: ~datetime.datetime
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'last_modified_time': {'readonly': True},
        'share_quota': {'maximum': 102400, 'minimum': 1},
        'version': {'readonly': True},
        'deleted': {'readonly': True},
        'deleted_time': {'readonly': True},
        'remaining_retention_days': {'readonly': True},
        'access_tier_change_time': {'readonly': True},
        'access_tier_status': {'readonly': True},
        'share_usage_bytes': {'readonly': True},
        'lease_status': {'readonly': True},
        'lease_state': {'readonly': True},
        'lease_duration': {'readonly': True},
        'snapshot_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'last_modified_time': {'key': 'properties.lastModifiedTime', 'type': 'iso-8601'},
        'metadata': {'key': 'properties.metadata', 'type': '{str}'},
        'share_quota': {'key': 'properties.shareQuota', 'type': 'int'},
        'enabled_protocols': {'key': 'properties.enabledProtocols', 'type': 'str'},
        'root_squash': {'key': 'properties.rootSquash', 'type': 'str'},
        'version': {'key': 'properties.version', 'type': 'str'},
        'deleted': {'key': 'properties.deleted', 'type': 'bool'},
        'deleted_time': {'key': 'properties.deletedTime', 'type': 'iso-8601'},
        'remaining_retention_days': {'key': 'properties.remainingRetentionDays', 'type': 'int'},
        'access_tier': {'key': 'properties.accessTier', 'type': 'str'},
        'access_tier_change_time': {'key': 'properties.accessTierChangeTime', 'type': 'iso-8601'},
        'access_tier_status': {'key': 'properties.accessTierStatus', 'type': 'str'},
        'share_usage_bytes': {'key': 'properties.shareUsageBytes', 'type': 'long'},
        'lease_status': {'key': 'properties.leaseStatus', 'type': 'str'},
        'lease_state': {'key': 'properties.leaseState', 'type': 'str'},
        'lease_duration': {'key': 'properties.leaseDuration', 'type': 'str'},
        'signed_identifiers': {'key': 'properties.signedIdentifiers', 'type': '[SignedIdentifier]'},
        'snapshot_time': {'key': 'properties.snapshotTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        metadata: Optional[Dict[str, str]] = None,
        share_quota: Optional[int] = None,
        enabled_protocols: Optional[Union[str, "_models.EnabledProtocols"]] = None,
        root_squash: Optional[Union[str, "_models.RootSquashType"]] = None,
        access_tier: Optional[Union[str, "_models.ShareAccessTier"]] = None,
        signed_identifiers: Optional[List["_models.SignedIdentifier"]] = None,
        **kwargs
    ):
        """
        :keyword metadata: A name-value pair to associate with the share as metadata.
        :paramtype metadata: dict[str, str]
        :keyword share_quota: The maximum size of the share, in gigabytes. Must be greater than 0, and
         less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400.
        :paramtype share_quota: int
        :keyword enabled_protocols: The authentication protocol that is used for the file share. Can
         only be specified when creating a share. Known values are: "SMB", "NFS".
        :paramtype enabled_protocols: str or ~azure.mgmt.storage.v2021_04_01.models.EnabledProtocols
        :keyword root_squash: The property is for NFS share only. The default is NoRootSquash. Known
         values are: "NoRootSquash", "RootSquash", "AllSquash".
        :paramtype root_squash: str or ~azure.mgmt.storage.v2021_04_01.models.RootSquashType
        :keyword access_tier: Access tier for specific share. GpV2 account can choose between
         TransactionOptimized (default), Hot, and Cool. FileStorage account can choose Premium. Known
         values are: "TransactionOptimized", "Hot", "Cool", "Premium".
        :paramtype access_tier: str or ~azure.mgmt.storage.v2021_04_01.models.ShareAccessTier
        :keyword signed_identifiers: List of stored access policies specified on the share.
        :paramtype signed_identifiers: list[~azure.mgmt.storage.v2021_04_01.models.SignedIdentifier]
        """
        super(FileShareItem, self).__init__(**kwargs)
        self.last_modified_time = None
        self.metadata = metadata
        self.share_quota = share_quota
        self.enabled_protocols = enabled_protocols
        self.root_squash = root_squash
        self.version = None
        self.deleted = None
        self.deleted_time = None
        self.remaining_retention_days = None
        self.access_tier = access_tier
        self.access_tier_change_time = None
        self.access_tier_status = None
        self.share_usage_bytes = None
        self.lease_status = None
        self.lease_state = None
        self.lease_duration = None
        self.signed_identifiers = signed_identifiers
        self.snapshot_time = None


class FileShareItems(msrest.serialization.Model):
    """Response schema. Contains list of shares returned, and if paging is requested or required, a URL to next page of shares.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of file shares returned.
    :vartype value: list[~azure.mgmt.storage.v2021_04_01.models.FileShareItem]
    :ivar next_link: Request URL that can be used to query next page of shares. Returned when total
     number of requested shares exceed maximum page size.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[FileShareItem]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(FileShareItems, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class GeoReplicationStats(msrest.serialization.Model):
    """Statistics related to replication for storage account's Blob, Table, Queue and File services. It is only available when geo-redundant replication is enabled for the storage account.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar status: The status of the secondary location. Possible values are: - Live: Indicates that
     the secondary location is active and operational. - Bootstrap: Indicates initial
     synchronization from the primary location to the secondary location is in progress.This
     typically occurs when replication is first enabled. - Unavailable: Indicates that the secondary
     location is temporarily unavailable. Known values are: "Live", "Bootstrap", "Unavailable".
    :vartype status: str or ~azure.mgmt.storage.v2021_04_01.models.GeoReplicationStatus
    :ivar last_sync_time: All primary writes preceding this UTC date/time value are guaranteed to
     be available for read operations. Primary writes following this point in time may or may not be
     available for reads. Element may be default value if value of LastSyncTime is not available,
     this can happen if secondary is offline or we are in bootstrap.
    :vartype last_sync_time: ~datetime.datetime
    :ivar can_failover: A boolean flag which indicates whether or not account failover is supported
     for the account.
    :vartype can_failover: bool
    """

    _validation = {
        'status': {'readonly': True},
        'last_sync_time': {'readonly': True},
        'can_failover': {'readonly': True},
    }

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'last_sync_time': {'key': 'lastSyncTime', 'type': 'iso-8601'},
        'can_failover': {'key': 'canFailover', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(GeoReplicationStats, self).__init__(**kwargs)
        self.status = None
        self.last_sync_time = None
        self.can_failover = None


class Identity(msrest.serialization.Model):
    """Identity for the resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar principal_id: The principal ID of resource identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of resource.
    :vartype tenant_id: str
    :ivar type: Required. The identity type. Known values are: "None", "SystemAssigned",
     "UserAssigned", "SystemAssigned,UserAssigned".
    :vartype type: str or ~azure.mgmt.storage.v2021_04_01.models.IdentityType
    :ivar user_assigned_identities: Gets or sets a list of key value pairs that describe the set of
     User Assigned identities that will be used with this storage account. The key is the ARM
     resource identifier of the identity. Only 1 User Assigned identity is permitted here.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.storage.v2021_04_01.models.UserAssignedIdentity]
    """

    _validation = {
        'principal_id': {'readonly': True},
        'tenant_id': {'readonly': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'user_assigned_identities': {'key': 'userAssignedIdentities', 'type': '{UserAssignedIdentity}'},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.IdentityType"],
        user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = None,
        **kwargs
    ):
        """
        :keyword type: Required. The identity type. Known values are: "None", "SystemAssigned",
         "UserAssigned", "SystemAssigned,UserAssigned".
        :paramtype type: str or ~azure.mgmt.storage.v2021_04_01.models.IdentityType
        :keyword user_assigned_identities: Gets or sets a list of key value pairs that describe the set
         of User Assigned identities that will be used with this storage account. The key is the ARM
         resource identifier of the identity. Only 1 User Assigned identity is permitted here.
        :paramtype user_assigned_identities: dict[str,
         ~azure.mgmt.storage.v2021_04_01.models.UserAssignedIdentity]
        """
        super(Identity, self).__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = type
        self.user_assigned_identities = user_assigned_identities


class ImmutabilityPolicy(AzureEntityResource):
    """The ImmutabilityPolicy property of a blob container, including Id, resource name, resource type, Etag.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar etag: Resource Etag.
    :vartype etag: str
    :ivar immutability_period_since_creation_in_days: The immutability period for the blobs in the
     container since the policy creation, in days.
    :vartype immutability_period_since_creation_in_days: int
    :ivar state: The ImmutabilityPolicy state of a blob container, possible values include: Locked
     and Unlocked. Known values are: "Locked", "Unlocked".
    :vartype state: str or ~azure.mgmt.storage.v2021_04_01.models.ImmutabilityPolicyState
    :ivar allow_protected_append_writes: This property can only be changed for unlocked time-based
     retention policies. When enabled, new blocks can be written to an append blob while maintaining
     immutability protection and compliance. Only new blocks can be added and any existing blocks
     cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy
     API.
    :vartype allow_protected_append_writes: bool
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'immutability_period_since_creation_in_days': {'key': 'properties.immutabilityPeriodSinceCreationInDays', 'type': 'int'},
        'state': {'key': 'properties.state', 'type': 'str'},
        'allow_protected_append_writes': {'key': 'properties.allowProtectedAppendWrites', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        immutability_period_since_creation_in_days: Optional[int] = None,
        allow_protected_append_writes: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword immutability_period_since_creation_in_days: The immutability period for the blobs in
         the container since the policy creation, in days.
        :paramtype immutability_period_since_creation_in_days: int
        :keyword allow_protected_append_writes: This property can only be changed for unlocked
         time-based retention policies. When enabled, new blocks can be written to an append blob while
         maintaining immutability protection and compliance. Only new blocks can be added and any
         existing blocks cannot be modified or deleted. This property cannot be changed with
         ExtendImmutabilityPolicy API.
        :paramtype allow_protected_append_writes: bool
        """
        super(ImmutabilityPolicy, self).__init__(**kwargs)
        self.immutability_period_since_creation_in_days = immutability_period_since_creation_in_days
        self.state = None
        self.allow_protected_append_writes = allow_protected_append_writes


class ImmutabilityPolicyProperties(msrest.serialization.Model):
    """The properties of an ImmutabilityPolicy of a blob container.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar etag: ImmutabilityPolicy Etag.
    :vartype etag: str
    :ivar update_history: The ImmutabilityPolicy update history of the blob container.
    :vartype update_history: list[~azure.mgmt.storage.v2021_04_01.models.UpdateHistoryProperty]
    :ivar immutability_period_since_creation_in_days: The immutability period for the blobs in the
     container since the policy creation, in days.
    :vartype immutability_period_since_creation_in_days: int
    :ivar state: The ImmutabilityPolicy state of a blob container, possible values include: Locked
     and Unlocked. Known values are: "Locked", "Unlocked".
    :vartype state: str or ~azure.mgmt.storage.v2021_04_01.models.ImmutabilityPolicyState
    :ivar allow_protected_append_writes: This property can only be changed for unlocked time-based
     retention policies. When enabled, new blocks can be written to an append blob while maintaining
     immutability protection and compliance. Only new blocks can be added and any existing blocks
     cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy
     API.
    :vartype allow_protected_append_writes: bool
    """

    _validation = {
        'etag': {'readonly': True},
        'update_history': {'readonly': True},
        'state': {'readonly': True},
    }

    _attribute_map = {
        'etag': {'key': 'etag', 'type': 'str'},
        'update_history': {'key': 'updateHistory', 'type': '[UpdateHistoryProperty]'},
        'immutability_period_since_creation_in_days': {'key': 'properties.immutabilityPeriodSinceCreationInDays', 'type': 'int'},
        'state': {'key': 'properties.state', 'type': 'str'},
        'allow_protected_append_writes': {'key': 'properties.allowProtectedAppendWrites', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        immutability_period_since_creation_in_days: Optional[int] = None,
        allow_protected_append_writes: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword immutability_period_since_creation_in_days: The immutability period for the blobs in
         the container since the policy creation, in days.
        :paramtype immutability_period_since_creation_in_days: int
        :keyword allow_protected_append_writes: This property can only be changed for unlocked
         time-based retention policies. When enabled, new blocks can be written to an append blob while
         maintaining immutability protection and compliance. Only new blocks can be added and any
         existing blocks cannot be modified or deleted. This property cannot be changed with
         ExtendImmutabilityPolicy API.
        :paramtype allow_protected_append_writes: bool
        """
        super(ImmutabilityPolicyProperties, self).__init__(**kwargs)
        self.etag = None
        self.update_history = None
        self.immutability_period_since_creation_in_days = immutability_period_since_creation_in_days
        self.state = None
        self.allow_protected_append_writes = allow_protected_append_writes


class ImmutableStorageWithVersioning(msrest.serialization.Model):
    """Object level immutability properties of the container.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar enabled: This is an immutable property, when set to true it enables object level
     immutability at the container level.
    :vartype enabled: bool
    :ivar time_stamp: Returns the date and time the object level immutability was enabled.
    :vartype time_stamp: ~datetime.datetime
    :ivar migration_state: This property denotes the container level immutability to object level
     immutability migration state. Known values are: "InProgress", "Completed".
    :vartype migration_state: str or ~azure.mgmt.storage.v2021_04_01.models.MigrationState
    """

    _validation = {
        'time_stamp': {'readonly': True},
        'migration_state': {'readonly': True},
    }

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'time_stamp': {'key': 'timeStamp', 'type': 'iso-8601'},
        'migration_state': {'key': 'migrationState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword enabled: This is an immutable property, when set to true it enables object level
         immutability at the container level.
        :paramtype enabled: bool
        """
        super(ImmutableStorageWithVersioning, self).__init__(**kwargs)
        self.enabled = enabled
        self.time_stamp = None
        self.migration_state = None


class IPRule(msrest.serialization.Model):
    """IP rule with specific IP or IP range in CIDR format.

    All required parameters must be populated in order to send to Azure.

    :ivar ip_address_or_range: Required. Specifies the IP or IP range in CIDR format. Only IPV4
     address is allowed.
    :vartype ip_address_or_range: str
    :ivar action: The action of IP ACL rule. The only acceptable values to pass in are None and
     "Allow". The default value is None.
    :vartype action: str
    """

    _validation = {
        'ip_address_or_range': {'required': True},
    }

    _attribute_map = {
        'ip_address_or_range': {'key': 'value', 'type': 'str'},
        'action': {'key': 'action', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        ip_address_or_range: str,
        action: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword ip_address_or_range: Required. Specifies the IP or IP range in CIDR format. Only IPV4
         address is allowed.
        :paramtype ip_address_or_range: str
        :keyword action: The action of IP ACL rule. The only acceptable values to pass in are None and
         "Allow". The default value is None.
        :paramtype action: str
        """
        super(IPRule, self).__init__(**kwargs)
        self.ip_address_or_range = ip_address_or_range
        self.action = action


class KeyCreationTime(msrest.serialization.Model):
    """Storage account keys creation time.

    :ivar key1:
    :vartype key1: ~datetime.datetime
    :ivar key2:
    :vartype key2: ~datetime.datetime
    """

    _attribute_map = {
        'key1': {'key': 'key1', 'type': 'iso-8601'},
        'key2': {'key': 'key2', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        key1: Optional[datetime.datetime] = None,
        key2: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword key1:
        :paramtype key1: ~datetime.datetime
        :keyword key2:
        :paramtype key2: ~datetime.datetime
        """
        super(KeyCreationTime, self).__init__(**kwargs)
        self.key1 = key1
        self.key2 = key2


class KeyPolicy(msrest.serialization.Model):
    """KeyPolicy assigned to the storage account.

    All required parameters must be populated in order to send to Azure.

    :ivar key_expiration_period_in_days: Required. The key expiration period in days.
    :vartype key_expiration_period_in_days: int
    """

    _validation = {
        'key_expiration_period_in_days': {'required': True},
    }

    _attribute_map = {
        'key_expiration_period_in_days': {'key': 'keyExpirationPeriodInDays', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        key_expiration_period_in_days: int,
        **kwargs
    ):
        """
        :keyword key_expiration_period_in_days: Required. The key expiration period in days.
        :paramtype key_expiration_period_in_days: int
        """
        super(KeyPolicy, self).__init__(**kwargs)
        self.key_expiration_period_in_days = key_expiration_period_in_days


class KeyVaultProperties(msrest.serialization.Model):
    """Properties of key vault.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar key_name: The name of KeyVault key.
    :vartype key_name: str
    :ivar key_version: The version of KeyVault key.
    :vartype key_version: str
    :ivar key_vault_uri: The Uri of KeyVault.
    :vartype key_vault_uri: str
    :ivar current_versioned_key_identifier: The object identifier of the current versioned Key
     Vault Key in use.
    :vartype current_versioned_key_identifier: str
    :ivar last_key_rotation_timestamp: Timestamp of last rotation of the Key Vault Key.
    :vartype last_key_rotation_timestamp: ~datetime.datetime
    """

    _validation = {
        'current_versioned_key_identifier': {'readonly': True},
        'last_key_rotation_timestamp': {'readonly': True},
    }

    _attribute_map = {
        'key_name': {'key': 'keyname', 'type': 'str'},
        'key_version': {'key': 'keyversion', 'type': 'str'},
        'key_vault_uri': {'key': 'keyvaulturi', 'type': 'str'},
        'current_versioned_key_identifier': {'key': 'currentVersionedKeyIdentifier', 'type': 'str'},
        'last_key_rotation_timestamp': {'key': 'lastKeyRotationTimestamp', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        key_name: Optional[str] = None,
        key_version: Optional[str] = None,
        key_vault_uri: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword key_name: The name of KeyVault key.
        :paramtype key_name: str
        :keyword key_version: The version of KeyVault key.
        :paramtype key_version: str
        :keyword key_vault_uri: The Uri of KeyVault.
        :paramtype key_vault_uri: str
        """
        super(KeyVaultProperties, self).__init__(**kwargs)
        self.key_name = key_name
        self.key_version = key_version
        self.key_vault_uri = key_vault_uri
        self.current_versioned_key_identifier = None
        self.last_key_rotation_timestamp = None


class LastAccessTimeTrackingPolicy(msrest.serialization.Model):
    """The blob service properties for Last access time based tracking policy.

    All required parameters must be populated in order to send to Azure.

    :ivar enable: Required. When set to true last access time based tracking is enabled.
    :vartype enable: bool
    :ivar name: Name of the policy. The valid value is AccessTimeTracking. This field is currently
     read only. Known values are: "AccessTimeTracking".
    :vartype name: str or ~azure.mgmt.storage.v2021_04_01.models.Name
    :ivar tracking_granularity_in_days: The field specifies blob object tracking granularity in
     days, typically how often the blob object should be tracked.This field is currently read only
     with value as 1.
    :vartype tracking_granularity_in_days: int
    :ivar blob_type: An array of predefined supported blob types. Only blockBlob is the supported
     value. This field is currently read only.
    :vartype blob_type: list[str]
    """

    _validation = {
        'enable': {'required': True},
    }

    _attribute_map = {
        'enable': {'key': 'enable', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'tracking_granularity_in_days': {'key': 'trackingGranularityInDays', 'type': 'int'},
        'blob_type': {'key': 'blobType', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        enable: bool,
        name: Optional[Union[str, "_models.Name"]] = None,
        tracking_granularity_in_days: Optional[int] = None,
        blob_type: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword enable: Required. When set to true last access time based tracking is enabled.
        :paramtype enable: bool
        :keyword name: Name of the policy. The valid value is AccessTimeTracking. This field is
         currently read only. Known values are: "AccessTimeTracking".
        :paramtype name: str or ~azure.mgmt.storage.v2021_04_01.models.Name
        :keyword tracking_granularity_in_days: The field specifies blob object tracking granularity in
         days, typically how often the blob object should be tracked.This field is currently read only
         with value as 1.
        :paramtype tracking_granularity_in_days: int
        :keyword blob_type: An array of predefined supported blob types. Only blockBlob is the
         supported value. This field is currently read only.
        :paramtype blob_type: list[str]
        """
        super(LastAccessTimeTrackingPolicy, self).__init__(**kwargs)
        self.enable = enable
        self.name = name
        self.tracking_granularity_in_days = tracking_granularity_in_days
        self.blob_type = blob_type


class LeaseContainerRequest(msrest.serialization.Model):
    """Lease Container request schema.

    All required parameters must be populated in order to send to Azure.

    :ivar action: Required. Specifies the lease action. Can be one of the available actions. Known
     values are: "Acquire", "Renew", "Change", "Release", "Break".
    :vartype action: str or ~azure.mgmt.storage.v2021_04_01.models.LeaseContainerRequestAction
    :ivar lease_id: Identifies the lease. Can be specified in any valid GUID string format.
    :vartype lease_id: str
    :ivar break_period: Optional. For a break action, proposed duration the lease should continue
     before it is broken, in seconds, between 0 and 60.
    :vartype break_period: int
    :ivar lease_duration: Required for acquire. Specifies the duration of the lease, in seconds, or
     negative one (-1) for a lease that never expires.
    :vartype lease_duration: int
    :ivar proposed_lease_id: Optional for acquire, required for change. Proposed lease ID, in a
     GUID string format.
    :vartype proposed_lease_id: str
    """

    _validation = {
        'action': {'required': True},
    }

    _attribute_map = {
        'action': {'key': 'action', 'type': 'str'},
        'lease_id': {'key': 'leaseId', 'type': 'str'},
        'break_period': {'key': 'breakPeriod', 'type': 'int'},
        'lease_duration': {'key': 'leaseDuration', 'type': 'int'},
        'proposed_lease_id': {'key': 'proposedLeaseId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        action: Union[str, "_models.LeaseContainerRequestAction"],
        lease_id: Optional[str] = None,
        break_period: Optional[int] = None,
        lease_duration: Optional[int] = None,
        proposed_lease_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword action: Required. Specifies the lease action. Can be one of the available actions.
         Known values are: "Acquire", "Renew", "Change", "Release", "Break".
        :paramtype action: str or ~azure.mgmt.storage.v2021_04_01.models.LeaseContainerRequestAction
        :keyword lease_id: Identifies the lease. Can be specified in any valid GUID string format.
        :paramtype lease_id: str
        :keyword break_period: Optional. For a break action, proposed duration the lease should
         continue before it is broken, in seconds, between 0 and 60.
        :paramtype break_period: int
        :keyword lease_duration: Required for acquire. Specifies the duration of the lease, in seconds,
         or negative one (-1) for a lease that never expires.
        :paramtype lease_duration: int
        :keyword proposed_lease_id: Optional for acquire, required for change. Proposed lease ID, in a
         GUID string format.
        :paramtype proposed_lease_id: str
        """
        super(LeaseContainerRequest, self).__init__(**kwargs)
        self.action = action
        self.lease_id = lease_id
        self.break_period = break_period
        self.lease_duration = lease_duration
        self.proposed_lease_id = proposed_lease_id


class LeaseContainerResponse(msrest.serialization.Model):
    """Lease Container response schema.

    :ivar lease_id: Returned unique lease ID that must be included with any request to delete the
     container, or to renew, change, or release the lease.
    :vartype lease_id: str
    :ivar lease_time_seconds: Approximate time remaining in the lease period, in seconds.
    :vartype lease_time_seconds: str
    """

    _attribute_map = {
        'lease_id': {'key': 'leaseId', 'type': 'str'},
        'lease_time_seconds': {'key': 'leaseTimeSeconds', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        lease_id: Optional[str] = None,
        lease_time_seconds: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword lease_id: Returned unique lease ID that must be included with any request to delete
         the container, or to renew, change, or release the lease.
        :paramtype lease_id: str
        :keyword lease_time_seconds: Approximate time remaining in the lease period, in seconds.
        :paramtype lease_time_seconds: str
        """
        super(LeaseContainerResponse, self).__init__(**kwargs)
        self.lease_id = lease_id
        self.lease_time_seconds = lease_time_seconds


class LeaseShareRequest(msrest.serialization.Model):
    """Lease Share request schema.

    All required parameters must be populated in order to send to Azure.

    :ivar action: Required. Specifies the lease action. Can be one of the available actions. Known
     values are: "Acquire", "Renew", "Change", "Release", "Break".
    :vartype action: str or ~azure.mgmt.storage.v2021_04_01.models.LeaseShareAction
    :ivar lease_id: Identifies the lease. Can be specified in any valid GUID string format.
    :vartype lease_id: str
    :ivar break_period: Optional. For a break action, proposed duration the lease should continue
     before it is broken, in seconds, between 0 and 60.
    :vartype break_period: int
    :ivar lease_duration: Required for acquire. Specifies the duration of the lease, in seconds, or
     negative one (-1) for a lease that never expires.
    :vartype lease_duration: int
    :ivar proposed_lease_id: Optional for acquire, required for change. Proposed lease ID, in a
     GUID string format.
    :vartype proposed_lease_id: str
    """

    _validation = {
        'action': {'required': True},
    }

    _attribute_map = {
        'action': {'key': 'action', 'type': 'str'},
        'lease_id': {'key': 'leaseId', 'type': 'str'},
        'break_period': {'key': 'breakPeriod', 'type': 'int'},
        'lease_duration': {'key': 'leaseDuration', 'type': 'int'},
        'proposed_lease_id': {'key': 'proposedLeaseId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        action: Union[str, "_models.LeaseShareAction"],
        lease_id: Optional[str] = None,
        break_period: Optional[int] = None,
        lease_duration: Optional[int] = None,
        proposed_lease_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword action: Required. Specifies the lease action. Can be one of the available actions.
         Known values are: "Acquire", "Renew", "Change", "Release", "Break".
        :paramtype action: str or ~azure.mgmt.storage.v2021_04_01.models.LeaseShareAction
        :keyword lease_id: Identifies the lease. Can be specified in any valid GUID string format.
        :paramtype lease_id: str
        :keyword break_period: Optional. For a break action, proposed duration the lease should
         continue before it is broken, in seconds, between 0 and 60.
        :paramtype break_period: int
        :keyword lease_duration: Required for acquire. Specifies the duration of the lease, in seconds,
         or negative one (-1) for a lease that never expires.
        :paramtype lease_duration: int
        :keyword proposed_lease_id: Optional for acquire, required for change. Proposed lease ID, in a
         GUID string format.
        :paramtype proposed_lease_id: str
        """
        super(LeaseShareRequest, self).__init__(**kwargs)
        self.action = action
        self.lease_id = lease_id
        self.break_period = break_period
        self.lease_duration = lease_duration
        self.proposed_lease_id = proposed_lease_id


class LeaseShareResponse(msrest.serialization.Model):
    """Lease Share response schema.

    :ivar lease_id: Returned unique lease ID that must be included with any request to delete the
     share, or to renew, change, or release the lease.
    :vartype lease_id: str
    :ivar lease_time_seconds: Approximate time remaining in the lease period, in seconds.
    :vartype lease_time_seconds: str
    """

    _attribute_map = {
        'lease_id': {'key': 'leaseId', 'type': 'str'},
        'lease_time_seconds': {'key': 'leaseTimeSeconds', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        lease_id: Optional[str] = None,
        lease_time_seconds: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword lease_id: Returned unique lease ID that must be included with any request to delete
         the share, or to renew, change, or release the lease.
        :paramtype lease_id: str
        :keyword lease_time_seconds: Approximate time remaining in the lease period, in seconds.
        :paramtype lease_time_seconds: str
        """
        super(LeaseShareResponse, self).__init__(**kwargs)
        self.lease_id = lease_id
        self.lease_time_seconds = lease_time_seconds


class LegalHold(msrest.serialization.Model):
    """The LegalHold property of a blob container.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar has_legal_hold: The hasLegalHold public property is set to true by SRP if there are at
     least one existing tag. The hasLegalHold public property is set to false by SRP if all existing
     legal hold tags are cleared out. There can be a maximum of 1000 blob containers with
     hasLegalHold=true for a given account.
    :vartype has_legal_hold: bool
    :ivar tags: Required. A set of tags. Each tag should be 3 to 23 alphanumeric characters and is
     normalized to lower case at SRP.
    :vartype tags: list[str]
    """

    _validation = {
        'has_legal_hold': {'readonly': True},
        'tags': {'required': True},
    }

    _attribute_map = {
        'has_legal_hold': {'key': 'hasLegalHold', 'type': 'bool'},
        'tags': {'key': 'tags', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        tags: List[str],
        **kwargs
    ):
        """
        :keyword tags: Required. A set of tags. Each tag should be 3 to 23 alphanumeric characters and
         is normalized to lower case at SRP.
        :paramtype tags: list[str]
        """
        super(LegalHold, self).__init__(**kwargs)
        self.has_legal_hold = None
        self.tags = tags


class LegalHoldProperties(msrest.serialization.Model):
    """The LegalHold property of a blob container.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar has_legal_hold: The hasLegalHold public property is set to true by SRP if there are at
     least one existing tag. The hasLegalHold public property is set to false by SRP if all existing
     legal hold tags are cleared out. There can be a maximum of 1000 blob containers with
     hasLegalHold=true for a given account.
    :vartype has_legal_hold: bool
    :ivar tags: A set of tags. The list of LegalHold tags of a blob container.
    :vartype tags: list[~azure.mgmt.storage.v2021_04_01.models.TagProperty]
    """

    _validation = {
        'has_legal_hold': {'readonly': True},
    }

    _attribute_map = {
        'has_legal_hold': {'key': 'hasLegalHold', 'type': 'bool'},
        'tags': {'key': 'tags', 'type': '[TagProperty]'},
    }

    def __init__(
        self,
        *,
        tags: Optional[List["_models.TagProperty"]] = None,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. The list of LegalHold tags of a blob container.
        :paramtype tags: list[~azure.mgmt.storage.v2021_04_01.models.TagProperty]
        """
        super(LegalHoldProperties, self).__init__(**kwargs)
        self.has_legal_hold = None
        self.tags = tags


class ListAccountSasResponse(msrest.serialization.Model):
    """The List SAS credentials operation response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar account_sas_token: List SAS credentials of storage account.
    :vartype account_sas_token: str
    """

    _validation = {
        'account_sas_token': {'readonly': True},
    }

    _attribute_map = {
        'account_sas_token': {'key': 'accountSasToken', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ListAccountSasResponse, self).__init__(**kwargs)
        self.account_sas_token = None


class ListBlobInventoryPolicy(msrest.serialization.Model):
    """List of blob inventory policies returned.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of blob inventory policies.
    :vartype value: list[~azure.mgmt.storage.v2021_04_01.models.BlobInventoryPolicy]
    """

    _validation = {
        'value': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[BlobInventoryPolicy]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ListBlobInventoryPolicy, self).__init__(**kwargs)
        self.value = None


class ListContainerItem(AzureEntityResource):
    """The blob container properties be listed out.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar etag: Resource Etag.
    :vartype etag: str
    :ivar version: The version of the deleted blob container.
    :vartype version: str
    :ivar deleted: Indicates whether the blob container was deleted.
    :vartype deleted: bool
    :ivar deleted_time: Blob container deletion time.
    :vartype deleted_time: ~datetime.datetime
    :ivar remaining_retention_days: Remaining retention days for soft deleted blob container.
    :vartype remaining_retention_days: int
    :ivar default_encryption_scope: Default the container to use specified encryption scope for all
     writes.
    :vartype default_encryption_scope: str
    :ivar deny_encryption_scope_override: Block override of encryption scope from the container
     default.
    :vartype deny_encryption_scope_override: bool
    :ivar public_access: Specifies whether data in the container may be accessed publicly and the
     level of access. Known values are: "Container", "Blob", "None".
    :vartype public_access: str or ~azure.mgmt.storage.v2021_04_01.models.PublicAccess
    :ivar last_modified_time: Returns the date and time the container was last modified.
    :vartype last_modified_time: ~datetime.datetime
    :ivar lease_status: The lease status of the container. Known values are: "Locked", "Unlocked".
    :vartype lease_status: str or ~azure.mgmt.storage.v2021_04_01.models.LeaseStatus
    :ivar lease_state: Lease state of the container. Known values are: "Available", "Leased",
     "Expired", "Breaking", "Broken".
    :vartype lease_state: str or ~azure.mgmt.storage.v2021_04_01.models.LeaseState
    :ivar lease_duration: Specifies whether the lease on a container is of infinite or fixed
     duration, only when the container is leased. Known values are: "Infinite", "Fixed".
    :vartype lease_duration: str or ~azure.mgmt.storage.v2021_04_01.models.LeaseDuration
    :ivar metadata: A name-value pair to associate with the container as metadata.
    :vartype metadata: dict[str, str]
    :ivar immutability_policy: The ImmutabilityPolicy property of the container.
    :vartype immutability_policy:
     ~azure.mgmt.storage.v2021_04_01.models.ImmutabilityPolicyProperties
    :ivar legal_hold: The LegalHold property of the container.
    :vartype legal_hold: ~azure.mgmt.storage.v2021_04_01.models.LegalHoldProperties
    :ivar has_legal_hold: The hasLegalHold public property is set to true by SRP if there are at
     least one existing tag. The hasLegalHold public property is set to false by SRP if all existing
     legal hold tags are cleared out. There can be a maximum of 1000 blob containers with
     hasLegalHold=true for a given account.
    :vartype has_legal_hold: bool
    :ivar has_immutability_policy: The hasImmutabilityPolicy public property is set to true by SRP
     if ImmutabilityPolicy has been created for this container. The hasImmutabilityPolicy public
     property is set to false by SRP if ImmutabilityPolicy has not been created for this container.
    :vartype has_immutability_policy: bool
    :ivar immutable_storage_with_versioning: The object level immutability property of the
     container. The property is immutable and can only be set to true at the container creation
     time. Existing containers must undergo a migration process.
    :vartype immutable_storage_with_versioning:
     ~azure.mgmt.storage.v2021_04_01.models.ImmutableStorageWithVersioning
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'version': {'readonly': True},
        'deleted': {'readonly': True},
        'deleted_time': {'readonly': True},
        'remaining_retention_days': {'readonly': True},
        'last_modified_time': {'readonly': True},
        'lease_status': {'readonly': True},
        'lease_state': {'readonly': True},
        'lease_duration': {'readonly': True},
        'immutability_policy': {'readonly': True},
        'legal_hold': {'readonly': True},
        'has_legal_hold': {'readonly': True},
        'has_immutability_policy': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'version': {'key': 'properties.version', 'type': 'str'},
        'deleted': {'key': 'properties.deleted', 'type': 'bool'},
        'deleted_time': {'key': 'properties.deletedTime', 'type': 'iso-8601'},
        'remaining_retention_days': {'key': 'properties.remainingRetentionDays', 'type': 'int'},
        'default_encryption_scope': {'key': 'properties.defaultEncryptionScope', 'type': 'str'},
        'deny_encryption_scope_override': {'key': 'properties.denyEncryptionScopeOverride', 'type': 'bool'},
        'public_access': {'key': 'properties.publicAccess', 'type': 'str'},
        'last_modified_time': {'key': 'properties.lastModifiedTime', 'type': 'iso-8601'},
        'lease_status': {'key': 'properties.leaseStatus', 'type': 'str'},
        'lease_state': {'key': 'properties.leaseState', 'type': 'str'},
        'lease_duration': {'key': 'properties.leaseDuration', 'type': 'str'},
        'metadata': {'key': 'properties.metadata', 'type': '{str}'},
        'immutability_policy': {'key': 'properties.immutabilityPolicy', 'type': 'ImmutabilityPolicyProperties'},
        'legal_hold': {'key': 'properties.legalHold', 'type': 'LegalHoldProperties'},
        'has_legal_hold': {'key': 'properties.hasLegalHold', 'type': 'bool'},
        'has_immutability_policy': {'key': 'properties.hasImmutabilityPolicy', 'type': 'bool'},
        'immutable_storage_with_versioning': {'key': 'properties.immutableStorageWithVersioning', 'type': 'ImmutableStorageWithVersioning'},
    }

    def __init__(
        self,
        *,
        default_encryption_scope: Optional[str] = None,
        deny_encryption_scope_override: Optional[bool] = None,
        public_access: Optional[Union[str, "_models.PublicAccess"]] = None,
        metadata: Optional[Dict[str, str]] = None,
        immutable_storage_with_versioning: Optional["_models.ImmutableStorageWithVersioning"] = None,
        **kwargs
    ):
        """
        :keyword default_encryption_scope: Default the container to use specified encryption scope for
         all writes.
        :paramtype default_encryption_scope: str
        :keyword deny_encryption_scope_override: Block override of encryption scope from the container
         default.
        :paramtype deny_encryption_scope_override: bool
        :keyword public_access: Specifies whether data in the container may be accessed publicly and
         the level of access. Known values are: "Container", "Blob", "None".
        :paramtype public_access: str or ~azure.mgmt.storage.v2021_04_01.models.PublicAccess
        :keyword metadata: A name-value pair to associate with the container as metadata.
        :paramtype metadata: dict[str, str]
        :keyword immutable_storage_with_versioning: The object level immutability property of the
         container. The property is immutable and can only be set to true at the container creation
         time. Existing containers must undergo a migration process.
        :paramtype immutable_storage_with_versioning:
         ~azure.mgmt.storage.v2021_04_01.models.ImmutableStorageWithVersioning
        """
        super(ListContainerItem, self).__init__(**kwargs)
        self.version = None
        self.deleted = None
        self.deleted_time = None
        self.remaining_retention_days = None
        self.default_encryption_scope = default_encryption_scope
        self.deny_encryption_scope_override = deny_encryption_scope_override
        self.public_access = public_access
        self.last_modified_time = None
        self.lease_status = None
        self.lease_state = None
        self.lease_duration = None
        self.metadata = metadata
        self.immutability_policy = None
        self.legal_hold = None
        self.has_legal_hold = None
        self.has_immutability_policy = None
        self.immutable_storage_with_versioning = immutable_storage_with_versioning


class ListContainerItems(msrest.serialization.Model):
    """Response schema. Contains list of blobs returned, and if paging is requested or required, a URL to next page of containers.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of blobs containers returned.
    :vartype value: list[~azure.mgmt.storage.v2021_04_01.models.ListContainerItem]
    :ivar next_link: Request URL that can be used to query next page of containers. Returned when
     total number of requested containers exceed maximum page size.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ListContainerItem]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ListContainerItems, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class ListQueue(Resource):
    """ListQueue.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar metadata: A name-value pair that represents queue metadata.
    :vartype metadata: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'metadata': {'key': 'properties.metadata', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        metadata: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword metadata: A name-value pair that represents queue metadata.
        :paramtype metadata: dict[str, str]
        """
        super(ListQueue, self).__init__(**kwargs)
        self.metadata = metadata


class ListQueueResource(msrest.serialization.Model):
    """Response schema. Contains list of queues returned.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of queues returned.
    :vartype value: list[~azure.mgmt.storage.v2021_04_01.models.ListQueue]
    :ivar next_link: Request URL that can be used to list next page of queues.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ListQueue]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ListQueueResource, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class ListQueueServices(msrest.serialization.Model):
    """ListQueueServices.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of queue services returned.
    :vartype value: list[~azure.mgmt.storage.v2021_04_01.models.QueueServiceProperties]
    """

    _validation = {
        'value': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[QueueServiceProperties]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ListQueueServices, self).__init__(**kwargs)
        self.value = None


class ListServiceSasResponse(msrest.serialization.Model):
    """The List service SAS credentials operation response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar service_sas_token: List service SAS credentials of specific resource.
    :vartype service_sas_token: str
    """

    _validation = {
        'service_sas_token': {'readonly': True},
    }

    _attribute_map = {
        'service_sas_token': {'key': 'serviceSasToken', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ListServiceSasResponse, self).__init__(**kwargs)
        self.service_sas_token = None


class ListTableResource(msrest.serialization.Model):
    """Response schema. Contains list of tables returned.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of tables returned.
    :vartype value: list[~azure.mgmt.storage.v2021_04_01.models.Table]
    :ivar next_link: Request URL that can be used to query next page of tables.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Table]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ListTableResource, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class ListTableServices(msrest.serialization.Model):
    """ListTableServices.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of table services returned.
    :vartype value: list[~azure.mgmt.storage.v2021_04_01.models.TableServiceProperties]
    """

    _validation = {
        'value': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[TableServiceProperties]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ListTableServices, self).__init__(**kwargs)
        self.value = None


class ManagementPolicy(Resource):
    """The Get Storage Account ManagementPolicies operation response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar last_modified_time: Returns the date and time the ManagementPolicies was last modified.
    :vartype last_modified_time: ~datetime.datetime
    :ivar policy: The Storage Account ManagementPolicy, in JSON format. See more details in:
     https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
    :vartype policy: ~azure.mgmt.storage.v2021_04_01.models.ManagementPolicySchema
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'last_modified_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'last_modified_time': {'key': 'properties.lastModifiedTime', 'type': 'iso-8601'},
        'policy': {'key': 'properties.policy', 'type': 'ManagementPolicySchema'},
    }

    def __init__(
        self,
        *,
        policy: Optional["_models.ManagementPolicySchema"] = None,
        **kwargs
    ):
        """
        :keyword policy: The Storage Account ManagementPolicy, in JSON format. See more details in:
         https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
        :paramtype policy: ~azure.mgmt.storage.v2021_04_01.models.ManagementPolicySchema
        """
        super(ManagementPolicy, self).__init__(**kwargs)
        self.last_modified_time = None
        self.policy = policy


class ManagementPolicyAction(msrest.serialization.Model):
    """Actions are applied to the filtered blobs when the execution condition is met.

    :ivar base_blob: The management policy action for base blob.
    :vartype base_blob: ~azure.mgmt.storage.v2021_04_01.models.ManagementPolicyBaseBlob
    :ivar snapshot: The management policy action for snapshot.
    :vartype snapshot: ~azure.mgmt.storage.v2021_04_01.models.ManagementPolicySnapShot
    :ivar version: The management policy action for version.
    :vartype version: ~azure.mgmt.storage.v2021_04_01.models.ManagementPolicyVersion
    """

    _attribute_map = {
        'base_blob': {'key': 'baseBlob', 'type': 'ManagementPolicyBaseBlob'},
        'snapshot': {'key': 'snapshot', 'type': 'ManagementPolicySnapShot'},
        'version': {'key': 'version', 'type': 'ManagementPolicyVersion'},
    }

    def __init__(
        self,
        *,
        base_blob: Optional["_models.ManagementPolicyBaseBlob"] = None,
        snapshot: Optional["_models.ManagementPolicySnapShot"] = None,
        version: Optional["_models.ManagementPolicyVersion"] = None,
        **kwargs
    ):
        """
        :keyword base_blob: The management policy action for base blob.
        :paramtype base_blob: ~azure.mgmt.storage.v2021_04_01.models.ManagementPolicyBaseBlob
        :keyword snapshot: The management policy action for snapshot.
        :paramtype snapshot: ~azure.mgmt.storage.v2021_04_01.models.ManagementPolicySnapShot
        :keyword version: The management policy action for version.
        :paramtype version: ~azure.mgmt.storage.v2021_04_01.models.ManagementPolicyVersion
        """
        super(ManagementPolicyAction, self).__init__(**kwargs)
        self.base_blob = base_blob
        self.snapshot = snapshot
        self.version = version


class ManagementPolicyBaseBlob(msrest.serialization.Model):
    """Management policy action for base blob.

    :ivar tier_to_cool: The function to tier blobs to cool storage. Support blobs currently at Hot
     tier.
    :vartype tier_to_cool: ~azure.mgmt.storage.v2021_04_01.models.DateAfterModification
    :ivar tier_to_archive: The function to tier blobs to archive storage. Support blobs currently
     at Hot or Cool tier.
    :vartype tier_to_archive: ~azure.mgmt.storage.v2021_04_01.models.DateAfterModification
    :ivar delete: The function to delete the blob.
    :vartype delete: ~azure.mgmt.storage.v2021_04_01.models.DateAfterModification
    :ivar enable_auto_tier_to_hot_from_cool: This property enables auto tiering of a blob from cool
     to hot on a blob access. This property requires tierToCool.daysAfterLastAccessTimeGreaterThan.
    :vartype enable_auto_tier_to_hot_from_cool: bool
    """

    _attribute_map = {
        'tier_to_cool': {'key': 'tierToCool', 'type': 'DateAfterModification'},
        'tier_to_archive': {'key': 'tierToArchive', 'type': 'DateAfterModification'},
        'delete': {'key': 'delete', 'type': 'DateAfterModification'},
        'enable_auto_tier_to_hot_from_cool': {'key': 'enableAutoTierToHotFromCool', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        tier_to_cool: Optional["_models.DateAfterModification"] = None,
        tier_to_archive: Optional["_models.DateAfterModification"] = None,
        delete: Optional["_models.DateAfterModification"] = None,
        enable_auto_tier_to_hot_from_cool: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword tier_to_cool: The function to tier blobs to cool storage. Support blobs currently at
         Hot tier.
        :paramtype tier_to_cool: ~azure.mgmt.storage.v2021_04_01.models.DateAfterModification
        :keyword tier_to_archive: The function to tier blobs to archive storage. Support blobs
         currently at Hot or Cool tier.
        :paramtype tier_to_archive: ~azure.mgmt.storage.v2021_04_01.models.DateAfterModification
        :keyword delete: The function to delete the blob.
        :paramtype delete: ~azure.mgmt.storage.v2021_04_01.models.DateAfterModification
        :keyword enable_auto_tier_to_hot_from_cool: This property enables auto tiering of a blob from
         cool to hot on a blob access. This property requires
         tierToCool.daysAfterLastAccessTimeGreaterThan.
        :paramtype enable_auto_tier_to_hot_from_cool: bool
        """
        super(ManagementPolicyBaseBlob, self).__init__(**kwargs)
        self.tier_to_cool = tier_to_cool
        self.tier_to_archive = tier_to_archive
        self.delete = delete
        self.enable_auto_tier_to_hot_from_cool = enable_auto_tier_to_hot_from_cool


class ManagementPolicyDefinition(msrest.serialization.Model):
    """An object that defines the Lifecycle rule. Each definition is made up with a filters set and an actions set.

    All required parameters must be populated in order to send to Azure.

    :ivar actions: Required. An object that defines the action set.
    :vartype actions: ~azure.mgmt.storage.v2021_04_01.models.ManagementPolicyAction
    :ivar filters: An object that defines the filter set.
    :vartype filters: ~azure.mgmt.storage.v2021_04_01.models.ManagementPolicyFilter
    """

    _validation = {
        'actions': {'required': True},
    }

    _attribute_map = {
        'actions': {'key': 'actions', 'type': 'ManagementPolicyAction'},
        'filters': {'key': 'filters', 'type': 'ManagementPolicyFilter'},
    }

    def __init__(
        self,
        *,
        actions: "_models.ManagementPolicyAction",
        filters: Optional["_models.ManagementPolicyFilter"] = None,
        **kwargs
    ):
        """
        :keyword actions: Required. An object that defines the action set.
        :paramtype actions: ~azure.mgmt.storage.v2021_04_01.models.ManagementPolicyAction
        :keyword filters: An object that defines the filter set.
        :paramtype filters: ~azure.mgmt.storage.v2021_04_01.models.ManagementPolicyFilter
        """
        super(ManagementPolicyDefinition, self).__init__(**kwargs)
        self.actions = actions
        self.filters = filters


class ManagementPolicyFilter(msrest.serialization.Model):
    """Filters limit rule actions to a subset of blobs within the storage account. If multiple filters are defined, a logical AND is performed on all filters.

    All required parameters must be populated in order to send to Azure.

    :ivar prefix_match: An array of strings for prefixes to be match.
    :vartype prefix_match: list[str]
    :ivar blob_types: Required. An array of predefined enum values. Currently blockBlob supports
     all tiering and delete actions. Only delete actions are supported for appendBlob.
    :vartype blob_types: list[str]
    :ivar blob_index_match: An array of blob index tag based filters, there can be at most 10 tag
     filters.
    :vartype blob_index_match: list[~azure.mgmt.storage.v2021_04_01.models.TagFilter]
    """

    _validation = {
        'blob_types': {'required': True},
    }

    _attribute_map = {
        'prefix_match': {'key': 'prefixMatch', 'type': '[str]'},
        'blob_types': {'key': 'blobTypes', 'type': '[str]'},
        'blob_index_match': {'key': 'blobIndexMatch', 'type': '[TagFilter]'},
    }

    def __init__(
        self,
        *,
        blob_types: List[str],
        prefix_match: Optional[List[str]] = None,
        blob_index_match: Optional[List["_models.TagFilter"]] = None,
        **kwargs
    ):
        """
        :keyword prefix_match: An array of strings for prefixes to be match.
        :paramtype prefix_match: list[str]
        :keyword blob_types: Required. An array of predefined enum values. Currently blockBlob supports
         all tiering and delete actions. Only delete actions are supported for appendBlob.
        :paramtype blob_types: list[str]
        :keyword blob_index_match: An array of blob index tag based filters, there can be at most 10
         tag filters.
        :paramtype blob_index_match: list[~azure.mgmt.storage.v2021_04_01.models.TagFilter]
        """
        super(ManagementPolicyFilter, self).__init__(**kwargs)
        self.prefix_match = prefix_match
        self.blob_types = blob_types
        self.blob_index_match = blob_index_match


class ManagementPolicyRule(msrest.serialization.Model):
    """An object that wraps the Lifecycle rule. Each rule is uniquely defined by name.

    All required parameters must be populated in order to send to Azure.

    :ivar enabled: Rule is enabled if set to true.
    :vartype enabled: bool
    :ivar name: Required. A rule name can contain any combination of alpha numeric characters. Rule
     name is case-sensitive. It must be unique within a policy.
    :vartype name: str
    :ivar type: Required. The valid value is Lifecycle. Known values are: "Lifecycle".
    :vartype type: str or ~azure.mgmt.storage.v2021_04_01.models.RuleType
    :ivar definition: Required. An object that defines the Lifecycle rule.
    :vartype definition: ~azure.mgmt.storage.v2021_04_01.models.ManagementPolicyDefinition
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'definition': {'required': True},
    }

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'definition': {'key': 'definition', 'type': 'ManagementPolicyDefinition'},
    }

    def __init__(
        self,
        *,
        name: str,
        type: Union[str, "_models.RuleType"],
        definition: "_models.ManagementPolicyDefinition",
        enabled: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword enabled: Rule is enabled if set to true.
        :paramtype enabled: bool
        :keyword name: Required. A rule name can contain any combination of alpha numeric characters.
         Rule name is case-sensitive. It must be unique within a policy.
        :paramtype name: str
        :keyword type: Required. The valid value is Lifecycle. Known values are: "Lifecycle".
        :paramtype type: str or ~azure.mgmt.storage.v2021_04_01.models.RuleType
        :keyword definition: Required. An object that defines the Lifecycle rule.
        :paramtype definition: ~azure.mgmt.storage.v2021_04_01.models.ManagementPolicyDefinition
        """
        super(ManagementPolicyRule, self).__init__(**kwargs)
        self.enabled = enabled
        self.name = name
        self.type = type
        self.definition = definition


class ManagementPolicySchema(msrest.serialization.Model):
    """The Storage Account ManagementPolicies Rules. See more details in: https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.

    All required parameters must be populated in order to send to Azure.

    :ivar rules: Required. The Storage Account ManagementPolicies Rules. See more details in:
     https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
    :vartype rules: list[~azure.mgmt.storage.v2021_04_01.models.ManagementPolicyRule]
    """

    _validation = {
        'rules': {'required': True},
    }

    _attribute_map = {
        'rules': {'key': 'rules', 'type': '[ManagementPolicyRule]'},
    }

    def __init__(
        self,
        *,
        rules: List["_models.ManagementPolicyRule"],
        **kwargs
    ):
        """
        :keyword rules: Required. The Storage Account ManagementPolicies Rules. See more details in:
         https://docs.microsoft.com/en-us/azure/storage/common/storage-lifecycle-managment-concepts.
        :paramtype rules: list[~azure.mgmt.storage.v2021_04_01.models.ManagementPolicyRule]
        """
        super(ManagementPolicySchema, self).__init__(**kwargs)
        self.rules = rules


class ManagementPolicySnapShot(msrest.serialization.Model):
    """Management policy action for snapshot.

    :ivar tier_to_cool: The function to tier blob snapshot to cool storage. Support blob snapshot
     currently at Hot tier.
    :vartype tier_to_cool: ~azure.mgmt.storage.v2021_04_01.models.DateAfterCreation
    :ivar tier_to_archive: The function to tier blob snapshot to archive storage. Support blob
     snapshot currently at Hot or Cool tier.
    :vartype tier_to_archive: ~azure.mgmt.storage.v2021_04_01.models.DateAfterCreation
    :ivar delete: The function to delete the blob snapshot.
    :vartype delete: ~azure.mgmt.storage.v2021_04_01.models.DateAfterCreation
    """

    _attribute_map = {
        'tier_to_cool': {'key': 'tierToCool', 'type': 'DateAfterCreation'},
        'tier_to_archive': {'key': 'tierToArchive', 'type': 'DateAfterCreation'},
        'delete': {'key': 'delete', 'type': 'DateAfterCreation'},
    }

    def __init__(
        self,
        *,
        tier_to_cool: Optional["_models.DateAfterCreation"] = None,
        tier_to_archive: Optional["_models.DateAfterCreation"] = None,
        delete: Optional["_models.DateAfterCreation"] = None,
        **kwargs
    ):
        """
        :keyword tier_to_cool: The function to tier blob snapshot to cool storage. Support blob
         snapshot currently at Hot tier.
        :paramtype tier_to_cool: ~azure.mgmt.storage.v2021_04_01.models.DateAfterCreation
        :keyword tier_to_archive: The function to tier blob snapshot to archive storage. Support blob
         snapshot currently at Hot or Cool tier.
        :paramtype tier_to_archive: ~azure.mgmt.storage.v2021_04_01.models.DateAfterCreation
        :keyword delete: The function to delete the blob snapshot.
        :paramtype delete: ~azure.mgmt.storage.v2021_04_01.models.DateAfterCreation
        """
        super(ManagementPolicySnapShot, self).__init__(**kwargs)
        self.tier_to_cool = tier_to_cool
        self.tier_to_archive = tier_to_archive
        self.delete = delete


class ManagementPolicyVersion(msrest.serialization.Model):
    """Management policy action for blob version.

    :ivar tier_to_cool: The function to tier blob version to cool storage. Support blob version
     currently at Hot tier.
    :vartype tier_to_cool: ~azure.mgmt.storage.v2021_04_01.models.DateAfterCreation
    :ivar tier_to_archive: The function to tier blob version to archive storage. Support blob
     version currently at Hot or Cool tier.
    :vartype tier_to_archive: ~azure.mgmt.storage.v2021_04_01.models.DateAfterCreation
    :ivar delete: The function to delete the blob version.
    :vartype delete: ~azure.mgmt.storage.v2021_04_01.models.DateAfterCreation
    """

    _attribute_map = {
        'tier_to_cool': {'key': 'tierToCool', 'type': 'DateAfterCreation'},
        'tier_to_archive': {'key': 'tierToArchive', 'type': 'DateAfterCreation'},
        'delete': {'key': 'delete', 'type': 'DateAfterCreation'},
    }

    def __init__(
        self,
        *,
        tier_to_cool: Optional["_models.DateAfterCreation"] = None,
        tier_to_archive: Optional["_models.DateAfterCreation"] = None,
        delete: Optional["_models.DateAfterCreation"] = None,
        **kwargs
    ):
        """
        :keyword tier_to_cool: The function to tier blob version to cool storage. Support blob version
         currently at Hot tier.
        :paramtype tier_to_cool: ~azure.mgmt.storage.v2021_04_01.models.DateAfterCreation
        :keyword tier_to_archive: The function to tier blob version to archive storage. Support blob
         version currently at Hot or Cool tier.
        :paramtype tier_to_archive: ~azure.mgmt.storage.v2021_04_01.models.DateAfterCreation
        :keyword delete: The function to delete the blob version.
        :paramtype delete: ~azure.mgmt.storage.v2021_04_01.models.DateAfterCreation
        """
        super(ManagementPolicyVersion, self).__init__(**kwargs)
        self.tier_to_cool = tier_to_cool
        self.tier_to_archive = tier_to_archive
        self.delete = delete


class MetricSpecification(msrest.serialization.Model):
    """Metric specification of operation.

    :ivar name: Name of metric specification.
    :vartype name: str
    :ivar display_name: Display name of metric specification.
    :vartype display_name: str
    :ivar display_description: Display description of metric specification.
    :vartype display_description: str
    :ivar unit: Unit could be Bytes or Count.
    :vartype unit: str
    :ivar dimensions: Dimensions of blobs, including blob type and access tier.
    :vartype dimensions: list[~azure.mgmt.storage.v2021_04_01.models.Dimension]
    :ivar aggregation_type: Aggregation type could be Average.
    :vartype aggregation_type: str
    :ivar fill_gap_with_zero: The property to decide fill gap with zero or not.
    :vartype fill_gap_with_zero: bool
    :ivar category: The category this metric specification belong to, could be Capacity.
    :vartype category: str
    :ivar resource_id_dimension_name_override: Account Resource Id.
    :vartype resource_id_dimension_name_override: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'display_description': {'key': 'displayDescription', 'type': 'str'},
        'unit': {'key': 'unit', 'type': 'str'},
        'dimensions': {'key': 'dimensions', 'type': '[Dimension]'},
        'aggregation_type': {'key': 'aggregationType', 'type': 'str'},
        'fill_gap_with_zero': {'key': 'fillGapWithZero', 'type': 'bool'},
        'category': {'key': 'category', 'type': 'str'},
        'resource_id_dimension_name_override': {'key': 'resourceIdDimensionNameOverride', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        display_description: Optional[str] = None,
        unit: Optional[str] = None,
        dimensions: Optional[List["_models.Dimension"]] = None,
        aggregation_type: Optional[str] = None,
        fill_gap_with_zero: Optional[bool] = None,
        category: Optional[str] = None,
        resource_id_dimension_name_override: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword name: Name of metric specification.
        :paramtype name: str
        :keyword display_name: Display name of metric specification.
        :paramtype display_name: str
        :keyword display_description: Display description of metric specification.
        :paramtype display_description: str
        :keyword unit: Unit could be Bytes or Count.
        :paramtype unit: str
        :keyword dimensions: Dimensions of blobs, including blob type and access tier.
        :paramtype dimensions: list[~azure.mgmt.storage.v2021_04_01.models.Dimension]
        :keyword aggregation_type: Aggregation type could be Average.
        :paramtype aggregation_type: str
        :keyword fill_gap_with_zero: The property to decide fill gap with zero or not.
        :paramtype fill_gap_with_zero: bool
        :keyword category: The category this metric specification belong to, could be Capacity.
        :paramtype category: str
        :keyword resource_id_dimension_name_override: Account Resource Id.
        :paramtype resource_id_dimension_name_override: str
        """
        super(MetricSpecification, self).__init__(**kwargs)
        self.name = name
        self.display_name = display_name
        self.display_description = display_description
        self.unit = unit
        self.dimensions = dimensions
        self.aggregation_type = aggregation_type
        self.fill_gap_with_zero = fill_gap_with_zero
        self.category = category
        self.resource_id_dimension_name_override = resource_id_dimension_name_override


class Multichannel(msrest.serialization.Model):
    """Multichannel setting. Applies to Premium FileStorage only.

    :ivar enabled: Indicates whether multichannel is enabled.
    :vartype enabled: bool
    """

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword enabled: Indicates whether multichannel is enabled.
        :paramtype enabled: bool
        """
        super(Multichannel, self).__init__(**kwargs)
        self.enabled = enabled


class NetworkRuleSet(msrest.serialization.Model):
    """Network rule set.

    All required parameters must be populated in order to send to Azure.

    :ivar bypass: Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible
     values are any combination of Logging|Metrics|AzureServices (For example, "Logging, Metrics"),
     or None to bypass none of those traffics. Known values are: "None", "Logging", "Metrics",
     "AzureServices". Default value: "AzureServices".
    :vartype bypass: str or ~azure.mgmt.storage.v2021_04_01.models.Bypass
    :ivar resource_access_rules: Sets the resource access rules.
    :vartype resource_access_rules: list[~azure.mgmt.storage.v2021_04_01.models.ResourceAccessRule]
    :ivar virtual_network_rules: Sets the virtual network rules.
    :vartype virtual_network_rules: list[~azure.mgmt.storage.v2021_04_01.models.VirtualNetworkRule]
    :ivar ip_rules: Sets the IP ACL rules.
    :vartype ip_rules: list[~azure.mgmt.storage.v2021_04_01.models.IPRule]
    :ivar default_action: Required. Specifies the default action of allow or deny when no other
     rules match. Known values are: "Allow", "Deny". Default value: "Allow".
    :vartype default_action: str or ~azure.mgmt.storage.v2021_04_01.models.DefaultAction
    """

    _validation = {
        'default_action': {'required': True},
    }

    _attribute_map = {
        'bypass': {'key': 'bypass', 'type': 'str'},
        'resource_access_rules': {'key': 'resourceAccessRules', 'type': '[ResourceAccessRule]'},
        'virtual_network_rules': {'key': 'virtualNetworkRules', 'type': '[VirtualNetworkRule]'},
        'ip_rules': {'key': 'ipRules', 'type': '[IPRule]'},
        'default_action': {'key': 'defaultAction', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        default_action: Union[str, "_models.DefaultAction"] = "Allow",
        bypass: Optional[Union[str, "_models.Bypass"]] = "AzureServices",
        resource_access_rules: Optional[List["_models.ResourceAccessRule"]] = None,
        virtual_network_rules: Optional[List["_models.VirtualNetworkRule"]] = None,
        ip_rules: Optional[List["_models.IPRule"]] = None,
        **kwargs
    ):
        """
        :keyword bypass: Specifies whether traffic is bypassed for Logging/Metrics/AzureServices.
         Possible values are any combination of Logging|Metrics|AzureServices (For example, "Logging,
         Metrics"), or None to bypass none of those traffics. Known values are: "None", "Logging",
         "Metrics", "AzureServices". Default value: "AzureServices".
        :paramtype bypass: str or ~azure.mgmt.storage.v2021_04_01.models.Bypass
        :keyword resource_access_rules: Sets the resource access rules.
        :paramtype resource_access_rules:
         list[~azure.mgmt.storage.v2021_04_01.models.ResourceAccessRule]
        :keyword virtual_network_rules: Sets the virtual network rules.
        :paramtype virtual_network_rules:
         list[~azure.mgmt.storage.v2021_04_01.models.VirtualNetworkRule]
        :keyword ip_rules: Sets the IP ACL rules.
        :paramtype ip_rules: list[~azure.mgmt.storage.v2021_04_01.models.IPRule]
        :keyword default_action: Required. Specifies the default action of allow or deny when no other
         rules match. Known values are: "Allow", "Deny". Default value: "Allow".
        :paramtype default_action: str or ~azure.mgmt.storage.v2021_04_01.models.DefaultAction
        """
        super(NetworkRuleSet, self).__init__(**kwargs)
        self.bypass = bypass
        self.resource_access_rules = resource_access_rules
        self.virtual_network_rules = virtual_network_rules
        self.ip_rules = ip_rules
        self.default_action = default_action


class ObjectReplicationPolicies(msrest.serialization.Model):
    """List storage account object replication policies.

    :ivar value: The replication policy between two storage accounts.
    :vartype value: list[~azure.mgmt.storage.v2021_04_01.models.ObjectReplicationPolicy]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ObjectReplicationPolicy]'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.ObjectReplicationPolicy"]] = None,
        **kwargs
    ):
        """
        :keyword value: The replication policy between two storage accounts.
        :paramtype value: list[~azure.mgmt.storage.v2021_04_01.models.ObjectReplicationPolicy]
        """
        super(ObjectReplicationPolicies, self).__init__(**kwargs)
        self.value = value


class ObjectReplicationPolicy(Resource):
    """The replication policy between two storage accounts. Multiple rules can be defined in one policy.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar policy_id: A unique id for object replication policy.
    :vartype policy_id: str
    :ivar enabled_time: Indicates when the policy is enabled on the source account.
    :vartype enabled_time: ~datetime.datetime
    :ivar source_account: Required. Source account name. It should be full resource id if
     allowCrossTenantReplication set to false.
    :vartype source_account: str
    :ivar destination_account: Required. Destination account name. It should be full resource id if
     allowCrossTenantReplication set to false.
    :vartype destination_account: str
    :ivar rules: The storage account object replication rules.
    :vartype rules: list[~azure.mgmt.storage.v2021_04_01.models.ObjectReplicationPolicyRule]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'policy_id': {'readonly': True},
        'enabled_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'policy_id': {'key': 'properties.policyId', 'type': 'str'},
        'enabled_time': {'key': 'properties.enabledTime', 'type': 'iso-8601'},
        'source_account': {'key': 'properties.sourceAccount', 'type': 'str'},
        'destination_account': {'key': 'properties.destinationAccount', 'type': 'str'},
        'rules': {'key': 'properties.rules', 'type': '[ObjectReplicationPolicyRule]'},
    }

    def __init__(
        self,
        *,
        source_account: Optional[str] = None,
        destination_account: Optional[str] = None,
        rules: Optional[List["_models.ObjectReplicationPolicyRule"]] = None,
        **kwargs
    ):
        """
        :keyword source_account: Required. Source account name. It should be full resource id if
         allowCrossTenantReplication set to false.
        :paramtype source_account: str
        :keyword destination_account: Required. Destination account name. It should be full resource id
         if allowCrossTenantReplication set to false.
        :paramtype destination_account: str
        :keyword rules: The storage account object replication rules.
        :paramtype rules: list[~azure.mgmt.storage.v2021_04_01.models.ObjectReplicationPolicyRule]
        """
        super(ObjectReplicationPolicy, self).__init__(**kwargs)
        self.policy_id = None
        self.enabled_time = None
        self.source_account = source_account
        self.destination_account = destination_account
        self.rules = rules


class ObjectReplicationPolicyFilter(msrest.serialization.Model):
    """Filters limit replication to a subset of blobs within the storage account. A logical OR is performed on values in the filter. If multiple filters are defined, a logical AND is performed on all filters.

    :ivar prefix_match: Optional. Filters the results to replicate only blobs whose names begin
     with the specified prefix.
    :vartype prefix_match: list[str]
    :ivar min_creation_time: Blobs created after the time will be replicated to the destination. It
     must be in datetime format 'yyyy-MM-ddTHH:mm:ssZ'. Example: 2020-02-19T16:05:00Z.
    :vartype min_creation_time: str
    """

    _attribute_map = {
        'prefix_match': {'key': 'prefixMatch', 'type': '[str]'},
        'min_creation_time': {'key': 'minCreationTime', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        prefix_match: Optional[List[str]] = None,
        min_creation_time: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword prefix_match: Optional. Filters the results to replicate only blobs whose names begin
         with the specified prefix.
        :paramtype prefix_match: list[str]
        :keyword min_creation_time: Blobs created after the time will be replicated to the destination.
         It must be in datetime format 'yyyy-MM-ddTHH:mm:ssZ'. Example: 2020-02-19T16:05:00Z.
        :paramtype min_creation_time: str
        """
        super(ObjectReplicationPolicyFilter, self).__init__(**kwargs)
        self.prefix_match = prefix_match
        self.min_creation_time = min_creation_time


class ObjectReplicationPolicyRule(msrest.serialization.Model):
    """The replication policy rule between two containers.

    All required parameters must be populated in order to send to Azure.

    :ivar rule_id: Rule Id is auto-generated for each new rule on destination account. It is
     required for put policy on source account.
    :vartype rule_id: str
    :ivar source_container: Required. Required. Source container name.
    :vartype source_container: str
    :ivar destination_container: Required. Required. Destination container name.
    :vartype destination_container: str
    :ivar filters: Optional. An object that defines the filter set.
    :vartype filters: ~azure.mgmt.storage.v2021_04_01.models.ObjectReplicationPolicyFilter
    """

    _validation = {
        'source_container': {'required': True},
        'destination_container': {'required': True},
    }

    _attribute_map = {
        'rule_id': {'key': 'ruleId', 'type': 'str'},
        'source_container': {'key': 'sourceContainer', 'type': 'str'},
        'destination_container': {'key': 'destinationContainer', 'type': 'str'},
        'filters': {'key': 'filters', 'type': 'ObjectReplicationPolicyFilter'},
    }

    def __init__(
        self,
        *,
        source_container: str,
        destination_container: str,
        rule_id: Optional[str] = None,
        filters: Optional["_models.ObjectReplicationPolicyFilter"] = None,
        **kwargs
    ):
        """
        :keyword rule_id: Rule Id is auto-generated for each new rule on destination account. It is
         required for put policy on source account.
        :paramtype rule_id: str
        :keyword source_container: Required. Required. Source container name.
        :paramtype source_container: str
        :keyword destination_container: Required. Required. Destination container name.
        :paramtype destination_container: str
        :keyword filters: Optional. An object that defines the filter set.
        :paramtype filters: ~azure.mgmt.storage.v2021_04_01.models.ObjectReplicationPolicyFilter
        """
        super(ObjectReplicationPolicyRule, self).__init__(**kwargs)
        self.rule_id = rule_id
        self.source_container = source_container
        self.destination_container = destination_container
        self.filters = filters


class Operation(msrest.serialization.Model):
    """Storage REST API operation definition.

    :ivar name: Operation name: {provider}/{resource}/{operation}.
    :vartype name: str
    :ivar display: Display metadata associated with the operation.
    :vartype display: ~azure.mgmt.storage.v2021_04_01.models.OperationDisplay
    :ivar origin: The origin of operations.
    :vartype origin: str
    :ivar service_specification: One property of operation, include metric specifications.
    :vartype service_specification: ~azure.mgmt.storage.v2021_04_01.models.ServiceSpecification
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
        'service_specification': {'key': 'properties.serviceSpecification', 'type': 'ServiceSpecification'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        display: Optional["_models.OperationDisplay"] = None,
        origin: Optional[str] = None,
        service_specification: Optional["_models.ServiceSpecification"] = None,
        **kwargs
    ):
        """
        :keyword name: Operation name: {provider}/{resource}/{operation}.
        :paramtype name: str
        :keyword display: Display metadata associated with the operation.
        :paramtype display: ~azure.mgmt.storage.v2021_04_01.models.OperationDisplay
        :keyword origin: The origin of operations.
        :paramtype origin: str
        :keyword service_specification: One property of operation, include metric specifications.
        :paramtype service_specification: ~azure.mgmt.storage.v2021_04_01.models.ServiceSpecification
        """
        super(Operation, self).__init__(**kwargs)
        self.name = name
        self.display = display
        self.origin = origin
        self.service_specification = service_specification


class OperationDisplay(msrest.serialization.Model):
    """Display metadata associated with the operation.

    :ivar provider: Service provider: Microsoft Storage.
    :vartype provider: str
    :ivar resource: Resource on which the operation is performed etc.
    :vartype resource: str
    :ivar operation: Type of operation: get, read, delete, etc.
    :vartype operation: str
    :ivar description: Description of the operation.
    :vartype description: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        provider: Optional[str] = None,
        resource: Optional[str] = None,
        operation: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword provider: Service provider: Microsoft Storage.
        :paramtype provider: str
        :keyword resource: Resource on which the operation is performed etc.
        :paramtype resource: str
        :keyword operation: Type of operation: get, read, delete, etc.
        :paramtype operation: str
        :keyword description: Description of the operation.
        :paramtype description: str
        """
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = provider
        self.resource = resource
        self.operation = operation
        self.description = description


class OperationListResult(msrest.serialization.Model):
    """Result of the request to list Storage operations. It contains a list of operations and a URL link to get the next set of results.

    :ivar value: List of Storage operations supported by the Storage resource provider.
    :vartype value: list[~azure.mgmt.storage.v2021_04_01.models.Operation]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.Operation"]] = None,
        **kwargs
    ):
        """
        :keyword value: List of Storage operations supported by the Storage resource provider.
        :paramtype value: list[~azure.mgmt.storage.v2021_04_01.models.Operation]
        """
        super(OperationListResult, self).__init__(**kwargs)
        self.value = value


class PrivateEndpoint(msrest.serialization.Model):
    """The Private Endpoint resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The ARM identifier for Private Endpoint.
    :vartype id: str
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(PrivateEndpoint, self).__init__(**kwargs)
        self.id = None


class PrivateEndpointConnection(Resource):
    """The Private Endpoint Connection resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar private_endpoint: The resource of private end point.
    :vartype private_endpoint: ~azure.mgmt.storage.v2021_04_01.models.PrivateEndpoint
    :ivar private_link_service_connection_state: A collection of information about the state of the
     connection between service consumer and provider.
    :vartype private_link_service_connection_state:
     ~azure.mgmt.storage.v2021_04_01.models.PrivateLinkServiceConnectionState
    :ivar provisioning_state: The provisioning state of the private endpoint connection resource.
     Known values are: "Succeeded", "Creating", "Deleting", "Failed".
    :vartype provisioning_state: str or
     ~azure.mgmt.storage.v2021_04_01.models.PrivateEndpointConnectionProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'private_endpoint': {'key': 'properties.privateEndpoint', 'type': 'PrivateEndpoint'},
        'private_link_service_connection_state': {'key': 'properties.privateLinkServiceConnectionState', 'type': 'PrivateLinkServiceConnectionState'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        private_endpoint: Optional["_models.PrivateEndpoint"] = None,
        private_link_service_connection_state: Optional["_models.PrivateLinkServiceConnectionState"] = None,
        **kwargs
    ):
        """
        :keyword private_endpoint: The resource of private end point.
        :paramtype private_endpoint: ~azure.mgmt.storage.v2021_04_01.models.PrivateEndpoint
        :keyword private_link_service_connection_state: A collection of information about the state of
         the connection between service consumer and provider.
        :paramtype private_link_service_connection_state:
         ~azure.mgmt.storage.v2021_04_01.models.PrivateLinkServiceConnectionState
        """
        super(PrivateEndpointConnection, self).__init__(**kwargs)
        self.private_endpoint = private_endpoint
        self.private_link_service_connection_state = private_link_service_connection_state
        self.provisioning_state = None


class PrivateEndpointConnectionListResult(msrest.serialization.Model):
    """List of private endpoint connection associated with the specified storage account.

    :ivar value: Array of private endpoint connections.
    :vartype value: list[~azure.mgmt.storage.v2021_04_01.models.PrivateEndpointConnection]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PrivateEndpointConnection]'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.PrivateEndpointConnection"]] = None,
        **kwargs
    ):
        """
        :keyword value: Array of private endpoint connections.
        :paramtype value: list[~azure.mgmt.storage.v2021_04_01.models.PrivateEndpointConnection]
        """
        super(PrivateEndpointConnectionListResult, self).__init__(**kwargs)
        self.value = value


class PrivateLinkResource(Resource):
    """A private link resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar group_id: The private link resource group id.
    :vartype group_id: str
    :ivar required_members: The private link resource required member names.
    :vartype required_members: list[str]
    :ivar required_zone_names: The private link resource Private link DNS zone name.
    :vartype required_zone_names: list[str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'group_id': {'readonly': True},
        'required_members': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'group_id': {'key': 'properties.groupId', 'type': 'str'},
        'required_members': {'key': 'properties.requiredMembers', 'type': '[str]'},
        'required_zone_names': {'key': 'properties.requiredZoneNames', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        required_zone_names: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword required_zone_names: The private link resource Private link DNS zone name.
        :paramtype required_zone_names: list[str]
        """
        super(PrivateLinkResource, self).__init__(**kwargs)
        self.group_id = None
        self.required_members = None
        self.required_zone_names = required_zone_names


class PrivateLinkResourceListResult(msrest.serialization.Model):
    """A list of private link resources.

    :ivar value: Array of private link resources.
    :vartype value: list[~azure.mgmt.storage.v2021_04_01.models.PrivateLinkResource]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PrivateLinkResource]'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.PrivateLinkResource"]] = None,
        **kwargs
    ):
        """
        :keyword value: Array of private link resources.
        :paramtype value: list[~azure.mgmt.storage.v2021_04_01.models.PrivateLinkResource]
        """
        super(PrivateLinkResourceListResult, self).__init__(**kwargs)
        self.value = value


class PrivateLinkServiceConnectionState(msrest.serialization.Model):
    """A collection of information about the state of the connection between service consumer and provider.

    :ivar status: Indicates whether the connection has been Approved/Rejected/Removed by the owner
     of the service. Known values are: "Pending", "Approved", "Rejected".
    :vartype status: str or
     ~azure.mgmt.storage.v2021_04_01.models.PrivateEndpointServiceConnectionStatus
    :ivar description: The reason for approval/rejection of the connection.
    :vartype description: str
    :ivar action_required: A message indicating if changes on the service provider require any
     updates on the consumer.
    :vartype action_required: str
    """

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'action_required': {'key': 'actionRequired', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        status: Optional[Union[str, "_models.PrivateEndpointServiceConnectionStatus"]] = None,
        description: Optional[str] = None,
        action_required: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword status: Indicates whether the connection has been Approved/Rejected/Removed by the
         owner of the service. Known values are: "Pending", "Approved", "Rejected".
        :paramtype status: str or
         ~azure.mgmt.storage.v2021_04_01.models.PrivateEndpointServiceConnectionStatus
        :keyword description: The reason for approval/rejection of the connection.
        :paramtype description: str
        :keyword action_required: A message indicating if changes on the service provider require any
         updates on the consumer.
        :paramtype action_required: str
        """
        super(PrivateLinkServiceConnectionState, self).__init__(**kwargs)
        self.status = status
        self.description = description
        self.action_required = action_required


class ProtocolSettings(msrest.serialization.Model):
    """Protocol settings for file service.

    :ivar smb: Setting for SMB protocol.
    :vartype smb: ~azure.mgmt.storage.v2021_04_01.models.SmbSetting
    """

    _attribute_map = {
        'smb': {'key': 'smb', 'type': 'SmbSetting'},
    }

    def __init__(
        self,
        *,
        smb: Optional["_models.SmbSetting"] = None,
        **kwargs
    ):
        """
        :keyword smb: Setting for SMB protocol.
        :paramtype smb: ~azure.mgmt.storage.v2021_04_01.models.SmbSetting
        """
        super(ProtocolSettings, self).__init__(**kwargs)
        self.smb = smb


class QueueServiceProperties(Resource):
    """The properties of a storage account’s Queue service.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar cors: Specifies CORS rules for the Queue service. You can include up to five CorsRule
     elements in the request. If no CorsRule elements are included in the request body, all CORS
     rules will be deleted, and CORS will be disabled for the Queue service.
    :vartype cors: ~azure.mgmt.storage.v2021_04_01.models.CorsRules
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'cors': {'key': 'properties.cors', 'type': 'CorsRules'},
    }

    def __init__(
        self,
        *,
        cors: Optional["_models.CorsRules"] = None,
        **kwargs
    ):
        """
        :keyword cors: Specifies CORS rules for the Queue service. You can include up to five CorsRule
         elements in the request. If no CorsRule elements are included in the request body, all CORS
         rules will be deleted, and CORS will be disabled for the Queue service.
        :paramtype cors: ~azure.mgmt.storage.v2021_04_01.models.CorsRules
        """
        super(QueueServiceProperties, self).__init__(**kwargs)
        self.cors = cors


class ResourceAccessRule(msrest.serialization.Model):
    """Resource Access Rule.

    :ivar tenant_id: Tenant Id.
    :vartype tenant_id: str
    :ivar resource_id: Resource Id.
    :vartype resource_id: str
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tenant_id: Optional[str] = None,
        resource_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword tenant_id: Tenant Id.
        :paramtype tenant_id: str
        :keyword resource_id: Resource Id.
        :paramtype resource_id: str
        """
        super(ResourceAccessRule, self).__init__(**kwargs)
        self.tenant_id = tenant_id
        self.resource_id = resource_id


class RestorePolicyProperties(msrest.serialization.Model):
    """The blob service properties for blob restore policy.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar enabled: Required. Blob restore is enabled if set to true.
    :vartype enabled: bool
    :ivar days: how long this blob can be restored. It should be great than zero and less than
     DeleteRetentionPolicy.days.
    :vartype days: int
    :ivar last_enabled_time: Deprecated in favor of minRestoreTime property.
    :vartype last_enabled_time: ~datetime.datetime
    :ivar min_restore_time: Returns the minimum date and time that the restore can be started.
    :vartype min_restore_time: ~datetime.datetime
    """

    _validation = {
        'enabled': {'required': True},
        'days': {'maximum': 365, 'minimum': 1},
        'last_enabled_time': {'readonly': True},
        'min_restore_time': {'readonly': True},
    }

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'days': {'key': 'days', 'type': 'int'},
        'last_enabled_time': {'key': 'lastEnabledTime', 'type': 'iso-8601'},
        'min_restore_time': {'key': 'minRestoreTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        enabled: bool,
        days: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword enabled: Required. Blob restore is enabled if set to true.
        :paramtype enabled: bool
        :keyword days: how long this blob can be restored. It should be great than zero and less than
         DeleteRetentionPolicy.days.
        :paramtype days: int
        """
        super(RestorePolicyProperties, self).__init__(**kwargs)
        self.enabled = enabled
        self.days = days
        self.last_enabled_time = None
        self.min_restore_time = None


class Restriction(msrest.serialization.Model):
    """The restriction because of which SKU cannot be used.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The type of restrictions. As of now only possible value for this is location.
    :vartype type: str
    :ivar values: The value of restrictions. If the restriction type is set to location. This would
     be different locations where the SKU is restricted.
    :vartype values: list[str]
    :ivar reason_code: The reason for the restriction. As of now this can be "QuotaId" or
     "NotAvailableForSubscription". Quota Id is set when the SKU has requiredQuotas parameter as the
     subscription does not belong to that quota. The "NotAvailableForSubscription" is related to
     capacity at DC. Known values are: "QuotaId", "NotAvailableForSubscription".
    :vartype reason_code: str or ~azure.mgmt.storage.v2021_04_01.models.ReasonCode
    """

    _validation = {
        'type': {'readonly': True},
        'values': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'values': {'key': 'values', 'type': '[str]'},
        'reason_code': {'key': 'reasonCode', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        reason_code: Optional[Union[str, "_models.ReasonCode"]] = None,
        **kwargs
    ):
        """
        :keyword reason_code: The reason for the restriction. As of now this can be "QuotaId" or
         "NotAvailableForSubscription". Quota Id is set when the SKU has requiredQuotas parameter as the
         subscription does not belong to that quota. The "NotAvailableForSubscription" is related to
         capacity at DC. Known values are: "QuotaId", "NotAvailableForSubscription".
        :paramtype reason_code: str or ~azure.mgmt.storage.v2021_04_01.models.ReasonCode
        """
        super(Restriction, self).__init__(**kwargs)
        self.type = None
        self.values = None
        self.reason_code = reason_code


class RoutingPreference(msrest.serialization.Model):
    """Routing preference defines the type of network, either microsoft or internet routing to be used to deliver the user data, the default option is microsoft routing.

    :ivar routing_choice: Routing Choice defines the kind of network routing opted by the user.
     Known values are: "MicrosoftRouting", "InternetRouting".
    :vartype routing_choice: str or ~azure.mgmt.storage.v2021_04_01.models.RoutingChoice
    :ivar publish_microsoft_endpoints: A boolean flag which indicates whether microsoft routing
     storage endpoints are to be published.
    :vartype publish_microsoft_endpoints: bool
    :ivar publish_internet_endpoints: A boolean flag which indicates whether internet routing
     storage endpoints are to be published.
    :vartype publish_internet_endpoints: bool
    """

    _attribute_map = {
        'routing_choice': {'key': 'routingChoice', 'type': 'str'},
        'publish_microsoft_endpoints': {'key': 'publishMicrosoftEndpoints', 'type': 'bool'},
        'publish_internet_endpoints': {'key': 'publishInternetEndpoints', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        routing_choice: Optional[Union[str, "_models.RoutingChoice"]] = None,
        publish_microsoft_endpoints: Optional[bool] = None,
        publish_internet_endpoints: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword routing_choice: Routing Choice defines the kind of network routing opted by the user.
         Known values are: "MicrosoftRouting", "InternetRouting".
        :paramtype routing_choice: str or ~azure.mgmt.storage.v2021_04_01.models.RoutingChoice
        :keyword publish_microsoft_endpoints: A boolean flag which indicates whether microsoft routing
         storage endpoints are to be published.
        :paramtype publish_microsoft_endpoints: bool
        :keyword publish_internet_endpoints: A boolean flag which indicates whether internet routing
         storage endpoints are to be published.
        :paramtype publish_internet_endpoints: bool
        """
        super(RoutingPreference, self).__init__(**kwargs)
        self.routing_choice = routing_choice
        self.publish_microsoft_endpoints = publish_microsoft_endpoints
        self.publish_internet_endpoints = publish_internet_endpoints


class SasPolicy(msrest.serialization.Model):
    """SasPolicy assigned to the storage account.

    All required parameters must be populated in order to send to Azure.

    :ivar sas_expiration_period: Required. The SAS expiration period, DD.HH:MM:SS.
    :vartype sas_expiration_period: str
    :ivar expiration_action: Required. The SAS expiration action. Can only be Log. Known values
     are: "Log". Default value: "Log".
    :vartype expiration_action: str or ~azure.mgmt.storage.v2021_04_01.models.ExpirationAction
    """

    _validation = {
        'sas_expiration_period': {'required': True},
        'expiration_action': {'required': True},
    }

    _attribute_map = {
        'sas_expiration_period': {'key': 'sasExpirationPeriod', 'type': 'str'},
        'expiration_action': {'key': 'expirationAction', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        sas_expiration_period: str,
        expiration_action: Union[str, "_models.ExpirationAction"] = "Log",
        **kwargs
    ):
        """
        :keyword sas_expiration_period: Required. The SAS expiration period, DD.HH:MM:SS.
        :paramtype sas_expiration_period: str
        :keyword expiration_action: Required. The SAS expiration action. Can only be Log. Known values
         are: "Log". Default value: "Log".
        :paramtype expiration_action: str or ~azure.mgmt.storage.v2021_04_01.models.ExpirationAction
        """
        super(SasPolicy, self).__init__(**kwargs)
        self.sas_expiration_period = sas_expiration_period
        self.expiration_action = expiration_action


class ServiceSasParameters(msrest.serialization.Model):
    """The parameters to list service SAS credentials of a specific resource.

    All required parameters must be populated in order to send to Azure.

    :ivar canonicalized_resource: Required. The canonical path to the signed resource.
    :vartype canonicalized_resource: str
    :ivar resource: The signed services accessible with the service SAS. Possible values include:
     Blob (b), Container (c), File (f), Share (s). Known values are: "b", "c", "f", "s".
    :vartype resource: str or ~azure.mgmt.storage.v2021_04_01.models.SignedResource
    :ivar permissions: The signed permissions for the service SAS. Possible values include: Read
     (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p). Known
     values are: "r", "d", "w", "l", "a", "c", "u", "p".
    :vartype permissions: str or ~azure.mgmt.storage.v2021_04_01.models.Permissions
    :ivar ip_address_or_range: An IP address or a range of IP addresses from which to accept
     requests.
    :vartype ip_address_or_range: str
    :ivar protocols: The protocol permitted for a request made with the account SAS. Known values
     are: "https,http", "https".
    :vartype protocols: str or ~azure.mgmt.storage.v2021_04_01.models.HttpProtocol
    :ivar shared_access_start_time: The time at which the SAS becomes valid.
    :vartype shared_access_start_time: ~datetime.datetime
    :ivar shared_access_expiry_time: The time at which the shared access signature becomes invalid.
    :vartype shared_access_expiry_time: ~datetime.datetime
    :ivar identifier: A unique value up to 64 characters in length that correlates to an access
     policy specified for the container, queue, or table.
    :vartype identifier: str
    :ivar partition_key_start: The start of partition key.
    :vartype partition_key_start: str
    :ivar partition_key_end: The end of partition key.
    :vartype partition_key_end: str
    :ivar row_key_start: The start of row key.
    :vartype row_key_start: str
    :ivar row_key_end: The end of row key.
    :vartype row_key_end: str
    :ivar key_to_sign: The key to sign the account SAS token with.
    :vartype key_to_sign: str
    :ivar cache_control: The response header override for cache control.
    :vartype cache_control: str
    :ivar content_disposition: The response header override for content disposition.
    :vartype content_disposition: str
    :ivar content_encoding: The response header override for content encoding.
    :vartype content_encoding: str
    :ivar content_language: The response header override for content language.
    :vartype content_language: str
    :ivar content_type: The response header override for content type.
    :vartype content_type: str
    """

    _validation = {
        'canonicalized_resource': {'required': True},
        'identifier': {'max_length': 64, 'min_length': 0},
    }

    _attribute_map = {
        'canonicalized_resource': {'key': 'canonicalizedResource', 'type': 'str'},
        'resource': {'key': 'signedResource', 'type': 'str'},
        'permissions': {'key': 'signedPermission', 'type': 'str'},
        'ip_address_or_range': {'key': 'signedIp', 'type': 'str'},
        'protocols': {'key': 'signedProtocol', 'type': 'str'},
        'shared_access_start_time': {'key': 'signedStart', 'type': 'iso-8601'},
        'shared_access_expiry_time': {'key': 'signedExpiry', 'type': 'iso-8601'},
        'identifier': {'key': 'signedIdentifier', 'type': 'str'},
        'partition_key_start': {'key': 'startPk', 'type': 'str'},
        'partition_key_end': {'key': 'endPk', 'type': 'str'},
        'row_key_start': {'key': 'startRk', 'type': 'str'},
        'row_key_end': {'key': 'endRk', 'type': 'str'},
        'key_to_sign': {'key': 'keyToSign', 'type': 'str'},
        'cache_control': {'key': 'rscc', 'type': 'str'},
        'content_disposition': {'key': 'rscd', 'type': 'str'},
        'content_encoding': {'key': 'rsce', 'type': 'str'},
        'content_language': {'key': 'rscl', 'type': 'str'},
        'content_type': {'key': 'rsct', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        canonicalized_resource: str,
        resource: Optional[Union[str, "_models.SignedResource"]] = None,
        permissions: Optional[Union[str, "_models.Permissions"]] = None,
        ip_address_or_range: Optional[str] = None,
        protocols: Optional[Union[str, "_models.HttpProtocol"]] = None,
        shared_access_start_time: Optional[datetime.datetime] = None,
        shared_access_expiry_time: Optional[datetime.datetime] = None,
        identifier: Optional[str] = None,
        partition_key_start: Optional[str] = None,
        partition_key_end: Optional[str] = None,
        row_key_start: Optional[str] = None,
        row_key_end: Optional[str] = None,
        key_to_sign: Optional[str] = None,
        cache_control: Optional[str] = None,
        content_disposition: Optional[str] = None,
        content_encoding: Optional[str] = None,
        content_language: Optional[str] = None,
        content_type: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword canonicalized_resource: Required. The canonical path to the signed resource.
        :paramtype canonicalized_resource: str
        :keyword resource: The signed services accessible with the service SAS. Possible values
         include: Blob (b), Container (c), File (f), Share (s). Known values are: "b", "c", "f", "s".
        :paramtype resource: str or ~azure.mgmt.storage.v2021_04_01.models.SignedResource
        :keyword permissions: The signed permissions for the service SAS. Possible values include: Read
         (r), Write (w), Delete (d), List (l), Add (a), Create (c), Update (u) and Process (p). Known
         values are: "r", "d", "w", "l", "a", "c", "u", "p".
        :paramtype permissions: str or ~azure.mgmt.storage.v2021_04_01.models.Permissions
        :keyword ip_address_or_range: An IP address or a range of IP addresses from which to accept
         requests.
        :paramtype ip_address_or_range: str
        :keyword protocols: The protocol permitted for a request made with the account SAS. Known
         values are: "https,http", "https".
        :paramtype protocols: str or ~azure.mgmt.storage.v2021_04_01.models.HttpProtocol
        :keyword shared_access_start_time: The time at which the SAS becomes valid.
        :paramtype shared_access_start_time: ~datetime.datetime
        :keyword shared_access_expiry_time: The time at which the shared access signature becomes
         invalid.
        :paramtype shared_access_expiry_time: ~datetime.datetime
        :keyword identifier: A unique value up to 64 characters in length that correlates to an access
         policy specified for the container, queue, or table.
        :paramtype identifier: str
        :keyword partition_key_start: The start of partition key.
        :paramtype partition_key_start: str
        :keyword partition_key_end: The end of partition key.
        :paramtype partition_key_end: str
        :keyword row_key_start: The start of row key.
        :paramtype row_key_start: str
        :keyword row_key_end: The end of row key.
        :paramtype row_key_end: str
        :keyword key_to_sign: The key to sign the account SAS token with.
        :paramtype key_to_sign: str
        :keyword cache_control: The response header override for cache control.
        :paramtype cache_control: str
        :keyword content_disposition: The response header override for content disposition.
        :paramtype content_disposition: str
        :keyword content_encoding: The response header override for content encoding.
        :paramtype content_encoding: str
        :keyword content_language: The response header override for content language.
        :paramtype content_language: str
        :keyword content_type: The response header override for content type.
        :paramtype content_type: str
        """
        super(ServiceSasParameters, self).__init__(**kwargs)
        self.canonicalized_resource = canonicalized_resource
        self.resource = resource
        self.permissions = permissions
        self.ip_address_or_range = ip_address_or_range
        self.protocols = protocols
        self.shared_access_start_time = shared_access_start_time
        self.shared_access_expiry_time = shared_access_expiry_time
        self.identifier = identifier
        self.partition_key_start = partition_key_start
        self.partition_key_end = partition_key_end
        self.row_key_start = row_key_start
        self.row_key_end = row_key_end
        self.key_to_sign = key_to_sign
        self.cache_control = cache_control
        self.content_disposition = content_disposition
        self.content_encoding = content_encoding
        self.content_language = content_language
        self.content_type = content_type


class ServiceSpecification(msrest.serialization.Model):
    """One property of operation, include metric specifications.

    :ivar metric_specifications: Metric specifications of operation.
    :vartype metric_specifications:
     list[~azure.mgmt.storage.v2021_04_01.models.MetricSpecification]
    """

    _attribute_map = {
        'metric_specifications': {'key': 'metricSpecifications', 'type': '[MetricSpecification]'},
    }

    def __init__(
        self,
        *,
        metric_specifications: Optional[List["_models.MetricSpecification"]] = None,
        **kwargs
    ):
        """
        :keyword metric_specifications: Metric specifications of operation.
        :paramtype metric_specifications:
         list[~azure.mgmt.storage.v2021_04_01.models.MetricSpecification]
        """
        super(ServiceSpecification, self).__init__(**kwargs)
        self.metric_specifications = metric_specifications


class SignedIdentifier(msrest.serialization.Model):
    """SignedIdentifier.

    :ivar id: An unique identifier of the stored access policy.
    :vartype id: str
    :ivar access_policy: Access policy.
    :vartype access_policy: ~azure.mgmt.storage.v2021_04_01.models.AccessPolicy
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'access_policy': {'key': 'accessPolicy', 'type': 'AccessPolicy'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        access_policy: Optional["_models.AccessPolicy"] = None,
        **kwargs
    ):
        """
        :keyword id: An unique identifier of the stored access policy.
        :paramtype id: str
        :keyword access_policy: Access policy.
        :paramtype access_policy: ~azure.mgmt.storage.v2021_04_01.models.AccessPolicy
        """
        super(SignedIdentifier, self).__init__(**kwargs)
        self.id = id
        self.access_policy = access_policy


class Sku(msrest.serialization.Model):
    """The SKU of the storage account.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required. The SKU name. Required for account creation; optional for update. Note
     that in older versions, SKU name was called accountType. Known values are: "Standard_LRS",
     "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS", "Premium_ZRS",
     "Standard_GZRS", "Standard_RAGZRS".
    :vartype name: str or ~azure.mgmt.storage.v2021_04_01.models.SkuName
    :ivar tier: The SKU tier. This is based on the SKU name. Known values are: "Standard",
     "Premium".
    :vartype tier: str or ~azure.mgmt.storage.v2021_04_01.models.SkuTier
    """

    _validation = {
        'name': {'required': True},
        'tier': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Union[str, "_models.SkuName"],
        **kwargs
    ):
        """
        :keyword name: Required. The SKU name. Required for account creation; optional for update. Note
         that in older versions, SKU name was called accountType. Known values are: "Standard_LRS",
         "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS", "Premium_ZRS",
         "Standard_GZRS", "Standard_RAGZRS".
        :paramtype name: str or ~azure.mgmt.storage.v2021_04_01.models.SkuName
        """
        super(Sku, self).__init__(**kwargs)
        self.name = name
        self.tier = None


class SKUCapability(msrest.serialization.Model):
    """The capability information in the specified SKU, including file encryption, network ACLs, change notification, etc.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of capability, The capability information in the specified SKU, including
     file encryption, network ACLs, change notification, etc.
    :vartype name: str
    :ivar value: A string value to indicate states of given capability. Possibly 'true' or 'false'.
    :vartype value: str
    """

    _validation = {
        'name': {'readonly': True},
        'value': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(SKUCapability, self).__init__(**kwargs)
        self.name = None
        self.value = None


class SkuInformation(msrest.serialization.Model):
    """Storage SKU and its properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required. The SKU name. Required for account creation; optional for update. Note
     that in older versions, SKU name was called accountType. Known values are: "Standard_LRS",
     "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS", "Premium_ZRS",
     "Standard_GZRS", "Standard_RAGZRS".
    :vartype name: str or ~azure.mgmt.storage.v2021_04_01.models.SkuName
    :ivar tier: The SKU tier. This is based on the SKU name. Known values are: "Standard",
     "Premium".
    :vartype tier: str or ~azure.mgmt.storage.v2021_04_01.models.SkuTier
    :ivar resource_type: The type of the resource, usually it is 'storageAccounts'.
    :vartype resource_type: str
    :ivar kind: Indicates the type of storage account. Known values are: "Storage", "StorageV2",
     "BlobStorage", "FileStorage", "BlockBlobStorage".
    :vartype kind: str or ~azure.mgmt.storage.v2021_04_01.models.Kind
    :ivar locations: The set of locations that the SKU is available. This will be supported and
     registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.).
    :vartype locations: list[str]
    :ivar capabilities: The capability information in the specified SKU, including file encryption,
     network ACLs, change notification, etc.
    :vartype capabilities: list[~azure.mgmt.storage.v2021_04_01.models.SKUCapability]
    :ivar restrictions: The restrictions because of which SKU cannot be used. This is empty if
     there are no restrictions.
    :vartype restrictions: list[~azure.mgmt.storage.v2021_04_01.models.Restriction]
    """

    _validation = {
        'name': {'required': True},
        'tier': {'readonly': True},
        'resource_type': {'readonly': True},
        'kind': {'readonly': True},
        'locations': {'readonly': True},
        'capabilities': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'locations': {'key': 'locations', 'type': '[str]'},
        'capabilities': {'key': 'capabilities', 'type': '[SKUCapability]'},
        'restrictions': {'key': 'restrictions', 'type': '[Restriction]'},
    }

    def __init__(
        self,
        *,
        name: Union[str, "_models.SkuName"],
        restrictions: Optional[List["_models.Restriction"]] = None,
        **kwargs
    ):
        """
        :keyword name: Required. The SKU name. Required for account creation; optional for update. Note
         that in older versions, SKU name was called accountType. Known values are: "Standard_LRS",
         "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS", "Premium_ZRS",
         "Standard_GZRS", "Standard_RAGZRS".
        :paramtype name: str or ~azure.mgmt.storage.v2021_04_01.models.SkuName
        :keyword restrictions: The restrictions because of which SKU cannot be used. This is empty if
         there are no restrictions.
        :paramtype restrictions: list[~azure.mgmt.storage.v2021_04_01.models.Restriction]
        """
        super(SkuInformation, self).__init__(**kwargs)
        self.name = name
        self.tier = None
        self.resource_type = None
        self.kind = None
        self.locations = None
        self.capabilities = None
        self.restrictions = restrictions


class SmbSetting(msrest.serialization.Model):
    """Setting for SMB protocol.

    :ivar multichannel: Multichannel setting. Applies to Premium FileStorage only.
    :vartype multichannel: ~azure.mgmt.storage.v2021_04_01.models.Multichannel
    :ivar versions: SMB protocol versions supported by server. Valid values are SMB2.1, SMB3.0,
     SMB3.1.1. Should be passed as a string with delimiter ';'.
    :vartype versions: str
    :ivar authentication_methods: SMB authentication methods supported by server. Valid values are
     NTLMv2, Kerberos. Should be passed as a string with delimiter ';'.
    :vartype authentication_methods: str
    :ivar kerberos_ticket_encryption: Kerberos ticket encryption supported by server. Valid values
     are RC4-HMAC, AES-256. Should be passed as a string with delimiter ';'.
    :vartype kerberos_ticket_encryption: str
    :ivar channel_encryption: SMB channel encryption supported by server. Valid values are
     AES-128-CCM, AES-128-GCM, AES-256-GCM. Should be passed as a string with delimiter ';'.
    :vartype channel_encryption: str
    """

    _attribute_map = {
        'multichannel': {'key': 'multichannel', 'type': 'Multichannel'},
        'versions': {'key': 'versions', 'type': 'str'},
        'authentication_methods': {'key': 'authenticationMethods', 'type': 'str'},
        'kerberos_ticket_encryption': {'key': 'kerberosTicketEncryption', 'type': 'str'},
        'channel_encryption': {'key': 'channelEncryption', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        multichannel: Optional["_models.Multichannel"] = None,
        versions: Optional[str] = None,
        authentication_methods: Optional[str] = None,
        kerberos_ticket_encryption: Optional[str] = None,
        channel_encryption: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword multichannel: Multichannel setting. Applies to Premium FileStorage only.
        :paramtype multichannel: ~azure.mgmt.storage.v2021_04_01.models.Multichannel
        :keyword versions: SMB protocol versions supported by server. Valid values are SMB2.1, SMB3.0,
         SMB3.1.1. Should be passed as a string with delimiter ';'.
        :paramtype versions: str
        :keyword authentication_methods: SMB authentication methods supported by server. Valid values
         are NTLMv2, Kerberos. Should be passed as a string with delimiter ';'.
        :paramtype authentication_methods: str
        :keyword kerberos_ticket_encryption: Kerberos ticket encryption supported by server. Valid
         values are RC4-HMAC, AES-256. Should be passed as a string with delimiter ';'.
        :paramtype kerberos_ticket_encryption: str
        :keyword channel_encryption: SMB channel encryption supported by server. Valid values are
         AES-128-CCM, AES-128-GCM, AES-256-GCM. Should be passed as a string with delimiter ';'.
        :paramtype channel_encryption: str
        """
        super(SmbSetting, self).__init__(**kwargs)
        self.multichannel = multichannel
        self.versions = versions
        self.authentication_methods = authentication_methods
        self.kerberos_ticket_encryption = kerberos_ticket_encryption
        self.channel_encryption = channel_encryption


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: Required. The geo-location where the resource lives.
    :vartype location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: Required. The geo-location where the resource lives.
        :paramtype location: str
        """
        super(TrackedResource, self).__init__(**kwargs)
        self.tags = tags
        self.location = location


class StorageAccount(TrackedResource):
    """The storage account.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: Required. The geo-location where the resource lives.
    :vartype location: str
    :ivar sku: Gets the SKU.
    :vartype sku: ~azure.mgmt.storage.v2021_04_01.models.Sku
    :ivar kind: Gets the Kind. Known values are: "Storage", "StorageV2", "BlobStorage",
     "FileStorage", "BlockBlobStorage".
    :vartype kind: str or ~azure.mgmt.storage.v2021_04_01.models.Kind
    :ivar identity: The identity of the resource.
    :vartype identity: ~azure.mgmt.storage.v2021_04_01.models.Identity
    :ivar extended_location: The extendedLocation of the resource.
    :vartype extended_location: ~azure.mgmt.storage.v2021_04_01.models.ExtendedLocation
    :ivar provisioning_state: Gets the status of the storage account at the time the operation was
     called. Known values are: "Creating", "ResolvingDNS", "Succeeded".
    :vartype provisioning_state: str or ~azure.mgmt.storage.v2021_04_01.models.ProvisioningState
    :ivar primary_endpoints: Gets the URLs that are used to perform a retrieval of a public blob,
     queue, or table object. Note that Standard_ZRS and Premium_LRS accounts only return the blob
     endpoint.
    :vartype primary_endpoints: ~azure.mgmt.storage.v2021_04_01.models.Endpoints
    :ivar primary_location: Gets the location of the primary data center for the storage account.
    :vartype primary_location: str
    :ivar status_of_primary: Gets the status indicating whether the primary location of the storage
     account is available or unavailable. Known values are: "available", "unavailable".
    :vartype status_of_primary: str or ~azure.mgmt.storage.v2021_04_01.models.AccountStatus
    :ivar last_geo_failover_time: Gets the timestamp of the most recent instance of a failover to
     the secondary location. Only the most recent timestamp is retained. This element is not
     returned if there has never been a failover instance. Only available if the accountType is
     Standard_GRS or Standard_RAGRS.
    :vartype last_geo_failover_time: ~datetime.datetime
    :ivar secondary_location: Gets the location of the geo-replicated secondary for the storage
     account. Only available if the accountType is Standard_GRS or Standard_RAGRS.
    :vartype secondary_location: str
    :ivar status_of_secondary: Gets the status indicating whether the secondary location of the
     storage account is available or unavailable. Only available if the SKU name is Standard_GRS or
     Standard_RAGRS. Known values are: "available", "unavailable".
    :vartype status_of_secondary: str or ~azure.mgmt.storage.v2021_04_01.models.AccountStatus
    :ivar creation_time: Gets the creation date and time of the storage account in UTC.
    :vartype creation_time: ~datetime.datetime
    :ivar custom_domain: Gets the custom domain the user assigned to this storage account.
    :vartype custom_domain: ~azure.mgmt.storage.v2021_04_01.models.CustomDomain
    :ivar sas_policy: SasPolicy assigned to the storage account.
    :vartype sas_policy: ~azure.mgmt.storage.v2021_04_01.models.SasPolicy
    :ivar key_policy: KeyPolicy assigned to the storage account.
    :vartype key_policy: ~azure.mgmt.storage.v2021_04_01.models.KeyPolicy
    :ivar key_creation_time: Storage account keys creation time.
    :vartype key_creation_time: ~azure.mgmt.storage.v2021_04_01.models.KeyCreationTime
    :ivar secondary_endpoints: Gets the URLs that are used to perform a retrieval of a public blob,
     queue, or table object from the secondary location of the storage account. Only available if
     the SKU name is Standard_RAGRS.
    :vartype secondary_endpoints: ~azure.mgmt.storage.v2021_04_01.models.Endpoints
    :ivar encryption: Gets the encryption settings on the account. If unspecified, the account is
     unencrypted.
    :vartype encryption: ~azure.mgmt.storage.v2021_04_01.models.Encryption
    :ivar access_tier: Required for storage accounts where kind = BlobStorage. The access tier used
     for billing. Known values are: "Hot", "Cool".
    :vartype access_tier: str or ~azure.mgmt.storage.v2021_04_01.models.AccessTier
    :ivar azure_files_identity_based_authentication: Provides the identity based authentication
     settings for Azure Files.
    :vartype azure_files_identity_based_authentication:
     ~azure.mgmt.storage.v2021_04_01.models.AzureFilesIdentityBasedAuthentication
    :ivar enable_https_traffic_only: Allows https traffic only to storage service if sets to true.
    :vartype enable_https_traffic_only: bool
    :ivar network_rule_set: Network rule set.
    :vartype network_rule_set: ~azure.mgmt.storage.v2021_04_01.models.NetworkRuleSet
    :ivar is_hns_enabled: Account HierarchicalNamespace enabled if sets to true.
    :vartype is_hns_enabled: bool
    :ivar geo_replication_stats: Geo Replication Stats.
    :vartype geo_replication_stats: ~azure.mgmt.storage.v2021_04_01.models.GeoReplicationStats
    :ivar failover_in_progress: If the failover is in progress, the value will be true, otherwise,
     it will be null.
    :vartype failover_in_progress: bool
    :ivar large_file_shares_state: Allow large file shares if sets to Enabled. It cannot be
     disabled once it is enabled. Known values are: "Disabled", "Enabled".
    :vartype large_file_shares_state: str or
     ~azure.mgmt.storage.v2021_04_01.models.LargeFileSharesState
    :ivar private_endpoint_connections: List of private endpoint connection associated with the
     specified storage account.
    :vartype private_endpoint_connections:
     list[~azure.mgmt.storage.v2021_04_01.models.PrivateEndpointConnection]
    :ivar routing_preference: Maintains information about the network routing choice opted by the
     user for data transfer.
    :vartype routing_preference: ~azure.mgmt.storage.v2021_04_01.models.RoutingPreference
    :ivar blob_restore_status: Blob restore status.
    :vartype blob_restore_status: ~azure.mgmt.storage.v2021_04_01.models.BlobRestoreStatus
    :ivar allow_blob_public_access: Allow or disallow public access to all blobs or containers in
     the storage account. The default interpretation is true for this property.
    :vartype allow_blob_public_access: bool
    :ivar minimum_tls_version: Set the minimum TLS version to be permitted on requests to storage.
     The default interpretation is TLS 1.0 for this property. Known values are: "TLS1_0", "TLS1_1",
     "TLS1_2".
    :vartype minimum_tls_version: str or ~azure.mgmt.storage.v2021_04_01.models.MinimumTlsVersion
    :ivar allow_shared_key_access: Indicates whether the storage account permits requests to be
     authorized with the account access key via Shared Key. If false, then all requests, including
     shared access signatures, must be authorized with Azure Active Directory (Azure AD). The
     default value is null, which is equivalent to true.
    :vartype allow_shared_key_access: bool
    :ivar enable_nfs_v3: NFS 3.0 protocol support enabled if set to true.
    :vartype enable_nfs_v3: bool
    :ivar allow_cross_tenant_replication: Allow or disallow cross AAD tenant object replication.
     The default interpretation is true for this property.
    :vartype allow_cross_tenant_replication: bool
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'sku': {'readonly': True},
        'kind': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'primary_endpoints': {'readonly': True},
        'primary_location': {'readonly': True},
        'status_of_primary': {'readonly': True},
        'last_geo_failover_time': {'readonly': True},
        'secondary_location': {'readonly': True},
        'status_of_secondary': {'readonly': True},
        'creation_time': {'readonly': True},
        'custom_domain': {'readonly': True},
        'sas_policy': {'readonly': True},
        'key_policy': {'readonly': True},
        'key_creation_time': {'readonly': True},
        'secondary_endpoints': {'readonly': True},
        'encryption': {'readonly': True},
        'access_tier': {'readonly': True},
        'network_rule_set': {'readonly': True},
        'geo_replication_stats': {'readonly': True},
        'failover_in_progress': {'readonly': True},
        'private_endpoint_connections': {'readonly': True},
        'blob_restore_status': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'Sku'},
        'kind': {'key': 'kind', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'Identity'},
        'extended_location': {'key': 'extendedLocation', 'type': 'ExtendedLocation'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'primary_endpoints': {'key': 'properties.primaryEndpoints', 'type': 'Endpoints'},
        'primary_location': {'key': 'properties.primaryLocation', 'type': 'str'},
        'status_of_primary': {'key': 'properties.statusOfPrimary', 'type': 'str'},
        'last_geo_failover_time': {'key': 'properties.lastGeoFailoverTime', 'type': 'iso-8601'},
        'secondary_location': {'key': 'properties.secondaryLocation', 'type': 'str'},
        'status_of_secondary': {'key': 'properties.statusOfSecondary', 'type': 'str'},
        'creation_time': {'key': 'properties.creationTime', 'type': 'iso-8601'},
        'custom_domain': {'key': 'properties.customDomain', 'type': 'CustomDomain'},
        'sas_policy': {'key': 'properties.sasPolicy', 'type': 'SasPolicy'},
        'key_policy': {'key': 'properties.keyPolicy', 'type': 'KeyPolicy'},
        'key_creation_time': {'key': 'properties.keyCreationTime', 'type': 'KeyCreationTime'},
        'secondary_endpoints': {'key': 'properties.secondaryEndpoints', 'type': 'Endpoints'},
        'encryption': {'key': 'properties.encryption', 'type': 'Encryption'},
        'access_tier': {'key': 'properties.accessTier', 'type': 'str'},
        'azure_files_identity_based_authentication': {'key': 'properties.azureFilesIdentityBasedAuthentication', 'type': 'AzureFilesIdentityBasedAuthentication'},
        'enable_https_traffic_only': {'key': 'properties.supportsHttpsTrafficOnly', 'type': 'bool'},
        'network_rule_set': {'key': 'properties.networkAcls', 'type': 'NetworkRuleSet'},
        'is_hns_enabled': {'key': 'properties.isHnsEnabled', 'type': 'bool'},
        'geo_replication_stats': {'key': 'properties.geoReplicationStats', 'type': 'GeoReplicationStats'},
        'failover_in_progress': {'key': 'properties.failoverInProgress', 'type': 'bool'},
        'large_file_shares_state': {'key': 'properties.largeFileSharesState', 'type': 'str'},
        'private_endpoint_connections': {'key': 'properties.privateEndpointConnections', 'type': '[PrivateEndpointConnection]'},
        'routing_preference': {'key': 'properties.routingPreference', 'type': 'RoutingPreference'},
        'blob_restore_status': {'key': 'properties.blobRestoreStatus', 'type': 'BlobRestoreStatus'},
        'allow_blob_public_access': {'key': 'properties.allowBlobPublicAccess', 'type': 'bool'},
        'minimum_tls_version': {'key': 'properties.minimumTlsVersion', 'type': 'str'},
        'allow_shared_key_access': {'key': 'properties.allowSharedKeyAccess', 'type': 'bool'},
        'enable_nfs_v3': {'key': 'properties.isNfsV3Enabled', 'type': 'bool'},
        'allow_cross_tenant_replication': {'key': 'properties.allowCrossTenantReplication', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["_models.Identity"] = None,
        extended_location: Optional["_models.ExtendedLocation"] = None,
        azure_files_identity_based_authentication: Optional["_models.AzureFilesIdentityBasedAuthentication"] = None,
        enable_https_traffic_only: Optional[bool] = None,
        is_hns_enabled: Optional[bool] = None,
        large_file_shares_state: Optional[Union[str, "_models.LargeFileSharesState"]] = None,
        routing_preference: Optional["_models.RoutingPreference"] = None,
        allow_blob_public_access: Optional[bool] = None,
        minimum_tls_version: Optional[Union[str, "_models.MinimumTlsVersion"]] = None,
        allow_shared_key_access: Optional[bool] = None,
        enable_nfs_v3: Optional[bool] = None,
        allow_cross_tenant_replication: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: Required. The geo-location where the resource lives.
        :paramtype location: str
        :keyword identity: The identity of the resource.
        :paramtype identity: ~azure.mgmt.storage.v2021_04_01.models.Identity
        :keyword extended_location: The extendedLocation of the resource.
        :paramtype extended_location: ~azure.mgmt.storage.v2021_04_01.models.ExtendedLocation
        :keyword azure_files_identity_based_authentication: Provides the identity based authentication
         settings for Azure Files.
        :paramtype azure_files_identity_based_authentication:
         ~azure.mgmt.storage.v2021_04_01.models.AzureFilesIdentityBasedAuthentication
        :keyword enable_https_traffic_only: Allows https traffic only to storage service if sets to
         true.
        :paramtype enable_https_traffic_only: bool
        :keyword is_hns_enabled: Account HierarchicalNamespace enabled if sets to true.
        :paramtype is_hns_enabled: bool
        :keyword large_file_shares_state: Allow large file shares if sets to Enabled. It cannot be
         disabled once it is enabled. Known values are: "Disabled", "Enabled".
        :paramtype large_file_shares_state: str or
         ~azure.mgmt.storage.v2021_04_01.models.LargeFileSharesState
        :keyword routing_preference: Maintains information about the network routing choice opted by
         the user for data transfer.
        :paramtype routing_preference: ~azure.mgmt.storage.v2021_04_01.models.RoutingPreference
        :keyword allow_blob_public_access: Allow or disallow public access to all blobs or containers
         in the storage account. The default interpretation is true for this property.
        :paramtype allow_blob_public_access: bool
        :keyword minimum_tls_version: Set the minimum TLS version to be permitted on requests to
         storage. The default interpretation is TLS 1.0 for this property. Known values are: "TLS1_0",
         "TLS1_1", "TLS1_2".
        :paramtype minimum_tls_version: str or ~azure.mgmt.storage.v2021_04_01.models.MinimumTlsVersion
        :keyword allow_shared_key_access: Indicates whether the storage account permits requests to be
         authorized with the account access key via Shared Key. If false, then all requests, including
         shared access signatures, must be authorized with Azure Active Directory (Azure AD). The
         default value is null, which is equivalent to true.
        :paramtype allow_shared_key_access: bool
        :keyword enable_nfs_v3: NFS 3.0 protocol support enabled if set to true.
        :paramtype enable_nfs_v3: bool
        :keyword allow_cross_tenant_replication: Allow or disallow cross AAD tenant object replication.
         The default interpretation is true for this property.
        :paramtype allow_cross_tenant_replication: bool
        """
        super(StorageAccount, self).__init__(tags=tags, location=location, **kwargs)
        self.sku = None
        self.kind = None
        self.identity = identity
        self.extended_location = extended_location
        self.provisioning_state = None
        self.primary_endpoints = None
        self.primary_location = None
        self.status_of_primary = None
        self.last_geo_failover_time = None
        self.secondary_location = None
        self.status_of_secondary = None
        self.creation_time = None
        self.custom_domain = None
        self.sas_policy = None
        self.key_policy = None
        self.key_creation_time = None
        self.secondary_endpoints = None
        self.encryption = None
        self.access_tier = None
        self.azure_files_identity_based_authentication = azure_files_identity_based_authentication
        self.enable_https_traffic_only = enable_https_traffic_only
        self.network_rule_set = None
        self.is_hns_enabled = is_hns_enabled
        self.geo_replication_stats = None
        self.failover_in_progress = None
        self.large_file_shares_state = large_file_shares_state
        self.private_endpoint_connections = None
        self.routing_preference = routing_preference
        self.blob_restore_status = None
        self.allow_blob_public_access = allow_blob_public_access
        self.minimum_tls_version = minimum_tls_version
        self.allow_shared_key_access = allow_shared_key_access
        self.enable_nfs_v3 = enable_nfs_v3
        self.allow_cross_tenant_replication = allow_cross_tenant_replication


class StorageAccountCheckNameAvailabilityParameters(msrest.serialization.Model):
    """The parameters used to check the availability of the storage account name.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required. The storage account name.
    :vartype name: str
    :ivar type: The type of resource, Microsoft.Storage/storageAccounts. Has constant value:
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True, 'constant': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    type = "Microsoft.Storage/storageAccounts"

    def __init__(
        self,
        *,
        name: str,
        **kwargs
    ):
        """
        :keyword name: Required. The storage account name.
        :paramtype name: str
        """
        super(StorageAccountCheckNameAvailabilityParameters, self).__init__(**kwargs)
        self.name = name


class StorageAccountCreateParameters(msrest.serialization.Model):
    """The parameters used when creating a storage account.

    All required parameters must be populated in order to send to Azure.

    :ivar sku: Required. Required. Gets or sets the SKU name.
    :vartype sku: ~azure.mgmt.storage.v2021_04_01.models.Sku
    :ivar kind: Required. Required. Indicates the type of storage account. Known values are:
     "Storage", "StorageV2", "BlobStorage", "FileStorage", "BlockBlobStorage".
    :vartype kind: str or ~azure.mgmt.storage.v2021_04_01.models.Kind
    :ivar location: Required. Required. Gets or sets the location of the resource. This will be one
     of the supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia,
     etc.). The geo region of a resource cannot be changed once it is created, but if an identical
     geo region is specified on update, the request will succeed.
    :vartype location: str
    :ivar extended_location: Optional. Set the extended location of the resource. If not set, the
     storage account will be created in Azure main region. Otherwise it will be created in the
     specified extended location.
    :vartype extended_location: ~azure.mgmt.storage.v2021_04_01.models.ExtendedLocation
    :ivar tags: A set of tags. Gets or sets a list of key value pairs that describe the resource.
     These tags can be used for viewing and grouping this resource (across resource groups). A
     maximum of 15 tags can be provided for a resource. Each tag must have a key with a length no
     greater than 128 characters and a value with a length no greater than 256 characters.
    :vartype tags: dict[str, str]
    :ivar identity: The identity of the resource.
    :vartype identity: ~azure.mgmt.storage.v2021_04_01.models.Identity
    :ivar sas_policy: SasPolicy assigned to the storage account.
    :vartype sas_policy: ~azure.mgmt.storage.v2021_04_01.models.SasPolicy
    :ivar key_policy: KeyPolicy assigned to the storage account.
    :vartype key_policy: ~azure.mgmt.storage.v2021_04_01.models.KeyPolicy
    :ivar custom_domain: User domain assigned to the storage account. Name is the CNAME source.
     Only one custom domain is supported per storage account at this time. To clear the existing
     custom domain, use an empty string for the custom domain name property.
    :vartype custom_domain: ~azure.mgmt.storage.v2021_04_01.models.CustomDomain
    :ivar encryption: Not applicable. Azure Storage encryption is enabled for all storage accounts
     and cannot be disabled.
    :vartype encryption: ~azure.mgmt.storage.v2021_04_01.models.Encryption
    :ivar network_rule_set: Network rule set.
    :vartype network_rule_set: ~azure.mgmt.storage.v2021_04_01.models.NetworkRuleSet
    :ivar access_tier: Required for storage accounts where kind = BlobStorage. The access tier used
     for billing. Known values are: "Hot", "Cool".
    :vartype access_tier: str or ~azure.mgmt.storage.v2021_04_01.models.AccessTier
    :ivar azure_files_identity_based_authentication: Provides the identity based authentication
     settings for Azure Files.
    :vartype azure_files_identity_based_authentication:
     ~azure.mgmt.storage.v2021_04_01.models.AzureFilesIdentityBasedAuthentication
    :ivar enable_https_traffic_only: Allows https traffic only to storage service if sets to true.
     The default value is true since API version 2019-04-01.
    :vartype enable_https_traffic_only: bool
    :ivar is_hns_enabled: Account HierarchicalNamespace enabled if sets to true.
    :vartype is_hns_enabled: bool
    :ivar large_file_shares_state: Allow large file shares if sets to Enabled. It cannot be
     disabled once it is enabled. Known values are: "Disabled", "Enabled".
    :vartype large_file_shares_state: str or
     ~azure.mgmt.storage.v2021_04_01.models.LargeFileSharesState
    :ivar routing_preference: Maintains information about the network routing choice opted by the
     user for data transfer.
    :vartype routing_preference: ~azure.mgmt.storage.v2021_04_01.models.RoutingPreference
    :ivar allow_blob_public_access: Allow or disallow public access to all blobs or containers in
     the storage account. The default interpretation is true for this property.
    :vartype allow_blob_public_access: bool
    :ivar minimum_tls_version: Set the minimum TLS version to be permitted on requests to storage.
     The default interpretation is TLS 1.0 for this property. Known values are: "TLS1_0", "TLS1_1",
     "TLS1_2".
    :vartype minimum_tls_version: str or ~azure.mgmt.storage.v2021_04_01.models.MinimumTlsVersion
    :ivar allow_shared_key_access: Indicates whether the storage account permits requests to be
     authorized with the account access key via Shared Key. If false, then all requests, including
     shared access signatures, must be authorized with Azure Active Directory (Azure AD). The
     default value is null, which is equivalent to true.
    :vartype allow_shared_key_access: bool
    :ivar enable_nfs_v3: NFS 3.0 protocol support enabled if set to true.
    :vartype enable_nfs_v3: bool
    :ivar allow_cross_tenant_replication: Allow or disallow cross AAD tenant object replication.
     The default interpretation is true for this property.
    :vartype allow_cross_tenant_replication: bool
    """

    _validation = {
        'sku': {'required': True},
        'kind': {'required': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'sku': {'key': 'sku', 'type': 'Sku'},
        'kind': {'key': 'kind', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'extended_location': {'key': 'extendedLocation', 'type': 'ExtendedLocation'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'identity': {'key': 'identity', 'type': 'Identity'},
        'sas_policy': {'key': 'properties.sasPolicy', 'type': 'SasPolicy'},
        'key_policy': {'key': 'properties.keyPolicy', 'type': 'KeyPolicy'},
        'custom_domain': {'key': 'properties.customDomain', 'type': 'CustomDomain'},
        'encryption': {'key': 'properties.encryption', 'type': 'Encryption'},
        'network_rule_set': {'key': 'properties.networkAcls', 'type': 'NetworkRuleSet'},
        'access_tier': {'key': 'properties.accessTier', 'type': 'str'},
        'azure_files_identity_based_authentication': {'key': 'properties.azureFilesIdentityBasedAuthentication', 'type': 'AzureFilesIdentityBasedAuthentication'},
        'enable_https_traffic_only': {'key': 'properties.supportsHttpsTrafficOnly', 'type': 'bool'},
        'is_hns_enabled': {'key': 'properties.isHnsEnabled', 'type': 'bool'},
        'large_file_shares_state': {'key': 'properties.largeFileSharesState', 'type': 'str'},
        'routing_preference': {'key': 'properties.routingPreference', 'type': 'RoutingPreference'},
        'allow_blob_public_access': {'key': 'properties.allowBlobPublicAccess', 'type': 'bool'},
        'minimum_tls_version': {'key': 'properties.minimumTlsVersion', 'type': 'str'},
        'allow_shared_key_access': {'key': 'properties.allowSharedKeyAccess', 'type': 'bool'},
        'enable_nfs_v3': {'key': 'properties.isNfsV3Enabled', 'type': 'bool'},
        'allow_cross_tenant_replication': {'key': 'properties.allowCrossTenantReplication', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        sku: "_models.Sku",
        kind: Union[str, "_models.Kind"],
        location: str,
        extended_location: Optional["_models.ExtendedLocation"] = None,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["_models.Identity"] = None,
        sas_policy: Optional["_models.SasPolicy"] = None,
        key_policy: Optional["_models.KeyPolicy"] = None,
        custom_domain: Optional["_models.CustomDomain"] = None,
        encryption: Optional["_models.Encryption"] = None,
        network_rule_set: Optional["_models.NetworkRuleSet"] = None,
        access_tier: Optional[Union[str, "_models.AccessTier"]] = None,
        azure_files_identity_based_authentication: Optional["_models.AzureFilesIdentityBasedAuthentication"] = None,
        enable_https_traffic_only: Optional[bool] = None,
        is_hns_enabled: Optional[bool] = None,
        large_file_shares_state: Optional[Union[str, "_models.LargeFileSharesState"]] = None,
        routing_preference: Optional["_models.RoutingPreference"] = None,
        allow_blob_public_access: Optional[bool] = None,
        minimum_tls_version: Optional[Union[str, "_models.MinimumTlsVersion"]] = None,
        allow_shared_key_access: Optional[bool] = None,
        enable_nfs_v3: Optional[bool] = None,
        allow_cross_tenant_replication: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword sku: Required. Required. Gets or sets the SKU name.
        :paramtype sku: ~azure.mgmt.storage.v2021_04_01.models.Sku
        :keyword kind: Required. Required. Indicates the type of storage account. Known values are:
         "Storage", "StorageV2", "BlobStorage", "FileStorage", "BlockBlobStorage".
        :paramtype kind: str or ~azure.mgmt.storage.v2021_04_01.models.Kind
        :keyword location: Required. Required. Gets or sets the location of the resource. This will be
         one of the supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia,
         etc.). The geo region of a resource cannot be changed once it is created, but if an identical
         geo region is specified on update, the request will succeed.
        :paramtype location: str
        :keyword extended_location: Optional. Set the extended location of the resource. If not set,
         the storage account will be created in Azure main region. Otherwise it will be created in the
         specified extended location.
        :paramtype extended_location: ~azure.mgmt.storage.v2021_04_01.models.ExtendedLocation
        :keyword tags: A set of tags. Gets or sets a list of key value pairs that describe the
         resource. These tags can be used for viewing and grouping this resource (across resource
         groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key with a
         length no greater than 128 characters and a value with a length no greater than 256 characters.
        :paramtype tags: dict[str, str]
        :keyword identity: The identity of the resource.
        :paramtype identity: ~azure.mgmt.storage.v2021_04_01.models.Identity
        :keyword sas_policy: SasPolicy assigned to the storage account.
        :paramtype sas_policy: ~azure.mgmt.storage.v2021_04_01.models.SasPolicy
        :keyword key_policy: KeyPolicy assigned to the storage account.
        :paramtype key_policy: ~azure.mgmt.storage.v2021_04_01.models.KeyPolicy
        :keyword custom_domain: User domain assigned to the storage account. Name is the CNAME source.
         Only one custom domain is supported per storage account at this time. To clear the existing
         custom domain, use an empty string for the custom domain name property.
        :paramtype custom_domain: ~azure.mgmt.storage.v2021_04_01.models.CustomDomain
        :keyword encryption: Not applicable. Azure Storage encryption is enabled for all storage
         accounts and cannot be disabled.
        :paramtype encryption: ~azure.mgmt.storage.v2021_04_01.models.Encryption
        :keyword network_rule_set: Network rule set.
        :paramtype network_rule_set: ~azure.mgmt.storage.v2021_04_01.models.NetworkRuleSet
        :keyword access_tier: Required for storage accounts where kind = BlobStorage. The access tier
         used for billing. Known values are: "Hot", "Cool".
        :paramtype access_tier: str or ~azure.mgmt.storage.v2021_04_01.models.AccessTier
        :keyword azure_files_identity_based_authentication: Provides the identity based authentication
         settings for Azure Files.
        :paramtype azure_files_identity_based_authentication:
         ~azure.mgmt.storage.v2021_04_01.models.AzureFilesIdentityBasedAuthentication
        :keyword enable_https_traffic_only: Allows https traffic only to storage service if sets to
         true. The default value is true since API version 2019-04-01.
        :paramtype enable_https_traffic_only: bool
        :keyword is_hns_enabled: Account HierarchicalNamespace enabled if sets to true.
        :paramtype is_hns_enabled: bool
        :keyword large_file_shares_state: Allow large file shares if sets to Enabled. It cannot be
         disabled once it is enabled. Known values are: "Disabled", "Enabled".
        :paramtype large_file_shares_state: str or
         ~azure.mgmt.storage.v2021_04_01.models.LargeFileSharesState
        :keyword routing_preference: Maintains information about the network routing choice opted by
         the user for data transfer.
        :paramtype routing_preference: ~azure.mgmt.storage.v2021_04_01.models.RoutingPreference
        :keyword allow_blob_public_access: Allow or disallow public access to all blobs or containers
         in the storage account. The default interpretation is true for this property.
        :paramtype allow_blob_public_access: bool
        :keyword minimum_tls_version: Set the minimum TLS version to be permitted on requests to
         storage. The default interpretation is TLS 1.0 for this property. Known values are: "TLS1_0",
         "TLS1_1", "TLS1_2".
        :paramtype minimum_tls_version: str or ~azure.mgmt.storage.v2021_04_01.models.MinimumTlsVersion
        :keyword allow_shared_key_access: Indicates whether the storage account permits requests to be
         authorized with the account access key via Shared Key. If false, then all requests, including
         shared access signatures, must be authorized with Azure Active Directory (Azure AD). The
         default value is null, which is equivalent to true.
        :paramtype allow_shared_key_access: bool
        :keyword enable_nfs_v3: NFS 3.0 protocol support enabled if set to true.
        :paramtype enable_nfs_v3: bool
        :keyword allow_cross_tenant_replication: Allow or disallow cross AAD tenant object replication.
         The default interpretation is true for this property.
        :paramtype allow_cross_tenant_replication: bool
        """
        super(StorageAccountCreateParameters, self).__init__(**kwargs)
        self.sku = sku
        self.kind = kind
        self.location = location
        self.extended_location = extended_location
        self.tags = tags
        self.identity = identity
        self.sas_policy = sas_policy
        self.key_policy = key_policy
        self.custom_domain = custom_domain
        self.encryption = encryption
        self.network_rule_set = network_rule_set
        self.access_tier = access_tier
        self.azure_files_identity_based_authentication = azure_files_identity_based_authentication
        self.enable_https_traffic_only = enable_https_traffic_only
        self.is_hns_enabled = is_hns_enabled
        self.large_file_shares_state = large_file_shares_state
        self.routing_preference = routing_preference
        self.allow_blob_public_access = allow_blob_public_access
        self.minimum_tls_version = minimum_tls_version
        self.allow_shared_key_access = allow_shared_key_access
        self.enable_nfs_v3 = enable_nfs_v3
        self.allow_cross_tenant_replication = allow_cross_tenant_replication


class StorageAccountInternetEndpoints(msrest.serialization.Model):
    """The URIs that are used to perform a retrieval of a public blob, file, web or dfs object via a internet routing endpoint.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar blob: Gets the blob endpoint.
    :vartype blob: str
    :ivar file: Gets the file endpoint.
    :vartype file: str
    :ivar web: Gets the web endpoint.
    :vartype web: str
    :ivar dfs: Gets the dfs endpoint.
    :vartype dfs: str
    """

    _validation = {
        'blob': {'readonly': True},
        'file': {'readonly': True},
        'web': {'readonly': True},
        'dfs': {'readonly': True},
    }

    _attribute_map = {
        'blob': {'key': 'blob', 'type': 'str'},
        'file': {'key': 'file', 'type': 'str'},
        'web': {'key': 'web', 'type': 'str'},
        'dfs': {'key': 'dfs', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(StorageAccountInternetEndpoints, self).__init__(**kwargs)
        self.blob = None
        self.file = None
        self.web = None
        self.dfs = None


class StorageAccountKey(msrest.serialization.Model):
    """An access key for the storage account.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar key_name: Name of the key.
    :vartype key_name: str
    :ivar value: Base 64-encoded value of the key.
    :vartype value: str
    :ivar permissions: Permissions for the key -- read-only or full permissions. Known values are:
     "Read", "Full".
    :vartype permissions: str or ~azure.mgmt.storage.v2021_04_01.models.KeyPermission
    :ivar creation_time: Creation time of the key, in round trip date format.
    :vartype creation_time: ~datetime.datetime
    """

    _validation = {
        'key_name': {'readonly': True},
        'value': {'readonly': True},
        'permissions': {'readonly': True},
        'creation_time': {'readonly': True},
    }

    _attribute_map = {
        'key_name': {'key': 'keyName', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
        'permissions': {'key': 'permissions', 'type': 'str'},
        'creation_time': {'key': 'creationTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(StorageAccountKey, self).__init__(**kwargs)
        self.key_name = None
        self.value = None
        self.permissions = None
        self.creation_time = None


class StorageAccountListKeysResult(msrest.serialization.Model):
    """The response from the ListKeys operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar keys: Gets the list of storage account keys and their properties for the specified
     storage account.
    :vartype keys: list[~azure.mgmt.storage.v2021_04_01.models.StorageAccountKey]
    """

    _validation = {
        'keys': {'readonly': True},
    }

    _attribute_map = {
        'keys': {'key': 'keys', 'type': '[StorageAccountKey]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(StorageAccountListKeysResult, self).__init__(**kwargs)
        self.keys = None


class StorageAccountListResult(msrest.serialization.Model):
    """The response from the List Storage Accounts operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Gets the list of storage accounts and their properties.
    :vartype value: list[~azure.mgmt.storage.v2021_04_01.models.StorageAccount]
    :ivar next_link: Request URL that can be used to query next page of storage accounts. Returned
     when total number of requested storage accounts exceed maximum page size.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[StorageAccount]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(StorageAccountListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class StorageAccountMicrosoftEndpoints(msrest.serialization.Model):
    """The URIs that are used to perform a retrieval of a public blob, queue, table, web or dfs object via a microsoft routing endpoint.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar blob: Gets the blob endpoint.
    :vartype blob: str
    :ivar queue: Gets the queue endpoint.
    :vartype queue: str
    :ivar table: Gets the table endpoint.
    :vartype table: str
    :ivar file: Gets the file endpoint.
    :vartype file: str
    :ivar web: Gets the web endpoint.
    :vartype web: str
    :ivar dfs: Gets the dfs endpoint.
    :vartype dfs: str
    """

    _validation = {
        'blob': {'readonly': True},
        'queue': {'readonly': True},
        'table': {'readonly': True},
        'file': {'readonly': True},
        'web': {'readonly': True},
        'dfs': {'readonly': True},
    }

    _attribute_map = {
        'blob': {'key': 'blob', 'type': 'str'},
        'queue': {'key': 'queue', 'type': 'str'},
        'table': {'key': 'table', 'type': 'str'},
        'file': {'key': 'file', 'type': 'str'},
        'web': {'key': 'web', 'type': 'str'},
        'dfs': {'key': 'dfs', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(StorageAccountMicrosoftEndpoints, self).__init__(**kwargs)
        self.blob = None
        self.queue = None
        self.table = None
        self.file = None
        self.web = None
        self.dfs = None


class StorageAccountRegenerateKeyParameters(msrest.serialization.Model):
    """The parameters used to regenerate the storage account key.

    All required parameters must be populated in order to send to Azure.

    :ivar key_name: Required. The name of storage keys that want to be regenerated, possible values
     are key1, key2, kerb1, kerb2.
    :vartype key_name: str
    """

    _validation = {
        'key_name': {'required': True},
    }

    _attribute_map = {
        'key_name': {'key': 'keyName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        key_name: str,
        **kwargs
    ):
        """
        :keyword key_name: Required. The name of storage keys that want to be regenerated, possible
         values are key1, key2, kerb1, kerb2.
        :paramtype key_name: str
        """
        super(StorageAccountRegenerateKeyParameters, self).__init__(**kwargs)
        self.key_name = key_name


class StorageAccountUpdateParameters(msrest.serialization.Model):
    """The parameters that can be provided when updating the storage account properties.

    :ivar sku: Gets or sets the SKU name. Note that the SKU name cannot be updated to Standard_ZRS,
     Premium_LRS or Premium_ZRS, nor can accounts of those SKU names be updated to any other value.
    :vartype sku: ~azure.mgmt.storage.v2021_04_01.models.Sku
    :ivar tags: A set of tags. Gets or sets a list of key value pairs that describe the resource.
     These tags can be used in viewing and grouping this resource (across resource groups). A
     maximum of 15 tags can be provided for a resource. Each tag must have a key no greater in
     length than 128 characters and a value no greater in length than 256 characters.
    :vartype tags: dict[str, str]
    :ivar identity: The identity of the resource.
    :vartype identity: ~azure.mgmt.storage.v2021_04_01.models.Identity
    :ivar kind: Optional. Indicates the type of storage account. Currently only StorageV2 value
     supported by server. Known values are: "Storage", "StorageV2", "BlobStorage", "FileStorage",
     "BlockBlobStorage".
    :vartype kind: str or ~azure.mgmt.storage.v2021_04_01.models.Kind
    :ivar custom_domain: Custom domain assigned to the storage account by the user. Name is the
     CNAME source. Only one custom domain is supported per storage account at this time. To clear
     the existing custom domain, use an empty string for the custom domain name property.
    :vartype custom_domain: ~azure.mgmt.storage.v2021_04_01.models.CustomDomain
    :ivar encryption: Provides the encryption settings on the account. The default setting is
     unencrypted.
    :vartype encryption: ~azure.mgmt.storage.v2021_04_01.models.Encryption
    :ivar sas_policy: SasPolicy assigned to the storage account.
    :vartype sas_policy: ~azure.mgmt.storage.v2021_04_01.models.SasPolicy
    :ivar key_policy: KeyPolicy assigned to the storage account.
    :vartype key_policy: ~azure.mgmt.storage.v2021_04_01.models.KeyPolicy
    :ivar access_tier: Required for storage accounts where kind = BlobStorage. The access tier used
     for billing. Known values are: "Hot", "Cool".
    :vartype access_tier: str or ~azure.mgmt.storage.v2021_04_01.models.AccessTier
    :ivar azure_files_identity_based_authentication: Provides the identity based authentication
     settings for Azure Files.
    :vartype azure_files_identity_based_authentication:
     ~azure.mgmt.storage.v2021_04_01.models.AzureFilesIdentityBasedAuthentication
    :ivar enable_https_traffic_only: Allows https traffic only to storage service if sets to true.
    :vartype enable_https_traffic_only: bool
    :ivar network_rule_set: Network rule set.
    :vartype network_rule_set: ~azure.mgmt.storage.v2021_04_01.models.NetworkRuleSet
    :ivar large_file_shares_state: Allow large file shares if sets to Enabled. It cannot be
     disabled once it is enabled. Known values are: "Disabled", "Enabled".
    :vartype large_file_shares_state: str or
     ~azure.mgmt.storage.v2021_04_01.models.LargeFileSharesState
    :ivar routing_preference: Maintains information about the network routing choice opted by the
     user for data transfer.
    :vartype routing_preference: ~azure.mgmt.storage.v2021_04_01.models.RoutingPreference
    :ivar allow_blob_public_access: Allow or disallow public access to all blobs or containers in
     the storage account. The default interpretation is true for this property.
    :vartype allow_blob_public_access: bool
    :ivar minimum_tls_version: Set the minimum TLS version to be permitted on requests to storage.
     The default interpretation is TLS 1.0 for this property. Known values are: "TLS1_0", "TLS1_1",
     "TLS1_2".
    :vartype minimum_tls_version: str or ~azure.mgmt.storage.v2021_04_01.models.MinimumTlsVersion
    :ivar allow_shared_key_access: Indicates whether the storage account permits requests to be
     authorized with the account access key via Shared Key. If false, then all requests, including
     shared access signatures, must be authorized with Azure Active Directory (Azure AD). The
     default value is null, which is equivalent to true.
    :vartype allow_shared_key_access: bool
    :ivar allow_cross_tenant_replication: Allow or disallow cross AAD tenant object replication.
     The default interpretation is true for this property.
    :vartype allow_cross_tenant_replication: bool
    """

    _attribute_map = {
        'sku': {'key': 'sku', 'type': 'Sku'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'identity': {'key': 'identity', 'type': 'Identity'},
        'kind': {'key': 'kind', 'type': 'str'},
        'custom_domain': {'key': 'properties.customDomain', 'type': 'CustomDomain'},
        'encryption': {'key': 'properties.encryption', 'type': 'Encryption'},
        'sas_policy': {'key': 'properties.sasPolicy', 'type': 'SasPolicy'},
        'key_policy': {'key': 'properties.keyPolicy', 'type': 'KeyPolicy'},
        'access_tier': {'key': 'properties.accessTier', 'type': 'str'},
        'azure_files_identity_based_authentication': {'key': 'properties.azureFilesIdentityBasedAuthentication', 'type': 'AzureFilesIdentityBasedAuthentication'},
        'enable_https_traffic_only': {'key': 'properties.supportsHttpsTrafficOnly', 'type': 'bool'},
        'network_rule_set': {'key': 'properties.networkAcls', 'type': 'NetworkRuleSet'},
        'large_file_shares_state': {'key': 'properties.largeFileSharesState', 'type': 'str'},
        'routing_preference': {'key': 'properties.routingPreference', 'type': 'RoutingPreference'},
        'allow_blob_public_access': {'key': 'properties.allowBlobPublicAccess', 'type': 'bool'},
        'minimum_tls_version': {'key': 'properties.minimumTlsVersion', 'type': 'str'},
        'allow_shared_key_access': {'key': 'properties.allowSharedKeyAccess', 'type': 'bool'},
        'allow_cross_tenant_replication': {'key': 'properties.allowCrossTenantReplication', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        sku: Optional["_models.Sku"] = None,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["_models.Identity"] = None,
        kind: Optional[Union[str, "_models.Kind"]] = None,
        custom_domain: Optional["_models.CustomDomain"] = None,
        encryption: Optional["_models.Encryption"] = None,
        sas_policy: Optional["_models.SasPolicy"] = None,
        key_policy: Optional["_models.KeyPolicy"] = None,
        access_tier: Optional[Union[str, "_models.AccessTier"]] = None,
        azure_files_identity_based_authentication: Optional["_models.AzureFilesIdentityBasedAuthentication"] = None,
        enable_https_traffic_only: Optional[bool] = None,
        network_rule_set: Optional["_models.NetworkRuleSet"] = None,
        large_file_shares_state: Optional[Union[str, "_models.LargeFileSharesState"]] = None,
        routing_preference: Optional["_models.RoutingPreference"] = None,
        allow_blob_public_access: Optional[bool] = None,
        minimum_tls_version: Optional[Union[str, "_models.MinimumTlsVersion"]] = None,
        allow_shared_key_access: Optional[bool] = None,
        allow_cross_tenant_replication: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword sku: Gets or sets the SKU name. Note that the SKU name cannot be updated to
         Standard_ZRS, Premium_LRS or Premium_ZRS, nor can accounts of those SKU names be updated to any
         other value.
        :paramtype sku: ~azure.mgmt.storage.v2021_04_01.models.Sku
        :keyword tags: A set of tags. Gets or sets a list of key value pairs that describe the
         resource. These tags can be used in viewing and grouping this resource (across resource
         groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no
         greater in length than 128 characters and a value no greater in length than 256 characters.
        :paramtype tags: dict[str, str]
        :keyword identity: The identity of the resource.
        :paramtype identity: ~azure.mgmt.storage.v2021_04_01.models.Identity
        :keyword kind: Optional. Indicates the type of storage account. Currently only StorageV2 value
         supported by server. Known values are: "Storage", "StorageV2", "BlobStorage", "FileStorage",
         "BlockBlobStorage".
        :paramtype kind: str or ~azure.mgmt.storage.v2021_04_01.models.Kind
        :keyword custom_domain: Custom domain assigned to the storage account by the user. Name is the
         CNAME source. Only one custom domain is supported per storage account at this time. To clear
         the existing custom domain, use an empty string for the custom domain name property.
        :paramtype custom_domain: ~azure.mgmt.storage.v2021_04_01.models.CustomDomain
        :keyword encryption: Provides the encryption settings on the account. The default setting is
         unencrypted.
        :paramtype encryption: ~azure.mgmt.storage.v2021_04_01.models.Encryption
        :keyword sas_policy: SasPolicy assigned to the storage account.
        :paramtype sas_policy: ~azure.mgmt.storage.v2021_04_01.models.SasPolicy
        :keyword key_policy: KeyPolicy assigned to the storage account.
        :paramtype key_policy: ~azure.mgmt.storage.v2021_04_01.models.KeyPolicy
        :keyword access_tier: Required for storage accounts where kind = BlobStorage. The access tier
         used for billing. Known values are: "Hot", "Cool".
        :paramtype access_tier: str or ~azure.mgmt.storage.v2021_04_01.models.AccessTier
        :keyword azure_files_identity_based_authentication: Provides the identity based authentication
         settings for Azure Files.
        :paramtype azure_files_identity_based_authentication:
         ~azure.mgmt.storage.v2021_04_01.models.AzureFilesIdentityBasedAuthentication
        :keyword enable_https_traffic_only: Allows https traffic only to storage service if sets to
         true.
        :paramtype enable_https_traffic_only: bool
        :keyword network_rule_set: Network rule set.
        :paramtype network_rule_set: ~azure.mgmt.storage.v2021_04_01.models.NetworkRuleSet
        :keyword large_file_shares_state: Allow large file shares if sets to Enabled. It cannot be
         disabled once it is enabled. Known values are: "Disabled", "Enabled".
        :paramtype large_file_shares_state: str or
         ~azure.mgmt.storage.v2021_04_01.models.LargeFileSharesState
        :keyword routing_preference: Maintains information about the network routing choice opted by
         the user for data transfer.
        :paramtype routing_preference: ~azure.mgmt.storage.v2021_04_01.models.RoutingPreference
        :keyword allow_blob_public_access: Allow or disallow public access to all blobs or containers
         in the storage account. The default interpretation is true for this property.
        :paramtype allow_blob_public_access: bool
        :keyword minimum_tls_version: Set the minimum TLS version to be permitted on requests to
         storage. The default interpretation is TLS 1.0 for this property. Known values are: "TLS1_0",
         "TLS1_1", "TLS1_2".
        :paramtype minimum_tls_version: str or ~azure.mgmt.storage.v2021_04_01.models.MinimumTlsVersion
        :keyword allow_shared_key_access: Indicates whether the storage account permits requests to be
         authorized with the account access key via Shared Key. If false, then all requests, including
         shared access signatures, must be authorized with Azure Active Directory (Azure AD). The
         default value is null, which is equivalent to true.
        :paramtype allow_shared_key_access: bool
        :keyword allow_cross_tenant_replication: Allow or disallow cross AAD tenant object replication.
         The default interpretation is true for this property.
        :paramtype allow_cross_tenant_replication: bool
        """
        super(StorageAccountUpdateParameters, self).__init__(**kwargs)
        self.sku = sku
        self.tags = tags
        self.identity = identity
        self.kind = kind
        self.custom_domain = custom_domain
        self.encryption = encryption
        self.sas_policy = sas_policy
        self.key_policy = key_policy
        self.access_tier = access_tier
        self.azure_files_identity_based_authentication = azure_files_identity_based_authentication
        self.enable_https_traffic_only = enable_https_traffic_only
        self.network_rule_set = network_rule_set
        self.large_file_shares_state = large_file_shares_state
        self.routing_preference = routing_preference
        self.allow_blob_public_access = allow_blob_public_access
        self.minimum_tls_version = minimum_tls_version
        self.allow_shared_key_access = allow_shared_key_access
        self.allow_cross_tenant_replication = allow_cross_tenant_replication


class StorageQueue(Resource):
    """StorageQueue.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar metadata: A name-value pair that represents queue metadata.
    :vartype metadata: dict[str, str]
    :ivar approximate_message_count: Integer indicating an approximate number of messages in the
     queue. This number is not lower than the actual number of messages in the queue, but could be
     higher.
    :vartype approximate_message_count: int
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'approximate_message_count': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'metadata': {'key': 'properties.metadata', 'type': '{str}'},
        'approximate_message_count': {'key': 'properties.approximateMessageCount', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        metadata: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        """
        :keyword metadata: A name-value pair that represents queue metadata.
        :paramtype metadata: dict[str, str]
        """
        super(StorageQueue, self).__init__(**kwargs)
        self.metadata = metadata
        self.approximate_message_count = None


class StorageSkuListResult(msrest.serialization.Model):
    """The response from the List Storage SKUs operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Get the list result of storage SKUs and their properties.
    :vartype value: list[~azure.mgmt.storage.v2021_04_01.models.SkuInformation]
    """

    _validation = {
        'value': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[SkuInformation]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(StorageSkuListResult, self).__init__(**kwargs)
        self.value = None


class SystemData(msrest.serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", "Key".
    :vartype created_by_type: str or ~azure.mgmt.storage.v2021_04_01.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.storage.v2021_04_01.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs
    ):
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", "Key".
        :paramtype created_by_type: str or ~azure.mgmt.storage.v2021_04_01.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.storage.v2021_04_01.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super(SystemData, self).__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class Table(Resource):
    """Properties of the table, including Id, resource name, resource type.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar table_name: Table name under the specified account.
    :vartype table_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'table_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'table_name': {'key': 'properties.tableName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(Table, self).__init__(**kwargs)
        self.table_name = None


class TableServiceProperties(Resource):
    """The properties of a storage account’s Table service.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar cors: Specifies CORS rules for the Table service. You can include up to five CorsRule
     elements in the request. If no CorsRule elements are included in the request body, all CORS
     rules will be deleted, and CORS will be disabled for the Table service.
    :vartype cors: ~azure.mgmt.storage.v2021_04_01.models.CorsRules
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'cors': {'key': 'properties.cors', 'type': 'CorsRules'},
    }

    def __init__(
        self,
        *,
        cors: Optional["_models.CorsRules"] = None,
        **kwargs
    ):
        """
        :keyword cors: Specifies CORS rules for the Table service. You can include up to five CorsRule
         elements in the request. If no CorsRule elements are included in the request body, all CORS
         rules will be deleted, and CORS will be disabled for the Table service.
        :paramtype cors: ~azure.mgmt.storage.v2021_04_01.models.CorsRules
        """
        super(TableServiceProperties, self).__init__(**kwargs)
        self.cors = cors


class TagFilter(msrest.serialization.Model):
    """Blob index tag based filtering for blob objects.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required. This is the filter tag name, it can have 1 - 128 characters.
    :vartype name: str
    :ivar op: Required. This is the comparison operator which is used for object comparison and
     filtering. Only == (equality operator) is currently supported.
    :vartype op: str
    :ivar value: Required. This is the filter tag value field used for tag based filtering, it can
     have 0 - 256 characters.
    :vartype value: str
    """

    _validation = {
        'name': {'required': True, 'max_length': 128, 'min_length': 1},
        'op': {'required': True},
        'value': {'required': True, 'max_length': 256, 'min_length': 0},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'op': {'key': 'op', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: str,
        op: str,
        value: str,
        **kwargs
    ):
        """
        :keyword name: Required. This is the filter tag name, it can have 1 - 128 characters.
        :paramtype name: str
        :keyword op: Required. This is the comparison operator which is used for object comparison and
         filtering. Only == (equality operator) is currently supported.
        :paramtype op: str
        :keyword value: Required. This is the filter tag value field used for tag based filtering, it
         can have 0 - 256 characters.
        :paramtype value: str
        """
        super(TagFilter, self).__init__(**kwargs)
        self.name = name
        self.op = op
        self.value = value


class TagProperty(msrest.serialization.Model):
    """A tag of the LegalHold of a blob container.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar tag: The tag value.
    :vartype tag: str
    :ivar timestamp: Returns the date and time the tag was added.
    :vartype timestamp: ~datetime.datetime
    :ivar object_identifier: Returns the Object ID of the user who added the tag.
    :vartype object_identifier: str
    :ivar tenant_id: Returns the Tenant ID that issued the token for the user who added the tag.
    :vartype tenant_id: str
    :ivar upn: Returns the User Principal Name of the user who added the tag.
    :vartype upn: str
    """

    _validation = {
        'tag': {'readonly': True},
        'timestamp': {'readonly': True},
        'object_identifier': {'readonly': True},
        'tenant_id': {'readonly': True},
        'upn': {'readonly': True},
    }

    _attribute_map = {
        'tag': {'key': 'tag', 'type': 'str'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'object_identifier': {'key': 'objectIdentifier', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'upn': {'key': 'upn', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(TagProperty, self).__init__(**kwargs)
        self.tag = None
        self.timestamp = None
        self.object_identifier = None
        self.tenant_id = None
        self.upn = None


class UpdateHistoryProperty(msrest.serialization.Model):
    """An update history of the ImmutabilityPolicy of a blob container.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar update: The ImmutabilityPolicy update type of a blob container, possible values include:
     put, lock and extend. Known values are: "put", "lock", "extend".
    :vartype update: str or ~azure.mgmt.storage.v2021_04_01.models.ImmutabilityPolicyUpdateType
    :ivar immutability_period_since_creation_in_days: The immutability period for the blobs in the
     container since the policy creation, in days.
    :vartype immutability_period_since_creation_in_days: int
    :ivar timestamp: Returns the date and time the ImmutabilityPolicy was updated.
    :vartype timestamp: ~datetime.datetime
    :ivar object_identifier: Returns the Object ID of the user who updated the ImmutabilityPolicy.
    :vartype object_identifier: str
    :ivar tenant_id: Returns the Tenant ID that issued the token for the user who updated the
     ImmutabilityPolicy.
    :vartype tenant_id: str
    :ivar upn: Returns the User Principal Name of the user who updated the ImmutabilityPolicy.
    :vartype upn: str
    """

    _validation = {
        'update': {'readonly': True},
        'immutability_period_since_creation_in_days': {'readonly': True},
        'timestamp': {'readonly': True},
        'object_identifier': {'readonly': True},
        'tenant_id': {'readonly': True},
        'upn': {'readonly': True},
    }

    _attribute_map = {
        'update': {'key': 'update', 'type': 'str'},
        'immutability_period_since_creation_in_days': {'key': 'immutabilityPeriodSinceCreationInDays', 'type': 'int'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'object_identifier': {'key': 'objectIdentifier', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'upn': {'key': 'upn', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(UpdateHistoryProperty, self).__init__(**kwargs)
        self.update = None
        self.immutability_period_since_creation_in_days = None
        self.timestamp = None
        self.object_identifier = None
        self.tenant_id = None
        self.upn = None


class Usage(msrest.serialization.Model):
    """Describes Storage Resource Usage.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar unit: Gets the unit of measurement. Known values are: "Count", "Bytes", "Seconds",
     "Percent", "CountsPerSecond", "BytesPerSecond".
    :vartype unit: str or ~azure.mgmt.storage.v2021_04_01.models.UsageUnit
    :ivar current_value: Gets the current count of the allocated resources in the subscription.
    :vartype current_value: int
    :ivar limit: Gets the maximum count of the resources that can be allocated in the subscription.
    :vartype limit: int
    :ivar name: Gets the name of the type of usage.
    :vartype name: ~azure.mgmt.storage.v2021_04_01.models.UsageName
    """

    _validation = {
        'unit': {'readonly': True},
        'current_value': {'readonly': True},
        'limit': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'unit': {'key': 'unit', 'type': 'str'},
        'current_value': {'key': 'currentValue', 'type': 'int'},
        'limit': {'key': 'limit', 'type': 'int'},
        'name': {'key': 'name', 'type': 'UsageName'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(Usage, self).__init__(**kwargs)
        self.unit = None
        self.current_value = None
        self.limit = None
        self.name = None


class UsageListResult(msrest.serialization.Model):
    """The response from the List Usages operation.

    :ivar value: Gets or sets the list of Storage Resource Usages.
    :vartype value: list[~azure.mgmt.storage.v2021_04_01.models.Usage]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Usage]'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["_models.Usage"]] = None,
        **kwargs
    ):
        """
        :keyword value: Gets or sets the list of Storage Resource Usages.
        :paramtype value: list[~azure.mgmt.storage.v2021_04_01.models.Usage]
        """
        super(UsageListResult, self).__init__(**kwargs)
        self.value = value


class UsageName(msrest.serialization.Model):
    """The usage names that can be used; currently limited to StorageAccount.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Gets a string describing the resource name.
    :vartype value: str
    :ivar localized_value: Gets a localized string describing the resource name.
    :vartype localized_value: str
    """

    _validation = {
        'value': {'readonly': True},
        'localized_value': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
        'localized_value': {'key': 'localizedValue', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(UsageName, self).__init__(**kwargs)
        self.value = None
        self.localized_value = None


class UserAssignedIdentity(msrest.serialization.Model):
    """UserAssignedIdentity for the resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal ID of the identity.
    :vartype principal_id: str
    :ivar client_id: The client ID of the identity.
    :vartype client_id: str
    """

    _validation = {
        'principal_id': {'readonly': True},
        'client_id': {'readonly': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'client_id': {'key': 'clientId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(UserAssignedIdentity, self).__init__(**kwargs)
        self.principal_id = None
        self.client_id = None


class VirtualNetworkRule(msrest.serialization.Model):
    """Virtual Network rule.

    All required parameters must be populated in order to send to Azure.

    :ivar virtual_network_resource_id: Required. Resource ID of a subnet, for example:
     /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
    :vartype virtual_network_resource_id: str
    :ivar action: The action of virtual network rule. The only acceptable values to pass in are
     None and "Allow". The default value is None.
    :vartype action: str
    :ivar state: Gets the state of virtual network rule. Known values are: "Provisioning",
     "Deprovisioning", "Succeeded", "Failed", "NetworkSourceDeleted".
    :vartype state: str or ~azure.mgmt.storage.v2021_04_01.models.State
    """

    _validation = {
        'virtual_network_resource_id': {'required': True},
    }

    _attribute_map = {
        'virtual_network_resource_id': {'key': 'id', 'type': 'str'},
        'action': {'key': 'action', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        virtual_network_resource_id: str,
        action: Optional[str] = None,
        state: Optional[Union[str, "_models.State"]] = None,
        **kwargs
    ):
        """
        :keyword virtual_network_resource_id: Required. Resource ID of a subnet, for example:
         /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
        :paramtype virtual_network_resource_id: str
        :keyword action: The action of virtual network rule. The only acceptable values to pass in are
         None and "Allow". The default value is None.
        :paramtype action: str
        :keyword state: Gets the state of virtual network rule. Known values are: "Provisioning",
         "Deprovisioning", "Succeeded", "Failed", "NetworkSourceDeleted".
        :paramtype state: str or ~azure.mgmt.storage.v2021_04_01.models.State
        """
        super(VirtualNetworkRule, self).__init__(**kwargs)
        self.virtual_network_resource_id = virtual_network_resource_id
        self.action = action
        self.state = state
