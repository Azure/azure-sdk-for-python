# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class Acl(Model):
    """Access Control List (ACL) for an iSCSI target lun.

    All required parameters must be populated in order to send to Azure.

    :param initiator_iqn: Required. iSCSI initiator iqn (iSCSI Qualified
     Name); example: iqn.2005-03.org.iscsi:client
    :type initiator_iqn: str
    :param mapped_luns: Required. Array of lun names mapped to the ACL
    :type mapped_luns: list[str]
    :param username: Required. Username for Challenge Handshake Authentication
     Protocol (CHAP) authentication
    :type username: str
    :param password: Required. Password for Challenge Handshake Authentication
     Protocol (CHAP) authentication
    :type password: str
    """

    _validation = {
        'initiator_iqn': {'required': True},
        'mapped_luns': {'required': True},
        'username': {'required': True, 'max_length': 128, 'min_length': 7},
        'password': {'required': True, 'max_length': 512, 'min_length': 12},
    }

    _attribute_map = {
        'initiator_iqn': {'key': 'initiatorIqn', 'type': 'str'},
        'mapped_luns': {'key': 'mappedLuns', 'type': '[str]'},
        'username': {'key': 'credentials.username', 'type': 'str'},
        'password': {'key': 'credentials.password', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Acl, self).__init__(**kwargs)
        self.initiator_iqn = kwargs.get('initiator_iqn', None)
        self.mapped_luns = kwargs.get('mapped_luns', None)
        self.username = kwargs.get('username', None)
        self.password = kwargs.get('password', None)


class Attributes(Model):
    """Attributes of an iSCSI target.

    All required parameters must be populated in order to send to Azure.

    :param authentication: Required. Indicates whether or not authentication
     is enabled on the ACL.
    :type authentication: bool
    :param prod_mode_write_protect: Required. Indicates whether or not write
     protect is enabled on the luns.
    :type prod_mode_write_protect: bool
    """

    _validation = {
        'authentication': {'required': True},
        'prod_mode_write_protect': {'required': True},
    }

    _attribute_map = {
        'authentication': {'key': 'authentication', 'type': 'bool'},
        'prod_mode_write_protect': {'key': 'prodModeWriteProtect', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(Attributes, self).__init__(**kwargs)
        self.authentication = kwargs.get('authentication', None)
        self.prod_mode_write_protect = kwargs.get('prod_mode_write_protect', None)


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class Disk(Model):
    """Managed disk to attach to the DiskPool. Required.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. Unique Azure resource id of the managed disk.
     Required.
    :type id: str
    """

    _validation = {
        'id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Disk, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class Resource(Model):
    """ARM resource model definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class TrackedResource(Resource):
    """The resource model definition for a ARM tracked top level resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives
    :type location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(TrackedResource, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)
        self.location = kwargs.get('location', None)


class DiskPool(TrackedResource):
    """Request payload for Create or Update Disk Pool requests.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives
    :type location: str
    :ivar provisioning_state: State of the operation on the resource. Possible
     values include: 'Invalid', 'Succeeded', 'Failed', 'Canceled', 'Pending',
     'Creating', 'Updating', 'Deleting'
    :vartype provisioning_state: str or
     ~microsoft.storagepool.models.ProvisioningStates
    :param availability_zones: Required. Logical zone for DiskPool resource.
    :type availability_zones: list[str]
    :ivar status: Operational status of the Disk pool. Possible values
     include: 'Invalid', 'Unknown', 'Healthy', 'Unhealthy'
    :vartype status: str or ~microsoft.storagepool.models.OperationalStatus
    :param disks: List of Azure managed disks to attach to a DiskPool
    :type disks: list[~microsoft.storagepool.models.Disk]
    :param subnet_id: Required. Azure resource id of the subnet for the
     DiskPool
    :type subnet_id: str
    :param sku: Sku description.
    :type sku: ~microsoft.storagepool.models.Sku
    :ivar system_data: Resource metadata required by ARM RPC
    :vartype system_data: ~microsoft.storagepool.models.SystemMetadata
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'provisioning_state': {'readonly': True},
        'availability_zones': {'required': True},
        'status': {'readonly': True},
        'subnet_id': {'required': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'availability_zones': {'key': 'properties.availabilityZones', 'type': '[str]'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'disks': {'key': 'properties.disks', 'type': '[Disk]'},
        'subnet_id': {'key': 'properties.subnetId', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'Sku'},
        'system_data': {'key': 'systemData', 'type': 'SystemMetadata'},
    }

    def __init__(self, **kwargs):
        super(DiskPool, self).__init__(**kwargs)
        self.provisioning_state = None
        self.availability_zones = kwargs.get('availability_zones', None)
        self.status = None
        self.disks = kwargs.get('disks', None)
        self.subnet_id = kwargs.get('subnet_id', None)
        self.sku = kwargs.get('sku', None)
        self.system_data = None


class Error(Model):
    """The resource management error response.

    :param error: RP error response
    :type error: ~microsoft.storagepool.models.ErrorResponse
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorResponse'},
    }

    def __init__(self, **kwargs):
        super(Error, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class ErrorException(HttpOperationError):
    """Server responsed with exception of type: 'Error'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorException, self).__init__(deserialize, response, 'Error', *args)


class ErrorAdditionalInfo(Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: object
    """

    _validation = {
        'type': {'readonly': True},
        'info': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'info': {'key': 'info', 'type': 'object'},
    }

    def __init__(self, **kwargs):
        super(ErrorAdditionalInfo, self).__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorResponse(Model):
    """The resource management error response.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~microsoft.storagepool.models.ErrorResponse]
    :ivar additional_info: The error additional info.
    :vartype additional_info:
     list[~microsoft.storagepool.models.ErrorAdditionalInfo]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'additional_info': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorResponse]'},
        'additional_info': {'key': 'additionalInfo', 'type': '[ErrorAdditionalInfo]'},
    }

    def __init__(self, **kwargs):
        super(ErrorResponse, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class IscsiLun(Model):
    """Lun to expose the ManagedDisk.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Lun name.
    :type name: str
    :param managed_disk_azure_resource_id: Required. Unique Azure resource id
     of the managed disk. Required.
    :type managed_disk_azure_resource_id: str
    """

    _validation = {
        'name': {'required': True},
        'managed_disk_azure_resource_id': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'managed_disk_azure_resource_id': {'key': 'managedDiskAzureResourceId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(IscsiLun, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.managed_disk_azure_resource_id = kwargs.get('managed_disk_azure_resource_id', None)


class ProxyResource(Resource):
    """The resource model definition for a ARM proxy resource. It will have
    everything other than required location and tags.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ProxyResource, self).__init__(**kwargs)


class IscsiTarget(ProxyResource):
    """Payload for iSCSI Target Create or Update requests.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    :ivar provisioning_state: State of the operation on the resource. Possible
     values include: 'Invalid', 'Succeeded', 'Failed', 'Canceled', 'Pending',
     'Creating', 'Updating', 'Deleting'
    :vartype provisioning_state: str or
     ~microsoft.storagepool.models.ProvisioningStates
    :ivar status: Operational status of the Disk pool. Possible values
     include: 'Invalid', 'Unknown', 'Healthy', 'Unhealthy'
    :vartype status: str or ~microsoft.storagepool.models.OperationalStatus
    :param tpgs: Required. list of iSCSI target portal groups
    :type tpgs: list[~microsoft.storagepool.models.TargetPortalGroup]
    :param target_iqn: Required. iSCSI target iqn (iSCSI Qualified Name);
     example: iqn.2005-03.org.iscsi:server
    :type target_iqn: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'status': {'readonly': True},
        'tpgs': {'required': True},
        'target_iqn': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'tpgs': {'key': 'properties.tpgs', 'type': '[TargetPortalGroup]'},
        'target_iqn': {'key': 'properties.targetIqn', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(IscsiTarget, self).__init__(**kwargs)
        self.provisioning_state = None
        self.status = None
        self.tpgs = kwargs.get('tpgs', None)
        self.target_iqn = kwargs.get('target_iqn', None)


class Sku(Model):
    """The resource model definition representing SKU.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the SKU. Ex - P3. It is typically a
     letter+number code
    :type name: str
    :param tier: This field is required to be implemented by the Resource
     Provider if the service has more than one tier, but is not required on a
     PUT. Possible values include: 'Free', 'Basic', 'Standard', 'Premium'
    :type tier: str or ~microsoft.storagepool.models.SkuTier
    :param size: The SKU size. When the name field is the combination of tier
     and some other value, this would be the standalone code.
    :type size: str
    :param family: If the service has different generations of hardware, for
     the same SKU, then that can be captured here.
    :type family: str
    :param capacity: If the SKU supports scale out/in then the capacity
     integer should be included. If scale out/in is not possible for the
     resource this may be omitted.
    :type capacity: int
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'SkuTier'},
        'size': {'key': 'size', 'type': 'str'},
        'family': {'key': 'family', 'type': 'str'},
        'capacity': {'key': 'capacity', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(Sku, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.tier = kwargs.get('tier', None)
        self.size = kwargs.get('size', None)
        self.family = kwargs.get('family', None)
        self.capacity = kwargs.get('capacity', None)


class StoragePoolOperationDisplay(Model):
    """Metadata about an operation.

    All required parameters must be populated in order to send to Azure.

    :param provider: Required. Localized friendly form of the resource
     provider name.
    :type provider: str
    :param resource: Required. Localized friendly form of the resource type
     related to this action/operation.
    :type resource: str
    :param operation: Required. Localized friendly name for the operation, as
     it should be shown to the user.
    :type operation: str
    :param description: Required. Localized friendly description for the
     operation, as it should be shown to the user.
    :type description: str
    """

    _validation = {
        'provider': {'required': True},
        'resource': {'required': True},
        'operation': {'required': True},
        'description': {'required': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(StoragePoolOperationDisplay, self).__init__(**kwargs)
        self.provider = kwargs.get('provider', None)
        self.resource = kwargs.get('resource', None)
        self.operation = kwargs.get('operation', None)
        self.description = kwargs.get('description', None)


class StoragePoolRPOperation(Model):
    """Description of a StoragePool RP Operation.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the operation being performed on this
     particular object
    :type name: str
    :param is_data_action: Required. Indicates whether the operation applies
     to data-plane.
    :type is_data_action: bool
    :param action_type: Indicates the action type.
    :type action_type: str
    :param display: Required. Additional metadata about RP operation.
    :type display: ~microsoft.storagepool.models.StoragePoolOperationDisplay
    :param origin: The intended executor of the operation; governs the display
     of the operation in the RBAC UX and the audit logs UX.
    :type origin: str
    """

    _validation = {
        'name': {'required': True},
        'is_data_action': {'required': True},
        'display': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'is_data_action': {'key': 'isDataAction', 'type': 'bool'},
        'action_type': {'key': 'actionType', 'type': 'str'},
        'display': {'key': 'display', 'type': 'StoragePoolOperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(StoragePoolRPOperation, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.is_data_action = kwargs.get('is_data_action', None)
        self.action_type = kwargs.get('action_type', None)
        self.display = kwargs.get('display', None)
        self.origin = kwargs.get('origin', None)


class SystemMetadata(Model):
    """Resource metadata required by ARM RPC.

    :param created_by: A string identifier for the identity that created the
     resource.
    :type created_by: str
    :param created_by_type: The type of identity that created the resource:
     user, application, managedIdentity
    :type created_by_type: str
    :param created_at: The timestamp of resource creation (UTC)
    :type created_at: str
    :param last_modified_by: A string identifier for the identity that last
     modified the resource
    :type last_modified_by: str
    :param last_modified_by_type: The type of identity that last modified the
     resource: user, application, managedIdentity
    :type last_modified_by_type: str
    :param last_modified_at: The timestamp of resource last modification (UTC)
    :type last_modified_at: str
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'str'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SystemMetadata, self).__init__(**kwargs)
        self.created_by = kwargs.get('created_by', None)
        self.created_by_type = kwargs.get('created_by_type', None)
        self.created_at = kwargs.get('created_at', None)
        self.last_modified_by = kwargs.get('last_modified_by', None)
        self.last_modified_by_type = kwargs.get('last_modified_by_type', None)
        self.last_modified_at = kwargs.get('last_modified_at', None)


class TargetPortalGroup(Model):
    """iSCSI target portal group.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param luns: Required. Lun list to be exposed through the iSCSI target.
     Required
    :type luns: list[~microsoft.storagepool.models.IscsiLun]
    :param acls: Required. Access Control List (ACL) for an iSCSI target lun
    :type acls: list[~microsoft.storagepool.models.Acl]
    :param attributes: Required. Attributes of an iSCSI target
    :type attributes: ~microsoft.storagepool.models.Attributes
    :ivar endpoints: list of public ip addresses to connect to the iSCSI
     target
    :vartype endpoints: list[str]
    :ivar tag: The tag associated with the iSCSI target portal group
    :vartype tag: int
    :ivar port: The port at which the iSCSI target is available
    :vartype port: int
    """

    _validation = {
        'luns': {'required': True},
        'acls': {'required': True},
        'attributes': {'required': True},
        'endpoints': {'readonly': True},
        'tag': {'readonly': True},
        'port': {'readonly': True},
    }

    _attribute_map = {
        'luns': {'key': 'luns', 'type': '[IscsiLun]'},
        'acls': {'key': 'acls', 'type': '[Acl]'},
        'attributes': {'key': 'attributes', 'type': 'Attributes'},
        'endpoints': {'key': 'endpoints', 'type': '[str]'},
        'tag': {'key': 'tag', 'type': 'int'},
        'port': {'key': 'port', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(TargetPortalGroup, self).__init__(**kwargs)
        self.luns = kwargs.get('luns', None)
        self.acls = kwargs.get('acls', None)
        self.attributes = kwargs.get('attributes', None)
        self.endpoints = None
        self.tag = None
        self.port = None
