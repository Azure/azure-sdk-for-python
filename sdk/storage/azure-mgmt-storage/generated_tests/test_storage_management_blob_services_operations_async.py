# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.storage.aio import StorageManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestStorageManagementBlobServicesOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(StorageManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_blob_services_list(self, resource_group):
        response = self.client.blob_services.list(
            resource_group_name=resource_group.name,
            account_name="str",
            api_version="2023-05-01",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_blob_services_set_service_properties(self, resource_group):
        response = await self.client.blob_services.set_service_properties(
            resource_group_name=resource_group.name,
            account_name="str",
            parameters={
                "automaticSnapshotPolicyEnabled": bool,
                "changeFeed": {"enabled": bool, "retentionInDays": 0},
                "containerDeleteRetentionPolicy": {"allowPermanentDelete": bool, "days": 0, "enabled": bool},
                "cors": {
                    "corsRules": [
                        {
                            "allowedHeaders": ["str"],
                            "allowedMethods": ["str"],
                            "allowedOrigins": ["str"],
                            "exposedHeaders": ["str"],
                            "maxAgeInSeconds": 0,
                        }
                    ]
                },
                "defaultServiceVersion": "str",
                "deleteRetentionPolicy": {"allowPermanentDelete": bool, "days": 0, "enabled": bool},
                "id": "str",
                "isVersioningEnabled": bool,
                "lastAccessTimeTrackingPolicy": {
                    "enable": bool,
                    "blobType": ["str"],
                    "name": "str",
                    "trackingGranularityInDays": 0,
                },
                "name": "str",
                "restorePolicy": {
                    "enabled": bool,
                    "days": 0,
                    "lastEnabledTime": "2020-02-20 00:00:00",
                    "minRestoreTime": "2020-02-20 00:00:00",
                },
                "sku": {"name": "str", "tier": "str"},
                "type": "str",
            },
            api_version="2023-05-01",
            blob_services_name="default",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_blob_services_get_service_properties(self, resource_group):
        response = await self.client.blob_services.get_service_properties(
            resource_group_name=resource_group.name,
            account_name="str",
            api_version="2023-05-01",
            blob_services_name="default",
        )

        # please add some check logic here by yourself
        # ...
