# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from enum import Enum


class EnableStatus(str, Enum):

    enabled = "Enabled"
    disabled = "Disabled"


class SourceControlType(str, Enum):

    vso_git = "VsoGit"
    git_hub = "GitHub"


class StorageType(str, Enum):

    standard = "Standard"
    premium = "Premium"


class CostThresholdStatus(str, Enum):

    enabled = "Enabled"
    disabled = "Disabled"


class WindowsOsState(str, Enum):

    non_sysprepped = "NonSysprepped"
    sysprep_requested = "SysprepRequested"
    sysprep_applied = "SysprepApplied"


class LinuxOsState(str, Enum):

    non_deprovisioned = "NonDeprovisioned"
    deprovision_requested = "DeprovisionRequested"
    deprovision_applied = "DeprovisionApplied"


class CustomImageOsType(str, Enum):

    windows = "Windows"
    linux = "Linux"
    none = "None"


class HostCachingOptions(str, Enum):

    none = "None"
    read_only = "ReadOnly"
    read_write = "ReadWrite"


class NotificationChannelEventType(str, Enum):

    auto_shutdown = "AutoShutdown"
    cost = "Cost"


class TransportProtocol(str, Enum):

    tcp = "Tcp"
    udp = "Udp"


class VirtualMachineCreationSource(str, Enum):

    from_custom_image = "FromCustomImage"
    from_gallery_image = "FromGalleryImage"


class FileUploadOptions(str, Enum):

    upload_files_and_generate_sas_tokens = "UploadFilesAndGenerateSasTokens"
    none = "None"


class PremiumDataDisk(str, Enum):

    disabled = "Disabled"
    enabled = "Enabled"


class EnvironmentPermission(str, Enum):

    reader = "Reader"
    contributor = "Contributor"


class TargetCostStatus(str, Enum):

    enabled = "Enabled"
    disabled = "Disabled"


class ReportingCycleType(str, Enum):

    calendar_month = "CalendarMonth"
    custom = "Custom"


class CostType(str, Enum):

    unavailable = "Unavailable"
    reported = "Reported"
    projected = "Projected"


class HttpStatusCode(str, Enum):

    continue_enum = "Continue"
    switching_protocols = "SwitchingProtocols"
    ok = "OK"
    created = "Created"
    accepted = "Accepted"
    non_authoritative_information = "NonAuthoritativeInformation"
    no_content = "NoContent"
    reset_content = "ResetContent"
    partial_content = "PartialContent"
    multiple_choices = "MultipleChoices"
    moved_permanently = "MovedPermanently"
    redirect = "Redirect"
    see_other = "SeeOther"
    not_modified = "NotModified"
    use_proxy = "UseProxy"
    unused = "Unused"
    temporary_redirect = "TemporaryRedirect"
    bad_request = "BadRequest"
    unauthorized = "Unauthorized"
    payment_required = "PaymentRequired"
    forbidden = "Forbidden"
    not_found = "NotFound"
    method_not_allowed = "MethodNotAllowed"
    not_acceptable = "NotAcceptable"
    proxy_authentication_required = "ProxyAuthenticationRequired"
    request_timeout = "RequestTimeout"
    conflict = "Conflict"
    gone = "Gone"
    length_required = "LengthRequired"
    precondition_failed = "PreconditionFailed"
    request_entity_too_large = "RequestEntityTooLarge"
    request_uri_too_long = "RequestUriTooLong"
    unsupported_media_type = "UnsupportedMediaType"
    requested_range_not_satisfiable = "RequestedRangeNotSatisfiable"
    expectation_failed = "ExpectationFailed"
    upgrade_required = "UpgradeRequired"
    internal_server_error = "InternalServerError"
    not_implemented = "NotImplemented"
    bad_gateway = "BadGateway"
    service_unavailable = "ServiceUnavailable"
    gateway_timeout = "GatewayTimeout"
    http_version_not_supported = "HttpVersionNotSupported"


class PolicyStatus(str, Enum):

    enabled = "Enabled"
    disabled = "Disabled"


class PolicyFactName(str, Enum):

    user_owned_lab_vm_count = "UserOwnedLabVmCount"
    user_owned_lab_premium_vm_count = "UserOwnedLabPremiumVmCount"
    lab_vm_count = "LabVmCount"
    lab_premium_vm_count = "LabPremiumVmCount"
    lab_vm_size = "LabVmSize"
    gallery_image = "GalleryImage"
    user_owned_lab_vm_count_in_subnet = "UserOwnedLabVmCountInSubnet"
    lab_target_cost = "LabTargetCost"
    environment_template = "EnvironmentTemplate"
    schedule_edit_permission = "ScheduleEditPermission"


class PolicyEvaluatorType(str, Enum):

    allowed_values_policy = "AllowedValuesPolicy"
    max_value_policy = "MaxValuePolicy"


class UsagePermissionType(str, Enum):

    default = "Default"
    deny = "Deny"
    allow = "Allow"
