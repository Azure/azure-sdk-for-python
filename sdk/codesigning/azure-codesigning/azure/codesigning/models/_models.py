# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class CodeSigningSubmissionOptions(_model_base.Model):
    """The codesign request information to be signed by the service.

    All required parameters must be populated in order to send to Azure.

    :ivar signature_algorithm: The supported signature algorithm identifiers. Required. Known
     values are: "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512",
     and "ES256K".
    :vartype signature_algorithm: str or ~azure.codesigning.models.SignatureAlgorithm
    :ivar digest: Content digest to codesign. Required.
    :vartype digest: bytes
    :ivar file_hash_list: List of full file digital signatures.
    :vartype file_hash_list: list[bytes]
    :ivar authenticode_hash_list: List of authenticode digital signatures.
    :vartype authenticode_hash_list: list[bytes]
    """

    signature_algorithm: Union[str, "_models.SignatureAlgorithm"] = rest_field(name="signatureAlgorithm")
    """The supported signature algorithm identifiers. Required. Known values are: \"RS256\",
     \"RS384\", \"RS512\", \"PS256\", \"PS384\", \"PS512\", \"ES256\", \"ES384\", \"ES512\", and
     \"ES256K\"."""
    digest: bytes = rest_field(format="base64")
    """Content digest to codesign. Required."""
    file_hash_list: Optional[List[bytes]] = rest_field(name="fileHashList", format="base64")
    """List of full file digital signatures."""
    authenticode_hash_list: Optional[List[bytes]] = rest_field(name="authenticodeHashList", format="base64")
    """List of authenticode digital signatures."""

    @overload
    def __init__(
        self,
        *,
        signature_algorithm: Union[str, "_models.SignatureAlgorithm"],
        digest: bytes,
        file_hash_list: Optional[List[bytes]] = None,
        authenticode_hash_list: Optional[List[bytes]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class CodeSignOperationStatus(_model_base.Model):
    """The codesign operation status response.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Unique Id of the operation. Required.
    :vartype id: str
    :ivar sign_result: The result of the codesign operation including the signature and signing
     certificate.
    :vartype sign_result: ~azure.codesigning.models.CodeSignResult
    """

    id: str = rest_field()
    """Unique Id of the operation. Required."""
    sign_result: Optional["_models.CodeSignResult"] = rest_field(name="signResult")
    """The result of the codesign operation including the signature and signing certificate."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        sign_result: Optional["_models.CodeSignResult"] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class CodeSignResult(_model_base.Model):
    """The sign status model.

    All required parameters must be populated in order to send to Azure.

    :ivar operation_id: Response Id of the codesign operation. Required.
    :vartype operation_id: str
    :ivar signature: Digital signature of the requested content digest.
    :vartype signature: bytes
    :ivar signing_certificate: Signing certificate corresponding to the private key used to
     codesign the requested
     digest.
    :vartype signing_certificate: bytes
    """

    operation_id: str = rest_field(name="operationId")
    """Response Id of the codesign operation. Required."""
    signature: Optional[bytes] = rest_field(format="base64")
    """Digital signature of the requested content digest."""
    signing_certificate: Optional[bytes] = rest_field(name="signingCertificate", format="base64")
    """Signing certificate corresponding to the private key used to codesign the requested
     digest."""

    @overload
    def __init__(
        self,
        *,
        operation_id: str,
        signature: Optional[bytes] = None,
        signing_certificate: Optional[bytes] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ExtendedKeyUsage(_model_base.Model):
    """Extended key usage object identifier that are allowed.

    All required parameters must be populated in order to send to Azure.

    :ivar ekus: An element of ekus. Required.
    :vartype ekus: list[str]
    """

    ekus: List[str] = rest_field(visibility=["read", "update"])
    """An element of ekus. Required."""

    @overload
    def __init__(
        self,
        *,
        ekus: List[str],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
