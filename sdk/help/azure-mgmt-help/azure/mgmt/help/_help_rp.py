# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from copy import deepcopy
from typing import Any, Optional, TYPE_CHECKING

from azure.core.rest import HttpRequest, HttpResponse
from azure.mgmt.core import ARMPipelineClient

from . import models as _models
from ._configuration import HelpRPConfiguration
from ._serialization import Deserializer, Serializer
from .operations import DiagnosticsOperations, DiscoverySolutionOperations, Operations

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials import TokenCredential


class HelpRP:  # pylint: disable=client-accepts-api-version-keyword
    """Help RP provider.

    :ivar operations: Operations operations
    :vartype operations: azure.mgmt.help.operations.Operations
    :ivar diagnostics: DiagnosticsOperations operations
    :vartype diagnostics: azure.mgmt.help.operations.DiagnosticsOperations
    :ivar discovery_solution: DiscoverySolutionOperations operations
    :vartype discovery_solution: azure.mgmt.help.operations.DiscoverySolutionOperations
    :param credential: Credential needed for the client to connect to Azure. Required.
    :type credential: ~azure.core.credentials.TokenCredential
    :param scope: This is an extension resource provider and only resource level extension is
     supported at the moment. Required.
    :type scope: str
    :param diagnostics_resource_name: Unique resource name for insight resources. Required.
    :type diagnostics_resource_name: str
    :param filter: Can be used to filter solutionIds by 'ProblemClassificationId'. The filter
     supports only 'and' and 'eq' operators. Example: $filter=ProblemClassificationId eq
     '1ddda5b4-cf6c-4d4f-91ad-bc38ab0e811e' and ProblemClassificationId eq
     '0a9673c2-7af6-4e19-90d3-4ee2461076d9'. Default value is None.
    :type filter: str
    :param skiptoken: Skiptoken is only used if a previous operation returned a partial result. If
     a previous response contains a nextLink element, the value of the nextLink element will include
     a skiptoken parameter that specifies a starting point to use for subsequent calls. Default
     value is None.
    :type skiptoken: str
    :param base_url: Service URL. Default value is "https://management.azure.com".
    :type base_url: str
    :keyword api_version: Api Version. Default value is "2023-01-01-preview". Note that overriding
     this default value may result in unsupported behavior.
    :paramtype api_version: str
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
     Retry-After header is present.
    """

    def __init__(
        self,
        credential: "TokenCredential",
        scope: str,
        diagnostics_resource_name: str,
        filter: Optional[str] = None,
        skiptoken: Optional[str] = None,
        base_url: str = "https://management.azure.com",
        **kwargs: Any
    ) -> None:
        self._config = HelpRPConfiguration(
            credential=credential,
            scope=scope,
            diagnostics_resource_name=diagnostics_resource_name,
            filter=filter,
            skiptoken=skiptoken,
            **kwargs
        )
        self._client: ARMPipelineClient = ARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in _models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)
        self._serialize.client_side_validation = False
        self.operations = Operations(self._client, self._config, self._serialize, self._deserialize)
        self.diagnostics = DiagnosticsOperations(self._client, self._config, self._serialize, self._deserialize)
        self.discovery_solution = DiscoverySolutionOperations(
            self._client, self._config, self._serialize, self._deserialize
        )

    def _send_request(self, request: HttpRequest, **kwargs: Any) -> HttpResponse:
        """Runs the network request through the client's chained policies.

        >>> from azure.core.rest import HttpRequest
        >>> request = HttpRequest("GET", "https://www.example.org/")
        <HttpRequest [GET], url: 'https://www.example.org/'>
        >>> response = client._send_request(request)
        <HttpResponse: 200 OK>

        For more information on this code flow, see https://aka.ms/azsdk/dpcodegen/python/send_request

        :param request: The network request you want to make. Required.
        :type request: ~azure.core.rest.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to False.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.rest.HttpResponse
        """

        request_copy = deepcopy(request)
        request_copy.url = self._client.format_url(request_copy.url)
        return self._client.send_request(request_copy, **kwargs)

    def close(self) -> None:
        self._client.close()

    def __enter__(self) -> "HelpRP":
        self._client.__enter__()
        return self

    def __exit__(self, *exc_details: Any) -> None:
        self._client.__exit__(*exc_details)
