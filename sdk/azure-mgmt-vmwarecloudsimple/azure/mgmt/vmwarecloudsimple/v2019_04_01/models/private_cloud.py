# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class PrivateCloud(Model):
    """Private cloud model.

    :param id: Azure Id, e.g.
     "/subscriptions/4da99247-a172-4ed6-8ae9-ebed2d12f839/providers/Microsoft.VMwareCloudSimple/privateClouds/cloud123"
    :type id: str
    :param location: Location where private cloud created, e.g "westus"
    :type location: str
    :param name: Private cloud name
    :type name: str
    :param availability_zone_id: Availability Zone id, e.g. "az1"
    :type availability_zone_id: str
    :param availability_zone_name: Availability Zone name, e.g. "Availability
     Zone 1"
    :type availability_zone_name: str
    :param clusters_number: Number of clusters
    :type clusters_number: int
    :param created_by: User's emails who created cloud
    :type created_by: str
    :param created_on: When private cloud was created
    :type created_on: datetime
    :param dns_servers: Array of DNS servers
    :type dns_servers: list[str]
    :param expires: Expiration date of PC
    :type expires: str
    :param nsx_type: Nsx Type, e.g. "Advanced"
    :type nsx_type: str
    :param placement_group_id: Placement Group id, e.g. "n1"
    :type placement_group_id: str
    :param placement_group_name: Placement Group name
    :type placement_group_name: str
    :param private_cloud_id: Id of a private cloud
    :type private_cloud_id: str
    :param resource_pools: The list of Resource Pools
    :type resource_pools:
     list[~azure.mgmt.vmwarecloudsimple.v2019_04_01.models.ResourcePool]
    :param state: Private Cloud state, e.g. "operational"
    :type state: str
    :param total_cpu_cores: Number of cores
    :type total_cpu_cores: int
    :param total_nodes: Number of nodes
    :type total_nodes: int
    :param total_ram: Memory size
    :type total_ram: int
    :param total_storage: Disk space in TB
    :type total_storage: float
    :param private_cloud_properties_type: Virtualization type e.g. "vSphere"
    :type private_cloud_properties_type: str
    :param v_sphere_version: e.g. "6.5u2"
    :type v_sphere_version: str
    :param vcenter_fqdn: FQDN for vcneter access
    :type vcenter_fqdn: str
    :param vcenter_refid: Vcenters' ip address
    :type vcenter_refid: str
    :param virtual_machine_templates: The list of Virtual Machine Templates
    :type virtual_machine_templates:
     list[~azure.mgmt.vmwarecloudsimple.v2019_04_01.models.VirtualMachineTemplate]
    :param virtual_networks: The list of Virtual Networks
    :type virtual_networks:
     list[~azure.mgmt.vmwarecloudsimple.v2019_04_01.models.VirtualNetwork]
    :param vr_ops_enabled: Is Vrops enabled/disabled
    :type vr_ops_enabled: bool
    :param type: Azure Resource type. Possible values include:
     'Microsoft.VMwareCloudSimple/privateClouds'
    :type type: str or
     ~azure.mgmt.vmwarecloudsimple.v2019_04_01.models.PrivateCloudResourceType
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'availability_zone_id': {'key': 'properties.availabilityZoneId', 'type': 'str'},
        'availability_zone_name': {'key': 'properties.availabilityZoneName', 'type': 'str'},
        'clusters_number': {'key': 'properties.clustersNumber', 'type': 'int'},
        'created_by': {'key': 'properties.createdBy', 'type': 'str'},
        'created_on': {'key': 'properties.createdOn', 'type': 'iso-8601'},
        'dns_servers': {'key': 'properties.dnsServers', 'type': '[str]'},
        'expires': {'key': 'properties.expires', 'type': 'str'},
        'nsx_type': {'key': 'properties.nsxType', 'type': 'str'},
        'placement_group_id': {'key': 'properties.placementGroupId', 'type': 'str'},
        'placement_group_name': {'key': 'properties.placementGroupName', 'type': 'str'},
        'private_cloud_id': {'key': 'properties.privateCloudId', 'type': 'str'},
        'resource_pools': {'key': 'properties.resourcePools', 'type': '[ResourcePool]'},
        'state': {'key': 'properties.state', 'type': 'str'},
        'total_cpu_cores': {'key': 'properties.totalCpuCores', 'type': 'int'},
        'total_nodes': {'key': 'properties.totalNodes', 'type': 'int'},
        'total_ram': {'key': 'properties.totalRam', 'type': 'int'},
        'total_storage': {'key': 'properties.totalStorage', 'type': 'float'},
        'private_cloud_properties_type': {'key': 'properties.type', 'type': 'str'},
        'v_sphere_version': {'key': 'properties.vSphereVersion', 'type': 'str'},
        'vcenter_fqdn': {'key': 'properties.vcenterFqdn', 'type': 'str'},
        'vcenter_refid': {'key': 'properties.vcenterRefid', 'type': 'str'},
        'virtual_machine_templates': {'key': 'properties.virtualMachineTemplates', 'type': '[VirtualMachineTemplate]'},
        'virtual_networks': {'key': 'properties.virtualNetworks', 'type': '[VirtualNetwork]'},
        'vr_ops_enabled': {'key': 'properties.vrOpsEnabled', 'type': 'bool'},
        'type': {'key': 'type', 'type': 'PrivateCloudResourceType'},
    }

    def __init__(self, **kwargs):
        super(PrivateCloud, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.location = kwargs.get('location', None)
        self.name = kwargs.get('name', None)
        self.availability_zone_id = kwargs.get('availability_zone_id', None)
        self.availability_zone_name = kwargs.get('availability_zone_name', None)
        self.clusters_number = kwargs.get('clusters_number', None)
        self.created_by = kwargs.get('created_by', None)
        self.created_on = kwargs.get('created_on', None)
        self.dns_servers = kwargs.get('dns_servers', None)
        self.expires = kwargs.get('expires', None)
        self.nsx_type = kwargs.get('nsx_type', None)
        self.placement_group_id = kwargs.get('placement_group_id', None)
        self.placement_group_name = kwargs.get('placement_group_name', None)
        self.private_cloud_id = kwargs.get('private_cloud_id', None)
        self.resource_pools = kwargs.get('resource_pools', None)
        self.state = kwargs.get('state', None)
        self.total_cpu_cores = kwargs.get('total_cpu_cores', None)
        self.total_nodes = kwargs.get('total_nodes', None)
        self.total_ram = kwargs.get('total_ram', None)
        self.total_storage = kwargs.get('total_storage', None)
        self.private_cloud_properties_type = kwargs.get('private_cloud_properties_type', None)
        self.v_sphere_version = kwargs.get('v_sphere_version', None)
        self.vcenter_fqdn = kwargs.get('vcenter_fqdn', None)
        self.vcenter_refid = kwargs.get('vcenter_refid', None)
        self.virtual_machine_templates = kwargs.get('virtual_machine_templates', None)
        self.virtual_networks = kwargs.get('virtual_networks', None)
        self.vr_ops_enabled = kwargs.get('vr_ops_enabled', None)
        self.type = kwargs.get('type', None)
