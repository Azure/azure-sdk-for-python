# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class VirtualNic(Model):
    """Virtual NIC model.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param ip_addresses: NIC's ip address
    :type ip_addresses: list[str]
    :param mac_address: NIC's MAC address
    :type mac_address: str
    :param network: The list of Virtual Networks
    :type network:
     ~azure.mgmt.vmwarecloudsimple.v2019_04_01.models.VirtualNetwork
    :param nic_type: Required. NIC's type. Possible values include: 'E1000',
     'E1000E', 'PCNET32', 'VMXNET', 'VMXNET2', 'VMXNET3'
    :type nic_type: str or
     ~azure.mgmt.vmwarecloudsimple.v2019_04_01.models.NICType
    :param power_on_boot: Is NIC powered on/off on boot
    :type power_on_boot: bool
    :param virtual_nic_id: NIC's id
    :type virtual_nic_id: str
    :ivar virtual_nic_name: NIC's name
    :vartype virtual_nic_name: str
    """

    _validation = {
        'nic_type': {'required': True},
        'virtual_nic_name': {'readonly': True},
    }

    _attribute_map = {
        'ip_addresses': {'key': 'ipAddresses', 'type': '[str]'},
        'mac_address': {'key': 'macAddress', 'type': 'str'},
        'network': {'key': 'network', 'type': 'VirtualNetwork'},
        'nic_type': {'key': 'nicType', 'type': 'NICType'},
        'power_on_boot': {'key': 'powerOnBoot', 'type': 'bool'},
        'virtual_nic_id': {'key': 'virtualNicId', 'type': 'str'},
        'virtual_nic_name': {'key': 'virtualNicName', 'type': 'str'},
    }

    def __init__(self, *, nic_type, ip_addresses=None, mac_address: str=None, network=None, power_on_boot: bool=None, virtual_nic_id: str=None, **kwargs) -> None:
        super(VirtualNic, self).__init__(**kwargs)
        self.ip_addresses = ip_addresses
        self.mac_address = mac_address
        self.network = network
        self.nic_type = nic_type
        self.power_on_boot = power_on_boot
        self.virtual_nic_id = virtual_nic_id
        self.virtual_nic_name = None
