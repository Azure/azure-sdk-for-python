# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class AutoScalingMechanism(Model):
    """Describes the mechanism for performing auto scaling operation. Derived
    classes will describe the actual mechanism.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AddRemoveReplicaScalingMechanism

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'AddRemoveReplica': 'AddRemoveReplicaScalingMechanism'}
    }

    def __init__(self, **kwargs):
        super(AutoScalingMechanism, self).__init__(**kwargs)
        self.kind = None


class AddRemoveReplicaScalingMechanism(AutoScalingMechanism):
    """Describes the horizontal auto scaling mechanism that adds or removes
    replicas (containers or container groups).

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.
    :type kind: str
    :param min_count: Required. Minimum number of containers (scale down won't
     be performed below this number).
    :type min_count: int
    :param max_count: Required. Maximum number of containers (scale up won't
     be performed above this number).
    :type max_count: int
    :param scale_increment: Required. Each time auto scaling is performed,
     this number of containers will be added or removed.
    :type scale_increment: int
    """

    _validation = {
        'kind': {'required': True},
        'min_count': {'required': True},
        'max_count': {'required': True},
        'scale_increment': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'min_count': {'key': 'minCount', 'type': 'int'},
        'max_count': {'key': 'maxCount', 'type': 'int'},
        'scale_increment': {'key': 'scaleIncrement', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(AddRemoveReplicaScalingMechanism, self).__init__(**kwargs)
        self.min_count = kwargs.get('min_count', None)
        self.max_count = kwargs.get('max_count', None)
        self.scale_increment = kwargs.get('scale_increment', None)
        self.kind = 'AddRemoveReplica'


class ApplicationProperties(Model):
    """Describes properties of a application resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param description: User readable description of the application.
    :type description: str
    :param services: Describes the services in the application. This property
     is used to create or modify services of the application. On get only the
     name of the service is returned. The service description can be obtained
     by querying for the service resource.
    :type services:
     list[~azure.mgmt.servicefabricmesh.models.ServiceResourceDescription]
    :param diagnostics: Describes the diagnostics definition and usage for an
     application resource.
    :type diagnostics:
     ~azure.mgmt.servicefabricmesh.models.DiagnosticsDescription
    :param debug_params: Internal - used by Visual Studio to setup the
     debugging session on the local development environment.
    :type debug_params: str
    :ivar service_names: Names of the services in the application.
    :vartype service_names: list[str]
    :ivar status: Status of the application. Possible values include:
     'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
    :vartype status: str or
     ~azure.mgmt.servicefabricmesh.models.ResourceStatus
    :ivar status_details: Gives additional information about the current
     status of the application.
    :vartype status_details: str
    :ivar health_state: Describes the health state of an application resource.
     Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
    :vartype health_state: str or
     ~azure.mgmt.servicefabricmesh.models.HealthState
    :ivar unhealthy_evaluation: When the application's health state is not
     'Ok', this additional details from service fabric Health Manager for the
     user to know why the application is marked unhealthy.
    :vartype unhealthy_evaluation: str
    """

    _validation = {
        'service_names': {'readonly': True},
        'status': {'readonly': True},
        'status_details': {'readonly': True},
        'health_state': {'readonly': True},
        'unhealthy_evaluation': {'readonly': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'services': {'key': 'services', 'type': '[ServiceResourceDescription]'},
        'diagnostics': {'key': 'diagnostics', 'type': 'DiagnosticsDescription'},
        'debug_params': {'key': 'debugParams', 'type': 'str'},
        'service_names': {'key': 'serviceNames', 'type': '[str]'},
        'status': {'key': 'status', 'type': 'str'},
        'status_details': {'key': 'statusDetails', 'type': 'str'},
        'health_state': {'key': 'healthState', 'type': 'str'},
        'unhealthy_evaluation': {'key': 'unhealthyEvaluation', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ApplicationProperties, self).__init__(**kwargs)
        self.description = kwargs.get('description', None)
        self.services = kwargs.get('services', None)
        self.diagnostics = kwargs.get('diagnostics', None)
        self.debug_params = kwargs.get('debug_params', None)
        self.service_names = None
        self.status = None
        self.status_details = None
        self.health_state = None
        self.unhealthy_evaluation = None


class Resource(Model):
    """The resource model definition for Azure Resource Manager resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified identifier for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class TrackedResource(Resource):
    """The resource model definition for Azure Resource Manager tracked top-level
    resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified identifier for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives
    :type location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(TrackedResource, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)
        self.location = kwargs.get('location', None)


class ApplicationResourceDescription(TrackedResource):
    """This type describes an application resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified identifier for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives
    :type location: str
    :ivar provisioning_state: State of the resource.
    :vartype provisioning_state: str
    :param description: User readable description of the application.
    :type description: str
    :param services: Describes the services in the application. This property
     is used to create or modify services of the application. On get only the
     name of the service is returned. The service description can be obtained
     by querying for the service resource.
    :type services:
     list[~azure.mgmt.servicefabricmesh.models.ServiceResourceDescription]
    :param diagnostics: Describes the diagnostics definition and usage for an
     application resource.
    :type diagnostics:
     ~azure.mgmt.servicefabricmesh.models.DiagnosticsDescription
    :param debug_params: Internal - used by Visual Studio to setup the
     debugging session on the local development environment.
    :type debug_params: str
    :ivar service_names: Names of the services in the application.
    :vartype service_names: list[str]
    :ivar status: Status of the application. Possible values include:
     'Unknown', 'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
    :vartype status: str or
     ~azure.mgmt.servicefabricmesh.models.ResourceStatus
    :ivar status_details: Gives additional information about the current
     status of the application.
    :vartype status_details: str
    :ivar health_state: Describes the health state of an application resource.
     Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
    :vartype health_state: str or
     ~azure.mgmt.servicefabricmesh.models.HealthState
    :ivar unhealthy_evaluation: When the application's health state is not
     'Ok', this additional details from service fabric Health Manager for the
     user to know why the application is marked unhealthy.
    :vartype unhealthy_evaluation: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'provisioning_state': {'readonly': True},
        'service_names': {'readonly': True},
        'status': {'readonly': True},
        'status_details': {'readonly': True},
        'health_state': {'readonly': True},
        'unhealthy_evaluation': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'services': {'key': 'properties.services', 'type': '[ServiceResourceDescription]'},
        'diagnostics': {'key': 'properties.diagnostics', 'type': 'DiagnosticsDescription'},
        'debug_params': {'key': 'properties.debugParams', 'type': 'str'},
        'service_names': {'key': 'properties.serviceNames', 'type': '[str]'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'status_details': {'key': 'properties.statusDetails', 'type': 'str'},
        'health_state': {'key': 'properties.healthState', 'type': 'str'},
        'unhealthy_evaluation': {'key': 'properties.unhealthyEvaluation', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ApplicationResourceDescription, self).__init__(**kwargs)
        self.provisioning_state = None
        self.description = kwargs.get('description', None)
        self.services = kwargs.get('services', None)
        self.diagnostics = kwargs.get('diagnostics', None)
        self.debug_params = kwargs.get('debug_params', None)
        self.service_names = None
        self.status = None
        self.status_details = None
        self.health_state = None
        self.unhealthy_evaluation = None


class VolumeReference(Model):
    """Describes a reference to a volume resource.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Name of the volume being referenced.
    :type name: str
    :param read_only: The flag indicating whether the volume is read only.
     Default is 'false'.
    :type read_only: bool
    :param destination_path: Required. The path within the container at which
     the volume should be mounted. Only valid path characters are allowed.
    :type destination_path: str
    """

    _validation = {
        'name': {'required': True},
        'destination_path': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'read_only': {'key': 'readOnly', 'type': 'bool'},
        'destination_path': {'key': 'destinationPath', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(VolumeReference, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.read_only = kwargs.get('read_only', None)
        self.destination_path = kwargs.get('destination_path', None)


class ApplicationScopedVolume(VolumeReference):
    """Describes a volume whose lifetime is scoped to the application's lifetime.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Name of the volume being referenced.
    :type name: str
    :param read_only: The flag indicating whether the volume is read only.
     Default is 'false'.
    :type read_only: bool
    :param destination_path: Required. The path within the container at which
     the volume should be mounted. Only valid path characters are allowed.
    :type destination_path: str
    :param creation_parameters: Required. Describes parameters for creating
     application-scoped volumes.
    :type creation_parameters:
     ~azure.mgmt.servicefabricmesh.models.ApplicationScopedVolumeCreationParameters
    """

    _validation = {
        'name': {'required': True},
        'destination_path': {'required': True},
        'creation_parameters': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'read_only': {'key': 'readOnly', 'type': 'bool'},
        'destination_path': {'key': 'destinationPath', 'type': 'str'},
        'creation_parameters': {'key': 'creationParameters', 'type': 'ApplicationScopedVolumeCreationParameters'},
    }

    def __init__(self, **kwargs):
        super(ApplicationScopedVolume, self).__init__(**kwargs)
        self.creation_parameters = kwargs.get('creation_parameters', None)


class ApplicationScopedVolumeCreationParameters(Model):
    """Describes parameters for creating application-scoped volumes.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are:
    ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk

    All required parameters must be populated in order to send to Azure.

    :param description: User readable description of the volume.
    :type description: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'ServiceFabricVolumeDisk': 'ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk'}
    }

    def __init__(self, **kwargs):
        super(ApplicationScopedVolumeCreationParameters, self).__init__(**kwargs)
        self.description = kwargs.get('description', None)
        self.kind = None


class ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk(ApplicationScopedVolumeCreationParameters):
    """Describes parameters for creating application-scoped volumes provided by
    Service Fabric Volume Disks.

    All required parameters must be populated in order to send to Azure.

    :param description: User readable description of the volume.
    :type description: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param size_disk: Required. Volume size. Possible values include: 'Small',
     'Medium', 'Large'
    :type size_disk: str or ~azure.mgmt.servicefabricmesh.models.SizeTypes
    """

    _validation = {
        'kind': {'required': True},
        'size_disk': {'required': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'size_disk': {'key': 'sizeDisk', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ApplicationScopedVolumeCreationParametersServiceFabricVolumeDisk, self).__init__(**kwargs)
        self.size_disk = kwargs.get('size_disk', None)
        self.kind = 'ServiceFabricVolumeDisk'


class AutoScalingMetric(Model):
    """Describes the metric that is used for triggering auto scaling operation.
    Derived classes will describe resources or metrics.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AutoScalingResourceMetric

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'Resource': 'AutoScalingResourceMetric'}
    }

    def __init__(self, **kwargs):
        super(AutoScalingMetric, self).__init__(**kwargs)
        self.kind = None


class AutoScalingPolicy(Model):
    """Describes the auto scaling policy.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the auto scaling policy.
    :type name: str
    :param trigger: Required. Determines when auto scaling operation will be
     invoked.
    :type trigger: ~azure.mgmt.servicefabricmesh.models.AutoScalingTrigger
    :param mechanism: Required. The mechanism that is used to scale when auto
     scaling operation is invoked.
    :type mechanism: ~azure.mgmt.servicefabricmesh.models.AutoScalingMechanism
    """

    _validation = {
        'name': {'required': True},
        'trigger': {'required': True},
        'mechanism': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'trigger': {'key': 'trigger', 'type': 'AutoScalingTrigger'},
        'mechanism': {'key': 'mechanism', 'type': 'AutoScalingMechanism'},
    }

    def __init__(self, **kwargs):
        super(AutoScalingPolicy, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.trigger = kwargs.get('trigger', None)
        self.mechanism = kwargs.get('mechanism', None)


class AutoScalingResourceMetric(AutoScalingMetric):
    """Describes the resource that is used for triggering auto scaling.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.
    :type kind: str
    :param name: Required. Name of the resource. Possible values include:
     'cpu', 'memoryInGB'
    :type name: str or
     ~azure.mgmt.servicefabricmesh.models.AutoScalingResourceMetricName
    """

    _validation = {
        'kind': {'required': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AutoScalingResourceMetric, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.kind = 'Resource'


class AutoScalingTrigger(Model):
    """Describes the trigger for performing auto scaling operation.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AverageLoadScalingTrigger

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'AverageLoad': 'AverageLoadScalingTrigger'}
    }

    def __init__(self, **kwargs):
        super(AutoScalingTrigger, self).__init__(**kwargs)
        self.kind = None


class AvailableOperationDisplay(Model):
    """An operation available at the listed Azure resource provider.

    :param provider: Name of the operation provider.
    :type provider: str
    :param resource: Name of the resource on which the operation is available.
    :type resource: str
    :param operation: Name of the available operation.
    :type operation: str
    :param description: Description of the available operation.
    :type description: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AvailableOperationDisplay, self).__init__(**kwargs)
        self.provider = kwargs.get('provider', None)
        self.resource = kwargs.get('resource', None)
        self.operation = kwargs.get('operation', None)
        self.description = kwargs.get('description', None)


class AverageLoadScalingTrigger(AutoScalingTrigger):
    """Describes the average load trigger used for auto scaling.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. Constant filled by server.
    :type kind: str
    :param metric: Required. Description of the metric that is used for
     scaling.
    :type metric: ~azure.mgmt.servicefabricmesh.models.AutoScalingMetric
    :param lower_load_threshold: Required. Lower load threshold (if average
     load is below this threshold, service will scale down).
    :type lower_load_threshold: float
    :param upper_load_threshold: Required. Upper load threshold (if average
     load is above this threshold, service will scale up).
    :type upper_load_threshold: float
    :param scale_interval_in_seconds: Required. Scale interval that indicates
     how often will this trigger be checked.
    :type scale_interval_in_seconds: int
    """

    _validation = {
        'kind': {'required': True},
        'metric': {'required': True},
        'lower_load_threshold': {'required': True},
        'upper_load_threshold': {'required': True},
        'scale_interval_in_seconds': {'required': True, 'minimum': 60},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'metric': {'key': 'metric', 'type': 'AutoScalingMetric'},
        'lower_load_threshold': {'key': 'lowerLoadThreshold', 'type': 'float'},
        'upper_load_threshold': {'key': 'upperLoadThreshold', 'type': 'float'},
        'scale_interval_in_seconds': {'key': 'scaleIntervalInSeconds', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(AverageLoadScalingTrigger, self).__init__(**kwargs)
        self.metric = kwargs.get('metric', None)
        self.lower_load_threshold = kwargs.get('lower_load_threshold', None)
        self.upper_load_threshold = kwargs.get('upper_load_threshold', None)
        self.scale_interval_in_seconds = kwargs.get('scale_interval_in_seconds', None)
        self.kind = 'AverageLoad'


class DiagnosticsSinkProperties(Model):
    """Properties of a DiagnosticsSink.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AzureInternalMonitoringPipelineSinkDescription

    All required parameters must be populated in order to send to Azure.

    :param name: Name of the sink. This value is referenced by
     DiagnosticsReferenceDescription
    :type name: str
    :param description: A description of the sink.
    :type description: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'AzureInternalMonitoringPipeline': 'AzureInternalMonitoringPipelineSinkDescription'}
    }

    def __init__(self, **kwargs):
        super(DiagnosticsSinkProperties, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', None)
        self.kind = None


class AzureInternalMonitoringPipelineSinkDescription(DiagnosticsSinkProperties):
    """Diagnostics settings for Geneva.

    All required parameters must be populated in order to send to Azure.

    :param name: Name of the sink. This value is referenced by
     DiagnosticsReferenceDescription
    :type name: str
    :param description: A description of the sink.
    :type description: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param account_name: Azure Internal monitoring pipeline account.
    :type account_name: str
    :param namespace: Azure Internal monitoring pipeline account namespace.
    :type namespace: str
    :param ma_config_url: Azure Internal monitoring agent configuration.
    :type ma_config_url: str
    :param fluentd_config_url: Azure Internal monitoring agent fluentd
     configuration.
    :type fluentd_config_url: object
    :param auto_key_config_url: Azure Internal monitoring pipeline autokey
     associated with the certificate.
    :type auto_key_config_url: str
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'account_name': {'key': 'accountName', 'type': 'str'},
        'namespace': {'key': 'namespace', 'type': 'str'},
        'ma_config_url': {'key': 'maConfigUrl', 'type': 'str'},
        'fluentd_config_url': {'key': 'fluentdConfigUrl', 'type': 'object'},
        'auto_key_config_url': {'key': 'autoKeyConfigUrl', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AzureInternalMonitoringPipelineSinkDescription, self).__init__(**kwargs)
        self.account_name = kwargs.get('account_name', None)
        self.namespace = kwargs.get('namespace', None)
        self.ma_config_url = kwargs.get('ma_config_url', None)
        self.fluentd_config_url = kwargs.get('fluentd_config_url', None)
        self.auto_key_config_url = kwargs.get('auto_key_config_url', None)
        self.kind = 'AzureInternalMonitoringPipeline'


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class ContainerCodePackageProperties(Model):
    """Describes a container and its runtime properties.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the code package.
    :type name: str
    :param image: Required. The Container image to use.
    :type image: str
    :param image_registry_credential: Image registry credential.
    :type image_registry_credential:
     ~azure.mgmt.servicefabricmesh.models.ImageRegistryCredential
    :param entrypoint: Override for the default entry point in the container.
    :type entrypoint: str
    :param commands: Command array to execute within the container in exec
     form.
    :type commands: list[str]
    :param environment_variables: The environment variables to set in this
     container
    :type environment_variables:
     list[~azure.mgmt.servicefabricmesh.models.EnvironmentVariable]
    :param settings: The settings to set in this container. The setting file
     path can be fetched from environment variable "Fabric_SettingPath". The
     path for Windows container is "C:\\\\secrets". The path for Linux
     container is "/var/secrets".
    :type settings: list[~azure.mgmt.servicefabricmesh.models.Setting]
    :param labels: The labels to set in this container.
    :type labels: list[~azure.mgmt.servicefabricmesh.models.ContainerLabel]
    :param endpoints: The endpoints exposed by this container.
    :type endpoints:
     list[~azure.mgmt.servicefabricmesh.models.EndpointProperties]
    :param resources: Required. The resources required by this container.
    :type resources: ~azure.mgmt.servicefabricmesh.models.ResourceRequirements
    :param volume_refs: Volumes to be attached to the container. The lifetime
     of these volumes is independent of the application's lifetime.
    :type volume_refs:
     list[~azure.mgmt.servicefabricmesh.models.VolumeReference]
    :param volumes: Volumes to be attached to the container. The lifetime of
     these volumes is scoped to the application's lifetime.
    :type volumes:
     list[~azure.mgmt.servicefabricmesh.models.ApplicationScopedVolume]
    :param diagnostics: Reference to sinks in DiagnosticsDescription.
    :type diagnostics: ~azure.mgmt.servicefabricmesh.models.DiagnosticsRef
    :param reliable_collections_refs: A list of ReliableCollection resources
     used by this particular code package. Please refer to
     ReliableCollectionsRef for more details.
    :type reliable_collections_refs:
     list[~azure.mgmt.servicefabricmesh.models.ReliableCollectionsRef]
    :ivar instance_view: Runtime information of a container instance.
    :vartype instance_view:
     ~azure.mgmt.servicefabricmesh.models.ContainerInstanceView
    """

    _validation = {
        'name': {'required': True},
        'image': {'required': True},
        'resources': {'required': True},
        'instance_view': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'image': {'key': 'image', 'type': 'str'},
        'image_registry_credential': {'key': 'imageRegistryCredential', 'type': 'ImageRegistryCredential'},
        'entrypoint': {'key': 'entrypoint', 'type': 'str'},
        'commands': {'key': 'commands', 'type': '[str]'},
        'environment_variables': {'key': 'environmentVariables', 'type': '[EnvironmentVariable]'},
        'settings': {'key': 'settings', 'type': '[Setting]'},
        'labels': {'key': 'labels', 'type': '[ContainerLabel]'},
        'endpoints': {'key': 'endpoints', 'type': '[EndpointProperties]'},
        'resources': {'key': 'resources', 'type': 'ResourceRequirements'},
        'volume_refs': {'key': 'volumeRefs', 'type': '[VolumeReference]'},
        'volumes': {'key': 'volumes', 'type': '[ApplicationScopedVolume]'},
        'diagnostics': {'key': 'diagnostics', 'type': 'DiagnosticsRef'},
        'reliable_collections_refs': {'key': 'reliableCollectionsRefs', 'type': '[ReliableCollectionsRef]'},
        'instance_view': {'key': 'instanceView', 'type': 'ContainerInstanceView'},
    }

    def __init__(self, **kwargs):
        super(ContainerCodePackageProperties, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.image = kwargs.get('image', None)
        self.image_registry_credential = kwargs.get('image_registry_credential', None)
        self.entrypoint = kwargs.get('entrypoint', None)
        self.commands = kwargs.get('commands', None)
        self.environment_variables = kwargs.get('environment_variables', None)
        self.settings = kwargs.get('settings', None)
        self.labels = kwargs.get('labels', None)
        self.endpoints = kwargs.get('endpoints', None)
        self.resources = kwargs.get('resources', None)
        self.volume_refs = kwargs.get('volume_refs', None)
        self.volumes = kwargs.get('volumes', None)
        self.diagnostics = kwargs.get('diagnostics', None)
        self.reliable_collections_refs = kwargs.get('reliable_collections_refs', None)
        self.instance_view = None


class ContainerEvent(Model):
    """A container event.

    :param name: The name of the container event.
    :type name: str
    :param count: The count of the event.
    :type count: int
    :param first_timestamp: Date/time of the first event.
    :type first_timestamp: str
    :param last_timestamp: Date/time of the last event.
    :type last_timestamp: str
    :param message: The event message
    :type message: str
    :param type: The event type.
    :type type: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'count': {'key': 'count', 'type': 'int'},
        'first_timestamp': {'key': 'firstTimestamp', 'type': 'str'},
        'last_timestamp': {'key': 'lastTimestamp', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ContainerEvent, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.count = kwargs.get('count', None)
        self.first_timestamp = kwargs.get('first_timestamp', None)
        self.last_timestamp = kwargs.get('last_timestamp', None)
        self.message = kwargs.get('message', None)
        self.type = kwargs.get('type', None)


class ContainerInstanceView(Model):
    """Runtime information of a container instance.

    :param restart_count: The number of times the container has been
     restarted.
    :type restart_count: int
    :param current_state: Current container instance state.
    :type current_state: ~azure.mgmt.servicefabricmesh.models.ContainerState
    :param previous_state: Previous container instance state.
    :type previous_state: ~azure.mgmt.servicefabricmesh.models.ContainerState
    :param events: The events of this container instance.
    :type events: list[~azure.mgmt.servicefabricmesh.models.ContainerEvent]
    """

    _attribute_map = {
        'restart_count': {'key': 'restartCount', 'type': 'int'},
        'current_state': {'key': 'currentState', 'type': 'ContainerState'},
        'previous_state': {'key': 'previousState', 'type': 'ContainerState'},
        'events': {'key': 'events', 'type': '[ContainerEvent]'},
    }

    def __init__(self, **kwargs):
        super(ContainerInstanceView, self).__init__(**kwargs)
        self.restart_count = kwargs.get('restart_count', None)
        self.current_state = kwargs.get('current_state', None)
        self.previous_state = kwargs.get('previous_state', None)
        self.events = kwargs.get('events', None)


class ContainerLabel(Model):
    """Describes a container label.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the container label.
    :type name: str
    :param value: Required. The value of the container label.
    :type value: str
    """

    _validation = {
        'name': {'required': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ContainerLabel, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.value = kwargs.get('value', None)


class ContainerLogs(Model):
    """Container logs.

    :param content: Container logs.
    :type content: str
    """

    _attribute_map = {
        'content': {'key': 'content', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ContainerLogs, self).__init__(**kwargs)
        self.content = kwargs.get('content', None)


class ContainerState(Model):
    """The container state.

    :param state: The state of this container
    :type state: str
    :param start_time: Date/time when the container state started.
    :type start_time: datetime
    :param exit_code: The container exit code.
    :type exit_code: str
    :param finish_time: Date/time when the container state finished.
    :type finish_time: datetime
    :param detail_status: Human-readable status of this state.
    :type detail_status: str
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'exit_code': {'key': 'exitCode', 'type': 'str'},
        'finish_time': {'key': 'finishTime', 'type': 'iso-8601'},
        'detail_status': {'key': 'detailStatus', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ContainerState, self).__init__(**kwargs)
        self.state = kwargs.get('state', None)
        self.start_time = kwargs.get('start_time', None)
        self.exit_code = kwargs.get('exit_code', None)
        self.finish_time = kwargs.get('finish_time', None)
        self.detail_status = kwargs.get('detail_status', None)


class DiagnosticsDescription(Model):
    """Describes the diagnostics options available.

    :param sinks: List of supported sinks that can be referenced.
    :type sinks:
     list[~azure.mgmt.servicefabricmesh.models.DiagnosticsSinkProperties]
    :param enabled: Status of whether or not sinks are enabled.
    :type enabled: bool
    :param default_sink_refs: The sinks to be used if diagnostics is enabled.
     Sink choices can be overridden at the service and code package level.
    :type default_sink_refs: list[str]
    """

    _attribute_map = {
        'sinks': {'key': 'sinks', 'type': '[DiagnosticsSinkProperties]'},
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'default_sink_refs': {'key': 'defaultSinkRefs', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(DiagnosticsDescription, self).__init__(**kwargs)
        self.sinks = kwargs.get('sinks', None)
        self.enabled = kwargs.get('enabled', None)
        self.default_sink_refs = kwargs.get('default_sink_refs', None)


class DiagnosticsRef(Model):
    """Reference to sinks in DiagnosticsDescription.

    :param enabled: Status of whether or not sinks are enabled.
    :type enabled: bool
    :param sink_refs: List of sinks to be used if enabled. References the list
     of sinks in DiagnosticsDescription.
    :type sink_refs: list[str]
    """

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'sink_refs': {'key': 'sinkRefs', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(DiagnosticsRef, self).__init__(**kwargs)
        self.enabled = kwargs.get('enabled', None)
        self.sink_refs = kwargs.get('sink_refs', None)


class EndpointProperties(Model):
    """Describes a container endpoint.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the endpoint.
    :type name: str
    :param port: Port used by the container.
    :type port: int
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'port': {'key': 'port', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(EndpointProperties, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.port = kwargs.get('port', None)


class EndpointRef(Model):
    """Describes a reference to a service endpoint.

    :param name: Name of the endpoint.
    :type name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EndpointRef, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)


class EnvironmentVariable(Model):
    """Describes an environment variable for the container.

    :param name: The name of the environment variable.
    :type name: str
    :param value: The value of the environment variable.
    :type value: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EnvironmentVariable, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.value = kwargs.get('value', None)


class ErrorDetailsModel(Model):
    """Error model details information.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Required. Error message.
    :type message: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ErrorDetailsModel, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)


class ErrorErrorModel(Model):
    """Error model information.

    All required parameters must be populated in order to send to Azure.

    :param code: Required.
    :type code: str
    :param message: Error message.
    :type message: str
    :param inner_error:
    :type inner_error: str
    :param details: List of error message details.
    :type details:
     list[~azure.mgmt.servicefabricmesh.models.ErrorDetailsModel]
    """

    _validation = {
        'code': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'inner_error': {'key': 'innerError', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetailsModel]'},
    }

    def __init__(self, **kwargs):
        super(ErrorErrorModel, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.inner_error = kwargs.get('inner_error', None)
        self.details = kwargs.get('details', None)


class ErrorModel(Model):
    """The error details.

    All required parameters must be populated in order to send to Azure.

    :param error: Required. Error model information
    :type error: ~azure.mgmt.servicefabricmesh.models.ErrorErrorModel
    """

    _validation = {
        'error': {'required': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorErrorModel'},
    }

    def __init__(self, **kwargs):
        super(ErrorModel, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class ErrorModelException(HttpOperationError):
    """Server responsed with exception of type: 'ErrorModel'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorModelException, self).__init__(deserialize, response, 'ErrorModel', *args)


class GatewayDestination(Model):
    """Describes destination endpoint for routing traffic.

    All required parameters must be populated in order to send to Azure.

    :param application_name: Required. Name of the service fabric Mesh
     application.
    :type application_name: str
    :param service_name: Required. service that contains the endpoint.
    :type service_name: str
    :param endpoint_name: Required. name of the endpoint in the service.
    :type endpoint_name: str
    """

    _validation = {
        'application_name': {'required': True},
        'service_name': {'required': True},
        'endpoint_name': {'required': True},
    }

    _attribute_map = {
        'application_name': {'key': 'applicationName', 'type': 'str'},
        'service_name': {'key': 'serviceName', 'type': 'str'},
        'endpoint_name': {'key': 'endpointName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(GatewayDestination, self).__init__(**kwargs)
        self.application_name = kwargs.get('application_name', None)
        self.service_name = kwargs.get('service_name', None)
        self.endpoint_name = kwargs.get('endpoint_name', None)


class GatewayProperties(Model):
    """Describes properties of a gateway resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param description: User readable description of the gateway.
    :type description: str
    :param source_network: Required. Network the gateway should listen on for
     requests.
    :type source_network: ~azure.mgmt.servicefabricmesh.models.NetworkRef
    :param destination_network: Required. Network that the Application is
     using.
    :type destination_network: ~azure.mgmt.servicefabricmesh.models.NetworkRef
    :param tcp: Configuration for tcp connectivity for this gateway.
    :type tcp: list[~azure.mgmt.servicefabricmesh.models.TcpConfig]
    :param http: Configuration for http connectivity for this gateway.
    :type http: list[~azure.mgmt.servicefabricmesh.models.HttpConfig]
    :ivar status: Status of the resource. Possible values include: 'Unknown',
     'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
    :vartype status: str or
     ~azure.mgmt.servicefabricmesh.models.ResourceStatus
    :ivar status_details: Gives additional information about the current
     status of the gateway.
    :vartype status_details: str
    :ivar ip_address: IP address of the gateway. This is populated in the
     response and is ignored for incoming requests.
    :vartype ip_address: str
    """

    _validation = {
        'source_network': {'required': True},
        'destination_network': {'required': True},
        'status': {'readonly': True},
        'status_details': {'readonly': True},
        'ip_address': {'readonly': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'source_network': {'key': 'sourceNetwork', 'type': 'NetworkRef'},
        'destination_network': {'key': 'destinationNetwork', 'type': 'NetworkRef'},
        'tcp': {'key': 'tcp', 'type': '[TcpConfig]'},
        'http': {'key': 'http', 'type': '[HttpConfig]'},
        'status': {'key': 'status', 'type': 'str'},
        'status_details': {'key': 'statusDetails', 'type': 'str'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(GatewayProperties, self).__init__(**kwargs)
        self.description = kwargs.get('description', None)
        self.source_network = kwargs.get('source_network', None)
        self.destination_network = kwargs.get('destination_network', None)
        self.tcp = kwargs.get('tcp', None)
        self.http = kwargs.get('http', None)
        self.status = None
        self.status_details = None
        self.ip_address = None


class GatewayResourceDescription(TrackedResource):
    """This type describes a gateway resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified identifier for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives
    :type location: str
    :ivar provisioning_state: State of the resource.
    :vartype provisioning_state: str
    :param description: User readable description of the gateway.
    :type description: str
    :param source_network: Required. Network the gateway should listen on for
     requests.
    :type source_network: ~azure.mgmt.servicefabricmesh.models.NetworkRef
    :param destination_network: Required. Network that the Application is
     using.
    :type destination_network: ~azure.mgmt.servicefabricmesh.models.NetworkRef
    :param tcp: Configuration for tcp connectivity for this gateway.
    :type tcp: list[~azure.mgmt.servicefabricmesh.models.TcpConfig]
    :param http: Configuration for http connectivity for this gateway.
    :type http: list[~azure.mgmt.servicefabricmesh.models.HttpConfig]
    :ivar status: Status of the resource. Possible values include: 'Unknown',
     'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
    :vartype status: str or
     ~azure.mgmt.servicefabricmesh.models.ResourceStatus
    :ivar status_details: Gives additional information about the current
     status of the gateway.
    :vartype status_details: str
    :ivar ip_address: IP address of the gateway. This is populated in the
     response and is ignored for incoming requests.
    :vartype ip_address: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'provisioning_state': {'readonly': True},
        'source_network': {'required': True},
        'destination_network': {'required': True},
        'status': {'readonly': True},
        'status_details': {'readonly': True},
        'ip_address': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'source_network': {'key': 'properties.sourceNetwork', 'type': 'NetworkRef'},
        'destination_network': {'key': 'properties.destinationNetwork', 'type': 'NetworkRef'},
        'tcp': {'key': 'properties.tcp', 'type': '[TcpConfig]'},
        'http': {'key': 'properties.http', 'type': '[HttpConfig]'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'status_details': {'key': 'properties.statusDetails', 'type': 'str'},
        'ip_address': {'key': 'properties.ipAddress', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(GatewayResourceDescription, self).__init__(**kwargs)
        self.provisioning_state = None
        self.description = kwargs.get('description', None)
        self.source_network = kwargs.get('source_network', None)
        self.destination_network = kwargs.get('destination_network', None)
        self.tcp = kwargs.get('tcp', None)
        self.http = kwargs.get('http', None)
        self.status = None
        self.status_details = None
        self.ip_address = None


class HttpConfig(Model):
    """Describes the http configuration for external connectivity for this
    network.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. http gateway config name.
    :type name: str
    :param port: Required. Specifies the port at which the service endpoint
     below needs to be exposed.
    :type port: int
    :param hosts: Required. description for routing.
    :type hosts: list[~azure.mgmt.servicefabricmesh.models.HttpHostConfig]
    """

    _validation = {
        'name': {'required': True},
        'port': {'required': True},
        'hosts': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'port': {'key': 'port', 'type': 'int'},
        'hosts': {'key': 'hosts', 'type': '[HttpHostConfig]'},
    }

    def __init__(self, **kwargs):
        super(HttpConfig, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.port = kwargs.get('port', None)
        self.hosts = kwargs.get('hosts', None)


class HttpHostConfig(Model):
    """Describes the hostname properties for http routing.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. http hostname config name.
    :type name: str
    :param routes: Required. Route information to use for routing. Routes are
     processed in the order they are specified. Specify routes that are more
     specific before routes that can handle general cases.
    :type routes: list[~azure.mgmt.servicefabricmesh.models.HttpRouteConfig]
    """

    _validation = {
        'name': {'required': True},
        'routes': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'routes': {'key': 'routes', 'type': '[HttpRouteConfig]'},
    }

    def __init__(self, **kwargs):
        super(HttpHostConfig, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.routes = kwargs.get('routes', None)


class HttpRouteConfig(Model):
    """Describes the hostname properties for http routing.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. http route name.
    :type name: str
    :param match: Required. Describes a rule for http route matching.
    :type match: ~azure.mgmt.servicefabricmesh.models.HttpRouteMatchRule
    :param destination: Required. Describes destination endpoint for routing
     traffic.
    :type destination: ~azure.mgmt.servicefabricmesh.models.GatewayDestination
    """

    _validation = {
        'name': {'required': True},
        'match': {'required': True},
        'destination': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'match': {'key': 'match', 'type': 'HttpRouteMatchRule'},
        'destination': {'key': 'destination', 'type': 'GatewayDestination'},
    }

    def __init__(self, **kwargs):
        super(HttpRouteConfig, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.match = kwargs.get('match', None)
        self.destination = kwargs.get('destination', None)


class HttpRouteMatchHeader(Model):
    """Describes header information for http route matching.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Name of header to match in request.
    :type name: str
    :param value: Value of header to match in request.
    :type value: str
    :param type: how to match header value. Possible values include: 'exact'
    :type type: str or ~azure.mgmt.servicefabricmesh.models.HeaderMatchType
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(HttpRouteMatchHeader, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.value = kwargs.get('value', None)
        self.type = kwargs.get('type', None)


class HttpRouteMatchPath(Model):
    """Path to match for routing.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. Uri path to match for request.
    :type value: str
    :param rewrite: replacement string for matched part of the Uri.
    :type rewrite: str
    :ivar type: Required. how to match value in the Uri. Default value:
     "prefix" .
    :vartype type: str
    """

    _validation = {
        'value': {'required': True},
        'type': {'required': True, 'constant': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
        'rewrite': {'key': 'rewrite', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    type = "prefix"

    def __init__(self, **kwargs):
        super(HttpRouteMatchPath, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.rewrite = kwargs.get('rewrite', None)


class HttpRouteMatchRule(Model):
    """Describes a rule for http route matching.

    All required parameters must be populated in order to send to Azure.

    :param path: Required. Path to match for routing.
    :type path: ~azure.mgmt.servicefabricmesh.models.HttpRouteMatchPath
    :param headers: headers and their values to match in request.
    :type headers:
     list[~azure.mgmt.servicefabricmesh.models.HttpRouteMatchHeader]
    """

    _validation = {
        'path': {'required': True},
    }

    _attribute_map = {
        'path': {'key': 'path', 'type': 'HttpRouteMatchPath'},
        'headers': {'key': 'headers', 'type': '[HttpRouteMatchHeader]'},
    }

    def __init__(self, **kwargs):
        super(HttpRouteMatchRule, self).__init__(**kwargs)
        self.path = kwargs.get('path', None)
        self.headers = kwargs.get('headers', None)


class ImageRegistryCredential(Model):
    """Image registry credential.

    All required parameters must be populated in order to send to Azure.

    :param server: Required. Docker image registry server, without protocol
     such as `http` and `https`.
    :type server: str
    :param username: Required. The username for the private registry.
    :type username: str
    :param password: The password for the private registry. The password is
     required for create or update operations, however it is not returned in
     the get or list operations.
    :type password: str
    """

    _validation = {
        'server': {'required': True},
        'username': {'required': True},
    }

    _attribute_map = {
        'server': {'key': 'server', 'type': 'str'},
        'username': {'key': 'username', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ImageRegistryCredential, self).__init__(**kwargs)
        self.server = kwargs.get('server', None)
        self.username = kwargs.get('username', None)
        self.password = kwargs.get('password', None)


class ProvisionedResourceProperties(Model):
    """Describes common properties of a provisioned resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar provisioning_state: State of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ProvisionedResourceProperties, self).__init__(**kwargs)
        self.provisioning_state = None


class SecretResourcePropertiesBase(ProvisionedResourceProperties):
    """This type describes the properties of a secret resource, including its
    kind.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: SecretResourceProperties

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar provisioning_state: State of the resource.
    :vartype provisioning_state: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'SecretResourceProperties': 'SecretResourceProperties'}
    }

    def __init__(self, **kwargs):
        super(SecretResourcePropertiesBase, self).__init__(**kwargs)
        self.kind = None
        self.kind = 'SecretResourcePropertiesBase'


class SecretResourceProperties(SecretResourcePropertiesBase):
    """Describes the properties of a secret resource.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: InlinedValueSecretResourceProperties

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar provisioning_state: State of the resource.
    :vartype provisioning_state: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param description: User readable description of the secret.
    :type description: str
    :ivar status: Status of the resource. Possible values include: 'Unknown',
     'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
    :vartype status: str or
     ~azure.mgmt.servicefabricmesh.models.ResourceStatus
    :ivar status_details: Gives additional information about the current
     status of the secret.
    :vartype status_details: str
    :param content_type: The type of the content stored in the secret value.
     The value of this property is opaque to Service Fabric. Once set, the
     value of this property cannot be changed.
    :type content_type: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'kind': {'required': True},
        'status': {'readonly': True},
        'status_details': {'readonly': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'status_details': {'key': 'statusDetails', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'inlinedValue': 'InlinedValueSecretResourceProperties'}
    }

    def __init__(self, **kwargs):
        super(SecretResourceProperties, self).__init__(**kwargs)
        self.description = kwargs.get('description', None)
        self.status = None
        self.status_details = None
        self.content_type = kwargs.get('content_type', None)
        self.kind = 'SecretResourceProperties'


class InlinedValueSecretResourceProperties(SecretResourceProperties):
    """Describes the properties of a secret resource whose value is provided
    explicitly as plaintext. The secret resource may have multiple values, each
    being uniquely versioned. The secret value of each version is stored
    encrypted, and delivered as plaintext into the context of applications
    referencing it.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar provisioning_state: State of the resource.
    :vartype provisioning_state: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param description: User readable description of the secret.
    :type description: str
    :ivar status: Status of the resource. Possible values include: 'Unknown',
     'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
    :vartype status: str or
     ~azure.mgmt.servicefabricmesh.models.ResourceStatus
    :ivar status_details: Gives additional information about the current
     status of the secret.
    :vartype status_details: str
    :param content_type: The type of the content stored in the secret value.
     The value of this property is opaque to Service Fabric. Once set, the
     value of this property cannot be changed.
    :type content_type: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'kind': {'required': True},
        'status': {'readonly': True},
        'status_details': {'readonly': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'status_details': {'key': 'statusDetails', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(InlinedValueSecretResourceProperties, self).__init__(**kwargs)
        self.kind = 'inlinedValue'


class NetworkResourcePropertiesBase(ProvisionedResourceProperties):
    """This type describes the properties of a network resource, including its
    kind.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: NetworkResourceProperties

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar provisioning_state: State of the resource.
    :vartype provisioning_state: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'NetworkResourceProperties': 'NetworkResourceProperties'}
    }

    def __init__(self, **kwargs):
        super(NetworkResourcePropertiesBase, self).__init__(**kwargs)
        self.kind = None
        self.kind = 'NetworkResourcePropertiesBase'


class NetworkResourceProperties(NetworkResourcePropertiesBase):
    """Describes properties of a network resource.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: LocalNetworkResourceProperties

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar provisioning_state: State of the resource.
    :vartype provisioning_state: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param description: User readable description of the network.
    :type description: str
    :ivar status: Status of the network. Possible values include: 'Unknown',
     'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
    :vartype status: str or
     ~azure.mgmt.servicefabricmesh.models.ResourceStatus
    :ivar status_details: Gives additional information about the current
     status of the network.
    :vartype status_details: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'kind': {'required': True},
        'status': {'readonly': True},
        'status_details': {'readonly': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'status_details': {'key': 'statusDetails', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'Local': 'LocalNetworkResourceProperties'}
    }

    def __init__(self, **kwargs):
        super(NetworkResourceProperties, self).__init__(**kwargs)
        self.description = kwargs.get('description', None)
        self.status = None
        self.status_details = None
        self.kind = 'NetworkResourceProperties'


class LocalNetworkResourceProperties(NetworkResourceProperties):
    """Information about a Service Fabric container network local to a single
    Service Fabric cluster.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar provisioning_state: State of the resource.
    :vartype provisioning_state: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param description: User readable description of the network.
    :type description: str
    :ivar status: Status of the network. Possible values include: 'Unknown',
     'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
    :vartype status: str or
     ~azure.mgmt.servicefabricmesh.models.ResourceStatus
    :ivar status_details: Gives additional information about the current
     status of the network.
    :vartype status_details: str
    :param network_address_prefix: Address space for the local container
     network.
    :type network_address_prefix: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'kind': {'required': True},
        'status': {'readonly': True},
        'status_details': {'readonly': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'status_details': {'key': 'statusDetails', 'type': 'str'},
        'network_address_prefix': {'key': 'networkAddressPrefix', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(LocalNetworkResourceProperties, self).__init__(**kwargs)
        self.network_address_prefix = kwargs.get('network_address_prefix', None)
        self.kind = 'Local'


class ManagedProxyResource(Model):
    """The resource model definition for Azure Resource Manager proxy resource. It
    will have everything other than required location and tags. This proxy
    resource is explicitly created or updated by including it in the parent
    resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified identifier for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :param name: The name of the resource
    :type name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ManagedProxyResource, self).__init__(**kwargs)
        self.id = None
        self.name = kwargs.get('name', None)
        self.type = None


class NetworkRef(Model):
    """Describes a network reference in a service.

    :param name: Name of the network
    :type name: str
    :param endpoint_refs: A list of endpoints that are exposed on this
     network.
    :type endpoint_refs:
     list[~azure.mgmt.servicefabricmesh.models.EndpointRef]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'endpoint_refs': {'key': 'endpointRefs', 'type': '[EndpointRef]'},
    }

    def __init__(self, **kwargs):
        super(NetworkRef, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.endpoint_refs = kwargs.get('endpoint_refs', None)


class NetworkResourceDescription(TrackedResource):
    """This type describes a network resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified identifier for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives
    :type location: str
    :param properties: Required. Describes properties of a network resource.
    :type properties:
     ~azure.mgmt.servicefabricmesh.models.NetworkResourceProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'properties': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'NetworkResourceProperties'},
    }

    def __init__(self, **kwargs):
        super(NetworkResourceDescription, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)


class OperationResult(Model):
    """List of operations available at the listed Azure resource provider.

    :param name: The name of the operation.
    :type name: str
    :param display: The object that represents the operation.
    :type display:
     ~azure.mgmt.servicefabricmesh.models.AvailableOperationDisplay
    :param origin: Origin result
    :type origin: str
    :param next_link: The URL to use for getting the next set of results.
    :type next_link: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'AvailableOperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(OperationResult, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display = kwargs.get('display', None)
        self.origin = kwargs.get('origin', None)
        self.next_link = kwargs.get('next_link', None)


class ProxyResource(Resource):
    """The resource model definition for Azure Resource Manager proxy resource. It
    will have everything other than required location and tags.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified identifier for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ProxyResource, self).__init__(**kwargs)


class ReliableCollectionsRef(Model):
    """Specifying this parameter adds support for reliable collections.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Name of ReliableCollection resource. Right now it's
     not used and you can use any string.
    :type name: str
    :param do_not_persist_state: False (the default) if ReliableCollections
     state is persisted to disk as usual. True if you do not want to persist
     state, in which case replication is still enabled and you can use
     ReliableCollections as distributed cache.
    :type do_not_persist_state: bool
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'do_not_persist_state': {'key': 'doNotPersistState', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(ReliableCollectionsRef, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.do_not_persist_state = kwargs.get('do_not_persist_state', None)


class ResourceLimits(Model):
    """This type describes the resource limits for a given container. It describes
    the most amount of resources a container is allowed to use before being
    restarted.

    :param memory_in_gb: The memory limit in GB.
    :type memory_in_gb: float
    :param cpu: CPU limits in cores. At present, only full cores are
     supported.
    :type cpu: float
    """

    _attribute_map = {
        'memory_in_gb': {'key': 'memoryInGB', 'type': 'float'},
        'cpu': {'key': 'cpu', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(ResourceLimits, self).__init__(**kwargs)
        self.memory_in_gb = kwargs.get('memory_in_gb', None)
        self.cpu = kwargs.get('cpu', None)


class ResourceRequests(Model):
    """This type describes the requested resources for a given container. It
    describes the least amount of resources required for the container. A
    container can consume more than requested resources up to the specified
    limits before being restarted. Currently, the requested resources are
    treated as limits.

    All required parameters must be populated in order to send to Azure.

    :param memory_in_gb: Required. The memory request in GB for this
     container.
    :type memory_in_gb: float
    :param cpu: Required. Requested number of CPU cores. At present, only full
     cores are supported.
    :type cpu: float
    """

    _validation = {
        'memory_in_gb': {'required': True},
        'cpu': {'required': True},
    }

    _attribute_map = {
        'memory_in_gb': {'key': 'memoryInGB', 'type': 'float'},
        'cpu': {'key': 'cpu', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(ResourceRequests, self).__init__(**kwargs)
        self.memory_in_gb = kwargs.get('memory_in_gb', None)
        self.cpu = kwargs.get('cpu', None)


class ResourceRequirements(Model):
    """This type describes the resource requirements for a container or a service.

    All required parameters must be populated in order to send to Azure.

    :param requests: Required. Describes the requested resources for a given
     container.
    :type requests: ~azure.mgmt.servicefabricmesh.models.ResourceRequests
    :param limits: Describes the maximum limits on the resources for a given
     container.
    :type limits: ~azure.mgmt.servicefabricmesh.models.ResourceLimits
    """

    _validation = {
        'requests': {'required': True},
    }

    _attribute_map = {
        'requests': {'key': 'requests', 'type': 'ResourceRequests'},
        'limits': {'key': 'limits', 'type': 'ResourceLimits'},
    }

    def __init__(self, **kwargs):
        super(ResourceRequirements, self).__init__(**kwargs)
        self.requests = kwargs.get('requests', None)
        self.limits = kwargs.get('limits', None)


class SecretResourceDescription(TrackedResource):
    """This type describes a secret resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified identifier for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives
    :type location: str
    :param properties: Required. Describes the properties of a secret
     resource.
    :type properties:
     ~azure.mgmt.servicefabricmesh.models.SecretResourceProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'properties': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'SecretResourceProperties'},
    }

    def __init__(self, **kwargs):
        super(SecretResourceDescription, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)


class SecretValue(Model):
    """This type represents the unencrypted value of the secret.

    :param value: The actual value of the secret.
    :type value: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SecretValue, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class SecretValueProperties(Model):
    """This type describes properties of secret value resource.

    :param value: The actual value of the secret.
    :type value: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SecretValueProperties, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class SecretValueResourceDescription(TrackedResource):
    """This type describes a value of a secret resource. The name of this resource
    is the version identifier corresponding to this secret value.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified identifier for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives
    :type location: str
    :ivar provisioning_state: State of the resource.
    :vartype provisioning_state: str
    :param value: The actual value of the secret.
    :type value: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'value': {'key': 'properties.value', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SecretValueResourceDescription, self).__init__(**kwargs)
        self.provisioning_state = None
        self.value = kwargs.get('value', None)


class ServiceProperties(Model):
    """Describes properties of a service resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param description: User readable description of the service.
    :type description: str
    :param replica_count: The number of replicas of the service to create.
     Defaults to 1 if not specified.
    :type replica_count: int
    :param auto_scaling_policies: Auto scaling policies
    :type auto_scaling_policies:
     list[~azure.mgmt.servicefabricmesh.models.AutoScalingPolicy]
    :ivar status: Status of the service. Possible values include: 'Unknown',
     'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
    :vartype status: str or
     ~azure.mgmt.servicefabricmesh.models.ResourceStatus
    :ivar status_details: Gives additional information about the current
     status of the service.
    :vartype status_details: str
    :ivar health_state: Describes the health state of an application resource.
     Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
    :vartype health_state: str or
     ~azure.mgmt.servicefabricmesh.models.HealthState
    :ivar unhealthy_evaluation: When the service's health state is not 'Ok',
     this additional details from service fabric Health Manager for the user to
     know why the service is marked unhealthy.
    :vartype unhealthy_evaluation: str
    """

    _validation = {
        'status': {'readonly': True},
        'status_details': {'readonly': True},
        'health_state': {'readonly': True},
        'unhealthy_evaluation': {'readonly': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'replica_count': {'key': 'replicaCount', 'type': 'int'},
        'auto_scaling_policies': {'key': 'autoScalingPolicies', 'type': '[AutoScalingPolicy]'},
        'status': {'key': 'status', 'type': 'str'},
        'status_details': {'key': 'statusDetails', 'type': 'str'},
        'health_state': {'key': 'healthState', 'type': 'str'},
        'unhealthy_evaluation': {'key': 'unhealthyEvaluation', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ServiceProperties, self).__init__(**kwargs)
        self.description = kwargs.get('description', None)
        self.replica_count = kwargs.get('replica_count', None)
        self.auto_scaling_policies = kwargs.get('auto_scaling_policies', None)
        self.status = None
        self.status_details = None
        self.health_state = None
        self.unhealthy_evaluation = None


class ServiceReplicaProperties(Model):
    """Describes the properties of a service replica.

    All required parameters must be populated in order to send to Azure.

    :param os_type: Required. The operation system required by the code in
     service. Possible values include: 'Linux', 'Windows'
    :type os_type: str or
     ~azure.mgmt.servicefabricmesh.models.OperatingSystemType
    :param code_packages: Required. Describes the set of code packages that
     forms the service. A code package describes the container and the
     properties for running it. All the code packages are started together on
     the same host and share the same context (network, process etc.).
    :type code_packages:
     list[~azure.mgmt.servicefabricmesh.models.ContainerCodePackageProperties]
    :param network_refs: The names of the private networks that this service
     needs to be part of.
    :type network_refs: list[~azure.mgmt.servicefabricmesh.models.NetworkRef]
    :param diagnostics: Reference to sinks in DiagnosticsDescription.
    :type diagnostics: ~azure.mgmt.servicefabricmesh.models.DiagnosticsRef
    """

    _validation = {
        'os_type': {'required': True},
        'code_packages': {'required': True},
    }

    _attribute_map = {
        'os_type': {'key': 'osType', 'type': 'str'},
        'code_packages': {'key': 'codePackages', 'type': '[ContainerCodePackageProperties]'},
        'network_refs': {'key': 'networkRefs', 'type': '[NetworkRef]'},
        'diagnostics': {'key': 'diagnostics', 'type': 'DiagnosticsRef'},
    }

    def __init__(self, **kwargs):
        super(ServiceReplicaProperties, self).__init__(**kwargs)
        self.os_type = kwargs.get('os_type', None)
        self.code_packages = kwargs.get('code_packages', None)
        self.network_refs = kwargs.get('network_refs', None)
        self.diagnostics = kwargs.get('diagnostics', None)


class ServiceReplicaDescription(ServiceReplicaProperties):
    """Describes a replica of a service resource.

    All required parameters must be populated in order to send to Azure.

    :param os_type: Required. The operation system required by the code in
     service. Possible values include: 'Linux', 'Windows'
    :type os_type: str or
     ~azure.mgmt.servicefabricmesh.models.OperatingSystemType
    :param code_packages: Required. Describes the set of code packages that
     forms the service. A code package describes the container and the
     properties for running it. All the code packages are started together on
     the same host and share the same context (network, process etc.).
    :type code_packages:
     list[~azure.mgmt.servicefabricmesh.models.ContainerCodePackageProperties]
    :param network_refs: The names of the private networks that this service
     needs to be part of.
    :type network_refs: list[~azure.mgmt.servicefabricmesh.models.NetworkRef]
    :param diagnostics: Reference to sinks in DiagnosticsDescription.
    :type diagnostics: ~azure.mgmt.servicefabricmesh.models.DiagnosticsRef
    :param replica_name: Required. Name of the replica.
    :type replica_name: str
    """

    _validation = {
        'os_type': {'required': True},
        'code_packages': {'required': True},
        'replica_name': {'required': True},
    }

    _attribute_map = {
        'os_type': {'key': 'osType', 'type': 'str'},
        'code_packages': {'key': 'codePackages', 'type': '[ContainerCodePackageProperties]'},
        'network_refs': {'key': 'networkRefs', 'type': '[NetworkRef]'},
        'diagnostics': {'key': 'diagnostics', 'type': 'DiagnosticsRef'},
        'replica_name': {'key': 'replicaName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ServiceReplicaDescription, self).__init__(**kwargs)
        self.replica_name = kwargs.get('replica_name', None)


class ServiceResourceDescription(ManagedProxyResource):
    """This type describes a service resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified identifier for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :param name: The name of the resource
    :type name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    :ivar provisioning_state: State of the resource.
    :vartype provisioning_state: str
    :param os_type: Required. The operation system required by the code in
     service. Possible values include: 'Linux', 'Windows'
    :type os_type: str or
     ~azure.mgmt.servicefabricmesh.models.OperatingSystemType
    :param code_packages: Required. Describes the set of code packages that
     forms the service. A code package describes the container and the
     properties for running it. All the code packages are started together on
     the same host and share the same context (network, process etc.).
    :type code_packages:
     list[~azure.mgmt.servicefabricmesh.models.ContainerCodePackageProperties]
    :param network_refs: The names of the private networks that this service
     needs to be part of.
    :type network_refs: list[~azure.mgmt.servicefabricmesh.models.NetworkRef]
    :param diagnostics: Reference to sinks in DiagnosticsDescription.
    :type diagnostics: ~azure.mgmt.servicefabricmesh.models.DiagnosticsRef
    :param description: User readable description of the service.
    :type description: str
    :param replica_count: The number of replicas of the service to create.
     Defaults to 1 if not specified.
    :type replica_count: int
    :param auto_scaling_policies: Auto scaling policies
    :type auto_scaling_policies:
     list[~azure.mgmt.servicefabricmesh.models.AutoScalingPolicy]
    :ivar status: Status of the service. Possible values include: 'Unknown',
     'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
    :vartype status: str or
     ~azure.mgmt.servicefabricmesh.models.ResourceStatus
    :ivar status_details: Gives additional information about the current
     status of the service.
    :vartype status_details: str
    :ivar health_state: Describes the health state of an application resource.
     Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
    :vartype health_state: str or
     ~azure.mgmt.servicefabricmesh.models.HealthState
    :ivar unhealthy_evaluation: When the service's health state is not 'Ok',
     this additional details from service fabric Health Manager for the user to
     know why the service is marked unhealthy.
    :vartype unhealthy_evaluation: str
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'os_type': {'required': True},
        'code_packages': {'required': True},
        'status': {'readonly': True},
        'status_details': {'readonly': True},
        'health_state': {'readonly': True},
        'unhealthy_evaluation': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'os_type': {'key': 'properties.osType', 'type': 'str'},
        'code_packages': {'key': 'properties.codePackages', 'type': '[ContainerCodePackageProperties]'},
        'network_refs': {'key': 'properties.networkRefs', 'type': '[NetworkRef]'},
        'diagnostics': {'key': 'properties.diagnostics', 'type': 'DiagnosticsRef'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'replica_count': {'key': 'properties.replicaCount', 'type': 'int'},
        'auto_scaling_policies': {'key': 'properties.autoScalingPolicies', 'type': '[AutoScalingPolicy]'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'status_details': {'key': 'properties.statusDetails', 'type': 'str'},
        'health_state': {'key': 'properties.healthState', 'type': 'str'},
        'unhealthy_evaluation': {'key': 'properties.unhealthyEvaluation', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ServiceResourceDescription, self).__init__(**kwargs)
        self.provisioning_state = None
        self.os_type = kwargs.get('os_type', None)
        self.code_packages = kwargs.get('code_packages', None)
        self.network_refs = kwargs.get('network_refs', None)
        self.diagnostics = kwargs.get('diagnostics', None)
        self.description = kwargs.get('description', None)
        self.replica_count = kwargs.get('replica_count', None)
        self.auto_scaling_policies = kwargs.get('auto_scaling_policies', None)
        self.status = None
        self.status_details = None
        self.health_state = None
        self.unhealthy_evaluation = None


class Setting(Model):
    """Describes a setting for the container. The setting file path can be fetched
    from environment variable "Fabric_SettingPath". The path for Windows
    container is "C:\\secrets". The path for Linux container is "/var/secrets".

    :param name: The name of the setting.
    :type name: str
    :param value: The value of the setting.
    :type value: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Setting, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.value = kwargs.get('value', None)


class TcpConfig(Model):
    """Describes the tcp configuration for external connectivity for this network.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. tcp gateway config name.
    :type name: str
    :param port: Required. Specifies the port at which the service endpoint
     below needs to be exposed.
    :type port: int
    :param destination: Required. Describes destination endpoint for routing
     traffic.
    :type destination: ~azure.mgmt.servicefabricmesh.models.GatewayDestination
    """

    _validation = {
        'name': {'required': True},
        'port': {'required': True},
        'destination': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'port': {'key': 'port', 'type': 'int'},
        'destination': {'key': 'destination', 'type': 'GatewayDestination'},
    }

    def __init__(self, **kwargs):
        super(TcpConfig, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.port = kwargs.get('port', None)
        self.destination = kwargs.get('destination', None)


class VolumeProperties(Model):
    """Describes properties of a volume resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param description: User readable description of the volume.
    :type description: str
    :ivar status: Status of the volume. Possible values include: 'Unknown',
     'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
    :vartype status: str or
     ~azure.mgmt.servicefabricmesh.models.ResourceStatus
    :ivar status_details: Gives additional information about the current
     status of the volume.
    :vartype status_details: str
    :ivar provider: Required. Provider of the volume. Default value:
     "SFAzureFile" .
    :vartype provider: str
    :param azure_file_parameters: This type describes a volume provided by an
     Azure Files file share.
    :type azure_file_parameters:
     ~azure.mgmt.servicefabricmesh.models.VolumeProviderParametersAzureFile
    """

    _validation = {
        'status': {'readonly': True},
        'status_details': {'readonly': True},
        'provider': {'required': True, 'constant': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'status_details': {'key': 'statusDetails', 'type': 'str'},
        'provider': {'key': 'provider', 'type': 'str'},
        'azure_file_parameters': {'key': 'azureFileParameters', 'type': 'VolumeProviderParametersAzureFile'},
    }

    provider = "SFAzureFile"

    def __init__(self, **kwargs):
        super(VolumeProperties, self).__init__(**kwargs)
        self.description = kwargs.get('description', None)
        self.status = None
        self.status_details = None
        self.azure_file_parameters = kwargs.get('azure_file_parameters', None)


class VolumeProviderParametersAzureFile(Model):
    """This type describes a volume provided by an Azure Files file share.

    All required parameters must be populated in order to send to Azure.

    :param account_name: Required. Name of the Azure storage account for the
     File Share.
    :type account_name: str
    :param account_key: Access key of the Azure storage account for the File
     Share.
    :type account_key: str
    :param share_name: Required. Name of the Azure Files file share that
     provides storage for the volume.
    :type share_name: str
    """

    _validation = {
        'account_name': {'required': True},
        'share_name': {'required': True},
    }

    _attribute_map = {
        'account_name': {'key': 'accountName', 'type': 'str'},
        'account_key': {'key': 'accountKey', 'type': 'str'},
        'share_name': {'key': 'shareName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(VolumeProviderParametersAzureFile, self).__init__(**kwargs)
        self.account_name = kwargs.get('account_name', None)
        self.account_key = kwargs.get('account_key', None)
        self.share_name = kwargs.get('share_name', None)


class VolumeResourceDescription(TrackedResource):
    """This type describes a volume resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified identifier for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives
    :type location: str
    :ivar provisioning_state: State of the resource.
    :vartype provisioning_state: str
    :param description: User readable description of the volume.
    :type description: str
    :ivar status: Status of the volume. Possible values include: 'Unknown',
     'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
    :vartype status: str or
     ~azure.mgmt.servicefabricmesh.models.ResourceStatus
    :ivar status_details: Gives additional information about the current
     status of the volume.
    :vartype status_details: str
    :ivar provider: Required. Provider of the volume. Default value:
     "SFAzureFile" .
    :vartype provider: str
    :param azure_file_parameters: This type describes a volume provided by an
     Azure Files file share.
    :type azure_file_parameters:
     ~azure.mgmt.servicefabricmesh.models.VolumeProviderParametersAzureFile
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'provisioning_state': {'readonly': True},
        'status': {'readonly': True},
        'status_details': {'readonly': True},
        'provider': {'required': True, 'constant': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'status_details': {'key': 'properties.statusDetails', 'type': 'str'},
        'provider': {'key': 'properties.provider', 'type': 'str'},
        'azure_file_parameters': {'key': 'properties.azureFileParameters', 'type': 'VolumeProviderParametersAzureFile'},
    }

    provider = "SFAzureFile"

    def __init__(self, **kwargs):
        super(VolumeResourceDescription, self).__init__(**kwargs)
        self.provisioning_state = None
        self.description = kwargs.get('description', None)
        self.status = None
        self.status_details = None
        self.azure_file_parameters = kwargs.get('azure_file_parameters', None)
