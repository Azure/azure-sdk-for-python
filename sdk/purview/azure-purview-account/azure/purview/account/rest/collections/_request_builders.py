# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING

from azure.core.pipeline.transport._base import _format_url_section
from azure.core.rest import HttpRequest
from msrest import Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Optional

_SERIALIZER = Serializer()

# fmt: off

def build_get_collection_request(
    collection_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Get a collection.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param collection_name:
    :type collection_name: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "collectionProvisioningState": "str (optional)",
                "description": "str (optional)",
                "friendlyName": "str (optional)",
                "name": "str (optional)",
                "parentCollection": {
                    "referenceName": "str (optional)",
                    "type": "str (optional)"
                },
                "systemData": {
                    "createdAt": "datetime (optional)",
                    "createdBy": "str (optional)",
                    "createdByType": "str (optional)",
                    "lastModifiedAt": "datetime (optional)",
                    "lastModifiedBy": "str (optional)",
                    "lastModifiedByType": "str (optional)"
                }
            }
    """

    api_version = "2019-11-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/collections/{collectionName}')
    path_format_arguments = {
        "collectionName": _SERIALIZER.url("collection_name", collection_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_create_or_update_collection_request(
    collection_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Creates or updates a collection entity.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param collection_name:
    :type collection_name: str
    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input).
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your body input.
            json = {
                "collectionProvisioningState": "str (optional)",
                "description": "str (optional)",
                "friendlyName": "str (optional)",
                "name": "str (optional)",
                "parentCollection": {
                    "referenceName": "str (optional)",
                    "type": "str (optional)"
                },
                "systemData": {
                    "createdAt": "datetime (optional)",
                    "createdBy": "str (optional)",
                    "createdByType": "str (optional)",
                    "lastModifiedAt": "datetime (optional)",
                    "lastModifiedBy": "str (optional)",
                    "lastModifiedByType": "str (optional)"
                }
            }

            # response body for status code(s): 200
            response.json() == {
                "collectionProvisioningState": "str (optional)",
                "description": "str (optional)",
                "friendlyName": "str (optional)",
                "name": "str (optional)",
                "parentCollection": {
                    "referenceName": "str (optional)",
                    "type": "str (optional)"
                },
                "systemData": {
                    "createdAt": "datetime (optional)",
                    "createdBy": "str (optional)",
                    "createdByType": "str (optional)",
                    "lastModifiedAt": "datetime (optional)",
                    "lastModifiedBy": "str (optional)",
                    "lastModifiedByType": "str (optional)"
                }
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2019-11-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/collections/{collectionName}')
    path_format_arguments = {
        "collectionName": _SERIALIZER.url("collection_name", collection_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_delete_collection_request(
    collection_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Deletes a Collection entity.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param collection_name:
    :type collection_name: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    api_version = "2019-11-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/collections/{collectionName}')
    path_format_arguments = {
        "collectionName": _SERIALIZER.url("collection_name", collection_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_list_collections_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """List the collections in the account.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword skip_token:
    :paramtype skip_token: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "count": "long (optional)",
                "nextLink": "str (optional)",
                "value": [
                    {
                        "collectionProvisioningState": "str (optional)",
                        "description": "str (optional)",
                        "friendlyName": "str (optional)",
                        "name": "str (optional)",
                        "parentCollection": {
                            "referenceName": "str (optional)",
                            "type": "str (optional)"
                        },
                        "systemData": {
                            "createdAt": "datetime (optional)",
                            "createdBy": "str (optional)",
                            "createdByType": "str (optional)",
                            "lastModifiedAt": "datetime (optional)",
                            "lastModifiedBy": "str (optional)",
                            "lastModifiedByType": "str (optional)"
                        }
                    }
                ]
            }
    """

    skip_token = kwargs.pop('skip_token', None)  # type: Optional[str]

    api_version = "2019-11-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/collections')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')
    if skip_token is not None:
        query_parameters['$skipToken'] = _SERIALIZER.query("skip_token", skip_token, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_list_child_collection_names_request(
    collection_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Lists the child collections names in the collection.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param collection_name:
    :type collection_name: str
    :keyword skip_token:
    :paramtype skip_token: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "count": "long (optional)",
                "nextLink": "str (optional)",
                "value": [
                    {
                        "friendlyName": "str (optional)",
                        "name": "str (optional)"
                    }
                ]
            }
    """

    skip_token = kwargs.pop('skip_token', None)  # type: Optional[str]

    api_version = "2019-11-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/collections/{collectionName}/getChildCollectionNames')
    path_format_arguments = {
        "collectionName": _SERIALIZER.url("collection_name", collection_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')
    if skip_token is not None:
        query_parameters['$skipToken'] = _SERIALIZER.query("skip_token", skip_token, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_get_collection_path_request(
    collection_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Gets the parent name and parent friendly name chains that represent the collection path.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param collection_name:
    :type collection_name: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "parentFriendlyNameChain": [
                    "str (optional)"
                ],
                "parentNameChain": [
                    "str (optional)"
                ]
            }
    """

    api_version = "2019-11-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/collections/{collectionName}/getCollectionPath')
    path_format_arguments = {
        "collectionName": _SERIALIZER.url("collection_name", collection_name, 'str'),
    }

    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )

