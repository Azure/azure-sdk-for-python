# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING

from azure.core.pipeline.transport._base import _format_url_section
from azure.core.rest import HttpRequest
from msrest import Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Optional

_SERIALIZER = Serializer()

# fmt: off

def build_get_request(
    business_rule_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Get a business rule model.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param business_rule_name:
    :type business_rule_name: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "businessRuleMetadata": {
                    "catalogId": "str (optional)",
                    "createTimestamp": "datetime (optional)",
                    "createdBy": "str (optional)",
                    "description": "str (optional)",
                    "expirationTimestamp": "datetime (optional)",
                    "friendlyName": "str (optional)",
                    "lastModifiedTimestamp": "datetime (optional)",
                    "modifiedBy": "str (optional)",
                    "name": "str (optional)",
                    "rank": "int (optional)",
                    "ruleStatus": "str (optional)",
                    "version": "int (optional)"
                },
                "name": "str (optional)",
                "ruleJson": "str (optional)"
            }
    """

    api_version = "2019-11-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/businessRules/{businessRuleName}')
    path_format_arguments = {
        'businessRuleName': _SERIALIZER.url("business_rule_name", business_rule_name, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_create_or_update_request(
    business_rule_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Creates or updates a businessRule.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param business_rule_name:
    :type business_rule_name: str
    :keyword json: Pass in a JSON-serializable object (usually a dictionary). See the template in
     our example to find the input shape.
    :paramtype json: any
    :keyword content: Pass in binary content you want in the body of the request (typically bytes,
     a byte iterator, or stream input).
    :paramtype content: any
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # JSON input template you can fill out and use as your `json` input.
            json = {
                "businessRuleMetadata": {
                    "catalogId": "str (optional)",
                    "createTimestamp": "datetime (optional)",
                    "createdBy": "str (optional)",
                    "description": "str (optional)",
                    "expirationTimestamp": "datetime (optional)",
                    "friendlyName": "str (optional)",
                    "lastModifiedTimestamp": "datetime (optional)",
                    "modifiedBy": "str (optional)",
                    "name": "str (optional)",
                    "rank": "int (optional)",
                    "ruleStatus": "str (optional)",
                    "version": "int (optional)"
                },
                "name": "str (optional)",
                "ruleJson": "str (optional)"
            }

            # response body for status code(s): 200
            response.json() == {
                "businessRuleMetadata": {
                    "catalogId": "str (optional)",
                    "createTimestamp": "datetime (optional)",
                    "createdBy": "str (optional)",
                    "description": "str (optional)",
                    "expirationTimestamp": "datetime (optional)",
                    "friendlyName": "str (optional)",
                    "lastModifiedTimestamp": "datetime (optional)",
                    "modifiedBy": "str (optional)",
                    "name": "str (optional)",
                    "rank": "int (optional)",
                    "ruleStatus": "str (optional)",
                    "version": "int (optional)"
                },
                "name": "str (optional)",
                "ruleJson": "str (optional)"
            }
    """

    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    api_version = "2019-11-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/businessRules/{businessRuleName}')
    path_format_arguments = {
        'businessRuleName': _SERIALIZER.url("business_rule_name", business_rule_name, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_delete_request(
    business_rule_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Deletes a BusinessRule resource.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param business_rule_name:
    :type business_rule_name: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest
    """

    api_version = "2019-11-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/businessRules/{businessRuleName}')
    path_format_arguments = {
        'businessRuleName': _SERIALIZER.url("business_rule_name", business_rule_name, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_list_by_account_request(
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """List the businessRules in the account.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :keyword metadata_only:
    :paramtype metadata_only: bool
    :keyword skip_token:
    :paramtype skip_token: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "count": "long (optional)",
                "nextLink": "str (optional)",
                "value": [
                    {
                        "businessRuleMetadata": {
                            "catalogId": "str (optional)",
                            "createTimestamp": "datetime (optional)",
                            "createdBy": "str (optional)",
                            "description": "str (optional)",
                            "expirationTimestamp": "datetime (optional)",
                            "friendlyName": "str (optional)",
                            "lastModifiedTimestamp": "datetime (optional)",
                            "modifiedBy": "str (optional)",
                            "name": "str (optional)",
                            "rank": "int (optional)",
                            "ruleStatus": "str (optional)",
                            "version": "int (optional)"
                        },
                        "name": "str (optional)",
                        "ruleJson": "str (optional)"
                    }
                ]
            }
    """

    metadata_only = kwargs.pop('metadata_only', False)  # type: Optional[bool]
    skip_token = kwargs.pop('skip_token', None)  # type: Optional[str]

    api_version = "2019-11-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/businessRules')

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')
    if metadata_only is not None:
        query_parameters['metadataOnly'] = _SERIALIZER.query("metadata_only", metadata_only, 'bool')
    if skip_token is not None:
        query_parameters['$skipToken'] = _SERIALIZER.query("skip_token", skip_token, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_enable_request(
    business_rule_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Enables a BusinessRule.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param business_rule_name:
    :type business_rule_name: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "businessRuleMetadata": {
                    "catalogId": "str (optional)",
                    "createTimestamp": "datetime (optional)",
                    "createdBy": "str (optional)",
                    "description": "str (optional)",
                    "expirationTimestamp": "datetime (optional)",
                    "friendlyName": "str (optional)",
                    "lastModifiedTimestamp": "datetime (optional)",
                    "modifiedBy": "str (optional)",
                    "name": "str (optional)",
                    "rank": "int (optional)",
                    "ruleStatus": "str (optional)",
                    "version": "int (optional)"
                },
                "name": "str (optional)",
                "ruleJson": "str (optional)"
            }
    """

    api_version = "2019-11-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/businessRules/{businessRuleName}/enable')
    path_format_arguments = {
        'businessRuleName': _SERIALIZER.url("business_rule_name", business_rule_name, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )


def build_disable_request(
    business_rule_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    """Disables a BusinessRule.

    See https://aka.ms/azsdk/python/protocol/quickstart for how to incorporate this request builder
    into your code flow.

    :param business_rule_name:
    :type business_rule_name: str
    :return: Returns an :class:`~azure.core.rest.HttpRequest` that you will pass to the client's
     `send_request` method. See https://aka.ms/azsdk/python/protocol/quickstart for how to
     incorporate this response into your code flow.
    :rtype: ~azure.core.rest.HttpRequest

    Example:
        .. code-block:: python

            # response body for status code(s): 200
            response.json() == {
                "businessRuleMetadata": {
                    "catalogId": "str (optional)",
                    "createTimestamp": "datetime (optional)",
                    "createdBy": "str (optional)",
                    "description": "str (optional)",
                    "expirationTimestamp": "datetime (optional)",
                    "friendlyName": "str (optional)",
                    "lastModifiedTimestamp": "datetime (optional)",
                    "modifiedBy": "str (optional)",
                    "name": "str (optional)",
                    "rank": "int (optional)",
                    "ruleStatus": "str (optional)",
                    "version": "int (optional)"
                },
                "name": "str (optional)",
                "ruleJson": "str (optional)"
            }
    """

    api_version = "2019-11-01-preview"
    accept = "application/json"
    # Construct URL
    url = kwargs.pop("template_url", '/businessRules/{businessRuleName}/disable')
    path_format_arguments = {
        'businessRuleName': _SERIALIZER.url("business_rule_name", business_rule_name, 'str'),
    }
    url = _format_url_section(url, **path_format_arguments)

    # Construct parameters
    query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=url,
        params=query_parameters,
        headers=header_parameters,
        **kwargs
    )

