# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import DataMapPreparer
from testpreparer_async import DataMapClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDataMapDiscoveryOperationsAsync(DataMapClientTestBaseAsync):
    @DataMapPreparer()
    @recorded_by_proxy_async
    async def test_discovery_query(self, datamap_endpoint):
        client = self.create_async_client(endpoint=datamap_endpoint)
        response = await client.discovery.query(
            body={
                "continuationToken": "str",
                "facets": [{"count": 0, "facet": "str", "sort": {"count": "str", "value": "str"}}],
                "filter": {},
                "keywords": "str",
                "limit": 0,
                "orderby": [{}],
                "taxonomySetting": {
                    "assetTypes": ["str"],
                    "facet": {"count": 0, "facet": "str", "sort": {"count": "str", "value": "str"}},
                },
            },
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy_async
    async def test_discovery_suggest(self, datamap_endpoint):
        client = self.create_async_client(endpoint=datamap_endpoint)
        response = await client.discovery.suggest(
            body={"filter": {}, "keywords": "str", "limit": 0},
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy_async
    async def test_discovery_auto_complete(self, datamap_endpoint):
        client = self.create_async_client(endpoint=datamap_endpoint)
        response = await client.discovery.auto_complete(
            body={"filter": {}, "keywords": "str", "limit": 0},
        )

        # please add some check logic here by yourself
        # ...
