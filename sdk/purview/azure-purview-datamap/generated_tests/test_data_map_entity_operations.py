# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils import recorded_by_proxy
from testpreparer import DataMapClientTestBase, DataMapPreparer


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDataMapEntityOperations(DataMapClientTestBase):
    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_create_or_update(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.create_or_update(
            body={
                "entity": {
                    "attributes": {"str": {}},
                    "businessAttributes": {"str": {}},
                    "classifications": [
                        {
                            "attributes": {"str": {}},
                            "entityGuid": "str",
                            "entityStatus": "str",
                            "lastModifiedTS": "str",
                            "removePropagationsOnEntityDelete": bool,
                            "typeName": "str",
                            "validityPeriods": [{"endTime": "str", "startTime": "str", "timeZone": "str"}],
                        }
                    ],
                    "collectionId": "str",
                    "contacts": {"str": [{"id": "str", "info": "str"}]},
                    "createTime": 0,
                    "createdBy": "str",
                    "customAttributes": {"str": "str"},
                    "guid": "str",
                    "homeId": "str",
                    "isIncomplete": bool,
                    "labels": ["str"],
                    "lastModifiedTS": "str",
                    "meanings": [
                        {
                            "confidence": 0,
                            "createdBy": "str",
                            "description": "str",
                            "displayText": "str",
                            "expression": "str",
                            "relationGuid": "str",
                            "status": "str",
                            "steward": "str",
                            "termGuid": "str",
                        }
                    ],
                    "provenanceType": 0,
                    "proxy": bool,
                    "relationshipAttributes": {"str": {}},
                    "status": "str",
                    "typeName": "str",
                    "updateTime": 0,
                    "updatedBy": "str",
                    "version": 0,
                },
                "referredEntities": {
                    "str": {
                        "attributes": {"str": {}},
                        "businessAttributes": {"str": {}},
                        "classifications": [
                            {
                                "attributes": {"str": {}},
                                "entityGuid": "str",
                                "entityStatus": "str",
                                "lastModifiedTS": "str",
                                "removePropagationsOnEntityDelete": bool,
                                "typeName": "str",
                                "validityPeriods": [{"endTime": "str", "startTime": "str", "timeZone": "str"}],
                            }
                        ],
                        "collectionId": "str",
                        "contacts": {"str": [{"id": "str", "info": "str"}]},
                        "createTime": 0,
                        "createdBy": "str",
                        "customAttributes": {"str": "str"},
                        "guid": "str",
                        "homeId": "str",
                        "isIncomplete": bool,
                        "labels": ["str"],
                        "lastModifiedTS": "str",
                        "meanings": [
                            {
                                "confidence": 0,
                                "createdBy": "str",
                                "description": "str",
                                "displayText": "str",
                                "expression": "str",
                                "relationGuid": "str",
                                "status": "str",
                                "steward": "str",
                                "termGuid": "str",
                            }
                        ],
                        "provenanceType": 0,
                        "proxy": bool,
                        "relationshipAttributes": {"str": {}},
                        "status": "str",
                        "typeName": "str",
                        "updateTime": 0,
                        "updatedBy": "str",
                        "version": 0,
                    }
                },
            },
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_get_by_ids(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.get_by_ids(
            guid=["str"],
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_batch_create_or_update(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.batch_create_or_update(
            body={
                "entities": [
                    {
                        "attributes": {"str": {}},
                        "businessAttributes": {"str": {}},
                        "classifications": [
                            {
                                "attributes": {"str": {}},
                                "entityGuid": "str",
                                "entityStatus": "str",
                                "lastModifiedTS": "str",
                                "removePropagationsOnEntityDelete": bool,
                                "typeName": "str",
                                "validityPeriods": [{"endTime": "str", "startTime": "str", "timeZone": "str"}],
                            }
                        ],
                        "collectionId": "str",
                        "contacts": {"str": [{"id": "str", "info": "str"}]},
                        "createTime": 0,
                        "createdBy": "str",
                        "customAttributes": {"str": "str"},
                        "guid": "str",
                        "homeId": "str",
                        "isIncomplete": bool,
                        "labels": ["str"],
                        "lastModifiedTS": "str",
                        "meanings": [
                            {
                                "confidence": 0,
                                "createdBy": "str",
                                "description": "str",
                                "displayText": "str",
                                "expression": "str",
                                "relationGuid": "str",
                                "status": "str",
                                "steward": "str",
                                "termGuid": "str",
                            }
                        ],
                        "provenanceType": 0,
                        "proxy": bool,
                        "relationshipAttributes": {"str": {}},
                        "status": "str",
                        "typeName": "str",
                        "updateTime": 0,
                        "updatedBy": "str",
                        "version": 0,
                    }
                ],
                "referredEntities": {
                    "str": {
                        "attributes": {"str": {}},
                        "businessAttributes": {"str": {}},
                        "classifications": [
                            {
                                "attributes": {"str": {}},
                                "entityGuid": "str",
                                "entityStatus": "str",
                                "lastModifiedTS": "str",
                                "removePropagationsOnEntityDelete": bool,
                                "typeName": "str",
                                "validityPeriods": [{"endTime": "str", "startTime": "str", "timeZone": "str"}],
                            }
                        ],
                        "collectionId": "str",
                        "contacts": {"str": [{"id": "str", "info": "str"}]},
                        "createTime": 0,
                        "createdBy": "str",
                        "customAttributes": {"str": "str"},
                        "guid": "str",
                        "homeId": "str",
                        "isIncomplete": bool,
                        "labels": ["str"],
                        "lastModifiedTS": "str",
                        "meanings": [
                            {
                                "confidence": 0,
                                "createdBy": "str",
                                "description": "str",
                                "displayText": "str",
                                "expression": "str",
                                "relationGuid": "str",
                                "status": "str",
                                "steward": "str",
                                "termGuid": "str",
                            }
                        ],
                        "provenanceType": 0,
                        "proxy": bool,
                        "relationshipAttributes": {"str": {}},
                        "status": "str",
                        "typeName": "str",
                        "updateTime": 0,
                        "updatedBy": "str",
                        "version": 0,
                    }
                },
            },
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_batch_delete(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.batch_delete(
            guid=["str"],
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_add_classification(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.add_classification(
            body={
                "classification": {
                    "attributes": {"str": {}},
                    "entityGuid": "str",
                    "entityStatus": "str",
                    "lastModifiedTS": "str",
                    "removePropagationsOnEntityDelete": bool,
                    "typeName": "str",
                    "validityPeriods": [{"endTime": "str", "startTime": "str", "timeZone": "str"}],
                },
                "entityGuids": ["str"],
            },
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_get(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.get(
            guid="str",
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_update_attribute_by_id(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.update_attribute_by_id(
            guid="str",
            body={},
            name="str",
            content_type="str",
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_delete(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.delete(
            guid="str",
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_get_classification(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.get_classification(
            guid="str",
            classification_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_remove_classification(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.remove_classification(
            guid="str",
            classification_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_get_classifications(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.get_classifications(
            guid="str",
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_add_classifications(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.add_classifications(
            guid="str",
            body=[
                {
                    "attributes": {"str": {}},
                    "entityGuid": "str",
                    "entityStatus": "str",
                    "lastModifiedTS": "str",
                    "removePropagationsOnEntityDelete": bool,
                    "typeName": "str",
                    "validityPeriods": [{"endTime": "str", "startTime": "str", "timeZone": "str"}],
                }
            ],
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_update_classifications(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.update_classifications(
            guid="str",
            body=[
                {
                    "attributes": {"str": {}},
                    "entityGuid": "str",
                    "entityStatus": "str",
                    "lastModifiedTS": "str",
                    "removePropagationsOnEntityDelete": bool,
                    "typeName": "str",
                    "validityPeriods": [{"endTime": "str", "startTime": "str", "timeZone": "str"}],
                }
            ],
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_get_by_unique_attribute(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.get_by_unique_attribute(
            type_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_update_by_unique_attribute(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.update_by_unique_attribute(
            type_name="str",
            body={
                "entity": {
                    "attributes": {"str": {}},
                    "businessAttributes": {"str": {}},
                    "classifications": [
                        {
                            "attributes": {"str": {}},
                            "entityGuid": "str",
                            "entityStatus": "str",
                            "lastModifiedTS": "str",
                            "removePropagationsOnEntityDelete": bool,
                            "typeName": "str",
                            "validityPeriods": [{"endTime": "str", "startTime": "str", "timeZone": "str"}],
                        }
                    ],
                    "collectionId": "str",
                    "contacts": {"str": [{"id": "str", "info": "str"}]},
                    "createTime": 0,
                    "createdBy": "str",
                    "customAttributes": {"str": "str"},
                    "guid": "str",
                    "homeId": "str",
                    "isIncomplete": bool,
                    "labels": ["str"],
                    "lastModifiedTS": "str",
                    "meanings": [
                        {
                            "confidence": 0,
                            "createdBy": "str",
                            "description": "str",
                            "displayText": "str",
                            "expression": "str",
                            "relationGuid": "str",
                            "status": "str",
                            "steward": "str",
                            "termGuid": "str",
                        }
                    ],
                    "provenanceType": 0,
                    "proxy": bool,
                    "relationshipAttributes": {"str": {}},
                    "status": "str",
                    "typeName": "str",
                    "updateTime": 0,
                    "updatedBy": "str",
                    "version": 0,
                },
                "referredEntities": {
                    "str": {
                        "attributes": {"str": {}},
                        "businessAttributes": {"str": {}},
                        "classifications": [
                            {
                                "attributes": {"str": {}},
                                "entityGuid": "str",
                                "entityStatus": "str",
                                "lastModifiedTS": "str",
                                "removePropagationsOnEntityDelete": bool,
                                "typeName": "str",
                                "validityPeriods": [{"endTime": "str", "startTime": "str", "timeZone": "str"}],
                            }
                        ],
                        "collectionId": "str",
                        "contacts": {"str": [{"id": "str", "info": "str"}]},
                        "createTime": 0,
                        "createdBy": "str",
                        "customAttributes": {"str": "str"},
                        "guid": "str",
                        "homeId": "str",
                        "isIncomplete": bool,
                        "labels": ["str"],
                        "lastModifiedTS": "str",
                        "meanings": [
                            {
                                "confidence": 0,
                                "createdBy": "str",
                                "description": "str",
                                "displayText": "str",
                                "expression": "str",
                                "relationGuid": "str",
                                "status": "str",
                                "steward": "str",
                                "termGuid": "str",
                            }
                        ],
                        "provenanceType": 0,
                        "proxy": bool,
                        "relationshipAttributes": {"str": {}},
                        "status": "str",
                        "typeName": "str",
                        "updateTime": 0,
                        "updatedBy": "str",
                        "version": 0,
                    }
                },
            },
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_delete_by_unique_attribute(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.delete_by_unique_attribute(
            type_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_remove_classification_by_unique_attribute(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.remove_classification_by_unique_attribute(
            type_name="str",
            classification_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_add_classifications_by_unique_attribute(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.add_classifications_by_unique_attribute(
            type_name="str",
            body=[
                {
                    "attributes": {"str": {}},
                    "entityGuid": "str",
                    "entityStatus": "str",
                    "lastModifiedTS": "str",
                    "removePropagationsOnEntityDelete": bool,
                    "typeName": "str",
                    "validityPeriods": [{"endTime": "str", "startTime": "str", "timeZone": "str"}],
                }
            ],
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_update_classifications_unique_by_attribute(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.update_classifications_unique_by_attribute(
            type_name="str",
            body=[
                {
                    "attributes": {"str": {}},
                    "entityGuid": "str",
                    "entityStatus": "str",
                    "lastModifiedTS": "str",
                    "removePropagationsOnEntityDelete": bool,
                    "typeName": "str",
                    "validityPeriods": [{"endTime": "str", "startTime": "str", "timeZone": "str"}],
                }
            ],
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_batch_set_classifications(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.batch_set_classifications(
            body={
                "guidHeaderMap": {
                    "str": {
                        "attributes": {"str": {}},
                        "classificationNames": ["str"],
                        "classifications": [
                            {
                                "attributes": {"str": {}},
                                "entityGuid": "str",
                                "entityStatus": "str",
                                "lastModifiedTS": "str",
                                "removePropagationsOnEntityDelete": bool,
                                "typeName": "str",
                                "validityPeriods": [{"endTime": "str", "startTime": "str", "timeZone": "str"}],
                            }
                        ],
                        "displayText": "str",
                        "guid": "str",
                        "isIncomplete": bool,
                        "labels": ["str"],
                        "lastModifiedTS": "str",
                        "meaningNames": ["str"],
                        "meanings": [
                            {
                                "confidence": 0,
                                "createdBy": "str",
                                "description": "str",
                                "displayText": "str",
                                "expression": "str",
                                "relationGuid": "str",
                                "status": "str",
                                "steward": "str",
                                "termGuid": "str",
                            }
                        ],
                        "status": "str",
                        "typeName": "str",
                    }
                }
            },
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_batch_get_by_unique_attributes(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.batch_get_by_unique_attributes(
            type_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_get_header(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.get_header(
            guid="str",
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_remove_business_metadata(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.remove_business_metadata(
            guid="str",
            body={"str": {"str": {}}},
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_add_or_update_business_metadata(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.add_or_update_business_metadata(
            guid="str",
            body={"str": {"str": {}}},
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_remove_business_metadata_attributes(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.remove_business_metadata_attributes(
            business_metadata_name="str",
            guid="str",
            body={"str": {}},
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_add_or_update_business_metadata_attributes(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.add_or_update_business_metadata_attributes(
            business_metadata_name="str",
            guid="str",
            body={"str": {}},
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_get_business_metadata_template(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.get_business_metadata_template()

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_import_business_metadata(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.import_business_metadata(
            body={"file": "filetype"},
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_remove_labels(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.remove_labels(
            guid="str",
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_set_labels(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.set_labels(
            guid="str",
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_add_label(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.add_label(
            guid="str",
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_remove_labels_by_unique_attribute(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.remove_labels_by_unique_attribute(
            type_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_set_labels_by_unique_attribute(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.set_labels_by_unique_attribute(
            type_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_add_labels_by_unique_attribute(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.add_labels_by_unique_attribute(
            type_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @DataMapPreparer()
    @recorded_by_proxy
    def test_entity_move_entities_to_collection(self, datamap_endpoint):
        client = self.create_client(endpoint=datamap_endpoint)
        response = client.entity.move_entities_to_collection(
            body={"entityGuids": ["str"]},
            collection_id="str",
        )

        # please add some check logic here by yourself
        # ...
