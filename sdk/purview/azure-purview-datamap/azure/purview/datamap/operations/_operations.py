# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import sys
from typing import Any, Callable, Dict, IO, Iterator, List, Optional, TypeVar, Union, cast, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .._serialization import Serializer
from .._vendor import raise_if_not_implemented

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_entity_create_or_update_request(
    *, business_attribute_update_behavior: Optional[str] = None, collection_id: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Optional[str] = kwargs.pop("api_version", _params.pop("api-version", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity"

    # Construct parameters
    if business_attribute_update_behavior is not None:
        _params["businessAttributeUpdateBehavior"] = _SERIALIZER.query(
            "business_attribute_update_behavior", business_attribute_update_behavior, "str"
        )
    if collection_id is not None:
        _params["collectionId"] = _SERIALIZER.query("collection_id", collection_id, "str")
    if api_version is not None:
        _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_entity_list_by_guids_request(
    *, guids: List[str], min_ext_info: bool = False, ignore_relationships: bool = False, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Optional[str] = kwargs.pop("api_version", _params.pop("api-version", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/bulk"

    # Construct parameters
    _params["guid"] = [_SERIALIZER.query("guids", q, "str") if q is not None else "" for q in guids]
    if min_ext_info is not None:
        _params["minExtInfo"] = _SERIALIZER.query("min_ext_info", min_ext_info, "bool")
    if ignore_relationships is not None:
        _params["ignoreRelationships"] = _SERIALIZER.query("ignore_relationships", ignore_relationships, "bool")
    if api_version is not None:
        _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_entity_bulk_create_or_update_request(  # pylint: disable=name-too-long
    *, collection_id: Optional[str] = None, business_attribute_update_behavior: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Optional[str] = kwargs.pop("api_version", _params.pop("api-version", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/bulk"

    # Construct parameters
    if collection_id is not None:
        _params["collectionId"] = _SERIALIZER.query("collection_id", collection_id, "str")
    if api_version is not None:
        _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if business_attribute_update_behavior is not None:
        _params["businessAttributeUpdateBehavior"] = _SERIALIZER.query(
            "business_attribute_update_behavior", business_attribute_update_behavior, "str"
        )

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_entity_bulk_delete_request(*, guids: List[str], **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/bulk"

    # Construct parameters
    _params["guid"] = [_SERIALIZER.query("guids", q, "str") if q is not None else "" for q in guids]

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_entity_add_classification_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/bulk/classification"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_entity_get_request(
    guid: str, *, min_ext_info: bool = False, ignore_relationships: bool = False, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if min_ext_info is not None:
        _params["minExtInfo"] = _SERIALIZER.query("min_ext_info", min_ext_info, "bool")
    if ignore_relationships is not None:
        _params["ignoreRelationships"] = _SERIALIZER.query("ignore_relationships", ignore_relationships, "bool")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_entity_partial_update_attribute_by_guid_request(  # pylint: disable=name-too-long
    guid: str, *, name: str, json: JSON, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["name"] = _SERIALIZER.query("name", name, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, json=json, **kwargs)


def build_entity_delete_request(guid: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, headers=_headers, **kwargs)


def build_entity_get_classification_request(guid: str, classification_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/classification/{classificationName}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
        "classificationName": _SERIALIZER.url(
            "classification_name", classification_name, "str", max_length=4096, min_length=1
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_entity_remove_classification_request(  # pylint: disable=name-too-long
    guid: str, classification_name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/classification/{classificationName}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
        "classificationName": _SERIALIZER.url(
            "classification_name", classification_name, "str", max_length=4096, min_length=1
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, headers=_headers, **kwargs)


def build_entity_get_classifications_request(guid: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/classifications"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_entity_add_classifications_request(guid: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/classifications"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_entity_update_classifications_request(  # pylint: disable=name-too-long
    guid: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/classifications"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, headers=_headers, **kwargs)


def build_entity_get_by_unique_attributes_request(  # pylint: disable=name-too-long
    type_name: str,
    *,
    min_ext_info: bool = False,
    ignore_relationships: bool = False,
    attr_qualified_name: Optional[str] = None,
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/uniqueAttribute/type/{typeName}"
    path_format_arguments = {
        "typeName": _SERIALIZER.url("type_name", type_name, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if min_ext_info is not None:
        _params["minExtInfo"] = _SERIALIZER.query("min_ext_info", min_ext_info, "bool")
    if ignore_relationships is not None:
        _params["ignoreRelationships"] = _SERIALIZER.query("ignore_relationships", ignore_relationships, "bool")
    if attr_qualified_name is not None:
        _params["attr:qualifiedName"] = _SERIALIZER.query("attr_qualified_name", attr_qualified_name, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_entity_partial_update_by_unique_attributes_request(  # pylint: disable=name-too-long
    type_name: str, *, attr_qualified_name: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/uniqueAttribute/type/{typeName}"
    path_format_arguments = {
        "typeName": _SERIALIZER.url("type_name", type_name, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if attr_qualified_name is not None:
        _params["attr:qualifiedName"] = _SERIALIZER.query("attr_qualified_name", attr_qualified_name, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_entity_delete_by_unique_attribute_request(  # pylint: disable=name-too-long
    type_name: str, *, attr_qualified_name: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/uniqueAttribute/type/{typeName}"
    path_format_arguments = {
        "typeName": _SERIALIZER.url("type_name", type_name, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if attr_qualified_name is not None:
        _params["attr:qualifiedName"] = _SERIALIZER.query("attr_qualified_name", attr_qualified_name, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_entity_remove_classification_by_unique_attribute_request(  # pylint: disable=name-too-long
    type_name: str, classification_name: str, *, attr_qualified_name: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/uniqueAttribute/type/{typeName}/classification/{classificationName}"
    path_format_arguments = {
        "typeName": _SERIALIZER.url("type_name", type_name, "str", max_length=4096, min_length=1),
        "classificationName": _SERIALIZER.url(
            "classification_name", classification_name, "str", max_length=4096, min_length=1
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if attr_qualified_name is not None:
        _params["attr:qualifiedName"] = _SERIALIZER.query("attr_qualified_name", attr_qualified_name, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_entity_add_classifications_by_unique_attribute_request(  # pylint: disable=name-too-long
    type_name: str, *, attr_qualified_name: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/uniqueAttribute/type/{typeName}/classifications"
    path_format_arguments = {
        "typeName": _SERIALIZER.url("type_name", type_name, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if attr_qualified_name is not None:
        _params["attr:qualifiedName"] = _SERIALIZER.query("attr_qualified_name", attr_qualified_name, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_entity_update_classifications_by_unique_attribute_request(  # pylint: disable=name-too-long
    type_name: str, *, attr_qualified_name: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/uniqueAttribute/type/{typeName}/classifications"
    path_format_arguments = {
        "typeName": _SERIALIZER.url("type_name", type_name, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if attr_qualified_name is not None:
        _params["attr:qualifiedName"] = _SERIALIZER.query("attr_qualified_name", attr_qualified_name, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_entity_bulk_set_classifications_request(**kwargs: Any) -> HttpRequest:  # pylint: disable=name-too-long
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/bulk/setClassifications"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_entity_list_by_unique_attributes_request(  # pylint: disable=name-too-long
    type_name: str,
    *,
    min_ext_info: bool = False,
    ignore_relationships: bool = False,
    attr_n_qualified_name: Optional[str] = None,
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/bulk/uniqueAttribute/type/{typeName}"
    path_format_arguments = {
        "typeName": _SERIALIZER.url("type_name", type_name, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if min_ext_info is not None:
        _params["minExtInfo"] = _SERIALIZER.query("min_ext_info", min_ext_info, "bool")
    if ignore_relationships is not None:
        _params["ignoreRelationships"] = _SERIALIZER.query("ignore_relationships", ignore_relationships, "bool")
    if attr_n_qualified_name is not None:
        _params["attr_N:qualifiedName"] = _SERIALIZER.query("attr_n_qualified_name", attr_n_qualified_name, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_entity_get_header_request(guid: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/header"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_entity_remove_business_metadata_request(  # pylint: disable=name-too-long
    guid: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/businessmetadata"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, headers=_headers, **kwargs)


def build_entity_add_or_update_business_metadata_request(  # pylint: disable=name-too-long
    guid: str, *, is_overwrite: Optional[bool] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/businessmetadata"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if is_overwrite is not None:
        _params["isOverwrite"] = _SERIALIZER.query("is_overwrite", is_overwrite, "bool")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_entity_remove_business_metadata_attributes_request(  # pylint: disable=name-too-long
    bm_name: str, guid: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/businessmetadata/{bmName}"
    path_format_arguments = {
        "bmName": _SERIALIZER.url("bm_name", bm_name, "str"),
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, headers=_headers, **kwargs)


def build_entity_add_or_update_business_metadata_attributes_request(  # pylint: disable=name-too-long
    bm_name: str, guid: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/businessmetadata/{bmName}"
    path_format_arguments = {
        "bmName": _SERIALIZER.url("bm_name", bm_name, "str"),
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_entity_get_sample_business_metadata_template_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/octet-stream")

    # Construct URL
    _url = "/atlas/v2/entity/businessmetadata/import/template"

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_entity_remove_labels_request(guid: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/labels"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, headers=_headers, **kwargs)


def build_entity_set_labels_request(guid: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/labels"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_entity_add_label_request(guid: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/guid/{guid}/labels"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, headers=_headers, **kwargs)


def build_entity_remove_labels_by_unique_attribute_request(  # pylint: disable=name-too-long
    type_name: str, *, attr_qualified_name: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/uniqueAttribute/type/{typeName}/labels"
    path_format_arguments = {
        "typeName": _SERIALIZER.url("type_name", type_name, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if attr_qualified_name is not None:
        _params["attr:qualifiedName"] = _SERIALIZER.query("attr_qualified_name", attr_qualified_name, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_entity_set_labels_by_unique_attribute_request(  # pylint: disable=name-too-long
    type_name: str, *, attr_qualified_name: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/uniqueAttribute/type/{typeName}/labels"
    path_format_arguments = {
        "typeName": _SERIALIZER.url("type_name", type_name, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if attr_qualified_name is not None:
        _params["attr:qualifiedName"] = _SERIALIZER.query("attr_qualified_name", attr_qualified_name, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_entity_add_labels_by_unique_attribute_request(  # pylint: disable=name-too-long
    type_name: str, *, attr_qualified_name: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/entity/uniqueAttribute/type/{typeName}/labels"
    path_format_arguments = {
        "typeName": _SERIALIZER.url("type_name", type_name, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if attr_qualified_name is not None:
        _params["attr:qualifiedName"] = _SERIALIZER.query("attr_qualified_name", attr_qualified_name, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_entity_move_entities_to_collection_request(  # pylint: disable=name-too-long
    *, collection_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Optional[str] = kwargs.pop("api_version", _params.pop("api-version", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/entity/moveTo"

    # Construct parameters
    _params["collectionId"] = _SERIALIZER.query("collection_id", collection_id, "str")
    if api_version is not None:
        _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_glossary_list_request(
    *,
    limit: Optional[int] = None,
    offset: Optional[int] = None,
    sort: str = "ASC",
    ignore_terms_and_categories: bool = False,
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Optional[str] = kwargs.pop("api_version", _params.pop("api-version", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary"

    # Construct parameters
    if limit is not None:
        _params["limit"] = _SERIALIZER.query("limit", limit, "int")
    if offset is not None:
        _params["offset"] = _SERIALIZER.query("offset", offset, "int")
    if sort is not None:
        _params["sort"] = _SERIALIZER.query("sort", sort, "str")
    if ignore_terms_and_categories is not None:
        _params["ignoreTermsAndCategories"] = _SERIALIZER.query(
            "ignore_terms_and_categories", ignore_terms_and_categories, "bool"
        )
    if api_version is not None:
        _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_glossary_create_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_glossary_create_categories_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/categories"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_glossary_create_category_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/category"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_glossary_get_category_request(category_guid: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/category/{categoryGuid}"
    path_format_arguments = {
        "categoryGuid": _SERIALIZER.url("category_guid", category_guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_glossary_update_category_request(category_guid: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/category/{categoryGuid}"
    path_format_arguments = {
        "categoryGuid": _SERIALIZER.url("category_guid", category_guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, headers=_headers, **kwargs)


def build_glossary_delete_category_request(category_guid: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/category/{categoryGuid}"
    path_format_arguments = {
        "categoryGuid": _SERIALIZER.url("category_guid", category_guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, headers=_headers, **kwargs)


def build_glossary_partial_update_category_request(  # pylint: disable=name-too-long
    category_guid: str, *, json: JSON, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/category/{categoryGuid}/partial"
    path_format_arguments = {
        "categoryGuid": _SERIALIZER.url("category_guid", category_guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, headers=_headers, json=json, **kwargs)


def build_glossary_list_related_categories_request(  # pylint: disable=name-too-long
    category_guid: str, *, limit: Optional[int] = None, offset: Optional[int] = None, sort: str = "ASC", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/category/{categoryGuid}/related"
    path_format_arguments = {
        "categoryGuid": _SERIALIZER.url("category_guid", category_guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if limit is not None:
        _params["limit"] = _SERIALIZER.query("limit", limit, "int")
    if offset is not None:
        _params["offset"] = _SERIALIZER.query("offset", offset, "int")
    if sort is not None:
        _params["sort"] = _SERIALIZER.query("sort", sort, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_glossary_list_category_terms_request(  # pylint: disable=name-too-long
    category_guid: str, *, limit: Optional[int] = None, offset: Optional[int] = None, sort: str = "ASC", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/category/{categoryGuid}/terms"
    path_format_arguments = {
        "categoryGuid": _SERIALIZER.url("category_guid", category_guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if limit is not None:
        _params["limit"] = _SERIALIZER.query("limit", limit, "int")
    if offset is not None:
        _params["offset"] = _SERIALIZER.query("offset", offset, "int")
    if sort is not None:
        _params["sort"] = _SERIALIZER.query("sort", sort, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_glossary_create_term_request(*, include_term_hierarchy: bool = False, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/term"

    # Construct parameters
    if include_term_hierarchy is not None:
        _params["includeTermHierarchy"] = _SERIALIZER.query("include_term_hierarchy", include_term_hierarchy, "bool")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_glossary_get_term_request(term_guid: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Optional[str] = kwargs.pop("api_version", _params.pop("api-version", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/term/{termGuid}"
    path_format_arguments = {
        "termGuid": _SERIALIZER.url("term_guid", term_guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if api_version is not None:
        _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_glossary_update_term_request(
    term_guid: str, *, include_term_hierarchy: bool = False, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Optional[str] = kwargs.pop("api_version", _params.pop("api-version", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/term/{termGuid}"
    path_format_arguments = {
        "termGuid": _SERIALIZER.url("term_guid", term_guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if api_version is not None:
        _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if include_term_hierarchy is not None:
        _params["includeTermHierarchy"] = _SERIALIZER.query("include_term_hierarchy", include_term_hierarchy, "bool")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_glossary_delete_term_request(term_guid: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/term/{termGuid}"
    path_format_arguments = {
        "termGuid": _SERIALIZER.url("term_guid", term_guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, headers=_headers, **kwargs)


def build_glossary_partial_update_term_request(  # pylint: disable=name-too-long
    term_guid: str, *, json: JSON, include_term_hierarchy: bool = False, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Optional[str] = kwargs.pop("api_version", _params.pop("api-version", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/term/{termGuid}/partial"
    path_format_arguments = {
        "termGuid": _SERIALIZER.url("term_guid", term_guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if api_version is not None:
        _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if include_term_hierarchy is not None:
        _params["includeTermHierarchy"] = _SERIALIZER.query("include_term_hierarchy", include_term_hierarchy, "bool")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, json=json, **kwargs)


def build_glossary_create_terms_request(*, include_term_hierarchy: bool = False, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Optional[str] = kwargs.pop("api_version", _params.pop("api-version", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/terms"

    # Construct parameters
    if api_version is not None:
        _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if include_term_hierarchy is not None:
        _params["includeTermHierarchy"] = _SERIALIZER.query("include_term_hierarchy", include_term_hierarchy, "bool")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_glossary_list_entities_assigned_with_term_request(  # pylint: disable=name-too-long
    term_guid: str, *, limit: Optional[int] = None, offset: Optional[int] = None, sort: str = "ASC", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/terms/{termGuid}/assignedEntities"
    path_format_arguments = {
        "termGuid": _SERIALIZER.url("term_guid", term_guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if limit is not None:
        _params["limit"] = _SERIALIZER.query("limit", limit, "int")
    if offset is not None:
        _params["offset"] = _SERIALIZER.query("offset", offset, "int")
    if sort is not None:
        _params["sort"] = _SERIALIZER.query("sort", sort, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_glossary_assign_term_to_entities_request(  # pylint: disable=name-too-long
    term_guid: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/terms/{termGuid}/assignedEntities"
    path_format_arguments = {
        "termGuid": _SERIALIZER.url("term_guid", term_guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_glossary_delete_term_assignment_from_entities_request(  # pylint: disable=name-too-long
    term_guid: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/terms/{termGuid}/assignedEntities"
    path_format_arguments = {
        "termGuid": _SERIALIZER.url("term_guid", term_guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, headers=_headers, **kwargs)


def build_glossary_list_related_terms_request(  # pylint: disable=name-too-long
    term_guid: str, *, limit: Optional[int] = None, offset: Optional[int] = None, sort: str = "ASC", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Optional[str] = kwargs.pop("api_version", _params.pop("api-version", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/terms/{termGuid}/related"
    path_format_arguments = {
        "termGuid": _SERIALIZER.url("term_guid", term_guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if api_version is not None:
        _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if limit is not None:
        _params["limit"] = _SERIALIZER.query("limit", limit, "int")
    if offset is not None:
        _params["offset"] = _SERIALIZER.query("offset", offset, "int")
    if sort is not None:
        _params["sort"] = _SERIALIZER.query("sort", sort, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_glossary_get_request(glossary_guid: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/{glossaryGuid}"
    path_format_arguments = {
        "glossaryGuid": _SERIALIZER.url("glossary_guid", glossary_guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_glossary_update_request(
    glossary_guid: str, *, ignore_terms_and_categories: bool = False, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Optional[str] = kwargs.pop("api_version", _params.pop("api-version", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/{glossaryGuid}"
    path_format_arguments = {
        "glossaryGuid": _SERIALIZER.url("glossary_guid", glossary_guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if api_version is not None:
        _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if ignore_terms_and_categories is not None:
        _params["ignoreTermsAndCategories"] = _SERIALIZER.query(
            "ignore_terms_and_categories", ignore_terms_and_categories, "bool"
        )

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_glossary_delete_request(glossary_guid: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/{glossaryGuid}"
    path_format_arguments = {
        "glossaryGuid": _SERIALIZER.url("glossary_guid", glossary_guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, headers=_headers, **kwargs)


def build_glossary_list_categories_request(
    glossary_guid: str, *, limit: Optional[int] = None, offset: Optional[int] = None, sort: str = "ASC", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/{glossaryGuid}/categories"
    path_format_arguments = {
        "glossaryGuid": _SERIALIZER.url("glossary_guid", glossary_guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if limit is not None:
        _params["limit"] = _SERIALIZER.query("limit", limit, "int")
    if offset is not None:
        _params["offset"] = _SERIALIZER.query("offset", offset, "int")
    if sort is not None:
        _params["sort"] = _SERIALIZER.query("sort", sort, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_glossary_list_categories_headers_request(  # pylint: disable=name-too-long
    glossary_guid: str, *, limit: Optional[int] = None, offset: Optional[int] = None, sort: str = "ASC", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/{glossaryGuid}/categories/headers"
    path_format_arguments = {
        "glossaryGuid": _SERIALIZER.url("glossary_guid", glossary_guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if limit is not None:
        _params["limit"] = _SERIALIZER.query("limit", limit, "int")
    if offset is not None:
        _params["offset"] = _SERIALIZER.query("offset", offset, "int")
    if sort is not None:
        _params["sort"] = _SERIALIZER.query("sort", sort, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_glossary_get_detailed_request(glossary_guid: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Optional[str] = kwargs.pop("api_version", _params.pop("api-version", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/{glossaryGuid}/detailed"
    path_format_arguments = {
        "glossaryGuid": _SERIALIZER.url("glossary_guid", glossary_guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if api_version is not None:
        _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_glossary_partial_update_request(
    glossary_guid: str, *, json: JSON, ignore_terms_and_categories: bool = False, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Optional[str] = kwargs.pop("api_version", _params.pop("api-version", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/{glossaryGuid}/partial"
    path_format_arguments = {
        "glossaryGuid": _SERIALIZER.url("glossary_guid", glossary_guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if api_version is not None:
        _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if ignore_terms_and_categories is not None:
        _params["ignoreTermsAndCategories"] = _SERIALIZER.query(
            "ignore_terms_and_categories", ignore_terms_and_categories, "bool"
        )

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, json=json, **kwargs)


def build_glossary_list_terms_request(
    glossary_guid: str, *, limit: Optional[int] = None, offset: Optional[int] = None, sort: str = "ASC", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Optional[str] = kwargs.pop("api_version", _params.pop("api-version", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/{glossaryGuid}/terms"
    path_format_arguments = {
        "glossaryGuid": _SERIALIZER.url("glossary_guid", glossary_guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if api_version is not None:
        _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if limit is not None:
        _params["limit"] = _SERIALIZER.query("limit", limit, "int")
    if offset is not None:
        _params["offset"] = _SERIALIZER.query("offset", offset, "int")
    if sort is not None:
        _params["sort"] = _SERIALIZER.query("sort", sort, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_glossary_list_term_headers_request(
    glossary_guid: str, *, limit: Optional[int] = None, offset: Optional[int] = None, sort: str = "ASC", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/glossary/{glossaryGuid}/terms/headers"
    path_format_arguments = {
        "glossaryGuid": _SERIALIZER.url("glossary_guid", glossary_guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if limit is not None:
        _params["limit"] = _SERIALIZER.query("limit", limit, "int")
    if offset is not None:
        _params["offset"] = _SERIALIZER.query("offset", offset, "int")
    if sort is not None:
        _params["sort"] = _SERIALIZER.query("sort", sort, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_discovery_query_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Optional[str] = kwargs.pop("api_version", _params.pop("api-version", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/search/query"

    # Construct parameters
    if api_version is not None:
        _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_discovery_suggest_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Optional[str] = kwargs.pop("api_version", _params.pop("api-version", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/search/suggest"

    # Construct parameters
    if api_version is not None:
        _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_discovery_auto_complete_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: Optional[str] = kwargs.pop("api_version", _params.pop("api-version", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/search/autocomplete"

    # Construct parameters
    if api_version is not None:
        _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_lineage_get_request(guid: str, *, direction: str, depth: int = 3, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/lineage/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if depth is not None:
        _params["depth"] = _SERIALIZER.query("depth", depth, "int")
    _params["direction"] = _SERIALIZER.query("direction", direction, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_lineage_get_next_page_request(
    guid: str, *, direction: str, offset: Optional[int] = None, limit: Optional[int] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Optional[str] = kwargs.pop("api_version", _params.pop("api-version", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/lineage/{guid}/next/"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["direction"] = _SERIALIZER.query("direction", direction, "str")
    if offset is not None:
        _params["offset"] = _SERIALIZER.query("offset", offset, "int")
    if limit is not None:
        _params["limit"] = _SERIALIZER.query("limit", limit, "int")
    if api_version is not None:
        _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_lineage_get_by_unique_attribute_request(  # pylint: disable=name-too-long
    type_name: str, *, direction: str, depth: int = 3, attr_qualified_name: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/lineage/uniqueAttribute/type/{typeName}"
    path_format_arguments = {
        "typeName": _SERIALIZER.url("type_name", type_name, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if depth is not None:
        _params["depth"] = _SERIALIZER.query("depth", depth, "int")
    _params["direction"] = _SERIALIZER.query("direction", direction, "str")
    if attr_qualified_name is not None:
        _params["attr:qualifiedName"] = _SERIALIZER.query("attr_qualified_name", attr_qualified_name, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_relationship_create_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/relationship"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_relationship_update_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/relationship"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, headers=_headers, **kwargs)


def build_relationship_get_request(guid: str, *, extended_info: Optional[bool] = None, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/relationship/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if extended_info is not None:
        _params["extendedInfo"] = _SERIALIZER.query("extended_info", extended_info, "bool")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_relationship_delete_request(guid: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/relationship/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, headers=_headers, **kwargs)


def build_type_get_business_metadata_def_by_guid_request(  # pylint: disable=name-too-long
    guid: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/types/businessmetadatadef/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_type_get_business_metadata_def_by_name_request(  # pylint: disable=name-too-long
    name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/types/businessmetadatadef/name/{name}"
    path_format_arguments = {
        "name": _SERIALIZER.url("name", name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_type_get_classification_def_by_guid_request(  # pylint: disable=name-too-long
    guid: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/types/classificationdef/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_type_get_classification_def_by_name_request(  # pylint: disable=name-too-long
    name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/types/classificationdef/name/{name}"
    path_format_arguments = {
        "name": _SERIALIZER.url("name", name, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_type_get_entity_def_by_guid_request(guid: str, **kwargs: Any) -> HttpRequest:  # pylint: disable=name-too-long
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/types/entitydef/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_type_get_entity_def_by_name_request(name: str, **kwargs: Any) -> HttpRequest:  # pylint: disable=name-too-long
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/types/entitydef/name/{name}"
    path_format_arguments = {
        "name": _SERIALIZER.url("name", name, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_type_get_enum_def_by_guid_request(guid: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/types/enumdef/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_type_get_enum_def_by_name_request(name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/types/enumdef/name/{name}"
    path_format_arguments = {
        "name": _SERIALIZER.url("name", name, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_type_get_relationship_def_by_guid_request(  # pylint: disable=name-too-long
    guid: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/types/relationshipdef/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_type_get_relationship_def_by_name_request(  # pylint: disable=name-too-long
    name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/types/relationshipdef/name/{name}"
    path_format_arguments = {
        "name": _SERIALIZER.url("name", name, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_type_get_struct_def_by_guid_request(guid: str, **kwargs: Any) -> HttpRequest:  # pylint: disable=name-too-long
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/types/structdef/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_type_get_struct_def_by_name_request(name: str, **kwargs: Any) -> HttpRequest:  # pylint: disable=name-too-long
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/types/structdef/name/{name}"
    path_format_arguments = {
        "name": _SERIALIZER.url("name", name, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_type_get_by_guid_request(guid: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/types/typedef/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_type_get_by_name_request(name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/types/typedef/name/{name}"
    path_format_arguments = {
        "name": _SERIALIZER.url("name", name, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_type_delete_request(name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/types/typedef/name/{name}"
    path_format_arguments = {
        "name": _SERIALIZER.url("name", name, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, headers=_headers, **kwargs)


def build_type_list_request(
    *, include_term_template: bool = False, type: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Optional[str] = kwargs.pop("api_version", _params.pop("api-version", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/types/typedefs"

    # Construct parameters
    if include_term_template is not None:
        _params["includeTermTemplate"] = _SERIALIZER.query("include_term_template", include_term_template, "bool")
    if type is not None:
        _params["type"] = _SERIALIZER.query("type", type, "str")
    if api_version is not None:
        _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_type_bulk_create_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/types/typedefs"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_type_bulk_update_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/types/typedefs"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, headers=_headers, **kwargs)


def build_type_bulk_delete_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/types/typedefs"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, headers=_headers, **kwargs)


def build_type_list_headers_request(
    *, include_term_template: bool = False, type: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Optional[str] = kwargs.pop("api_version", _params.pop("api-version", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/atlas/v2/types/typedefs/headers"

    # Construct parameters
    if include_term_template is not None:
        _params["includeTermTemplate"] = _SERIALIZER.query("include_term_template", include_term_template, "bool")
    if type is not None:
        _params["type"] = _SERIALIZER.query("type", type, "str")
    if api_version is not None:
        _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_type_get_term_template_def_by_guid_request(  # pylint: disable=name-too-long
    guid: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Optional[str] = kwargs.pop("api_version", _params.pop("api-version", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/types/termtemplatedef/guid/{guid}"
    path_format_arguments = {
        "guid": _SERIALIZER.url("guid", guid, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if api_version is not None:
        _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_type_get_term_template_def_by_name_request(  # pylint: disable=name-too-long
    name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: Optional[str] = kwargs.pop("api_version", _params.pop("api-version", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/types/termtemplatedef/name/{name}"
    path_format_arguments = {
        "name": _SERIALIZER.url("name", name, "str", max_length=4096, min_length=1),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    if api_version is not None:
        _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


class EntityOperations:  # pylint: disable=abstract-class-instantiated,too-many-public-methods
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.datamap.PurviewDataMapClient`'s
        :attr:`entity` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

        raise_if_not_implemented(
            self.__class__,
            [
                "import_business_metadata",
            ],
        )

    @overload
    def create_or_update(
        self,
        entity: JSON,
        *,
        business_attribute_update_behavior: Optional[str] = None,
        collection_id: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """Create or update an entity.
        Existing entity is matched using its unique guid if supplied or by its unique attributes eg:
        qualifiedName.
        Map and array of collections are not well supported. E.g., array<array:code:`<int>`>,
        array<map<string, int>>.
        For each contact type, the maximum number of contacts is 20.

        :param entity: Atlas entity with extended information. Required.
        :type entity: JSON
        :keyword business_attribute_update_behavior: Used to define the update behavior for business
         attributes when updating entities. Known values are: "ignore", "replace", and "merge". Default
         value is None.
        :paramtype business_attribute_update_behavior: str
        :keyword collection_id: The collection where entities will be moved to. Only specify a value if
         you need to move an entity to another collection. Default value is None.
        :paramtype collection_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                entity = {
                    "entity": {
                        "attributes": {
                            "str": {}  # Optional. The attributes of the struct.
                        },
                        "businessAttributes": {
                            "str": {}  # Optional. Business Attributes.
                        },
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed.
                                  Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "collectionId": "str",  # Optional. The collection ID of the entity.
                        "contacts": {
                            "str": [
                                {
                                    "id": "str",  # Optional. Azure Active
                                      Directory object Id.
                                    "info": "str"  # Optional. additional
                                      information to describe this contact.
                                }
                            ]
                        },
                        "createTime": 0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "customAttributes": {
                            "str": "str"  # Optional. Custom Attribute.
                        },
                        "guid": "str",  # Optional. The GUID of the entity.
                        "homeId": "str",  # Optional. The home ID of the entity.
                        "isIncomplete": bool,  # Optional. Whether it is a shell entity.
                        "labels": [
                            "str"  # Optional. labels.
                        ],
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "meanings": [
                            {
                                "confidence": 0,  # Optional. The confidence of the
                                  term assignment.
                                "createdBy": "str",  # Optional. The user who created
                                  the record.
                                "description": "str",  # Optional. The description of
                                  the term assignment.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term assignment.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of terms
                                  assignment. Known values are: "DISCOVERED", "PROPOSED", "IMPORTED",
                                  "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "provenanceType": 0.0,  # Optional. Used to record the provenance of
                          an instance of an entity or relationship.
                        "proxy": bool,  # Optional. Determines if there's a proxy.
                        "relationshipAttributes": {
                            "str": {}  # Optional. The attributes of relationship.
                        },
                        "status": "str",  # Optional. Status of the entity - can be active or
                          deleted. Deleted entities are not removed. Known values are: "ACTIVE" and
                          "DELETED".
                        "typeName": "str",  # Optional. The name of the type.
                        "updateTime": 0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "version": 0.0  # Optional. The version of the entity.
                    },
                    "referredEntities": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "collectionId": "str",  # Optional. The collection ID of the
                              entity.
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    }
                }

                # response body for status code(s): 200
                response == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed. Known values are: "ACTIVE" and
                                          "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed. Known
                                  values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """

    @overload
    def create_or_update(
        self,
        entity: IO[bytes],
        *,
        business_attribute_update_behavior: Optional[str] = None,
        collection_id: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """Create or update an entity.
        Existing entity is matched using its unique guid if supplied or by its unique attributes eg:
        qualifiedName.
        Map and array of collections are not well supported. E.g., array<array:code:`<int>`>,
        array<map<string, int>>.
        For each contact type, the maximum number of contacts is 20.

        :param entity: Atlas entity with extended information. Required.
        :type entity: IO[bytes]
        :keyword business_attribute_update_behavior: Used to define the update behavior for business
         attributes when updating entities. Known values are: "ignore", "replace", and "merge". Default
         value is None.
        :paramtype business_attribute_update_behavior: str
        :keyword collection_id: The collection where entities will be moved to. Only specify a value if
         you need to move an entity to another collection. Default value is None.
        :paramtype collection_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed. Known values are: "ACTIVE" and
                                          "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed. Known
                                  values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """

    @distributed_trace
    def create_or_update(
        self,
        entity: Union[JSON, IO[bytes]],
        *,
        business_attribute_update_behavior: Optional[str] = None,
        collection_id: Optional[str] = None,
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """Create or update an entity.
        Existing entity is matched using its unique guid if supplied or by its unique attributes eg:
        qualifiedName.
        Map and array of collections are not well supported. E.g., array<array:code:`<int>`>,
        array<map<string, int>>.
        For each contact type, the maximum number of contacts is 20.

        :param entity: Atlas entity with extended information. Is either a JSON type or a IO[bytes]
         type. Required.
        :type entity: JSON or IO[bytes]
        :keyword business_attribute_update_behavior: Used to define the update behavior for business
         attributes when updating entities. Known values are: "ignore", "replace", and "merge". Default
         value is None.
        :paramtype business_attribute_update_behavior: str
        :keyword collection_id: The collection where entities will be moved to. Only specify a value if
         you need to move an entity to another collection. Default value is None.
        :paramtype collection_id: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                entity = {
                    "entity": {
                        "attributes": {
                            "str": {}  # Optional. The attributes of the struct.
                        },
                        "businessAttributes": {
                            "str": {}  # Optional. Business Attributes.
                        },
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed.
                                  Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "collectionId": "str",  # Optional. The collection ID of the entity.
                        "contacts": {
                            "str": [
                                {
                                    "id": "str",  # Optional. Azure Active
                                      Directory object Id.
                                    "info": "str"  # Optional. additional
                                      information to describe this contact.
                                }
                            ]
                        },
                        "createTime": 0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "customAttributes": {
                            "str": "str"  # Optional. Custom Attribute.
                        },
                        "guid": "str",  # Optional. The GUID of the entity.
                        "homeId": "str",  # Optional. The home ID of the entity.
                        "isIncomplete": bool,  # Optional. Whether it is a shell entity.
                        "labels": [
                            "str"  # Optional. labels.
                        ],
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "meanings": [
                            {
                                "confidence": 0,  # Optional. The confidence of the
                                  term assignment.
                                "createdBy": "str",  # Optional. The user who created
                                  the record.
                                "description": "str",  # Optional. The description of
                                  the term assignment.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term assignment.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of terms
                                  assignment. Known values are: "DISCOVERED", "PROPOSED", "IMPORTED",
                                  "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "provenanceType": 0.0,  # Optional. Used to record the provenance of
                          an instance of an entity or relationship.
                        "proxy": bool,  # Optional. Determines if there's a proxy.
                        "relationshipAttributes": {
                            "str": {}  # Optional. The attributes of relationship.
                        },
                        "status": "str",  # Optional. Status of the entity - can be active or
                          deleted. Deleted entities are not removed. Known values are: "ACTIVE" and
                          "DELETED".
                        "typeName": "str",  # Optional. The name of the type.
                        "updateTime": 0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "version": 0.0  # Optional. The version of the entity.
                    },
                    "referredEntities": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "collectionId": "str",  # Optional. The collection ID of the
                              entity.
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    }
                }

                # response body for status code(s): 200
                response == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed. Known values are: "ACTIVE" and
                                          "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed. Known
                                  values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(entity, (IOBase, bytes)):
            _content = entity
        else:
            _json = entity

        _request = build_entity_create_or_update_request(
            business_attribute_update_behavior=business_attribute_update_behavior,
            collection_id=collection_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def list_by_guids(
        self, *, guids: List[str], min_ext_info: bool = False, ignore_relationships: bool = False, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """List entities in bulk identified by its GUIDs.

        :keyword guids: An array of GUIDs of entities to list. Required.
        :paramtype guids: list[str]
        :keyword min_ext_info: Whether to return minimal information for referred entities. Default
         value is False.
        :paramtype min_ext_info: bool
        :keyword ignore_relationships: Whether to ignore relationship attributes. Default value is
         False.
        :paramtype ignore_relationships: bool
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "entities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "collectionId": "str",  # Optional. The collection ID of the
                              entity.
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    ],
                    "referredEntities": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "collectionId": "str",  # Optional. The collection ID of the
                              entity.
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_entity_list_by_guids_request(
            guids=guids,
            min_ext_info=min_ext_info,
            ignore_relationships=ignore_relationships,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    def bulk_create_or_update(
        self,
        entities: JSON,
        *,
        collection_id: Optional[str] = None,
        business_attribute_update_behavior: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """Create or update entities in bulk.
        Existing entity is matched using its unique guid if supplied or by its unique attributes eg:
        qualifiedName.
        Map and array of collections are not well supported. E.g., array<array:code:`<int>`>,
        array<map<string, int>>.
        For each contact type, the maximum number of contacts is 20.

        :param entities: An array of entities to create or update. Required.
        :type entities: JSON
        :keyword collection_id: The collection where entities will be moved to. Only specify a value if
         you need to move an entity to another collection. Default value is None.
        :paramtype collection_id: str
        :keyword business_attribute_update_behavior: Used to define the update behavior for business
         attributes when updating entities. Known values are: "ignore", "replace", and "merge". Default
         value is None.
        :paramtype business_attribute_update_behavior: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                entities = {
                    "entities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "collectionId": "str",  # Optional. The collection ID of the
                              entity.
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    ],
                    "referredEntities": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "collectionId": "str",  # Optional. The collection ID of the
                              entity.
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    }
                }

                # response body for status code(s): 200
                response == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed. Known values are: "ACTIVE" and
                                          "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed. Known
                                  values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """

    @overload
    def bulk_create_or_update(
        self,
        entities: IO[bytes],
        *,
        collection_id: Optional[str] = None,
        business_attribute_update_behavior: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """Create or update entities in bulk.
        Existing entity is matched using its unique guid if supplied or by its unique attributes eg:
        qualifiedName.
        Map and array of collections are not well supported. E.g., array<array:code:`<int>`>,
        array<map<string, int>>.
        For each contact type, the maximum number of contacts is 20.

        :param entities: An array of entities to create or update. Required.
        :type entities: IO[bytes]
        :keyword collection_id: The collection where entities will be moved to. Only specify a value if
         you need to move an entity to another collection. Default value is None.
        :paramtype collection_id: str
        :keyword business_attribute_update_behavior: Used to define the update behavior for business
         attributes when updating entities. Known values are: "ignore", "replace", and "merge". Default
         value is None.
        :paramtype business_attribute_update_behavior: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed. Known values are: "ACTIVE" and
                                          "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed. Known
                                  values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """

    @distributed_trace
    def bulk_create_or_update(
        self,
        entities: Union[JSON, IO[bytes]],
        *,
        collection_id: Optional[str] = None,
        business_attribute_update_behavior: Optional[str] = None,
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """Create or update entities in bulk.
        Existing entity is matched using its unique guid if supplied or by its unique attributes eg:
        qualifiedName.
        Map and array of collections are not well supported. E.g., array<array:code:`<int>`>,
        array<map<string, int>>.
        For each contact type, the maximum number of contacts is 20.

        :param entities: An array of entities to create or update. Is either a JSON type or a IO[bytes]
         type. Required.
        :type entities: JSON or IO[bytes]
        :keyword collection_id: The collection where entities will be moved to. Only specify a value if
         you need to move an entity to another collection. Default value is None.
        :paramtype collection_id: str
        :keyword business_attribute_update_behavior: Used to define the update behavior for business
         attributes when updating entities. Known values are: "ignore", "replace", and "merge". Default
         value is None.
        :paramtype business_attribute_update_behavior: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                entities = {
                    "entities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "collectionId": "str",  # Optional. The collection ID of the
                              entity.
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    ],
                    "referredEntities": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "collectionId": "str",  # Optional. The collection ID of the
                              entity.
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    }
                }

                # response body for status code(s): 200
                response == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed. Known values are: "ACTIVE" and
                                          "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed. Known
                                  values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(entities, (IOBase, bytes)):
            _content = entities
        else:
            _json = entities

        _request = build_entity_bulk_create_or_update_request(
            collection_id=collection_id,
            business_attribute_update_behavior=business_attribute_update_behavior,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def bulk_delete(self, *, guids: List[str], **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Delete a list of entities in bulk identified by their GUIDs or unique attributes.

        :keyword guids: An array of GUIDs of entities to delete. Required.
        :paramtype guids: list[str]
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed. Known values are: "ACTIVE" and
                                          "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed. Known
                                  values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_entity_bulk_delete_request(
            guids=guids,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    def add_classification(  # pylint: disable=inconsistent-return-statements
        self, request: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        # pylint: disable=line-too-long
        """Associate a classification to multiple entities in bulk.

        :param request: The request to associate a classification to multiple entities. Required.
        :type request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                request = {
                    "classification": {
                        "attributes": {
                            "str": {}  # Optional. The attributes of the struct.
                        },
                        "entityGuid": "str",  # Optional. The GUID of the entity.
                        "entityStatus": "str",  # Optional. Status of the entity - can be
                          active or deleted. Deleted entities are not removed. Known values are:
                          "ACTIVE" and "DELETED".
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "removePropagationsOnEntityDelete": bool,  # Optional. Determines if
                          propagations will be removed on entity deletion.
                        "typeName": "str",  # Optional. The name of the type.
                        "validityPeriods": [
                            {
                                "endTime": "str",  # Optional. The end of the time
                                  boundary.
                                "startTime": "str",  # Optional. The start of the
                                  time boundary.
                                "timeZone": "str"  # Optional. The timezone of the
                                  time boundary.
                            }
                        ]
                    },
                    "entityGuids": [
                        "str"  # Optional. The GUID of the entity.
                    ]
                }
        """

    @overload
    def add_classification(  # pylint: disable=inconsistent-return-statements
        self, request: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Associate a classification to multiple entities in bulk.

        :param request: The request to associate a classification to multiple entities. Required.
        :type request: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def add_classification(  # pylint: disable=inconsistent-return-statements
        self, request: Union[JSON, IO[bytes]], **kwargs: Any
    ) -> None:
        # pylint: disable=line-too-long
        """Associate a classification to multiple entities in bulk.

        :param request: The request to associate a classification to multiple entities. Is either a
         JSON type or a IO[bytes] type. Required.
        :type request: JSON or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                request = {
                    "classification": {
                        "attributes": {
                            "str": {}  # Optional. The attributes of the struct.
                        },
                        "entityGuid": "str",  # Optional. The GUID of the entity.
                        "entityStatus": "str",  # Optional. Status of the entity - can be
                          active or deleted. Deleted entities are not removed. Known values are:
                          "ACTIVE" and "DELETED".
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "removePropagationsOnEntityDelete": bool,  # Optional. Determines if
                          propagations will be removed on entity deletion.
                        "typeName": "str",  # Optional. The name of the type.
                        "validityPeriods": [
                            {
                                "endTime": "str",  # Optional. The end of the time
                                  boundary.
                                "startTime": "str",  # Optional. The start of the
                                  time boundary.
                                "timeZone": "str"  # Optional. The timezone of the
                                  time boundary.
                            }
                        ]
                    },
                    "entityGuids": [
                        "str"  # Optional. The GUID of the entity.
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(request, (IOBase, bytes)):
            _content = request
        else:
            _json = request

        _request = build_entity_add_classification_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get(self, guid: str, *, min_ext_info: bool = False, ignore_relationships: bool = False, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get complete definition of an entity given its GUID.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :keyword min_ext_info: Whether to return minimal information for referred entities. Default
         value is False.
        :paramtype min_ext_info: bool
        :keyword ignore_relationships: Whether to ignore relationship attributes. Default value is
         False.
        :paramtype ignore_relationships: bool
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "entity": {
                        "attributes": {
                            "str": {}  # Optional. The attributes of the struct.
                        },
                        "businessAttributes": {
                            "str": {}  # Optional. Business Attributes.
                        },
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed.
                                  Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "collectionId": "str",  # Optional. The collection ID of the entity.
                        "contacts": {
                            "str": [
                                {
                                    "id": "str",  # Optional. Azure Active
                                      Directory object Id.
                                    "info": "str"  # Optional. additional
                                      information to describe this contact.
                                }
                            ]
                        },
                        "createTime": 0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "customAttributes": {
                            "str": "str"  # Optional. Custom Attribute.
                        },
                        "guid": "str",  # Optional. The GUID of the entity.
                        "homeId": "str",  # Optional. The home ID of the entity.
                        "isIncomplete": bool,  # Optional. Whether it is a shell entity.
                        "labels": [
                            "str"  # Optional. labels.
                        ],
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "meanings": [
                            {
                                "confidence": 0,  # Optional. The confidence of the
                                  term assignment.
                                "createdBy": "str",  # Optional. The user who created
                                  the record.
                                "description": "str",  # Optional. The description of
                                  the term assignment.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term assignment.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of terms
                                  assignment. Known values are: "DISCOVERED", "PROPOSED", "IMPORTED",
                                  "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "provenanceType": 0.0,  # Optional. Used to record the provenance of
                          an instance of an entity or relationship.
                        "proxy": bool,  # Optional. Determines if there's a proxy.
                        "relationshipAttributes": {
                            "str": {}  # Optional. The attributes of relationship.
                        },
                        "status": "str",  # Optional. Status of the entity - can be active or
                          deleted. Deleted entities are not removed. Known values are: "ACTIVE" and
                          "DELETED".
                        "typeName": "str",  # Optional. The name of the type.
                        "updateTime": 0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "version": 0.0  # Optional. The version of the entity.
                    },
                    "referredEntities": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "collectionId": "str",  # Optional. The collection ID of the
                              entity.
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_entity_get_request(
            guid=guid,
            min_ext_info=min_ext_info,
            ignore_relationships=ignore_relationships,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def partial_update_attribute_by_guid(self, guid: str, body: JSON, *, name: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Update entity partially - create or update entity attribute identified by its GUID.
        Supports only primitive attribute type and entity references.
        It does not support updating complex types like arrays, and maps.
        Null updates are not possible.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: The value of the attribute. Required.
        :type body: JSON
        :keyword name: The name of the attribute. Required.
        :paramtype name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed. Known values are: "ACTIVE" and
                                          "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed. Known
                                  values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: str = kwargs.pop("content_type", _headers.pop("Content-Type", "application/json"))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _json = body

        _request = build_entity_partial_update_attribute_by_guid_request(
            guid=guid,
            name=name,
            content_type=content_type,
            json=_json,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def delete(self, guid: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Delete an entity identified by its GUID.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed. Known values are: "ACTIVE" and
                                          "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed. Known
                                  values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_entity_delete_request(
            guid=guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_classification(self, guid: str, classification_name: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get classification for a given entity represented by a GUID.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param classification_name: The name of the classification. Required.
        :type classification_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "attributes": {
                        "str": {}  # Optional. The attributes of the struct.
                    },
                    "entityGuid": "str",  # Optional. The GUID of the entity.
                    "entityStatus": "str",  # Optional. Status of the entity - can be active or
                      deleted. Deleted entities are not removed. Known values are: "ACTIVE" and
                      "DELETED".
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "removePropagationsOnEntityDelete": bool,  # Optional. Determines if
                      propagations will be removed on entity deletion.
                    "typeName": "str",  # Optional. The name of the type.
                    "validityPeriods": [
                        {
                            "endTime": "str",  # Optional. The end of the time boundary.
                            "startTime": "str",  # Optional. The start of the time
                              boundary.
                            "timeZone": "str"  # Optional. The timezone of the time
                              boundary.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_entity_get_classification_request(
            guid=guid,
            classification_name=classification_name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def remove_classification(  # pylint: disable=inconsistent-return-statements
        self, guid: str, classification_name: str, **kwargs: Any
    ) -> None:
        """Delete a given classification from an existing entity represented by a GUID.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param classification_name: The name of the classification. Required.
        :type classification_name: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_entity_remove_classification_request(
            guid=guid,
            classification_name=classification_name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_classifications(self, guid: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """List classifications for a given entity represented by a GUID.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "list": [
                        {}  # Optional. An array of objects.
                    ],
                    "pageSize": 0,  # Optional. The size of the page.
                    "sortBy": "str",  # Optional. The sorted by field.
                    "sortType": "str",  # Optional. to specify whether the result should be
                      sorted? If yes, whether asc or desc. Known values are: "NONE", "ASC", and "DESC".
                    "startIndex": 0,  # Optional. The start index of the page.
                    "totalCount": 0  # Optional. The total count of items.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_entity_get_classifications_request(
            guid=guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    def add_classifications(  # pylint: disable=inconsistent-return-statements
        self, guid: str, classifications: List[JSON], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        # pylint: disable=line-too-long
        """Add classifications to an existing entity represented by a GUID.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param classifications: An array of classifications to be added. Required.
        :type classifications: list[JSON]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                classifications = [
                    {
                        "attributes": {
                            "str": {}  # Optional. The attributes of the struct.
                        },
                        "entityGuid": "str",  # Optional. The GUID of the entity.
                        "entityStatus": "str",  # Optional. Status of the entity - can be
                          active or deleted. Deleted entities are not removed. Known values are:
                          "ACTIVE" and "DELETED".
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "removePropagationsOnEntityDelete": bool,  # Optional. Determines if
                          propagations will be removed on entity deletion.
                        "typeName": "str",  # Optional. The name of the type.
                        "validityPeriods": [
                            {
                                "endTime": "str",  # Optional. The end of the time
                                  boundary.
                                "startTime": "str",  # Optional. The start of the
                                  time boundary.
                                "timeZone": "str"  # Optional. The timezone of the
                                  time boundary.
                            }
                        ]
                    }
                ]
        """

    @overload
    def add_classifications(  # pylint: disable=inconsistent-return-statements
        self, guid: str, classifications: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Add classifications to an existing entity represented by a GUID.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param classifications: An array of classifications to be added. Required.
        :type classifications: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def add_classifications(  # pylint: disable=inconsistent-return-statements
        self, guid: str, classifications: Union[List[JSON], IO[bytes]], **kwargs: Any
    ) -> None:
        """Add classifications to an existing entity represented by a GUID.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param classifications: An array of classifications to be added. Is either a [JSON] type or a
         IO[bytes] type. Required.
        :type classifications: list[JSON] or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(classifications, (IOBase, bytes)):
            _content = classifications
        else:
            _json = classifications

        _request = build_entity_add_classifications_request(
            guid=guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @overload
    def update_classifications(  # pylint: disable=inconsistent-return-statements
        self, guid: str, classifications: List[JSON], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        # pylint: disable=line-too-long
        """Update classifications to an existing entity represented by a guid.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param classifications: An array of classifications to be updated. Required.
        :type classifications: list[JSON]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                classifications = [
                    {
                        "attributes": {
                            "str": {}  # Optional. The attributes of the struct.
                        },
                        "entityGuid": "str",  # Optional. The GUID of the entity.
                        "entityStatus": "str",  # Optional. Status of the entity - can be
                          active or deleted. Deleted entities are not removed. Known values are:
                          "ACTIVE" and "DELETED".
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "removePropagationsOnEntityDelete": bool,  # Optional. Determines if
                          propagations will be removed on entity deletion.
                        "typeName": "str",  # Optional. The name of the type.
                        "validityPeriods": [
                            {
                                "endTime": "str",  # Optional. The end of the time
                                  boundary.
                                "startTime": "str",  # Optional. The start of the
                                  time boundary.
                                "timeZone": "str"  # Optional. The timezone of the
                                  time boundary.
                            }
                        ]
                    }
                ]
        """

    @overload
    def update_classifications(  # pylint: disable=inconsistent-return-statements
        self, guid: str, classifications: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Update classifications to an existing entity represented by a guid.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param classifications: An array of classifications to be updated. Required.
        :type classifications: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def update_classifications(  # pylint: disable=inconsistent-return-statements
        self, guid: str, classifications: Union[List[JSON], IO[bytes]], **kwargs: Any
    ) -> None:
        """Update classifications to an existing entity represented by a guid.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param classifications: An array of classifications to be updated. Is either a [JSON] type or a
         IO[bytes] type. Required.
        :type classifications: list[JSON] or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(classifications, (IOBase, bytes)):
            _content = classifications
        else:
            _json = classifications

        _request = build_entity_update_classifications_request(
            guid=guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_by_unique_attributes(
        self,
        type_name: str,
        *,
        min_ext_info: bool = False,
        ignore_relationships: bool = False,
        attr_qualified_name: Optional[str] = None,
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """Get complete definition of an entity given its type and unique attribute.

        In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the
        following format:
        attr:\:code:`<attrName>`=:code:`<attrValue>`.

        NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.

        The REST request would look something like this:
        GET /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :keyword min_ext_info: Whether to return minimal information for referred entities. Default
         value is False.
        :paramtype min_ext_info: bool
        :keyword ignore_relationships: Whether to ignore relationship attributes. Default value is
         False.
        :paramtype ignore_relationships: bool
        :keyword attr_qualified_name: The qualified name of the entity. (This is only an example.
         qualifiedName can be changed to other unique attributes). Default value is None.
        :paramtype attr_qualified_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "entity": {
                        "attributes": {
                            "str": {}  # Optional. The attributes of the struct.
                        },
                        "businessAttributes": {
                            "str": {}  # Optional. Business Attributes.
                        },
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed.
                                  Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "collectionId": "str",  # Optional. The collection ID of the entity.
                        "contacts": {
                            "str": [
                                {
                                    "id": "str",  # Optional. Azure Active
                                      Directory object Id.
                                    "info": "str"  # Optional. additional
                                      information to describe this contact.
                                }
                            ]
                        },
                        "createTime": 0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "customAttributes": {
                            "str": "str"  # Optional. Custom Attribute.
                        },
                        "guid": "str",  # Optional. The GUID of the entity.
                        "homeId": "str",  # Optional. The home ID of the entity.
                        "isIncomplete": bool,  # Optional. Whether it is a shell entity.
                        "labels": [
                            "str"  # Optional. labels.
                        ],
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "meanings": [
                            {
                                "confidence": 0,  # Optional. The confidence of the
                                  term assignment.
                                "createdBy": "str",  # Optional. The user who created
                                  the record.
                                "description": "str",  # Optional. The description of
                                  the term assignment.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term assignment.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of terms
                                  assignment. Known values are: "DISCOVERED", "PROPOSED", "IMPORTED",
                                  "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "provenanceType": 0.0,  # Optional. Used to record the provenance of
                          an instance of an entity or relationship.
                        "proxy": bool,  # Optional. Determines if there's a proxy.
                        "relationshipAttributes": {
                            "str": {}  # Optional. The attributes of relationship.
                        },
                        "status": "str",  # Optional. Status of the entity - can be active or
                          deleted. Deleted entities are not removed. Known values are: "ACTIVE" and
                          "DELETED".
                        "typeName": "str",  # Optional. The name of the type.
                        "updateTime": 0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "version": 0.0  # Optional. The version of the entity.
                    },
                    "referredEntities": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "collectionId": "str",  # Optional. The collection ID of the
                              entity.
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_entity_get_by_unique_attributes_request(
            type_name=type_name,
            min_ext_info=min_ext_info,
            ignore_relationships=ignore_relationships,
            attr_qualified_name=attr_qualified_name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    def partial_update_by_unique_attributes(
        self,
        type_name: str,
        atlas_entity_with_ext_info: JSON,
        *,
        attr_qualified_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """Update entity partially - Allow a subset of attributes to be updated on an entity which is
        identified by its type and unique attribute eg: Referenceable.qualifiedName. Null updates are
        not possible.

        In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the
        following format:

        attr::code:`<attrName>`=:code:`<attrValue>`.
        NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.

        The REST request would look something like this:
        PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param atlas_entity_with_ext_info: Atlas entity with extended information. Required.
        :type atlas_entity_with_ext_info: JSON
        :keyword attr_qualified_name: The qualified name of the entity. (This is only an example.
         qualifiedName can be changed to other unique attributes). Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                atlas_entity_with_ext_info = {
                    "entity": {
                        "attributes": {
                            "str": {}  # Optional. The attributes of the struct.
                        },
                        "businessAttributes": {
                            "str": {}  # Optional. Business Attributes.
                        },
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed.
                                  Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "collectionId": "str",  # Optional. The collection ID of the entity.
                        "contacts": {
                            "str": [
                                {
                                    "id": "str",  # Optional. Azure Active
                                      Directory object Id.
                                    "info": "str"  # Optional. additional
                                      information to describe this contact.
                                }
                            ]
                        },
                        "createTime": 0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "customAttributes": {
                            "str": "str"  # Optional. Custom Attribute.
                        },
                        "guid": "str",  # Optional. The GUID of the entity.
                        "homeId": "str",  # Optional. The home ID of the entity.
                        "isIncomplete": bool,  # Optional. Whether it is a shell entity.
                        "labels": [
                            "str"  # Optional. labels.
                        ],
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "meanings": [
                            {
                                "confidence": 0,  # Optional. The confidence of the
                                  term assignment.
                                "createdBy": "str",  # Optional. The user who created
                                  the record.
                                "description": "str",  # Optional. The description of
                                  the term assignment.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term assignment.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of terms
                                  assignment. Known values are: "DISCOVERED", "PROPOSED", "IMPORTED",
                                  "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "provenanceType": 0.0,  # Optional. Used to record the provenance of
                          an instance of an entity or relationship.
                        "proxy": bool,  # Optional. Determines if there's a proxy.
                        "relationshipAttributes": {
                            "str": {}  # Optional. The attributes of relationship.
                        },
                        "status": "str",  # Optional. Status of the entity - can be active or
                          deleted. Deleted entities are not removed. Known values are: "ACTIVE" and
                          "DELETED".
                        "typeName": "str",  # Optional. The name of the type.
                        "updateTime": 0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "version": 0.0  # Optional. The version of the entity.
                    },
                    "referredEntities": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "collectionId": "str",  # Optional. The collection ID of the
                              entity.
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    }
                }

                # response body for status code(s): 200
                response == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed. Known values are: "ACTIVE" and
                                          "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed. Known
                                  values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """

    @overload
    def partial_update_by_unique_attributes(
        self,
        type_name: str,
        atlas_entity_with_ext_info: IO[bytes],
        *,
        attr_qualified_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """Update entity partially - Allow a subset of attributes to be updated on an entity which is
        identified by its type and unique attribute eg: Referenceable.qualifiedName. Null updates are
        not possible.

        In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the
        following format:

        attr::code:`<attrName>`=:code:`<attrValue>`.
        NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.

        The REST request would look something like this:
        PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param atlas_entity_with_ext_info: Atlas entity with extended information. Required.
        :type atlas_entity_with_ext_info: IO[bytes]
        :keyword attr_qualified_name: The qualified name of the entity. (This is only an example.
         qualifiedName can be changed to other unique attributes). Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed. Known values are: "ACTIVE" and
                                          "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed. Known
                                  values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """

    @distributed_trace
    def partial_update_by_unique_attributes(
        self,
        type_name: str,
        atlas_entity_with_ext_info: Union[JSON, IO[bytes]],
        *,
        attr_qualified_name: Optional[str] = None,
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """Update entity partially - Allow a subset of attributes to be updated on an entity which is
        identified by its type and unique attribute eg: Referenceable.qualifiedName. Null updates are
        not possible.

        In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the
        following format:

        attr::code:`<attrName>`=:code:`<attrValue>`.
        NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.

        The REST request would look something like this:
        PUT /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param atlas_entity_with_ext_info: Atlas entity with extended information. Is either a JSON
         type or a IO[bytes] type. Required.
        :type atlas_entity_with_ext_info: JSON or IO[bytes]
        :keyword attr_qualified_name: The qualified name of the entity. (This is only an example.
         qualifiedName can be changed to other unique attributes). Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                atlas_entity_with_ext_info = {
                    "entity": {
                        "attributes": {
                            "str": {}  # Optional. The attributes of the struct.
                        },
                        "businessAttributes": {
                            "str": {}  # Optional. Business Attributes.
                        },
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed.
                                  Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "collectionId": "str",  # Optional. The collection ID of the entity.
                        "contacts": {
                            "str": [
                                {
                                    "id": "str",  # Optional. Azure Active
                                      Directory object Id.
                                    "info": "str"  # Optional. additional
                                      information to describe this contact.
                                }
                            ]
                        },
                        "createTime": 0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "customAttributes": {
                            "str": "str"  # Optional. Custom Attribute.
                        },
                        "guid": "str",  # Optional. The GUID of the entity.
                        "homeId": "str",  # Optional. The home ID of the entity.
                        "isIncomplete": bool,  # Optional. Whether it is a shell entity.
                        "labels": [
                            "str"  # Optional. labels.
                        ],
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "meanings": [
                            {
                                "confidence": 0,  # Optional. The confidence of the
                                  term assignment.
                                "createdBy": "str",  # Optional. The user who created
                                  the record.
                                "description": "str",  # Optional. The description of
                                  the term assignment.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term assignment.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of terms
                                  assignment. Known values are: "DISCOVERED", "PROPOSED", "IMPORTED",
                                  "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "provenanceType": 0.0,  # Optional. Used to record the provenance of
                          an instance of an entity or relationship.
                        "proxy": bool,  # Optional. Determines if there's a proxy.
                        "relationshipAttributes": {
                            "str": {}  # Optional. The attributes of relationship.
                        },
                        "status": "str",  # Optional. Status of the entity - can be active or
                          deleted. Deleted entities are not removed. Known values are: "ACTIVE" and
                          "DELETED".
                        "typeName": "str",  # Optional. The name of the type.
                        "updateTime": 0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "version": 0.0  # Optional. The version of the entity.
                    },
                    "referredEntities": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "collectionId": "str",  # Optional. The collection ID of the
                              entity.
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    }
                }

                # response body for status code(s): 200
                response == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed. Known values are: "ACTIVE" and
                                          "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed. Known
                                  values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(atlas_entity_with_ext_info, (IOBase, bytes)):
            _content = atlas_entity_with_ext_info
        else:
            _json = atlas_entity_with_ext_info

        _request = build_entity_partial_update_by_unique_attributes_request(
            type_name=type_name,
            attr_qualified_name=attr_qualified_name,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def delete_by_unique_attribute(
        self, type_name: str, *, attr_qualified_name: Optional[str] = None, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """Delete an entity identified by its type and unique attributes.
        In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the
        following format:
        attr:\:code:`<attrName>`=\:code:`<attrValue>`.
        NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.

        The REST request would look something like this:
        DELETE /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :keyword attr_qualified_name: The qualified name of the entity. (This is only an example.
         qualifiedName can be changed to other unique attributes). Default value is None.
        :paramtype attr_qualified_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed. Known values are: "ACTIVE" and
                                          "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed. Known
                                  values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_entity_delete_by_unique_attribute_request(
            type_name=type_name,
            attr_qualified_name=attr_qualified_name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def remove_classification_by_unique_attribute(  # pylint: disable=inconsistent-return-statements,name-too-long
        self, type_name: str, classification_name: str, *, attr_qualified_name: Optional[str] = None, **kwargs: Any
    ) -> None:
        """Delete a given classification from an entity identified by its type and unique attributes.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param classification_name: The name of the classification. Required.
        :type classification_name: str
        :keyword attr_qualified_name: The qualified name of the entity. (This is only an example.
         qualifiedName can be changed to other unique attributes). Default value is None.
        :paramtype attr_qualified_name: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_entity_remove_classification_by_unique_attribute_request(
            type_name=type_name,
            classification_name=classification_name,
            attr_qualified_name=attr_qualified_name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @overload
    def add_classifications_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        atlas_classification_array: List[JSON],
        *,
        attr_qualified_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> None:
        # pylint: disable=line-too-long
        """Add classification to the entity identified by its type and unique attributes.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param atlas_classification_array: An array of classification to be added. Required.
        :type atlas_classification_array: list[JSON]
        :keyword attr_qualified_name: The qualified name of the entity. (This is only an example.
         qualifiedName can be changed to other unique attributes). Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                atlas_classification_array = [
                    {
                        "attributes": {
                            "str": {}  # Optional. The attributes of the struct.
                        },
                        "entityGuid": "str",  # Optional. The GUID of the entity.
                        "entityStatus": "str",  # Optional. Status of the entity - can be
                          active or deleted. Deleted entities are not removed. Known values are:
                          "ACTIVE" and "DELETED".
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "removePropagationsOnEntityDelete": bool,  # Optional. Determines if
                          propagations will be removed on entity deletion.
                        "typeName": "str",  # Optional. The name of the type.
                        "validityPeriods": [
                            {
                                "endTime": "str",  # Optional. The end of the time
                                  boundary.
                                "startTime": "str",  # Optional. The start of the
                                  time boundary.
                                "timeZone": "str"  # Optional. The timezone of the
                                  time boundary.
                            }
                        ]
                    }
                ]
        """

    @overload
    def add_classifications_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        atlas_classification_array: IO[bytes],
        *,
        attr_qualified_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> None:
        """Add classification to the entity identified by its type and unique attributes.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param atlas_classification_array: An array of classification to be added. Required.
        :type atlas_classification_array: IO[bytes]
        :keyword attr_qualified_name: The qualified name of the entity. (This is only an example.
         qualifiedName can be changed to other unique attributes). Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def add_classifications_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        atlas_classification_array: Union[List[JSON], IO[bytes]],
        *,
        attr_qualified_name: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """Add classification to the entity identified by its type and unique attributes.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param atlas_classification_array: An array of classification to be added. Is either a [JSON]
         type or a IO[bytes] type. Required.
        :type atlas_classification_array: list[JSON] or IO[bytes]
        :keyword attr_qualified_name: The qualified name of the entity. (This is only an example.
         qualifiedName can be changed to other unique attributes). Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(atlas_classification_array, (IOBase, bytes)):
            _content = atlas_classification_array
        else:
            _json = atlas_classification_array

        _request = build_entity_add_classifications_by_unique_attribute_request(
            type_name=type_name,
            attr_qualified_name=attr_qualified_name,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @overload
    def update_classifications_by_unique_attribute(  # pylint: disable=inconsistent-return-statements,name-too-long
        self,
        type_name: str,
        atlas_classification_array: List[JSON],
        *,
        attr_qualified_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> None:
        # pylint: disable=line-too-long
        """Update classification on an entity identified by its type and unique attributes.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param atlas_classification_array: An array of classification to be updated. Required.
        :type atlas_classification_array: list[JSON]
        :keyword attr_qualified_name: The qualified name of the entity. (This is only an example.
         qualifiedName can be changed to other unique attributes). Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                atlas_classification_array = [
                    {
                        "attributes": {
                            "str": {}  # Optional. The attributes of the struct.
                        },
                        "entityGuid": "str",  # Optional. The GUID of the entity.
                        "entityStatus": "str",  # Optional. Status of the entity - can be
                          active or deleted. Deleted entities are not removed. Known values are:
                          "ACTIVE" and "DELETED".
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "removePropagationsOnEntityDelete": bool,  # Optional. Determines if
                          propagations will be removed on entity deletion.
                        "typeName": "str",  # Optional. The name of the type.
                        "validityPeriods": [
                            {
                                "endTime": "str",  # Optional. The end of the time
                                  boundary.
                                "startTime": "str",  # Optional. The start of the
                                  time boundary.
                                "timeZone": "str"  # Optional. The timezone of the
                                  time boundary.
                            }
                        ]
                    }
                ]
        """

    @overload
    def update_classifications_by_unique_attribute(  # pylint: disable=inconsistent-return-statements,name-too-long
        self,
        type_name: str,
        atlas_classification_array: IO[bytes],
        *,
        attr_qualified_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> None:
        """Update classification on an entity identified by its type and unique attributes.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param atlas_classification_array: An array of classification to be updated. Required.
        :type atlas_classification_array: IO[bytes]
        :keyword attr_qualified_name: The qualified name of the entity. (This is only an example.
         qualifiedName can be changed to other unique attributes). Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def update_classifications_by_unique_attribute(  # pylint: disable=inconsistent-return-statements,name-too-long
        self,
        type_name: str,
        atlas_classification_array: Union[List[JSON], IO[bytes]],
        *,
        attr_qualified_name: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """Update classification on an entity identified by its type and unique attributes.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param atlas_classification_array: An array of classification to be updated. Is either a [JSON]
         type or a IO[bytes] type. Required.
        :type atlas_classification_array: list[JSON] or IO[bytes]
        :keyword attr_qualified_name: The qualified name of the entity. (This is only an example.
         qualifiedName can be changed to other unique attributes). Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(atlas_classification_array, (IOBase, bytes)):
            _content = atlas_classification_array
        else:
            _json = atlas_classification_array

        _request = build_entity_update_classifications_by_unique_attribute_request(
            type_name=type_name,
            attr_qualified_name=attr_qualified_name,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @overload
    def bulk_set_classifications(
        self, entity_headers: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> List[str]:
        # pylint: disable=line-too-long
        """Set classifications on entities in bulk.

        :param entity_headers: Atlas entity headers. Required.
        :type entity_headers: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: list of str
        :rtype: list[str]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                entity_headers = {
                    "guidHeaderMap": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    }
                }

                # response body for status code(s): 200
                response == [
                    "str"  # Optional.
                ]
        """

    @overload
    def bulk_set_classifications(
        self, entity_headers: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> List[str]:
        """Set classifications on entities in bulk.

        :param entity_headers: Atlas entity headers. Required.
        :type entity_headers: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: list of str
        :rtype: list[str]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == [
                    "str"  # Optional.
                ]
        """

    @distributed_trace
    def bulk_set_classifications(self, entity_headers: Union[JSON, IO[bytes]], **kwargs: Any) -> List[str]:
        # pylint: disable=line-too-long
        """Set classifications on entities in bulk.

        :param entity_headers: Atlas entity headers. Is either a JSON type or a IO[bytes] type.
         Required.
        :type entity_headers: JSON or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: list of str
        :rtype: list[str]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                entity_headers = {
                    "guidHeaderMap": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    }
                }

                # response body for status code(s): 200
                response == [
                    "str"  # Optional.
                ]
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[List[str]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(entity_headers, (IOBase, bytes)):
            _content = entity_headers
        else:
            _json = entity_headers

        _request = build_entity_bulk_set_classifications_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[str], deserialized), {})  # type: ignore

        return cast(List[str], deserialized)  # type: ignore

    @distributed_trace
    def list_by_unique_attributes(
        self,
        type_name: str,
        *,
        min_ext_info: bool = False,
        ignore_relationships: bool = False,
        attr_n_qualified_name: Optional[str] = None,
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """Bulk API to retrieve list of entities identified by its unique attributes.
        In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the
        following format

        typeName=\:code:`<typeName>`&attr_1:\:code:`<attrName>`=\:code:`<attrValue>`&attr_2:\:code:`<attrName>`=\:code:`<attrValue>`&attr_3:\:code:`<attrName>`=\:code:`<attrValue>`

        NOTE: The attrName should be an unique attribute for the given entity-type.
        The REST request would look something like this

        GET
        /v2/entity/bulk/uniqueAttribute/type/hive_db?attr_1:qualifiedName=db1@cl1&attr_2:qualifiedName=db2@cl1

        Note: at least one unique attribute must be provided.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :keyword min_ext_info: Whether to return minimal information for referred entities. Default
         value is False.
        :paramtype min_ext_info: bool
        :keyword ignore_relationships: Whether to ignore relationship attributes. Default value is
         False.
        :paramtype ignore_relationships: bool
        :keyword attr_n_qualified_name: Qualified name of an entity. E.g. to find 2 entities you can
         set attrs_1:qualifiedName=db1@cl1&attrs_2:qualifiedName=db2@cl1. (This is only an example.
         qualifiedName can be changed to other unique attributes). Default value is None.
        :paramtype attr_n_qualified_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "entities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "collectionId": "str",  # Optional. The collection ID of the
                              entity.
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    ],
                    "referredEntities": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "businessAttributes": {
                                "str": {}  # Optional. Business Attributes.
                            },
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "collectionId": "str",  # Optional. The collection ID of the
                              entity.
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "customAttributes": {
                                "str": "str"  # Optional. Custom Attribute.
                            },
                            "guid": "str",  # Optional. The GUID of the entity.
                            "homeId": "str",  # Optional. The home ID of the entity.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "provenanceType": 0.0,  # Optional. Used to record the
                              provenance of an instance of an entity or relationship.
                            "proxy": bool,  # Optional. Determines if there's a proxy.
                            "relationshipAttributes": {
                                "str": {}  # Optional. The attributes of
                                  relationship.
                            },
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str",  # Optional. The name of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the entity.
                        }
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_entity_list_by_unique_attributes_request(
            type_name=type_name,
            min_ext_info=min_ext_info,
            ignore_relationships=ignore_relationships,
            attr_n_qualified_name=attr_n_qualified_name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_header(self, guid: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get entity header given its GUID.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "attributes": {
                        "str": {}  # Optional. The attributes of the struct.
                    },
                    "classificationNames": [
                        "str"  # Optional. An array of classification names.
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "displayText": "str",  # Optional. The display text.
                    "guid": "str",  # Optional. The GUID of the record.
                    "isIncomplete": bool,  # Optional. Whether it is a shell entity.
                    "labels": [
                        "str"  # Optional. labels.
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "meaningNames": [
                        "str"  # Optional. An array of meanings.
                    ],
                    "meanings": [
                        {
                            "confidence": 0,  # Optional. The confidence of the term
                              assignment.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "description": "str",  # Optional. The description of the
                              term assignment.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term
                              assignment.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of terms assignment.
                              Known values are: "DISCOVERED", "PROPOSED", "IMPORTED", "VALIDATED",
                              "DEPRECATED", "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "status": "str",  # Optional. Status of the entity - can be active or
                      deleted. Deleted entities are not removed. Known values are: "ACTIVE" and
                      "DELETED".
                    "typeName": "str"  # Optional. The name of the type.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_entity_get_header_request(
            guid=guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    def remove_business_metadata(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        business_metadata: Optional[Dict[str, JSON]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> None:
        """Remove business metadata from an entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param business_metadata: Default value is None.
        :type business_metadata: dict[str, JSON]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                business_metadata = {
                    "str": {}  # Optional.
                }
        """

    @overload
    def remove_business_metadata(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        business_metadata: Optional[IO[bytes]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> None:
        """Remove business metadata from an entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param business_metadata: Default value is None.
        :type business_metadata: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def remove_business_metadata(  # pylint: disable=inconsistent-return-statements
        self, guid: str, business_metadata: Optional[Union[Dict[str, JSON], IO[bytes]]] = None, **kwargs: Any
    ) -> None:
        """Remove business metadata from an entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param business_metadata: Is either a {str: JSON} type or a IO[bytes] type. Default value is
         None.
        :type business_metadata: dict[str, JSON] or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(business_metadata, (IOBase, bytes)):
            _content = business_metadata
        else:
            if business_metadata is not None:
                _json = business_metadata
            else:
                _json = None

        _request = build_entity_remove_business_metadata_request(
            guid=guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @overload
    def add_or_update_business_metadata(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        business_metadata: Optional[Dict[str, JSON]] = None,
        *,
        is_overwrite: Optional[bool] = None,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> None:
        """Add business metadata to an entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param business_metadata: Default value is None.
        :type business_metadata: dict[str, JSON]
        :keyword is_overwrite: Whether to overwrite the existing business metadata on the entity or
         not, default is false. Default value is None.
        :paramtype is_overwrite: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                business_metadata = {
                    "str": {}  # Optional.
                }
        """

    @overload
    def add_or_update_business_metadata(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        business_metadata: Optional[IO[bytes]] = None,
        *,
        is_overwrite: Optional[bool] = None,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> None:
        """Add business metadata to an entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param business_metadata: Default value is None.
        :type business_metadata: IO[bytes]
        :keyword is_overwrite: Whether to overwrite the existing business metadata on the entity or
         not, default is false. Default value is None.
        :paramtype is_overwrite: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def add_or_update_business_metadata(  # pylint: disable=inconsistent-return-statements
        self,
        guid: str,
        business_metadata: Optional[Union[Dict[str, JSON], IO[bytes]]] = None,
        *,
        is_overwrite: Optional[bool] = None,
        **kwargs: Any,
    ) -> None:
        """Add business metadata to an entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param business_metadata: Is either a {str: JSON} type or a IO[bytes] type. Default value is
         None.
        :type business_metadata: dict[str, JSON] or IO[bytes]
        :keyword is_overwrite: Whether to overwrite the existing business metadata on the entity or
         not, default is false. Default value is None.
        :paramtype is_overwrite: bool
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(business_metadata, (IOBase, bytes)):
            _content = business_metadata
        else:
            if business_metadata is not None:
                _json = business_metadata
            else:
                _json = None

        _request = build_entity_add_or_update_business_metadata_request(
            guid=guid,
            is_overwrite=is_overwrite,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @overload
    def remove_business_metadata_attributes(  # pylint: disable=inconsistent-return-statements
        self,
        bm_name: str,
        guid: str,
        business_metadata_attributes: Optional[Dict[str, JSON]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> None:
        """Delete business metadata attributes from an entity.

        :param bm_name: BusinessMetadata name. Required.
        :type bm_name: str
        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param business_metadata_attributes: Default value is None.
        :type business_metadata_attributes: dict[str, JSON]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                business_metadata_attributes = {
                    "str": {}  # Optional.
                }
        """

    @overload
    def remove_business_metadata_attributes(  # pylint: disable=inconsistent-return-statements
        self,
        bm_name: str,
        guid: str,
        business_metadata_attributes: Optional[IO[bytes]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> None:
        """Delete business metadata attributes from an entity.

        :param bm_name: BusinessMetadata name. Required.
        :type bm_name: str
        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param business_metadata_attributes: Default value is None.
        :type business_metadata_attributes: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def remove_business_metadata_attributes(  # pylint: disable=inconsistent-return-statements
        self,
        bm_name: str,
        guid: str,
        business_metadata_attributes: Optional[Union[Dict[str, JSON], IO[bytes]]] = None,
        **kwargs: Any,
    ) -> None:
        """Delete business metadata attributes from an entity.

        :param bm_name: BusinessMetadata name. Required.
        :type bm_name: str
        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param business_metadata_attributes: Is either a {str: JSON} type or a IO[bytes] type. Default
         value is None.
        :type business_metadata_attributes: dict[str, JSON] or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(business_metadata_attributes, (IOBase, bytes)):
            _content = business_metadata_attributes
        else:
            if business_metadata_attributes is not None:
                _json = business_metadata_attributes
            else:
                _json = None

        _request = build_entity_remove_business_metadata_attributes_request(
            bm_name=bm_name,
            guid=guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @overload
    def add_or_update_business_metadata_attributes(  # pylint: disable=inconsistent-return-statements,name-too-long
        self,
        bm_name: str,
        guid: str,
        business_metadata_attributes: Optional[Dict[str, JSON]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> None:
        """Add or update business metadata attributes.

        :param bm_name: BusinessMetadata name. Required.
        :type bm_name: str
        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param business_metadata_attributes: Default value is None.
        :type business_metadata_attributes: dict[str, JSON]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                business_metadata_attributes = {
                    "str": {}  # Optional.
                }
        """

    @overload
    def add_or_update_business_metadata_attributes(  # pylint: disable=inconsistent-return-statements,name-too-long
        self,
        bm_name: str,
        guid: str,
        business_metadata_attributes: Optional[IO[bytes]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> None:
        """Add or update business metadata attributes.

        :param bm_name: BusinessMetadata name. Required.
        :type bm_name: str
        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param business_metadata_attributes: Default value is None.
        :type business_metadata_attributes: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def add_or_update_business_metadata_attributes(  # pylint: disable=inconsistent-return-statements,name-too-long
        self,
        bm_name: str,
        guid: str,
        business_metadata_attributes: Optional[Union[Dict[str, JSON], IO[bytes]]] = None,
        **kwargs: Any,
    ) -> None:
        """Add or update business metadata attributes.

        :param bm_name: BusinessMetadata name. Required.
        :type bm_name: str
        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param business_metadata_attributes: Is either a {str: JSON} type or a IO[bytes] type. Default
         value is None.
        :type business_metadata_attributes: dict[str, JSON] or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(business_metadata_attributes, (IOBase, bytes)):
            _content = business_metadata_attributes
        else:
            if business_metadata_attributes is not None:
                _json = business_metadata_attributes
            else:
                _json = None

        _request = build_entity_add_or_update_business_metadata_attributes_request(
            bm_name=bm_name,
            guid=guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def get_sample_business_metadata_template(self, **kwargs: Any) -> Iterator[bytes]:
        """Get the sample Template for uploading/creating bulk BusinessMetaData.

        :return: Iterator of the response bytes
        :rtype: Iterator[bytes]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Iterator[bytes]] = kwargs.pop("cls", None)

        _request = build_entity_get_sample_business_metadata_template_request(
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = True
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, cast(Iterator[bytes], deserialized), {})  # type: ignore

        return cast(Iterator[bytes], deserialized)  # type: ignore

    @overload
    def remove_labels(  # pylint: disable=inconsistent-return-statements
        self, guid: str, body: Optional[List[str]] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Delete given labels to a given entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: set of labels to be deleted. Default value is None.
        :type body: list[str]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = [
                    "str"  # Optional.
                ]
        """

    @overload
    def remove_labels(  # pylint: disable=inconsistent-return-statements
        self, guid: str, body: Optional[IO[bytes]] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Delete given labels to a given entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: set of labels to be deleted. Default value is None.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def remove_labels(  # pylint: disable=inconsistent-return-statements
        self, guid: str, body: Optional[Union[List[str], IO[bytes]]] = None, **kwargs: Any
    ) -> None:
        """Delete given labels to a given entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: set of labels to be deleted. Is either a [str] type or a IO[bytes] type. Default
         value is None.
        :type body: list[str] or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        _request = build_entity_remove_labels_request(
            guid=guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @overload
    def set_labels(  # pylint: disable=inconsistent-return-statements
        self, guid: str, body: Optional[List[str]] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set labels to a given entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: set of labels to be set to the entity. Default value is None.
        :type body: list[str]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = [
                    "str"  # Optional.
                ]
        """

    @overload
    def set_labels(  # pylint: disable=inconsistent-return-statements
        self, guid: str, body: Optional[IO[bytes]] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Set labels to a given entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: set of labels to be set to the entity. Default value is None.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def set_labels(  # pylint: disable=inconsistent-return-statements
        self, guid: str, body: Optional[Union[List[str], IO[bytes]]] = None, **kwargs: Any
    ) -> None:
        """Set labels to a given entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: set of labels to be set to the entity. Is either a [str] type or a IO[bytes] type.
         Default value is None.
        :type body: list[str] or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        _request = build_entity_set_labels_request(
            guid=guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @overload
    def add_label(  # pylint: disable=inconsistent-return-statements
        self, guid: str, body: Optional[List[str]] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Add given labels to a given entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: set of labels to be added. Default value is None.
        :type body: list[str]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = [
                    "str"  # Optional.
                ]
        """

    @overload
    def add_label(  # pylint: disable=inconsistent-return-statements
        self, guid: str, body: Optional[IO[bytes]] = None, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Add given labels to a given entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: set of labels to be added. Default value is None.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def add_label(  # pylint: disable=inconsistent-return-statements
        self, guid: str, body: Optional[Union[List[str], IO[bytes]]] = None, **kwargs: Any
    ) -> None:
        """Add given labels to a given entity.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :param body: set of labels to be added. Is either a [str] type or a IO[bytes] type. Default
         value is None.
        :type body: list[str] or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        _request = build_entity_add_label_request(
            guid=guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @overload
    def remove_labels_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        body: Optional[List[str]] = None,
        *,
        attr_qualified_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> None:
        """Delete given labels to a given entity identified by its type and unique attribute.

        If labels is null/empty, no labels will be removed.

        If any labels in labels set are non-existing labels, they will be ignored, only existing labels
        will be removed. In addition to the typeName path parameter, attribute key-value pair(s) can be
        provided in the following format: attr::code:`<attrName>`=:code:`<attrValue>`. NOTE: The
        attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request
        would look something like this: DELETE
        /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param body: set of labels to be deleted. Default value is None.
        :type body: list[str]
        :keyword attr_qualified_name: The qualified name of the entity. (This is only an example.
         qualifiedName can be changed to other unique attributes). Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = [
                    "str"  # Optional.
                ]
        """

    @overload
    def remove_labels_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        body: Optional[IO[bytes]] = None,
        *,
        attr_qualified_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> None:
        """Delete given labels to a given entity identified by its type and unique attribute.

        If labels is null/empty, no labels will be removed.

        If any labels in labels set are non-existing labels, they will be ignored, only existing labels
        will be removed. In addition to the typeName path parameter, attribute key-value pair(s) can be
        provided in the following format: attr::code:`<attrName>`=:code:`<attrValue>`. NOTE: The
        attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request
        would look something like this: DELETE
        /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param body: set of labels to be deleted. Default value is None.
        :type body: IO[bytes]
        :keyword attr_qualified_name: The qualified name of the entity. (This is only an example.
         qualifiedName can be changed to other unique attributes). Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def remove_labels_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        body: Optional[Union[List[str], IO[bytes]]] = None,
        *,
        attr_qualified_name: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """Delete given labels to a given entity identified by its type and unique attribute.

        If labels is null/empty, no labels will be removed.

        If any labels in labels set are non-existing labels, they will be ignored, only existing labels
        will be removed. In addition to the typeName path parameter, attribute key-value pair(s) can be
        provided in the following format: attr::code:`<attrName>`=:code:`<attrValue>`. NOTE: The
        attrName and attrValue should be unique across entities, eg. qualifiedName. The REST request
        would look something like this: DELETE
        /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param body: set of labels to be deleted. Is either a [str] type or a IO[bytes] type. Default
         value is None.
        :type body: list[str] or IO[bytes]
        :keyword attr_qualified_name: The qualified name of the entity. (This is only an example.
         qualifiedName can be changed to other unique attributes). Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        _request = build_entity_remove_labels_by_unique_attribute_request(
            type_name=type_name,
            attr_qualified_name=attr_qualified_name,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @overload
    def set_labels_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        body: Optional[List[str]] = None,
        *,
        attr_qualified_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> None:
        """Set labels to a given entity identified by its type and unique attributes.

        If labels is null/empty, existing labels will all be removed.

        In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the
        following format: attr::code:`<attrName>`=:code:`<attrValue>`.

        NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.

        The REST request would look something like this: POST
        /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param body: set of labels to be set. Default value is None.
        :type body: list[str]
        :keyword attr_qualified_name: The qualified name of the entity. (This is only an example.
         qualifiedName can be changed to other unique attributes). Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = [
                    "str"  # Optional.
                ]
        """

    @overload
    def set_labels_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        body: Optional[IO[bytes]] = None,
        *,
        attr_qualified_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> None:
        """Set labels to a given entity identified by its type and unique attributes.

        If labels is null/empty, existing labels will all be removed.

        In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the
        following format: attr::code:`<attrName>`=:code:`<attrValue>`.

        NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.

        The REST request would look something like this: POST
        /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param body: set of labels to be set. Default value is None.
        :type body: IO[bytes]
        :keyword attr_qualified_name: The qualified name of the entity. (This is only an example.
         qualifiedName can be changed to other unique attributes). Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def set_labels_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        body: Optional[Union[List[str], IO[bytes]]] = None,
        *,
        attr_qualified_name: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """Set labels to a given entity identified by its type and unique attributes.

        If labels is null/empty, existing labels will all be removed.

        In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the
        following format: attr::code:`<attrName>`=:code:`<attrValue>`.

        NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.

        The REST request would look something like this: POST
        /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param body: set of labels to be set. Is either a [str] type or a IO[bytes] type. Default value
         is None.
        :type body: list[str] or IO[bytes]
        :keyword attr_qualified_name: The qualified name of the entity. (This is only an example.
         qualifiedName can be changed to other unique attributes). Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        _request = build_entity_set_labels_by_unique_attribute_request(
            type_name=type_name,
            attr_qualified_name=attr_qualified_name,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @overload
    def add_labels_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        body: Optional[List[str]] = None,
        *,
        attr_qualified_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> None:
        """Add given labels to a given entity identified by its type and unique attributes.

        If labels is null/empty, no labels will be added.

        In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the
        following format: attr::code:`<attrName>`=:code:`<attrValue>`.

        NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.

        The REST request would look something like this: PUT
        /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param body: set of labels to be added. Default value is None.
        :type body: list[str]
        :keyword attr_qualified_name: The qualified name of the entity. (This is only an example.
         qualifiedName can be changed to other unique attributes). Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = [
                    "str"  # Optional.
                ]
        """

    @overload
    def add_labels_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        body: Optional[IO[bytes]] = None,
        *,
        attr_qualified_name: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> None:
        """Add given labels to a given entity identified by its type and unique attributes.

        If labels is null/empty, no labels will be added.

        In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the
        following format: attr::code:`<attrName>`=:code:`<attrValue>`.

        NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.

        The REST request would look something like this: PUT
        /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param body: set of labels to be added. Default value is None.
        :type body: IO[bytes]
        :keyword attr_qualified_name: The qualified name of the entity. (This is only an example.
         qualifiedName can be changed to other unique attributes). Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def add_labels_by_unique_attribute(  # pylint: disable=inconsistent-return-statements
        self,
        type_name: str,
        body: Optional[Union[List[str], IO[bytes]]] = None,
        *,
        attr_qualified_name: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """Add given labels to a given entity identified by its type and unique attributes.

        If labels is null/empty, no labels will be added.

        In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the
        following format: attr::code:`<attrName>`=:code:`<attrValue>`.

        NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.

        The REST request would look something like this: PUT
        /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :param body: set of labels to be added. Is either a [str] type or a IO[bytes] type. Default
         value is None.
        :type body: list[str] or IO[bytes]
        :keyword attr_qualified_name: The qualified name of the entity. (This is only an example.
         qualifiedName can be changed to other unique attributes). Default value is None.
        :paramtype attr_qualified_name: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            if body is not None:
                _json = body
            else:
                _json = None

        _request = build_entity_add_labels_by_unique_attribute_request(
            type_name=type_name,
            attr_qualified_name=attr_qualified_name,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @overload
    def move_entities_to_collection(
        self, move_entities_request: JSON, *, collection_id: str, content_type: str = "application/json", **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """Move existing entities to the target collection.

        :param move_entities_request: Entity guids to be moved to target collection. Required.
        :type move_entities_request: JSON
        :keyword collection_id: The collection where entities will be moved to. Required.
        :paramtype collection_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                move_entities_request = {
                    "entityGuids": [
                        "str"  # Optional. An array of entity guids to be moved to target
                          collection.
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed. Known values are: "ACTIVE" and
                                          "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed. Known
                                  values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """

    @overload
    def move_entities_to_collection(
        self,
        move_entities_request: IO[bytes],
        *,
        collection_id: str,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """Move existing entities to the target collection.

        :param move_entities_request: Entity guids to be moved to target collection. Required.
        :type move_entities_request: IO[bytes]
        :keyword collection_id: The collection where entities will be moved to. Required.
        :paramtype collection_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed. Known values are: "ACTIVE" and
                                          "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed. Known
                                  values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """

    @distributed_trace
    def move_entities_to_collection(
        self, move_entities_request: Union[JSON, IO[bytes]], *, collection_id: str, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """Move existing entities to the target collection.

        :param move_entities_request: Entity guids to be moved to target collection. Is either a JSON
         type or a IO[bytes] type. Required.
        :type move_entities_request: JSON or IO[bytes]
        :keyword collection_id: The collection where entities will be moved to. Required.
        :paramtype collection_id: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                move_entities_request = {
                    "entityGuids": [
                        "str"  # Optional. An array of entity guids to be moved to target
                          collection.
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "guidAssignments": {
                        "str": "str"  # Optional. A map of GUID assignments with entities.
                    },
                    "mutatedEntities": {
                        "str": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "classificationNames": [
                                    "str"  # Optional. An array of classification
                                      names.
                                ],
                                "classifications": [
                                    {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "entityGuid": "str",  # Optional. The
                                          GUID of the entity.
                                        "entityStatus": "str",  # Optional.
                                          Status of the entity - can be active or deleted. Deleted
                                          entities are not removed. Known values are: "ACTIVE" and
                                          "DELETED".
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "removePropagationsOnEntityDelete":
                                          bool,  # Optional. Determines if propagations will be removed
                                          on entity deletion.
                                        "typeName": "str",  # Optional. The
                                          name of the type.
                                        "validityPeriods": [
                                            {
                                                "endTime": "str",  #
                                                  Optional. The end of the time boundary.
                                                "startTime": "str",
                                                  # Optional. The start of the time boundary.
                                                "timeZone": "str"  #
                                                  Optional. The timezone of the time boundary.
                                            }
                                        ]
                                    }
                                ],
                                "displayText": "str",  # Optional. The display text.
                                "guid": "str",  # Optional. The GUID of the record.
                                "isIncomplete": bool,  # Optional. Whether it is a
                                  shell entity.
                                "labels": [
                                    "str"  # Optional. labels.
                                ],
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "meaningNames": [
                                    "str"  # Optional. An array of meanings.
                                ],
                                "meanings": [
                                    {
                                        "confidence": 0,  # Optional. The
                                          confidence of the term assignment.
                                        "createdBy": "str",  # Optional. The
                                          user who created the record.
                                        "description": "str",  # Optional.
                                          The description of the term assignment.
                                        "displayText": "str",  # Optional.
                                          The display text.
                                        "expression": "str",  # Optional. The
                                          expression of the term assignment.
                                        "relationGuid": "str",  # Optional.
                                          The GUID of the relationship.
                                        "status": "str",  # Optional. The
                                          status of terms assignment. Known values are: "DISCOVERED",
                                          "PROPOSED", "IMPORTED", "VALIDATED", "DEPRECATED",
                                          "OBSOLETE", and "OTHER".
                                        "steward": "str",  # Optional. The
                                          steward of the term.
                                        "termGuid": "str"  # Optional. The
                                          GUID of the term.
                                    }
                                ],
                                "status": "str",  # Optional. Status of the entity -
                                  can be active or deleted. Deleted entities are not removed. Known
                                  values are: "ACTIVE" and "DELETED".
                                "typeName": "str"  # Optional. The name of the type.
                            }
                        ]
                    },
                    "partialUpdatedEntities": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(move_entities_request, (IOBase, bytes)):
            _content = move_entities_request
        else:
            _json = move_entities_request

        _request = build_entity_move_entities_to_collection_request(
            collection_id=collection_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore


class GlossaryOperations:  # pylint: disable=too-many-public-methods
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.datamap.PurviewDataMapClient`'s
        :attr:`glossary` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(
        self,
        *,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        sort: str = "ASC",
        ignore_terms_and_categories: bool = False,
        **kwargs: Any,
    ) -> List[JSON]:
        # pylint: disable=line-too-long
        """Get all glossaries. Recommend using limit/offset to get pagination result. Recommend using
        'ignoreTermsAndCategories=true' and fetch terms/categories separately using

         'GET /datamap/api/atlas/v2/glossary/{glossaryGuid}/terms' and

         'GET '/datamap/api/atlas/v2/glossary/{glossaryGuid}/categories'.

        :keyword limit: The page size - by default there is no paging. Default value is None.
        :paramtype limit: int
        :keyword offset: The offset for pagination purpose. Default value is None.
        :paramtype offset: int
        :keyword sort: The sort order, ASC (default) or DESC. Default value is "ASC".
        :paramtype sort: str
        :keyword ignore_terms_and_categories: Whether ignore terms and categories. Default value is
         False.
        :paramtype ignore_terms_and_categories: bool
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == [
                    {
                        "categories": [
                            {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the category header.
                                "displayText": "str",  # Optional. The display text.
                                "parentCategoryGuid": "str",  # Optional. The GUID of
                                  the parent category.
                                "relationGuid": "str"  # Optional. The GUID of the
                                  relationship.
                            }
                        ],
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed.
                                  Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "createTime": 0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "guid": "str",  # Optional. The GUID of the object.
                        "language": "str",  # Optional. The language of the glossary.
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "longDescription": "str",  # Optional. The long version description.
                        "name": "str",  # Optional. The name of the glossary object.
                        "qualifiedName": "str",  # Optional. The qualified name of the
                          glossary object.
                        "shortDescription": "str",  # Optional. The short version of
                          description.
                        "terms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "updateTime": 0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "usage": "str"  # Optional. The usage of the glossary.
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[JSON]] = kwargs.pop("cls", None)

        _request = build_glossary_list_request(
            limit=limit,
            offset=offset,
            sort=sort,
            ignore_terms_and_categories=ignore_terms_and_categories,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})  # type: ignore

        return cast(List[JSON], deserialized)  # type: ignore

    @overload
    def create(self, atlas_glossary: JSON, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Create a glossary.

        :param atlas_glossary: Glossary definition, terms & categories can be anchored to a glossary.
         Using the anchor attribute when creating the Term/Category. Required.
        :type atlas_glossary: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                atlas_glossary = {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str"  # Optional. The usage of the glossary.
                }

                # response body for status code(s): 200
                response == {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str"  # Optional. The usage of the glossary.
                }
        """

    @overload
    def create(self, atlas_glossary: IO[bytes], *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Create a glossary.

        :param atlas_glossary: Glossary definition, terms & categories can be anchored to a glossary.
         Using the anchor attribute when creating the Term/Category. Required.
        :type atlas_glossary: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str"  # Optional. The usage of the glossary.
                }
        """

    @distributed_trace
    def create(self, atlas_glossary: Union[JSON, IO[bytes]], **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Create a glossary.

        :param atlas_glossary: Glossary definition, terms & categories can be anchored to a glossary.
         Using the anchor attribute when creating the Term/Category. Is either a JSON type or a
         IO[bytes] type. Required.
        :type atlas_glossary: JSON or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                atlas_glossary = {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str"  # Optional. The usage of the glossary.
                }

                # response body for status code(s): 200
                response == {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str"  # Optional. The usage of the glossary.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(atlas_glossary, (IOBase, bytes)):
            _content = atlas_glossary
        else:
            _json = atlas_glossary

        _request = build_glossary_create_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    def create_categories(
        self, glossary_category: List[JSON], *, content_type: str = "application/json", **kwargs: Any
    ) -> List[JSON]:
        # pylint: disable=line-too-long
        """Create glossary category in bulk.

        :param glossary_category: An array of glossary category definitions to be created. Required.
        :type glossary_category: list[JSON]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                glossary_category = [
                    {
                        "anchor": {
                            "displayText": "str",  # Optional. The display text.
                            "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "childrenCategories": [
                            {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the category header.
                                "displayText": "str",  # Optional. The display text.
                                "parentCategoryGuid": "str",  # Optional. The GUID of
                                  the parent category.
                                "relationGuid": "str"  # Optional. The GUID of the
                                  relationship.
                            }
                        ],
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed.
                                  Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "createTime": 0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "guid": "str",  # Optional. The GUID of the object.
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "longDescription": "str",  # Optional. The long version description.
                        "name": "str",  # Optional. The name of the glossary object.
                        "parentCategory": {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "qualifiedName": "str",  # Optional. The qualified name of the
                          glossary object.
                        "shortDescription": "str",  # Optional. The short version of
                          description.
                        "terms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "updateTime": 0,  # Optional. The update time of the record.
                        "updatedBy": "str"  # Optional. The user who updated the record.
                    }
                ]

                # response body for status code(s): 200
                response == [
                    {
                        "anchor": {
                            "displayText": "str",  # Optional. The display text.
                            "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "childrenCategories": [
                            {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the category header.
                                "displayText": "str",  # Optional. The display text.
                                "parentCategoryGuid": "str",  # Optional. The GUID of
                                  the parent category.
                                "relationGuid": "str"  # Optional. The GUID of the
                                  relationship.
                            }
                        ],
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed.
                                  Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "createTime": 0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "guid": "str",  # Optional. The GUID of the object.
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "longDescription": "str",  # Optional. The long version description.
                        "name": "str",  # Optional. The name of the glossary object.
                        "parentCategory": {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "qualifiedName": "str",  # Optional. The qualified name of the
                          glossary object.
                        "shortDescription": "str",  # Optional. The short version of
                          description.
                        "terms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "updateTime": 0,  # Optional. The update time of the record.
                        "updatedBy": "str"  # Optional. The user who updated the record.
                    }
                ]
        """

    @overload
    def create_categories(
        self, glossary_category: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> List[JSON]:
        # pylint: disable=line-too-long
        """Create glossary category in bulk.

        :param glossary_category: An array of glossary category definitions to be created. Required.
        :type glossary_category: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == [
                    {
                        "anchor": {
                            "displayText": "str",  # Optional. The display text.
                            "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "childrenCategories": [
                            {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the category header.
                                "displayText": "str",  # Optional. The display text.
                                "parentCategoryGuid": "str",  # Optional. The GUID of
                                  the parent category.
                                "relationGuid": "str"  # Optional. The GUID of the
                                  relationship.
                            }
                        ],
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed.
                                  Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "createTime": 0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "guid": "str",  # Optional. The GUID of the object.
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "longDescription": "str",  # Optional. The long version description.
                        "name": "str",  # Optional. The name of the glossary object.
                        "parentCategory": {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "qualifiedName": "str",  # Optional. The qualified name of the
                          glossary object.
                        "shortDescription": "str",  # Optional. The short version of
                          description.
                        "terms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "updateTime": 0,  # Optional. The update time of the record.
                        "updatedBy": "str"  # Optional. The user who updated the record.
                    }
                ]
        """

    @distributed_trace
    def create_categories(self, glossary_category: Union[List[JSON], IO[bytes]], **kwargs: Any) -> List[JSON]:
        # pylint: disable=line-too-long
        """Create glossary category in bulk.

        :param glossary_category: An array of glossary category definitions to be created. Is either a
         [JSON] type or a IO[bytes] type. Required.
        :type glossary_category: list[JSON] or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == [
                    {
                        "anchor": {
                            "displayText": "str",  # Optional. The display text.
                            "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "childrenCategories": [
                            {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the category header.
                                "displayText": "str",  # Optional. The display text.
                                "parentCategoryGuid": "str",  # Optional. The GUID of
                                  the parent category.
                                "relationGuid": "str"  # Optional. The GUID of the
                                  relationship.
                            }
                        ],
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed.
                                  Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "createTime": 0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "guid": "str",  # Optional. The GUID of the object.
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "longDescription": "str",  # Optional. The long version description.
                        "name": "str",  # Optional. The name of the glossary object.
                        "parentCategory": {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "qualifiedName": "str",  # Optional. The qualified name of the
                          glossary object.
                        "shortDescription": "str",  # Optional. The short version of
                          description.
                        "terms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "updateTime": 0,  # Optional. The update time of the record.
                        "updatedBy": "str"  # Optional. The user who updated the record.
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[List[JSON]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(glossary_category, (IOBase, bytes)):
            _content = glossary_category
        else:
            _json = glossary_category

        _request = build_glossary_create_categories_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})  # type: ignore

        return cast(List[JSON], deserialized)  # type: ignore

    @overload
    def create_category(
        self, glossary_category: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """Create a glossary category.

        :param glossary_category: The glossary category definition. A category must be anchored to a
         Glossary when creating.
         Optionally, terms belonging to the category and the hierarchy can also be defined during
         creation. Required.
        :type glossary_category: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                glossary_category = {
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "childrenCategories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "parentCategory": {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str"  # Optional. The user who updated the record.
                }

                # response body for status code(s): 200
                response == {
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "childrenCategories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "parentCategory": {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str"  # Optional. The user who updated the record.
                }
        """

    @overload
    def create_category(
        self, glossary_category: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """Create a glossary category.

        :param glossary_category: The glossary category definition. A category must be anchored to a
         Glossary when creating.
         Optionally, terms belonging to the category and the hierarchy can also be defined during
         creation. Required.
        :type glossary_category: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "childrenCategories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "parentCategory": {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str"  # Optional. The user who updated the record.
                }
        """

    @distributed_trace
    def create_category(self, glossary_category: Union[JSON, IO[bytes]], **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Create a glossary category.

        :param glossary_category: The glossary category definition. A category must be anchored to a
         Glossary when creating.
         Optionally, terms belonging to the category and the hierarchy can also be defined during
         creation. Is either a JSON type or a IO[bytes] type. Required.
        :type glossary_category: JSON or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                glossary_category = {
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "childrenCategories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "parentCategory": {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str"  # Optional. The user who updated the record.
                }

                # response body for status code(s): 200
                response == {
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "childrenCategories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "parentCategory": {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str"  # Optional. The user who updated the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(glossary_category, (IOBase, bytes)):
            _content = glossary_category
        else:
            _json = glossary_category

        _request = build_glossary_create_category_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_category(self, category_guid: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get specific glossary category by its GUID.

        :param category_guid: The globally unique identifier of the category. Required.
        :type category_guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "childrenCategories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "parentCategory": {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str"  # Optional. The user who updated the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_glossary_get_category_request(
            category_guid=category_guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    def update_category(
        self, category_guid: str, glossary_category: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """Update the given glossary category by its GUID.

        :param category_guid: The globally unique identifier of the category. Required.
        :type category_guid: str
        :param glossary_category: The glossary category to be updated. Required.
        :type glossary_category: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                glossary_category = {
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "childrenCategories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "parentCategory": {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str"  # Optional. The user who updated the record.
                }

                # response body for status code(s): 200
                response == {
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "childrenCategories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "parentCategory": {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str"  # Optional. The user who updated the record.
                }
        """

    @overload
    def update_category(
        self, category_guid: str, glossary_category: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """Update the given glossary category by its GUID.

        :param category_guid: The globally unique identifier of the category. Required.
        :type category_guid: str
        :param glossary_category: The glossary category to be updated. Required.
        :type glossary_category: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "childrenCategories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "parentCategory": {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str"  # Optional. The user who updated the record.
                }
        """

    @distributed_trace
    def update_category(self, category_guid: str, glossary_category: Union[JSON, IO[bytes]], **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Update the given glossary category by its GUID.

        :param category_guid: The globally unique identifier of the category. Required.
        :type category_guid: str
        :param glossary_category: The glossary category to be updated. Is either a JSON type or a
         IO[bytes] type. Required.
        :type glossary_category: JSON or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                glossary_category = {
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "childrenCategories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "parentCategory": {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str"  # Optional. The user who updated the record.
                }

                # response body for status code(s): 200
                response == {
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "childrenCategories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "parentCategory": {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str"  # Optional. The user who updated the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(glossary_category, (IOBase, bytes)):
            _content = glossary_category
        else:
            _json = glossary_category

        _request = build_glossary_update_category_request(
            category_guid=category_guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def delete_category(  # pylint: disable=inconsistent-return-statements
        self, category_guid: str, **kwargs: Any
    ) -> None:
        """Delete a glossary category.

        :param category_guid: The globally unique identifier of the category. Required.
        :type category_guid: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_glossary_delete_category_request(
            category_guid=category_guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def partial_update_category(self, category_guid: str, partial_updates: JSON, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Update the glossary category partially. So far we only supports partial updating
        shortDescription and longDescription for category.

        :param category_guid: The globally unique identifier of the category. Required.
        :type category_guid: str
        :param partial_updates: A map containing keys as attribute names and values as corresponding
         attribute values for partial update. Required.
        :type partial_updates: JSON
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "childrenCategories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "parentCategory": {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str"  # Optional. The user who updated the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: str = kwargs.pop("content_type", _headers.pop("Content-Type", "application/json"))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _json = partial_updates

        _request = build_glossary_partial_update_category_request(
            category_guid=category_guid,
            content_type=content_type,
            json=_json,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def list_related_categories(
        self,
        category_guid: str,
        *,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        sort: str = "ASC",
        **kwargs: Any,
    ) -> Dict[str, List[JSON]]:
        """Get all related categories (parent and children). Limit, offset, and sort parameters are
        currently not being enabled and won't work even they are passed.

        :param category_guid: The globally unique identifier of the category. Required.
        :type category_guid: str
        :keyword limit: The page size - by default there is no paging. Default value is None.
        :paramtype limit: int
        :keyword offset: The offset for pagination purpose. Default value is None.
        :paramtype offset: int
        :keyword sort: The sort order, ASC (default) or DESC. Default value is "ASC".
        :paramtype sort: str
        :return: dict mapping str to list of JSON object
        :rtype: dict[str, list[JSON]]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "str": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Dict[str, List[JSON]]] = kwargs.pop("cls", None)

        _request = build_glossary_list_related_categories_request(
            category_guid=category_guid,
            limit=limit,
            offset=offset,
            sort=sort,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(Dict[str, List[JSON]], deserialized), {})  # type: ignore

        return cast(Dict[str, List[JSON]], deserialized)  # type: ignore

    @distributed_trace
    def list_category_terms(
        self,
        category_guid: str,
        *,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        sort: str = "ASC",
        **kwargs: Any,
    ) -> List[JSON]:
        # pylint: disable=line-too-long
        """Get all terms associated with the specific category.

        :param category_guid: The globally unique identifier of the category. Required.
        :type category_guid: str
        :keyword limit: The page size - by default there is no paging. Default value is None.
        :paramtype limit: int
        :keyword offset: The offset for pagination purpose. Default value is None.
        :paramtype offset: int
        :keyword sort: The sort order, ASC (default) or DESC. Default value is "ASC".
        :paramtype sort: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == [
                    {
                        "description": "str",  # Optional. The description of the related
                          term.
                        "displayText": "str",  # Optional. The display text.
                        "expression": "str",  # Optional. The expression of the term.
                        "relationGuid": "str",  # Optional. The GUID of the relationship.
                        "status": "str",  # Optional. The status of term relationship. Known
                          values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and "OTHER".
                        "steward": "str",  # Optional. The steward of the term.
                        "termGuid": "str"  # Optional. The GUID of the term.
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[JSON]] = kwargs.pop("cls", None)

        _request = build_glossary_list_category_terms_request(
            category_guid=category_guid,
            limit=limit,
            offset=offset,
            sort=sort,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})  # type: ignore

        return cast(List[JSON], deserialized)  # type: ignore

    @overload
    def create_term(
        self,
        glossary_term: JSON,
        *,
        include_term_hierarchy: bool = False,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """Create a glossary term.

        :param glossary_term: The glossary term definition. A term must be anchored to a Glossary at
         the time of creation.
         Optionally it can be categorized as well. Required.
        :type glossary_term: JSON
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                glossary_term = {
                    "abbreviation": "str",  # Optional. The abbreviation of the term.
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "antonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "assignedEntities": [
                        {
                            "displayText": "str",  # Optional. The display text.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "guid": "str",  # Optional. The GUID of the object.
                            "relationshipAttributes": {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "typeName": "str"  # Optional. The name of the type.
                            },
                            "relationshipGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "relationshipStatus": "str",  # Optional. The enum of
                              relationship status. Known values are: "ACTIVE" and "DELETED".
                            "relationshipType": "str",  # Optional. An array of related
                              object IDs.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "attributes": {
                        "str": {
                            "str": {}  # Optional. The custom attributes of the term,
                              which is map<string,map<string,object>>. The key of the first layer map
                              is term template name.
                        }
                    },
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              record.
                            "displayText": "str",  # Optional. The display text.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str"  # Optional. The status of term relationship.
                              Known values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and
                              "OTHER".
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "classifies": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "contacts": {
                        "str": [
                            {
                                "id": "str",  # Optional. Azure Active Directory
                                  object Id.
                                "info": "str"  # Optional. additional information to
                                  describe this contact.
                            }
                        ]
                    },
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "examples": [
                        "str"  # Optional. An array of examples.
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "hierarchyInfo": [
                        {
                            "displayText": "str",  # Optional. The hierarchy information
                              of the term.
                            "guid": "str",  # Optional. The GUID of the object.
                            "itemPath": "str",  # Optional. The hierarchy information of
                              the term.
                            "name": "str",  # Optional. The hierarchy information of the
                              term.
                            "properties": {
                                "str": {}  # Optional. Dictionary of :code:`<any>`.
                            },
                            "resourceId": "str",  # Optional. The hierarchy information
                              of the term.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "isA": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "nickName": "str",  # Optional. The nick name of the term.
                    "preferredTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "preferredToTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "replacedBy": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "replacementTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "resources": [
                        {
                            "displayName": "str",  # Optional. Display name for url.
                            "url": "str"  # Optional. web url. http or https.
                        }
                    ],
                    "seeAlso": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "shortDescription": "str",  # Optional. The short version of description.
                    "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known values
                      are: "Draft", "Approved", "Alert", and "Expired".
                    "synonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "templateName": [
                        {}  # Optional.
                    ],
                    "translatedTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "translationTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str",  # Optional. The usage of the term.
                    "validValues": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "validValuesFor": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "abbreviation": "str",  # Optional. The abbreviation of the term.
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "antonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "assignedEntities": [
                        {
                            "displayText": "str",  # Optional. The display text.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "guid": "str",  # Optional. The GUID of the object.
                            "relationshipAttributes": {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "typeName": "str"  # Optional. The name of the type.
                            },
                            "relationshipGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "relationshipStatus": "str",  # Optional. The enum of
                              relationship status. Known values are: "ACTIVE" and "DELETED".
                            "relationshipType": "str",  # Optional. An array of related
                              object IDs.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "attributes": {
                        "str": {
                            "str": {}  # Optional. The custom attributes of the term,
                              which is map<string,map<string,object>>. The key of the first layer map
                              is term template name.
                        }
                    },
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              record.
                            "displayText": "str",  # Optional. The display text.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str"  # Optional. The status of term relationship.
                              Known values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and
                              "OTHER".
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "classifies": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "contacts": {
                        "str": [
                            {
                                "id": "str",  # Optional. Azure Active Directory
                                  object Id.
                                "info": "str"  # Optional. additional information to
                                  describe this contact.
                            }
                        ]
                    },
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "examples": [
                        "str"  # Optional. An array of examples.
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "hierarchyInfo": [
                        {
                            "displayText": "str",  # Optional. The hierarchy information
                              of the term.
                            "guid": "str",  # Optional. The GUID of the object.
                            "itemPath": "str",  # Optional. The hierarchy information of
                              the term.
                            "name": "str",  # Optional. The hierarchy information of the
                              term.
                            "properties": {
                                "str": {}  # Optional. Dictionary of :code:`<any>`.
                            },
                            "resourceId": "str",  # Optional. The hierarchy information
                              of the term.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "isA": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "nickName": "str",  # Optional. The nick name of the term.
                    "preferredTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "preferredToTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "replacedBy": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "replacementTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "resources": [
                        {
                            "displayName": "str",  # Optional. Display name for url.
                            "url": "str"  # Optional. web url. http or https.
                        }
                    ],
                    "seeAlso": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "shortDescription": "str",  # Optional. The short version of description.
                    "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known values
                      are: "Draft", "Approved", "Alert", and "Expired".
                    "synonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "templateName": [
                        {}  # Optional.
                    ],
                    "translatedTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "translationTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str",  # Optional. The usage of the term.
                    "validValues": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "validValuesFor": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """

    @overload
    def create_term(
        self,
        glossary_term: IO[bytes],
        *,
        include_term_hierarchy: bool = False,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """Create a glossary term.

        :param glossary_term: The glossary term definition. A term must be anchored to a Glossary at
         the time of creation.
         Optionally it can be categorized as well. Required.
        :type glossary_term: IO[bytes]
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "abbreviation": "str",  # Optional. The abbreviation of the term.
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "antonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "assignedEntities": [
                        {
                            "displayText": "str",  # Optional. The display text.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "guid": "str",  # Optional. The GUID of the object.
                            "relationshipAttributes": {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "typeName": "str"  # Optional. The name of the type.
                            },
                            "relationshipGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "relationshipStatus": "str",  # Optional. The enum of
                              relationship status. Known values are: "ACTIVE" and "DELETED".
                            "relationshipType": "str",  # Optional. An array of related
                              object IDs.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "attributes": {
                        "str": {
                            "str": {}  # Optional. The custom attributes of the term,
                              which is map<string,map<string,object>>. The key of the first layer map
                              is term template name.
                        }
                    },
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              record.
                            "displayText": "str",  # Optional. The display text.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str"  # Optional. The status of term relationship.
                              Known values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and
                              "OTHER".
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "classifies": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "contacts": {
                        "str": [
                            {
                                "id": "str",  # Optional. Azure Active Directory
                                  object Id.
                                "info": "str"  # Optional. additional information to
                                  describe this contact.
                            }
                        ]
                    },
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "examples": [
                        "str"  # Optional. An array of examples.
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "hierarchyInfo": [
                        {
                            "displayText": "str",  # Optional. The hierarchy information
                              of the term.
                            "guid": "str",  # Optional. The GUID of the object.
                            "itemPath": "str",  # Optional. The hierarchy information of
                              the term.
                            "name": "str",  # Optional. The hierarchy information of the
                              term.
                            "properties": {
                                "str": {}  # Optional. Dictionary of :code:`<any>`.
                            },
                            "resourceId": "str",  # Optional. The hierarchy information
                              of the term.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "isA": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "nickName": "str",  # Optional. The nick name of the term.
                    "preferredTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "preferredToTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "replacedBy": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "replacementTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "resources": [
                        {
                            "displayName": "str",  # Optional. Display name for url.
                            "url": "str"  # Optional. web url. http or https.
                        }
                    ],
                    "seeAlso": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "shortDescription": "str",  # Optional. The short version of description.
                    "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known values
                      are: "Draft", "Approved", "Alert", and "Expired".
                    "synonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "templateName": [
                        {}  # Optional.
                    ],
                    "translatedTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "translationTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str",  # Optional. The usage of the term.
                    "validValues": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "validValuesFor": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """

    @distributed_trace
    def create_term(
        self, glossary_term: Union[JSON, IO[bytes]], *, include_term_hierarchy: bool = False, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """Create a glossary term.

        :param glossary_term: The glossary term definition. A term must be anchored to a Glossary at
         the time of creation.
         Optionally it can be categorized as well. Is either a JSON type or a IO[bytes] type. Required.
        :type glossary_term: JSON or IO[bytes]
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                glossary_term = {
                    "abbreviation": "str",  # Optional. The abbreviation of the term.
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "antonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "assignedEntities": [
                        {
                            "displayText": "str",  # Optional. The display text.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "guid": "str",  # Optional. The GUID of the object.
                            "relationshipAttributes": {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "typeName": "str"  # Optional. The name of the type.
                            },
                            "relationshipGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "relationshipStatus": "str",  # Optional. The enum of
                              relationship status. Known values are: "ACTIVE" and "DELETED".
                            "relationshipType": "str",  # Optional. An array of related
                              object IDs.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "attributes": {
                        "str": {
                            "str": {}  # Optional. The custom attributes of the term,
                              which is map<string,map<string,object>>. The key of the first layer map
                              is term template name.
                        }
                    },
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              record.
                            "displayText": "str",  # Optional. The display text.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str"  # Optional. The status of term relationship.
                              Known values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and
                              "OTHER".
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "classifies": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "contacts": {
                        "str": [
                            {
                                "id": "str",  # Optional. Azure Active Directory
                                  object Id.
                                "info": "str"  # Optional. additional information to
                                  describe this contact.
                            }
                        ]
                    },
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "examples": [
                        "str"  # Optional. An array of examples.
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "hierarchyInfo": [
                        {
                            "displayText": "str",  # Optional. The hierarchy information
                              of the term.
                            "guid": "str",  # Optional. The GUID of the object.
                            "itemPath": "str",  # Optional. The hierarchy information of
                              the term.
                            "name": "str",  # Optional. The hierarchy information of the
                              term.
                            "properties": {
                                "str": {}  # Optional. Dictionary of :code:`<any>`.
                            },
                            "resourceId": "str",  # Optional. The hierarchy information
                              of the term.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "isA": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "nickName": "str",  # Optional. The nick name of the term.
                    "preferredTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "preferredToTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "replacedBy": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "replacementTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "resources": [
                        {
                            "displayName": "str",  # Optional. Display name for url.
                            "url": "str"  # Optional. web url. http or https.
                        }
                    ],
                    "seeAlso": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "shortDescription": "str",  # Optional. The short version of description.
                    "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known values
                      are: "Draft", "Approved", "Alert", and "Expired".
                    "synonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "templateName": [
                        {}  # Optional.
                    ],
                    "translatedTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "translationTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str",  # Optional. The usage of the term.
                    "validValues": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "validValuesFor": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "abbreviation": "str",  # Optional. The abbreviation of the term.
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "antonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "assignedEntities": [
                        {
                            "displayText": "str",  # Optional. The display text.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "guid": "str",  # Optional. The GUID of the object.
                            "relationshipAttributes": {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "typeName": "str"  # Optional. The name of the type.
                            },
                            "relationshipGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "relationshipStatus": "str",  # Optional. The enum of
                              relationship status. Known values are: "ACTIVE" and "DELETED".
                            "relationshipType": "str",  # Optional. An array of related
                              object IDs.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "attributes": {
                        "str": {
                            "str": {}  # Optional. The custom attributes of the term,
                              which is map<string,map<string,object>>. The key of the first layer map
                              is term template name.
                        }
                    },
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              record.
                            "displayText": "str",  # Optional. The display text.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str"  # Optional. The status of term relationship.
                              Known values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and
                              "OTHER".
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "classifies": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "contacts": {
                        "str": [
                            {
                                "id": "str",  # Optional. Azure Active Directory
                                  object Id.
                                "info": "str"  # Optional. additional information to
                                  describe this contact.
                            }
                        ]
                    },
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "examples": [
                        "str"  # Optional. An array of examples.
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "hierarchyInfo": [
                        {
                            "displayText": "str",  # Optional. The hierarchy information
                              of the term.
                            "guid": "str",  # Optional. The GUID of the object.
                            "itemPath": "str",  # Optional. The hierarchy information of
                              the term.
                            "name": "str",  # Optional. The hierarchy information of the
                              term.
                            "properties": {
                                "str": {}  # Optional. Dictionary of :code:`<any>`.
                            },
                            "resourceId": "str",  # Optional. The hierarchy information
                              of the term.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "isA": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "nickName": "str",  # Optional. The nick name of the term.
                    "preferredTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "preferredToTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "replacedBy": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "replacementTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "resources": [
                        {
                            "displayName": "str",  # Optional. Display name for url.
                            "url": "str"  # Optional. web url. http or https.
                        }
                    ],
                    "seeAlso": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "shortDescription": "str",  # Optional. The short version of description.
                    "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known values
                      are: "Draft", "Approved", "Alert", and "Expired".
                    "synonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "templateName": [
                        {}  # Optional.
                    ],
                    "translatedTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "translationTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str",  # Optional. The usage of the term.
                    "validValues": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "validValuesFor": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(glossary_term, (IOBase, bytes)):
            _content = glossary_term
        else:
            _json = glossary_term

        _request = build_glossary_create_term_request(
            include_term_hierarchy=include_term_hierarchy,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_term(self, term_guid: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get a specific glossary term by its GUID.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "abbreviation": "str",  # Optional. The abbreviation of the term.
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "antonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "assignedEntities": [
                        {
                            "displayText": "str",  # Optional. The display text.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "guid": "str",  # Optional. The GUID of the object.
                            "relationshipAttributes": {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "typeName": "str"  # Optional. The name of the type.
                            },
                            "relationshipGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "relationshipStatus": "str",  # Optional. The enum of
                              relationship status. Known values are: "ACTIVE" and "DELETED".
                            "relationshipType": "str",  # Optional. An array of related
                              object IDs.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "attributes": {
                        "str": {
                            "str": {}  # Optional. The custom attributes of the term,
                              which is map<string,map<string,object>>. The key of the first layer map
                              is term template name.
                        }
                    },
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              record.
                            "displayText": "str",  # Optional. The display text.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str"  # Optional. The status of term relationship.
                              Known values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and
                              "OTHER".
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "classifies": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "contacts": {
                        "str": [
                            {
                                "id": "str",  # Optional. Azure Active Directory
                                  object Id.
                                "info": "str"  # Optional. additional information to
                                  describe this contact.
                            }
                        ]
                    },
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "examples": [
                        "str"  # Optional. An array of examples.
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "hierarchyInfo": [
                        {
                            "displayText": "str",  # Optional. The hierarchy information
                              of the term.
                            "guid": "str",  # Optional. The GUID of the object.
                            "itemPath": "str",  # Optional. The hierarchy information of
                              the term.
                            "name": "str",  # Optional. The hierarchy information of the
                              term.
                            "properties": {
                                "str": {}  # Optional. Dictionary of :code:`<any>`.
                            },
                            "resourceId": "str",  # Optional. The hierarchy information
                              of the term.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "isA": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "nickName": "str",  # Optional. The nick name of the term.
                    "preferredTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "preferredToTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "replacedBy": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "replacementTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "resources": [
                        {
                            "displayName": "str",  # Optional. Display name for url.
                            "url": "str"  # Optional. web url. http or https.
                        }
                    ],
                    "seeAlso": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "shortDescription": "str",  # Optional. The short version of description.
                    "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known values
                      are: "Draft", "Approved", "Alert", and "Expired".
                    "synonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "templateName": [
                        {}  # Optional.
                    ],
                    "translatedTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "translationTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str",  # Optional. The usage of the term.
                    "validValues": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "validValuesFor": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_glossary_get_term_request(
            term_guid=term_guid,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    def update_term(
        self,
        term_guid: str,
        glossary_term: JSON,
        *,
        include_term_hierarchy: bool = False,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """Update the given glossary term by its GUID.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param glossary_term: The glossary term to be updated. Required.
        :type glossary_term: JSON
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                glossary_term = {
                    "abbreviation": "str",  # Optional. The abbreviation of the term.
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "antonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "assignedEntities": [
                        {
                            "displayText": "str",  # Optional. The display text.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "guid": "str",  # Optional. The GUID of the object.
                            "relationshipAttributes": {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "typeName": "str"  # Optional. The name of the type.
                            },
                            "relationshipGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "relationshipStatus": "str",  # Optional. The enum of
                              relationship status. Known values are: "ACTIVE" and "DELETED".
                            "relationshipType": "str",  # Optional. An array of related
                              object IDs.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "attributes": {
                        "str": {
                            "str": {}  # Optional. The custom attributes of the term,
                              which is map<string,map<string,object>>. The key of the first layer map
                              is term template name.
                        }
                    },
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              record.
                            "displayText": "str",  # Optional. The display text.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str"  # Optional. The status of term relationship.
                              Known values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and
                              "OTHER".
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "classifies": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "contacts": {
                        "str": [
                            {
                                "id": "str",  # Optional. Azure Active Directory
                                  object Id.
                                "info": "str"  # Optional. additional information to
                                  describe this contact.
                            }
                        ]
                    },
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "examples": [
                        "str"  # Optional. An array of examples.
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "hierarchyInfo": [
                        {
                            "displayText": "str",  # Optional. The hierarchy information
                              of the term.
                            "guid": "str",  # Optional. The GUID of the object.
                            "itemPath": "str",  # Optional. The hierarchy information of
                              the term.
                            "name": "str",  # Optional. The hierarchy information of the
                              term.
                            "properties": {
                                "str": {}  # Optional. Dictionary of :code:`<any>`.
                            },
                            "resourceId": "str",  # Optional. The hierarchy information
                              of the term.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "isA": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "nickName": "str",  # Optional. The nick name of the term.
                    "preferredTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "preferredToTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "replacedBy": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "replacementTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "resources": [
                        {
                            "displayName": "str",  # Optional. Display name for url.
                            "url": "str"  # Optional. web url. http or https.
                        }
                    ],
                    "seeAlso": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "shortDescription": "str",  # Optional. The short version of description.
                    "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known values
                      are: "Draft", "Approved", "Alert", and "Expired".
                    "synonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "templateName": [
                        {}  # Optional.
                    ],
                    "translatedTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "translationTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str",  # Optional. The usage of the term.
                    "validValues": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "validValuesFor": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "abbreviation": "str",  # Optional. The abbreviation of the term.
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "antonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "assignedEntities": [
                        {
                            "displayText": "str",  # Optional. The display text.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "guid": "str",  # Optional. The GUID of the object.
                            "relationshipAttributes": {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "typeName": "str"  # Optional. The name of the type.
                            },
                            "relationshipGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "relationshipStatus": "str",  # Optional. The enum of
                              relationship status. Known values are: "ACTIVE" and "DELETED".
                            "relationshipType": "str",  # Optional. An array of related
                              object IDs.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "attributes": {
                        "str": {
                            "str": {}  # Optional. The custom attributes of the term,
                              which is map<string,map<string,object>>. The key of the first layer map
                              is term template name.
                        }
                    },
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              record.
                            "displayText": "str",  # Optional. The display text.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str"  # Optional. The status of term relationship.
                              Known values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and
                              "OTHER".
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "classifies": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "contacts": {
                        "str": [
                            {
                                "id": "str",  # Optional. Azure Active Directory
                                  object Id.
                                "info": "str"  # Optional. additional information to
                                  describe this contact.
                            }
                        ]
                    },
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "examples": [
                        "str"  # Optional. An array of examples.
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "hierarchyInfo": [
                        {
                            "displayText": "str",  # Optional. The hierarchy information
                              of the term.
                            "guid": "str",  # Optional. The GUID of the object.
                            "itemPath": "str",  # Optional. The hierarchy information of
                              the term.
                            "name": "str",  # Optional. The hierarchy information of the
                              term.
                            "properties": {
                                "str": {}  # Optional. Dictionary of :code:`<any>`.
                            },
                            "resourceId": "str",  # Optional. The hierarchy information
                              of the term.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "isA": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "nickName": "str",  # Optional. The nick name of the term.
                    "preferredTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "preferredToTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "replacedBy": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "replacementTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "resources": [
                        {
                            "displayName": "str",  # Optional. Display name for url.
                            "url": "str"  # Optional. web url. http or https.
                        }
                    ],
                    "seeAlso": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "shortDescription": "str",  # Optional. The short version of description.
                    "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known values
                      are: "Draft", "Approved", "Alert", and "Expired".
                    "synonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "templateName": [
                        {}  # Optional.
                    ],
                    "translatedTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "translationTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str",  # Optional. The usage of the term.
                    "validValues": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "validValuesFor": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """

    @overload
    def update_term(
        self,
        term_guid: str,
        glossary_term: IO[bytes],
        *,
        include_term_hierarchy: bool = False,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """Update the given glossary term by its GUID.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param glossary_term: The glossary term to be updated. Required.
        :type glossary_term: IO[bytes]
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "abbreviation": "str",  # Optional. The abbreviation of the term.
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "antonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "assignedEntities": [
                        {
                            "displayText": "str",  # Optional. The display text.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "guid": "str",  # Optional. The GUID of the object.
                            "relationshipAttributes": {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "typeName": "str"  # Optional. The name of the type.
                            },
                            "relationshipGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "relationshipStatus": "str",  # Optional. The enum of
                              relationship status. Known values are: "ACTIVE" and "DELETED".
                            "relationshipType": "str",  # Optional. An array of related
                              object IDs.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "attributes": {
                        "str": {
                            "str": {}  # Optional. The custom attributes of the term,
                              which is map<string,map<string,object>>. The key of the first layer map
                              is term template name.
                        }
                    },
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              record.
                            "displayText": "str",  # Optional. The display text.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str"  # Optional. The status of term relationship.
                              Known values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and
                              "OTHER".
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "classifies": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "contacts": {
                        "str": [
                            {
                                "id": "str",  # Optional. Azure Active Directory
                                  object Id.
                                "info": "str"  # Optional. additional information to
                                  describe this contact.
                            }
                        ]
                    },
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "examples": [
                        "str"  # Optional. An array of examples.
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "hierarchyInfo": [
                        {
                            "displayText": "str",  # Optional. The hierarchy information
                              of the term.
                            "guid": "str",  # Optional. The GUID of the object.
                            "itemPath": "str",  # Optional. The hierarchy information of
                              the term.
                            "name": "str",  # Optional. The hierarchy information of the
                              term.
                            "properties": {
                                "str": {}  # Optional. Dictionary of :code:`<any>`.
                            },
                            "resourceId": "str",  # Optional. The hierarchy information
                              of the term.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "isA": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "nickName": "str",  # Optional. The nick name of the term.
                    "preferredTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "preferredToTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "replacedBy": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "replacementTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "resources": [
                        {
                            "displayName": "str",  # Optional. Display name for url.
                            "url": "str"  # Optional. web url. http or https.
                        }
                    ],
                    "seeAlso": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "shortDescription": "str",  # Optional. The short version of description.
                    "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known values
                      are: "Draft", "Approved", "Alert", and "Expired".
                    "synonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "templateName": [
                        {}  # Optional.
                    ],
                    "translatedTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "translationTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str",  # Optional. The usage of the term.
                    "validValues": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "validValuesFor": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """

    @distributed_trace
    def update_term(
        self,
        term_guid: str,
        glossary_term: Union[JSON, IO[bytes]],
        *,
        include_term_hierarchy: bool = False,
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """Update the given glossary term by its GUID.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param glossary_term: The glossary term to be updated. Is either a JSON type or a IO[bytes]
         type. Required.
        :type glossary_term: JSON or IO[bytes]
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                glossary_term = {
                    "abbreviation": "str",  # Optional. The abbreviation of the term.
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "antonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "assignedEntities": [
                        {
                            "displayText": "str",  # Optional. The display text.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "guid": "str",  # Optional. The GUID of the object.
                            "relationshipAttributes": {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "typeName": "str"  # Optional. The name of the type.
                            },
                            "relationshipGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "relationshipStatus": "str",  # Optional. The enum of
                              relationship status. Known values are: "ACTIVE" and "DELETED".
                            "relationshipType": "str",  # Optional. An array of related
                              object IDs.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "attributes": {
                        "str": {
                            "str": {}  # Optional. The custom attributes of the term,
                              which is map<string,map<string,object>>. The key of the first layer map
                              is term template name.
                        }
                    },
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              record.
                            "displayText": "str",  # Optional. The display text.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str"  # Optional. The status of term relationship.
                              Known values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and
                              "OTHER".
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "classifies": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "contacts": {
                        "str": [
                            {
                                "id": "str",  # Optional. Azure Active Directory
                                  object Id.
                                "info": "str"  # Optional. additional information to
                                  describe this contact.
                            }
                        ]
                    },
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "examples": [
                        "str"  # Optional. An array of examples.
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "hierarchyInfo": [
                        {
                            "displayText": "str",  # Optional. The hierarchy information
                              of the term.
                            "guid": "str",  # Optional. The GUID of the object.
                            "itemPath": "str",  # Optional. The hierarchy information of
                              the term.
                            "name": "str",  # Optional. The hierarchy information of the
                              term.
                            "properties": {
                                "str": {}  # Optional. Dictionary of :code:`<any>`.
                            },
                            "resourceId": "str",  # Optional. The hierarchy information
                              of the term.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "isA": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "nickName": "str",  # Optional. The nick name of the term.
                    "preferredTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "preferredToTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "replacedBy": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "replacementTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "resources": [
                        {
                            "displayName": "str",  # Optional. Display name for url.
                            "url": "str"  # Optional. web url. http or https.
                        }
                    ],
                    "seeAlso": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "shortDescription": "str",  # Optional. The short version of description.
                    "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known values
                      are: "Draft", "Approved", "Alert", and "Expired".
                    "synonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "templateName": [
                        {}  # Optional.
                    ],
                    "translatedTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "translationTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str",  # Optional. The usage of the term.
                    "validValues": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "validValuesFor": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "abbreviation": "str",  # Optional. The abbreviation of the term.
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "antonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "assignedEntities": [
                        {
                            "displayText": "str",  # Optional. The display text.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "guid": "str",  # Optional. The GUID of the object.
                            "relationshipAttributes": {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "typeName": "str"  # Optional. The name of the type.
                            },
                            "relationshipGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "relationshipStatus": "str",  # Optional. The enum of
                              relationship status. Known values are: "ACTIVE" and "DELETED".
                            "relationshipType": "str",  # Optional. An array of related
                              object IDs.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "attributes": {
                        "str": {
                            "str": {}  # Optional. The custom attributes of the term,
                              which is map<string,map<string,object>>. The key of the first layer map
                              is term template name.
                        }
                    },
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              record.
                            "displayText": "str",  # Optional. The display text.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str"  # Optional. The status of term relationship.
                              Known values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and
                              "OTHER".
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "classifies": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "contacts": {
                        "str": [
                            {
                                "id": "str",  # Optional. Azure Active Directory
                                  object Id.
                                "info": "str"  # Optional. additional information to
                                  describe this contact.
                            }
                        ]
                    },
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "examples": [
                        "str"  # Optional. An array of examples.
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "hierarchyInfo": [
                        {
                            "displayText": "str",  # Optional. The hierarchy information
                              of the term.
                            "guid": "str",  # Optional. The GUID of the object.
                            "itemPath": "str",  # Optional. The hierarchy information of
                              the term.
                            "name": "str",  # Optional. The hierarchy information of the
                              term.
                            "properties": {
                                "str": {}  # Optional. Dictionary of :code:`<any>`.
                            },
                            "resourceId": "str",  # Optional. The hierarchy information
                              of the term.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "isA": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "nickName": "str",  # Optional. The nick name of the term.
                    "preferredTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "preferredToTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "replacedBy": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "replacementTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "resources": [
                        {
                            "displayName": "str",  # Optional. Display name for url.
                            "url": "str"  # Optional. web url. http or https.
                        }
                    ],
                    "seeAlso": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "shortDescription": "str",  # Optional. The short version of description.
                    "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known values
                      are: "Draft", "Approved", "Alert", and "Expired".
                    "synonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "templateName": [
                        {}  # Optional.
                    ],
                    "translatedTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "translationTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str",  # Optional. The usage of the term.
                    "validValues": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "validValuesFor": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(glossary_term, (IOBase, bytes)):
            _content = glossary_term
        else:
            _json = glossary_term

        _request = build_glossary_update_term_request(
            term_guid=term_guid,
            include_term_hierarchy=include_term_hierarchy,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def delete_term(self, term_guid: str, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Delete a glossary term.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_glossary_delete_term_request(
            term_guid=term_guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def partial_update_term(
        self, term_guid: str, partial_updates: JSON, *, include_term_hierarchy: bool = False, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """Update the glossary term partially. So far we only supports partial updating shortDescription,
        longDescription, abbreviation, usage and status for term.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param partial_updates: A map containing keys as attribute names and values as corresponding
         attribute values to be updated. Required.
        :type partial_updates: JSON
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "abbreviation": "str",  # Optional. The abbreviation of the term.
                    "anchor": {
                        "displayText": "str",  # Optional. The display text.
                        "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    },
                    "antonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "assignedEntities": [
                        {
                            "displayText": "str",  # Optional. The display text.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "guid": "str",  # Optional. The GUID of the object.
                            "relationshipAttributes": {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "typeName": "str"  # Optional. The name of the type.
                            },
                            "relationshipGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "relationshipStatus": "str",  # Optional. The enum of
                              relationship status. Known values are: "ACTIVE" and "DELETED".
                            "relationshipType": "str",  # Optional. An array of related
                              object IDs.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "attributes": {
                        "str": {
                            "str": {}  # Optional. The custom attributes of the term,
                              which is map<string,map<string,object>>. The key of the first layer map
                              is term template name.
                        }
                    },
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              record.
                            "displayText": "str",  # Optional. The display text.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str"  # Optional. The status of term relationship.
                              Known values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and
                              "OTHER".
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "classifies": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "contacts": {
                        "str": [
                            {
                                "id": "str",  # Optional. Azure Active Directory
                                  object Id.
                                "info": "str"  # Optional. additional information to
                                  describe this contact.
                            }
                        ]
                    },
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "examples": [
                        "str"  # Optional. An array of examples.
                    ],
                    "guid": "str",  # Optional. The GUID of the object.
                    "hierarchyInfo": [
                        {
                            "displayText": "str",  # Optional. The hierarchy information
                              of the term.
                            "guid": "str",  # Optional. The GUID of the object.
                            "itemPath": "str",  # Optional. The hierarchy information of
                              the term.
                            "name": "str",  # Optional. The hierarchy information of the
                              term.
                            "properties": {
                                "str": {}  # Optional. Dictionary of :code:`<any>`.
                            },
                            "resourceId": "str",  # Optional. The hierarchy information
                              of the term.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        }
                    ],
                    "isA": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "nickName": "str",  # Optional. The nick name of the term.
                    "preferredTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "preferredToTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "replacedBy": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "replacementTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "resources": [
                        {
                            "displayName": "str",  # Optional. Display name for url.
                            "url": "str"  # Optional. web url. http or https.
                        }
                    ],
                    "seeAlso": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "shortDescription": "str",  # Optional. The short version of description.
                    "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known values
                      are: "Draft", "Approved", "Alert", and "Expired".
                    "synonyms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "templateName": [
                        {}  # Optional.
                    ],
                    "translatedTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "translationTerms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str",  # Optional. The usage of the term.
                    "validValues": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "validValuesFor": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: str = kwargs.pop("content_type", _headers.pop("Content-Type", "application/json"))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _json = partial_updates

        _request = build_glossary_partial_update_term_request(
            term_guid=term_guid,
            include_term_hierarchy=include_term_hierarchy,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    def create_terms(
        self,
        glossary_term: List[JSON],
        *,
        include_term_hierarchy: bool = False,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> List[JSON]:
        # pylint: disable=line-too-long
        """Create glossary terms in bulk.

        :param glossary_term: An array of glossary term definitions to be created in bulk. Required.
        :type glossary_term: list[JSON]
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                glossary_term = [
                    {
                        "abbreviation": "str",  # Optional. The abbreviation of the term.
                        "anchor": {
                            "displayText": "str",  # Optional. The display text.
                            "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "antonyms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "assignedEntities": [
                            {
                                "displayText": "str",  # Optional. The display text.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed.
                                  Known values are: "ACTIVE" and "DELETED".
                                "guid": "str",  # Optional. The GUID of the object.
                                "relationshipAttributes": {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "typeName": "str"  # Optional. The name of
                                      the type.
                                },
                                "relationshipGuid": "str",  # Optional. The GUID of
                                  the relationship.
                                "relationshipStatus": "str",  # Optional. The enum of
                                  relationship status. Known values are: "ACTIVE" and "DELETED".
                                "relationshipType": "str",  # Optional. An array of
                                  related object IDs.
                                "typeName": "str",  # Optional. The name of the type.
                                "uniqueAttributes": {
                                    "str": {}  # Optional. The unique attributes
                                      of the object.
                                }
                            }
                        ],
                        "attributes": {
                            "str": {
                                "str": {}  # Optional. The custom attributes of the
                                  term, which is map<string,map<string,object>>. The key of the first
                                  layer map is term template name.
                            }
                        },
                        "categories": [
                            {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the record.
                                "displayText": "str",  # Optional. The display text.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str"  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                            }
                        ],
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed.
                                  Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "classifies": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "contacts": {
                            "str": [
                                {
                                    "id": "str",  # Optional. Azure Active
                                      Directory object Id.
                                    "info": "str"  # Optional. additional
                                      information to describe this contact.
                                }
                            ]
                        },
                        "createTime": 0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "examples": [
                            "str"  # Optional. An array of examples.
                        ],
                        "guid": "str",  # Optional. The GUID of the object.
                        "hierarchyInfo": [
                            {
                                "displayText": "str",  # Optional. The hierarchy
                                  information of the term.
                                "guid": "str",  # Optional. The GUID of the object.
                                "itemPath": "str",  # Optional. The hierarchy
                                  information of the term.
                                "name": "str",  # Optional. The hierarchy information
                                  of the term.
                                "properties": {
                                    "str": {}  # Optional. Dictionary of
                                      :code:`<any>`.
                                },
                                "resourceId": "str",  # Optional. The hierarchy
                                  information of the term.
                                "typeName": "str",  # Optional. The name of the type.
                                "uniqueAttributes": {
                                    "str": {}  # Optional. The unique attributes
                                      of the object.
                                }
                            }
                        ],
                        "isA": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "longDescription": "str",  # Optional. The long version description.
                        "name": "str",  # Optional. The name of the glossary object.
                        "nickName": "str",  # Optional. The nick name of the term.
                        "preferredTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "preferredToTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "qualifiedName": "str",  # Optional. The qualified name of the
                          glossary object.
                        "replacedBy": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "replacementTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "resources": [
                            {
                                "displayName": "str",  # Optional. Display name for
                                  url.
                                "url": "str"  # Optional. web url. http or https.
                            }
                        ],
                        "seeAlso": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "shortDescription": "str",  # Optional. The short version of
                          description.
                        "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known
                          values are: "Draft", "Approved", "Alert", and "Expired".
                        "synonyms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "templateName": [
                            {}  # Optional.
                        ],
                        "translatedTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "translationTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "updateTime": 0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "usage": "str",  # Optional. The usage of the term.
                        "validValues": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "validValuesFor": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ]
                    }
                ]

                # response body for status code(s): 200
                response == [
                    {
                        "abbreviation": "str",  # Optional. The abbreviation of the term.
                        "anchor": {
                            "displayText": "str",  # Optional. The display text.
                            "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "antonyms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "assignedEntities": [
                            {
                                "displayText": "str",  # Optional. The display text.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed.
                                  Known values are: "ACTIVE" and "DELETED".
                                "guid": "str",  # Optional. The GUID of the object.
                                "relationshipAttributes": {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "typeName": "str"  # Optional. The name of
                                      the type.
                                },
                                "relationshipGuid": "str",  # Optional. The GUID of
                                  the relationship.
                                "relationshipStatus": "str",  # Optional. The enum of
                                  relationship status. Known values are: "ACTIVE" and "DELETED".
                                "relationshipType": "str",  # Optional. An array of
                                  related object IDs.
                                "typeName": "str",  # Optional. The name of the type.
                                "uniqueAttributes": {
                                    "str": {}  # Optional. The unique attributes
                                      of the object.
                                }
                            }
                        ],
                        "attributes": {
                            "str": {
                                "str": {}  # Optional. The custom attributes of the
                                  term, which is map<string,map<string,object>>. The key of the first
                                  layer map is term template name.
                            }
                        },
                        "categories": [
                            {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the record.
                                "displayText": "str",  # Optional. The display text.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str"  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                            }
                        ],
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed.
                                  Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "classifies": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "contacts": {
                            "str": [
                                {
                                    "id": "str",  # Optional. Azure Active
                                      Directory object Id.
                                    "info": "str"  # Optional. additional
                                      information to describe this contact.
                                }
                            ]
                        },
                        "createTime": 0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "examples": [
                            "str"  # Optional. An array of examples.
                        ],
                        "guid": "str",  # Optional. The GUID of the object.
                        "hierarchyInfo": [
                            {
                                "displayText": "str",  # Optional. The hierarchy
                                  information of the term.
                                "guid": "str",  # Optional. The GUID of the object.
                                "itemPath": "str",  # Optional. The hierarchy
                                  information of the term.
                                "name": "str",  # Optional. The hierarchy information
                                  of the term.
                                "properties": {
                                    "str": {}  # Optional. Dictionary of
                                      :code:`<any>`.
                                },
                                "resourceId": "str",  # Optional. The hierarchy
                                  information of the term.
                                "typeName": "str",  # Optional. The name of the type.
                                "uniqueAttributes": {
                                    "str": {}  # Optional. The unique attributes
                                      of the object.
                                }
                            }
                        ],
                        "isA": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "longDescription": "str",  # Optional. The long version description.
                        "name": "str",  # Optional. The name of the glossary object.
                        "nickName": "str",  # Optional. The nick name of the term.
                        "preferredTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "preferredToTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "qualifiedName": "str",  # Optional. The qualified name of the
                          glossary object.
                        "replacedBy": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "replacementTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "resources": [
                            {
                                "displayName": "str",  # Optional. Display name for
                                  url.
                                "url": "str"  # Optional. web url. http or https.
                            }
                        ],
                        "seeAlso": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "shortDescription": "str",  # Optional. The short version of
                          description.
                        "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known
                          values are: "Draft", "Approved", "Alert", and "Expired".
                        "synonyms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "templateName": [
                            {}  # Optional.
                        ],
                        "translatedTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "translationTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "updateTime": 0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "usage": "str",  # Optional. The usage of the term.
                        "validValues": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "validValuesFor": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ]
                    }
                ]
        """

    @overload
    def create_terms(
        self,
        glossary_term: IO[bytes],
        *,
        include_term_hierarchy: bool = False,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> List[JSON]:
        # pylint: disable=line-too-long
        """Create glossary terms in bulk.

        :param glossary_term: An array of glossary term definitions to be created in bulk. Required.
        :type glossary_term: IO[bytes]
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == [
                    {
                        "abbreviation": "str",  # Optional. The abbreviation of the term.
                        "anchor": {
                            "displayText": "str",  # Optional. The display text.
                            "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "antonyms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "assignedEntities": [
                            {
                                "displayText": "str",  # Optional. The display text.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed.
                                  Known values are: "ACTIVE" and "DELETED".
                                "guid": "str",  # Optional. The GUID of the object.
                                "relationshipAttributes": {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "typeName": "str"  # Optional. The name of
                                      the type.
                                },
                                "relationshipGuid": "str",  # Optional. The GUID of
                                  the relationship.
                                "relationshipStatus": "str",  # Optional. The enum of
                                  relationship status. Known values are: "ACTIVE" and "DELETED".
                                "relationshipType": "str",  # Optional. An array of
                                  related object IDs.
                                "typeName": "str",  # Optional. The name of the type.
                                "uniqueAttributes": {
                                    "str": {}  # Optional. The unique attributes
                                      of the object.
                                }
                            }
                        ],
                        "attributes": {
                            "str": {
                                "str": {}  # Optional. The custom attributes of the
                                  term, which is map<string,map<string,object>>. The key of the first
                                  layer map is term template name.
                            }
                        },
                        "categories": [
                            {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the record.
                                "displayText": "str",  # Optional. The display text.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str"  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                            }
                        ],
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed.
                                  Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "classifies": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "contacts": {
                            "str": [
                                {
                                    "id": "str",  # Optional. Azure Active
                                      Directory object Id.
                                    "info": "str"  # Optional. additional
                                      information to describe this contact.
                                }
                            ]
                        },
                        "createTime": 0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "examples": [
                            "str"  # Optional. An array of examples.
                        ],
                        "guid": "str",  # Optional. The GUID of the object.
                        "hierarchyInfo": [
                            {
                                "displayText": "str",  # Optional. The hierarchy
                                  information of the term.
                                "guid": "str",  # Optional. The GUID of the object.
                                "itemPath": "str",  # Optional. The hierarchy
                                  information of the term.
                                "name": "str",  # Optional. The hierarchy information
                                  of the term.
                                "properties": {
                                    "str": {}  # Optional. Dictionary of
                                      :code:`<any>`.
                                },
                                "resourceId": "str",  # Optional. The hierarchy
                                  information of the term.
                                "typeName": "str",  # Optional. The name of the type.
                                "uniqueAttributes": {
                                    "str": {}  # Optional. The unique attributes
                                      of the object.
                                }
                            }
                        ],
                        "isA": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "longDescription": "str",  # Optional. The long version description.
                        "name": "str",  # Optional. The name of the glossary object.
                        "nickName": "str",  # Optional. The nick name of the term.
                        "preferredTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "preferredToTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "qualifiedName": "str",  # Optional. The qualified name of the
                          glossary object.
                        "replacedBy": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "replacementTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "resources": [
                            {
                                "displayName": "str",  # Optional. Display name for
                                  url.
                                "url": "str"  # Optional. web url. http or https.
                            }
                        ],
                        "seeAlso": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "shortDescription": "str",  # Optional. The short version of
                          description.
                        "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known
                          values are: "Draft", "Approved", "Alert", and "Expired".
                        "synonyms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "templateName": [
                            {}  # Optional.
                        ],
                        "translatedTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "translationTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "updateTime": 0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "usage": "str",  # Optional. The usage of the term.
                        "validValues": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "validValuesFor": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ]
                    }
                ]
        """

    @distributed_trace
    def create_terms(
        self, glossary_term: Union[List[JSON], IO[bytes]], *, include_term_hierarchy: bool = False, **kwargs: Any
    ) -> List[JSON]:
        # pylint: disable=line-too-long
        """Create glossary terms in bulk.

        :param glossary_term: An array of glossary term definitions to be created in bulk. Is either a
         [JSON] type or a IO[bytes] type. Required.
        :type glossary_term: list[JSON] or IO[bytes]
        :keyword include_term_hierarchy: Whether include term hierarchy. Default value is False.
        :paramtype include_term_hierarchy: bool
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == [
                    {
                        "abbreviation": "str",  # Optional. The abbreviation of the term.
                        "anchor": {
                            "displayText": "str",  # Optional. The display text.
                            "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "antonyms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "assignedEntities": [
                            {
                                "displayText": "str",  # Optional. The display text.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed.
                                  Known values are: "ACTIVE" and "DELETED".
                                "guid": "str",  # Optional. The GUID of the object.
                                "relationshipAttributes": {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "typeName": "str"  # Optional. The name of
                                      the type.
                                },
                                "relationshipGuid": "str",  # Optional. The GUID of
                                  the relationship.
                                "relationshipStatus": "str",  # Optional. The enum of
                                  relationship status. Known values are: "ACTIVE" and "DELETED".
                                "relationshipType": "str",  # Optional. An array of
                                  related object IDs.
                                "typeName": "str",  # Optional. The name of the type.
                                "uniqueAttributes": {
                                    "str": {}  # Optional. The unique attributes
                                      of the object.
                                }
                            }
                        ],
                        "attributes": {
                            "str": {
                                "str": {}  # Optional. The custom attributes of the
                                  term, which is map<string,map<string,object>>. The key of the first
                                  layer map is term template name.
                            }
                        },
                        "categories": [
                            {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the record.
                                "displayText": "str",  # Optional. The display text.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str"  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                            }
                        ],
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed.
                                  Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "classifies": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "contacts": {
                            "str": [
                                {
                                    "id": "str",  # Optional. Azure Active
                                      Directory object Id.
                                    "info": "str"  # Optional. additional
                                      information to describe this contact.
                                }
                            ]
                        },
                        "createTime": 0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "examples": [
                            "str"  # Optional. An array of examples.
                        ],
                        "guid": "str",  # Optional. The GUID of the object.
                        "hierarchyInfo": [
                            {
                                "displayText": "str",  # Optional. The hierarchy
                                  information of the term.
                                "guid": "str",  # Optional. The GUID of the object.
                                "itemPath": "str",  # Optional. The hierarchy
                                  information of the term.
                                "name": "str",  # Optional. The hierarchy information
                                  of the term.
                                "properties": {
                                    "str": {}  # Optional. Dictionary of
                                      :code:`<any>`.
                                },
                                "resourceId": "str",  # Optional. The hierarchy
                                  information of the term.
                                "typeName": "str",  # Optional. The name of the type.
                                "uniqueAttributes": {
                                    "str": {}  # Optional. The unique attributes
                                      of the object.
                                }
                            }
                        ],
                        "isA": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "longDescription": "str",  # Optional. The long version description.
                        "name": "str",  # Optional. The name of the glossary object.
                        "nickName": "str",  # Optional. The nick name of the term.
                        "preferredTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "preferredToTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "qualifiedName": "str",  # Optional. The qualified name of the
                          glossary object.
                        "replacedBy": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "replacementTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "resources": [
                            {
                                "displayName": "str",  # Optional. Display name for
                                  url.
                                "url": "str"  # Optional. web url. http or https.
                            }
                        ],
                        "seeAlso": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "shortDescription": "str",  # Optional. The short version of
                          description.
                        "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known
                          values are: "Draft", "Approved", "Alert", and "Expired".
                        "synonyms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "templateName": [
                            {}  # Optional.
                        ],
                        "translatedTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "translationTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "updateTime": 0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "usage": "str",  # Optional. The usage of the term.
                        "validValues": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "validValuesFor": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ]
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[List[JSON]] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(glossary_term, (IOBase, bytes)):
            _content = glossary_term
        else:
            _json = glossary_term

        _request = build_glossary_create_terms_request(
            include_term_hierarchy=include_term_hierarchy,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})  # type: ignore

        return cast(List[JSON], deserialized)  # type: ignore

    @distributed_trace
    def list_entities_assigned_with_term(
        self,
        term_guid: str,
        *,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        sort: str = "ASC",
        **kwargs: Any,
    ) -> List[JSON]:
        # pylint: disable=line-too-long
        """List all related objects assigned with the specified term. Recommend using limit/offset to get
        pagination result.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :keyword limit: The page size - by default there is no paging. Default value is None.
        :paramtype limit: int
        :keyword offset: The offset for pagination purpose. Default value is None.
        :paramtype offset: int
        :keyword sort: The sort order, ASC (default) or DESC. Default value is "ASC".
        :paramtype sort: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == [
                    {
                        "displayText": "str",  # Optional. The display text.
                        "entityStatus": "str",  # Optional. Status of the entity - can be
                          active or deleted. Deleted entities are not removed. Known values are:
                          "ACTIVE" and "DELETED".
                        "guid": "str",  # Optional. The GUID of the object.
                        "relationshipAttributes": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "typeName": "str"  # Optional. The name of the type.
                        },
                        "relationshipGuid": "str",  # Optional. The GUID of the relationship.
                        "relationshipStatus": "str",  # Optional. The enum of relationship
                          status. Known values are: "ACTIVE" and "DELETED".
                        "relationshipType": "str",  # Optional.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[JSON]] = kwargs.pop("cls", None)

        _request = build_glossary_list_entities_assigned_with_term_request(
            term_guid=term_guid,
            limit=limit,
            offset=offset,
            sort=sort,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})  # type: ignore

        return cast(List[JSON], deserialized)  # type: ignore

    @overload
    def assign_term_to_entities(  # pylint: disable=inconsistent-return-statements
        self, term_guid: str, related_object_ids: List[JSON], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        # pylint: disable=line-too-long
        """Assign the given term to the provided list of related objects. Recommend using small batches
        with multiple API calls.

        `Entities Create Or Update operation
        <https://learn.microsoft.com/en-us/rest/api/purview/datamapdataplane/entity/bulk-create-or-update?tabs=HTTP>`_
        is an alternative to assign a term to multiple entities.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param related_object_ids: An array of related object IDs to which the term has to be
         associated. Required.
        :type related_object_ids: list[JSON]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                related_object_ids = [
                    {
                        "displayText": "str",  # Optional. The display text.
                        "entityStatus": "str",  # Optional. Status of the entity - can be
                          active or deleted. Deleted entities are not removed. Known values are:
                          "ACTIVE" and "DELETED".
                        "guid": "str",  # Optional. The GUID of the object.
                        "relationshipAttributes": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "typeName": "str"  # Optional. The name of the type.
                        },
                        "relationshipGuid": "str",  # Optional. The GUID of the relationship.
                        "relationshipStatus": "str",  # Optional. The enum of relationship
                          status. Known values are: "ACTIVE" and "DELETED".
                        "relationshipType": "str",  # Optional.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    }
                ]
        """

    @overload
    def assign_term_to_entities(  # pylint: disable=inconsistent-return-statements
        self, term_guid: str, related_object_ids: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Assign the given term to the provided list of related objects. Recommend using small batches
        with multiple API calls.

        `Entities Create Or Update operation
        <https://learn.microsoft.com/en-us/rest/api/purview/datamapdataplane/entity/bulk-create-or-update?tabs=HTTP>`_
        is an alternative to assign a term to multiple entities.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param related_object_ids: An array of related object IDs to which the term has to be
         associated. Required.
        :type related_object_ids: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def assign_term_to_entities(  # pylint: disable=inconsistent-return-statements
        self, term_guid: str, related_object_ids: Union[List[JSON], IO[bytes]], **kwargs: Any
    ) -> None:
        """Assign the given term to the provided list of related objects. Recommend using small batches
        with multiple API calls.

        `Entities Create Or Update operation
        <https://learn.microsoft.com/en-us/rest/api/purview/datamapdataplane/entity/bulk-create-or-update?tabs=HTTP>`_
        is an alternative to assign a term to multiple entities.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param related_object_ids: An array of related object IDs to which the term has to be
         associated. Is either a [JSON] type or a IO[bytes] type. Required.
        :type related_object_ids: list[JSON] or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(related_object_ids, (IOBase, bytes)):
            _content = related_object_ids
        else:
            _json = related_object_ids

        _request = build_glossary_assign_term_to_entities_request(
            term_guid=term_guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @overload
    def delete_term_assignment_from_entities(  # pylint: disable=inconsistent-return-statements
        self, term_guid: str, related_object_ids: List[JSON], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        # pylint: disable=line-too-long
        """Delete the term assignment for the given list of related objects.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param related_object_ids: An array of related object IDs from which the term has to be
         dissociated. Required.
        :type related_object_ids: list[JSON]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                related_object_ids = [
                    {
                        "displayText": "str",  # Optional. The display text.
                        "entityStatus": "str",  # Optional. Status of the entity - can be
                          active or deleted. Deleted entities are not removed. Known values are:
                          "ACTIVE" and "DELETED".
                        "guid": "str",  # Optional. The GUID of the object.
                        "relationshipAttributes": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "typeName": "str"  # Optional. The name of the type.
                        },
                        "relationshipGuid": "str",  # Optional. The GUID of the relationship.
                        "relationshipStatus": "str",  # Optional. The enum of relationship
                          status. Known values are: "ACTIVE" and "DELETED".
                        "relationshipType": "str",  # Optional.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    }
                ]
        """

    @overload
    def delete_term_assignment_from_entities(  # pylint: disable=inconsistent-return-statements
        self, term_guid: str, related_object_ids: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Delete the term assignment for the given list of related objects.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param related_object_ids: An array of related object IDs from which the term has to be
         dissociated. Required.
        :type related_object_ids: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def delete_term_assignment_from_entities(  # pylint: disable=inconsistent-return-statements
        self, term_guid: str, related_object_ids: Union[List[JSON], IO[bytes]], **kwargs: Any
    ) -> None:
        """Delete the term assignment for the given list of related objects.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :param related_object_ids: An array of related object IDs from which the term has to be
         dissociated. Is either a [JSON] type or a IO[bytes] type. Required.
        :type related_object_ids: list[JSON] or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(related_object_ids, (IOBase, bytes)):
            _content = related_object_ids
        else:
            _json = related_object_ids

        _request = build_glossary_delete_term_assignment_from_entities_request(
            term_guid=term_guid,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def list_related_terms(
        self,
        term_guid: str,
        *,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        sort: str = "ASC",
        **kwargs: Any,
    ) -> Dict[str, List[JSON]]:
        # pylint: disable=line-too-long
        """Get all related terms for a specific term by its GUID. Limit, offset, and sort parameters are
        currently not being enabled and won't work even they are passed.

        :param term_guid: The globally unique identifier for glossary term. Required.
        :type term_guid: str
        :keyword limit: The page size - by default there is no paging. Default value is None.
        :paramtype limit: int
        :keyword offset: The offset for pagination purpose. Default value is None.
        :paramtype offset: int
        :keyword sort: The sort order, ASC (default) or DESC. Default value is "ASC".
        :paramtype sort: str
        :return: dict mapping str to list of JSON object
        :rtype: dict[str, list[JSON]]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "str": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Dict[str, List[JSON]]] = kwargs.pop("cls", None)

        _request = build_glossary_list_related_terms_request(
            term_guid=term_guid,
            limit=limit,
            offset=offset,
            sort=sort,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(Dict[str, List[JSON]], deserialized), {})  # type: ignore

        return cast(Dict[str, List[JSON]], deserialized)  # type: ignore

    @distributed_trace
    def get(self, glossary_guid: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get a specific Glossary by its GUID.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str"  # Optional. The usage of the glossary.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_glossary_get_request(
            glossary_guid=glossary_guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    def update(
        self,
        glossary_guid: str,
        updated_glossary: JSON,
        *,
        ignore_terms_and_categories: bool = False,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """Update the given glossary.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :param updated_glossary: The glossary definition to be updated. Required.
        :type updated_glossary: JSON
        :keyword ignore_terms_and_categories: Whether ignore terms and categories. Default value is
         False.
        :paramtype ignore_terms_and_categories: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                updated_glossary = {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str"  # Optional. The usage of the glossary.
                }

                # response body for status code(s): 200
                response == {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str"  # Optional. The usage of the glossary.
                }
        """

    @overload
    def update(
        self,
        glossary_guid: str,
        updated_glossary: IO[bytes],
        *,
        ignore_terms_and_categories: bool = False,
        content_type: str = "application/json",
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """Update the given glossary.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :param updated_glossary: The glossary definition to be updated. Required.
        :type updated_glossary: IO[bytes]
        :keyword ignore_terms_and_categories: Whether ignore terms and categories. Default value is
         False.
        :paramtype ignore_terms_and_categories: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str"  # Optional. The usage of the glossary.
                }
        """

    @distributed_trace
    def update(
        self,
        glossary_guid: str,
        updated_glossary: Union[JSON, IO[bytes]],
        *,
        ignore_terms_and_categories: bool = False,
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """Update the given glossary.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :param updated_glossary: The glossary definition to be updated. Is either a JSON type or a
         IO[bytes] type. Required.
        :type updated_glossary: JSON or IO[bytes]
        :keyword ignore_terms_and_categories: Whether ignore terms and categories. Default value is
         False.
        :paramtype ignore_terms_and_categories: bool
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                updated_glossary = {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str"  # Optional. The usage of the glossary.
                }

                # response body for status code(s): 200
                response == {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str"  # Optional. The usage of the glossary.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(updated_glossary, (IOBase, bytes)):
            _content = updated_glossary
        else:
            _json = updated_glossary

        _request = build_glossary_update_request(
            glossary_guid=glossary_guid,
            ignore_terms_and_categories=ignore_terms_and_categories,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def delete(self, glossary_guid: str, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Delete a glossary. Will delete underlying terms/categories together. Recommend separate delete
        terms and categories.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_glossary_delete_request(
            glossary_guid=glossary_guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def list_categories(
        self,
        glossary_guid: str,
        *,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        sort: str = "ASC",
        **kwargs: Any,
    ) -> List[JSON]:
        # pylint: disable=line-too-long
        """Get the categories belonging to a specific glossary. Recommend using limit/offset to get
        pagination result.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :keyword limit: The page size - by default there is no paging. Default value is None.
        :paramtype limit: int
        :keyword offset: The offset for pagination purpose. Default value is None.
        :paramtype offset: int
        :keyword sort: The sort order, ASC (default) or DESC. Default value is "ASC".
        :paramtype sort: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == [
                    {
                        "anchor": {
                            "displayText": "str",  # Optional. The display text.
                            "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "childrenCategories": [
                            {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the category header.
                                "displayText": "str",  # Optional. The display text.
                                "parentCategoryGuid": "str",  # Optional. The GUID of
                                  the parent category.
                                "relationGuid": "str"  # Optional. The GUID of the
                                  relationship.
                            }
                        ],
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed.
                                  Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "createTime": 0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "guid": "str",  # Optional. The GUID of the object.
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "longDescription": "str",  # Optional. The long version description.
                        "name": "str",  # Optional. The name of the glossary object.
                        "parentCategory": {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "qualifiedName": "str",  # Optional. The qualified name of the
                          glossary object.
                        "shortDescription": "str",  # Optional. The short version of
                          description.
                        "terms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "updateTime": 0,  # Optional. The update time of the record.
                        "updatedBy": "str"  # Optional. The user who updated the record.
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[JSON]] = kwargs.pop("cls", None)

        _request = build_glossary_list_categories_request(
            glossary_guid=glossary_guid,
            limit=limit,
            offset=offset,
            sort=sort,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})  # type: ignore

        return cast(List[JSON], deserialized)  # type: ignore

    @distributed_trace
    def list_categories_headers(
        self,
        glossary_guid: str,
        *,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        sort: str = "ASC",
        **kwargs: Any,
    ) -> List[JSON]:
        """Get the category headers belonging to a specific glossary. Recommend using limit/offset to get
        pagination result.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :keyword limit: The page size - by default there is no paging. Default value is None.
        :paramtype limit: int
        :keyword offset: The offset for pagination purpose. Default value is None.
        :paramtype offset: int
        :keyword sort: The sort order, ASC (default) or DESC. Default value is "ASC".
        :paramtype sort: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == [
                    {
                        "categoryGuid": "str",  # Optional. The GUID of the category.
                        "description": "str",  # Optional. The description of the category
                          header.
                        "displayText": "str",  # Optional. The display text.
                        "parentCategoryGuid": "str",  # Optional. The GUID of the parent
                          category.
                        "relationGuid": "str"  # Optional. The GUID of the relationship.
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[JSON]] = kwargs.pop("cls", None)

        _request = build_glossary_list_categories_headers_request(
            glossary_guid=glossary_guid,
            limit=limit,
            offset=offset,
            sort=sort,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})  # type: ignore

        return cast(List[JSON], deserialized)  # type: ignore

    @distributed_trace
    def get_detailed(self, glossary_guid: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get a specific glossary with detailed information. This API is not recommend.

        Recommend to fetch terms/categories details separately using

         'GET /datamap/api/atlas/v2/glossary/{glossaryGuid}/terms' and

         'GET '/datamap/api/atlas/v2/glossary/{glossaryGuid}/categories'.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "categoryInfo": {
                        "str": {
                            "anchor": {
                                "displayText": "str",  # Optional. The display text.
                                "glossaryGuid": "str",  # Optional. The GUID of the
                                  glossary.
                                "relationGuid": "str"  # Optional. The GUID of the
                                  relationship.
                            },
                            "childrenCategories": [
                                {
                                    "categoryGuid": "str",  # Optional. The GUID
                                      of the category.
                                    "description": "str",  # Optional. The
                                      description of the category header.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "parentCategoryGuid": "str",  # Optional. The
                                      GUID of the parent category.
                                    "relationGuid": "str"  # Optional. The GUID
                                      of the relationship.
                                }
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "guid": "str",  # Optional. The GUID of the object.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "longDescription": "str",  # Optional. The long version
                              description.
                            "name": "str",  # Optional. The name of the glossary object.
                            "parentCategory": {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the category header.
                                "displayText": "str",  # Optional. The display text.
                                "parentCategoryGuid": "str",  # Optional. The GUID of
                                  the parent category.
                                "relationGuid": "str"  # Optional. The GUID of the
                                  relationship.
                            },
                            "qualifiedName": "str",  # Optional. The qualified name of
                              the glossary object.
                            "shortDescription": "str",  # Optional. The short version of
                              description.
                            "terms": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str"  # Optional. The user who updated the
                              record.
                        }
                    },
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "termInfo": {
                        "str": {
                            "abbreviation": "str",  # Optional. The abbreviation of the
                              term.
                            "anchor": {
                                "displayText": "str",  # Optional. The display text.
                                "glossaryGuid": "str",  # Optional. The GUID of the
                                  glossary.
                                "relationGuid": "str"  # Optional. The GUID of the
                                  relationship.
                            },
                            "antonyms": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "assignedEntities": [
                                {
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "guid": "str",  # Optional. The GUID of the
                                      object.
                                    "relationshipAttributes": {
                                        "attributes": {
                                            "str": {}  # Optional. The
                                              attributes of the struct.
                                        },
                                        "lastModifiedTS": "str",  # Optional.
                                          ETag for concurrency control.
                                        "typeName": "str"  # Optional. The
                                          name of the type.
                                    },
                                    "relationshipGuid": "str",  # Optional. The
                                      GUID of the relationship.
                                    "relationshipStatus": "str",  # Optional. The
                                      enum of relationship status. Known values are: "ACTIVE" and
                                      "DELETED".
                                    "relationshipType": "str",  # Optional. An
                                      array of related object IDs.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "uniqueAttributes": {
                                        "str": {}  # Optional. The unique
                                          attributes of the object.
                                    }
                                }
                            ],
                            "attributes": {
                                "str": {
                                    "str": {}  # Optional. The custom attributes
                                      of the term, which is map<string,map<string,object>>. The key of
                                      the first layer map is term template name.
                                }
                            },
                            "categories": [
                                {
                                    "categoryGuid": "str",  # Optional. The GUID
                                      of the category.
                                    "description": "str",  # Optional. The
                                      description of the record.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str"  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                }
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "classifies": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "contacts": {
                                "str": [
                                    {
                                        "id": "str",  # Optional. Azure
                                          Active Directory object Id.
                                        "info": "str"  # Optional. additional
                                          information to describe this contact.
                                    }
                                ]
                            },
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "examples": [
                                "str"  # Optional. An array of examples.
                            ],
                            "guid": "str",  # Optional. The GUID of the object.
                            "hierarchyInfo": [
                                {
                                    "displayText": "str",  # Optional. The
                                      hierarchy information of the term.
                                    "guid": "str",  # Optional. The GUID of the
                                      object.
                                    "itemPath": "str",  # Optional. The hierarchy
                                      information of the term.
                                    "name": "str",  # Optional. The hierarchy
                                      information of the term.
                                    "properties": {
                                        "str": {}  # Optional. Dictionary of
                                          :code:`<any>`.
                                    },
                                    "resourceId": "str",  # Optional. The
                                      hierarchy information of the term.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "uniqueAttributes": {
                                        "str": {}  # Optional. The unique
                                          attributes of the object.
                                    }
                                }
                            ],
                            "isA": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "longDescription": "str",  # Optional. The long version
                              description.
                            "name": "str",  # Optional. The name of the glossary object.
                            "nickName": "str",  # Optional. The nick name of the term.
                            "preferredTerms": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "preferredToTerms": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "qualifiedName": "str",  # Optional. The qualified name of
                              the glossary object.
                            "replacedBy": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "replacementTerms": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "resources": [
                                {
                                    "displayName": "str",  # Optional. Display
                                      name for url.
                                    "url": "str"  # Optional. web url. http or
                                      https.
                                }
                            ],
                            "seeAlso": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "shortDescription": "str",  # Optional. The short version of
                              description.
                            "status": "str",  # Optional. Status of the
                              AtlasGlossaryTerm. Known values are: "Draft", "Approved", "Alert", and
                              "Expired".
                            "synonyms": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "templateName": [
                                {}  # Optional. The glossary term information.
                            ],
                            "translatedTerms": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "translationTerms": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "usage": "str",  # Optional. The usage of the term.
                            "validValues": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "validValuesFor": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the related term.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      term relationship. Known values are: "DRAFT", "ACTIVE",
                                      "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ]
                        }
                    },
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str"  # Optional. The usage of the glossary.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_glossary_get_detailed_request(
            glossary_guid=glossary_guid,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def partial_update(
        self, glossary_guid: str, partial_updates: JSON, *, ignore_terms_and_categories: bool = False, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """Update the glossary partially. Some properties such as qualifiedName are not allowed to be
        updated.

        So far we only supports partial updating shortDescription, longDescription, language and usage
        for glossary.

        Recommend using 'ignoreTermsAndCategories=true' to reduce response body size.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :param partial_updates: A map containing keys as attribute names and values as corresponding
         attribute values. Required.
        :type partial_updates: JSON
        :keyword ignore_terms_and_categories: Whether ignore terms and categories. Default value is
         False.
        :paramtype ignore_terms_and_categories: bool
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "categories": [
                        {
                            "categoryGuid": "str",  # Optional. The GUID of the category.
                            "description": "str",  # Optional. The description of the
                              category header.
                            "displayText": "str",  # Optional. The display text.
                            "parentCategoryGuid": "str",  # Optional. The GUID of the
                              parent category.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        }
                    ],
                    "classifications": [
                        {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "entityGuid": "str",  # Optional. The GUID of the entity.
                            "entityStatus": "str",  # Optional. Status of the entity -
                              can be active or deleted. Deleted entities are not removed. Known values
                              are: "ACTIVE" and "DELETED".
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "removePropagationsOnEntityDelete": bool,  # Optional.
                              Determines if propagations will be removed on entity deletion.
                            "typeName": "str",  # Optional. The name of the type.
                            "validityPeriods": [
                                {
                                    "endTime": "str",  # Optional. The end of the
                                      time boundary.
                                    "startTime": "str",  # Optional. The start of
                                      the time boundary.
                                    "timeZone": "str"  # Optional. The timezone
                                      of the time boundary.
                                }
                            ]
                        }
                    ],
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "guid": "str",  # Optional. The GUID of the object.
                    "language": "str",  # Optional. The language of the glossary.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "longDescription": "str",  # Optional. The long version description.
                    "name": "str",  # Optional. The name of the glossary object.
                    "qualifiedName": "str",  # Optional. The qualified name of the glossary
                      object.
                    "shortDescription": "str",  # Optional. The short version of description.
                    "terms": [
                        {
                            "description": "str",  # Optional. The description of the
                              related term.
                            "displayText": "str",  # Optional. The display text.
                            "expression": "str",  # Optional. The expression of the term.
                            "relationGuid": "str",  # Optional. The GUID of the
                              relationship.
                            "status": "str",  # Optional. The status of term
                              relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                              "OBSOLETE", and "OTHER".
                            "steward": "str",  # Optional. The steward of the term.
                            "termGuid": "str"  # Optional. The GUID of the term.
                        }
                    ],
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "usage": "str"  # Optional. The usage of the glossary.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: str = kwargs.pop("content_type", _headers.pop("Content-Type", "application/json"))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _json = partial_updates

        _request = build_glossary_partial_update_request(
            glossary_guid=glossary_guid,
            ignore_terms_and_categories=ignore_terms_and_categories,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def list_terms(
        self,
        glossary_guid: str,
        *,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        sort: str = "ASC",
        **kwargs: Any,
    ) -> List[JSON]:
        # pylint: disable=line-too-long
        """Get terms belonging to a specific glossary. Recommend using limit/offset to get pagination
        result.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :keyword limit: The page size - by default there is no paging. Default value is None.
        :paramtype limit: int
        :keyword offset: The offset for pagination purpose. Default value is None.
        :paramtype offset: int
        :keyword sort: The sort order, ASC (default) or DESC. Default value is "ASC".
        :paramtype sort: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == [
                    {
                        "abbreviation": "str",  # Optional. The abbreviation of the term.
                        "anchor": {
                            "displayText": "str",  # Optional. The display text.
                            "glossaryGuid": "str",  # Optional. The GUID of the glossary.
                            "relationGuid": "str"  # Optional. The GUID of the
                              relationship.
                        },
                        "antonyms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "assignedEntities": [
                            {
                                "displayText": "str",  # Optional. The display text.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed.
                                  Known values are: "ACTIVE" and "DELETED".
                                "guid": "str",  # Optional. The GUID of the object.
                                "relationshipAttributes": {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "typeName": "str"  # Optional. The name of
                                      the type.
                                },
                                "relationshipGuid": "str",  # Optional. The GUID of
                                  the relationship.
                                "relationshipStatus": "str",  # Optional. The enum of
                                  relationship status. Known values are: "ACTIVE" and "DELETED".
                                "relationshipType": "str",  # Optional. An array of
                                  related object IDs.
                                "typeName": "str",  # Optional. The name of the type.
                                "uniqueAttributes": {
                                    "str": {}  # Optional. The unique attributes
                                      of the object.
                                }
                            }
                        ],
                        "attributes": {
                            "str": {
                                "str": {}  # Optional. The custom attributes of the
                                  term, which is map<string,map<string,object>>. The key of the first
                                  layer map is term template name.
                            }
                        },
                        "categories": [
                            {
                                "categoryGuid": "str",  # Optional. The GUID of the
                                  category.
                                "description": "str",  # Optional. The description of
                                  the record.
                                "displayText": "str",  # Optional. The display text.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str"  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                            }
                        ],
                        "classifications": [
                            {
                                "attributes": {
                                    "str": {}  # Optional. The attributes of the
                                      struct.
                                },
                                "entityGuid": "str",  # Optional. The GUID of the
                                  entity.
                                "entityStatus": "str",  # Optional. Status of the
                                  entity - can be active or deleted. Deleted entities are not removed.
                                  Known values are: "ACTIVE" and "DELETED".
                                "lastModifiedTS": "str",  # Optional. ETag for
                                  concurrency control.
                                "removePropagationsOnEntityDelete": bool,  #
                                  Optional. Determines if propagations will be removed on entity
                                  deletion.
                                "typeName": "str",  # Optional. The name of the type.
                                "validityPeriods": [
                                    {
                                        "endTime": "str",  # Optional. The
                                          end of the time boundary.
                                        "startTime": "str",  # Optional. The
                                          start of the time boundary.
                                        "timeZone": "str"  # Optional. The
                                          timezone of the time boundary.
                                    }
                                ]
                            }
                        ],
                        "classifies": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "contacts": {
                            "str": [
                                {
                                    "id": "str",  # Optional. Azure Active
                                      Directory object Id.
                                    "info": "str"  # Optional. additional
                                      information to describe this contact.
                                }
                            ]
                        },
                        "createTime": 0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "examples": [
                            "str"  # Optional. An array of examples.
                        ],
                        "guid": "str",  # Optional. The GUID of the object.
                        "hierarchyInfo": [
                            {
                                "displayText": "str",  # Optional. The hierarchy
                                  information of the term.
                                "guid": "str",  # Optional. The GUID of the object.
                                "itemPath": "str",  # Optional. The hierarchy
                                  information of the term.
                                "name": "str",  # Optional. The hierarchy information
                                  of the term.
                                "properties": {
                                    "str": {}  # Optional. Dictionary of
                                      :code:`<any>`.
                                },
                                "resourceId": "str",  # Optional. The hierarchy
                                  information of the term.
                                "typeName": "str",  # Optional. The name of the type.
                                "uniqueAttributes": {
                                    "str": {}  # Optional. The unique attributes
                                      of the object.
                                }
                            }
                        ],
                        "isA": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "longDescription": "str",  # Optional. The long version description.
                        "name": "str",  # Optional. The name of the glossary object.
                        "nickName": "str",  # Optional. The nick name of the term.
                        "preferredTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "preferredToTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "qualifiedName": "str",  # Optional. The qualified name of the
                          glossary object.
                        "replacedBy": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "replacementTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "resources": [
                            {
                                "displayName": "str",  # Optional. Display name for
                                  url.
                                "url": "str"  # Optional. web url. http or https.
                            }
                        ],
                        "seeAlso": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "shortDescription": "str",  # Optional. The short version of
                          description.
                        "status": "str",  # Optional. Status of the AtlasGlossaryTerm. Known
                          values are: "Draft", "Approved", "Alert", and "Expired".
                        "synonyms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "templateName": [
                            {}  # Optional.
                        ],
                        "translatedTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "translationTerms": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "updateTime": 0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "usage": "str",  # Optional. The usage of the term.
                        "validValues": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ],
                        "validValuesFor": [
                            {
                                "description": "str",  # Optional. The description of
                                  the related term.
                                "displayText": "str",  # Optional. The display text.
                                "expression": "str",  # Optional. The expression of
                                  the term.
                                "relationGuid": "str",  # Optional. The GUID of the
                                  relationship.
                                "status": "str",  # Optional. The status of term
                                  relationship. Known values are: "DRAFT", "ACTIVE", "DEPRECATED",
                                  "OBSOLETE", and "OTHER".
                                "steward": "str",  # Optional. The steward of the
                                  term.
                                "termGuid": "str"  # Optional. The GUID of the term.
                            }
                        ]
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[JSON]] = kwargs.pop("cls", None)

        _request = build_glossary_list_terms_request(
            glossary_guid=glossary_guid,
            limit=limit,
            offset=offset,
            sort=sort,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})  # type: ignore

        return cast(List[JSON], deserialized)  # type: ignore

    @distributed_trace
    def list_term_headers(
        self,
        glossary_guid: str,
        *,
        limit: Optional[int] = None,
        offset: Optional[int] = None,
        sort: str = "ASC",
        **kwargs: Any,
    ) -> List[JSON]:
        # pylint: disable=line-too-long
        """Get term headers belonging to a specific glossary. Recommend using limit/offset to get
        pagination result.

        :param glossary_guid: The globally unique identifier for glossary. Required.
        :type glossary_guid: str
        :keyword limit: The page size - by default there is no paging. Default value is None.
        :paramtype limit: int
        :keyword offset: The offset for pagination purpose. Default value is None.
        :paramtype offset: int
        :keyword sort: The sort order, ASC (default) or DESC. Default value is "ASC".
        :paramtype sort: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == [
                    {
                        "description": "str",  # Optional. The description of the related
                          term.
                        "displayText": "str",  # Optional. The display text.
                        "expression": "str",  # Optional. The expression of the term.
                        "relationGuid": "str",  # Optional. The GUID of the relationship.
                        "status": "str",  # Optional. The status of term relationship. Known
                          values are: "DRAFT", "ACTIVE", "DEPRECATED", "OBSOLETE", and "OTHER".
                        "steward": "str",  # Optional. The steward of the term.
                        "termGuid": "str"  # Optional. The GUID of the term.
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[JSON]] = kwargs.pop("cls", None)

        _request = build_glossary_list_term_headers_request(
            glossary_guid=glossary_guid,
            limit=limit,
            offset=offset,
            sort=sort,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})  # type: ignore

        return cast(List[JSON], deserialized)  # type: ignore


class DiscoveryOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.datamap.PurviewDataMapClient`'s
        :attr:`discovery` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    def query(self, search_request: JSON, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get data using search.

        :param search_request: An object specifying the search criteria. Required.
        :type search_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                search_request = {
                    "continuationToken": "str",  # Optional. The token used to get next batch of
                      data. Default 'Null' to get the first batch, and will return new token in each
                      response unless there's no more data.
                    "facets": [
                        {
                            "count": 0,  # Optional. The count of the facet item.
                            "facet": "str",  # Optional. The name of the facet item.
                            "sort": {}  # Optional. Any object.
                        }
                    ],
                    "filter": {},  # Optional. The filter for the search. See examples for the
                      usage of supported filters.
                    "keywords": "str",  # Optional. The keywords applied to all searchable
                      fields.
                    "limit": 0,  # Optional. The limit of the number of the search result.
                      default value is 50; maximum value is 1000.
                    "orderby": [
                        {}  # Optional. The sort order of search results, can specify
                          multiple fields.
                    ],
                    "taxonomySetting": {
                        "assetTypes": [
                            "str"  # Optional.
                        ],
                        "facet": {
                            "count": 0,  # Optional. The count of the facet item.
                            "facet": "str",  # Optional. The name of the facet item.
                            "sort": {}  # Optional. Any object.
                        }
                    }
                }

                # response body for status code(s): 200
                response == {
                    "@search.count": 0,  # Optional. The total number of search results (not the
                      number of documents in a single page).
                    "@search.count.approximate": bool,  # Optional. 'True' if the '@search.count'
                      is an approximate value and vise versa.
                    "@search.facets": {
                        "assetType": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "classification": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "contactId": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "contactType": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "entityType": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "glossaryType": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "label": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "term": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "termStatus": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "termTemplate": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ]
                    },
                    "continuationToken": "str",  # Optional. The token used to get next batch of
                      data. Absent if there's no more data.
                    "value": [
                        {
                            "@search.highlights": {
                                "description": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ],
                                "entityType": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ],
                                "id": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ],
                                "name": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ],
                                "qualifiedName": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ]
                            },
                            "@search.score": 0.0,  # Optional. The search score
                              calculated by the search engine. The results are ordered by search score
                              by default.
                            "assetType": [
                                "str"  # Optional. The asset types of the asset.
                            ],
                            "classification": [
                                "str"  # Optional. The classifications of the record.
                            ],
                            "contact": [
                                {
                                    "contactType": "str",  # Optional. The type
                                      of the contact. It can be Expert or Owner for an entity. It can
                                      be Expert or Steward for a glossary term.
                                    "id": "str",  # Optional. The GUID of the
                                      contact.
                                    "info": "str"  # Optional. The description of
                                      the contact.
                                }
                            ],
                            "createTime": 0,  # Optional. The create time of the record.
                              The Unix epoch format.
                            "description": "str",  # Optional. The description of the
                              asset.
                            "endorsement": "str",  # Optional. The endorsement of the
                              asset.
                            "entityType": "str",  # Optional. The type name of the asset.
                            "glossary": "str",  # Optional. The glossary name of the
                              term.
                            "glossaryType": "str",  # Optional. The type name of the
                              term. Could be AtlasGlossary, AtlasGlossaryTerm or AtlasGlossaryCategory.
                            "id": "str",  # Optional. The GUID of the record.
                            "label": [
                                "str"  # Optional. The labels of the asset.
                            ],
                            "longDescription": "str",  # Optional. The definition of the
                              term.
                            "name": "str",  # Optional. The name of the record.
                            "objectType": "str",  # Optional. The object type of the
                              record. Object type is the top-level property to distinguish whether a
                              record is an asset or a term.
                            "owner": "str",  # Optional. The owner of the record.
                            "qualifiedName": "str",  # Optional. The qualified name of
                              the record.
                            "term": [
                                {
                                    "glossaryName": "str",  # Optional. The name
                                      of the glossary which contains the term.
                                    "guid": "str",  # Optional. The GUID of the
                                      term.
                                    "name": "str"  # Optional. The name of the
                                      term.
                                }
                            ],
                            "termStatus": "str",  # Optional. The status of the term.
                            "termTemplate": [
                                "str"  # Optional. The term template names used by
                                  the term.
                            ],
                            "updateTime": 0  # Optional. The last update time of the
                              record. The Unix epoch format.
                        }
                    ]
                }
        """

    @overload
    def query(self, search_request: IO[bytes], *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get data using search.

        :param search_request: An object specifying the search criteria. Required.
        :type search_request: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "@search.count": 0,  # Optional. The total number of search results (not the
                      number of documents in a single page).
                    "@search.count.approximate": bool,  # Optional. 'True' if the '@search.count'
                      is an approximate value and vise versa.
                    "@search.facets": {
                        "assetType": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "classification": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "contactId": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "contactType": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "entityType": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "glossaryType": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "label": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "term": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "termStatus": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "termTemplate": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ]
                    },
                    "continuationToken": "str",  # Optional. The token used to get next batch of
                      data. Absent if there's no more data.
                    "value": [
                        {
                            "@search.highlights": {
                                "description": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ],
                                "entityType": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ],
                                "id": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ],
                                "name": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ],
                                "qualifiedName": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ]
                            },
                            "@search.score": 0.0,  # Optional. The search score
                              calculated by the search engine. The results are ordered by search score
                              by default.
                            "assetType": [
                                "str"  # Optional. The asset types of the asset.
                            ],
                            "classification": [
                                "str"  # Optional. The classifications of the record.
                            ],
                            "contact": [
                                {
                                    "contactType": "str",  # Optional. The type
                                      of the contact. It can be Expert or Owner for an entity. It can
                                      be Expert or Steward for a glossary term.
                                    "id": "str",  # Optional. The GUID of the
                                      contact.
                                    "info": "str"  # Optional. The description of
                                      the contact.
                                }
                            ],
                            "createTime": 0,  # Optional. The create time of the record.
                              The Unix epoch format.
                            "description": "str",  # Optional. The description of the
                              asset.
                            "endorsement": "str",  # Optional. The endorsement of the
                              asset.
                            "entityType": "str",  # Optional. The type name of the asset.
                            "glossary": "str",  # Optional. The glossary name of the
                              term.
                            "glossaryType": "str",  # Optional. The type name of the
                              term. Could be AtlasGlossary, AtlasGlossaryTerm or AtlasGlossaryCategory.
                            "id": "str",  # Optional. The GUID of the record.
                            "label": [
                                "str"  # Optional. The labels of the asset.
                            ],
                            "longDescription": "str",  # Optional. The definition of the
                              term.
                            "name": "str",  # Optional. The name of the record.
                            "objectType": "str",  # Optional. The object type of the
                              record. Object type is the top-level property to distinguish whether a
                              record is an asset or a term.
                            "owner": "str",  # Optional. The owner of the record.
                            "qualifiedName": "str",  # Optional. The qualified name of
                              the record.
                            "term": [
                                {
                                    "glossaryName": "str",  # Optional. The name
                                      of the glossary which contains the term.
                                    "guid": "str",  # Optional. The GUID of the
                                      term.
                                    "name": "str"  # Optional. The name of the
                                      term.
                                }
                            ],
                            "termStatus": "str",  # Optional. The status of the term.
                            "termTemplate": [
                                "str"  # Optional. The term template names used by
                                  the term.
                            ],
                            "updateTime": 0  # Optional. The last update time of the
                              record. The Unix epoch format.
                        }
                    ]
                }
        """

    @distributed_trace
    def query(self, search_request: Union[JSON, IO[bytes]], **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get data using search.

        :param search_request: An object specifying the search criteria. Is either a JSON type or a
         IO[bytes] type. Required.
        :type search_request: JSON or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                search_request = {
                    "continuationToken": "str",  # Optional. The token used to get next batch of
                      data. Default 'Null' to get the first batch, and will return new token in each
                      response unless there's no more data.
                    "facets": [
                        {
                            "count": 0,  # Optional. The count of the facet item.
                            "facet": "str",  # Optional. The name of the facet item.
                            "sort": {}  # Optional. Any object.
                        }
                    ],
                    "filter": {},  # Optional. The filter for the search. See examples for the
                      usage of supported filters.
                    "keywords": "str",  # Optional. The keywords applied to all searchable
                      fields.
                    "limit": 0,  # Optional. The limit of the number of the search result.
                      default value is 50; maximum value is 1000.
                    "orderby": [
                        {}  # Optional. The sort order of search results, can specify
                          multiple fields.
                    ],
                    "taxonomySetting": {
                        "assetTypes": [
                            "str"  # Optional.
                        ],
                        "facet": {
                            "count": 0,  # Optional. The count of the facet item.
                            "facet": "str",  # Optional. The name of the facet item.
                            "sort": {}  # Optional. Any object.
                        }
                    }
                }

                # response body for status code(s): 200
                response == {
                    "@search.count": 0,  # Optional. The total number of search results (not the
                      number of documents in a single page).
                    "@search.count.approximate": bool,  # Optional. 'True' if the '@search.count'
                      is an approximate value and vise versa.
                    "@search.facets": {
                        "assetType": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "classification": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "contactId": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "contactType": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "entityType": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "glossaryType": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "label": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "term": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "termStatus": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ],
                        "termTemplate": [
                            {
                                "count": 0,  # Optional. The count of the facet item.
                                "value": "str"  # Optional. The name of the facet
                                  item.
                            }
                        ]
                    },
                    "continuationToken": "str",  # Optional. The token used to get next batch of
                      data. Absent if there's no more data.
                    "value": [
                        {
                            "@search.highlights": {
                                "description": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ],
                                "entityType": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ],
                                "id": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ],
                                "name": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ],
                                "qualifiedName": [
                                    "str"  # Optional. A highlight list that
                                      consists of index fields id ,qualifiedName, name, description,
                                      entityType. When the keyword appears in those fields, the value
                                      of the field, attached with emphasis mark, is returned as an
                                      element of @search.highlights.
                                ]
                            },
                            "@search.score": 0.0,  # Optional. The search score
                              calculated by the search engine. The results are ordered by search score
                              by default.
                            "assetType": [
                                "str"  # Optional. The asset types of the asset.
                            ],
                            "classification": [
                                "str"  # Optional. The classifications of the record.
                            ],
                            "contact": [
                                {
                                    "contactType": "str",  # Optional. The type
                                      of the contact. It can be Expert or Owner for an entity. It can
                                      be Expert or Steward for a glossary term.
                                    "id": "str",  # Optional. The GUID of the
                                      contact.
                                    "info": "str"  # Optional. The description of
                                      the contact.
                                }
                            ],
                            "createTime": 0,  # Optional. The create time of the record.
                              The Unix epoch format.
                            "description": "str",  # Optional. The description of the
                              asset.
                            "endorsement": "str",  # Optional. The endorsement of the
                              asset.
                            "entityType": "str",  # Optional. The type name of the asset.
                            "glossary": "str",  # Optional. The glossary name of the
                              term.
                            "glossaryType": "str",  # Optional. The type name of the
                              term. Could be AtlasGlossary, AtlasGlossaryTerm or AtlasGlossaryCategory.
                            "id": "str",  # Optional. The GUID of the record.
                            "label": [
                                "str"  # Optional. The labels of the asset.
                            ],
                            "longDescription": "str",  # Optional. The definition of the
                              term.
                            "name": "str",  # Optional. The name of the record.
                            "objectType": "str",  # Optional. The object type of the
                              record. Object type is the top-level property to distinguish whether a
                              record is an asset or a term.
                            "owner": "str",  # Optional. The owner of the record.
                            "qualifiedName": "str",  # Optional. The qualified name of
                              the record.
                            "term": [
                                {
                                    "glossaryName": "str",  # Optional. The name
                                      of the glossary which contains the term.
                                    "guid": "str",  # Optional. The GUID of the
                                      term.
                                    "name": "str"  # Optional. The name of the
                                      term.
                                }
                            ],
                            "termStatus": "str",  # Optional. The status of the term.
                            "termTemplate": [
                                "str"  # Optional. The term template names used by
                                  the term.
                            ],
                            "updateTime": 0  # Optional. The last update time of the
                              record. The Unix epoch format.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(search_request, (IOBase, bytes)):
            _content = search_request
        else:
            _json = search_request

        _request = build_discovery_query_request(
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    def suggest(self, suggest_request: JSON, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get search suggestions by query criteria.

        :param suggest_request: An object specifying the suggest criteria. Required.
        :type suggest_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                suggest_request = {
                    "filter": {},  # Optional. The filter for the search.
                    "keywords": "str",  # Optional. The keywords applied to all fields that
                      support suggest operation. It must be at least 1 character, and no more than 100
                      characters. In the index schema we defined a default suggester which lists all
                      the supported fields and specifies a search mode.
                    "limit": 0  # Optional. The number of suggestions we hope to return. The
                      default value is 5. The value must be a number between 1 and 100.
                }

                # response body for status code(s): 200
                response == {
                    "value": [
                        {
                            "@search.score": 0.0,  # Optional. The search score
                              calculated by the search engine. The results are ordered by search score
                              by default.
                            "@search.text": "str",  # Optional. The target text that
                              contains the keyword as prefix. The keyword is wrapped with emphasis
                              mark.
                            "assetType": [
                                "str"  # Optional. The asset types of the asset.
                            ],
                            "classification": [
                                "str"  # Optional. The classifications of the record.
                            ],
                            "contact": [
                                {
                                    "contactType": "str",  # Optional. The type
                                      of the contact. It can be Expert or Owner for an entity. It can
                                      be Expert or Steward for a glossary term.
                                    "id": "str",  # Optional. The GUID of the
                                      contact.
                                    "info": "str"  # Optional. The description of
                                      the contact.
                                }
                            ],
                            "createTime": 0,  # Optional. The create time of the record.
                              The Unix epoch format.
                            "description": "str",  # Optional. The description of the
                              asset.
                            "endorsement": "str",  # Optional. The endorsement of the
                              asset.
                            "entityType": "str",  # Optional. The type name of the asset.
                            "glossary": "str",  # Optional. The glossary name of the
                              term.
                            "glossaryType": "str",  # Optional. The type name of the
                              term. Could be AtlasGlossary, AtlasGlossaryTerm or AtlasGlossaryCategory.
                            "id": "str",  # Optional. The GUID of the record.
                            "label": [
                                "str"  # Optional. The labels of the asset.
                            ],
                            "longDescription": "str",  # Optional. The definition of the
                              term.
                            "name": "str",  # Optional. The name of the record.
                            "objectType": "str",  # Optional. The object type of the
                              record. Object type is the top-level property to distinguish whether a
                              record is an asset or a term.
                            "owner": "str",  # Optional. The owner of the record.
                            "qualifiedName": "str",  # Optional. The qualified name of
                              the record.
                            "term": [
                                {
                                    "glossaryName": "str",  # Optional. The name
                                      of the glossary which contains the term.
                                    "guid": "str",  # Optional. The GUID of the
                                      term.
                                    "name": "str"  # Optional. The name of the
                                      term.
                                }
                            ],
                            "termStatus": "str",  # Optional. The status of the term.
                            "termTemplate": [
                                "str"  # Optional. The term template names used by
                                  the term.
                            ],
                            "updateTime": 0  # Optional. The last update time of the
                              record. The Unix epoch format.
                        }
                    ]
                }
        """

    @overload
    def suggest(self, suggest_request: IO[bytes], *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get search suggestions by query criteria.

        :param suggest_request: An object specifying the suggest criteria. Required.
        :type suggest_request: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "value": [
                        {
                            "@search.score": 0.0,  # Optional. The search score
                              calculated by the search engine. The results are ordered by search score
                              by default.
                            "@search.text": "str",  # Optional. The target text that
                              contains the keyword as prefix. The keyword is wrapped with emphasis
                              mark.
                            "assetType": [
                                "str"  # Optional. The asset types of the asset.
                            ],
                            "classification": [
                                "str"  # Optional. The classifications of the record.
                            ],
                            "contact": [
                                {
                                    "contactType": "str",  # Optional. The type
                                      of the contact. It can be Expert or Owner for an entity. It can
                                      be Expert or Steward for a glossary term.
                                    "id": "str",  # Optional. The GUID of the
                                      contact.
                                    "info": "str"  # Optional. The description of
                                      the contact.
                                }
                            ],
                            "createTime": 0,  # Optional. The create time of the record.
                              The Unix epoch format.
                            "description": "str",  # Optional. The description of the
                              asset.
                            "endorsement": "str",  # Optional. The endorsement of the
                              asset.
                            "entityType": "str",  # Optional. The type name of the asset.
                            "glossary": "str",  # Optional. The glossary name of the
                              term.
                            "glossaryType": "str",  # Optional. The type name of the
                              term. Could be AtlasGlossary, AtlasGlossaryTerm or AtlasGlossaryCategory.
                            "id": "str",  # Optional. The GUID of the record.
                            "label": [
                                "str"  # Optional. The labels of the asset.
                            ],
                            "longDescription": "str",  # Optional. The definition of the
                              term.
                            "name": "str",  # Optional. The name of the record.
                            "objectType": "str",  # Optional. The object type of the
                              record. Object type is the top-level property to distinguish whether a
                              record is an asset or a term.
                            "owner": "str",  # Optional. The owner of the record.
                            "qualifiedName": "str",  # Optional. The qualified name of
                              the record.
                            "term": [
                                {
                                    "glossaryName": "str",  # Optional. The name
                                      of the glossary which contains the term.
                                    "guid": "str",  # Optional. The GUID of the
                                      term.
                                    "name": "str"  # Optional. The name of the
                                      term.
                                }
                            ],
                            "termStatus": "str",  # Optional. The status of the term.
                            "termTemplate": [
                                "str"  # Optional. The term template names used by
                                  the term.
                            ],
                            "updateTime": 0  # Optional. The last update time of the
                              record. The Unix epoch format.
                        }
                    ]
                }
        """

    @distributed_trace
    def suggest(self, suggest_request: Union[JSON, IO[bytes]], **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get search suggestions by query criteria.

        :param suggest_request: An object specifying the suggest criteria. Is either a JSON type or a
         IO[bytes] type. Required.
        :type suggest_request: JSON or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                suggest_request = {
                    "filter": {},  # Optional. The filter for the search.
                    "keywords": "str",  # Optional. The keywords applied to all fields that
                      support suggest operation. It must be at least 1 character, and no more than 100
                      characters. In the index schema we defined a default suggester which lists all
                      the supported fields and specifies a search mode.
                    "limit": 0  # Optional. The number of suggestions we hope to return. The
                      default value is 5. The value must be a number between 1 and 100.
                }

                # response body for status code(s): 200
                response == {
                    "value": [
                        {
                            "@search.score": 0.0,  # Optional. The search score
                              calculated by the search engine. The results are ordered by search score
                              by default.
                            "@search.text": "str",  # Optional. The target text that
                              contains the keyword as prefix. The keyword is wrapped with emphasis
                              mark.
                            "assetType": [
                                "str"  # Optional. The asset types of the asset.
                            ],
                            "classification": [
                                "str"  # Optional. The classifications of the record.
                            ],
                            "contact": [
                                {
                                    "contactType": "str",  # Optional. The type
                                      of the contact. It can be Expert or Owner for an entity. It can
                                      be Expert or Steward for a glossary term.
                                    "id": "str",  # Optional. The GUID of the
                                      contact.
                                    "info": "str"  # Optional. The description of
                                      the contact.
                                }
                            ],
                            "createTime": 0,  # Optional. The create time of the record.
                              The Unix epoch format.
                            "description": "str",  # Optional. The description of the
                              asset.
                            "endorsement": "str",  # Optional. The endorsement of the
                              asset.
                            "entityType": "str",  # Optional. The type name of the asset.
                            "glossary": "str",  # Optional. The glossary name of the
                              term.
                            "glossaryType": "str",  # Optional. The type name of the
                              term. Could be AtlasGlossary, AtlasGlossaryTerm or AtlasGlossaryCategory.
                            "id": "str",  # Optional. The GUID of the record.
                            "label": [
                                "str"  # Optional. The labels of the asset.
                            ],
                            "longDescription": "str",  # Optional. The definition of the
                              term.
                            "name": "str",  # Optional. The name of the record.
                            "objectType": "str",  # Optional. The object type of the
                              record. Object type is the top-level property to distinguish whether a
                              record is an asset or a term.
                            "owner": "str",  # Optional. The owner of the record.
                            "qualifiedName": "str",  # Optional. The qualified name of
                              the record.
                            "term": [
                                {
                                    "glossaryName": "str",  # Optional. The name
                                      of the glossary which contains the term.
                                    "guid": "str",  # Optional. The GUID of the
                                      term.
                                    "name": "str"  # Optional. The name of the
                                      term.
                                }
                            ],
                            "termStatus": "str",  # Optional. The status of the term.
                            "termTemplate": [
                                "str"  # Optional. The term template names used by
                                  the term.
                            ],
                            "updateTime": 0  # Optional. The last update time of the
                              record. The Unix epoch format.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(suggest_request, (IOBase, bytes)):
            _content = suggest_request
        else:
            _json = suggest_request

        _request = build_discovery_suggest_request(
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    def auto_complete(
        self, auto_complete_request: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """Get auto complete options.

        :param auto_complete_request: An object specifying the autocomplete criteria. Required.
        :type auto_complete_request: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                auto_complete_request = {
                    "filter": {},  # Optional. The filter for the autocomplete request.
                    "keywords": "str",  # Optional. The keywords applied to all fields that
                      support autocomplete operation. It must be at least 1 character, and no more than
                      100 characters.
                    "limit": 0  # Optional. The number of autocomplete results we hope to return.
                      The default value is 50. The value must be a number between 1 and 100.
                }

                # response body for status code(s): 200
                response == {
                    "value": [
                        {
                            "queryPlusText": "str",  # Optional. The completed search
                              query text.
                            "text": "str"  # Optional. The completed term or phrase.
                        }
                    ]
                }
        """

    @overload
    def auto_complete(
        self, auto_complete_request: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> JSON:
        """Get auto complete options.

        :param auto_complete_request: An object specifying the autocomplete criteria. Required.
        :type auto_complete_request: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "value": [
                        {
                            "queryPlusText": "str",  # Optional. The completed search
                              query text.
                            "text": "str"  # Optional. The completed term or phrase.
                        }
                    ]
                }
        """

    @distributed_trace
    def auto_complete(self, auto_complete_request: Union[JSON, IO[bytes]], **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get auto complete options.

        :param auto_complete_request: An object specifying the autocomplete criteria. Is either a JSON
         type or a IO[bytes] type. Required.
        :type auto_complete_request: JSON or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                auto_complete_request = {
                    "filter": {},  # Optional. The filter for the autocomplete request.
                    "keywords": "str",  # Optional. The keywords applied to all fields that
                      support autocomplete operation. It must be at least 1 character, and no more than
                      100 characters.
                    "limit": 0  # Optional. The number of autocomplete results we hope to return.
                      The default value is 50. The value must be a number between 1 and 100.
                }

                # response body for status code(s): 200
                response == {
                    "value": [
                        {
                            "queryPlusText": "str",  # Optional. The completed search
                              query text.
                            "text": "str"  # Optional. The completed term or phrase.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(auto_complete_request, (IOBase, bytes)):
            _content = auto_complete_request
        else:
            _json = auto_complete_request

        _request = build_discovery_auto_complete_request(
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore


class LineageOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.datamap.PurviewDataMapClient`'s
        :attr:`lineage` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def get(self, guid: str, *, direction: str, depth: int = 3, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get lineage info of the entity specified by GUID.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :keyword direction: The direction of the lineage, which could be INPUT, OUTPUT or BOTH. Known
         values are: "BOTH", "INPUT", and "OUTPUT". Required.
        :paramtype direction: str
        :keyword depth: The number of hops for lineage. Default value is 3.
        :paramtype depth: int
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "baseEntityGuid": "str",  # Optional. The GUID of the base entity.
                    "childrenCount": 0,  # Optional. The number of children node.
                    "guidEntityMap": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    },
                    "lineageDepth": 0,  # Optional. The depth of lineage.
                    "lineageDirection": "str",  # Optional. The enum of lineage direction. Known
                      values are: "INPUT", "OUTPUT", and "BOTH".
                    "lineageWidth": 0,  # Optional. The width of lineage.
                    "parentRelations": [
                        {
                            "childEntityId": "str",  # Optional. The GUID of child
                              entity.
                            "parentEntityId": "str",  # Optional. The GUID of parent
                              entity.
                            "relationshipId": "str"  # Optional. The GUID of
                              relationship.
                        }
                    ],
                    "relations": [
                        {
                            "fromEntityId": "str",  # Optional. The GUID of from-entity.
                            "relationshipId": "str",  # Optional. The GUID of
                              relationship.
                            "toEntityId": "str"  # Optional. The GUID of to-entity.
                        }
                    ],
                    "widthCounts": {
                        "str": {
                            "str": {}  # Optional. The entity count in specific
                              direction.
                        }
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_lineage_get_request(
            guid=guid,
            direction=direction,
            depth=depth,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_next_page(
        self, guid: str, *, direction: str, offset: Optional[int] = None, limit: Optional[int] = None, **kwargs: Any
    ) -> JSON:
        # pylint: disable=line-too-long
        """Return immediate next page lineage info about entity with pagination.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :keyword direction: The direction of the lineage, which could be INPUT, OUTPUT or BOTH. Known
         values are: "BOTH", "INPUT", and "OUTPUT". Required.
        :paramtype direction: str
        :keyword offset: The offset for pagination purpose. Default value is None.
        :paramtype offset: int
        :keyword limit: The page size - by default there is no paging. Default value is None.
        :paramtype limit: int
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "baseEntityGuid": "str",  # Optional. The GUID of the base entity.
                    "childrenCount": 0,  # Optional. The number of children node.
                    "guidEntityMap": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    },
                    "lineageDepth": 0,  # Optional. The depth of lineage.
                    "lineageDirection": "str",  # Optional. The enum of lineage direction. Known
                      values are: "INPUT", "OUTPUT", and "BOTH".
                    "lineageWidth": 0,  # Optional. The width of lineage.
                    "parentRelations": [
                        {
                            "childEntityId": "str",  # Optional. The GUID of child
                              entity.
                            "parentEntityId": "str",  # Optional. The GUID of parent
                              entity.
                            "relationshipId": "str"  # Optional. The GUID of
                              relationship.
                        }
                    ],
                    "relations": [
                        {
                            "fromEntityId": "str",  # Optional. The GUID of from-entity.
                            "relationshipId": "str",  # Optional. The GUID of
                              relationship.
                            "toEntityId": "str"  # Optional. The GUID of to-entity.
                        }
                    ],
                    "widthCounts": {
                        "str": {
                            "str": {}  # Optional. The entity count in specific
                              direction.
                        }
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_lineage_get_next_page_request(
            guid=guid,
            direction=direction,
            offset=offset,
            limit=limit,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_by_unique_attribute(
        self,
        type_name: str,
        *,
        direction: str,
        depth: int = 3,
        attr_qualified_name: Optional[str] = None,
        **kwargs: Any,
    ) -> JSON:
        # pylint: disable=line-too-long
        """Return lineage info about entity.

        In addition to the typeName path parameter, attribute key-value pair(s) can be provided in the
        following format

        attr:[attrName]=[attrValue]

        NOTE: The attrName and attrValue should be unique across entities, eg. qualifiedName.

        The REST request would look something like this:

        GET /v2/lineage/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.

        :param type_name: The name of the type. Required.
        :type type_name: str
        :keyword direction: The direction of the lineage, which could be INPUT, OUTPUT or BOTH. Known
         values are: "BOTH", "INPUT", and "OUTPUT". Required.
        :paramtype direction: str
        :keyword depth: The number of hops for lineage. Default value is 3.
        :paramtype depth: int
        :keyword attr_qualified_name: The qualified name of the entity. (This is only an example.
         qualifiedName can be changed to other unique attributes). Default value is None.
        :paramtype attr_qualified_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "baseEntityGuid": "str",  # Optional. The GUID of the base entity.
                    "childrenCount": 0,  # Optional. The number of children node.
                    "guidEntityMap": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    },
                    "lineageDepth": 0,  # Optional. The depth of lineage.
                    "lineageDirection": "str",  # Optional. The enum of lineage direction. Known
                      values are: "INPUT", "OUTPUT", and "BOTH".
                    "lineageWidth": 0,  # Optional. The width of lineage.
                    "parentRelations": [
                        {
                            "childEntityId": "str",  # Optional. The GUID of child
                              entity.
                            "parentEntityId": "str",  # Optional. The GUID of parent
                              entity.
                            "relationshipId": "str"  # Optional. The GUID of
                              relationship.
                        }
                    ],
                    "relations": [
                        {
                            "fromEntityId": "str",  # Optional. The GUID of from-entity.
                            "relationshipId": "str",  # Optional. The GUID of
                              relationship.
                            "toEntityId": "str"  # Optional. The GUID of to-entity.
                        }
                    ],
                    "widthCounts": {
                        "str": {
                            "str": {}  # Optional. The entity count in specific
                              direction.
                        }
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_lineage_get_by_unique_attribute_request(
            type_name=type_name,
            direction=direction,
            depth=depth,
            attr_qualified_name=attr_qualified_name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore


class RelationshipOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.datamap.PurviewDataMapClient`'s
        :attr:`relationship` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    def create(self, relationship: JSON, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        """Create a new relationship between entities.

        :param relationship: The AtlasRelationship object containing the information for the
         relationship to be created. Required.
        :type relationship: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                relationship = {
                    "attributes": {
                        "str": {}  # Optional. The attributes of the struct.
                    },
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "end1": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "end2": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "guid": "str",  # Optional. The GUID of the relationship.
                    "homeId": "str",  # Optional. The home ID of the relationship.
                    "label": "str",  # Optional. The label of the relationship.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "provenanceType": 0.0,  # Optional. Used to record the provenance of an
                      instance of an entity or relationship.
                    "status": "str",  # Optional. The enum of relationship status. Known values
                      are: "ACTIVE" and "DELETED".
                    "typeName": "str",  # Optional. The name of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the relationship.
                }

                # response body for status code(s): 200
                response == {
                    "attributes": {
                        "str": {}  # Optional. The attributes of the struct.
                    },
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "end1": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "end2": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "guid": "str",  # Optional. The GUID of the relationship.
                    "homeId": "str",  # Optional. The home ID of the relationship.
                    "label": "str",  # Optional. The label of the relationship.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "provenanceType": 0.0,  # Optional. Used to record the provenance of an
                      instance of an entity or relationship.
                    "status": "str",  # Optional. The enum of relationship status. Known values
                      are: "ACTIVE" and "DELETED".
                    "typeName": "str",  # Optional. The name of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the relationship.
                }
        """

    @overload
    def create(self, relationship: IO[bytes], *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        """Create a new relationship between entities.

        :param relationship: The AtlasRelationship object containing the information for the
         relationship to be created. Required.
        :type relationship: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "attributes": {
                        "str": {}  # Optional. The attributes of the struct.
                    },
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "end1": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "end2": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "guid": "str",  # Optional. The GUID of the relationship.
                    "homeId": "str",  # Optional. The home ID of the relationship.
                    "label": "str",  # Optional. The label of the relationship.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "provenanceType": 0.0,  # Optional. Used to record the provenance of an
                      instance of an entity or relationship.
                    "status": "str",  # Optional. The enum of relationship status. Known values
                      are: "ACTIVE" and "DELETED".
                    "typeName": "str",  # Optional. The name of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the relationship.
                }
        """

    @distributed_trace
    def create(self, relationship: Union[JSON, IO[bytes]], **kwargs: Any) -> JSON:
        """Create a new relationship between entities.

        :param relationship: The AtlasRelationship object containing the information for the
         relationship to be created. Is either a JSON type or a IO[bytes] type. Required.
        :type relationship: JSON or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                relationship = {
                    "attributes": {
                        "str": {}  # Optional. The attributes of the struct.
                    },
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "end1": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "end2": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "guid": "str",  # Optional. The GUID of the relationship.
                    "homeId": "str",  # Optional. The home ID of the relationship.
                    "label": "str",  # Optional. The label of the relationship.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "provenanceType": 0.0,  # Optional. Used to record the provenance of an
                      instance of an entity or relationship.
                    "status": "str",  # Optional. The enum of relationship status. Known values
                      are: "ACTIVE" and "DELETED".
                    "typeName": "str",  # Optional. The name of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the relationship.
                }

                # response body for status code(s): 200
                response == {
                    "attributes": {
                        "str": {}  # Optional. The attributes of the struct.
                    },
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "end1": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "end2": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "guid": "str",  # Optional. The GUID of the relationship.
                    "homeId": "str",  # Optional. The home ID of the relationship.
                    "label": "str",  # Optional. The label of the relationship.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "provenanceType": 0.0,  # Optional. Used to record the provenance of an
                      instance of an entity or relationship.
                    "status": "str",  # Optional. The enum of relationship status. Known values
                      are: "ACTIVE" and "DELETED".
                    "typeName": "str",  # Optional. The name of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the relationship.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(relationship, (IOBase, bytes)):
            _content = relationship
        else:
            _json = relationship

        _request = build_relationship_create_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    def update(self, relationship: JSON, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        """Update an existing relationship between entities.

        :param relationship: The AtlasRelationship object containing the information for the
         relationship to be created. Required.
        :type relationship: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                relationship = {
                    "attributes": {
                        "str": {}  # Optional. The attributes of the struct.
                    },
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "end1": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "end2": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "guid": "str",  # Optional. The GUID of the relationship.
                    "homeId": "str",  # Optional. The home ID of the relationship.
                    "label": "str",  # Optional. The label of the relationship.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "provenanceType": 0.0,  # Optional. Used to record the provenance of an
                      instance of an entity or relationship.
                    "status": "str",  # Optional. The enum of relationship status. Known values
                      are: "ACTIVE" and "DELETED".
                    "typeName": "str",  # Optional. The name of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the relationship.
                }

                # response body for status code(s): 200
                response == {
                    "attributes": {
                        "str": {}  # Optional. The attributes of the struct.
                    },
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "end1": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "end2": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "guid": "str",  # Optional. The GUID of the relationship.
                    "homeId": "str",  # Optional. The home ID of the relationship.
                    "label": "str",  # Optional. The label of the relationship.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "provenanceType": 0.0,  # Optional. Used to record the provenance of an
                      instance of an entity or relationship.
                    "status": "str",  # Optional. The enum of relationship status. Known values
                      are: "ACTIVE" and "DELETED".
                    "typeName": "str",  # Optional. The name of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the relationship.
                }
        """

    @overload
    def update(self, relationship: IO[bytes], *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        """Update an existing relationship between entities.

        :param relationship: The AtlasRelationship object containing the information for the
         relationship to be created. Required.
        :type relationship: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "attributes": {
                        "str": {}  # Optional. The attributes of the struct.
                    },
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "end1": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "end2": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "guid": "str",  # Optional. The GUID of the relationship.
                    "homeId": "str",  # Optional. The home ID of the relationship.
                    "label": "str",  # Optional. The label of the relationship.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "provenanceType": 0.0,  # Optional. Used to record the provenance of an
                      instance of an entity or relationship.
                    "status": "str",  # Optional. The enum of relationship status. Known values
                      are: "ACTIVE" and "DELETED".
                    "typeName": "str",  # Optional. The name of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the relationship.
                }
        """

    @distributed_trace
    def update(self, relationship: Union[JSON, IO[bytes]], **kwargs: Any) -> JSON:
        """Update an existing relationship between entities.

        :param relationship: The AtlasRelationship object containing the information for the
         relationship to be created. Is either a JSON type or a IO[bytes] type. Required.
        :type relationship: JSON or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                relationship = {
                    "attributes": {
                        "str": {}  # Optional. The attributes of the struct.
                    },
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "end1": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "end2": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "guid": "str",  # Optional. The GUID of the relationship.
                    "homeId": "str",  # Optional. The home ID of the relationship.
                    "label": "str",  # Optional. The label of the relationship.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "provenanceType": 0.0,  # Optional. Used to record the provenance of an
                      instance of an entity or relationship.
                    "status": "str",  # Optional. The enum of relationship status. Known values
                      are: "ACTIVE" and "DELETED".
                    "typeName": "str",  # Optional. The name of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the relationship.
                }

                # response body for status code(s): 200
                response == {
                    "attributes": {
                        "str": {}  # Optional. The attributes of the struct.
                    },
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "end1": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "end2": {
                        "guid": "str",  # Optional. The GUID of the object.
                        "typeName": "str",  # Optional. The name of the type.
                        "uniqueAttributes": {
                            "str": {}  # Optional. The unique attributes of the object.
                        }
                    },
                    "guid": "str",  # Optional. The GUID of the relationship.
                    "homeId": "str",  # Optional. The home ID of the relationship.
                    "label": "str",  # Optional. The label of the relationship.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "provenanceType": 0.0,  # Optional. Used to record the provenance of an
                      instance of an entity or relationship.
                    "status": "str",  # Optional. The enum of relationship status. Known values
                      are: "ACTIVE" and "DELETED".
                    "typeName": "str",  # Optional. The name of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the relationship.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(relationship, (IOBase, bytes)):
            _content = relationship
        else:
            _json = relationship

        _request = build_relationship_update_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get(self, guid: str, *, extended_info: Optional[bool] = None, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get relationship information between entities by its GUID.

        :param guid: The globally unique identifier of the relationship. Required.
        :type guid: str
        :keyword extended_info: Limits whether includes extended information. Default value is None.
        :paramtype extended_info: bool
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "referredEntities": {
                        "str": {
                            "attributes": {
                                "str": {}  # Optional. The attributes of the struct.
                            },
                            "classificationNames": [
                                "str"  # Optional. An array of classification names.
                            ],
                            "classifications": [
                                {
                                    "attributes": {
                                        "str": {}  # Optional. The attributes
                                          of the struct.
                                    },
                                    "entityGuid": "str",  # Optional. The GUID of
                                      the entity.
                                    "entityStatus": "str",  # Optional. Status of
                                      the entity - can be active or deleted. Deleted entities are not
                                      removed. Known values are: "ACTIVE" and "DELETED".
                                    "lastModifiedTS": "str",  # Optional. ETag
                                      for concurrency control.
                                    "removePropagationsOnEntityDelete": bool,  #
                                      Optional. Determines if propagations will be removed on entity
                                      deletion.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "validityPeriods": [
                                        {
                                            "endTime": "str",  #
                                              Optional. The end of the time boundary.
                                            "startTime": "str",  #
                                              Optional. The start of the time boundary.
                                            "timeZone": "str"  #
                                              Optional. The timezone of the time boundary.
                                        }
                                    ]
                                }
                            ],
                            "displayText": "str",  # Optional. The display text.
                            "guid": "str",  # Optional. The GUID of the record.
                            "isIncomplete": bool,  # Optional. Whether it is a shell
                              entity.
                            "labels": [
                                "str"  # Optional. labels.
                            ],
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "meaningNames": [
                                "str"  # Optional. An array of meanings.
                            ],
                            "meanings": [
                                {
                                    "confidence": 0,  # Optional. The confidence
                                      of the term assignment.
                                    "createdBy": "str",  # Optional. The user who
                                      created the record.
                                    "description": "str",  # Optional. The
                                      description of the term assignment.
                                    "displayText": "str",  # Optional. The
                                      display text.
                                    "expression": "str",  # Optional. The
                                      expression of the term assignment.
                                    "relationGuid": "str",  # Optional. The GUID
                                      of the relationship.
                                    "status": "str",  # Optional. The status of
                                      terms assignment. Known values are: "DISCOVERED", "PROPOSED",
                                      "IMPORTED", "VALIDATED", "DEPRECATED", "OBSOLETE", and "OTHER".
                                    "steward": "str",  # Optional. The steward of
                                      the term.
                                    "termGuid": "str"  # Optional. The GUID of
                                      the term.
                                }
                            ],
                            "status": "str",  # Optional. Status of the entity - can be
                              active or deleted. Deleted entities are not removed. Known values are:
                              "ACTIVE" and "DELETED".
                            "typeName": "str"  # Optional. The name of the type.
                        }
                    },
                    "relationship": {
                        "attributes": {
                            "str": {}  # Optional. The attributes of the struct.
                        },
                        "createTime": 0,  # Optional. The created time of the record.
                        "createdBy": "str",  # Optional. The user who created the record.
                        "end1": {
                            "guid": "str",  # Optional. The GUID of the object.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        },
                        "end2": {
                            "guid": "str",  # Optional. The GUID of the object.
                            "typeName": "str",  # Optional. The name of the type.
                            "uniqueAttributes": {
                                "str": {}  # Optional. The unique attributes of the
                                  object.
                            }
                        },
                        "guid": "str",  # Optional. The GUID of the relationship.
                        "homeId": "str",  # Optional. The home ID of the relationship.
                        "label": "str",  # Optional. The label of the relationship.
                        "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                        "provenanceType": 0.0,  # Optional. Used to record the provenance of
                          an instance of an entity or relationship.
                        "status": "str",  # Optional. The enum of relationship status. Known
                          values are: "ACTIVE" and "DELETED".
                        "typeName": "str",  # Optional. The name of the type.
                        "updateTime": 0,  # Optional. The update time of the record.
                        "updatedBy": "str",  # Optional. The user who updated the record.
                        "version": 0.0  # Optional. The version of the relationship.
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_relationship_get_request(
            guid=guid,
            extended_info=extended_info,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def delete(self, guid: str, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Delete a relationship between entities by its GUID.

        :param guid: The globally unique identifier of the relationship. Required.
        :type guid: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_relationship_delete_request(
            guid=guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore


class TypeOperations:  # pylint: disable=too-many-public-methods
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.purview.datamap.PurviewDataMapClient`'s
        :attr:`type` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def get_business_metadata_def_by_guid(self, guid: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get the businessMetadata definition for the given guid.

        :param guid: businessMetadata guid. Required.
        :type guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "description": "str",  # Optional. The description of the type definition.
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "serviceType": "str",  # Optional. The service type.
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_type_get_business_metadata_def_by_guid_request(
            guid=guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_business_metadata_def_by_name(self, name: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get the businessMetadata definition by it's name (unique).

        :param name: businessMetadata name. Required.
        :type name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "description": "str",  # Optional. The description of the type definition.
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "serviceType": "str",  # Optional. The service type.
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_type_get_business_metadata_def_by_name_request(
            name=name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_classification_def_by_guid(self, guid: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get the classification definition for the given GUID.

        :param guid: The globally unique identifier of the classification. Required.
        :type guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "description": "str",  # Optional. The description of the type definition.
                    "entityTypes": [
                        "str"  # Optional. Specifying a list of entityType names in the
                          classificationDef, ensures that classifications can only be applied to those
                          entityTypes.   .. raw:: html     <ul>    <li>Any subtypes of the entity types
                          inherit the restriction</li>    <li>Any classificationDef subtypes inherit
                          the parents entityTypes restrictions</li>    <li>Any classificationDef
                          subtypes can further restrict the parents entityTypes restrictions by
                          specifying a subset of the entityTypes</li>    <li>An empty entityTypes list
                          when there are no parent restrictions means there are no restrictions</li>
                          <li>An empty entityTypes list when there are parent restrictions means that
                          the subtype picks up the parents restrictions</li>    <li>If a list of
                          entityTypes are supplied, where one inherits from another, this will be
                          rejected. This should encourage cleaner classificationsDefs</li>    </ul>.
                    ],
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "serviceType": "str",  # Optional. The service type.
                    "subTypes": [
                        "str"  # Optional. An array of sub types.
                    ],
                    "superTypes": [
                        "str"  # Optional. An array of super types.
                    ],
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_type_get_classification_def_by_guid_request(
            guid=guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_classification_def_by_name(self, name: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get the classification definition by its name (unique).

        :param name: The name of the classification. Required.
        :type name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "description": "str",  # Optional. The description of the type definition.
                    "entityTypes": [
                        "str"  # Optional. Specifying a list of entityType names in the
                          classificationDef, ensures that classifications can only be applied to those
                          entityTypes.   .. raw:: html     <ul>    <li>Any subtypes of the entity types
                          inherit the restriction</li>    <li>Any classificationDef subtypes inherit
                          the parents entityTypes restrictions</li>    <li>Any classificationDef
                          subtypes can further restrict the parents entityTypes restrictions by
                          specifying a subset of the entityTypes</li>    <li>An empty entityTypes list
                          when there are no parent restrictions means there are no restrictions</li>
                          <li>An empty entityTypes list when there are parent restrictions means that
                          the subtype picks up the parents restrictions</li>    <li>If a list of
                          entityTypes are supplied, where one inherits from another, this will be
                          rejected. This should encourage cleaner classificationsDefs</li>    </ul>.
                    ],
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "serviceType": "str",  # Optional. The service type.
                    "subTypes": [
                        "str"  # Optional. An array of sub types.
                    ],
                    "superTypes": [
                        "str"  # Optional. An array of super types.
                    ],
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_type_get_classification_def_by_name_request(
            name=name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_entity_def_by_guid(self, guid: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get the Entity definition for the given GUID.

        :param guid: The globally unique identifier of the entity. Required.
        :type guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "description": "str",  # Optional. The description of the type definition.
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "relationshipAttributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isLegacyAttribute": bool,  # Optional. Determines if it is a
                              legacy attribute.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "relationshipTypeName": "str",  # Optional. The name of the
                              relationship type.
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "serviceType": "str",  # Optional. The service type.
                    "subTypes": [
                        "str"  # Optional. An array of sub types.
                    ],
                    "superTypes": [
                        "str"  # Optional. An array of super types.
                    ],
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_type_get_entity_def_by_guid_request(
            guid=guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_entity_def_by_name(self, name: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get the entity definition by its name (unique).

        :param name: The name of the entity. Required.
        :type name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "description": "str",  # Optional. The description of the type definition.
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "relationshipAttributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isLegacyAttribute": bool,  # Optional. Determines if it is a
                              legacy attribute.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "relationshipTypeName": "str",  # Optional. The name of the
                              relationship type.
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "serviceType": "str",  # Optional. The service type.
                    "subTypes": [
                        "str"  # Optional. An array of sub types.
                    ],
                    "superTypes": [
                        "str"  # Optional. An array of super types.
                    ],
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_type_get_entity_def_by_name_request(
            name=name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_enum_def_by_guid(self, guid: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get the enum definition for the given GUID.

        :param guid: The globally unique identifier of the enum. Required.
        :type guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "defaultValue": "str",  # Optional. The default value.
                    "description": "str",  # Optional. The description of the type definition.
                    "elementDefs": [
                        {
                            "description": "str",  # Optional. The description of the
                              enum element definition.
                            "ordinal": 0.0,  # Optional. The ordinal of the enum element
                              definition.
                            "value": "str"  # Optional. The value of the enum element
                              definition.
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "serviceType": "str",  # Optional. The service type.
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_type_get_enum_def_by_guid_request(
            guid=guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_enum_def_by_name(self, name: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get the enum definition by its name (unique).

        :param name: The name of the enum. Required.
        :type name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "defaultValue": "str",  # Optional. The default value.
                    "description": "str",  # Optional. The description of the type definition.
                    "elementDefs": [
                        {
                            "description": "str",  # Optional. The description of the
                              enum element definition.
                            "ordinal": 0.0,  # Optional. The ordinal of the enum element
                              definition.
                            "value": "str"  # Optional. The value of the enum element
                              definition.
                        }
                    ],
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "serviceType": "str",  # Optional. The service type.
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_type_get_enum_def_by_name_request(
            name=name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_relationship_def_by_guid(self, guid: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get the relationship definition for the given GUID.

        :param guid: The globally unique identifier of the relationship. Required.
        :type guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "description": "str",  # Optional. The description of the type definition.
                    "endDef1": {
                        "cardinality": "str",  # Optional. single-valued attribute or
                          multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                        "description": "str",  # Optional. The description of the
                          relationship end definition.
                        "isContainer": bool,  # Optional. Determines if it is container.
                        "isLegacyAttribute": bool,  # Optional. Determines if it is a legacy
                          attribute.
                        "name": "str",  # Optional. The name of the relationship end
                          definition.
                        "type": "str"  # Optional. The type of the relationship end.
                    },
                    "endDef2": {
                        "cardinality": "str",  # Optional. single-valued attribute or
                          multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                        "description": "str",  # Optional. The description of the
                          relationship end definition.
                        "isContainer": bool,  # Optional. Determines if it is container.
                        "isLegacyAttribute": bool,  # Optional. Determines if it is a legacy
                          attribute.
                        "name": "str",  # Optional. The name of the relationship end
                          definition.
                        "type": "str"  # Optional. The type of the relationship end.
                    },
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "relationshipCategory": "str",  # Optional. The Relationship category
                      determines the style of relationship around containment and lifecycle. UML
                      terminology is used for the values.  :code:`<p>` ASSOCIATION is a relationship
                      with no containment. :code:`<br>` COMPOSITION and AGGREGATION are containment
                      relationships.  :code:`<p>` The difference being in the lifecycles of the
                      container and its children. In the COMPOSITION case, the children cannot exist
                      without the container. For AGGREGATION, the life cycles of the container and
                      children are totally independent. Known values are: "ASSOCIATION", "AGGREGATION",
                      and "COMPOSITION".
                    "relationshipLabel": "str",  # Optional. The label of the relationship.
                    "serviceType": "str",  # Optional. The service type.
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_type_get_relationship_def_by_guid_request(
            guid=guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_relationship_def_by_name(self, name: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get the relationship definition by its name (unique).

        :param name: The name of the relationship. Required.
        :type name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "description": "str",  # Optional. The description of the type definition.
                    "endDef1": {
                        "cardinality": "str",  # Optional. single-valued attribute or
                          multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                        "description": "str",  # Optional. The description of the
                          relationship end definition.
                        "isContainer": bool,  # Optional. Determines if it is container.
                        "isLegacyAttribute": bool,  # Optional. Determines if it is a legacy
                          attribute.
                        "name": "str",  # Optional. The name of the relationship end
                          definition.
                        "type": "str"  # Optional. The type of the relationship end.
                    },
                    "endDef2": {
                        "cardinality": "str",  # Optional. single-valued attribute or
                          multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                        "description": "str",  # Optional. The description of the
                          relationship end definition.
                        "isContainer": bool,  # Optional. Determines if it is container.
                        "isLegacyAttribute": bool,  # Optional. Determines if it is a legacy
                          attribute.
                        "name": "str",  # Optional. The name of the relationship end
                          definition.
                        "type": "str"  # Optional. The type of the relationship end.
                    },
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "relationshipCategory": "str",  # Optional. The Relationship category
                      determines the style of relationship around containment and lifecycle. UML
                      terminology is used for the values.  :code:`<p>` ASSOCIATION is a relationship
                      with no containment. :code:`<br>` COMPOSITION and AGGREGATION are containment
                      relationships.  :code:`<p>` The difference being in the lifecycles of the
                      container and its children. In the COMPOSITION case, the children cannot exist
                      without the container. For AGGREGATION, the life cycles of the container and
                      children are totally independent. Known values are: "ASSOCIATION", "AGGREGATION",
                      and "COMPOSITION".
                    "relationshipLabel": "str",  # Optional. The label of the relationship.
                    "serviceType": "str",  # Optional. The service type.
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_type_get_relationship_def_by_name_request(
            name=name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_struct_def_by_guid(self, guid: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get the struct definition for the given GUID.

        :param guid: The globally unique identifier of the struct. Required.
        :type guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "description": "str",  # Optional. The description of the type definition.
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "serviceType": "str",  # Optional. The service type.
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_type_get_struct_def_by_guid_request(
            guid=guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_struct_def_by_name(self, name: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get the struct definition by its name (unique).

        :param name: The name of the struct. Required.
        :type name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "description": "str",  # Optional. The description of the type definition.
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "serviceType": "str",  # Optional. The service type.
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_type_get_struct_def_by_name_request(
            name=name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_by_guid(self, guid: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get the type definition for the given GUID.

        :param guid: The globally unique identifier of the type. Required.
        :type guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "defaultValue": "str",  # Optional. The default value.
                    "description": "str",  # Optional. The description of the type definition.
                    "elementDefs": [
                        {
                            "description": "str",  # Optional. The description of the
                              enum element definition.
                            "ordinal": 0.0,  # Optional. The ordinal of the enum element
                              definition.
                            "value": "str"  # Optional. The value of the enum element
                              definition.
                        }
                    ],
                    "endDef1": {
                        "cardinality": "str",  # Optional. single-valued attribute or
                          multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                        "description": "str",  # Optional. The description of the
                          relationship end definition.
                        "isContainer": bool,  # Optional. Determines if it is container.
                        "isLegacyAttribute": bool,  # Optional. Determines if it is a legacy
                          attribute.
                        "name": "str",  # Optional. The name of the relationship end
                          definition.
                        "type": "str"  # Optional. The type of the relationship end.
                    },
                    "endDef2": {
                        "cardinality": "str",  # Optional. single-valued attribute or
                          multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                        "description": "str",  # Optional. The description of the
                          relationship end definition.
                        "isContainer": bool,  # Optional. Determines if it is container.
                        "isLegacyAttribute": bool,  # Optional. Determines if it is a legacy
                          attribute.
                        "name": "str",  # Optional. The name of the relationship end
                          definition.
                        "type": "str"  # Optional. The type of the relationship end.
                    },
                    "entityTypes": [
                        "str"  # Optional. Specifying a list of entityType names in the
                          classificationDef, ensures that classifications can only be applied to those
                          entityTypes.   .. raw:: html     <ul>    <li>Any subtypes of the entity types
                          inherit the restriction</li>    <li>Any classificationDef subtypes inherit
                          the parents entityTypes restrictions</li>    <li>Any classificationDef
                          subtypes can further restrict the parents entityTypes restrictions by
                          specifying a subset of the entityTypes</li>    <li>An empty entityTypes list
                          when there are no parent restrictions means there are no restrictions</li>
                          <li>An empty entityTypes list when there are parent restrictions means that
                          the subtype picks up the parents restrictions</li>    <li>If a list of
                          entityTypes are supplied, where one inherits from another, this will be
                          rejected. This should encourage cleaner classificationsDefs</li>    </ul>.
                    ],
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "relationshipAttributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isLegacyAttribute": bool,  # Optional. Determines if it is a
                              legacy attribute.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "relationshipTypeName": "str",  # Optional. The name of the
                              relationship type.
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "relationshipCategory": "str",  # Optional. The Relationship category
                      determines the style of relationship around containment and lifecycle. UML
                      terminology is used for the values.  :code:`<p>` ASSOCIATION is a relationship
                      with no containment. :code:`<br>` COMPOSITION and AGGREGATION are containment
                      relationships.  :code:`<p>` The difference being in the lifecycles of the
                      container and its children. In the COMPOSITION case, the children cannot exist
                      without the container. For AGGREGATION, the life cycles of the container and
                      children are totally independent. Known values are: "ASSOCIATION", "AGGREGATION",
                      and "COMPOSITION".
                    "relationshipLabel": "str",  # Optional. The label of the relationship.
                    "serviceType": "str",  # Optional. The service type.
                    "subTypes": [
                        "str"  # Optional. An array of sub types.
                    ],
                    "superTypes": [
                        "str"  # Optional. An array of super types.
                    ],
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_type_get_by_guid_request(
            guid=guid,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_by_name(self, name: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get the type definition by its name (unique).

        :param name: The name of the type. Required.
        :type name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "defaultValue": "str",  # Optional. The default value.
                    "description": "str",  # Optional. The description of the type definition.
                    "elementDefs": [
                        {
                            "description": "str",  # Optional. The description of the
                              enum element definition.
                            "ordinal": 0.0,  # Optional. The ordinal of the enum element
                              definition.
                            "value": "str"  # Optional. The value of the enum element
                              definition.
                        }
                    ],
                    "endDef1": {
                        "cardinality": "str",  # Optional. single-valued attribute or
                          multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                        "description": "str",  # Optional. The description of the
                          relationship end definition.
                        "isContainer": bool,  # Optional. Determines if it is container.
                        "isLegacyAttribute": bool,  # Optional. Determines if it is a legacy
                          attribute.
                        "name": "str",  # Optional. The name of the relationship end
                          definition.
                        "type": "str"  # Optional. The type of the relationship end.
                    },
                    "endDef2": {
                        "cardinality": "str",  # Optional. single-valued attribute or
                          multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                        "description": "str",  # Optional. The description of the
                          relationship end definition.
                        "isContainer": bool,  # Optional. Determines if it is container.
                        "isLegacyAttribute": bool,  # Optional. Determines if it is a legacy
                          attribute.
                        "name": "str",  # Optional. The name of the relationship end
                          definition.
                        "type": "str"  # Optional. The type of the relationship end.
                    },
                    "entityTypes": [
                        "str"  # Optional. Specifying a list of entityType names in the
                          classificationDef, ensures that classifications can only be applied to those
                          entityTypes.   .. raw:: html     <ul>    <li>Any subtypes of the entity types
                          inherit the restriction</li>    <li>Any classificationDef subtypes inherit
                          the parents entityTypes restrictions</li>    <li>Any classificationDef
                          subtypes can further restrict the parents entityTypes restrictions by
                          specifying a subset of the entityTypes</li>    <li>An empty entityTypes list
                          when there are no parent restrictions means there are no restrictions</li>
                          <li>An empty entityTypes list when there are parent restrictions means that
                          the subtype picks up the parents restrictions</li>    <li>If a list of
                          entityTypes are supplied, where one inherits from another, this will be
                          rejected. This should encourage cleaner classificationsDefs</li>    </ul>.
                    ],
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "relationshipAttributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isLegacyAttribute": bool,  # Optional. Determines if it is a
                              legacy attribute.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "relationshipTypeName": "str",  # Optional. The name of the
                              relationship type.
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "relationshipCategory": "str",  # Optional. The Relationship category
                      determines the style of relationship around containment and lifecycle. UML
                      terminology is used for the values.  :code:`<p>` ASSOCIATION is a relationship
                      with no containment. :code:`<br>` COMPOSITION and AGGREGATION are containment
                      relationships.  :code:`<p>` The difference being in the lifecycles of the
                      container and its children. In the COMPOSITION case, the children cannot exist
                      without the container. For AGGREGATION, the life cycles of the container and
                      children are totally independent. Known values are: "ASSOCIATION", "AGGREGATION",
                      and "COMPOSITION".
                    "relationshipLabel": "str",  # Optional. The label of the relationship.
                    "serviceType": "str",  # Optional. The service type.
                    "subTypes": [
                        "str"  # Optional. An array of sub types.
                    ],
                    "superTypes": [
                        "str"  # Optional. An array of super types.
                    ],
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_type_get_by_name_request(
            name=name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def delete(self, name: str, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Delete API for type identified by its name.

        :param name: The name of the type. Required.
        :type name: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_type_delete_request(
            name=name,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def list(self, *, include_term_template: bool = False, type: Optional[str] = None, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """List all type definitions in bulk.

        :keyword include_term_template: Whether include termtemplatedef when return all typedefs.
         This is always true when search filter type=term_template. Default value is False.
        :paramtype include_term_template: bool
        :keyword type: Typedef name as search filter when get typedefs. Known values are: "enum",
         "entity", "classification", "relationship", "struct", and "term_template". Default value is
         None.
        :paramtype type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "businessMetadataDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "classificationDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "entityTypes": [
                                "str"  # Optional. Specifying a list of entityType
                                  names in the classificationDef, ensures that classifications can only
                                  be applied to those entityTypes.   .. raw:: html     <ul>    <li>Any
                                  subtypes of the entity types inherit the restriction</li>    <li>Any
                                  classificationDef subtypes inherit the parents entityTypes
                                  restrictions</li>    <li>Any classificationDef subtypes can further
                                  restrict the parents entityTypes restrictions by specifying a subset
                                  of the entityTypes</li>    <li>An empty entityTypes list when there
                                  are no parent restrictions means there are no restrictions</li>
                                  <li>An empty entityTypes list when there are parent restrictions
                                  means that the subtype picks up the parents restrictions</li>
                                  <li>If a list of entityTypes are supplied, where one inherits from
                                  another, this will be rejected. This should encourage cleaner
                                  classificationsDefs</li>    </ul>.
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "entityDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipAttributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isLegacyAttribute": bool,  # Optional.
                                      Determines if it is a legacy attribute.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "relationshipTypeName": "str",  # Optional.
                                      The name of the relationship type.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "enumDefs": [
                        {
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "defaultValue": "str",  # Optional. The default value.
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "elementDefs": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the enum element definition.
                                    "ordinal": 0.0,  # Optional. The ordinal of
                                      the enum element definition.
                                    "value": "str"  # Optional. The value of the
                                      enum element definition.
                                }
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "relationshipDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "endDef1": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "endDef2": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipCategory": "str",  # Optional. The Relationship
                              category determines the style of relationship around containment and
                              lifecycle. UML terminology is used for the values.  :code:`<p>`
                              ASSOCIATION is a relationship with no containment. :code:`<br>`
                              COMPOSITION and AGGREGATION are containment relationships.  :code:`<p>`
                              The difference being in the lifecycles of the container and its children.
                              In the COMPOSITION case, the children cannot exist without the container.
                              For AGGREGATION, the life cycles of the container and children are
                              totally independent. Known values are: "ASSOCIATION", "AGGREGATION", and
                              "COMPOSITION".
                            "relationshipLabel": "str",  # Optional. The label of the
                              relationship.
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "structDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "termTemplateDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_type_list_request(
            include_term_template=include_term_template,
            type=type,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    def bulk_create(self, types_def: JSON, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Create all atlas type definitions in bulk, only new definitions will be created.
        Any changes to the existing definitions will be discarded.

        :param types_def: A composite wrapper object with corresponding lists of the type definition.
         Required.
        :type types_def: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                types_def = {
                    "businessMetadataDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "classificationDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "entityTypes": [
                                "str"  # Optional. Specifying a list of entityType
                                  names in the classificationDef, ensures that classifications can only
                                  be applied to those entityTypes.   .. raw:: html     <ul>    <li>Any
                                  subtypes of the entity types inherit the restriction</li>    <li>Any
                                  classificationDef subtypes inherit the parents entityTypes
                                  restrictions</li>    <li>Any classificationDef subtypes can further
                                  restrict the parents entityTypes restrictions by specifying a subset
                                  of the entityTypes</li>    <li>An empty entityTypes list when there
                                  are no parent restrictions means there are no restrictions</li>
                                  <li>An empty entityTypes list when there are parent restrictions
                                  means that the subtype picks up the parents restrictions</li>
                                  <li>If a list of entityTypes are supplied, where one inherits from
                                  another, this will be rejected. This should encourage cleaner
                                  classificationsDefs</li>    </ul>.
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "entityDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipAttributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isLegacyAttribute": bool,  # Optional.
                                      Determines if it is a legacy attribute.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "relationshipTypeName": "str",  # Optional.
                                      The name of the relationship type.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "enumDefs": [
                        {
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "defaultValue": "str",  # Optional. The default value.
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "elementDefs": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the enum element definition.
                                    "ordinal": 0.0,  # Optional. The ordinal of
                                      the enum element definition.
                                    "value": "str"  # Optional. The value of the
                                      enum element definition.
                                }
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "relationshipDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "endDef1": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "endDef2": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipCategory": "str",  # Optional. The Relationship
                              category determines the style of relationship around containment and
                              lifecycle. UML terminology is used for the values.  :code:`<p>`
                              ASSOCIATION is a relationship with no containment. :code:`<br>`
                              COMPOSITION and AGGREGATION are containment relationships.  :code:`<p>`
                              The difference being in the lifecycles of the container and its children.
                              In the COMPOSITION case, the children cannot exist without the container.
                              For AGGREGATION, the life cycles of the container and children are
                              totally independent. Known values are: "ASSOCIATION", "AGGREGATION", and
                              "COMPOSITION".
                            "relationshipLabel": "str",  # Optional. The label of the
                              relationship.
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "structDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "termTemplateDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "businessMetadataDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "classificationDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "entityTypes": [
                                "str"  # Optional. Specifying a list of entityType
                                  names in the classificationDef, ensures that classifications can only
                                  be applied to those entityTypes.   .. raw:: html     <ul>    <li>Any
                                  subtypes of the entity types inherit the restriction</li>    <li>Any
                                  classificationDef subtypes inherit the parents entityTypes
                                  restrictions</li>    <li>Any classificationDef subtypes can further
                                  restrict the parents entityTypes restrictions by specifying a subset
                                  of the entityTypes</li>    <li>An empty entityTypes list when there
                                  are no parent restrictions means there are no restrictions</li>
                                  <li>An empty entityTypes list when there are parent restrictions
                                  means that the subtype picks up the parents restrictions</li>
                                  <li>If a list of entityTypes are supplied, where one inherits from
                                  another, this will be rejected. This should encourage cleaner
                                  classificationsDefs</li>    </ul>.
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "entityDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipAttributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isLegacyAttribute": bool,  # Optional.
                                      Determines if it is a legacy attribute.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "relationshipTypeName": "str",  # Optional.
                                      The name of the relationship type.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "enumDefs": [
                        {
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "defaultValue": "str",  # Optional. The default value.
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "elementDefs": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the enum element definition.
                                    "ordinal": 0.0,  # Optional. The ordinal of
                                      the enum element definition.
                                    "value": "str"  # Optional. The value of the
                                      enum element definition.
                                }
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "relationshipDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "endDef1": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "endDef2": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipCategory": "str",  # Optional. The Relationship
                              category determines the style of relationship around containment and
                              lifecycle. UML terminology is used for the values.  :code:`<p>`
                              ASSOCIATION is a relationship with no containment. :code:`<br>`
                              COMPOSITION and AGGREGATION are containment relationships.  :code:`<p>`
                              The difference being in the lifecycles of the container and its children.
                              In the COMPOSITION case, the children cannot exist without the container.
                              For AGGREGATION, the life cycles of the container and children are
                              totally independent. Known values are: "ASSOCIATION", "AGGREGATION", and
                              "COMPOSITION".
                            "relationshipLabel": "str",  # Optional. The label of the
                              relationship.
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "structDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "termTemplateDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ]
                }
        """

    @overload
    def bulk_create(self, types_def: IO[bytes], *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Create all atlas type definitions in bulk, only new definitions will be created.
        Any changes to the existing definitions will be discarded.

        :param types_def: A composite wrapper object with corresponding lists of the type definition.
         Required.
        :type types_def: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "businessMetadataDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "classificationDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "entityTypes": [
                                "str"  # Optional. Specifying a list of entityType
                                  names in the classificationDef, ensures that classifications can only
                                  be applied to those entityTypes.   .. raw:: html     <ul>    <li>Any
                                  subtypes of the entity types inherit the restriction</li>    <li>Any
                                  classificationDef subtypes inherit the parents entityTypes
                                  restrictions</li>    <li>Any classificationDef subtypes can further
                                  restrict the parents entityTypes restrictions by specifying a subset
                                  of the entityTypes</li>    <li>An empty entityTypes list when there
                                  are no parent restrictions means there are no restrictions</li>
                                  <li>An empty entityTypes list when there are parent restrictions
                                  means that the subtype picks up the parents restrictions</li>
                                  <li>If a list of entityTypes are supplied, where one inherits from
                                  another, this will be rejected. This should encourage cleaner
                                  classificationsDefs</li>    </ul>.
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "entityDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipAttributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isLegacyAttribute": bool,  # Optional.
                                      Determines if it is a legacy attribute.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "relationshipTypeName": "str",  # Optional.
                                      The name of the relationship type.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "enumDefs": [
                        {
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "defaultValue": "str",  # Optional. The default value.
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "elementDefs": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the enum element definition.
                                    "ordinal": 0.0,  # Optional. The ordinal of
                                      the enum element definition.
                                    "value": "str"  # Optional. The value of the
                                      enum element definition.
                                }
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "relationshipDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "endDef1": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "endDef2": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipCategory": "str",  # Optional. The Relationship
                              category determines the style of relationship around containment and
                              lifecycle. UML terminology is used for the values.  :code:`<p>`
                              ASSOCIATION is a relationship with no containment. :code:`<br>`
                              COMPOSITION and AGGREGATION are containment relationships.  :code:`<p>`
                              The difference being in the lifecycles of the container and its children.
                              In the COMPOSITION case, the children cannot exist without the container.
                              For AGGREGATION, the life cycles of the container and children are
                              totally independent. Known values are: "ASSOCIATION", "AGGREGATION", and
                              "COMPOSITION".
                            "relationshipLabel": "str",  # Optional. The label of the
                              relationship.
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "structDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "termTemplateDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ]
                }
        """

    @distributed_trace
    def bulk_create(self, types_def: Union[JSON, IO[bytes]], **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Create all atlas type definitions in bulk, only new definitions will be created.
        Any changes to the existing definitions will be discarded.

        :param types_def: A composite wrapper object with corresponding lists of the type definition.
         Is either a JSON type or a IO[bytes] type. Required.
        :type types_def: JSON or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                types_def = {
                    "businessMetadataDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "classificationDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "entityTypes": [
                                "str"  # Optional. Specifying a list of entityType
                                  names in the classificationDef, ensures that classifications can only
                                  be applied to those entityTypes.   .. raw:: html     <ul>    <li>Any
                                  subtypes of the entity types inherit the restriction</li>    <li>Any
                                  classificationDef subtypes inherit the parents entityTypes
                                  restrictions</li>    <li>Any classificationDef subtypes can further
                                  restrict the parents entityTypes restrictions by specifying a subset
                                  of the entityTypes</li>    <li>An empty entityTypes list when there
                                  are no parent restrictions means there are no restrictions</li>
                                  <li>An empty entityTypes list when there are parent restrictions
                                  means that the subtype picks up the parents restrictions</li>
                                  <li>If a list of entityTypes are supplied, where one inherits from
                                  another, this will be rejected. This should encourage cleaner
                                  classificationsDefs</li>    </ul>.
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "entityDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipAttributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isLegacyAttribute": bool,  # Optional.
                                      Determines if it is a legacy attribute.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "relationshipTypeName": "str",  # Optional.
                                      The name of the relationship type.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "enumDefs": [
                        {
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "defaultValue": "str",  # Optional. The default value.
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "elementDefs": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the enum element definition.
                                    "ordinal": 0.0,  # Optional. The ordinal of
                                      the enum element definition.
                                    "value": "str"  # Optional. The value of the
                                      enum element definition.
                                }
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "relationshipDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "endDef1": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "endDef2": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipCategory": "str",  # Optional. The Relationship
                              category determines the style of relationship around containment and
                              lifecycle. UML terminology is used for the values.  :code:`<p>`
                              ASSOCIATION is a relationship with no containment. :code:`<br>`
                              COMPOSITION and AGGREGATION are containment relationships.  :code:`<p>`
                              The difference being in the lifecycles of the container and its children.
                              In the COMPOSITION case, the children cannot exist without the container.
                              For AGGREGATION, the life cycles of the container and children are
                              totally independent. Known values are: "ASSOCIATION", "AGGREGATION", and
                              "COMPOSITION".
                            "relationshipLabel": "str",  # Optional. The label of the
                              relationship.
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "structDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "termTemplateDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "businessMetadataDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "classificationDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "entityTypes": [
                                "str"  # Optional. Specifying a list of entityType
                                  names in the classificationDef, ensures that classifications can only
                                  be applied to those entityTypes.   .. raw:: html     <ul>    <li>Any
                                  subtypes of the entity types inherit the restriction</li>    <li>Any
                                  classificationDef subtypes inherit the parents entityTypes
                                  restrictions</li>    <li>Any classificationDef subtypes can further
                                  restrict the parents entityTypes restrictions by specifying a subset
                                  of the entityTypes</li>    <li>An empty entityTypes list when there
                                  are no parent restrictions means there are no restrictions</li>
                                  <li>An empty entityTypes list when there are parent restrictions
                                  means that the subtype picks up the parents restrictions</li>
                                  <li>If a list of entityTypes are supplied, where one inherits from
                                  another, this will be rejected. This should encourage cleaner
                                  classificationsDefs</li>    </ul>.
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "entityDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipAttributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isLegacyAttribute": bool,  # Optional.
                                      Determines if it is a legacy attribute.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "relationshipTypeName": "str",  # Optional.
                                      The name of the relationship type.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "enumDefs": [
                        {
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "defaultValue": "str",  # Optional. The default value.
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "elementDefs": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the enum element definition.
                                    "ordinal": 0.0,  # Optional. The ordinal of
                                      the enum element definition.
                                    "value": "str"  # Optional. The value of the
                                      enum element definition.
                                }
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "relationshipDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "endDef1": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "endDef2": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipCategory": "str",  # Optional. The Relationship
                              category determines the style of relationship around containment and
                              lifecycle. UML terminology is used for the values.  :code:`<p>`
                              ASSOCIATION is a relationship with no containment. :code:`<br>`
                              COMPOSITION and AGGREGATION are containment relationships.  :code:`<p>`
                              The difference being in the lifecycles of the container and its children.
                              In the COMPOSITION case, the children cannot exist without the container.
                              For AGGREGATION, the life cycles of the container and children are
                              totally independent. Known values are: "ASSOCIATION", "AGGREGATION", and
                              "COMPOSITION".
                            "relationshipLabel": "str",  # Optional. The label of the
                              relationship.
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "structDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "termTemplateDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(types_def, (IOBase, bytes)):
            _content = types_def
        else:
            _json = types_def

        _request = build_type_bulk_create_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    def bulk_update(self, types_def: JSON, *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Update all types in bulk, changes detected in the type definitions would be persisted.

        :param types_def: A composite object that captures all type definition changes. Required.
        :type types_def: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                types_def = {
                    "businessMetadataDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "classificationDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "entityTypes": [
                                "str"  # Optional. Specifying a list of entityType
                                  names in the classificationDef, ensures that classifications can only
                                  be applied to those entityTypes.   .. raw:: html     <ul>    <li>Any
                                  subtypes of the entity types inherit the restriction</li>    <li>Any
                                  classificationDef subtypes inherit the parents entityTypes
                                  restrictions</li>    <li>Any classificationDef subtypes can further
                                  restrict the parents entityTypes restrictions by specifying a subset
                                  of the entityTypes</li>    <li>An empty entityTypes list when there
                                  are no parent restrictions means there are no restrictions</li>
                                  <li>An empty entityTypes list when there are parent restrictions
                                  means that the subtype picks up the parents restrictions</li>
                                  <li>If a list of entityTypes are supplied, where one inherits from
                                  another, this will be rejected. This should encourage cleaner
                                  classificationsDefs</li>    </ul>.
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "entityDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipAttributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isLegacyAttribute": bool,  # Optional.
                                      Determines if it is a legacy attribute.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "relationshipTypeName": "str",  # Optional.
                                      The name of the relationship type.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "enumDefs": [
                        {
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "defaultValue": "str",  # Optional. The default value.
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "elementDefs": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the enum element definition.
                                    "ordinal": 0.0,  # Optional. The ordinal of
                                      the enum element definition.
                                    "value": "str"  # Optional. The value of the
                                      enum element definition.
                                }
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "relationshipDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "endDef1": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "endDef2": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipCategory": "str",  # Optional. The Relationship
                              category determines the style of relationship around containment and
                              lifecycle. UML terminology is used for the values.  :code:`<p>`
                              ASSOCIATION is a relationship with no containment. :code:`<br>`
                              COMPOSITION and AGGREGATION are containment relationships.  :code:`<p>`
                              The difference being in the lifecycles of the container and its children.
                              In the COMPOSITION case, the children cannot exist without the container.
                              For AGGREGATION, the life cycles of the container and children are
                              totally independent. Known values are: "ASSOCIATION", "AGGREGATION", and
                              "COMPOSITION".
                            "relationshipLabel": "str",  # Optional. The label of the
                              relationship.
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "structDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "termTemplateDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "businessMetadataDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "classificationDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "entityTypes": [
                                "str"  # Optional. Specifying a list of entityType
                                  names in the classificationDef, ensures that classifications can only
                                  be applied to those entityTypes.   .. raw:: html     <ul>    <li>Any
                                  subtypes of the entity types inherit the restriction</li>    <li>Any
                                  classificationDef subtypes inherit the parents entityTypes
                                  restrictions</li>    <li>Any classificationDef subtypes can further
                                  restrict the parents entityTypes restrictions by specifying a subset
                                  of the entityTypes</li>    <li>An empty entityTypes list when there
                                  are no parent restrictions means there are no restrictions</li>
                                  <li>An empty entityTypes list when there are parent restrictions
                                  means that the subtype picks up the parents restrictions</li>
                                  <li>If a list of entityTypes are supplied, where one inherits from
                                  another, this will be rejected. This should encourage cleaner
                                  classificationsDefs</li>    </ul>.
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "entityDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipAttributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isLegacyAttribute": bool,  # Optional.
                                      Determines if it is a legacy attribute.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "relationshipTypeName": "str",  # Optional.
                                      The name of the relationship type.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "enumDefs": [
                        {
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "defaultValue": "str",  # Optional. The default value.
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "elementDefs": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the enum element definition.
                                    "ordinal": 0.0,  # Optional. The ordinal of
                                      the enum element definition.
                                    "value": "str"  # Optional. The value of the
                                      enum element definition.
                                }
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "relationshipDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "endDef1": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "endDef2": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipCategory": "str",  # Optional. The Relationship
                              category determines the style of relationship around containment and
                              lifecycle. UML terminology is used for the values.  :code:`<p>`
                              ASSOCIATION is a relationship with no containment. :code:`<br>`
                              COMPOSITION and AGGREGATION are containment relationships.  :code:`<p>`
                              The difference being in the lifecycles of the container and its children.
                              In the COMPOSITION case, the children cannot exist without the container.
                              For AGGREGATION, the life cycles of the container and children are
                              totally independent. Known values are: "ASSOCIATION", "AGGREGATION", and
                              "COMPOSITION".
                            "relationshipLabel": "str",  # Optional. The label of the
                              relationship.
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "structDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "termTemplateDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ]
                }
        """

    @overload
    def bulk_update(self, types_def: IO[bytes], *, content_type: str = "application/json", **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Update all types in bulk, changes detected in the type definitions would be persisted.

        :param types_def: A composite object that captures all type definition changes. Required.
        :type types_def: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "businessMetadataDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "classificationDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "entityTypes": [
                                "str"  # Optional. Specifying a list of entityType
                                  names in the classificationDef, ensures that classifications can only
                                  be applied to those entityTypes.   .. raw:: html     <ul>    <li>Any
                                  subtypes of the entity types inherit the restriction</li>    <li>Any
                                  classificationDef subtypes inherit the parents entityTypes
                                  restrictions</li>    <li>Any classificationDef subtypes can further
                                  restrict the parents entityTypes restrictions by specifying a subset
                                  of the entityTypes</li>    <li>An empty entityTypes list when there
                                  are no parent restrictions means there are no restrictions</li>
                                  <li>An empty entityTypes list when there are parent restrictions
                                  means that the subtype picks up the parents restrictions</li>
                                  <li>If a list of entityTypes are supplied, where one inherits from
                                  another, this will be rejected. This should encourage cleaner
                                  classificationsDefs</li>    </ul>.
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "entityDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipAttributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isLegacyAttribute": bool,  # Optional.
                                      Determines if it is a legacy attribute.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "relationshipTypeName": "str",  # Optional.
                                      The name of the relationship type.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "enumDefs": [
                        {
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "defaultValue": "str",  # Optional. The default value.
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "elementDefs": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the enum element definition.
                                    "ordinal": 0.0,  # Optional. The ordinal of
                                      the enum element definition.
                                    "value": "str"  # Optional. The value of the
                                      enum element definition.
                                }
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "relationshipDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "endDef1": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "endDef2": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipCategory": "str",  # Optional. The Relationship
                              category determines the style of relationship around containment and
                              lifecycle. UML terminology is used for the values.  :code:`<p>`
                              ASSOCIATION is a relationship with no containment. :code:`<br>`
                              COMPOSITION and AGGREGATION are containment relationships.  :code:`<p>`
                              The difference being in the lifecycles of the container and its children.
                              In the COMPOSITION case, the children cannot exist without the container.
                              For AGGREGATION, the life cycles of the container and children are
                              totally independent. Known values are: "ASSOCIATION", "AGGREGATION", and
                              "COMPOSITION".
                            "relationshipLabel": "str",  # Optional. The label of the
                              relationship.
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "structDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "termTemplateDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ]
                }
        """

    @distributed_trace
    def bulk_update(self, types_def: Union[JSON, IO[bytes]], **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Update all types in bulk, changes detected in the type definitions would be persisted.

        :param types_def: A composite object that captures all type definition changes. Is either a
         JSON type or a IO[bytes] type. Required.
        :type types_def: JSON or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                types_def = {
                    "businessMetadataDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "classificationDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "entityTypes": [
                                "str"  # Optional. Specifying a list of entityType
                                  names in the classificationDef, ensures that classifications can only
                                  be applied to those entityTypes.   .. raw:: html     <ul>    <li>Any
                                  subtypes of the entity types inherit the restriction</li>    <li>Any
                                  classificationDef subtypes inherit the parents entityTypes
                                  restrictions</li>    <li>Any classificationDef subtypes can further
                                  restrict the parents entityTypes restrictions by specifying a subset
                                  of the entityTypes</li>    <li>An empty entityTypes list when there
                                  are no parent restrictions means there are no restrictions</li>
                                  <li>An empty entityTypes list when there are parent restrictions
                                  means that the subtype picks up the parents restrictions</li>
                                  <li>If a list of entityTypes are supplied, where one inherits from
                                  another, this will be rejected. This should encourage cleaner
                                  classificationsDefs</li>    </ul>.
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "entityDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipAttributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isLegacyAttribute": bool,  # Optional.
                                      Determines if it is a legacy attribute.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "relationshipTypeName": "str",  # Optional.
                                      The name of the relationship type.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "enumDefs": [
                        {
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "defaultValue": "str",  # Optional. The default value.
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "elementDefs": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the enum element definition.
                                    "ordinal": 0.0,  # Optional. The ordinal of
                                      the enum element definition.
                                    "value": "str"  # Optional. The value of the
                                      enum element definition.
                                }
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "relationshipDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "endDef1": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "endDef2": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipCategory": "str",  # Optional. The Relationship
                              category determines the style of relationship around containment and
                              lifecycle. UML terminology is used for the values.  :code:`<p>`
                              ASSOCIATION is a relationship with no containment. :code:`<br>`
                              COMPOSITION and AGGREGATION are containment relationships.  :code:`<p>`
                              The difference being in the lifecycles of the container and its children.
                              In the COMPOSITION case, the children cannot exist without the container.
                              For AGGREGATION, the life cycles of the container and children are
                              totally independent. Known values are: "ASSOCIATION", "AGGREGATION", and
                              "COMPOSITION".
                            "relationshipLabel": "str",  # Optional. The label of the
                              relationship.
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "structDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "termTemplateDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ]
                }

                # response body for status code(s): 200
                response == {
                    "businessMetadataDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "classificationDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "entityTypes": [
                                "str"  # Optional. Specifying a list of entityType
                                  names in the classificationDef, ensures that classifications can only
                                  be applied to those entityTypes.   .. raw:: html     <ul>    <li>Any
                                  subtypes of the entity types inherit the restriction</li>    <li>Any
                                  classificationDef subtypes inherit the parents entityTypes
                                  restrictions</li>    <li>Any classificationDef subtypes can further
                                  restrict the parents entityTypes restrictions by specifying a subset
                                  of the entityTypes</li>    <li>An empty entityTypes list when there
                                  are no parent restrictions means there are no restrictions</li>
                                  <li>An empty entityTypes list when there are parent restrictions
                                  means that the subtype picks up the parents restrictions</li>
                                  <li>If a list of entityTypes are supplied, where one inherits from
                                  another, this will be rejected. This should encourage cleaner
                                  classificationsDefs</li>    </ul>.
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "entityDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipAttributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isLegacyAttribute": bool,  # Optional.
                                      Determines if it is a legacy attribute.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "relationshipTypeName": "str",  # Optional.
                                      The name of the relationship type.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "enumDefs": [
                        {
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "defaultValue": "str",  # Optional. The default value.
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "elementDefs": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the enum element definition.
                                    "ordinal": 0.0,  # Optional. The ordinal of
                                      the enum element definition.
                                    "value": "str"  # Optional. The value of the
                                      enum element definition.
                                }
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "relationshipDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "endDef1": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "endDef2": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipCategory": "str",  # Optional. The Relationship
                              category determines the style of relationship around containment and
                              lifecycle. UML terminology is used for the values.  :code:`<p>`
                              ASSOCIATION is a relationship with no containment. :code:`<br>`
                              COMPOSITION and AGGREGATION are containment relationships.  :code:`<p>`
                              The difference being in the lifecycles of the container and its children.
                              In the COMPOSITION case, the children cannot exist without the container.
                              For AGGREGATION, the life cycles of the container and children are
                              totally independent. Known values are: "ASSOCIATION", "AGGREGATION", and
                              "COMPOSITION".
                            "relationshipLabel": "str",  # Optional. The label of the
                              relationship.
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "structDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "termTemplateDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(types_def, (IOBase, bytes)):
            _content = types_def
        else:
            _json = types_def

        _request = build_type_bulk_update_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    def bulk_delete(  # pylint: disable=inconsistent-return-statements
        self, types_def: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        # pylint: disable=line-too-long
        """Delete API for all types in bulk.

        :param types_def: A composite object that captures all types to be deleted. Required.
        :type types_def: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                types_def = {
                    "businessMetadataDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "classificationDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "entityTypes": [
                                "str"  # Optional. Specifying a list of entityType
                                  names in the classificationDef, ensures that classifications can only
                                  be applied to those entityTypes.   .. raw:: html     <ul>    <li>Any
                                  subtypes of the entity types inherit the restriction</li>    <li>Any
                                  classificationDef subtypes inherit the parents entityTypes
                                  restrictions</li>    <li>Any classificationDef subtypes can further
                                  restrict the parents entityTypes restrictions by specifying a subset
                                  of the entityTypes</li>    <li>An empty entityTypes list when there
                                  are no parent restrictions means there are no restrictions</li>
                                  <li>An empty entityTypes list when there are parent restrictions
                                  means that the subtype picks up the parents restrictions</li>
                                  <li>If a list of entityTypes are supplied, where one inherits from
                                  another, this will be rejected. This should encourage cleaner
                                  classificationsDefs</li>    </ul>.
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "entityDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipAttributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isLegacyAttribute": bool,  # Optional.
                                      Determines if it is a legacy attribute.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "relationshipTypeName": "str",  # Optional.
                                      The name of the relationship type.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "enumDefs": [
                        {
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "defaultValue": "str",  # Optional. The default value.
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "elementDefs": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the enum element definition.
                                    "ordinal": 0.0,  # Optional. The ordinal of
                                      the enum element definition.
                                    "value": "str"  # Optional. The value of the
                                      enum element definition.
                                }
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "relationshipDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "endDef1": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "endDef2": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipCategory": "str",  # Optional. The Relationship
                              category determines the style of relationship around containment and
                              lifecycle. UML terminology is used for the values.  :code:`<p>`
                              ASSOCIATION is a relationship with no containment. :code:`<br>`
                              COMPOSITION and AGGREGATION are containment relationships.  :code:`<p>`
                              The difference being in the lifecycles of the container and its children.
                              In the COMPOSITION case, the children cannot exist without the container.
                              For AGGREGATION, the life cycles of the container and children are
                              totally independent. Known values are: "ASSOCIATION", "AGGREGATION", and
                              "COMPOSITION".
                            "relationshipLabel": "str",  # Optional. The label of the
                              relationship.
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "structDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "termTemplateDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ]
                }
        """

    @overload
    def bulk_delete(  # pylint: disable=inconsistent-return-statements
        self, types_def: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Delete API for all types in bulk.

        :param types_def: A composite object that captures all types to be deleted. Required.
        :type types_def: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def bulk_delete(  # pylint: disable=inconsistent-return-statements
        self, types_def: Union[JSON, IO[bytes]], **kwargs: Any
    ) -> None:
        # pylint: disable=line-too-long
        """Delete API for all types in bulk.

        :param types_def: A composite object that captures all types to be deleted. Is either a JSON
         type or a IO[bytes] type. Required.
        :type types_def: JSON or IO[bytes]
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                types_def = {
                    "businessMetadataDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "classificationDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "entityTypes": [
                                "str"  # Optional. Specifying a list of entityType
                                  names in the classificationDef, ensures that classifications can only
                                  be applied to those entityTypes.   .. raw:: html     <ul>    <li>Any
                                  subtypes of the entity types inherit the restriction</li>    <li>Any
                                  classificationDef subtypes inherit the parents entityTypes
                                  restrictions</li>    <li>Any classificationDef subtypes can further
                                  restrict the parents entityTypes restrictions by specifying a subset
                                  of the entityTypes</li>    <li>An empty entityTypes list when there
                                  are no parent restrictions means there are no restrictions</li>
                                  <li>An empty entityTypes list when there are parent restrictions
                                  means that the subtype picks up the parents restrictions</li>
                                  <li>If a list of entityTypes are supplied, where one inherits from
                                  another, this will be rejected. This should encourage cleaner
                                  classificationsDefs</li>    </ul>.
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "entityDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipAttributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isLegacyAttribute": bool,  # Optional.
                                      Determines if it is a legacy attribute.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "relationshipTypeName": "str",  # Optional.
                                      The name of the relationship type.
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "serviceType": "str",  # Optional. The service type.
                            "subTypes": [
                                "str"  # Optional. An array of sub types.
                            ],
                            "superTypes": [
                                "str"  # Optional. An array of super types.
                            ],
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "enumDefs": [
                        {
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "defaultValue": "str",  # Optional. The default value.
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "elementDefs": [
                                {
                                    "description": "str",  # Optional. The
                                      description of the enum element definition.
                                    "ordinal": 0.0,  # Optional. The ordinal of
                                      the enum element definition.
                                    "value": "str"  # Optional. The value of the
                                      enum element definition.
                                }
                            ],
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "relationshipDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "endDef1": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "endDef2": {
                                "cardinality": "str",  # Optional. single-valued
                                  attribute or multi-valued attribute. Known values are: "SINGLE",
                                  "LIST", and "SET".
                                "description": "str",  # Optional. The description of
                                  the relationship end definition.
                                "isContainer": bool,  # Optional. Determines if it is
                                  container.
                                "isLegacyAttribute": bool,  # Optional. Determines if
                                  it is a legacy attribute.
                                "name": "str",  # Optional. The name of the
                                  relationship end definition.
                                "type": "str"  # Optional. The type of the
                                  relationship end.
                            },
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "relationshipCategory": "str",  # Optional. The Relationship
                              category determines the style of relationship around containment and
                              lifecycle. UML terminology is used for the values.  :code:`<p>`
                              ASSOCIATION is a relationship with no containment. :code:`<br>`
                              COMPOSITION and AGGREGATION are containment relationships.  :code:`<p>`
                              The difference being in the lifecycles of the container and its children.
                              In the COMPOSITION case, the children cannot exist without the container.
                              For AGGREGATION, the life cycles of the container and children are
                              totally independent. Known values are: "ASSOCIATION", "AGGREGATION", and
                              "COMPOSITION".
                            "relationshipLabel": "str",  # Optional. The label of the
                              relationship.
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "structDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ],
                    "termTemplateDefs": [
                        {
                            "attributeDefs": [
                                {
                                    "cardinality": "str",  # Optional.
                                      single-valued attribute or multi-valued attribute. Known values
                                      are: "SINGLE", "LIST", and "SET".
                                    "constraints": [
                                        {
                                            "params": {
                                                "str": {}  #
                                                  Optional. The parameters of the constraint
                                                  definition.
                                            },
                                            "type": "str"  # Optional.
                                              The type of the constraint.
                                        }
                                    ],
                                    "defaultValue": "str",  # Optional. The
                                      default value of the attribute.
                                    "description": "str",  # Optional. The
                                      description of the attribute.
                                    "includeInNotification": bool,  # Optional.
                                      Determines if it is included in notification.
                                    "isIndexable": bool,  # Optional. Determines
                                      if it is indexable.
                                    "isOptional": bool,  # Optional. Determines
                                      if it is optional.
                                    "isUnique": bool,  # Optional. Determines if
                                      it unique.
                                    "name": "str",  # Optional. The name of the
                                      attribute.
                                    "options": {
                                        "str": "str"  # Optional. The options
                                          for the attribute.
                                    },
                                    "typeName": "str",  # Optional. The name of
                                      the type.
                                    "valuesMaxCount": 0,  # Optional. The maximum
                                      count of the values.
                                    "valuesMinCount": 0  # Optional. The minimum
                                      count of the values.
                                }
                            ],
                            "category": "str",  # Optional. The enum of type category.
                              Known values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                              "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                              "TERM_TEMPLATE".
                            "createTime": 0,  # Optional. The created time of the record.
                            "createdBy": "str",  # Optional. The user who created the
                              record.
                            "dateFormatter": {
                                "availableLocales": [
                                    "str"  # Optional. An array of available
                                      locales.
                                ],
                                "calendar": 0.0,  # Optional. The date format.
                                "dateInstance": ...,
                                "dateTimeInstance": ...,
                                "instance": ...,
                                "lenient": bool,  # Optional. Determines the leniency
                                  of the date format.
                                "numberFormat": {
                                    "availableLocales": [
                                        "str"  # Optional. The number format.
                                    ],
                                    "currency": "str",  # Optional. The currency.
                                    "currencyInstance": ...,
                                    "groupingUsed": bool,  # Optional. Determines
                                      if grouping is used.
                                    "instance": ...,
                                    "integerInstance": ...,
                                    "maximumFractionDigits": 0,  # Optional. The
                                      maximum of fraction digits.
                                    "maximumIntegerDigits": 0,  # Optional. The
                                      maximum of integer digits.
                                    "minimumFractionDigits": 0,  # Optional. The
                                      minimum of fraction digits.
                                    "minimumIntegerDigits": 0,  # Optional. The
                                      minimum of integer digits.
                                    "numberInstance": ...,
                                    "parseIntegerOnly": bool,  # Optional.
                                      Determines if only integer is parsed.
                                    "percentInstance": ...,
                                    "roundingMode": "str"  # Optional. The enum
                                      of rounding mode. Known values are: "UP", "DOWN", "CEILING",
                                      "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                                },
                                "timeInstance": ...,
                                "timeZone": {
                                    "availableIds": [
                                        "str"  # Optional. An array of
                                          available IDs.
                                    ],
                                    "default": ...,
                                    "displayName": "str",  # Optional. The
                                      display name of the timezone.
                                    "dstSavings": 0,  # Optional. The value of
                                      the daylight saving time.
                                    "id": "str",  # Optional. The ID of the
                                      timezone.
                                    "rawOffset": 0  # Optional. The raw offset of
                                      the timezone.
                                }
                            },
                            "description": "str",  # Optional. The description of the
                              type definition.
                            "guid": "str",  # Optional. The GUID of the type definition.
                            "lastModifiedTS": "str",  # Optional. ETag for concurrency
                              control.
                            "name": "str",  # Optional. The name of the type definition.
                            "options": {
                                "str": "str"  # Optional. The options for the type
                                  definition.
                            },
                            "serviceType": "str",  # Optional. The service type.
                            "typeVersion": "str",  # Optional. The version of the type.
                            "updateTime": 0,  # Optional. The update time of the record.
                            "updatedBy": "str",  # Optional. The user who updated the
                              record.
                            "version": 0.0  # Optional. The version of the record.
                        }
                    ]
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(types_def, (IOBase, bytes)):
            _content = types_def
        else:
            _json = types_def

        _request = build_type_bulk_delete_request(
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})  # type: ignore

    @distributed_trace
    def list_headers(
        self, *, include_term_template: bool = False, type: Optional[str] = None, **kwargs: Any
    ) -> List[JSON]:
        # pylint: disable=line-too-long
        """List all type definitions returned as a list of minimal information header.

        :keyword include_term_template: Whether include termtemplatedef when return all typedefs.
         This is always true when search filter type=term_template. Default value is False.
        :paramtype include_term_template: bool
        :keyword type: Typedef name as search filter when get typedefs. Known values are: "enum",
         "entity", "classification", "relationship", "struct", and "term_template". Default value is
         None.
        :paramtype type: str
        :return: list of JSON object
        :rtype: list[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == [
                    {
                        "category": "str",  # Optional. The enum of type category. Known
                          values are: "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT",
                          "CLASSIFICATION", "ENTITY", "ARRAY", "MAP", "RELATIONSHIP", and
                          "TERM_TEMPLATE".
                        "guid": "str",  # Optional. The GUID of the type definition.
                        "name": "str"  # Optional. The name of the type definition.
                    }
                ]
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[List[JSON]] = kwargs.pop("cls", None)

        _request = build_type_list_headers_request(
            include_term_template=include_term_template,
            type=type,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(List[JSON], deserialized), {})  # type: ignore

        return cast(List[JSON], deserialized)  # type: ignore

    @distributed_trace
    def get_term_template_def_by_guid(self, guid: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get the term template definition for the given GUID.

        :param guid: The globally unique identifier of the term template. Required.
        :type guid: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "description": "str",  # Optional. The description of the type definition.
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "serviceType": "str",  # Optional. The service type.
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_type_get_term_template_def_by_guid_request(
            guid=guid,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @distributed_trace
    def get_term_template_def_by_name(self, name: str, **kwargs: Any) -> JSON:
        # pylint: disable=line-too-long
        """Get the term template definition by its name (unique).

        :param name: The name of the term template. Required.
        :type name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "attributeDefs": [
                        {
                            "cardinality": "str",  # Optional. single-valued attribute or
                              multi-valued attribute. Known values are: "SINGLE", "LIST", and "SET".
                            "constraints": [
                                {
                                    "params": {
                                        "str": {}  # Optional. The parameters
                                          of the constraint definition.
                                    },
                                    "type": "str"  # Optional. The type of the
                                      constraint.
                                }
                            ],
                            "defaultValue": "str",  # Optional. The default value of the
                              attribute.
                            "description": "str",  # Optional. The description of the
                              attribute.
                            "includeInNotification": bool,  # Optional. Determines if it
                              is included in notification.
                            "isIndexable": bool,  # Optional. Determines if it is
                              indexable.
                            "isOptional": bool,  # Optional. Determines if it is
                              optional.
                            "isUnique": bool,  # Optional. Determines if it unique.
                            "name": "str",  # Optional. The name of the attribute.
                            "options": {
                                "str": "str"  # Optional. The options for the
                                  attribute.
                            },
                            "typeName": "str",  # Optional. The name of the type.
                            "valuesMaxCount": 0,  # Optional. The maximum count of the
                              values.
                            "valuesMinCount": 0  # Optional. The minimum count of the
                              values.
                        }
                    ],
                    "category": "str",  # Optional. The enum of type category. Known values are:
                      "PRIMITIVE", "OBJECT_ID_TYPE", "ENUM", "STRUCT", "CLASSIFICATION", "ENTITY",
                      "ARRAY", "MAP", "RELATIONSHIP", and "TERM_TEMPLATE".
                    "createTime": 0,  # Optional. The created time of the record.
                    "createdBy": "str",  # Optional. The user who created the record.
                    "dateFormatter": {
                        "availableLocales": [
                            "str"  # Optional. An array of available locales.
                        ],
                        "calendar": 0.0,  # Optional. The date format.
                        "dateInstance": ...,
                        "dateTimeInstance": ...,
                        "instance": ...,
                        "lenient": bool,  # Optional. Determines the leniency of the date
                          format.
                        "numberFormat": {
                            "availableLocales": [
                                "str"  # Optional. The number format.
                            ],
                            "currency": "str",  # Optional. The currency.
                            "currencyInstance": ...,
                            "groupingUsed": bool,  # Optional. Determines if grouping is
                              used.
                            "instance": ...,
                            "integerInstance": ...,
                            "maximumFractionDigits": 0,  # Optional. The maximum of
                              fraction digits.
                            "maximumIntegerDigits": 0,  # Optional. The maximum of
                              integer digits.
                            "minimumFractionDigits": 0,  # Optional. The minimum of
                              fraction digits.
                            "minimumIntegerDigits": 0,  # Optional. The minimum of
                              integer digits.
                            "numberInstance": ...,
                            "parseIntegerOnly": bool,  # Optional. Determines if only
                              integer is parsed.
                            "percentInstance": ...,
                            "roundingMode": "str"  # Optional. The enum of rounding mode.
                              Known values are: "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP",
                              "HALF_DOWN", "HALF_EVEN", and "UNNECESSARY".
                        },
                        "timeInstance": ...,
                        "timeZone": {
                            "availableIds": [
                                "str"  # Optional. An array of available IDs.
                            ],
                            "default": ...,
                            "displayName": "str",  # Optional. The display name of the
                              timezone.
                            "dstSavings": 0,  # Optional. The value of the daylight
                              saving time.
                            "id": "str",  # Optional. The ID of the timezone.
                            "rawOffset": 0  # Optional. The raw offset of the timezone.
                        }
                    },
                    "description": "str",  # Optional. The description of the type definition.
                    "guid": "str",  # Optional. The GUID of the type definition.
                    "lastModifiedTS": "str",  # Optional. ETag for concurrency control.
                    "name": "str",  # Optional. The name of the type definition.
                    "options": {
                        "str": "str"  # Optional. The options for the type definition.
                    },
                    "serviceType": "str",  # Optional. The service type.
                    "typeVersion": "str",  # Optional. The version of the type.
                    "updateTime": 0,  # Optional. The update time of the record.
                    "updatedBy": "str",  # Optional. The user who updated the record.
                    "version": 0.0  # Optional. The version of the record.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        _request = build_type_get_term_template_def_by_name_request(
            name=name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore
