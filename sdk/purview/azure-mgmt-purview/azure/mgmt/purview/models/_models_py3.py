# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class AccessKeys(Model):
    """The Account access keys.

    :param atlas_kafka_primary_endpoint: Gets or sets the primary connection
     string.
    :type atlas_kafka_primary_endpoint: str
    :param atlas_kafka_secondary_endpoint: Gets or sets the secondary
     connection string.
    :type atlas_kafka_secondary_endpoint: str
    """

    _attribute_map = {
        'atlas_kafka_primary_endpoint': {'key': 'atlasKafkaPrimaryEndpoint', 'type': 'str'},
        'atlas_kafka_secondary_endpoint': {'key': 'atlasKafkaSecondaryEndpoint', 'type': 'str'},
    }

    def __init__(self, *, atlas_kafka_primary_endpoint: str=None, atlas_kafka_secondary_endpoint: str=None, **kwargs) -> None:
        super(AccessKeys, self).__init__(**kwargs)
        self.atlas_kafka_primary_endpoint = atlas_kafka_primary_endpoint
        self.atlas_kafka_secondary_endpoint = atlas_kafka_secondary_endpoint


class TrackedResource(Model):
    """Azure ARM Tracked Resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Gets or sets the identifier.
    :vartype id: str
    :param identity: Identity Info on the tracked resource
    :type identity: ~azure.mgmt.purview.models.Identity
    :param location: Gets or sets the location.
    :type location: str
    :ivar name: Gets or sets the name.
    :vartype name: str
    :param tags: Tags on the azure resource.
    :type tags: dict[str, str]
    :ivar type: Gets or sets the type.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'Identity'},
        'location': {'key': 'location', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, *, identity=None, location: str=None, tags=None, **kwargs) -> None:
        super(TrackedResource, self).__init__(**kwargs)
        self.id = None
        self.identity = identity
        self.location = location
        self.name = None
        self.tags = tags
        self.type = None


class Account(TrackedResource):
    """Account resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Gets or sets the identifier.
    :vartype id: str
    :param identity: Identity Info on the tracked resource
    :type identity: ~azure.mgmt.purview.models.Identity
    :param location: Gets or sets the location.
    :type location: str
    :ivar name: Gets or sets the name.
    :vartype name: str
    :param tags: Tags on the azure resource.
    :type tags: dict[str, str]
    :ivar type: Gets or sets the type.
    :vartype type: str
    :param cloud_connectors: Cloud connectors.
     External cloud identifier used as part of scanning configuration.
    :type cloud_connectors: ~azure.mgmt.purview.models.CloudConnectors
    :ivar created_at: Gets the time at which the entity was created.
    :vartype created_at: datetime
    :ivar created_by: Gets the creator of the entity.
    :vartype created_by: str
    :ivar created_by_object_id: Gets the creators of the entity's object id.
    :vartype created_by_object_id: str
    :ivar endpoints: The URIs that are the public endpoints of the account.
    :vartype endpoints: ~azure.mgmt.purview.models.AccountPropertiesEndpoints
    :ivar friendly_name: Gets or sets the friendly name.
    :vartype friendly_name: str
    :ivar managed_resources: Gets the resource identifiers of the managed
     resources.
    :vartype managed_resources:
     ~azure.mgmt.purview.models.AccountPropertiesManagedResources
    :param network_acls: Get the network ACLs.
    :type network_acls: ~azure.mgmt.purview.models.NetworkAcls
    :ivar private_endpoint_connections: Gets the private endpoint connections
     information.
    :vartype private_endpoint_connections:
     list[~azure.mgmt.purview.models.PrivateEndpointConnection]
    :ivar provisioning_state: Gets or sets the state of the provisioning.
     Possible values include: 'Unknown', 'Creating', 'Moving', 'Deleting',
     'SoftDeleting', 'SoftDeleted', 'Failed', 'Succeeded'
    :vartype provisioning_state: str or
     ~azure.mgmt.purview.models.ProvisioningState
    :param sku: Gets or sets the Sku.
    :type sku: ~azure.mgmt.purview.models.AccountSku
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'created_at': {'readonly': True},
        'created_by': {'readonly': True},
        'created_by_object_id': {'readonly': True},
        'endpoints': {'readonly': True},
        'friendly_name': {'readonly': True},
        'managed_resources': {'readonly': True},
        'private_endpoint_connections': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'Identity'},
        'location': {'key': 'location', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'type': {'key': 'type', 'type': 'str'},
        'cloud_connectors': {'key': 'properties.cloudConnectors', 'type': 'CloudConnectors'},
        'created_at': {'key': 'properties.createdAt', 'type': 'iso-8601'},
        'created_by': {'key': 'properties.createdBy', 'type': 'str'},
        'created_by_object_id': {'key': 'properties.createdByObjectId', 'type': 'str'},
        'endpoints': {'key': 'properties.endpoints', 'type': 'AccountPropertiesEndpoints'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'managed_resources': {'key': 'properties.managedResources', 'type': 'AccountPropertiesManagedResources'},
        'network_acls': {'key': 'properties.networkAcls', 'type': 'NetworkAcls'},
        'private_endpoint_connections': {'key': 'properties.privateEndpointConnections', 'type': '[PrivateEndpointConnection]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'AccountSku'},
    }

    def __init__(self, *, identity=None, location: str=None, tags=None, cloud_connectors=None, network_acls=None, sku=None, **kwargs) -> None:
        super(Account, self).__init__(identity=identity, location=location, tags=tags, **kwargs)
        self.cloud_connectors = cloud_connectors
        self.created_at = None
        self.created_by = None
        self.created_by_object_id = None
        self.endpoints = None
        self.friendly_name = None
        self.managed_resources = None
        self.network_acls = network_acls
        self.private_endpoint_connections = None
        self.provisioning_state = None
        self.sku = sku


class AccountEndpoints(Model):
    """The account endpoints.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar catalog: Gets the catalog endpoint.
    :vartype catalog: str
    :ivar guardian: Gets the guardian endpoint.
    :vartype guardian: str
    :ivar scan: Gets the scan endpoint.
    :vartype scan: str
    """

    _validation = {
        'catalog': {'readonly': True},
        'guardian': {'readonly': True},
        'scan': {'readonly': True},
    }

    _attribute_map = {
        'catalog': {'key': 'catalog', 'type': 'str'},
        'guardian': {'key': 'guardian', 'type': 'str'},
        'scan': {'key': 'scan', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(AccountEndpoints, self).__init__(**kwargs)
        self.catalog = None
        self.guardian = None
        self.scan = None


class AccountPropertiesEndpoints(AccountEndpoints):
    """The URIs that are the public endpoints of the account.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar catalog: Gets the catalog endpoint.
    :vartype catalog: str
    :ivar guardian: Gets the guardian endpoint.
    :vartype guardian: str
    :ivar scan: Gets the scan endpoint.
    :vartype scan: str
    """

    _validation = {
        'catalog': {'readonly': True},
        'guardian': {'readonly': True},
        'scan': {'readonly': True},
    }

    _attribute_map = {
        'catalog': {'key': 'catalog', 'type': 'str'},
        'guardian': {'key': 'guardian', 'type': 'str'},
        'scan': {'key': 'scan', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(AccountPropertiesEndpoints, self).__init__(**kwargs)


class ManagedResources(Model):
    """The managed resources in customer subscription.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar event_hub_namespace: Gets the managed event hub namespace resource
     identifier.
    :vartype event_hub_namespace: str
    :ivar resource_group: Gets the managed resource group resource identifier.
     This resource group will host resource dependencies for the account.
    :vartype resource_group: str
    :ivar storage_account: Gets the managed storage account resource
     identifier.
    :vartype storage_account: str
    """

    _validation = {
        'event_hub_namespace': {'readonly': True},
        'resource_group': {'readonly': True},
        'storage_account': {'readonly': True},
    }

    _attribute_map = {
        'event_hub_namespace': {'key': 'eventHubNamespace', 'type': 'str'},
        'resource_group': {'key': 'resourceGroup', 'type': 'str'},
        'storage_account': {'key': 'storageAccount', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(ManagedResources, self).__init__(**kwargs)
        self.event_hub_namespace = None
        self.resource_group = None
        self.storage_account = None


class AccountPropertiesManagedResources(ManagedResources):
    """Gets the resource identifiers of the managed resources.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar event_hub_namespace: Gets the managed event hub namespace resource
     identifier.
    :vartype event_hub_namespace: str
    :ivar resource_group: Gets the managed resource group resource identifier.
     This resource group will host resource dependencies for the account.
    :vartype resource_group: str
    :ivar storage_account: Gets the managed storage account resource
     identifier.
    :vartype storage_account: str
    """

    _validation = {
        'event_hub_namespace': {'readonly': True},
        'resource_group': {'readonly': True},
        'storage_account': {'readonly': True},
    }

    _attribute_map = {
        'event_hub_namespace': {'key': 'eventHubNamespace', 'type': 'str'},
        'resource_group': {'key': 'resourceGroup', 'type': 'str'},
        'storage_account': {'key': 'storageAccount', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(AccountPropertiesManagedResources, self).__init__(**kwargs)


class AccountSku(Model):
    """The Sku.

    :param capacity: Gets or sets the sku capacity. Possible values include:
     4, 16
    :type capacity: int
    :param name: Gets or sets the sku name. Possible values include:
     'Standard'
    :type name: str or ~azure.mgmt.purview.models.Name
    """

    _attribute_map = {
        'capacity': {'key': 'capacity', 'type': 'int'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, *, capacity: int=None, name=None, **kwargs) -> None:
        super(AccountSku, self).__init__(**kwargs)
        self.capacity = capacity
        self.name = name


class AccountUpdateParameters(Model):
    """The account update properties.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param cloud_connectors: Cloud connectors.
     External cloud identifier used as part of scanning configuration.
    :type cloud_connectors: ~azure.mgmt.purview.models.CloudConnectors
    :ivar created_at: Gets the time at which the entity was created.
    :vartype created_at: datetime
    :ivar created_by: Gets the creator of the entity.
    :vartype created_by: str
    :ivar created_by_object_id: Gets the creators of the entity's object id.
    :vartype created_by_object_id: str
    :ivar endpoints: The URIs that are the public endpoints of the account.
    :vartype endpoints: ~azure.mgmt.purview.models.AccountPropertiesEndpoints
    :ivar friendly_name: Gets or sets the friendly name.
    :vartype friendly_name: str
    :ivar managed_resources: Gets the resource identifiers of the managed
     resources.
    :vartype managed_resources:
     ~azure.mgmt.purview.models.AccountPropertiesManagedResources
    :param network_acls: Get the network ACLs.
    :type network_acls: ~azure.mgmt.purview.models.NetworkAcls
    :ivar private_endpoint_connections: Gets the private endpoint connections
     information.
    :vartype private_endpoint_connections:
     list[~azure.mgmt.purview.models.PrivateEndpointConnection]
    :ivar provisioning_state: Gets or sets the state of the provisioning.
     Possible values include: 'Unknown', 'Creating', 'Moving', 'Deleting',
     'SoftDeleting', 'SoftDeleted', 'Failed', 'Succeeded'
    :vartype provisioning_state: str or
     ~azure.mgmt.purview.models.ProvisioningState
    :param tags: Tags on the azure resource.
    :type tags: dict[str, str]
    """

    _validation = {
        'created_at': {'readonly': True},
        'created_by': {'readonly': True},
        'created_by_object_id': {'readonly': True},
        'endpoints': {'readonly': True},
        'friendly_name': {'readonly': True},
        'managed_resources': {'readonly': True},
        'private_endpoint_connections': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'cloud_connectors': {'key': 'properties.cloudConnectors', 'type': 'CloudConnectors'},
        'created_at': {'key': 'properties.createdAt', 'type': 'iso-8601'},
        'created_by': {'key': 'properties.createdBy', 'type': 'str'},
        'created_by_object_id': {'key': 'properties.createdByObjectId', 'type': 'str'},
        'endpoints': {'key': 'properties.endpoints', 'type': 'AccountPropertiesEndpoints'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'managed_resources': {'key': 'properties.managedResources', 'type': 'AccountPropertiesManagedResources'},
        'network_acls': {'key': 'properties.networkAcls', 'type': 'NetworkAcls'},
        'private_endpoint_connections': {'key': 'properties.privateEndpointConnections', 'type': '[PrivateEndpointConnection]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, *, cloud_connectors=None, network_acls=None, tags=None, **kwargs) -> None:
        super(AccountUpdateParameters, self).__init__(**kwargs)
        self.cloud_connectors = cloud_connectors
        self.created_at = None
        self.created_by = None
        self.created_by_object_id = None
        self.endpoints = None
        self.friendly_name = None
        self.managed_resources = None
        self.network_acls = network_acls
        self.private_endpoint_connections = None
        self.provisioning_state = None
        self.tags = tags


class CheckNameAvailabilityRequest(Model):
    """The request payload for CheckNameAvailability API.

    :param name: Resource name to verify for availability
    :type name: str
    :param type: Fully qualified resource type which includes provider
     namespace
    :type type: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, *, name: str=None, type: str=None, **kwargs) -> None:
        super(CheckNameAvailabilityRequest, self).__init__(**kwargs)
        self.name = name
        self.type = type


class CheckNameAvailabilityResult(Model):
    """The response payload for CheckNameAvailability API.

    :param message: Error message
    :type message: str
    :param name_available: Indicates if name is valid and available.
    :type name_available: bool
    :param reason: The reason the name is not available. Possible values
     include: 'Invalid', 'AlreadyExists'
    :type reason: str or ~azure.mgmt.purview.models.Reason
    """

    _attribute_map = {
        'message': {'key': 'message', 'type': 'str'},
        'name_available': {'key': 'nameAvailable', 'type': 'bool'},
        'reason': {'key': 'reason', 'type': 'str'},
    }

    def __init__(self, *, message: str=None, name_available: bool=None, reason=None, **kwargs) -> None:
        super(CheckNameAvailabilityResult, self).__init__(**kwargs)
        self.message = message
        self.name_available = name_available
        self.reason = reason


class CloudConnectors(Model):
    """Properties for configuring third party cloud connections.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar aws_external_id: AWS external identifier.
     Configured in AWS to allow use of the role arn used for scanning
    :vartype aws_external_id: str
    """

    _validation = {
        'aws_external_id': {'readonly': True},
    }

    _attribute_map = {
        'aws_external_id': {'key': 'awsExternalId', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(CloudConnectors, self).__init__(**kwargs)
        self.aws_external_id = None


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class DefaultAccountPayload(Model):
    """Payload to get and set the default account in the given scope.

    :param account_name: The name of the account that is set as the default.
    :type account_name: str
    :param resource_group_name: The resource group name of the account that is
     set as the default.
    :type resource_group_name: str
    :param scope: The scope object ID. For example, sub ID or tenant ID.
    :type scope: str
    :param scope_tenant_id: The scope tenant in which the default account is
     set.
    :type scope_tenant_id: str
    :param scope_type: The scope where the default account is set. Possible
     values include: 'Tenant', 'Subscription'
    :type scope_type: str or ~azure.mgmt.purview.models.ScopeType
    :param subscription_id: The subscription ID of the account that is set as
     the default.
    :type subscription_id: str
    """

    _attribute_map = {
        'account_name': {'key': 'accountName', 'type': 'str'},
        'resource_group_name': {'key': 'resourceGroupName', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
        'scope_tenant_id': {'key': 'scopeTenantId', 'type': 'str'},
        'scope_type': {'key': 'scopeType', 'type': 'str'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
    }

    def __init__(self, *, account_name: str=None, resource_group_name: str=None, scope: str=None, scope_tenant_id: str=None, scope_type=None, subscription_id: str=None, **kwargs) -> None:
        super(DefaultAccountPayload, self).__init__(**kwargs)
        self.account_name = account_name
        self.resource_group_name = resource_group_name
        self.scope = scope
        self.scope_tenant_id = scope_tenant_id
        self.scope_type = scope_type
        self.subscription_id = subscription_id


class ProxyResource(Model):
    """Proxy Azure Resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Gets or sets the identifier.
    :vartype id: str
    :ivar name: Gets or sets the name.
    :vartype name: str
    :ivar type: Gets or sets the type.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(ProxyResource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class DeletedAccount(ProxyResource):
    """Soft Deleted Account resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Gets or sets the identifier.
    :vartype id: str
    :ivar name: Gets or sets the name.
    :vartype name: str
    :ivar type: Gets or sets the type.
    :vartype type: str
    :ivar account_id: Gets the account identifier associated with resource.
    :vartype account_id: str
    :ivar deleted_by: Gets the user identifier that deleted resource.
    :vartype deleted_by: str
    :ivar deletion_date: Gets the time at which the resource was soft deleted.
    :vartype deletion_date: datetime
    :ivar location: Gets the resource location.
    :vartype location: str
    :ivar scheduled_purge_date: Gets the scheduled purge datetime.
    :vartype scheduled_purge_date: datetime
    :ivar tags: Gets the account tags.
    :vartype tags: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'account_id': {'readonly': True},
        'deleted_by': {'readonly': True},
        'deletion_date': {'readonly': True},
        'location': {'readonly': True},
        'scheduled_purge_date': {'readonly': True},
        'tags': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'account_id': {'key': 'properties.accountId', 'type': 'str'},
        'deleted_by': {'key': 'properties.deletedBy', 'type': 'str'},
        'deletion_date': {'key': 'properties.deletionDate', 'type': 'iso-8601'},
        'location': {'key': 'properties.location', 'type': 'str'},
        'scheduled_purge_date': {'key': 'properties.scheduledPurgeDate', 'type': 'iso-8601'},
        'tags': {'key': 'properties.tags', 'type': '{str}'},
    }

    def __init__(self, **kwargs) -> None:
        super(DeletedAccount, self).__init__(**kwargs)
        self.account_id = None
        self.deleted_by = None
        self.deletion_date = None
        self.location = None
        self.scheduled_purge_date = None
        self.tags = None


class DeletedAccountList(Model):
    """Paged list of soft deleted account resources.

    All required parameters must be populated in order to send to Azure.

    :param count: Total item count.
    :type count: long
    :param next_link: The Url of next result page.
    :type next_link: str
    :param value: Required. Collection of items of type results.
    :type value: list[~azure.mgmt.purview.models.DeletedAccount]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'count': {'key': 'count', 'type': 'long'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[DeletedAccount]'},
    }

    def __init__(self, *, value, count: int=None, next_link: str=None, **kwargs) -> None:
        super(DeletedAccountList, self).__init__(**kwargs)
        self.count = count
        self.next_link = next_link
        self.value = value


class DeletedAccountPropertiesModel(Model):
    """The soft deleted account properties.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar account_id: Gets the account identifier associated with resource.
    :vartype account_id: str
    :ivar deleted_by: Gets the user identifier that deleted resource.
    :vartype deleted_by: str
    :ivar deletion_date: Gets the time at which the resource was soft deleted.
    :vartype deletion_date: datetime
    :ivar location: Gets the resource location.
    :vartype location: str
    :ivar scheduled_purge_date: Gets the scheduled purge datetime.
    :vartype scheduled_purge_date: datetime
    :ivar tags: Gets the account tags.
    :vartype tags: dict[str, str]
    """

    _validation = {
        'account_id': {'readonly': True},
        'deleted_by': {'readonly': True},
        'deletion_date': {'readonly': True},
        'location': {'readonly': True},
        'scheduled_purge_date': {'readonly': True},
        'tags': {'readonly': True},
    }

    _attribute_map = {
        'account_id': {'key': 'accountId', 'type': 'str'},
        'deleted_by': {'key': 'deletedBy', 'type': 'str'},
        'deletion_date': {'key': 'deletionDate', 'type': 'iso-8601'},
        'location': {'key': 'location', 'type': 'str'},
        'scheduled_purge_date': {'key': 'scheduledPurgeDate', 'type': 'iso-8601'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, **kwargs) -> None:
        super(DeletedAccountPropertiesModel, self).__init__(**kwargs)
        self.account_id = None
        self.deleted_by = None
        self.deletion_date = None
        self.location = None
        self.scheduled_purge_date = None
        self.tags = None


class DimensionProperties(Model):
    """properties for dimension.

    :param display_name: localized display name of the dimension to customer
    :type display_name: str
    :param name: dimension name
    :type name: str
    :param to_be_exported_for_customer: flag indicating whether this dimension
     should be included to the customer in Azure Monitor logs (aka Shoebox)
    :type to_be_exported_for_customer: bool
    """

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'to_be_exported_for_customer': {'key': 'toBeExportedForCustomer', 'type': 'bool'},
    }

    def __init__(self, *, display_name: str=None, name: str=None, to_be_exported_for_customer: bool=None, **kwargs) -> None:
        super(DimensionProperties, self).__init__(**kwargs)
        self.display_name = display_name
        self.name = name
        self.to_be_exported_for_customer = to_be_exported_for_customer


class ErrorModel(Model):
    """Default error model.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar code: Gets or sets the code.
    :vartype code: str
    :ivar details: Gets or sets the details.
    :vartype details: list[~azure.mgmt.purview.models.ErrorModel]
    :ivar message: Gets or sets the messages.
    :vartype message: str
    :ivar target: Gets or sets the target.
    :vartype target: str
    """

    _validation = {
        'code': {'readonly': True},
        'details': {'readonly': True},
        'message': {'readonly': True},
        'target': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorModel]'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(ErrorModel, self).__init__(**kwargs)
        self.code = None
        self.details = None
        self.message = None
        self.target = None


class ErrorResponseModel(Model):
    """Default error response model.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar error: Gets or sets the error.
    :vartype error: ~azure.mgmt.purview.models.ErrorResponseModelError
    """

    _validation = {
        'error': {'readonly': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorResponseModelError'},
    }

    def __init__(self, **kwargs) -> None:
        super(ErrorResponseModel, self).__init__(**kwargs)
        self.error = None


class ErrorResponseModelException(HttpOperationError):
    """Server responsed with exception of type: 'ErrorResponseModel'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorResponseModelException, self).__init__(deserialize, response, 'ErrorResponseModel', *args)


class ErrorResponseModelError(ErrorModel):
    """Gets or sets the error.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar code: Gets or sets the code.
    :vartype code: str
    :ivar details: Gets or sets the details.
    :vartype details: list[~azure.mgmt.purview.models.ErrorModel]
    :ivar message: Gets or sets the messages.
    :vartype message: str
    :ivar target: Gets or sets the target.
    :vartype target: str
    """

    _validation = {
        'code': {'readonly': True},
        'details': {'readonly': True},
        'message': {'readonly': True},
        'target': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorModel]'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(ErrorResponseModelError, self).__init__(**kwargs)


class Identity(Model):
    """The Managed Identity of the resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar principal_id: Service principal object Id
    :vartype principal_id: str
    :ivar tenant_id: Tenant Id
    :vartype tenant_id: str
    :param type: Identity Type. Possible values include: 'SystemAssigned'
    :type type: str or ~azure.mgmt.purview.models.Type
    """

    _validation = {
        'principal_id': {'readonly': True},
        'tenant_id': {'readonly': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, *, type=None, **kwargs) -> None:
        super(Identity, self).__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = type


class NetworkAcls(Model):
    """The Network ACLs.

    :param default_action: Gets or sets the default behavior of network ACLs.
     Possible values include: 'Allow', 'Deny'
    :type default_action: str or ~azure.mgmt.purview.models.DefaultAction
    """

    _attribute_map = {
        'default_action': {'key': 'defaultAction', 'type': 'str'},
    }

    def __init__(self, *, default_action=None, **kwargs) -> None:
        super(NetworkAcls, self).__init__(**kwargs)
        self.default_action = default_action


class Operation(Model):
    """Operation resource.

    :param display: Properties on the operation
    :type display: ~azure.mgmt.purview.models.OperationDisplay
    :param is_data_action: Whether operation is a data action
    :type is_data_action: bool
    :param name: Operation name for display purposes
    :type name: str
    :param origin: origin of the operation
    :type origin: str
    :param service_specification: meta service specification
    :type service_specification:
     ~azure.mgmt.purview.models.OperationMetaServiceSpecification
    """

    _attribute_map = {
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'is_data_action': {'key': 'isDataAction', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
        'origin': {'key': 'origin', 'type': 'str'},
        'service_specification': {'key': 'properties.serviceSpecification', 'type': 'OperationMetaServiceSpecification'},
    }

    def __init__(self, *, display=None, is_data_action: bool=None, name: str=None, origin: str=None, service_specification=None, **kwargs) -> None:
        super(Operation, self).__init__(**kwargs)
        self.display = display
        self.is_data_action = is_data_action
        self.name = name
        self.origin = origin
        self.service_specification = service_specification


class OperationDisplay(Model):
    """The response model for get operation properties.

    :param description: Description of the operation for display purposes
    :type description: str
    :param operation: Name of the operation for display purposes
    :type operation: str
    :param provider: Name of the provider for display purposes
    :type provider: str
    :param resource: Name of the resource type for display purposes
    :type resource: str
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
    }

    def __init__(self, *, description: str=None, operation: str=None, provider: str=None, resource: str=None, **kwargs) -> None:
        super(OperationDisplay, self).__init__(**kwargs)
        self.description = description
        self.operation = operation
        self.provider = provider
        self.resource = resource


class OperationMetaLogSpecification(Model):
    """log specifications for operation api.

    :param blob_duration: blob duration of the log
    :type blob_duration: str
    :param display_name: localized name of the log category
    :type display_name: str
    :param name: name of the log category
    :type name: str
    """

    _attribute_map = {
        'blob_duration': {'key': 'blobDuration', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, *, blob_duration: str=None, display_name: str=None, name: str=None, **kwargs) -> None:
        super(OperationMetaLogSpecification, self).__init__(**kwargs)
        self.blob_duration = blob_duration
        self.display_name = display_name
        self.name = name


class OperationMetaMetricSpecification(Model):
    """metric specifications for the operation.

    :param aggregation_type: aggregation type of metric
    :type aggregation_type: str
    :param dimensions: properties for dimension
    :type dimensions: list[~azure.mgmt.purview.models.DimensionProperties]
    :param display_description: description of the metric
    :type display_description: str
    :param display_name: localized name of the metric
    :type display_name: str
    :param enable_regional_mdm_account: enable regional mdm account
    :type enable_regional_mdm_account: str
    :param internal_metric_name: internal metric name
    :type internal_metric_name: str
    :param name: name of the metric
    :type name: str
    :param resource_id_dimension_name_override: dimension name use to replace
     resource id if specified
    :type resource_id_dimension_name_override: str
    :param source_mdm_namespace: Metric namespace.
     Only set the namespace if different from the default value,
     leaving it empty makes it use the value from the ARM manifest.
    :type source_mdm_namespace: str
    :param supported_aggregation_types: supported aggregation types
    :type supported_aggregation_types: list[str]
    :param supported_time_grain_types: supported time grain types
    :type supported_time_grain_types: list[str]
    :param unit: units for the metric
    :type unit: str
    """

    _attribute_map = {
        'aggregation_type': {'key': 'aggregationType', 'type': 'str'},
        'dimensions': {'key': 'dimensions', 'type': '[DimensionProperties]'},
        'display_description': {'key': 'displayDescription', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'enable_regional_mdm_account': {'key': 'enableRegionalMdmAccount', 'type': 'str'},
        'internal_metric_name': {'key': 'internalMetricName', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'resource_id_dimension_name_override': {'key': 'resourceIdDimensionNameOverride', 'type': 'str'},
        'source_mdm_namespace': {'key': 'sourceMdmNamespace', 'type': 'str'},
        'supported_aggregation_types': {'key': 'supportedAggregationTypes', 'type': '[str]'},
        'supported_time_grain_types': {'key': 'supportedTimeGrainTypes', 'type': '[str]'},
        'unit': {'key': 'unit', 'type': 'str'},
    }

    def __init__(self, *, aggregation_type: str=None, dimensions=None, display_description: str=None, display_name: str=None, enable_regional_mdm_account: str=None, internal_metric_name: str=None, name: str=None, resource_id_dimension_name_override: str=None, source_mdm_namespace: str=None, supported_aggregation_types=None, supported_time_grain_types=None, unit: str=None, **kwargs) -> None:
        super(OperationMetaMetricSpecification, self).__init__(**kwargs)
        self.aggregation_type = aggregation_type
        self.dimensions = dimensions
        self.display_description = display_description
        self.display_name = display_name
        self.enable_regional_mdm_account = enable_regional_mdm_account
        self.internal_metric_name = internal_metric_name
        self.name = name
        self.resource_id_dimension_name_override = resource_id_dimension_name_override
        self.source_mdm_namespace = source_mdm_namespace
        self.supported_aggregation_types = supported_aggregation_types
        self.supported_time_grain_types = supported_time_grain_types
        self.unit = unit


class OperationMetaServiceSpecification(Model):
    """The operation meta service specification.

    :param log_specifications: log specifications for the operation
    :type log_specifications:
     list[~azure.mgmt.purview.models.OperationMetaLogSpecification]
    :param metric_specifications: metric specifications for the operation
    :type metric_specifications:
     list[~azure.mgmt.purview.models.OperationMetaMetricSpecification]
    """

    _attribute_map = {
        'log_specifications': {'key': 'logSpecifications', 'type': '[OperationMetaLogSpecification]'},
        'metric_specifications': {'key': 'metricSpecifications', 'type': '[OperationMetaMetricSpecification]'},
    }

    def __init__(self, *, log_specifications=None, metric_specifications=None, **kwargs) -> None:
        super(OperationMetaServiceSpecification, self).__init__(**kwargs)
        self.log_specifications = log_specifications
        self.metric_specifications = metric_specifications


class PrivateEndpoint(Model):
    """A private endpoint class.

    :param id: The private endpoint identifier.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(self, *, id: str=None, **kwargs) -> None:
        super(PrivateEndpoint, self).__init__(**kwargs)
        self.id = id


class PrivateEndpointConnection(ProxyResource):
    """A private endpoint connection class.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Gets or sets the identifier.
    :vartype id: str
    :ivar name: Gets or sets the name.
    :vartype name: str
    :ivar type: Gets or sets the type.
    :vartype type: str
    :param private_endpoint: The private endpoint information.
    :type private_endpoint: ~azure.mgmt.purview.models.PrivateEndpoint
    :param private_link_service_connection_state: The private link service
     connection state.
    :type private_link_service_connection_state:
     ~azure.mgmt.purview.models.PrivateLinkServiceConnectionState
    :ivar provisioning_state: The provisioning state.
    :vartype provisioning_state: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'private_endpoint': {'key': 'properties.privateEndpoint', 'type': 'PrivateEndpoint'},
        'private_link_service_connection_state': {'key': 'properties.privateLinkServiceConnectionState', 'type': 'PrivateLinkServiceConnectionState'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(self, *, private_endpoint=None, private_link_service_connection_state=None, **kwargs) -> None:
        super(PrivateEndpointConnection, self).__init__(**kwargs)
        self.private_endpoint = private_endpoint
        self.private_link_service_connection_state = private_link_service_connection_state
        self.provisioning_state = None


class PrivateLinkResource(ProxyResource):
    """A privately linkable resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Gets or sets the identifier.
    :vartype id: str
    :ivar name: Gets or sets the name.
    :vartype name: str
    :ivar type: Gets or sets the type.
    :vartype type: str
    :ivar group_id: The private link resource group identifier.
    :vartype group_id: str
    :ivar required_members: This translates to how many Private IPs should be
     created for each privately linkable resource.
    :vartype required_members: list[str]
    :ivar required_zone_names: The required zone names for private link
     resource.
    :vartype required_zone_names: list[str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'group_id': {'readonly': True},
        'required_members': {'readonly': True},
        'required_zone_names': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'group_id': {'key': 'properties.groupId', 'type': 'str'},
        'required_members': {'key': 'properties.requiredMembers', 'type': '[str]'},
        'required_zone_names': {'key': 'properties.requiredZoneNames', 'type': '[str]'},
    }

    def __init__(self, **kwargs) -> None:
        super(PrivateLinkResource, self).__init__(**kwargs)
        self.group_id = None
        self.required_members = None
        self.required_zone_names = None


class PrivateLinkServiceConnectionState(Model):
    """The private link service connection state.

    :param actions_required: The required actions.
    :type actions_required: str
    :param description: The description.
    :type description: str
    :param status: The status. Possible values include: 'Unknown', 'Pending',
     'Approved', 'Rejected', 'Disconnected'
    :type status: str or ~azure.mgmt.purview.models.Status
    """

    _attribute_map = {
        'actions_required': {'key': 'actionsRequired', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(self, *, actions_required: str=None, description: str=None, status=None, **kwargs) -> None:
        super(PrivateLinkServiceConnectionState, self).__init__(**kwargs)
        self.actions_required = actions_required
        self.description = description
        self.status = status
