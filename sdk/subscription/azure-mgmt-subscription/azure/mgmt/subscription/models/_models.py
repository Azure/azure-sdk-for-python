# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class AdPrincipal(Model):
    """Active Directory Principal whoâ€™ll get owner access on the new subscription.

    All required parameters must be populated in order to send to Azure.

    :param object_id: Required. Object id of the Principal
    :type object_id: str
    """

    _validation = {
        'object_id': {'required': True},
    }

    _attribute_map = {
        'object_id': {'key': 'objectId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AdPrincipal, self).__init__(**kwargs)
        self.object_id = kwargs.get('object_id', None)


class CanceledSubscriptionId(Model):
    """The ID of the canceled subscription.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar value: The ID of the canceled subscription
    :vartype value: str
    """

    _validation = {
        'value': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(CanceledSubscriptionId, self).__init__(**kwargs)
        self.value = None


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class EnabledSubscriptionId(Model):
    """The ID of the subscriptions that is being enabled.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar value: The ID of the subscriptions that is being enabled
    :vartype value: str
    """

    _validation = {
        'value': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(EnabledSubscriptionId, self).__init__(**kwargs)
        self.value = None


class ErrorResponse(Model):
    """Describes the format of Error response.

    :param code: Error code
    :type code: str
    :param message: Error message indicating why the operation failed.
    :type message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ErrorResponse, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)


class ErrorResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ErrorResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorResponseException, self).__init__(deserialize, response, 'ErrorResponse', *args)


class ModernCspSubscriptionCreationParameters(Model):
    """The parameters required to create a new CSP subscription.

    All required parameters must be populated in order to send to Azure.

    :param display_name: Required. The friendly name of the subscription.
    :type display_name: str
    :param sku_id: Required. The SKU ID of the Azure plan. Azure plan
     determines the pricing and service-level agreement of the subscription.
     Use 001 for Microsoft Azure Plan and 002 for Microsoft Azure Plan for
     DevTest.
    :type sku_id: str
    :param reseller_id: Reseller ID, basically MPN Id.
    :type reseller_id: str
    """

    _validation = {
        'display_name': {'required': True},
        'sku_id': {'required': True},
    }

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'sku_id': {'key': 'skuId', 'type': 'str'},
        'reseller_id': {'key': 'resellerId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ModernCspSubscriptionCreationParameters, self).__init__(**kwargs)
        self.display_name = kwargs.get('display_name', None)
        self.sku_id = kwargs.get('sku_id', None)
        self.reseller_id = kwargs.get('reseller_id', None)


class ModernSubscriptionCreationParameters(Model):
    """The parameters required to create a new subscription.

    All required parameters must be populated in order to send to Azure.

    :param display_name: Required. The friendly name of the subscription.
    :type display_name: str
    :param sku_id: Required. The SKU ID of the Azure plan. Azure plan
     determines the pricing and service-level agreement of the subscription.
     Use 001 for Microsoft Azure Plan and 002 for Microsoft Azure Plan for
     DevTest.
    :type sku_id: str
    :param cost_center: If set, the cost center will show up on the Azure
     usage and charges file.
    :type cost_center: str
    :param owner: If specified, the AD principal will get owner access to the
     subscription, along with the user who is performing the create
     subscription operation
    :type owner: ~azure.mgmt.subscription.models.AdPrincipal
    :param management_group_id: The identifier of the management group to
     which this subscription will be associated.
    :type management_group_id: str
    """

    _validation = {
        'display_name': {'required': True},
        'sku_id': {'required': True},
    }

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'sku_id': {'key': 'skuId', 'type': 'str'},
        'cost_center': {'key': 'costCenter', 'type': 'str'},
        'owner': {'key': 'owner', 'type': 'AdPrincipal'},
        'management_group_id': {'key': 'managementGroupId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ModernSubscriptionCreationParameters, self).__init__(**kwargs)
        self.display_name = kwargs.get('display_name', None)
        self.sku_id = kwargs.get('sku_id', None)
        self.cost_center = kwargs.get('cost_center', None)
        self.owner = kwargs.get('owner', None)
        self.management_group_id = kwargs.get('management_group_id', None)


class Operation(Model):
    """REST API operation.

    :param name: Operation name: {provider}/{resource}/{operation}
    :type name: str
    :param display: The object that represents the operation.
    :type display: ~azure.mgmt.subscription.models.OperationDisplay
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
    }

    def __init__(self, **kwargs):
        super(Operation, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display = kwargs.get('display', None)


class OperationDisplay(Model):
    """The object that represents the operation.

    :param provider: Service provider: Microsoft.Subscription
    :type provider: str
    :param resource: Resource on which the operation is performed: Profile,
     endpoint, etc.
    :type resource: str
    :param operation: Operation type: Read, write, delete, etc.
    :type operation: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = kwargs.get('provider', None)
        self.resource = kwargs.get('resource', None)
        self.operation = kwargs.get('operation', None)


class OperationListResult(Model):
    """Result of the request to list operations. It contains a list of operations
    and a URL link to get the next set of results.

    :param value: List of operations.
    :type value: list[~azure.mgmt.subscription.models.Operation]
    :param next_link: URL to get the next set of operation list results if
     there are any.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(OperationListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class RenamedSubscriptionId(Model):
    """The ID of the subscriptions that is being renamed.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar value: The ID of the subscriptions that is being renamed
    :vartype value: str
    """

    _validation = {
        'value': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(RenamedSubscriptionId, self).__init__(**kwargs)
        self.value = None


class SubscriptionCreationParameters(Model):
    """Subscription Creation Parameters required to create a new Azure
    subscription.

    :param display_name: The display name of the subscription.
    :type display_name: str
    :param management_group_id: The Management Group Id.
    :type management_group_id: str
    :param owners: The list of principals that should be granted Owner access
     on the subscription. Principals should be of type User, Service Principal
     or Security Group.
    :type owners: list[~azure.mgmt.subscription.models.AdPrincipal]
    :param offer_type: The offer type of the subscription. For example,
     MS-AZR-0017P (EnterpriseAgreement) and MS-AZR-0148P (EnterpriseAgreement
     devTest) are available. Only valid when creating a subscription in a
     enrollment account scope. Possible values include: 'MS-AZR-0017P',
     'MS-AZR-0148P'
    :type offer_type: str or ~azure.mgmt.subscription.models.OfferType
    """

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'management_group_id': {'key': 'managementGroupId', 'type': 'str'},
        'owners': {'key': 'owners', 'type': '[AdPrincipal]'},
        'offer_type': {'key': 'offerType', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SubscriptionCreationParameters, self).__init__(**kwargs)
        self.display_name = kwargs.get('display_name', None)
        self.management_group_id = kwargs.get('management_group_id', None)
        self.owners = kwargs.get('owners', None)
        self.offer_type = kwargs.get('offer_type', None)


class SubscriptionCreationResult(Model):
    """The created subscription object.

    :param subscription_link: The link to the new subscription. Use this link
     to check the status of subscription creation operation.
    :type subscription_link: str
    """

    _attribute_map = {
        'subscription_link': {'key': 'subscriptionLink', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SubscriptionCreationResult, self).__init__(**kwargs)
        self.subscription_link = kwargs.get('subscription_link', None)


class SubscriptionName(Model):
    """The new name of the subscription.

    :param subscription_name: New subscription name
    :type subscription_name: str
    """

    _attribute_map = {
        'subscription_name': {'key': 'subscriptionName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SubscriptionName, self).__init__(**kwargs)
        self.subscription_name = kwargs.get('subscription_name', None)
