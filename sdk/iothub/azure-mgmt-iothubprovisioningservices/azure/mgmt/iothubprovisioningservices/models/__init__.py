# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=wrong-import-position

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ._patch import *  # pylint: disable=unused-wildcard-import


from ._models import (  # type: ignore
    AsyncOperationResult,
    CertificateProperties,
    CertificateResponse,
    DeviceRegistryNamespaceDescription,
    ErrorAdditionalInfo,
    ErrorDetail,
    ErrorDetails,
    ErrorMessage,
    ErrorResponse,
    GroupIdInformation,
    GroupIdInformationProperties,
    IotDpsPropertiesDescription,
    IotDpsSkuDefinition,
    IotDpsSkuInfo,
    IotHubDefinitionDescription,
    IpFilterRule,
    ManagedServiceIdentity,
    NameAvailabilityInfo,
    Operation,
    OperationDisplay,
    OperationInputs,
    PrivateEndpoint,
    PrivateEndpointConnection,
    PrivateEndpointConnectionProperties,
    PrivateLinkServiceConnectionState,
    ProvisioningServiceDescription,
    ProxyResource,
    Resource,
    SharedAccessSignatureAuthorizationRuleAccessRightsDescription,
    SystemData,
    TagsResource,
    TrackedResource,
    UserAssignedIdentity,
    VerificationCodeRequest,
    VerificationCodeResponse,
    VerificationCodeResponseProperties,
)

from ._enums import (  # type: ignore
    AccessRightsDescription,
    AllocationPolicy,
    CertificatePurpose,
    CreatedByType,
    DeviceRegistryNamespaceAuthenticationType,
    IotDpsSku,
    IpFilterActionType,
    IpFilterTargetType,
    ManagedServiceIdentityType,
    NameUnavailabilityReason,
    PrivateLinkServiceConnectionStatus,
    PublicNetworkAccess,
    State,
)
from ._patch import __all__ as _patch_all
from ._patch import *
from ._patch import patch_sdk as _patch_sdk

__all__ = [
    "AsyncOperationResult",
    "CertificateProperties",
    "CertificateResponse",
    "DeviceRegistryNamespaceDescription",
    "ErrorAdditionalInfo",
    "ErrorDetail",
    "ErrorDetails",
    "ErrorMessage",
    "ErrorResponse",
    "GroupIdInformation",
    "GroupIdInformationProperties",
    "IotDpsPropertiesDescription",
    "IotDpsSkuDefinition",
    "IotDpsSkuInfo",
    "IotHubDefinitionDescription",
    "IpFilterRule",
    "ManagedServiceIdentity",
    "NameAvailabilityInfo",
    "Operation",
    "OperationDisplay",
    "OperationInputs",
    "PrivateEndpoint",
    "PrivateEndpointConnection",
    "PrivateEndpointConnectionProperties",
    "PrivateLinkServiceConnectionState",
    "ProvisioningServiceDescription",
    "ProxyResource",
    "Resource",
    "SharedAccessSignatureAuthorizationRuleAccessRightsDescription",
    "SystemData",
    "TagsResource",
    "TrackedResource",
    "UserAssignedIdentity",
    "VerificationCodeRequest",
    "VerificationCodeResponse",
    "VerificationCodeResponseProperties",
    "AccessRightsDescription",
    "AllocationPolicy",
    "CertificatePurpose",
    "CreatedByType",
    "DeviceRegistryNamespaceAuthenticationType",
    "IotDpsSku",
    "IpFilterActionType",
    "IpFilterTargetType",
    "ManagedServiceIdentityType",
    "NameUnavailabilityReason",
    "PrivateLinkServiceConnectionStatus",
    "PublicNetworkAccess",
    "State",
]
__all__.extend([p for p in _patch_all if p not in __all__])  # pyright: ignore
_patch_sdk()
