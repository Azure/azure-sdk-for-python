# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class ConfigurationProfile(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """A value indicating configuration profile.
    """

    AZURE_VIRTUAL_MACHINE_BEST_PRACTICES_DEV_TEST = "Azure virtual machine best practices – Dev/Test"
    AZURE_VIRTUAL_MACHINE_BEST_PRACTICES_PRODUCTION = "Azure virtual machine best practices – Production"

class EnableRealTimeProtection(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Enables or disables Real Time Protection
    """

    TRUE = "True"
    FALSE = "False"

class ProvisioningState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The state of onboarding, which only appears in the response.
    """

    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    CREATED = "Created"

class ResourceIdentityType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of identity used for the Automanage account. Currently, the only supported type is
    'SystemAssigned', which implicitly creates an identity.
    """

    SYSTEM_ASSIGNED = "SystemAssigned"
    NONE = "None"

class RunScheduledScan(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Enables or disables a periodic scan for antimalware
    """

    TRUE = "True"
    FALSE = "False"

class ScanType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Type of scheduled scan
    """

    QUICK = "Quick"
    FULL = "Full"

class UpdateStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The state of compliance, which only appears in the response.
    """

    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    CREATED = "Created"
