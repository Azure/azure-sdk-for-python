# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class Resource(Model):
    """The core properties of ARM resources.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: ARM resource id of the Automanage assignment.
    :vartype id: str
    :ivar name: Name of the Automanage assignment.
    :vartype name: str
    :ivar location: Region where the VM is located.
    :vartype location: str
    :ivar type: The type of the resource.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'location': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.location = None
        self.type = None


class TrackedResource(Resource):
    """The resource model definition for a ARM tracked top level resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: ARM resource id of the Automanage assignment.
    :vartype id: str
    :ivar name: Name of the Automanage assignment.
    :vartype name: str
    :ivar location: Region where the VM is located.
    :vartype location: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'location': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(TrackedResource, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)


class Account(TrackedResource):
    """Definition of the Automanage account.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: ARM resource id of the Automanage assignment.
    :vartype id: str
    :ivar name: Name of the Automanage assignment.
    :vartype name: str
    :ivar location: Region where the VM is located.
    :vartype location: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param identity: The identity of the Automanage account.
    :type identity: ~azure.mgmt.automanage.models.AccountIdentity
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'location': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'identity': {'key': 'identity', 'type': 'AccountIdentity'},
    }

    def __init__(self, **kwargs):
        super(Account, self).__init__(**kwargs)
        self.identity = kwargs.get('identity', None)


class AccountIdentity(Model):
    """Identity for the Automanage account.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar principal_id: The principal id of Automanage account identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant id associated with the Automanage account.
    :vartype tenant_id: str
    :param type: The type of identity used for the Automanage account.
     Currently, the only supported type is 'SystemAssigned', which implicitly
     creates an identity. Possible values include: 'SystemAssigned', 'None'
    :type type: str or ~azure.mgmt.automanage.models.ResourceIdentityType
    """

    _validation = {
        'principal_id': {'readonly': True},
        'tenant_id': {'readonly': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'ResourceIdentityType'},
    }

    def __init__(self, **kwargs):
        super(AccountIdentity, self).__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = kwargs.get('type', None)


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class ProxyResource(Resource):
    """ARM proxy resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: ARM resource id of the Automanage assignment.
    :vartype id: str
    :ivar name: Name of the Automanage assignment.
    :vartype name: str
    :ivar location: Region where the VM is located.
    :vartype location: str
    :ivar type: The type of the resource.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'location': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ProxyResource, self).__init__(**kwargs)


class ConfigurationProfileAssignment(ProxyResource):
    """Configuration profile assignment is an association between a VM and
    automanage profile configuration.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: ARM resource id of the Automanage assignment.
    :vartype id: str
    :ivar name: Name of the Automanage assignment.
    :vartype name: str
    :ivar location: Region where the VM is located.
    :vartype location: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param properties: Properties of the configuration profile assignment.
    :type properties:
     ~azure.mgmt.automanage.models.ConfigurationProfileAssignmentProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'location': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'ConfigurationProfileAssignmentProperties'},
    }

    def __init__(self, **kwargs):
        super(ConfigurationProfileAssignment, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)


class ConfigurationProfileAssignmentCompliance(Model):
    """The compliance status for the configuration profile assignment.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar update_status: The state of compliance, which only appears in the
     response. Possible values include: 'Succeeded', 'Failed', 'Created'
    :vartype update_status: str or ~azure.mgmt.automanage.models.UpdateStatus
    """

    _validation = {
        'update_status': {'readonly': True},
    }

    _attribute_map = {
        'update_status': {'key': 'updateStatus', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ConfigurationProfileAssignmentCompliance, self).__init__(**kwargs)
        self.update_status = None


class ConfigurationProfileAssignmentProperties(Model):
    """Automanage configuration profile assignment properties.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param configuration_profile: A value indicating configuration profile.
     Possible values include: 'Azure Best Practices - TestDev', 'Azure Best
     Practices - Prod'
    :type configuration_profile: str or
     ~azure.mgmt.automanage.models.ConfigurationProfile
    :param target_id: The target VM resource URI
    :type target_id: str
    :param account_id: The Automanage account ARM Resource URI
    :type account_id: str
    :param configuration_profile_preference_id: The configuration profile
     custom preferences ARM resource URI
    :type configuration_profile_preference_id: str
    :ivar provisioning_status: The state of onboarding, which only appears in
     the response. Possible values include: 'Succeeded', 'Failed', 'Created'
    :vartype provisioning_status: str or
     ~azure.mgmt.automanage.models.ProvisioningStatus
    :param compliance: The configuration setting for the configuration
     profile.
    :type compliance:
     ~azure.mgmt.automanage.models.ConfigurationProfileAssignmentCompliance
    """

    _validation = {
        'provisioning_status': {'readonly': True},
    }

    _attribute_map = {
        'configuration_profile': {'key': 'configurationProfile', 'type': 'str'},
        'target_id': {'key': 'targetId', 'type': 'str'},
        'account_id': {'key': 'accountId', 'type': 'str'},
        'configuration_profile_preference_id': {'key': 'configurationProfilePreferenceId', 'type': 'str'},
        'provisioning_status': {'key': 'provisioningStatus', 'type': 'str'},
        'compliance': {'key': 'compliance', 'type': 'ConfigurationProfileAssignmentCompliance'},
    }

    def __init__(self, **kwargs):
        super(ConfigurationProfileAssignmentProperties, self).__init__(**kwargs)
        self.configuration_profile = kwargs.get('configuration_profile', None)
        self.target_id = kwargs.get('target_id', None)
        self.account_id = kwargs.get('account_id', None)
        self.configuration_profile_preference_id = kwargs.get('configuration_profile_preference_id', None)
        self.provisioning_status = None
        self.compliance = kwargs.get('compliance', None)


class ConfigurationProfilePreference(TrackedResource):
    """Definition of the configuration profile preference.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: ARM resource id of the Automanage assignment.
    :vartype id: str
    :ivar name: Name of the Automanage assignment.
    :vartype name: str
    :ivar location: Region where the VM is located.
    :vartype location: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param properties: Properties of the configuration profile preference.
    :type properties:
     ~azure.mgmt.automanage.models.ConfigurationProfilePreferenceProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'location': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': 'ConfigurationProfilePreferenceProperties'},
    }

    def __init__(self, **kwargs):
        super(ConfigurationProfilePreference, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)


class ConfigurationProfilePreferenceAntiMalware(Model):
    """Automanage configuration profile Antimalware preferences.

    :param enable_real_time_protection: Enables or disables Real Time
     Protection. Possible values include: 'True', 'False'
    :type enable_real_time_protection: str or
     ~azure.mgmt.automanage.models.EnableRealTimeProtection
    :param exclusions: Extensions, Paths and Processes that must be excluded
     from scan
    :type exclusions: object
    :param run_scheduled_scan: Enables or disables a periodic scan for
     antimalware. Possible values include: 'True', 'False'
    :type run_scheduled_scan: str or
     ~azure.mgmt.automanage.models.RunScheduledScan
    :param scan_type: Type of scheduled scan. Possible values include:
     'Quick', 'Full'
    :type scan_type: str or ~azure.mgmt.automanage.models.ScanType
    :param scan_day: Schedule scan settings day
    :type scan_day: str
    :param scan_time_in_minutes: Schedule scan settings time
    :type scan_time_in_minutes: str
    """

    _attribute_map = {
        'enable_real_time_protection': {'key': 'enableRealTimeProtection', 'type': 'str'},
        'exclusions': {'key': 'exclusions', 'type': 'object'},
        'run_scheduled_scan': {'key': 'runScheduledScan', 'type': 'str'},
        'scan_type': {'key': 'scanType', 'type': 'str'},
        'scan_day': {'key': 'scanDay', 'type': 'str'},
        'scan_time_in_minutes': {'key': 'scanTimeInMinutes', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ConfigurationProfilePreferenceAntiMalware, self).__init__(**kwargs)
        self.enable_real_time_protection = kwargs.get('enable_real_time_protection', None)
        self.exclusions = kwargs.get('exclusions', None)
        self.run_scheduled_scan = kwargs.get('run_scheduled_scan', None)
        self.scan_type = kwargs.get('scan_type', None)
        self.scan_day = kwargs.get('scan_day', None)
        self.scan_time_in_minutes = kwargs.get('scan_time_in_minutes', None)


class ConfigurationProfilePreferenceProperties(Model):
    """Automanage configuration profile preference properties.

    :param vm_backup: The custom preferences for Azure VM Backup.
    :type vm_backup:
     ~azure.mgmt.automanage.models.ConfigurationProfilePreferenceVmBackup
    :param anti_malware: The custom preferences for Azure Antimalware.
    :type anti_malware:
     ~azure.mgmt.automanage.models.ConfigurationProfilePreferenceAntiMalware
    """

    _attribute_map = {
        'vm_backup': {'key': 'vmBackup', 'type': 'ConfigurationProfilePreferenceVmBackup'},
        'anti_malware': {'key': 'antiMalware', 'type': 'ConfigurationProfilePreferenceAntiMalware'},
    }

    def __init__(self, **kwargs):
        super(ConfigurationProfilePreferenceProperties, self).__init__(**kwargs)
        self.vm_backup = kwargs.get('vm_backup', None)
        self.anti_malware = kwargs.get('anti_malware', None)


class ConfigurationProfilePreferenceVmBackup(Model):
    """Automanage configuration profile VM Backup preferences.

    :param time_zone: TimeZone optional input as string. For example: Pacific
     Standard Time
    :type time_zone: str
    :param instant_rp_retention_range_in_days: Instant RP retention policy
     range in days
    :type instant_rp_retention_range_in_days: int
    :param retention_policy: Retention policy with the details on backup copy
     retention ranges.
    :type retention_policy: str
    :param schedule_policy: Backup schedule specified as part of backup
     policy.
    :type schedule_policy: str
    """

    _attribute_map = {
        'time_zone': {'key': 'timeZone', 'type': 'str'},
        'instant_rp_retention_range_in_days': {'key': 'instantRpRetentionRangeInDays', 'type': 'int'},
        'retention_policy': {'key': 'retentionPolicy', 'type': 'str'},
        'schedule_policy': {'key': 'schedulePolicy', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ConfigurationProfilePreferenceVmBackup, self).__init__(**kwargs)
        self.time_zone = kwargs.get('time_zone', None)
        self.instant_rp_retention_range_in_days = kwargs.get('instant_rp_retention_range_in_days', None)
        self.retention_policy = kwargs.get('retention_policy', None)
        self.schedule_policy = kwargs.get('schedule_policy', None)


class ErrorResponse(Model):
    """ARM error response body.

    :param error: Details about the error.
    :type error: ~azure.mgmt.automanage.models.ErrorResponseBody
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorResponseBody'},
    }

    def __init__(self, **kwargs):
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class ErrorResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ErrorResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorResponseException, self).__init__(deserialize, response, 'ErrorResponse', *args)


class ErrorResponseBody(Model):
    """An error response from the Automanage service.

    :param code: An identifier for the error. Codes are invariant and are
     intended to be consumed programmatically.
    :type code: str
    :param message: A message describing the error, intended to be suitable
     for display in a user interface.
    :type message: str
    :param target: The target of the particular error. For example, the name
     of the property in error.
    :type target: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ErrorResponseBody, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.target = kwargs.get('target', None)


class Operation(Model):
    """Automanage REST API operation.

    :param name: Operation name: For ex.
     providers/Microsoft.Automanage/configurationProfileAssignments/write or
     read
    :type name: str
    :param is_data_action: Indicates whether the operation is a data action
    :type is_data_action: str
    :param display: Provider, Resource, Operation and description values.
    :type display: ~azure.mgmt.automanage.models.OperationDisplay
    :param status_code: Service provider: Microsoft.Automanage
    :type status_code: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'is_data_action': {'key': 'isDataAction', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'status_code': {'key': 'properties.statusCode', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Operation, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.is_data_action = kwargs.get('is_data_action', None)
        self.display = kwargs.get('display', None)
        self.status_code = kwargs.get('status_code', None)


class OperationDisplay(Model):
    """Provider, Resource, Operation and description values.

    :param provider: Service provider: Microsoft.Automanage
    :type provider: str
    :param resource: Resource on which the operation is performed:  For ex.
    :type resource: str
    :param operation: Operation type: Read, write, delete, etc.
    :type operation: str
    :param description: Description about operation.
    :type description: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = kwargs.get('provider', None)
        self.resource = kwargs.get('resource', None)
        self.operation = kwargs.get('operation', None)
        self.description = kwargs.get('description', None)
