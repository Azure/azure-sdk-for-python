# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import uuid
from msrest.pipeline import ClientRawResponse

from .. import models


class IdentityOperations(object):
    """IdentityOperations operations.

    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    :ivar metadata: This must be set to 'true'. Constant value: "true".
    :ivar api_version: This is the API version to use. Constant value: "2019-02-01".
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self.metadata = "true"
        self.api_version = "2019-02-01"

        self.config = config

    def get_token(
            self, resource, client_id=None, object_id=None, msi_res_id=None, authority=None, bypass_cache=None, custom_headers=None, raw=False, **operation_config):
        """Get a Token from Azure AD.

        :param resource: This is the urlencoded identifier URI of the sink
         resource for the requested Azure AD token. The resulting token
         contains the corresponding aud for this resource.
        :type resource: str
        :param client_id: This identifies, by Azure AD client id, a specific
         explicit identity to use when authenticating to Azure AD. Mutually
         exclusive with object_id and msi_res_id.
        :type client_id: str
        :param object_id: This identifies, by Azure AD object id, a specific
         explicit identity to use when authenticating to Azure AD. Mutually
         exclusive with client_id and msi_res_id.
        :type object_id: str
        :param msi_res_id: This identifies, by urlencoded ARM resource id, a
         specific explicit identity to use when authenticating to Azure AD.
         Mutually exclusive with client_id and object_id.
        :type msi_res_id: str
        :param authority: This indicates the authority to request AAD tokens
         from. Defaults to the known authority of the identity to be used.
        :type authority: str
        :param bypass_cache: If provided, the value must be 'true'. This
         indicates to the server that the token must be retrieved from Azure AD
         and cannot be retrieved from an internal cache. Possible values
         include: 'true'
        :type bypass_cache: str or ~azure.imds.models.BypassCache
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: IdentityTokenResponse or ClientRawResponse if raw=true
        :rtype: ~azure.imds.models.IdentityTokenResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`IdentityErrorResponseException<azure.imds.models.IdentityErrorResponseException>`
        """
        # Construct URL
        url = self.get_token.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['resource'] = self._serialize.query("resource", resource, 'str')
        query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str')
        if client_id is not None:
            query_parameters['client_id'] = self._serialize.query("client_id", client_id, 'str')
        if object_id is not None:
            query_parameters['object_id'] = self._serialize.query("object_id", object_id, 'str')
        if msi_res_id is not None:
            query_parameters['msi_res_id'] = self._serialize.query("msi_res_id", msi_res_id, 'str')
        if authority is not None:
            query_parameters['authority'] = self._serialize.query("authority", authority, 'str')
        if bypass_cache is not None:
            query_parameters['bypass_cache'] = self._serialize.query("bypass_cache", bypass_cache, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['Metadata'] = self._serialize.header("self.metadata", self.metadata, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.IdentityErrorResponseException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('IdentityTokenResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_token.metadata = {'url': '/identity/oauth2/token'}

    def get_info(
            self, custom_headers=None, raw=False, **operation_config):
        """Get information about AAD Metadata.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: IdentityInfoResponse or ClientRawResponse if raw=true
        :rtype: ~azure.imds.models.IdentityInfoResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`IdentityErrorResponseException<azure.imds.models.IdentityErrorResponseException>`
        """
        # Construct URL
        url = self.get_info.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['Metadata'] = self._serialize.header("self.metadata", self.metadata, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.IdentityErrorResponseException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('IdentityInfoResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_info.metadata = {'url': '/identity/info'}
