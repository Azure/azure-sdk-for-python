# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class AttestedData(Model):
    """This is the response from the Attested_GetDocument operation.

    :param signature: This is the encoded string containing the VM ID, plan
     information, public key, timestamp, and nonce value.
    :type signature: str
    :param encoding: This is the encoding scheme of the signature.
    :type encoding: str
    """

    _attribute_map = {
        'signature': {'key': 'signature', 'type': 'str'},
        'encoding': {'key': 'encoding', 'type': 'str'},
    }

    def __init__(self, *, signature: str=None, encoding: str=None, **kwargs) -> None:
        super(AttestedData, self).__init__(**kwargs)
        self.signature = signature
        self.encoding = encoding


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class Compute(Model):
    """Compute Metadata.

    :param az_environment: This is the name of the environment in which the VM
     is running.
    :type az_environment: str
    :param custom_data: This is the base64 encoded custom data for the running
     VM.
    :type custom_data: str
    :param location: This is the Azure Region in which the VM is running.
    :type location: str
    :param name: This is the name of the VM.
    :type name: str
    :param offer: This is the offer information for the VM image. This value
     is only present for images deployed from the Azure Image Gallery.
    :type offer: str
    :param os_type: This value indicates the type of OS the VM is running,
     either Linux or Windows.
    :type os_type: str
    :param placement_group_id: This is the placement group of your Virtual
     Machine Scale Set.
    :type placement_group_id: str
    :param plan: This contains the data about the plan.
    :type plan: ~azure.imds.models.PlanProperties
    :param public_keys: This is information about the SSH certificate
    :type public_keys: list[~azure.imds.models.PublicKeysProperties]
    :param platform_fault_domain: This is the fault domain in which the VM.
    :type platform_fault_domain: str
    :param platform_update_domain: This is the update domain in which the VM.
    :type platform_update_domain: str
    :param provider: This is the provider of the VM.
    :type provider: str
    :param publisher: This is the publisher of the VM image.
    :type publisher: str
    :param resource_group_name: This is the resource group for the VM.
    :type resource_group_name: str
    :param sku: This is the specific SKU for the VM image.
    :type sku: str
    :param subscription_id: This is the Azure subscription for the VM.
    :type subscription_id: str
    :param tags: This is the list of tags for your VM.
    :type tags: str
    :param version: This is the version of the VM image.
    :type version: str
    :param vm_id: This is the unique identifier for the VM.
    :type vm_id: str
    :param vm_scale_set_name: This is the resource name of the VMSS.
    :type vm_scale_set_name: str
    :param vm_size: This is the size of the VM.
    :type vm_size: str
    :param zone: This is the availability zone of the VM.
    :type zone: str
    """

    _attribute_map = {
        'az_environment': {'key': 'azEnvironment', 'type': 'str'},
        'custom_data': {'key': 'customData', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'offer': {'key': 'offer', 'type': 'str'},
        'os_type': {'key': 'osType', 'type': 'str'},
        'placement_group_id': {'key': 'placementGroupId', 'type': 'str'},
        'plan': {'key': 'plan', 'type': 'PlanProperties'},
        'public_keys': {'key': 'publicKeys', 'type': '[PublicKeysProperties]'},
        'platform_fault_domain': {'key': 'platformFaultDomain', 'type': 'str'},
        'platform_update_domain': {'key': 'platformUpdateDomain', 'type': 'str'},
        'provider': {'key': 'provider', 'type': 'str'},
        'publisher': {'key': 'publisher', 'type': 'str'},
        'resource_group_name': {'key': 'resourceGroupName', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'str'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
        'tags': {'key': 'tags', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'vm_id': {'key': 'vmId', 'type': 'str'},
        'vm_scale_set_name': {'key': 'vmScaleSetName', 'type': 'str'},
        'vm_size': {'key': 'vmSize', 'type': 'str'},
        'zone': {'key': 'zone', 'type': 'str'},
    }

    def __init__(self, *, az_environment: str=None, custom_data: str=None, location: str=None, name: str=None, offer: str=None, os_type: str=None, placement_group_id: str=None, plan=None, public_keys=None, platform_fault_domain: str=None, platform_update_domain: str=None, provider: str=None, publisher: str=None, resource_group_name: str=None, sku: str=None, subscription_id: str=None, tags: str=None, version: str=None, vm_id: str=None, vm_scale_set_name: str=None, vm_size: str=None, zone: str=None, **kwargs) -> None:
        super(Compute, self).__init__(**kwargs)
        self.az_environment = az_environment
        self.custom_data = custom_data
        self.location = location
        self.name = name
        self.offer = offer
        self.os_type = os_type
        self.placement_group_id = placement_group_id
        self.plan = plan
        self.public_keys = public_keys
        self.platform_fault_domain = platform_fault_domain
        self.platform_update_domain = platform_update_domain
        self.provider = provider
        self.publisher = publisher
        self.resource_group_name = resource_group_name
        self.sku = sku
        self.subscription_id = subscription_id
        self.tags = tags
        self.version = version
        self.vm_id = vm_id
        self.vm_scale_set_name = vm_scale_set_name
        self.vm_size = vm_size
        self.zone = zone


class ErrorResponse(Model):
    """This is the response from an operation in the case an error occurs.

    :param error: Error message indicating why the operation failed.
    :type error: str
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'str'},
    }

    def __init__(self, *, error: str=None, **kwargs) -> None:
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class ErrorResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ErrorResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorResponseException, self).__init__(deserialize, response, 'ErrorResponse', *args)


class IdentityErrorResponse(Model):
    """This is the response from an Identity operation in the case an error
    occurs.

    :param error: Error code. Possible values include: 'invalid_request',
     'unauthorized_client', 'access_denied', 'unsupported_response_type',
     'invalid_scope', 'server_error', 'service_unavailable', 'bad_request',
     'forbidden', 'not_found', 'method_not_allowed', 'too_many_requests'
    :type error: str or ~azure.imds.models.Error
    :param error_description: Error message indicating why the operation
     failed.
    :type error_description: str
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'str'},
        'error_description': {'key': 'error_description', 'type': 'str'},
    }

    def __init__(self, *, error=None, error_description: str=None, **kwargs) -> None:
        super(IdentityErrorResponse, self).__init__(**kwargs)
        self.error = error
        self.error_description = error_description


class IdentityErrorResponseException(HttpOperationError):
    """Server responsed with exception of type: 'IdentityErrorResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(IdentityErrorResponseException, self).__init__(deserialize, response, 'IdentityErrorResponse', *args)


class IdentityInfoResponse(Model):
    """This is the response from the Identity_GetInfo operation.

    :param tenant_id: This is the AAD tenantId of the identity of the caller.
    :type tenant_id: str
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
    }

    def __init__(self, *, tenant_id: str=None, **kwargs) -> None:
        super(IdentityInfoResponse, self).__init__(**kwargs)
        self.tenant_id = tenant_id


class IdentityTokenResponse(Model):
    """This is the response from the Identity_GetToken operation.

    :param access_token: This is the requested access token. The app can use
     this token to authenticate to the sink resource.
    :type access_token: str
    :param expires_in: This is how long the access token is valid (in
     seconds).
    :type expires_in: str
    :param expires_on: This is the time when the access token expires. The
     date is represented as the number of seconds from 1970-01-01T0:0:0Z UTC
     until the expiration time. This value is used to determine the lifetime of
     cached tokens.
    :type expires_on: str
    :param ext_expires_in: This indicates the extended lifetime of the token
     (in seconds).
    :type ext_expires_in: str
    :param not_before: This is the time when the access token becomes
     effective. The date is represented as the number of seconds from
     1970-01-01T0:0:0Z UTC until the expiration time.
    :type not_before: str
    :param resource: This is the app ID URI of the sink resource.
    :type resource: str
    :param token_type: This indicates the token type value.
    :type token_type: str
    :param client_id: This is the client_id specified in the request, if any.
    :type client_id: str
    :param object_id: This is the object_id specified in the request, if any.
    :type object_id: str
    :param msi_res_id: This is the msi_res_id specified in the request, if
     any.
    :type msi_res_id: str
    """

    _attribute_map = {
        'access_token': {'key': 'access_token', 'type': 'str'},
        'expires_in': {'key': 'expires_in', 'type': 'str'},
        'expires_on': {'key': 'expires_on', 'type': 'str'},
        'ext_expires_in': {'key': 'ext_expires_in', 'type': 'str'},
        'not_before': {'key': 'not_before', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'token_type': {'key': 'token_type', 'type': 'str'},
        'client_id': {'key': 'client_id', 'type': 'str'},
        'object_id': {'key': 'object_id', 'type': 'str'},
        'msi_res_id': {'key': 'msi_res_id', 'type': 'str'},
    }

    def __init__(self, *, access_token: str=None, expires_in: str=None, expires_on: str=None, ext_expires_in: str=None, not_before: str=None, resource: str=None, token_type: str=None, client_id: str=None, object_id: str=None, msi_res_id: str=None, **kwargs) -> None:
        super(IdentityTokenResponse, self).__init__(**kwargs)
        self.access_token = access_token
        self.expires_in = expires_in
        self.expires_on = expires_on
        self.ext_expires_in = ext_expires_in
        self.not_before = not_before
        self.resource = resource
        self.token_type = token_type
        self.client_id = client_id
        self.object_id = object_id
        self.msi_res_id = msi_res_id


class Instance(Model):
    """This is the response from the Instance_GetMetadata operation.

    :param compute: Compute Metadata
    :type compute: ~azure.imds.models.Compute
    :param network: Network Metadata
    :type network: ~azure.imds.models.Network
    """

    _attribute_map = {
        'compute': {'key': 'compute', 'type': 'Compute'},
        'network': {'key': 'network', 'type': 'Network'},
    }

    def __init__(self, *, compute=None, network=None, **kwargs) -> None:
        super(Instance, self).__init__(**kwargs)
        self.compute = compute
        self.network = network


class Ipv4Properties(Model):
    """This contains the IPv4 properties.

    :param private_ip_address: This is the private IP address assigned to the
     interface.
    :type private_ip_address: str
    :param public_ip_address: This is the public IP address assigned to the
     interface.
    :type public_ip_address: str
    """

    _attribute_map = {
        'private_ip_address': {'key': 'privateIpAddress', 'type': 'str'},
        'public_ip_address': {'key': 'publicIpAddress', 'type': 'str'},
    }

    def __init__(self, *, private_ip_address: str=None, public_ip_address: str=None, **kwargs) -> None:
        super(Ipv4Properties, self).__init__(**kwargs)
        self.private_ip_address = private_ip_address
        self.public_ip_address = public_ip_address


class Ipv6Properties(Model):
    """This contains the IPv6 properties.

    :param private_ip_address: This is the private IPv6 address assigned to
     the interface.
    :type private_ip_address: str
    """

    _attribute_map = {
        'private_ip_address': {'key': 'privateIpAddress', 'type': 'str'},
    }

    def __init__(self, *, private_ip_address: str=None, **kwargs) -> None:
        super(Ipv6Properties, self).__init__(**kwargs)
        self.private_ip_address = private_ip_address


class Network(Model):
    """Network Metadata.

    :param interface: This contains data about the network interface.
    :type interface: list[~azure.imds.models.NetworkInterface]
    """

    _attribute_map = {
        'interface': {'key': 'interface', 'type': '[NetworkInterface]'},
    }

    def __init__(self, *, interface=None, **kwargs) -> None:
        super(Network, self).__init__(**kwargs)
        self.interface = interface


class NetworkInterface(Model):
    """This contains data about the network interface.

    :param ipv4: This contains the IPv4 address.
    :type ipv4: ~azure.imds.models.NetworkInterfaceIpv4
    :param ipv6: This contains the IPv6 address.
    :type ipv6: ~azure.imds.models.NetworkInterfaceIpv6
    :param mac_address: This is the MAC address of the interface.
    :type mac_address: str
    """

    _attribute_map = {
        'ipv4': {'key': 'ipv4', 'type': 'NetworkInterfaceIpv4'},
        'ipv6': {'key': 'ipv6', 'type': 'NetworkInterfaceIpv6'},
        'mac_address': {'key': 'macAddress', 'type': 'str'},
    }

    def __init__(self, *, ipv4=None, ipv6=None, mac_address: str=None, **kwargs) -> None:
        super(NetworkInterface, self).__init__(**kwargs)
        self.ipv4 = ipv4
        self.ipv6 = ipv6
        self.mac_address = mac_address


class NetworkInterfaceIpv4(Model):
    """This contains the IPv4 address.

    :param ip_address: This is the IP address
    :type ip_address: list[~azure.imds.models.Ipv4Properties]
    :param subnet: This is the subnet
    :type subnet: list[~azure.imds.models.SubnetProperties]
    """

    _attribute_map = {
        'ip_address': {'key': 'ipAddress', 'type': '[Ipv4Properties]'},
        'subnet': {'key': 'subnet', 'type': '[SubnetProperties]'},
    }

    def __init__(self, *, ip_address=None, subnet=None, **kwargs) -> None:
        super(NetworkInterfaceIpv4, self).__init__(**kwargs)
        self.ip_address = ip_address
        self.subnet = subnet


class NetworkInterfaceIpv6(Model):
    """This contains the IPv6 address.

    :param ip_address: This is the IP address
    :type ip_address: list[~azure.imds.models.Ipv6Properties]
    """

    _attribute_map = {
        'ip_address': {'key': 'ipAddress', 'type': '[Ipv6Properties]'},
    }

    def __init__(self, *, ip_address=None, **kwargs) -> None:
        super(NetworkInterfaceIpv6, self).__init__(**kwargs)
        self.ip_address = ip_address


class PlanProperties(Model):
    """This contains the data about the plan.

    :param name: This is the Plan ID.
    :type name: str
    :param publisher: This is the publisher ID.
    :type publisher: str
    :param product: This is the product of the image from the Marketplace.
    :type product: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'publisher': {'key': 'publisher', 'type': 'str'},
        'product': {'key': 'product', 'type': 'str'},
    }

    def __init__(self, *, name: str=None, publisher: str=None, product: str=None, **kwargs) -> None:
        super(PlanProperties, self).__init__(**kwargs)
        self.name = name
        self.publisher = publisher
        self.product = product


class PublicKeysProperties(Model):
    """This contains the data about the public key.

    :param path: This specifies the full path on the VM where the SSH public
     key is stored.
    :type path: str
    :param key_data: This is the SSH public key certificate used to
     authenticate with the VM.
    :type key_data: str
    """

    _attribute_map = {
        'path': {'key': 'path', 'type': 'str'},
        'key_data': {'key': 'keyData', 'type': 'str'},
    }

    def __init__(self, *, path: str=None, key_data: str=None, **kwargs) -> None:
        super(PublicKeysProperties, self).__init__(**kwargs)
        self.path = path
        self.key_data = key_data


class SubnetProperties(Model):
    """This contains the properties of the subnet.

    :param address: This is the address range of the subnet.
    :type address: str
    :param prefix: This is the prefix of the subnet.
    :type prefix: str
    """

    _attribute_map = {
        'address': {'key': 'address', 'type': 'str'},
        'prefix': {'key': 'prefix', 'type': 'str'},
    }

    def __init__(self, *, address: str=None, prefix: str=None, **kwargs) -> None:
        super(SubnetProperties, self).__init__(**kwargs)
        self.address = address
        self.prefix = prefix
