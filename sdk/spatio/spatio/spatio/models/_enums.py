# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class Algorithm(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Algorithm name."""

    HILLSHADE = "hillshade"
    CONTOURS = "contours"
    NORMALIZED_INDEX = "normalizedIndex"
    TERRARIUM = "terrarium"
    TERRAINRGB = "terrainrgb"


class ColorMapNames(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """An enumeration."""

    ACCENT = "accent"
    ACCENT_R = "accent_r"
    AFMHOT = "afmhot"
    AFMHOT_R = "afmhot_r"
    AI4G_LULC = "ai4g-lulc"
    ALOS_FNF = "alos-fnf"
    ALOS_PALSAR_MASK = "alos-palsar-mask"
    AUTUMN = "autumn"
    AUTUMN_R = "autumn_r"
    BINARY = "binary"
    BINARY_R = "binary_r"
    BLUES = "blues"
    BLUES_R = "blues_r"
    BONE = "bone"
    BONE_R = "bone_r"
    BRBG = "brbg"
    BRBG_R = "brbg_r"
    BRG = "brg"
    BRG_R = "brg_r"
    BUGN = "bugn"
    BUGN_R = "bugn_r"
    BUPU = "bupu"
    BUPU_R = "bupu_r"
    BWR = "bwr"
    BWR_R = "bwr_r"
    C_CAP = "c-cap"
    CFASTIE = "cfastie"
    CHESAPEAKE_LC_13 = "chesapeake-lc-13"
    CHESAPEAKE_LC_7 = "chesapeake-lc-7"
    CHESAPEAKE_LU = "chesapeake-lu"
    CHLORIS_BIOMASS = "chloris-biomass"
    CIVIDIS = "cividis"
    CIVIDIS_R = "cividis_r"
    CMRMAP = "cmrmap"
    CMRMAP_R = "cmrmap_r"
    COOL = "cool"
    COOL_R = "cool_r"
    COOLWARM = "coolwarm"
    COOLWARM_R = "coolwarm_r"
    COPPER = "copper"
    COPPER_R = "copper_r"
    CUBEHELIX = "cubehelix"
    CUBEHELIX_R = "cubehelix_r"
    DARK2 = "dark2"
    DARK2_R = "dark2_r"
    DRCOG_LULC = "drcog-lulc"
    ESA_CCI_LC = "esa-cci-lc"
    ESA_WORLDCOVER = "esa-worldcover"
    FLAG = "flag"
    FLAG_R = "flag_r"
    GAP_LULC = "gap-lulc"
    GIST_EARTH = "gist_earth"
    GIST_EARTH_R = "gist_earth_r"
    GIST_GRAY = "gist_gray"
    GIST_GRAY_R = "gist_gray_r"
    GIST_HEAT = "gist_heat"
    GIST_HEAT_R = "gist_heat_r"
    GIST_NCAR = "gist_ncar"
    GIST_NCAR_R = "gist_ncar_r"
    GIST_RAINBOW = "gist_rainbow"
    GIST_RAINBOW_R = "gist_rainbow_r"
    GIST_STERN = "gist_stern"
    GIST_STERN_R = "gist_stern_r"
    GIST_YARG = "gist_yarg"
    GIST_YARG_R = "gist_yarg_r"
    GNBU = "gnbu"
    GNBU_R = "gnbu_r"
    GNUPLOT = "gnuplot"
    GNUPLOT2 = "gnuplot2"
    GNUPLOT2_R = "gnuplot2_r"
    GNUPLOT_R = "gnuplot_r"
    GRAY = "gray"
    GRAY_R = "gray_r"
    GREENS = "greens"
    GREENS_R = "greens_r"
    GREYS = "greys"
    GREYS_R = "greys_r"
    HOT = "hot"
    HOT_R = "hot_r"
    HSV = "hsv"
    HSV_R = "hsv_r"
    INFERNO = "inferno"
    INFERNO_R = "inferno_r"
    IO_BII = "io-bii"
    IO_LULC = "io-lulc"
    IO_LULC_9_CLASS = "io-lulc-9-class"
    JET = "jet"
    JET_R = "jet_r"
    JRC_CHANGE = "jrc-change"
    JRC_EXTENT = "jrc-extent"
    JRC_OCCURRENCE = "jrc-occurrence"
    JRC_RECURRENCE = "jrc-recurrence"
    JRC_SEASONALITY = "jrc-seasonality"
    JRC_TRANSITIONS = "jrc-transitions"
    LIDAR_CLASSIFICATION = "lidar-classification"
    LIDAR_HAG = "lidar-hag"
    LIDAR_HAG_ALTERNATIVE = "lidar-hag-alternative"
    LIDAR_INTENSITY = "lidar-intensity"
    LIDAR_RETURNS = "lidar-returns"
    MAGMA = "magma"
    MAGMA_R = "magma_r"
    MODIS_10_A1 = "modis-10A1"
    MODIS_10_A2 = "modis-10A2"
    MODIS_13_A1_Q1 = "modis-13A1|Q1"
    MODIS_14_A1_A2 = "modis-14A1|A2"
    MODIS_15_A2_H_A3_H = "modis-15A2H|A3H"
    MODIS_16_A3_G_F_E_T = "modis-16A3GF-ET"
    MODIS_16_A3_G_F_P_E_T = "modis-16A3GF-PET"
    MODIS_17_A2_H_A2_H_G_F = "modis-17A2H|A2HGF"
    MODIS_17_A3_H_G_F = "modis-17A3HGF"
    MODIS_64_A1 = "modis-64A1"
    MTBS_SEVERITY = "mtbs-severity"
    NIPY_SPECTRAL = "nipy_spectral"
    NIPY_SPECTRAL_R = "nipy_spectral_r"
    NRCAN_LULC = "nrcan-lulc"
    OCEAN = "ocean"
    OCEAN_R = "ocean_r"
    ORANGES = "oranges"
    ORANGES_R = "oranges_r"
    ORRD = "orrd"
    ORRD_R = "orrd_r"
    PAIRED = "paired"
    PAIRED_R = "paired_r"
    PASTEL1 = "pastel1"
    PASTEL1_R = "pastel1_r"
    PASTEL2 = "pastel2"
    PASTEL2_R = "pastel2_r"
    PINK = "pink"
    PINK_R = "pink_r"
    PIYG = "piyg"
    PIYG_R = "piyg_r"
    PLASMA = "plasma"
    PLASMA_R = "plasma_r"
    PRGN = "prgn"
    PRGN_R = "prgn_r"
    PRISM = "prism"
    PRISM_R = "prism_r"
    PUBU = "pubu"
    PUBU_R = "pubu_r"
    PUBUGN = "pubugn"
    PUBUGN_R = "pubugn_r"
    PUOR = "puor"
    PUOR_R = "puor_r"
    PURD = "purd"
    PURD_R = "purd_r"
    PURPLES = "purples"
    PURPLES_R = "purples_r"
    QPE = "qpe"
    RAINBOW = "rainbow"
    RAINBOW_R = "rainbow_r"
    RDBU = "rdbu"
    RDBU_R = "rdbu_r"
    RDGY = "rdgy"
    RDGY_R = "rdgy_r"
    RDPU = "rdpu"
    RDPU_R = "rdpu_r"
    RDYLBU = "rdylbu"
    RDYLBU_R = "rdylbu_r"
    RDYLGN = "rdylgn"
    RDYLGN_R = "rdylgn_r"
    REDS = "reds"
    REDS_R = "reds_r"
    RPLUMBO = "rplumbo"
    SCHWARZWALD = "schwarzwald"
    SEISMIC = "seismic"
    SEISMIC_R = "seismic_r"
    SET1 = "set1"
    SET1_R = "set1_r"
    SET2 = "set2"
    SET2_R = "set2_r"
    SET3 = "set3"
    SET3_R = "set3_r"
    SPECTRAL = "spectral"
    SPECTRAL_R = "spectral_r"
    SPRING = "spring"
    SPRING_R = "spring_r"
    SUMMER = "summer"
    SUMMER_R = "summer_r"
    TAB10 = "tab10"
    TAB10_R = "tab10_r"
    TAB20 = "tab20"
    TAB20_R = "tab20_r"
    TAB20B = "tab20b"
    TAB20B_R = "tab20b_r"
    TAB20C = "tab20c"
    TAB20C_R = "tab20c_r"
    TERRAIN = "terrain"
    TERRAIN_R = "terrain_r"
    TWILIGHT = "twilight"
    TWILIGHT_R = "twilight_r"
    TWILIGHT_SHIFTED = "twilight_shifted"
    TWILIGHT_SHIFTED_R = "twilight_shifted_r"
    USDA_CDL = "usda-cdl"
    USDA_CDL_CORN = "usda-cdl-corn"
    USDA_CDL_COTTON = "usda-cdl-cotton"
    USDA_CDL_SOYBEANS = "usda-cdl-soybeans"
    USDA_CDL_WHEAT = "usda-cdl-wheat"
    USGS_LCMAP = "usgs-lcmap"
    VIIRS_10A1 = "viirs-10a1"
    VIIRS_13A1 = "viirs-13a1"
    VIIRS_14A1 = "viirs-14a1"
    VIIRS_15A2_H = "viirs-15a2H"
    VIRIDIS = "viridis"
    VIRIDIS_R = "viridis_r"
    WINTER = "winter"
    WINTER_R = "winter_r"
    WISTIA = "wistia"
    WISTIA_R = "wistia_r"
    YLGN = "ylgn"
    YLGN_R = "ylgn_r"
    YLGNBU = "ylgnbu"
    YLGNBU_R = "ylgnbu_r"
    YLORBR = "ylorbr"
    YLORBR_R = "ylorbr_r"
    YLORRD = "ylorrd"
    YLORRD_R = "ylorrd_r"


class CrawlingStrategy(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type of CrawlingStrategy."""

    ONE_SCENE_PER_FILE = "oneScenePerFile"
    """All the scene data is contained in a single file"""
    ONE_SCENE_PER_FOLDER = "oneScenePerFolder"
    """The scene data is contained in a folder"""
    INDEX_FILE = "indexFile"
    """An index file contains the URLs of the scenes"""


class FeaturePolygonDictStrRioTilerModelsInfoType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type."""

    FEATURE = "Feature"


class GeoCatalogCollectionType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type."""

    COLLECTION = "Collection"


class GeoTemplateKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type of GeoTemplateKind."""

    USER = "user"
    """User defined template"""
    SYSTEM = "system"
    """System defined template"""


class ImageRequestFormat(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type of ImageRequestFormat."""

    PNG = "png"
    COG = "cog"


class ImageType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Available Output image type."""

    PNG = "png"
    NPY = "npy"
    TIF = "tif"
    JPEG = "jpeg"
    JPG = "jpg"
    JP2 = "jp2"
    WEBP = "webp"
    PNGRAW = "pngraw"


class IngestionSourceType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type of IngestionSourceType."""

    SAS_TOKEN = "SasToken"
    """Azure Blob Storage SAS token"""


class IngestionType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type of IngestionType."""

    STATIC_CATALOG = "StaticCatalog"
    """Static STAC Catalog"""
    GEO_TEMPLATE = "GeoTemplate"
    """Ingestion Geo-template"""


class LegendConfigType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Legend type to make, one of: ``continuous``\\ , ``classmap``\\ , ``interval`` or ``none``
    (note, ``none`` is a string literal).
    """

    CONTINUOUS = "continuous"
    CLASSMAP = "classmap"
    INTERVAL = "interval"
    NONE = "none"


class LinkType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type of LinkType."""

    IMAGE_TIFF_APPLICATION_GEOTIFF = "image/tiff; application=geotiff"
    IMAGE_JP2 = "image/jp2"
    IMAGE_PNG = "image/png"
    IMAGE_JPEG = "image/jpeg"
    IMAGE_JPG = "image/jpg"
    IMAGE_WEBP = "image/webp"
    APPLICATION_X_BINARY = "application/x-binary"
    APPLICATION_XML = "application/xml"
    APPLICATION_JSON = "application/json"
    APPLICATION_GEO_JSON = "application/geo+json"
    TEXT_HTML = "text/html"
    TEXT_PLAIN = "text/plain"
    APPLICATION_X_PROTOBUF = "application/x-protobuf"


class MetadataType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type."""

    MOSAIC = "mosaic"
    SEARCH = "search"


class NodataTypes(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """rio-tiler Nodata types."""

    ALPHA = "Alpha"
    MASK = "Mask"
    INTERNAL = "Internal"
    NODATA = "Nodata"
    NONE = "None"


class OperationStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type of OperationStatus."""

    PENDING = "Pending"
    """Operation accepted and ready to be run"""
    RUNNING = "Running"
    """Operation is running"""
    FINISHED = "Finished"
    """Operation has already finished its execution"""
    CANCELED = "Canceled"
    """Operation canceled by the user"""


class PartitionTypeScheme(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of partitioning to use."""

    YEAR = "year"
    MONTH = "month"
    NONE = "none"


class PixelSelection(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Pixel selection method."""

    FIRST = "first"
    HIGHEST = "highest"
    LOWEST = "lowest"
    MEAN = "mean"
    MEDIAN = "median"
    STDEV = "stdev"
    LASTBANDLOW = "lastbandlow"
    LASTBANDHIGHT = "lastbandhight"


class PolygonType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type."""

    POLYGON = "Polygon"


class QueryableDefinitionDataType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type of QueryableDefinitionDataType."""

    NUMBER = "number"
    FLOAT = "float"
    TEXT = "text"
    ARRAY = "array"


class RegisterMosaicFilterLang(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Filter-Lang."""

    CQL_JSON = "cql-json"
    CQL_TEXT = "cql-text"
    CQL2_JSON = "cql2-json"


class RenderOptionType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of render option."""

    RASTER_TILE = "raster-tile"
    VT_POLYGON = "vt-polygon"
    VT_LINE = "vt-line"


class Resampling(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Resampling method."""

    NEAREST = "nearest"
    BILINEAR = "bilinear"
    CUBIC = "cubic"
    CUBIC_SPLINE = "cubic_spline"
    LANCZOS = "lanczos"
    AVERAGE = "average"
    MODE = "mode"
    GAUSS = "gauss"
    RMS = "rms"


class SearchPostRequestFilterLang(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type of SearchPostRequestFilterLang."""

    CQL_JSON = "cql-json"
    CQL2_JSON = "cql2-json"
    CQL2_TEXT = "cql2-text"


class SortDirections(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """An enumeration."""

    ASC = "asc"
    DESC = "desc"


class TileJsonScheme(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type of TileJsonScheme."""

    XYZ = "xyz"
    TMS = "tms"


class TileMatrixCornerOfOrigin(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The corner of the tile matrix (\\ *topLeft* or *bottomLeft*\\ ) used as the origin
    for numbering tile rows and columns. This corner is also a corner of the (0, 0)
    tile.
    """

    TOP_LEFT = "topLeft"
    BOTTOM_LEFT = "bottomLeft"


class Tilematrixsetid(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Tilematrixsetid."""

    CANADIAN_N_A_D83_L_C_C = "CanadianNAD83_LCC"
    EUROPEAN_E_T_R_S89_L_A_E_A_QUAD = "EuropeanETRS89_LAEAQuad"
    L_I_N_Z_ANTARTICA_MAP_TILEGRID = "LINZAntarticaMapTilegrid"
    N_Z_T_M2000_QUAD = "NZTM2000Quad"
    U_P_S_ANTARCTIC_W_G_S84_QUAD = "UPSAntarcticWGS84Quad"
    U_P_S_ARCTIC_W_G_S84_QUAD = "UPSArcticWGS84Quad"
    U_T_M31_W_G_S84_QUAD = "UTM31WGS84Quad"
    W_G_S1984_QUAD = "WGS1984Quad"
    WEB_MERCATOR_QUAD = "WebMercatorQuad"
    WORLD_C_R_S84_QUAD = "WorldCRS84Quad"
    WORLD_MERCATOR_W_G_S84_QUAD = "WorldMercatorWGS84Quad"


class Versions(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Versions info."""

    V2024_01_31_PREVIEW = "2024-01-31-preview"
    """The 2024-01-31-preview version."""
