# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class AuthConfig(_model_base.Model):
    """Configuration for MSAL authentication in frontend application.


    :ivar authn_app_id: Authn App Id. Required.
    :vartype authn_app_id: str
    :ivar tenant_id: Tenant Id. Required.
    :vartype tenant_id: str
    :ivar instance: Instance. Required.
    :vartype instance: str
    :ivar redirect_uri: Redirect Uri.
    :vartype redirect_uri: str
    """

    authn_app_id: str = rest_field()
    """Authn App Id. Required."""
    tenant_id: str = rest_field()
    """Tenant Id. Required."""
    instance: str = rest_field()
    """Instance. Required."""
    redirect_uri: Optional[str] = rest_field()
    """Redirect Uri."""

    @overload
    def __init__(
        self,
        *,
        authn_app_id: str,
        tenant_id: str,
        instance: str,
        redirect_uri: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AzMapsClientId(_model_base.Model):
    """AzMapsClientId.


    :ivar client_id: Client Id. Required.
    :vartype client_id: str
    """

    client_id: str = rest_field()
    """Client Id. Required."""

    @overload
    def __init__(
        self,
        *,
        client_id: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AzMapsToken(_model_base.Model):
    """AzMapsToken.


    :ivar token: Token. Required.
    :vartype token: str
    :ivar expires_on: Expires On. Required.
    :vartype expires_on: int
    """

    token: str = rest_field()
    """Token. Required."""
    expires_on: int = rest_field()
    """Expires On. Required."""

    @overload
    def __init__(
        self,
        *,
        token: str,
        expires_on: int,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class BadRequest(_model_base.Model):
    """Validation error.


    :ivar text: Required.
    :vartype text: str
    """

    text: str = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        text: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Bounds(_model_base.Model):
    """Dataset Bounding box.


    :ivar bounds: Bounds. Required.
    :vartype bounds: list[any]
    """

    bounds: List[Any] = rest_field()
    """Bounds. Required."""

    @overload
    def __init__(
        self,
        *,
        bounds: List[Any],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DefaultLocation(_model_base.Model):
    """Defines a default location for showcasing a collection.

    All required parameters must be populated in order to send to server.

    :ivar zoom: Zoom level at which to center the map. Required.
    :vartype zoom: int
    :ivar coordinates: Coordinates at which to center the map, [latitude, longitude]. Required.
    :vartype coordinates: list[float]
    """

    zoom: int = rest_field()
    """Zoom level at which to center the map. Required."""
    coordinates: List[float] = rest_field()
    """Coordinates at which to center the map, [latitude, longitude]. Required."""

    @overload
    def __init__(
        self,
        *,
        zoom: int,
        coordinates: List[float],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Feature(_model_base.Model):
    """Feature Model.

    All required parameters must be populated in order to send to server.

    :ivar type: Type. Required. "Feature"
    :vartype type: str or ~spatio.models.FeatureType
    :ivar geometry: Geometry. Required.
    :vartype geometry: ~spatio.models.FeatureGeometry
    :ivar properties: Properties. Required.
    :vartype properties: ~spatio.models.FeatureProperties
    :ivar id: Id.
    :vartype id: any
    :ivar bbox: Bbox.
    :vartype bbox: any
    """

    type: Union[str, "_models.FeatureType"] = rest_field()
    """Type. Required. \"Feature\""""
    geometry: "_models.FeatureGeometry" = rest_field()
    """Geometry. Required."""
    properties: "_models.FeatureProperties" = rest_field()
    """Properties. Required."""
    id: Optional[Any] = rest_field()
    """Id."""
    bbox: Optional[Any] = rest_field()
    """Bbox."""

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.FeatureType"],
        geometry: "_models.FeatureGeometry",
        properties: "_models.FeatureProperties",
        id: Optional[Any] = None,  # pylint: disable=redefined-builtin
        bbox: Optional[Any] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class FeatureGeometry(_model_base.Model):
    """Geometry."""


class FeaturePolygonDictStrRioTilerModelsInfo(_model_base.Model):
    """Feature Model.


    :ivar type: Type. Required. "Feature"
    :vartype type: str or ~spatio.models.FeaturePolygonDictStrRioTilerModelsInfoType
    :ivar geometry: Polygon Model. Required.
    :vartype geometry: ~spatio.models.Polygon
    :ivar properties: Properties. Required.
    :vartype properties: dict[str, ~spatio.models.RioTilerModelsInfo]
    :ivar id: Id.
    :vartype id: any
    :ivar bbox: Bbox.
    :vartype bbox: any
    """

    type: Union[str, "_models.FeaturePolygonDictStrRioTilerModelsInfoType"] = rest_field()
    """Type. Required. \"Feature\""""
    geometry: "_models.Polygon" = rest_field()
    """Polygon Model. Required."""
    properties: Dict[str, "_models.RioTilerModelsInfo"] = rest_field()
    """Properties. Required."""
    id: Optional[Any] = rest_field()
    """Id."""
    bbox: Optional[Any] = rest_field()
    """Bbox."""

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.FeaturePolygonDictStrRioTilerModelsInfoType"],
        geometry: "_models.Polygon",
        properties: Dict[str, "_models.RioTilerModelsInfo"],
        id: Optional[Any] = None,  # pylint: disable=redefined-builtin
        bbox: Optional[Any] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class FeatureProperties(_model_base.Model):
    """Properties."""


class GeoCatalogCollection(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """GeoCatalogCollection.

    All required parameters must be populated in order to send to server.

    :ivar type: Type. Required. "Collection"
    :vartype type: str or ~spatio.models.GeoCatalogCollectionType
    :ivar stac_version: Stac Version. Required.
    :vartype stac_version: str
    :ivar id: Id. Required.
    :vartype id: str
    :ivar description: Description. Required.
    :vartype description: str
    :ivar links: Links. Required.
    :vartype links: list[dict[str, any]]
    :ivar license: License. Required.
    :vartype license: str
    :ivar extent: Extent. Required.
    :vartype extent: dict[str, any]
    :ivar stac_extensions: Stac Extensions.
    :vartype stac_extensions: list[str]
    :ivar title: Title.
    :vartype title: str
    :ivar keywords: Keywords.
    :vartype keywords: list[str]
    :ivar providers: Providers.
    :vartype providers: list[dict[str, any]]
    :ivar assets: Assets.
    :vartype assets: dict[str, any]
    :ivar summaries: Summaries.
    :vartype summaries: dict[str, any]
    :ivar msft_short_description: Msft:Short Description.
    :vartype msft_short_description: str
    """

    type: Union[str, "_models.GeoCatalogCollectionType"] = rest_field()
    """Type. Required. \"Collection\""""
    stac_version: str = rest_field()
    """Stac Version. Required."""
    id: str = rest_field()
    """Id. Required."""
    description: str = rest_field()
    """Description. Required."""
    links: List[Dict[str, Any]] = rest_field()
    """Links. Required."""
    license: str = rest_field()
    """License. Required."""
    extent: Dict[str, Any] = rest_field()
    """Extent. Required."""
    stac_extensions: Optional[List[str]] = rest_field()
    """Stac Extensions."""
    title: Optional[str] = rest_field()
    """Title."""
    keywords: Optional[List[str]] = rest_field()
    """Keywords."""
    providers: Optional[List[Dict[str, Any]]] = rest_field()
    """Providers."""
    assets: Optional[Dict[str, Any]] = rest_field()
    """Assets."""
    summaries: Optional[Dict[str, Any]] = rest_field()
    """Summaries."""
    msft_short_description: Optional[str] = rest_field(name="msft:short_description")
    """Msft:Short Description."""

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.GeoCatalogCollectionType"],
        stac_version: str,
        id: str,  # pylint: disable=redefined-builtin
        description: str,
        links: List[Dict[str, Any]],
        license: str,
        extent: Dict[str, Any],
        stac_extensions: Optional[List[str]] = None,
        title: Optional[str] = None,
        keywords: Optional[List[str]] = None,
        providers: Optional[List[Dict[str, Any]]] = None,
        assets: Optional[Dict[str, Any]] = None,
        summaries: Optional[Dict[str, Any]] = None,
        msft_short_description: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Geojson(_model_base.Model):
    """GeoJSON Feature or FeatureCollection."""


class Geojson0(Feature):
    """GeoJSON Feature.

    All required parameters must be populated in order to send to server.

    :ivar type: Type. Required. "Feature"
    :vartype type: str or ~spatio.models.FeatureType
    :ivar geometry: Geometry. Required.
    :vartype geometry: ~spatio.models.FeatureGeometry
    :ivar properties: Properties. Required.
    :vartype properties: ~spatio.models.FeatureProperties
    :ivar id: Id.
    :vartype id: any
    :ivar bbox: Bbox.
    :vartype bbox: any
    """

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.FeatureType"],
        geometry: "_models.FeatureGeometry",
        properties: "_models.FeatureProperties",
        id: Optional[Any] = None,  # pylint: disable=redefined-builtin
        bbox: Optional[Any] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Geojson1(Feature):
    """GeoJSON Feature.

    All required parameters must be populated in order to send to server.

    :ivar type: Type. Required. "Feature"
    :vartype type: str or ~spatio.models.FeatureType
    :ivar geometry: Geometry. Required.
    :vartype geometry: ~spatio.models.FeatureGeometry
    :ivar properties: Properties. Required.
    :vartype properties: ~spatio.models.FeatureProperties
    :ivar id: Id.
    :vartype id: any
    :ivar bbox: Bbox.
    :vartype bbox: any
    """

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.FeatureType"],
        geometry: "_models.FeatureGeometry",
        properties: "_models.FeatureProperties",
        id: Optional[Any] = None,  # pylint: disable=redefined-builtin
        bbox: Optional[Any] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Geojson2(Feature):
    """GeoJSON Feature.

    All required parameters must be populated in order to send to server.

    :ivar type: Type. Required. "Feature"
    :vartype type: str or ~spatio.models.FeatureType
    :ivar geometry: Geometry. Required.
    :vartype geometry: ~spatio.models.FeatureGeometry
    :ivar properties: Properties. Required.
    :vartype properties: ~spatio.models.FeatureProperties
    :ivar id: Id.
    :vartype id: any
    :ivar bbox: Bbox.
    :vartype bbox: any
    """

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.FeatureType"],
        geometry: "_models.FeatureGeometry",
        properties: "_models.FeatureProperties",
        id: Optional[Any] = None,  # pylint: disable=redefined-builtin
        bbox: Optional[Any] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ImageRequest(_model_base.Model):
    """ImageRequest.

    All required parameters must be populated in order to send to server.

    :ivar cql: Cql. Required.
    :vartype cql: dict[str, any]
    :ivar geometry: Geometry.
    :vartype geometry: dict[str, any]
    :ivar render_params: Render Params. Required.
    :vartype render_params: str
    :ivar cols: Cols. Required.
    :vartype cols: int
    :ivar rows: Rows. Required.
    :vartype rows: int
    :ivar format: Known values are: "png" and "cog".
    :vartype format: str or ~spatio.models.ImageRequestFormat
    :ivar show_branding: Showbranding.
    :vartype show_branding: bool
    :ivar mask: Mask.
    :vartype mask: bool
    """

    cql: Dict[str, Any] = rest_field()
    """Cql. Required."""
    geometry: Optional[Dict[str, Any]] = rest_field()
    """Geometry."""
    render_params: str = rest_field()
    """Render Params. Required."""
    cols: int = rest_field()
    """Cols. Required."""
    rows: int = rest_field()
    """Rows. Required."""
    format: Optional[Union[str, "_models.ImageRequestFormat"]] = rest_field()
    """Known values are: \"png\" and \"cog\"."""
    show_branding: Optional[bool] = rest_field(name="showBranding")
    """Showbranding."""
    mask: Optional[bool] = rest_field()
    """Mask."""

    @overload
    def __init__(
        self,
        *,
        cql: Dict[str, Any],
        render_params: str,
        cols: int,
        rows: int,
        geometry: Optional[Dict[str, Any]] = None,
        format: Optional[Union[str, "_models.ImageRequestFormat"]] = None,
        show_branding: Optional[bool] = None,
        mask: Optional[bool] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ImageResponse(_model_base.Model):
    """ImageResponse.


    :ivar url: Url. Required.
    :vartype url: str
    """

    url: str = rest_field()
    """Url. Required."""

    @overload
    def __init__(
        self,
        *,
        url: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class IngestionDefinitionCreation(_model_base.Model):
    """Spatio geo-catalog ingestion creation model.

    All required parameters must be populated in order to send to server.

    :ivar import_type: Ingestion type. Required. Known values are: "StaticCatalog" and
     "ImportFile".
    :vartype import_type: str or ~spatio.models.IngestionType
    :ivar source_catalog_url: Source catalog URL. *Required for StaticCatalog ingestion type.
    :vartype source_catalog_url: str
    :ivar source_data_type: Source catalog data type. *Required for ImportFile ingestion type.
    :vartype source_data_type: str
    :ivar skip_existing_items: Skip processing existing items in the catalog. Required.
    :vartype skip_existing_items: bool
    :ivar keep_original_assets: Keep original source assets. Required.
    :vartype keep_original_assets: bool
    """

    import_type: Union[str, "_models.IngestionType"] = rest_field(name="importType")
    """Ingestion type. Required. Known values are: \"StaticCatalog\" and \"ImportFile\"."""
    source_catalog_url: Optional[str] = rest_field(name="sourceCatalogUrl")
    """Source catalog URL. *Required for StaticCatalog ingestion type."""
    source_data_type: Optional[str] = rest_field(name="sourceDataType")
    """Source catalog data type. *Required for ImportFile ingestion type."""
    skip_existing_items: bool = rest_field(name="skipExistingItems")
    """Skip processing existing items in the catalog. Required."""
    keep_original_assets: bool = rest_field(name="keepOriginalAssets")
    """Keep original source assets. Required."""

    @overload
    def __init__(
        self,
        *,
        import_type: Union[str, "_models.IngestionType"],
        skip_existing_items: bool,
        keep_original_assets: bool,
        source_catalog_url: Optional[str] = None,
        source_data_type: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class IngestionDefinition(IngestionDefinitionCreation):
    """Spatio geo-catalog ingestion definition.


    :ivar import_type: Ingestion type. Required. Known values are: "StaticCatalog" and
     "ImportFile".
    :vartype import_type: str or ~spatio.models.IngestionType
    :ivar source_catalog_url: Source catalog URL. *Required for StaticCatalog ingestion type.
    :vartype source_catalog_url: str
    :ivar source_data_type: Source catalog data type. *Required for ImportFile ingestion type.
    :vartype source_data_type: str
    :ivar skip_existing_items: Skip processing existing items in the catalog. Required.
    :vartype skip_existing_items: bool
    :ivar keep_original_assets: Keep original source assets. Required.
    :vartype keep_original_assets: bool
    :ivar id: Ingestion id. Required.
    :vartype id: str
    :ivar creation_time: Ingestion creation time. Required.
    :vartype creation_time: ~datetime.datetime
    """

    id: str = rest_field()
    """Ingestion id. Required."""
    creation_time: datetime.datetime = rest_field(name="creationTime", format="rfc3339")
    """Ingestion creation time. Required."""

    @overload
    def __init__(
        self,
        *,
        import_type: Union[str, "_models.IngestionType"],
        skip_existing_items: bool,
        keep_original_assets: bool,
        id: str,  # pylint: disable=redefined-builtin
        creation_time: datetime.datetime,
        source_catalog_url: Optional[str] = None,
        source_data_type: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class IngestionRun(_model_base.Model):
    """Spatio geo-catalog ingestion run.


    :ivar id: Run id. Required.
    :vartype id: str
    :ivar parent_run_id: Run id which this run is associated to becase has been retried or rerun.
    :vartype parent_run_id: str
    :ivar operation: Operation. Required.
    :vartype operation: ~spatio.models.Operation
    """

    id: str = rest_field()
    """Run id. Required."""
    parent_run_id: Optional[str] = rest_field(name="parentRunId")
    """Run id which this run is associated to becase has been retried or rerun."""
    operation: "_models.Operation" = rest_field()
    """Operation. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        operation: "_models.Operation",
        parent_run_id: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class IngestionRunSummary(_model_base.Model):
    """Spatio geo-catalog ingestion run summary.


    :ivar id: Run id. Required.
    :vartype id: str
    :ivar operation: Operation summary. Required.
    :vartype operation: ~spatio.models.OperationSummary
    """

    id: str = rest_field()
    """Run id. Required."""
    operation: "_models.OperationSummary" = rest_field()
    """Operation summary. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        operation: "_models.OperationSummary",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class InmaLink(_model_base.Model):
    """InmaLink.

    All required parameters must be populated in order to send to server.

    :ivar rel: Required.
    :vartype rel: str
    :ivar href: Required.
    :vartype href: str
    :ivar type: Required.
    :vartype type: str
    :ivar title: Required.
    :vartype title: str
    """

    rel: str = rest_field()
    """Required."""
    href: str = rest_field()
    """Required."""
    type: str = rest_field()
    """Required."""
    title: str = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        rel: str,
        href: str,
        type: str,
        title: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class LegendConfig(_model_base.Model):
    """Defines settings to customize legend generation.

    :ivar type: Legend type to make, one of: ``continuous``\\ , ``classmap``\\ , ``interval`` or
     ``none``
     (note, ``none`` is a string literal). Known values are: "continuous", "classmap", "interval",
     and "none".
    :vartype type: str or ~spatio.models.LegendConfigType
    :ivar labels: List of string labels that will be flex spaced-between under the legend image.
    :vartype labels: list[str]
    :ivar trim_start: The number of items to trim from the start of the legend definition. Used if
     there are values important for rendering (e.g. nodata) that aren't desirable in
     the legend.
    :vartype trim_start: int
    :ivar trim_end: Same as trim_start, but for the end of the legend definition.
    :vartype trim_end: int
    :ivar scale_factor: A factor to multiply interval legend labels by. Useful for scaled rasters
     whose
     colormap definitions map to unscaled values, effectively showing legend labels
     as scaled values.
    :vartype scale_factor: float
    """

    type: Optional[Union[str, "_models.LegendConfigType"]] = rest_field()
    """Legend type to make, one of: ``continuous``\ , ``classmap``\ , ``interval`` or ``none``
     (note, ``none`` is a string literal). Known values are: \"continuous\", \"classmap\",
     \"interval\", and \"none\"."""
    labels: Optional[List[str]] = rest_field()
    """List of string labels that will be flex spaced-between under the legend image."""
    trim_start: Optional[int] = rest_field(name="trimStart")
    """The number of items to trim from the start of the legend definition. Used if
     there are values important for rendering (e.g. nodata) that aren't desirable in
     the legend."""
    trim_end: Optional[int] = rest_field(name="trimEnd")
    """Same as trim_start, but for the end of the legend definition."""
    scale_factor: Optional[float] = rest_field(name="scaleFactor")
    """A factor to multiply interval legend labels by. Useful for scaled rasters whose
     colormap definitions map to unscaled values, effectively showing legend labels
     as scaled values."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.LegendConfigType"]] = None,
        labels: Optional[List[str]] = None,
        trim_start: Optional[int] = None,
        trim_end: Optional[int] = None,
        scale_factor: Optional[float] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Link(_model_base.Model):
    """Link model.

    Ref:
    http://schemas.opengis.net/ogcapi/features/part1/1.0/openapi/schemas/link.yaml.


    :ivar rel: Rel.
    :vartype rel: str
    :ivar title: Title.
    :vartype title: str
    :ivar type: Known values are: "image/tiff; application=geotiff", "image/jp2", "image/png",
     "image/jpeg", "image/jpg", "image/webp", "application/x-binary", "application/xml",
     "application/json", "application/geo+json", "text/html", "text/plain", and
     "application/x-protobuf".
    :vartype type: str or ~spatio.models.LinkType
    :ivar href: Href. Required.
    :vartype href: str
    :ivar hreflang: Hreflang.
    :vartype hreflang: str
    :ivar length: Length.
    :vartype length: int
    """

    rel: Optional[str] = rest_field()
    """Rel."""
    title: Optional[str] = rest_field()
    """Title."""
    type: Optional[Union[str, "_models.LinkType"]] = rest_field()
    """Known values are: \"image/tiff; application=geotiff\", \"image/jp2\", \"image/png\",
     \"image/jpeg\", \"image/jpg\", \"image/webp\", \"application/x-binary\", \"application/xml\",
     \"application/json\", \"application/geo+json\", \"text/html\", \"text/plain\", and
     \"application/x-protobuf\"."""
    href: str = rest_field()
    """Href. Required."""
    hreflang: Optional[str] = rest_field()
    """Hreflang."""
    length: Optional[int] = rest_field()
    """Length."""

    @overload
    def __init__(
        self,
        *,
        href: str,
        rel: Optional[str] = None,
        title: Optional[str] = None,
        type: Optional[Union[str, "_models.LinkType"]] = None,
        hreflang: Optional[str] = None,
        length: Optional[int] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Metadata(_model_base.Model):
    """Metadata Model.

    :ivar type: Type. Known values are: "mosaic" and "search".
    :vartype type: str or ~spatio.models.MetadataType
    :ivar bounds: Bounds.
    :vartype bounds: any
    :ivar minzoom: Minzoom.
    :vartype minzoom: int
    :ivar maxzoom: Maxzoom.
    :vartype maxzoom: int
    :ivar name: Name.
    :vartype name: str
    :ivar assets: Assets.
    :vartype assets: list[str]
    :ivar defaults: Defaults.
    :vartype defaults: dict[str, any]
    """

    type: Optional[Union[str, "_models.MetadataType"]] = rest_field()
    """Type. Known values are: \"mosaic\" and \"search\"."""
    bounds: Optional[Any] = rest_field()
    """Bounds."""
    minzoom: Optional[int] = rest_field()
    """Minzoom."""
    maxzoom: Optional[int] = rest_field()
    """Maxzoom."""
    name: Optional[str] = rest_field()
    """Name."""
    assets: Optional[List[str]] = rest_field()
    """Assets."""
    defaults: Optional[Dict[str, Any]] = rest_field()
    """Defaults."""

    @overload
    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.MetadataType"]] = None,
        bounds: Optional[Any] = None,
        minzoom: Optional[int] = None,
        maxzoom: Optional[int] = None,
        name: Optional[str] = None,
        assets: Optional[List[str]] = None,
        defaults: Optional[Dict[str, Any]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Mosaic(_model_base.Model):
    """A single predefined CQL2-JSON query representing a named mosaic.

    All required parameters must be populated in order to send to server.

    :ivar id: A unique identifier for this mosaic. Required.
    :vartype id: str
    :ivar name: A short name for this mosaic that describes its content. Required.
    :vartype name: str
    :ivar description: A longer description of the mosaic contents.
    :vartype description: str
    :ivar cql: A list of valid CQL2-JSON expressions used to filter the collection to moasic.
     Required.
    :vartype cql: list[dict[str, any]]
    """

    id: str = rest_field()
    """A unique identifier for this mosaic. Required."""
    name: str = rest_field()
    """A short name for this mosaic that describes its content. Required."""
    description: Optional[str] = rest_field()
    """A longer description of the mosaic contents."""
    cql: List[Dict[str, Any]] = rest_field()
    """A list of valid CQL2-JSON expressions used to filter the collection to moasic. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        cql: List[Dict[str, Any]],
        description: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class MosaicInfo(_model_base.Model):
    """MosaicInfo.


    :ivar mosaics: Mosaics. Required.
    :vartype mosaics: list[~spatio.models.Mosaic]
    :ivar render_options: Renderoptions. Required.
    :vartype render_options: list[~spatio.models.RenderOption]
    :ivar default_location: Defines a default location for showcasing a collection.
    :vartype default_location: ~spatio.models.DefaultLocation
    :ivar default_custom_query: A list of CQL-JSON expressions to use as the default for  this
     collection.
    :vartype default_custom_query: dict[str, any]
    """

    mosaics: List["_models.Mosaic"] = rest_field()
    """Mosaics. Required."""
    render_options: List["_models.RenderOption"] = rest_field(name="renderOptions")
    """Renderoptions. Required."""
    default_location: Optional["_models.DefaultLocation"] = rest_field(name="defaultLocation")
    """Defines a default location for showcasing a collection."""
    default_custom_query: Optional[Dict[str, Any]] = rest_field(name="defaultCustomQuery")
    """A list of CQL-JSON expressions to use as the default for  this collection."""

    @overload
    def __init__(
        self,
        *,
        mosaics: List["_models.Mosaic"],
        render_options: List["_models.RenderOption"],
        default_location: Optional["_models.DefaultLocation"] = None,
        default_custom_query: Optional[Dict[str, Any]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class OperationSummary(_model_base.Model):
    """Spatio geo-catalog operation summary.


    :ivar id: Operation id. Required.
    :vartype id: str
    :ivar status: Run status. Required. Known values are: "Pending", "Running", "Finished", and
     "Canceled".
    :vartype status: str or ~spatio.models.OperationStatus
    """

    id: str = rest_field()
    """Operation id. Required."""
    status: Union[str, "_models.OperationStatus"] = rest_field()
    """Run status. Required. Known values are: \"Pending\", \"Running\", \"Finished\", and
     \"Canceled\"."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        status: Union[str, "_models.OperationStatus"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Operation(OperationSummary):
    """Spatio geo-catalog operation.


    :ivar id: Operation id. Required.
    :vartype id: str
    :ivar status: Run status. Required. Known values are: "Pending", "Running", "Finished", and
     "Canceled".
    :vartype status: str or ~spatio.models.OperationStatus
    :ivar creation_time: The UTC time at which the operation was created. Required.
    :vartype creation_time: ~datetime.datetime
    :ivar status_history: The history of the operation status in time. Required.
    :vartype status_history: list[~spatio.models.OperationStatusHistoryItem]
    :ivar start_time: The UTC time at which the operation was started.
    :vartype start_time: ~datetime.datetime
    :ivar finish_time: The UTC time at which the operation finished its execution.
    :vartype finish_time: ~datetime.datetime
    :ivar total_items: The number of total items to be processed. Required.
    :vartype total_items: int
    :ivar total_pending_items: The number of items pending to be processed. Required.
    :vartype total_pending_items: int
    :ivar total_successfull_items: The number of items successfully processed. Required.
    :vartype total_successfull_items: int
    :ivar total_failed_items: The number of items that have failed to be processed. Required.
    :vartype total_failed_items: int
    """

    creation_time: datetime.datetime = rest_field(name="creationTime", format="rfc3339")
    """The UTC time at which the operation was created. Required."""
    status_history: List["_models.OperationStatusHistoryItem"] = rest_field(name="statusHistory")
    """The history of the operation status in time. Required."""
    start_time: Optional[datetime.datetime] = rest_field(name="startTime", format="rfc3339")
    """The UTC time at which the operation was started."""
    finish_time: Optional[datetime.datetime] = rest_field(name="finishTime", format="rfc3339")
    """The UTC time at which the operation finished its execution."""
    total_items: int = rest_field(name="totalItems")
    """The number of total items to be processed. Required."""
    total_pending_items: int = rest_field(name="totalPendingItems")
    """The number of items pending to be processed. Required."""
    total_successfull_items: int = rest_field(name="totalSuccessfullItems")
    """The number of items successfully processed. Required."""
    total_failed_items: int = rest_field(name="totalFailedItems")
    """The number of items that have failed to be processed. Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        status: Union[str, "_models.OperationStatus"],
        creation_time: datetime.datetime,
        status_history: List["_models.OperationStatusHistoryItem"],
        total_items: int,
        total_pending_items: int,
        total_successfull_items: int,
        total_failed_items: int,
        start_time: Optional[datetime.datetime] = None,
        finish_time: Optional[datetime.datetime] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class OperationStatusHistoryItem(_model_base.Model):
    """OperationStatusHistoryItem.


    :ivar time: The UTC time at which the status was set. Required.
    :vartype time: ~datetime.datetime
    :ivar status: The status of the operation. Required. Known values are: "Pending", "Running",
     "Finished", and "Canceled".
    :vartype status: str or ~spatio.models.OperationStatus
    :ivar error_message: If the status is failed, the error message.
    :vartype error_message: str
    """

    time: datetime.datetime = rest_field(format="rfc3339")
    """The UTC time at which the status was set. Required."""
    status: Union[str, "_models.OperationStatus"] = rest_field()
    """The status of the operation. Required. Known values are: \"Pending\", \"Running\",
     \"Finished\", and \"Canceled\"."""
    error_message: Optional[str] = rest_field(name="errorMessage")
    """If the status is failed, the error message."""

    @overload
    def __init__(
        self,
        *,
        time: datetime.datetime,
        status: Union[str, "_models.OperationStatus"],
        error_message: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class PartitionType(_model_base.Model):
    """PartitionType.

    :ivar scheme: The type of partitioning to use. Known values are: "year", "month", and "none".
    :vartype scheme: str or ~spatio.models.PartitionTypeScheme
    """

    scheme: Optional[Union[str, "_models.PartitionTypeScheme"]] = rest_field()
    """The type of partitioning to use. Known values are: \"year\", \"month\", and \"none\"."""

    @overload
    def __init__(
        self,
        *,
        scheme: Optional[Union[str, "_models.PartitionTypeScheme"]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Polygon(_model_base.Model):
    """Polygon Model.


    :ivar coordinates: Coordinates. Required.
    :vartype coordinates: list[list[any]]
    :ivar type: Type. Required. "Polygon"
    :vartype type: str or ~spatio.models.PolygonType
    :ivar bbox: Bbox.
    :vartype bbox: any
    """

    coordinates: List[List[Any]] = rest_field()
    """Coordinates. Required."""
    type: Union[str, "_models.PolygonType"] = rest_field()
    """Type. Required. \"Polygon\""""
    bbox: Optional[Any] = rest_field()
    """Bbox."""

    @overload
    def __init__(
        self,
        *,
        coordinates: List[List[Any]],
        type: Union[str, "_models.PolygonType"],
        bbox: Optional[Any] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class PostFieldsExtension(_model_base.Model):
    """FieldsExtension.

    Attributes:
    include: set of fields to include.
    exclude: set of fields to exclude.

    :ivar include: Include.
    :vartype include: list[str]
    :ivar exclude: Exclude.
    :vartype exclude: list[str]
    """

    include: Optional[List[str]] = rest_field()
    """Include."""
    exclude: Optional[List[str]] = rest_field()
    """Exclude."""

    @overload
    def __init__(
        self,
        *,
        include: Optional[List[str]] = None,
        exclude: Optional[List[str]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Properties(_model_base.Model):
    """Properties.

    All required parameters must be populated in order to send to server.

    :ivar datetime: Required.
    :vartype datetime: str
    """

    datetime: str = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        datetime: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class QueryableDefinition(_model_base.Model):
    """QueryableDefinition.

    All required parameters must be populated in order to send to server.

    :ivar name: Name. Required.
    :vartype name: str
    :ivar definition: Definition. Required.
    :vartype definition: dict[str, any]
    :ivar create_index: Create Index.
    :vartype create_index: bool
    :ivar data_type: Known values are: "number", "float", "text", and "array".
    :vartype data_type: str or ~spatio.models.QueryableDefinitionDataType
    """

    name: str = rest_field()
    """Name. Required."""
    definition: Dict[str, Any] = rest_field()
    """Definition. Required."""
    create_index: Optional[bool] = rest_field()
    """Create Index."""
    data_type: Optional[Union[str, "_models.QueryableDefinitionDataType"]] = rest_field()
    """Known values are: \"number\", \"float\", \"text\", and \"array\"."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        definition: Dict[str, Any],
        create_index: Optional[bool] = None,
        data_type: Optional[Union[str, "_models.QueryableDefinitionDataType"]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class RegisterMosaic(_model_base.Model):
    """Model of /register endpoint input.

    :ivar collections: Collections.
    :vartype collections: list[str]
    :ivar ids: Ids.
    :vartype ids: list[str]
    :ivar bbox: Bbox.
    :vartype bbox: any
    :ivar intersects: Intersects.
    :vartype intersects: ~spatio.models.RegisterMosaicIntersects
    :ivar query: Query.
    :vartype query: dict[str, dict[str, any]]
    :ivar filter: Filter.
    :vartype filter: dict[str, any]
    :ivar datetime: Datetime.
    :vartype datetime: str
    :ivar sortby: Sortby.
    :vartype sortby: any
    :ivar filter_lang: Filter-Lang. Known values are: "cql-json", "cql-text", and "cql2-json".
    :vartype filter_lang: str or ~spatio.models.RegisterMosaicFilterLang
    :ivar metadata: Metadata Model.
    :vartype metadata: ~spatio.models.Metadata
    """

    collections: Optional[List[str]] = rest_field()
    """Collections."""
    ids: Optional[List[str]] = rest_field()
    """Ids."""
    bbox: Optional[Any] = rest_field()
    """Bbox."""
    intersects: Optional["_models.RegisterMosaicIntersects"] = rest_field()
    """Intersects."""
    query: Optional[Dict[str, Dict[str, Any]]] = rest_field()
    """Query."""
    filter: Optional[Dict[str, Any]] = rest_field()
    """Filter."""
    datetime: Optional[str] = rest_field()
    """Datetime."""
    sortby: Optional[Any] = rest_field()
    """Sortby."""
    filter_lang: Optional[Union[str, "_models.RegisterMosaicFilterLang"]] = rest_field(name="filter-lang")
    """Filter-Lang. Known values are: \"cql-json\", \"cql-text\", and \"cql2-json\"."""
    metadata: Optional["_models.Metadata"] = rest_field()
    """Metadata Model."""

    @overload
    def __init__(
        self,
        *,
        collections: Optional[List[str]] = None,
        ids: Optional[List[str]] = None,
        bbox: Optional[Any] = None,
        intersects: Optional["_models.RegisterMosaicIntersects"] = None,
        query: Optional[Dict[str, Dict[str, Any]]] = None,
        filter: Optional[Dict[str, Any]] = None,  # pylint: disable=redefined-builtin
        datetime: Optional[str] = None,
        sortby: Optional[Any] = None,
        filter_lang: Optional[Union[str, "_models.RegisterMosaicFilterLang"]] = None,
        metadata: Optional["_models.Metadata"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class RegisterMosaicIntersects(_model_base.Model):
    """Intersects."""


class RegisterResponse(_model_base.Model):
    """Response model for /register endpoint.


    :ivar searchid: Searchid. Required.
    :vartype searchid: str
    :ivar links: Links.
    :vartype links: list[~spatio.models.Link]
    """

    searchid: str = rest_field()
    """Searchid. Required."""
    links: Optional[List["_models.Link"]] = rest_field()
    """Links."""

    @overload
    def __init__(
        self,
        *,
        searchid: str,
        links: Optional[List["_models.Link"]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class RenderOption(_model_base.Model):
    """Defines a set of map-tile render options for a collection.

    All required parameters must be populated in order to send to server.

    :ivar id: A unique identifier for this render option. Required.
    :vartype id: str
    :ivar name: A short name for this render option that describes its content. Required.
    :vartype name: str
    :ivar description: A longer description of the render option that can be used to explain its
     content.
    :vartype description: str
    :ivar type: The type of render option. Known values are: "raster-tile", "vt-polygon", and
     "vt-line".
    :vartype type: str or ~spatio.models.RenderOptionType
    :ivar options: A URL query-string encoded string of TiTiler rendering options. Valid only for
     ``raster-tile`` types.  See 'Query Parameters':
     https://developmentseed.org/titiler/endpoints/cog/#description.
    :vartype options: str
    :ivar vector_options: Options for rendering vector tiles. Valid only for ``vt-polygon``  and
     ``vt-line``
     types.
    :vartype vector_options: ~spatio.models.RenderOptionVectorOptions
    :ivar min_zoom: Zoom level at which to start rendering the layer.
    :vartype min_zoom: int
    :ivar legend: An optional legend configuration.
    :vartype legend: ~spatio.models.RenderOptionLegend
    :ivar conditions: A list of property/value conditions that must be in the active mosaic CQL for
     this render option to be enabled.
    :vartype conditions: list[~spatio.models.RenderOptionCondition]
    """

    id: str = rest_field()
    """A unique identifier for this render option. Required."""
    name: str = rest_field()
    """A short name for this render option that describes its content. Required."""
    description: Optional[str] = rest_field()
    """A longer description of the render option that can be used to explain its
     content."""
    type: Optional[Union[str, "_models.RenderOptionType"]] = rest_field()
    """The type of render option. Known values are: \"raster-tile\", \"vt-polygon\", and \"vt-line\"."""
    options: Optional[str] = rest_field()
    """A URL query-string encoded string of TiTiler rendering options. Valid only for
     ``raster-tile`` types.  See 'Query Parameters':
     https://developmentseed.org/titiler/endpoints/cog/#description."""
    vector_options: Optional["_models.RenderOptionVectorOptions"] = rest_field(name="vectorOptions")
    """Options for rendering vector tiles. Valid only for ``vt-polygon``  and ``vt-line``
     types."""
    min_zoom: Optional[int] = rest_field(name="minZoom")
    """Zoom level at which to start rendering the layer."""
    legend: Optional["_models.RenderOptionLegend"] = rest_field()
    """An optional legend configuration."""
    conditions: Optional[List["_models.RenderOptionCondition"]] = rest_field()
    """A list of property/value conditions that must be in the active mosaic CQL for
     this render option to be enabled."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        name: str,
        description: Optional[str] = None,
        type: Optional[Union[str, "_models.RenderOptionType"]] = None,
        options: Optional[str] = None,
        vector_options: Optional["_models.RenderOptionVectorOptions"] = None,
        min_zoom: Optional[int] = None,
        legend: Optional["_models.RenderOptionLegend"] = None,
        conditions: Optional[List["_models.RenderOptionCondition"]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class RenderOptionCondition(_model_base.Model):
    """Defines a property/value condition for a render config to be enabled.

    All required parameters must be populated in order to send to server.

    :ivar property: The property attribute name to check. Required.
    :vartype property: str
    :ivar value: The value on which to perform an equality check.
    :vartype value: any
    """

    property: str = rest_field()
    """The property attribute name to check. Required."""
    value: Optional[Any] = rest_field()
    """The value on which to perform an equality check."""

    @overload
    def __init__(
        self,
        *,
        property: str,  # pylint: disable=redefined-builtin
        value: Optional[Any] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class RenderOptionLegend(LegendConfig):
    """An optional legend configuration.

    :ivar type: Legend type to make, one of: ``continuous``\\ , ``classmap``\\ , ``interval`` or
     ``none``
     (note, ``none`` is a string literal). Known values are: "continuous", "classmap", "interval",
     and "none".
    :vartype type: str or ~spatio.models.LegendConfigType
    :ivar labels: List of string labels that will be flex spaced-between under the legend image.
    :vartype labels: list[str]
    :ivar trim_start: The number of items to trim from the start of the legend definition. Used if
     there are values important for rendering (e.g. nodata) that aren't desirable in
     the legend.
    :vartype trim_start: int
    :ivar trim_end: Same as trim_start, but for the end of the legend definition.
    :vartype trim_end: int
    :ivar scale_factor: A factor to multiply interval legend labels by. Useful for scaled rasters
     whose
     colormap definitions map to unscaled values, effectively showing legend labels
     as scaled values.
    :vartype scale_factor: float
    """

    @overload
    def __init__(
        self,
        *,
        type: Optional[Union[str, "_models.LegendConfigType"]] = None,
        labels: Optional[List[str]] = None,
        trim_start: Optional[int] = None,
        trim_end: Optional[int] = None,
        scale_factor: Optional[float] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class VectorTileOptions(_model_base.Model):
    """Defines a set of vector tile render options for a collection.

    All required parameters must be populated in order to send to server.

    :ivar tilejson_key: The key in the collection-level assets which contains the tilejson URL.
     Required.
    :vartype tilejson_key: str
    :ivar source_layer: The source layer name to render from the associated vector tiles. Required.
    :vartype source_layer: str
    :ivar fill_color: The css-style fill color for polygons. Can be hex or rgba().
    :vartype fill_color: str
    :ivar stroke_color: The css-style stroke color for lines. Can be hex or rgba().
    :vartype stroke_color: str
    :ivar stroke_width: The stroke width for lines.
    :vartype stroke_width: int
    :ivar filter: MapBox Filter Expression to filter vector features by.
    :vartype filter: list[any]
    """

    tilejson_key: str = rest_field(name="tilejsonKey")
    """The key in the collection-level assets which contains the tilejson URL. Required."""
    source_layer: str = rest_field(name="sourceLayer")
    """The source layer name to render from the associated vector tiles. Required."""
    fill_color: Optional[str] = rest_field(name="fillColor")
    """The css-style fill color for polygons. Can be hex or rgba()."""
    stroke_color: Optional[str] = rest_field(name="strokeColor")
    """The css-style stroke color for lines. Can be hex or rgba()."""
    stroke_width: Optional[int] = rest_field(name="strokeWidth")
    """The stroke width for lines."""
    filter: Optional[List[Any]] = rest_field()
    """MapBox Filter Expression to filter vector features by."""

    @overload
    def __init__(
        self,
        *,
        tilejson_key: str,
        source_layer: str,
        fill_color: Optional[str] = None,
        stroke_color: Optional[str] = None,
        stroke_width: Optional[int] = None,
        filter: Optional[List[Any]] = None,  # pylint: disable=redefined-builtin
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class RenderOptionVectorOptions(VectorTileOptions):
    """Options for rendering vector tiles. Valid only for ``vt-polygon``  and ``vt-line``
    types.

    All required parameters must be populated in order to send to server.

    :ivar tilejson_key: The key in the collection-level assets which contains the tilejson URL.
     Required.
    :vartype tilejson_key: str
    :ivar source_layer: The source layer name to render from the associated vector tiles. Required.
    :vartype source_layer: str
    :ivar fill_color: The css-style fill color for polygons. Can be hex or rgba().
    :vartype fill_color: str
    :ivar stroke_color: The css-style stroke color for lines. Can be hex or rgba().
    :vartype stroke_color: str
    :ivar stroke_width: The stroke width for lines.
    :vartype stroke_width: int
    :ivar filter: MapBox Filter Expression to filter vector features by.
    :vartype filter: list[any]
    """

    @overload
    def __init__(
        self,
        *,
        tilejson_key: str,
        source_layer: str,
        fill_color: Optional[str] = None,
        stroke_color: Optional[str] = None,
        stroke_width: Optional[int] = None,
        filter: Optional[List[Any]] = None,  # pylint: disable=redefined-builtin
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class RioTilerModelsInfo(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Dataset Info.


    :ivar bounds: Bounds. Required.
    :vartype bounds: list[any]
    :ivar minzoom: Minzoom. Required.
    :vartype minzoom: int
    :ivar maxzoom: Maxzoom. Required.
    :vartype maxzoom: int
    :ivar band_metadata: Band Metadata. Required.
    :vartype band_metadata: list[list[str]]
    :ivar band_descriptions: Band Descriptions. Required.
    :vartype band_descriptions: list[list[str]]
    :ivar dtype: Dtype. Required.
    :vartype dtype: str
    :ivar nodata_type: rio-tiler Nodata types. Required. Known values are: "Alpha", "Mask",
     "Internal", "Nodata", and "None".
    :vartype nodata_type: str or ~spatio.models.NodataTypes
    :ivar colorinterp: Colorinterp.
    :vartype colorinterp: list[str]
    :ivar scale: Scale.
    :vartype scale: float
    :ivar offset: Offset.
    :vartype offset: float
    :ivar colormap: Colormap.
    :vartype colormap: dict[str, list[int]]
    """

    bounds: List[Any] = rest_field()
    """Bounds. Required."""
    minzoom: int = rest_field()
    """Minzoom. Required."""
    maxzoom: int = rest_field()
    """Maxzoom. Required."""
    band_metadata: List[List[str]] = rest_field()
    """Band Metadata. Required."""
    band_descriptions: List[List[str]] = rest_field()
    """Band Descriptions. Required."""
    dtype: str = rest_field()
    """Dtype. Required."""
    nodata_type: Union[str, "_models.NodataTypes"] = rest_field()
    """rio-tiler Nodata types. Required. Known values are: \"Alpha\", \"Mask\", \"Internal\",
     \"Nodata\", and \"None\"."""
    colorinterp: Optional[List[str]] = rest_field()
    """Colorinterp."""
    scale: Optional[float] = rest_field()
    """Scale."""
    offset: Optional[float] = rest_field()
    """Offset."""
    colormap: Optional[Dict[str, List[int]]] = rest_field()
    """Colormap."""

    @overload
    def __init__(
        self,
        *,
        bounds: List[Any],
        minzoom: int,
        maxzoom: int,
        band_metadata: List[List[str]],
        band_descriptions: List[List[str]],
        dtype: str,
        nodata_type: Union[str, "_models.NodataTypes"],
        colorinterp: Optional[List[str]] = None,
        scale: Optional[float] = None,
        offset: Optional[float] = None,
        colormap: Optional[Dict[str, List[int]]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SASToken(_model_base.Model):
    """SAS Token response.


    :ivar msft_expiry: Msft:Expiry. Required.
    :vartype msft_expiry: ~datetime.datetime
    :ivar token: Token. Required.
    :vartype token: str
    """

    msft_expiry: datetime.datetime = rest_field(name="msft:expiry", format="rfc3339")
    """Msft:Expiry. Required."""
    token: str = rest_field()
    """Token. Required."""

    @overload
    def __init__(
        self,
        *,
        msft_expiry: datetime.datetime,
        token: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Search(_model_base.Model):
    """PgSTAC Search entry.

    ref:
    https://github.com/stac-utils/pgstac/blob/3499daa2bfa700ae7bb07503795c169bf2ebafc7/sql/004_search.sql#L907-L915.


    :ivar hash: Hash. Required.
    :vartype hash: str
    :ivar search: Search. Required.
    :vartype search: dict[str, any]
    :ivar where: Where. Required.
    :vartype where: str
    :ivar orderby: Orderby. Required.
    :vartype orderby: str
    :ivar lastused: Lastused. Required.
    :vartype lastused: ~datetime.datetime
    :ivar usecount: Usecount. Required.
    :vartype usecount: int
    :ivar metadata: Metadata Model. Required.
    :vartype metadata: ~spatio.models.Metadata
    """

    hash: str = rest_field()
    """Hash. Required."""
    search: Dict[str, Any] = rest_field()
    """Search. Required."""
    where: str = rest_field(name="_where")
    """Where. Required."""
    orderby: str = rest_field()
    """Orderby. Required."""
    lastused: datetime.datetime = rest_field(format="rfc3339")
    """Lastused. Required."""
    usecount: int = rest_field()
    """Usecount. Required."""
    metadata: "_models.Metadata" = rest_field()
    """Metadata Model. Required."""

    @overload
    def __init__(
        self,
        *,
        hash: str,
        search: Dict[str, Any],
        where: str,
        orderby: str,
        lastused: datetime.datetime,
        usecount: int,
        metadata: "_models.Metadata",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SearchPostRequest(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Search model.

    Overrides the validation for datetime from the base request model.

    :ivar collections: Collections.
    :vartype collections: list[str]
    :ivar ids: Ids.
    :vartype ids: list[str]
    :ivar bbox: Bbox.
    :vartype bbox: any
    :ivar intersects: Intersects.
    :vartype intersects: ~spatio.models.SearchPostRequestIntersects
    :ivar datetime: Datetime.
    :vartype datetime: str
    :ivar limit: Limit.
    :vartype limit: int
    :ivar conf: Conf.
    :vartype conf: dict[str, any]
    :ivar sign: Sign.
    :vartype sign: bool
    :ivar duration: Duration.
    :vartype duration: int
    :ivar query: Query.
    :vartype query: dict[str, dict[str, any]]
    :ivar sortby: Sortby.
    :vartype sortby: list[~spatio.models.SortExtension]
    :ivar fields: Fields.
    :vartype fields: list[~spatio.models.SearchPostRequestFields]
    :ivar filter: Filter.
    :vartype filter: dict[str, any]
    :ivar filter_crs: Filter-Crs.
    :vartype filter_crs: str
    :ivar filter_lang: Known values are: "cql-json", "cql2-json", and "cql2-text".
    :vartype filter_lang: str or ~spatio.models.SearchPostRequestFilterLang
    :ivar token: Token.
    :vartype token: str
    """

    collections: Optional[List[str]] = rest_field()
    """Collections."""
    ids: Optional[List[str]] = rest_field()
    """Ids."""
    bbox: Optional[Any] = rest_field()
    """Bbox."""
    intersects: Optional["_models.SearchPostRequestIntersects"] = rest_field()
    """Intersects."""
    datetime: Optional[str] = rest_field()
    """Datetime."""
    limit: Optional[int] = rest_field()
    """Limit."""
    conf: Optional[Dict[str, Any]] = rest_field()
    """Conf."""
    sign: Optional[bool] = rest_field()
    """Sign."""
    duration: Optional[int] = rest_field()
    """Duration."""
    query: Optional[Dict[str, Dict[str, Any]]] = rest_field()
    """Query."""
    sortby: Optional[List["_models.SortExtension"]] = rest_field()
    """Sortby."""
    fields: Optional[List["_models.SearchPostRequestFields"]] = rest_field()
    """Fields."""
    filter: Optional[Dict[str, Any]] = rest_field()
    """Filter."""
    filter_crs: Optional[str] = rest_field(name="filter-crs")
    """Filter-Crs."""
    filter_lang: Optional[Union[str, "_models.SearchPostRequestFilterLang"]] = rest_field(name="filter-lang")
    """Known values are: \"cql-json\", \"cql2-json\", and \"cql2-text\"."""
    token: Optional[str] = rest_field()
    """Token."""

    @overload
    def __init__(
        self,
        *,
        collections: Optional[List[str]] = None,
        ids: Optional[List[str]] = None,
        bbox: Optional[Any] = None,
        intersects: Optional["_models.SearchPostRequestIntersects"] = None,
        datetime: Optional[str] = None,
        limit: Optional[int] = None,
        conf: Optional[Dict[str, Any]] = None,
        sign: Optional[bool] = None,
        duration: Optional[int] = None,
        query: Optional[Dict[str, Dict[str, Any]]] = None,
        sortby: Optional[List["_models.SortExtension"]] = None,
        fields: Optional[List["_models.SearchPostRequestFields"]] = None,
        filter: Optional[Dict[str, Any]] = None,  # pylint: disable=redefined-builtin
        filter_crs: Optional[str] = None,
        filter_lang: Optional[Union[str, "_models.SearchPostRequestFilterLang"]] = None,
        token: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SearchPostRequestFields(PostFieldsExtension):
    """Fields.

    :ivar include: Include.
    :vartype include: list[str]
    :ivar exclude: Exclude.
    :vartype exclude: list[str]
    """

    @overload
    def __init__(
        self,
        *,
        include: Optional[List[str]] = None,
        exclude: Optional[List[str]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SearchPostRequestIntersects(_model_base.Model):
    """Intersects."""


class SortExtension(_model_base.Model):
    """https://github.com/radiantearth/stac-api-spec/tree/master/extensions/sort#sort-api-extension.

    All required parameters must be populated in order to send to server.

    :ivar field: Field. Required.
    :vartype field: str
    :ivar direction: An enumeration. Required. Known values are: "asc" and "desc".
    :vartype direction: str or ~spatio.models.SortDirections
    """

    field: str = rest_field()
    """Field. Required."""
    direction: Union[str, "_models.SortDirections"] = rest_field()
    """An enumeration. Required. Known values are: \"asc\" and \"desc\"."""

    @overload
    def __init__(
        self,
        *,
        field: str,
        direction: Union[str, "_models.SortDirections"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SourceDataType(_model_base.Model):
    """SourceDataType.


    :ivar name: Source data type name. Required.
    :vartype name: str
    :ivar title: Source data type title. Required.
    :vartype title: str
    """

    name: str = rest_field()
    """Source data type name. Required."""
    title: str = rest_field()
    """Source data type title. Required."""

    @overload
    def __init__(
        self,
        *,
        name: str,
        title: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class STACItem(_model_base.Model):
    """STACItem.

    All required parameters must be populated in order to send to server.

    :ivar type: Required.
    :vartype type: str
    :ivar stac_version: Required.
    :vartype stac_version: str
    :ivar stac_extensions: Required.
    :vartype stac_extensions: list[str]
    :ivar id: Required.
    :vartype id: str
    :ivar geometry: Required.
    :vartype geometry: any
    :ivar bbox: Required.
    :vartype bbox: list[int]
    :ivar properties: Required.
    :vartype properties: ~spatio.models.Properties
    :ivar assets: Required.
    :vartype assets: any
    :ivar links: Required.
    :vartype links: list[~spatio.models.InmaLink]
    :ivar collection: Required.
    :vartype collection: str
    """

    type: str = rest_field()
    """Required."""
    stac_version: str = rest_field()
    """Required."""
    stac_extensions: List[str] = rest_field()
    """Required."""
    id: str = rest_field()
    """Required."""
    geometry: Any = rest_field()
    """Required."""
    bbox: List[int] = rest_field()
    """Required."""
    properties: "_models.Properties" = rest_field()
    """Required."""
    assets: Any = rest_field()
    """Required."""
    links: List["_models.InmaLink"] = rest_field()
    """Required."""
    collection: str = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        type: str,
        stac_version: str,
        stac_extensions: List[str],
        id: str,  # pylint: disable=redefined-builtin
        geometry: Any,
        bbox: List[int],
        properties: "_models.Properties",
        assets: Any,
        links: List["_models.InmaLink"],
        collection: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class STACItemCollection(_model_base.Model):
    """STACItemCollection.


    :ivar type: Required.
    :vartype type: str
    :ivar features: Required.
    :vartype features: list[~spatio.models.STACItem]
    :ivar links: Required.
    :vartype links: list[~spatio.models.InmaLink]
    :ivar stac_version:
    :vartype stac_version: str
    :ivar number_matched:
    :vartype number_matched: int
    :ivar number_returned:
    :vartype number_returned: int
    """

    type: str = rest_field()
    """Required."""
    features: List["_models.STACItem"] = rest_field()
    """Required."""
    links: List["_models.InmaLink"] = rest_field()
    """Required."""
    stac_version: Optional[str] = rest_field()
    number_matched: Optional[int] = rest_field(name="numberMatched")
    number_returned: Optional[int] = rest_field(name="numberReturned")

    @overload
    def __init__(
        self,
        *,
        type: str,
        features: List["_models.STACItem"],
        links: List["_models.InmaLink"],
        stac_version: Optional[str] = None,
        number_matched: Optional[int] = None,
        number_returned: Optional[int] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class STACPostOrPutItem(_model_base.Model):
    """STACPostOrPutItem.

    All required parameters must be populated in order to send to server.

    :ivar type: Required.
    :vartype type: str
    :ivar stac_version: Required.
    :vartype stac_version: str
    :ivar stac_extensions: Required.
    :vartype stac_extensions: list[str]
    :ivar id: Required.
    :vartype id: str
    :ivar geometry: Required.
    :vartype geometry: any
    :ivar bbox: Required.
    :vartype bbox: list[int]
    :ivar properties: Required.
    :vartype properties: ~spatio.models.Properties
    :ivar assets: Required.
    :vartype assets: any
    :ivar links: Required.
    :vartype links: list[~spatio.models.InmaLink]
    :ivar collection: Required.
    :vartype collection: str
    """

    type: str = rest_field()
    """Required."""
    stac_version: str = rest_field()
    """Required."""
    stac_extensions: List[str] = rest_field()
    """Required."""
    id: str = rest_field()
    """Required."""
    geometry: Any = rest_field()
    """Required."""
    bbox: List[int] = rest_field()
    """Required."""
    properties: "_models.Properties" = rest_field()
    """Required."""
    assets: Any = rest_field()
    """Required."""
    links: List["_models.InmaLink"] = rest_field()
    """Required."""
    collection: str = rest_field()
    """Required."""

    @overload
    def __init__(
        self,
        *,
        type: str,
        stac_version: str,
        stac_extensions: List[str],
        id: str,  # pylint: disable=redefined-builtin
        geometry: Any,
        bbox: List[int],
        properties: "_models.Properties",
        assets: Any,
        links: List["_models.InmaLink"],
        collection: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class STACPostOrPutItemCollection(_model_base.Model):
    """STACPostOrPutItemCollection.

    All required parameters must be populated in order to send to server.

    :ivar type: Required.
    :vartype type: str
    :ivar features: Required.
    :vartype features: list[~spatio.models.STACItem]
    :ivar links:
    :vartype links: list[~spatio.models.InmaLink]
    :ivar stac_version:
    :vartype stac_version: str
    :ivar number_matched:
    :vartype number_matched: int
    :ivar number_returned:
    :vartype number_returned: int
    """

    type: str = rest_field()
    """Required."""
    features: List["_models.STACItem"] = rest_field()
    """Required."""
    links: Optional[List["_models.InmaLink"]] = rest_field()
    stac_version: Optional[str] = rest_field()
    number_matched: Optional[int] = rest_field(name="numberMatched")
    number_returned: Optional[int] = rest_field(name="numberReturned")

    @overload
    def __init__(
        self,
        *,
        type: str,
        features: List["_models.STACItem"],
        links: Optional[List["_models.InmaLink"]] = None,
        stac_version: Optional[str] = None,
        number_matched: Optional[int] = None,
        number_returned: Optional[int] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TileJson(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """TileJSON model.

    Based on https://github.com/mapbox/tilejson-spec/tree/master/2.2.0.


    :ivar tilejson: Tilejson.
    :vartype tilejson: str
    :ivar name: Name.
    :vartype name: str
    :ivar description: Description.
    :vartype description: str
    :ivar version: Version.
    :vartype version: str
    :ivar attribution: Attribution.
    :vartype attribution: str
    :ivar template: Template.
    :vartype template: str
    :ivar legend: Legend.
    :vartype legend: str
    :ivar scheme: Known values are: "xyz" and "tms".
    :vartype scheme: str or ~spatio.models.TileJsonScheme
    :ivar tiles: Tiles. Required.
    :vartype tiles: list[str]
    :ivar grids: Grids.
    :vartype grids: list[str]
    :ivar data: Data.
    :vartype data: list[str]
    :ivar minzoom: Minzoom.
    :vartype minzoom: int
    :ivar maxzoom: Maxzoom.
    :vartype maxzoom: int
    :ivar bounds: Bounds.
    :vartype bounds: list[float]
    :ivar center: Center.
    :vartype center: list[float]
    """

    tilejson: Optional[str] = rest_field()
    """Tilejson."""
    name: Optional[str] = rest_field()
    """Name."""
    description: Optional[str] = rest_field()
    """Description."""
    version: Optional[str] = rest_field()
    """Version."""
    attribution: Optional[str] = rest_field()
    """Attribution."""
    template: Optional[str] = rest_field()
    """Template."""
    legend: Optional[str] = rest_field()
    """Legend."""
    scheme: Optional[Union[str, "_models.TileJsonScheme"]] = rest_field()
    """Known values are: \"xyz\" and \"tms\"."""
    tiles: List[str] = rest_field()
    """Tiles. Required."""
    grids: Optional[List[str]] = rest_field()
    """Grids."""
    data: Optional[List[str]] = rest_field()
    """Data."""
    minzoom: Optional[int] = rest_field()
    """Minzoom."""
    maxzoom: Optional[int] = rest_field()
    """Maxzoom."""
    bounds: Optional[List[float]] = rest_field()
    """Bounds."""
    center: Optional[List[float]] = rest_field()
    """Center."""

    @overload
    def __init__(
        self,
        *,
        tiles: List[str],
        tilejson: Optional[str] = None,
        name: Optional[str] = None,
        description: Optional[str] = None,
        version: Optional[str] = None,
        attribution: Optional[str] = None,
        template: Optional[str] = None,
        legend: Optional[str] = None,
        scheme: Optional[Union[str, "_models.TileJsonScheme"]] = None,
        grids: Optional[List[str]] = None,
        data: Optional[List[str]] = None,
        minzoom: Optional[int] = None,
        maxzoom: Optional[int] = None,
        bounds: Optional[List[float]] = None,
        center: Optional[List[float]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TileMatrix(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Tile Matrix Definition

    A tile matrix, usually corresponding to a particular zoom level of a
    TileMatrixSet.

    ref:
    https://github.com/opengeospatial/2D-Tile-Matrix-Set/blob/master/schemas/tms/2.0/json/tileMatrix.json.


    :ivar title: Title of this tile matrix, normally used for display to a human.
    :vartype title: str
    :ivar description: Brief narrative description of this tile matrix set, normally available for
     display to a human.
    :vartype description: str
    :ivar keywords: Unordered list of one or more commonly used or formalized word(s) or phrase(s)
     used to describe this dataset.
    :vartype keywords: list[str]
    :ivar id: Identifier selecting one of the scales defined in the TileMatrixSet and
     representing the scaleDenominator the tile. Implementation of 'identifier'. Required.
    :vartype id: str
    :ivar scale_denominator: Scale denominator of this tile matrix. Required.
    :vartype scale_denominator: float
    :ivar cell_size: Cell size of this tile matrix. Required.
    :vartype cell_size: float
    :ivar corner_of_origin: The corner of the tile matrix (\\ *topLeft* or *bottomLeft*\\ ) used as
     the origin
     for numbering tile rows and columns. This corner is also a corner of the (0, 0)
     tile. Known values are: "topLeft" and "bottomLeft".
    :vartype corner_of_origin: str or ~spatio.models.TileMatrixCornerOfOrigin
    :ivar point_of_origin: Precise position in CRS coordinates of the corner of origin (e.g. the
     top-left
     corner) for this tile matrix. This position is also a corner of the (0, 0)
     tile. In previous version, this was 'topLeftCorner' and 'cornerOfOrigin' did
     not exist. Required.
    :vartype point_of_origin: list[any]
    :ivar tile_width: Width of each tile of this tile matrix in pixels. Required.
    :vartype tile_width: int
    :ivar tile_height: Height of each tile of this tile matrix in pixels. Required.
    :vartype tile_height: int
    :ivar matrix_width: Width of the matrix (number of tiles in width). Required.
    :vartype matrix_width: int
    :ivar matrix_height: Height of the matrix (number of tiles in height). Required.
    :vartype matrix_height: int
    """

    title: Optional[str] = rest_field()
    """Title of this tile matrix, normally used for display to a human."""
    description: Optional[str] = rest_field()
    """Brief narrative description of this tile matrix set, normally available for
     display to a human."""
    keywords: Optional[List[str]] = rest_field()
    """Unordered list of one or more commonly used or formalized word(s) or phrase(s)
     used to describe this dataset."""
    id: str = rest_field()
    """Identifier selecting one of the scales defined in the TileMatrixSet and
     representing the scaleDenominator the tile. Implementation of 'identifier'. Required."""
    scale_denominator: float = rest_field(name="scaleDenominator")
    """Scale denominator of this tile matrix. Required."""
    cell_size: float = rest_field(name="cellSize")
    """Cell size of this tile matrix. Required."""
    corner_of_origin: Optional[Union[str, "_models.TileMatrixCornerOfOrigin"]] = rest_field(name="cornerOfOrigin")
    """The corner of the tile matrix (\ *topLeft* or *bottomLeft*\ ) used as the origin
     for numbering tile rows and columns. This corner is also a corner of the (0, 0)
     tile. Known values are: \"topLeft\" and \"bottomLeft\"."""
    point_of_origin: List[Any] = rest_field(name="pointOfOrigin")
    """Precise position in CRS coordinates of the corner of origin (e.g. the top-left
     corner) for this tile matrix. This position is also a corner of the (0, 0)
     tile. In previous version, this was 'topLeftCorner' and 'cornerOfOrigin' did
     not exist. Required."""
    tile_width: int = rest_field(name="tileWidth")
    """Width of each tile of this tile matrix in pixels. Required."""
    tile_height: int = rest_field(name="tileHeight")
    """Height of each tile of this tile matrix in pixels. Required."""
    matrix_width: int = rest_field(name="matrixWidth")
    """Width of the matrix (number of tiles in width). Required."""
    matrix_height: int = rest_field(name="matrixHeight")
    """Height of the matrix (number of tiles in height). Required."""

    @overload
    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        scale_denominator: float,
        cell_size: float,
        point_of_origin: List[Any],
        tile_width: int,
        tile_height: int,
        matrix_width: int,
        matrix_height: int,
        title: Optional[str] = None,
        description: Optional[str] = None,
        keywords: Optional[List[str]] = None,
        corner_of_origin: Optional[Union[str, "_models.TileMatrixCornerOfOrigin"]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TileMatrixSet(_model_base.Model):
    """Tile Matrix Set Definition

    A definition of a tile matrix set following the Tile Matrix Set standard.
    For tileset metadata, such a description (in ``tileMatrixSet`` property) is only
    required for offline use,
    as an alternative to a link with a
    ``http://www.opengis.net/def/rel/ogc/1.0/tiling-scheme`` relation type.

    ref:
    https://github.com/opengeospatial/2D-Tile-Matrix-Set/blob/master/schemas/tms/2.0/json/tileMatrixSet.json.


    :ivar title: Title of this tile matrix set, normally used for display to a human.
    :vartype title: str
    :ivar description: Brief narrative description of this tile matrix set, normally available for
     display to a human.
    :vartype description: str
    :ivar keywords: Unordered list of one or more commonly used or formalized word(s) or phrase(s)
     used to describe this tile matrix set.
    :vartype keywords: list[str]
    :ivar id: Tile matrix set identifier. Implementation of 'identifier'.
    :vartype id: str
    :ivar uri: Reference to an official source for this tileMatrixSet.
    :vartype uri: str
    :ivar ordered_axes: Orderedaxes.
    :vartype ordered_axes: list[str]
    :ivar crs: Coordinate Reference System (CRS). Required.
    :vartype crs: ~spatio.models.TileMatrixSetCrs
    :ivar well_known_scale_set: Reference to a well-known scale set.
    :vartype well_known_scale_set: str
    :ivar bounding_box: Minimum bounding rectangle surrounding the tile matrix set, in the
     supported CRS.
    :vartype bounding_box: ~spatio.models.TileMatrixSetBoundingBox
    :ivar tile_matrices: Describes scale levels and its tile matrices. Required.
    :vartype tile_matrices: list[~spatio.models.TileMatrix]
    """

    title: Optional[str] = rest_field()
    """Title of this tile matrix set, normally used for display to a human."""
    description: Optional[str] = rest_field()
    """Brief narrative description of this tile matrix set, normally available for
     display to a human."""
    keywords: Optional[List[str]] = rest_field()
    """Unordered list of one or more commonly used or formalized word(s) or phrase(s)
     used to describe this tile matrix set."""
    id: Optional[str] = rest_field()
    """Tile matrix set identifier. Implementation of 'identifier'."""
    uri: Optional[str] = rest_field()
    """Reference to an official source for this tileMatrixSet."""
    ordered_axes: Optional[List[str]] = rest_field(name="orderedAxes")
    """Orderedaxes."""
    crs: "_models.TileMatrixSetCrs" = rest_field()
    """Coordinate Reference System (CRS). Required."""
    well_known_scale_set: Optional[str] = rest_field(name="wellKnownScaleSet")
    """Reference to a well-known scale set."""
    bounding_box: Optional["_models.TileMatrixSetBoundingBox"] = rest_field(name="boundingBox")
    """Minimum bounding rectangle surrounding the tile matrix set, in the supported CRS."""
    tile_matrices: List["_models.TileMatrix"] = rest_field(name="tileMatrices")
    """Describes scale levels and its tile matrices. Required."""

    @overload
    def __init__(
        self,
        *,
        crs: "_models.TileMatrixSetCrs",
        tile_matrices: List["_models.TileMatrix"],
        title: Optional[str] = None,
        description: Optional[str] = None,
        keywords: Optional[List[str]] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        uri: Optional[str] = None,
        ordered_axes: Optional[List[str]] = None,
        well_known_scale_set: Optional[str] = None,
        bounding_box: Optional["_models.TileMatrixSetBoundingBox"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TMSBoundingBox(_model_base.Model):
    """Bounding box

    ref:
    https://github.com/opengeospatial/2D-Tile-Matrix-Set/blob/master/schemas/tms/2.0/json/2DBoundingBox.json.


    :ivar lower_left: A 2D Point in the CRS indicated elsewhere. Required.
    :vartype lower_left: list[any]
    :ivar upper_right: A 2D Point in the CRS indicated elsewhere. Required.
    :vartype upper_right: list[any]
    :ivar crs: CRS model.

     Ref:
    https://github.com/opengeospatial/ogcapi-tiles/blob/master/openapi/schemas/common-geodata/crs.yaml

     Code generated using https://github.com/koxudaxi/datamodel-code-generator/.
    :vartype crs: any
    :ivar ordered_axes: Orderedaxes.
    :vartype ordered_axes: list[str]
    """

    lower_left: List[Any] = rest_field(name="lowerLeft")
    """A 2D Point in the CRS indicated elsewhere. Required."""
    upper_right: List[Any] = rest_field(name="upperRight")
    """A 2D Point in the CRS indicated elsewhere. Required."""
    crs: Optional[Any] = rest_field()
    """CRS model.
     
     Ref:
     https://github.com/opengeospatial/ogcapi-tiles/blob/master/openapi/schemas/common-geodata/crs.yaml
     
     Code generated using https://github.com/koxudaxi/datamodel-code-generator/."""
    ordered_axes: Optional[List[str]] = rest_field(name="orderedAxes")
    """Orderedaxes."""

    @overload
    def __init__(
        self,
        *,
        lower_left: List[Any],
        upper_right: List[Any],
        crs: Optional[Any] = None,
        ordered_axes: Optional[List[str]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TileMatrixSetBoundingBox(TMSBoundingBox):
    """Minimum bounding rectangle surrounding the tile matrix set, in the supported CRS.


    :ivar lower_left: A 2D Point in the CRS indicated elsewhere. Required.
    :vartype lower_left: list[any]
    :ivar upper_right: A 2D Point in the CRS indicated elsewhere. Required.
    :vartype upper_right: list[any]
    :ivar crs: CRS model.

     Ref:
    https://github.com/opengeospatial/ogcapi-tiles/blob/master/openapi/schemas/common-geodata/crs.yaml

     Code generated using https://github.com/koxudaxi/datamodel-code-generator/.
    :vartype crs: any
    :ivar ordered_axes: Orderedaxes.
    :vartype ordered_axes: list[str]
    """

    @overload
    def __init__(
        self,
        *,
        lower_left: List[Any],
        upper_right: List[Any],
        crs: Optional[Any] = None,
        ordered_axes: Optional[List[str]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TileMatrixSetCrs(_model_base.Model):
    """Coordinate Reference System (CRS)."""


class TileSettings(_model_base.Model):
    """TileSettings.

    All required parameters must be populated in order to send to server.

    :ivar min_zoom: The minimum zoom level that can be requested for this collection. Provides a
     hard limit for the tile servers to ensure they don't get requests for low zoom
     levels, which would cause many files to be fetched and the tile servers to
     hang. Required.
    :vartype min_zoom: int
    :ivar max_items_per_tile: The maximum number of items that will be fetched while generating a
     raster tile. Required.
    :vartype max_items_per_tile: int
    :ivar default_location: Defines a default location for showcasing a collection.
    :vartype default_location: ~spatio.models.DefaultLocation
    """

    min_zoom: int = rest_field(name="minZoom")
    """The minimum zoom level that can be requested for this collection. Provides a
     hard limit for the tile servers to ensure they don't get requests for low zoom
     levels, which would cause many files to be fetched and the tile servers to
     hang. Required."""
    max_items_per_tile: int = rest_field(name="maxItemsPerTile")
    """The maximum number of items that will be fetched while generating a raster tile. Required."""
    default_location: Optional["_models.DefaultLocation"] = rest_field(name="defaultLocation")
    """Defines a default location for showcasing a collection."""

    @overload
    def __init__(
        self,
        *,
        min_zoom: int,
        max_items_per_tile: int,
        default_location: Optional["_models.DefaultLocation"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TitilerCoreModelsResponsesPoint(_model_base.Model):
    """Point model.

    response model for ``/point`` endpoints.


    :ivar coordinates: Coordinates. Required.
    :vartype coordinates: list[float]
    :ivar values_property: Values. Required.
    :vartype values_property: list[float]
    :ivar band_names: Band Names. Required.
    :vartype band_names: list[str]
    """

    coordinates: List[float] = rest_field()
    """Coordinates. Required."""
    values_property: List[float] = rest_field(name="values")
    """Values. Required."""
    band_names: List[str] = rest_field()
    """Band Names. Required."""

    @overload
    def __init__(
        self,
        *,
        coordinates: List[float],
        values_property: List[float],
        band_names: List[str],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class TitilerPgstacModelInfo(_model_base.Model):
    """Response model for /info endpoint.


    :ivar search: PgSTAC Search entry.

     ref:
    https://github.com/stac-utils/pgstac/blob/3499daa2bfa700ae7bb07503795c169bf2ebafc7/sql/004_search.sql#L907-L915.
     Required.
    :vartype search: ~spatio.models.Search
    :ivar links: Links.
    :vartype links: list[~spatio.models.Link]
    """

    search: "_models.Search" = rest_field()
    """PgSTAC Search entry.
     
     ref:
     https://github.com/stac-utils/pgstac/blob/3499daa2bfa700ae7bb07503795c169bf2ebafc7/sql/004_search.sql#L907-L915.
     Required."""
    links: Optional[List["_models.Link"]] = rest_field()
    """Links."""

    @overload
    def __init__(
        self,
        *,
        search: "_models.Search",
        links: Optional[List["_models.Link"]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class UserCollectionSettings(_model_base.Model):
    """UserCollectionSettings.


    :ivar tile_settings: TileSettings. Required.
    :vartype tile_settings: ~spatio.models.TileSettings
    :ivar mosaic_info: MosaicInfo. Required.
    :vartype mosaic_info: ~spatio.models.MosaicInfo
    """

    tile_settings: "_models.TileSettings" = rest_field(name="tileSettings")
    """TileSettings. Required."""
    mosaic_info: "_models.MosaicInfo" = rest_field(name="mosaicInfo")
    """MosaicInfo. Required."""

    @overload
    def __init__(
        self,
        *,
        tile_settings: "_models.TileSettings",
        mosaic_info: "_models.MosaicInfo",
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
