# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class ManagedRuleExclusion(Model):
    """Exclude variables from managed rule evaluation.

    All required parameters must be populated in order to send to Azure.

    :param match_variable: Required. The variable type to be excluded.
     Possible values include: 'RequestHeaderNames', 'RequestCookieNames',
     'QueryStringArgNames', 'RequestBodyPostArgNames'
    :type match_variable: str or
     ~azure.mgmt.frontdoor.models.ManagedRuleExclusionMatchVariable
    :param selector_match_operator: Required. Comparison operator to apply to
     the selector when specifying which elements in the collection this
     exclusion applies to. Possible values include: 'Equals', 'Contains',
     'StartsWith', 'EndsWith', 'EqualsAny'
    :type selector_match_operator: str or
     ~azure.mgmt.frontdoor.models.ManagedRuleExclusionSelectorMatchOperator
    :param selector: Required. Selector value for which elements in the
     collection this exclusion applies to.
    :type selector: str
    """

    _validation = {
        'match_variable': {'required': True},
        'selector_match_operator': {'required': True},
        'selector': {'required': True},
    }

    _attribute_map = {
        'match_variable': {'key': 'matchVariable', 'type': 'str'},
        'selector_match_operator': {'key': 'selectorMatchOperator', 'type': 'str'},
        'selector': {'key': 'selector', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ManagedRuleExclusion, self).__init__(**kwargs)
        self.match_variable = kwargs.get('match_variable', None)
        self.selector_match_operator = kwargs.get('selector_match_operator', None)
        self.selector = kwargs.get('selector', None)
