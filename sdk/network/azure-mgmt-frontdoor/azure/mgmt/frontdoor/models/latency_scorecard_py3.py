# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .resource_py3 import Resource


class LatencyScorecard(Resource):
    """Defines the LatencyScorecard.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Resource ID.
    :vartype id: str
    :ivar name: Resource name.
    :vartype name: str
    :ivar type: Resource type.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :ivar latency_scorecard_id: The unique identifier of the Latency Scorecard
    :vartype latency_scorecard_id: str
    :ivar latency_scorecard_name: The name of the Latency Scorecard
    :vartype latency_scorecard_name: str
    :ivar description: The description of the Latency Scorecard
    :vartype description: str
    :ivar endpoint_a: The A endpoint in the scorecard
    :vartype endpoint_a: str
    :ivar endpoint_b: The B endpoint in the scorecard
    :vartype endpoint_b: str
    :ivar start_date_time_utc: The start time of the Latency Scorecard in UTC
    :vartype start_date_time_utc: datetime
    :ivar end_date_time_utc: The end time of the Latency Scorecard in UTC
    :vartype end_date_time_utc: datetime
    :ivar country: The country associated with the Latency Scorecard. Values
     are country ISO codes as specified here-
     https://www.iso.org/iso-3166-country-codes.html
    :vartype country: str
    :param latency_metrics: The latency metrics of the Latency Scorecard
    :type latency_metrics: list[~azure.mgmt.frontdoor.models.LatencyMetric]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'latency_scorecard_id': {'readonly': True},
        'latency_scorecard_name': {'readonly': True},
        'description': {'readonly': True},
        'endpoint_a': {'readonly': True},
        'endpoint_b': {'readonly': True},
        'start_date_time_utc': {'readonly': True},
        'end_date_time_utc': {'readonly': True},
        'country': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'latency_scorecard_id': {'key': 'properties.id', 'type': 'str'},
        'latency_scorecard_name': {'key': 'properties.name', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'endpoint_a': {'key': 'properties.endpointA', 'type': 'str'},
        'endpoint_b': {'key': 'properties.endpointB', 'type': 'str'},
        'start_date_time_utc': {'key': 'properties.startDateTimeUTC', 'type': 'iso-8601'},
        'end_date_time_utc': {'key': 'properties.endDateTimeUTC', 'type': 'iso-8601'},
        'country': {'key': 'properties.country', 'type': 'str'},
        'latency_metrics': {'key': 'properties.latencyMetrics', 'type': '[LatencyMetric]'},
    }

    def __init__(self, *, location: str=None, tags=None, latency_metrics=None, **kwargs) -> None:
        super(LatencyScorecard, self).__init__(location=location, tags=tags, **kwargs)
        self.latency_scorecard_id = None
        self.latency_scorecard_name = None
        self.description = None
        self.endpoint_a = None
        self.endpoint_b = None
        self.start_date_time_utc = None
        self.end_date_time_utc = None
        self.country = None
        self.latency_metrics = latency_metrics
