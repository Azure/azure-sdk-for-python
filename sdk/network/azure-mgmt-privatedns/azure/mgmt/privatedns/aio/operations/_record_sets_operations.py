# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, AsyncIterable, Callable, Dict, Optional, TypeVar, Union

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._record_sets_operations import build_create_or_update_request, build_delete_request, build_get_request, build_list_by_type_request, build_list_request, build_update_request
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class RecordSetsOperations:
    """RecordSetsOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.mgmt.privatedns.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace_async
    async def create_or_update(
        self,
        resource_group_name: str,
        private_zone_name: str,
        record_type: Union[str, "_models.RecordType"],
        relative_record_set_name: str,
        parameters: "_models.RecordSet",
        if_match: Optional[str] = None,
        if_none_match: Optional[str] = None,
        **kwargs: Any
    ) -> "_models.RecordSet":
        """Creates or updates a record set within a Private DNS zone.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param private_zone_name: The name of the Private DNS zone (without a terminating dot).
        :type private_zone_name: str
        :param record_type: The type of DNS record in this record set. Record sets of type SOA can be
         updated but not created (they are created when the Private DNS zone is created).
        :type record_type: str or ~azure.mgmt.privatedns.models.RecordType
        :param relative_record_set_name: The name of the record set, relative to the name of the zone.
        :type relative_record_set_name: str
        :param parameters: Parameters supplied to the CreateOrUpdate operation.
        :type parameters: ~azure.mgmt.privatedns.models.RecordSet
        :param if_match: The ETag of the record set. Omit this value to always overwrite the current
         record set. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent
         changes. Default value is None.
        :type if_match: str
        :param if_none_match: Set to '*' to allow a new record set to be created, but to prevent
         updating an existing record set. Other values will be ignored. Default value is None.
        :type if_none_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RecordSet, or the result of cls(response)
        :rtype: ~azure.mgmt.privatedns.models.RecordSet
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.RecordSet"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2020-06-01")  # type: str
        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _json = self._serialize.body(parameters, 'RecordSet')

        request = build_create_or_update_request(
            resource_group_name=resource_group_name,
            private_zone_name=private_zone_name,
            record_type=record_type,
            relative_record_set_name=relative_record_set_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            if_match=if_match,
            if_none_match=if_none_match,
            template_url=self.create_or_update.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if response.status_code == 200:
            deserialized = self._deserialize('RecordSet', pipeline_response)

        if response.status_code == 201:
            deserialized = self._deserialize('RecordSet', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_or_update.metadata = {'url': "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/{recordType}/{relativeRecordSetName}"}  # type: ignore


    @distributed_trace_async
    async def update(
        self,
        resource_group_name: str,
        private_zone_name: str,
        record_type: Union[str, "_models.RecordType"],
        relative_record_set_name: str,
        parameters: "_models.RecordSet",
        if_match: Optional[str] = None,
        **kwargs: Any
    ) -> "_models.RecordSet":
        """Updates a record set within a Private DNS zone.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param private_zone_name: The name of the Private DNS zone (without a terminating dot).
        :type private_zone_name: str
        :param record_type: The type of DNS record in this record set.
        :type record_type: str or ~azure.mgmt.privatedns.models.RecordType
        :param relative_record_set_name: The name of the record set, relative to the name of the zone.
        :type relative_record_set_name: str
        :param parameters: Parameters supplied to the Update operation.
        :type parameters: ~azure.mgmt.privatedns.models.RecordSet
        :param if_match: The ETag of the record set. Omit this value to always overwrite the current
         record set. Specify the last-seen ETag value to prevent accidentally overwriting concurrent
         changes. Default value is None.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RecordSet, or the result of cls(response)
        :rtype: ~azure.mgmt.privatedns.models.RecordSet
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.RecordSet"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2020-06-01")  # type: str
        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _json = self._serialize.body(parameters, 'RecordSet')

        request = build_update_request(
            resource_group_name=resource_group_name,
            private_zone_name=private_zone_name,
            record_type=record_type,
            relative_record_set_name=relative_record_set_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            if_match=if_match,
            template_url=self.update.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize('RecordSet', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update.metadata = {'url': "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/{recordType}/{relativeRecordSetName}"}  # type: ignore


    @distributed_trace_async
    async def delete(  # pylint: disable=inconsistent-return-statements
        self,
        resource_group_name: str,
        private_zone_name: str,
        record_type: Union[str, "_models.RecordType"],
        relative_record_set_name: str,
        if_match: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """Deletes a record set from a Private DNS zone. This operation cannot be undone.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param private_zone_name: The name of the Private DNS zone (without a terminating dot).
        :type private_zone_name: str
        :param record_type: The type of DNS record in this record set. Record sets of type SOA cannot
         be deleted (they are deleted when the Private DNS zone is deleted).
        :type record_type: str or ~azure.mgmt.privatedns.models.RecordType
        :param relative_record_set_name: The name of the record set, relative to the name of the zone.
        :type relative_record_set_name: str
        :param if_match: The ETag of the record set. Omit this value to always delete the current
         record set. Specify the last-seen ETag value to prevent accidentally deleting any concurrent
         changes. Default value is None.
        :type if_match: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2020-06-01")  # type: str

        
        request = build_delete_request(
            resource_group_name=resource_group_name,
            private_zone_name=private_zone_name,
            record_type=record_type,
            relative_record_set_name=relative_record_set_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            if_match=if_match,
            template_url=self.delete.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {'url': "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/{recordType}/{relativeRecordSetName}"}  # type: ignore


    @distributed_trace_async
    async def get(
        self,
        resource_group_name: str,
        private_zone_name: str,
        record_type: Union[str, "_models.RecordType"],
        relative_record_set_name: str,
        **kwargs: Any
    ) -> "_models.RecordSet":
        """Gets a record set.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param private_zone_name: The name of the Private DNS zone (without a terminating dot).
        :type private_zone_name: str
        :param record_type: The type of DNS record in this record set.
        :type record_type: str or ~azure.mgmt.privatedns.models.RecordType
        :param relative_record_set_name: The name of the record set, relative to the name of the zone.
        :type relative_record_set_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RecordSet, or the result of cls(response)
        :rtype: ~azure.mgmt.privatedns.models.RecordSet
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.RecordSet"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2020-06-01")  # type: str

        
        request = build_get_request(
            resource_group_name=resource_group_name,
            private_zone_name=private_zone_name,
            record_type=record_type,
            relative_record_set_name=relative_record_set_name,
            subscription_id=self._config.subscription_id,
            api_version=api_version,
            template_url=self.get.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize('RecordSet', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get.metadata = {'url': "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/{recordType}/{relativeRecordSetName}"}  # type: ignore


    @distributed_trace
    def list_by_type(
        self,
        resource_group_name: str,
        private_zone_name: str,
        record_type: Union[str, "_models.RecordType"],
        top: Optional[int] = None,
        recordsetnamesuffix: Optional[str] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.RecordSetListResult"]:
        """Lists the record sets of a specified type in a Private DNS zone.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param private_zone_name: The name of the Private DNS zone (without a terminating dot).
        :type private_zone_name: str
        :param record_type: The type of record sets to enumerate.
        :type record_type: str or ~azure.mgmt.privatedns.models.RecordType
        :param top: The maximum number of record sets to return. If not specified, returns up to 100
         record sets. Default value is None.
        :type top: int
        :param recordsetnamesuffix: The suffix label of the record set name to be used to filter the
         record set enumeration. If this parameter is specified, the returned enumeration will only
         contain records that end with ".:code:`<recordsetnamesuffix>`". Default value is None.
        :type recordsetnamesuffix: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either RecordSetListResult or the result of cls(response)
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.privatedns.models.RecordSetListResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = kwargs.pop('api_version', "2020-06-01")  # type: str

        cls = kwargs.pop('cls', None)  # type: ClsType["_models.RecordSetListResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_list_by_type_request(
                    resource_group_name=resource_group_name,
                    private_zone_name=private_zone_name,
                    record_type=record_type,
                    subscription_id=self._config.subscription_id,
                    api_version=api_version,
                    top=top,
                    recordsetnamesuffix=recordsetnamesuffix,
                    template_url=self.list_by_type.metadata['url'],
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)

            else:
                
                request = build_list_by_type_request(
                    resource_group_name=resource_group_name,
                    private_zone_name=private_zone_name,
                    record_type=record_type,
                    subscription_id=self._config.subscription_id,
                    api_version=api_version,
                    top=top,
                    recordsetnamesuffix=recordsetnamesuffix,
                    template_url=next_link,
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("RecordSetListResult", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response


        return AsyncItemPaged(
            get_next, extract_data
        )
    list_by_type.metadata = {'url': "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/{recordType}"}  # type: ignore

    @distributed_trace
    def list(
        self,
        resource_group_name: str,
        private_zone_name: str,
        top: Optional[int] = None,
        recordsetnamesuffix: Optional[str] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.RecordSetListResult"]:
        """Lists all record sets in a Private DNS zone.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param private_zone_name: The name of the Private DNS zone (without a terminating dot).
        :type private_zone_name: str
        :param top: The maximum number of record sets to return. If not specified, returns up to 100
         record sets. Default value is None.
        :type top: int
        :param recordsetnamesuffix: The suffix label of the record set name to be used to filter the
         record set enumeration. If this parameter is specified, the returned enumeration will only
         contain records that end with ".:code:`<recordsetnamesuffix>`". Default value is None.
        :type recordsetnamesuffix: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either RecordSetListResult or the result of cls(response)
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.privatedns.models.RecordSetListResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = kwargs.pop('api_version', "2020-06-01")  # type: str

        cls = kwargs.pop('cls', None)  # type: ClsType["_models.RecordSetListResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_list_request(
                    resource_group_name=resource_group_name,
                    private_zone_name=private_zone_name,
                    subscription_id=self._config.subscription_id,
                    api_version=api_version,
                    top=top,
                    recordsetnamesuffix=recordsetnamesuffix,
                    template_url=self.list.metadata['url'],
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)

            else:
                
                request = build_list_request(
                    resource_group_name=resource_group_name,
                    private_zone_name=private_zone_name,
                    subscription_id=self._config.subscription_id,
                    api_version=api_version,
                    top=top,
                    recordsetnamesuffix=recordsetnamesuffix,
                    template_url=next_link,
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("RecordSetListResult", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, error_format=ARMErrorFormat)

            return pipeline_response


        return AsyncItemPaged(
            get_next, extract_data
        )
    list.metadata = {'url': "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateDnsZones/{privateZoneName}/ALL"}  # type: ignore
