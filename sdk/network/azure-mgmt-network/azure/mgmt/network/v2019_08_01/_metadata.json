{
    "chosen_version": "2019-08-01",
    "total_api_version_list": ["2018-10-01", "2019-08-01"],
    "client": {
        "name": "NetworkManagementClient",
        "filename": "_network_management_client",
        "description": "Network Client.",
        "base_url": "\u0027https://management.azure.com\u0027",
        "custom_base_url": null,
        "azure_arm": true,
        "has_lro_operations": true
    },
    "global_parameters": {
        "sync_method": {
            "credential": {
                "method_signature": "credential,  # type: \"TokenCredential\"",
                "description": "Credential needed for the client to connect to Azure.",
                "docstring_type": "~azure.core.credentials.TokenCredential",
                "required": true
            },
            "subscription_id": {
                "method_signature": "subscription_id,  # type: str",
                "description": "The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
                "docstring_type": "str",
                "required": true
            }
        },
        "async_method": {
            "credential": {
                "method_signature": "credential,  # type: \"AsyncTokenCredential\"",
                "description": "Credential needed for the client to connect to Azure.",
                "docstring_type": "~azure.core.credentials_async.AsyncTokenCredential",
                "required": true
            },
            "subscription_id": {
                "method_signature": "subscription_id,  # type: str",
                "description": "The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
                "docstring_type": "str",
                "required": true
            }
        },
        "constant": {
        },
        "call": "credential, subscription_id"
    },
    "config": {
        "credential": true,
        "credential_scopes": ["https://management.azure.com/.default"],
        "credential_default_policy_type": "BearerTokenCredentialPolicy",
        "credential_default_policy_type_has_async_version": true,
        "credential_key_header_name": null
    },
    "operation_groups": {
        "application_gateways": "ApplicationGatewaysOperations",
        "application_security_groups": "ApplicationSecurityGroupsOperations",
        "available_delegations": "AvailableDelegationsOperations",
        "available_resource_group_delegations": "AvailableResourceGroupDelegationsOperations",
        "available_service_aliases": "AvailableServiceAliasesOperations",
        "azure_firewalls": "AzureFirewallsOperations",
        "azure_firewall_fqdn_tags": "AzureFirewallFqdnTagsOperations",
        "bastion_hosts": "BastionHostsOperations",
        "ddos_custom_policies": "DdosCustomPoliciesOperations",
        "ddos_protection_plans": "DdosProtectionPlansOperations",
        "available_endpoint_services": "AvailableEndpointServicesOperations",
        "express_route_circuit_authorizations": "ExpressRouteCircuitAuthorizationsOperations",
        "express_route_circuit_peerings": "ExpressRouteCircuitPeeringsOperations",
        "express_route_circuit_connections": "ExpressRouteCircuitConnectionsOperations",
        "peer_express_route_circuit_connections": "PeerExpressRouteCircuitConnectionsOperations",
        "express_route_circuits": "ExpressRouteCircuitsOperations",
        "express_route_service_providers": "ExpressRouteServiceProvidersOperations",
        "express_route_cross_connections": "ExpressRouteCrossConnectionsOperations",
        "express_route_cross_connection_peerings": "ExpressRouteCrossConnectionPeeringsOperations",
        "express_route_gateways": "ExpressRouteGatewaysOperations",
        "express_route_connections": "ExpressRouteConnectionsOperations",
        "express_route_ports_locations": "ExpressRoutePortsLocationsOperations",
        "express_route_ports": "ExpressRoutePortsOperations",
        "express_route_links": "ExpressRouteLinksOperations",
        "firewall_policies": "FirewallPoliciesOperations",
        "firewall_policy_rule_groups": "FirewallPolicyRuleGroupsOperations",
        "load_balancers": "LoadBalancersOperations",
        "load_balancer_backend_address_pools": "LoadBalancerBackendAddressPoolsOperations",
        "load_balancer_frontend_ip_configurations": "LoadBalancerFrontendIPConfigurationsOperations",
        "inbound_nat_rules": "InboundNatRulesOperations",
        "load_balancer_load_balancing_rules": "LoadBalancerLoadBalancingRulesOperations",
        "load_balancer_outbound_rules": "LoadBalancerOutboundRulesOperations",
        "load_balancer_network_interfaces": "LoadBalancerNetworkInterfacesOperations",
        "load_balancer_probes": "LoadBalancerProbesOperations",
        "nat_gateways": "NatGatewaysOperations",
        "network_interfaces": "NetworkInterfacesOperations",
        "network_interface_ip_configurations": "NetworkInterfaceIPConfigurationsOperations",
        "network_interface_load_balancers": "NetworkInterfaceLoadBalancersOperations",
        "network_interface_tap_configurations": "NetworkInterfaceTapConfigurationsOperations",
        "network_profiles": "NetworkProfilesOperations",
        "network_security_groups": "NetworkSecurityGroupsOperations",
        "security_rules": "SecurityRulesOperations",
        "default_security_rules": "DefaultSecurityRulesOperations",
        "network_watchers": "NetworkWatchersOperations",
        "packet_captures": "PacketCapturesOperations",
        "connection_monitors": "ConnectionMonitorsOperations",
        "operations": "Operations",
        "private_endpoints": "PrivateEndpointsOperations",
        "available_private_endpoint_types": "AvailablePrivateEndpointTypesOperations",
        "private_link_services": "PrivateLinkServicesOperations",
        "public_ip_addresses": "PublicIPAddressesOperations",
        "public_ip_prefixes": "PublicIPPrefixesOperations",
        "route_filters": "RouteFiltersOperations",
        "route_filter_rules": "RouteFilterRulesOperations",
        "route_tables": "RouteTablesOperations",
        "routes": "RoutesOperations",
        "bgp_service_communities": "BgpServiceCommunitiesOperations",
        "service_endpoint_policies": "ServiceEndpointPoliciesOperations",
        "service_endpoint_policy_definitions": "ServiceEndpointPolicyDefinitionsOperations",
        "service_tags": "ServiceTagsOperations",
        "usages": "UsagesOperations",
        "virtual_networks": "VirtualNetworksOperations",
        "subnets": "SubnetsOperations",
        "resource_navigation_links": "ResourceNavigationLinksOperations",
        "service_association_links": "ServiceAssociationLinksOperations",
        "virtual_network_peerings": "VirtualNetworkPeeringsOperations",
        "virtual_network_gateways": "VirtualNetworkGatewaysOperations",
        "virtual_network_gateway_connections": "VirtualNetworkGatewayConnectionsOperations",
        "local_network_gateways": "LocalNetworkGatewaysOperations",
        "virtual_network_taps": "VirtualNetworkTapsOperations",
        "virtual_routers": "VirtualRoutersOperations",
        "virtual_router_peerings": "VirtualRouterPeeringsOperations",
        "virtual_wans": "VirtualWansOperations",
        "vpn_sites": "VpnSitesOperations",
        "vpn_site_links": "VpnSiteLinksOperations",
        "vpn_sites_configuration": "VpnSitesConfigurationOperations",
        "vpn_server_configurations": "VpnServerConfigurationsOperations",
        "virtual_hubs": "VirtualHubsOperations",
        "hub_virtual_network_connections": "HubVirtualNetworkConnectionsOperations",
        "vpn_gateways": "VpnGatewaysOperations",
        "vpn_connections": "VpnConnectionsOperations",
        "vpn_site_link_connections": "VpnSiteLinkConnectionsOperations",
        "vpn_link_connections": "VpnLinkConnectionsOperations",
        "p2_svpn_gateways": "P2SVpnGatewaysOperations",
        "vpn_server_configurations_associated_with_virtual_wan": "VpnServerConfigurationsAssociatedWithVirtualWanOperations",
        "web_application_firewall_policies": "WebApplicationFirewallPoliciesOperations"
    },
    "operation_mixins": {
        "check_dns_name_availability" : {
            "sync": {
                "signature": "def check_dns_name_availability(\n    self,\n    location,  # type: str\n    domain_name_label,  # type: str\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"Checks whether a domain name in the cloudapp.azure.com zone is available for use.\n\n:param location: The location of the domain name.\n:type location: str\n:param domain_name_label: The domain name to be verified. It must conform to the following\n regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.\n:type domain_name_label: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DnsNameAvailabilityResult, or the result of cls(response)\n:rtype: ~azure.mgmt.network.v2019_08_01.models.DnsNameAvailabilityResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def check_dns_name_availability(\n    self,\n    location: str,\n    domain_name_label: str,\n    **kwargs\n) -\u003e \"models.DnsNameAvailabilityResult\":\n",
                "doc": "\"\"\"Checks whether a domain name in the cloudapp.azure.com zone is available for use.\n\n:param location: The location of the domain name.\n:type location: str\n:param domain_name_label: The domain name to be verified. It must conform to the following\n regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.\n:type domain_name_label: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DnsNameAvailabilityResult, or the result of cls(response)\n:rtype: ~azure.mgmt.network.v2019_08_01.models.DnsNameAvailabilityResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "location, domain_name_label"
        },
        "supported_security_providers" : {
            "sync": {
                "signature": "def supported_security_providers(\n    self,\n    resource_group_name,  # type: str\n    virtual_wan_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"Gives the supported security providers for the virtual wan.\n\n:param resource_group_name: The resource group name.\n:type resource_group_name: str\n:param virtual_wan_name: The name of the VirtualWAN for which supported security providers are\n needed.\n:type virtual_wan_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: VirtualWanSecurityProviders, or the result of cls(response)\n:rtype: ~azure.mgmt.network.v2019_08_01.models.VirtualWanSecurityProviders\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def supported_security_providers(\n    self,\n    resource_group_name: str,\n    virtual_wan_name: str,\n    **kwargs\n) -\u003e \"models.VirtualWanSecurityProviders\":\n",
                "doc": "\"\"\"Gives the supported security providers for the virtual wan.\n\n:param resource_group_name: The resource group name.\n:type resource_group_name: str\n:param virtual_wan_name: The name of the VirtualWAN for which supported security providers are\n needed.\n:type virtual_wan_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: VirtualWanSecurityProviders, or the result of cls(response)\n:rtype: ~azure.mgmt.network.v2019_08_01.models.VirtualWanSecurityProviders\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "resource_group_name, virtual_wan_name"
        },
        "_generatevirtualwanvpnserverconfigurationvpnprofile_initial" : {
            "sync": {
                "signature": "def _generatevirtualwanvpnserverconfigurationvpnprofile_initial(\n    self,\n    resource_group_name,  # type: str\n    virtual_wan_name,  # type: str\n    vpn_client_params,  # type: \"models.VirtualWanVpnProfileParameters\"\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"\n\n:param resource_group_name: The resource group name.\n:type resource_group_name: str\n:param virtual_wan_name: The name of the VirtualWAN whose associated VpnServerConfigurations is\n needed.\n:type virtual_wan_name: str\n:param vpn_client_params: Parameters supplied to the generate VirtualWan VPN profile generation\n operation.\n:type vpn_client_params: ~azure.mgmt.network.v2019_08_01.models.VirtualWanVpnProfileParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: VpnProfileResponse, or the result of cls(response)\n:rtype: ~azure.mgmt.network.v2019_08_01.models.VpnProfileResponse or None\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def _generatevirtualwanvpnserverconfigurationvpnprofile_initial(\n    self,\n    resource_group_name: str,\n    virtual_wan_name: str,\n    vpn_client_params: \"models.VirtualWanVpnProfileParameters\",\n    **kwargs\n) -\u003e Optional[\"models.VpnProfileResponse\"]:\n",
                "doc": "\"\"\"\n\n:param resource_group_name: The resource group name.\n:type resource_group_name: str\n:param virtual_wan_name: The name of the VirtualWAN whose associated VpnServerConfigurations is\n needed.\n:type virtual_wan_name: str\n:param vpn_client_params: Parameters supplied to the generate VirtualWan VPN profile generation\n operation.\n:type vpn_client_params: ~azure.mgmt.network.v2019_08_01.models.VirtualWanVpnProfileParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: VpnProfileResponse, or the result of cls(response)\n:rtype: ~azure.mgmt.network.v2019_08_01.models.VpnProfileResponse or None\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "resource_group_name, virtual_wan_name, vpn_client_params"
        },
        "begin_generatevirtualwanvpnserverconfigurationvpnprofile" : {
            "sync": {
                "signature": "def begin_generatevirtualwanvpnserverconfigurationvpnprofile(\n    self,\n    resource_group_name,  # type: str\n    virtual_wan_name,  # type: str\n    vpn_client_params,  # type: \"models.VirtualWanVpnProfileParameters\"\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"Generates a unique VPN profile for P2S clients for VirtualWan and associated\nVpnServerConfiguration combination in the specified resource group.\n\n:param resource_group_name: The resource group name.\n:type resource_group_name: str\n:param virtual_wan_name: The name of the VirtualWAN whose associated VpnServerConfigurations is\n needed.\n:type virtual_wan_name: str\n:param vpn_client_params: Parameters supplied to the generate VirtualWan VPN profile generation\n operation.\n:type vpn_client_params: ~azure.mgmt.network.v2019_08_01.models.VirtualWanVpnProfileParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:keyword str continuation_token: A continuation token to restart a poller from a saved state.\n:keyword polling: True for ARMPolling, False for no polling, or a\n polling object for personal polling strategy\n:paramtype polling: bool or ~azure.core.polling.PollingMethod\n:keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.\n:return: An instance of LROPoller that returns either VpnProfileResponse or the result of cls(response)\n:rtype: ~azure.core.polling.LROPoller[~azure.mgmt.network.v2019_08_01.models.VpnProfileResponse]\n:raises ~azure.core.exceptions.HttpResponseError:\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def begin_generatevirtualwanvpnserverconfigurationvpnprofile(\n    self,\n    resource_group_name: str,\n    virtual_wan_name: str,\n    vpn_client_params: \"models.VirtualWanVpnProfileParameters\",\n    **kwargs\n) -\u003e AsyncLROPoller[\"models.VpnProfileResponse\"]:\n",
                "doc": "\"\"\"Generates a unique VPN profile for P2S clients for VirtualWan and associated\nVpnServerConfiguration combination in the specified resource group.\n\n:param resource_group_name: The resource group name.\n:type resource_group_name: str\n:param virtual_wan_name: The name of the VirtualWAN whose associated VpnServerConfigurations is\n needed.\n:type virtual_wan_name: str\n:param vpn_client_params: Parameters supplied to the generate VirtualWan VPN profile generation\n operation.\n:type vpn_client_params: ~azure.mgmt.network.v2019_08_01.models.VirtualWanVpnProfileParameters\n:keyword callable cls: A custom type or function that will be passed the direct response\n:keyword str continuation_token: A continuation token to restart a poller from a saved state.\n:keyword polling: True for ARMPolling, False for no polling, or a\n polling object for personal polling strategy\n:paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod\n:keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.\n:return: An instance of AsyncLROPoller that returns either VpnProfileResponse or the result of cls(response)\n:rtype: ~azure.core.polling.AsyncLROPoller[~azure.mgmt.network.v2019_08_01.models.VpnProfileResponse]\n:raises ~azure.core.exceptions.HttpResponseError:\n\"\"\""
            },
            "call": "resource_group_name, virtual_wan_name, vpn_client_params"
        }
    },
    "sync_imports": "{\"regular\": {\"azurecore\": {\"azure.core.exceptions\": [\"ClientAuthenticationError\", \"HttpResponseError\", \"ResourceExistsError\", \"ResourceNotFoundError\", \"map_error\"], \"azure.mgmt.core.exceptions\": [\"ARMErrorFormat\"], \"azure.core.pipeline\": [\"PipelineResponse\"], \"azure.core.pipeline.transport\": [\"HttpRequest\", \"HttpResponse\"], \"azure.core.polling\": [\"LROPoller\", \"NoPolling\", \"PollingMethod\"], \"azure.mgmt.core.polling.arm_polling\": [\"ARMPolling\"]}, \"stdlib\": {\"warnings\": [null]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Callable\", \"Dict\", \"Generic\", \"Optional\", \"TypeVar\", \"Union\"]}}}",
    "async_imports": "{\"regular\": {\"azurecore\": {\"azure.core.exceptions\": [\"ClientAuthenticationError\", \"HttpResponseError\", \"ResourceExistsError\", \"ResourceNotFoundError\", \"map_error\"], \"azure.mgmt.core.exceptions\": [\"ARMErrorFormat\"], \"azure.core.pipeline\": [\"PipelineResponse\"], \"azure.core.pipeline.transport\": [\"AsyncHttpResponse\", \"HttpRequest\"], \"azure.core.polling\": [\"AsyncLROPoller\", \"AsyncNoPolling\", \"AsyncPollingMethod\"], \"azure.mgmt.core.polling.async_arm_polling\": [\"AsyncARMPolling\"]}, \"stdlib\": {\"warnings\": [null]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Callable\", \"Dict\", \"Generic\", \"Optional\", \"TypeVar\", \"Union\"]}}}"
}