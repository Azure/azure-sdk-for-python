{
    "chosen_version": "2018-08-01",
    "total_api_version_list": ["2017-03-30", "2018-08-01"],
    "client": {
        "name": "NetworkManagementClient",
        "filename": "_network_management_client",
        "description": "Network Client.",
        "base_url": "\u0027https://management.azure.com\u0027",
        "custom_base_url": null,
        "azure_arm": true,
        "has_lro_operations": true,
        "client_side_validation": true
    },
    "global_parameters": {
        "sync": {
            "credential": {
                "signature": "credential,  # type: \"TokenCredential\"",
                "description": "Credential needed for the client to connect to Azure.",
                "docstring_type": "~azure.core.credentials.TokenCredential",
                "required": true
            },
            "subscription_id": {
                "signature": "subscription_id,  # type: str",
                "description": "The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
                "docstring_type": "str",
                "required": true
            }
        },
        "async": {
            "credential": {
                "signature": "credential,  # type: \"AsyncTokenCredential\"",
                "description": "Credential needed for the client to connect to Azure.",
                "docstring_type": "~azure.core.credentials_async.AsyncTokenCredential",
                "required": true
            },
            "subscription_id": {
                "signature": "subscription_id,  # type: str",
                "description": "The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.",
                "docstring_type": "str",
                "required": true
            }
        },
        "constant": {
        },
        "call": "credential, subscription_id"
    },
    "config": {
        "credential": true,
        "credential_scopes": ["https://management.azure.com/.default"],
        "credential_default_policy_type": "BearerTokenCredentialPolicy",
        "credential_default_policy_type_has_async_version": true,
        "credential_key_header_name": null
    },
    "operation_groups": {
        "application_gateways": "ApplicationGatewaysOperations",
        "application_security_groups": "ApplicationSecurityGroupsOperations",
        "available_delegations": "AvailableDelegationsOperations",
        "available_resource_group_delegations": "AvailableResourceGroupDelegationsOperations",
        "azure_firewalls": "AzureFirewallsOperations",
        "azure_firewall_fqdn_tags": "AzureFirewallFqdnTagsOperations",
        "ddos_protection_plans": "DdosProtectionPlansOperations",
        "available_endpoint_services": "AvailableEndpointServicesOperations",
        "express_route_circuit_authorizations": "ExpressRouteCircuitAuthorizationsOperations",
        "express_route_circuit_peerings": "ExpressRouteCircuitPeeringsOperations",
        "express_route_circuit_connections": "ExpressRouteCircuitConnectionsOperations",
        "express_route_circuits": "ExpressRouteCircuitsOperations",
        "express_route_service_providers": "ExpressRouteServiceProvidersOperations",
        "express_route_cross_connections": "ExpressRouteCrossConnectionsOperations",
        "express_route_cross_connection_peerings": "ExpressRouteCrossConnectionPeeringsOperations",
        "express_route_gateways": "ExpressRouteGatewaysOperations",
        "express_route_connections": "ExpressRouteConnectionsOperations",
        "express_route_ports_locations": "ExpressRoutePortsLocationsOperations",
        "express_route_ports": "ExpressRoutePortsOperations",
        "express_route_links": "ExpressRouteLinksOperations",
        "interface_endpoints": "InterfaceEndpointsOperations",
        "load_balancers": "LoadBalancersOperations",
        "load_balancer_backend_address_pools": "LoadBalancerBackendAddressPoolsOperations",
        "load_balancer_frontend_ip_configurations": "LoadBalancerFrontendIPConfigurationsOperations",
        "inbound_nat_rules": "InboundNatRulesOperations",
        "load_balancer_load_balancing_rules": "LoadBalancerLoadBalancingRulesOperations",
        "load_balancer_outbound_rules": "LoadBalancerOutboundRulesOperations",
        "load_balancer_network_interfaces": "LoadBalancerNetworkInterfacesOperations",
        "load_balancer_probes": "LoadBalancerProbesOperations",
        "network_interfaces": "NetworkInterfacesOperations",
        "network_interface_ip_configurations": "NetworkInterfaceIPConfigurationsOperations",
        "network_interface_load_balancers": "NetworkInterfaceLoadBalancersOperations",
        "network_interface_tap_configurations": "NetworkInterfaceTapConfigurationsOperations",
        "network_profiles": "NetworkProfilesOperations",
        "network_security_groups": "NetworkSecurityGroupsOperations",
        "security_rules": "SecurityRulesOperations",
        "default_security_rules": "DefaultSecurityRulesOperations",
        "network_watchers": "NetworkWatchersOperations",
        "packet_captures": "PacketCapturesOperations",
        "connection_monitors": "ConnectionMonitorsOperations",
        "operations": "Operations",
        "public_ip_addresses": "PublicIPAddressesOperations",
        "public_ip_prefixes": "PublicIPPrefixesOperations",
        "route_filters": "RouteFiltersOperations",
        "route_filter_rules": "RouteFilterRulesOperations",
        "route_tables": "RouteTablesOperations",
        "routes": "RoutesOperations",
        "bgp_service_communities": "BgpServiceCommunitiesOperations",
        "service_endpoint_policies": "ServiceEndpointPoliciesOperations",
        "service_endpoint_policy_definitions": "ServiceEndpointPolicyDefinitionsOperations",
        "usages": "UsagesOperations",
        "virtual_networks": "VirtualNetworksOperations",
        "subnets": "SubnetsOperations",
        "virtual_network_peerings": "VirtualNetworkPeeringsOperations",
        "virtual_network_taps": "VirtualNetworkTapsOperations",
        "virtual_network_gateways": "VirtualNetworkGatewaysOperations",
        "virtual_network_gateway_connections": "VirtualNetworkGatewayConnectionsOperations",
        "local_network_gateways": "LocalNetworkGatewaysOperations",
        "virtual_wans": "VirtualWansOperations",
        "vpn_sites": "VpnSitesOperations",
        "vpn_sites_configuration": "VpnSitesConfigurationOperations",
        "virtual_hubs": "VirtualHubsOperations",
        "hub_virtual_network_connections": "HubVirtualNetworkConnectionsOperations",
        "vpn_gateways": "VpnGatewaysOperations",
        "vpn_connections": "VpnConnectionsOperations",
        "p2_svpn_server_configurations": "P2SVpnServerConfigurationsOperations",
        "p2_svpn_gateways": "P2SVpnGatewaysOperations"
    },
    "operation_mixins": {
        "check_dns_name_availability" : {
            "sync": {
                "signature": "def check_dns_name_availability(\n    self,\n    location,  # type: str\n    domain_name_label,  # type: str\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"Checks whether a domain name in the cloudapp.azure.com zone is available for use.\n\n:param location: The location of the domain name.\n:type location: str\n:param domain_name_label: The domain name to be verified. It must conform to the following\n regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.\n:type domain_name_label: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DnsNameAvailabilityResult, or the result of cls(response)\n:rtype: ~azure.mgmt.network.v2018_08_01.models.DnsNameAvailabilityResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def check_dns_name_availability(\n    self,\n    location: str,\n    domain_name_label: str,\n    **kwargs\n) -\u003e \"_models.DnsNameAvailabilityResult\":\n",
                "doc": "\"\"\"Checks whether a domain name in the cloudapp.azure.com zone is available for use.\n\n:param location: The location of the domain name.\n:type location: str\n:param domain_name_label: The domain name to be verified. It must conform to the following\n regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.\n:type domain_name_label: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: DnsNameAvailabilityResult, or the result of cls(response)\n:rtype: ~azure.mgmt.network.v2018_08_01.models.DnsNameAvailabilityResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "location, domain_name_label"
        },
        "supported_security_providers" : {
            "sync": {
                "signature": "def supported_security_providers(\n    self,\n    resource_group_name,  # type: str\n    virtual_wan_name,  # type: str\n    **kwargs  # type: Any\n):\n",
                "doc": "\"\"\"Gives the supported security providers for the virtual wan.\n\n:param resource_group_name: The resource group name.\n:type resource_group_name: str\n:param virtual_wan_name: The name of the VirtualWAN for which supported security providers are\n needed.\n:type virtual_wan_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: VirtualWanSecurityProviders, or the result of cls(response)\n:rtype: ~azure.mgmt.network.v2018_08_01.models.VirtualWanSecurityProviders\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "async": {
                "coroutine": true,
                "signature": "async def supported_security_providers(\n    self,\n    resource_group_name: str,\n    virtual_wan_name: str,\n    **kwargs\n) -\u003e \"_models.VirtualWanSecurityProviders\":\n",
                "doc": "\"\"\"Gives the supported security providers for the virtual wan.\n\n:param resource_group_name: The resource group name.\n:type resource_group_name: str\n:param virtual_wan_name: The name of the VirtualWAN for which supported security providers are\n needed.\n:type virtual_wan_name: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: VirtualWanSecurityProviders, or the result of cls(response)\n:rtype: ~azure.mgmt.network.v2018_08_01.models.VirtualWanSecurityProviders\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
            },
            "call": "resource_group_name, virtual_wan_name"
        }
    },
    "sync_imports": "{\"regular\": {\"azurecore\": {\"azure.core.exceptions\": [\"ClientAuthenticationError\", \"HttpResponseError\", \"ResourceExistsError\", \"ResourceNotFoundError\", \"map_error\"], \"azure.mgmt.core.exceptions\": [\"ARMErrorFormat\"], \"azure.core.pipeline\": [\"PipelineResponse\"], \"azure.core.pipeline.transport\": [\"HttpRequest\", \"HttpResponse\"]}, \"stdlib\": {\"warnings\": [null]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Callable\", \"Dict\", \"Generic\", \"Optional\", \"TypeVar\"]}}}",
    "async_imports": "{\"regular\": {\"azurecore\": {\"azure.core.exceptions\": [\"ClientAuthenticationError\", \"HttpResponseError\", \"ResourceExistsError\", \"ResourceNotFoundError\", \"map_error\"], \"azure.mgmt.core.exceptions\": [\"ARMErrorFormat\"], \"azure.core.pipeline\": [\"PipelineResponse\"], \"azure.core.pipeline.transport\": [\"AsyncHttpResponse\", \"HttpRequest\"]}, \"stdlib\": {\"warnings\": [null]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Callable\", \"Dict\", \"Generic\", \"Optional\", \"TypeVar\"]}}}"
}