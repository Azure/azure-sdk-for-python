# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.network import NetworkManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestNetworkManagementSecurityPartnerProvidersOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(NetworkManagementClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_security_partner_providers_begin_delete(self, resource_group):
        response = self.client.security_partner_providers.begin_delete(
            resource_group_name=resource_group.name,
            security_partner_provider_name="str",
            api_version="2024-05-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_security_partner_providers_get(self, resource_group):
        response = self.client.security_partner_providers.get(
            resource_group_name=resource_group.name,
            security_partner_provider_name="str",
            api_version="2024-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_security_partner_providers_begin_create_or_update(self, resource_group):
        response = self.client.security_partner_providers.begin_create_or_update(
            resource_group_name=resource_group.name,
            security_partner_provider_name="str",
            parameters={
                "connectionStatus": "str",
                "etag": "str",
                "id": "str",
                "location": "str",
                "name": "str",
                "provisioningState": "str",
                "securityProviderName": "str",
                "tags": {"str": "str"},
                "type": "str",
                "virtualHub": {"id": "str"},
            },
            api_version="2024-05-01",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_security_partner_providers_update_tags(self, resource_group):
        response = self.client.security_partner_providers.update_tags(
            resource_group_name=resource_group.name,
            security_partner_provider_name="str",
            parameters={"tags": {"str": "str"}},
            api_version="2024-05-01",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_security_partner_providers_list_by_resource_group(self, resource_group):
        response = self.client.security_partner_providers.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2024-05-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_security_partner_providers_list(self, resource_group):
        response = self.client.security_partner_providers.list(
            api_version="2024-05-01",
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...
