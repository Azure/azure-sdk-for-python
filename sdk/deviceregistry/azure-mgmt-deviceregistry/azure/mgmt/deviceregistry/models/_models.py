# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models


class ArmOperationStatusResourceProvisioningState(_model_base.Model):  # pylint: disable=name-too-long
    """Standard Azure Resource Manager operation status response.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar status: The operation status. Required. Known values are: "Succeeded", "Failed", and
     "Canceled".
    :vartype status: str or ~azure.mgmt.deviceregistry.models.ResourceProvisioningState
    :ivar name: The name of the  operationStatus resource.
    :vartype name: str
    :ivar start_time: Operation start time.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Operation complete time.
    :vartype end_time: ~datetime.datetime
    :ivar percent_complete: The progress made toward completing the operation.
    :vartype percent_complete: float
    :ivar error: Errors that occurred if the operation ended with Canceled or Failed status.
    :vartype error: ~azure.mgmt.deviceregistry.models.ErrorDetail
    """

    status: Union[str, "_models.ResourceProvisioningState"] = rest_field()
    """The operation status. Required. Known values are: \"Succeeded\", \"Failed\", and \"Canceled\"."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the  operationStatus resource."""
    start_time: Optional[datetime.datetime] = rest_field(name="startTime", visibility=["read"], format="rfc3339")
    """Operation start time."""
    end_time: Optional[datetime.datetime] = rest_field(name="endTime", visibility=["read"], format="rfc3339")
    """Operation complete time."""
    percent_complete: Optional[float] = rest_field(name="percentComplete", visibility=["read"])
    """The progress made toward completing the operation."""
    error: Optional["_models.ErrorDetail"] = rest_field(visibility=["read"])
    """Errors that occurred if the operation ended with Canceled or Failed status."""

    @overload
    def __init__(
        self,
        *,
        status: Union[str, "_models.ResourceProvisioningState"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ArmResourceBase(_model_base.Model):
    """Base class used for type definitions."""


class ArmResource(ArmResourceBase):
    """Common properties for all Azure Resource Manager resources.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
     Required.
    :vartype id: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts". Required.
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.deviceregistry.models.SystemData
    """

    id: str = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
     Required."""
    type: str = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\". Required."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class TrackedResourceBase(ArmResource):
    """The resource model definition for an Azure Resource Manager tracked top level resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
     Required.
    :vartype id: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts". Required.
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.deviceregistry.models.SystemData
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""
    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Asset(TrackedResourceBase):
    """Asset definition.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
     Required.
    :vartype id: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts". Required.
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.deviceregistry.models.SystemData
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.deviceregistry.models.AssetProperties
    :ivar extended_location: The extended location. Required.
    :vartype extended_location: ~azure.mgmt.deviceregistry.models.ExtendedLocation
    """

    properties: Optional["_models.AssetProperties"] = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource."""
    extended_location: "_models.ExtendedLocation" = rest_field(name="extendedLocation", visibility=["read", "create"])
    """The extended location. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        extended_location: "_models.ExtendedLocation",
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.AssetProperties"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AssetEndpointProfile(TrackedResourceBase):
    """Asset Endpoint Profile definition.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.  # pylint: disable=line-too-long
     Required.
    :vartype id: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts". Required.
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.deviceregistry.models.SystemData
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties: The resource-specific properties for this resource.
    :vartype properties: ~azure.mgmt.deviceregistry.models.AssetEndpointProfileProperties
    :ivar extended_location: The extended location. Required.
    :vartype extended_location: ~azure.mgmt.deviceregistry.models.ExtendedLocation
    """

    properties: Optional["_models.AssetEndpointProfileProperties"] = rest_field(visibility=["read", "create"])
    """The resource-specific properties for this resource."""
    extended_location: "_models.ExtendedLocation" = rest_field(name="extendedLocation", visibility=["read", "create"])
    """The extended location. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        extended_location: "_models.ExtendedLocation",
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.AssetEndpointProfileProperties"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AssetEndpointProfileListResult(_model_base.Model):
    """The response of a AssetEndpointProfile list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The AssetEndpointProfile items on this page. Required.
    :vartype value: list[~azure.mgmt.deviceregistry.models.AssetEndpointProfile]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    value: List["_models.AssetEndpointProfile"] = rest_field()
    """The AssetEndpointProfile items on this page. Required."""
    next_link: Optional[str] = rest_field(name="nextLink")
    """The link to the next page of items."""

    @overload
    def __init__(
        self,
        *,
        value: List["_models.AssetEndpointProfile"],
        next_link: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AssetEndpointProfileProperties(_model_base.Model):
    """Defines the Asset Endpoint Profile properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar uuid: Globally unique, immutable, non-reusable id.
    :vartype uuid: str
    :ivar target_address: The local valid URI specifying the network address/DNS name of a
     southbound device. The scheme part of the targetAddress URI specifies the type of the device.
     The additionalConfiguration field holds further connector type specific configuration.
     Required.
    :vartype target_address: str
    :ivar user_authentication: Defines the client authentication mechanism to the server.
    :vartype user_authentication: ~azure.mgmt.deviceregistry.models.UserAuthentication
    :ivar transport_authentication: Defines the authentication mechanism for the southbound
     connector connecting to the shop floor/OT device.
    :vartype transport_authentication: ~azure.mgmt.deviceregistry.models.TransportAuthentication
    :ivar additional_configuration: Contains connectivity type specific further configuration (e.g.
     OPC UA, Modbus, ONVIF).
    :vartype additional_configuration: str
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Succeeded",
     "Failed", "Canceled", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.deviceregistry.models.ProvisioningState
    """

    uuid: Optional[str] = rest_field(visibility=["read"])
    """Globally unique, immutable, non-reusable id."""
    target_address: str = rest_field(name="targetAddress")
    """The local valid URI specifying the network address/DNS name of a southbound device. The scheme
     part of the targetAddress URI specifies the type of the device. The additionalConfiguration
     field holds further connector type specific configuration. Required."""
    user_authentication: Optional["_models.UserAuthentication"] = rest_field(name="userAuthentication")
    """Defines the client authentication mechanism to the server."""
    transport_authentication: Optional["_models.TransportAuthentication"] = rest_field(name="transportAuthentication")
    """Defines the authentication mechanism for the southbound connector connecting to the shop
     floor/OT device."""
    additional_configuration: Optional[str] = rest_field(name="additionalConfiguration")
    """Contains connectivity type specific further configuration (e.g. OPC UA, Modbus, ONVIF)."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the resource. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     and \"Accepted\"."""

    @overload
    def __init__(
        self,
        *,
        target_address: str,
        user_authentication: Optional["_models.UserAuthentication"] = None,
        transport_authentication: Optional["_models.TransportAuthentication"] = None,
        additional_configuration: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AssetEndpointProfileUpdate(_model_base.Model):
    """The type used for update operations of the AssetEndpointProfile.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties:
    :vartype properties: ~azure.mgmt.deviceregistry.models.AssetEndpointProfileUpdateProperties
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""
    properties: Optional["_models.AssetEndpointProfileUpdateProperties"] = rest_field()

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.AssetEndpointProfileUpdateProperties"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AssetEndpointProfileUpdateProperties(_model_base.Model):
    """The updatable properties of the AssetEndpointProfile.

    :ivar target_address: The local valid URI specifying the network address/DNS name of a
     southbound device. The scheme part of the targetAddress URI specifies the type of the device.
     The additionalConfiguration field holds further connector type specific configuration.
    :vartype target_address: str
    :ivar user_authentication: Defines the client authentication mechanism to the server.
    :vartype user_authentication: ~azure.mgmt.deviceregistry.models.UserAuthentication
    :ivar transport_authentication: Defines the authentication mechanism for the southbound
     connector connecting to the shop floor/OT device.
    :vartype transport_authentication: ~azure.mgmt.deviceregistry.models.TransportAuthentication
    :ivar additional_configuration: Contains connectivity type specific further configuration (e.g.
     OPC UA, Modbus, ONVIF).
    :vartype additional_configuration: str
    """

    target_address: Optional[str] = rest_field(name="targetAddress")
    """The local valid URI specifying the network address/DNS name of a southbound device. The scheme
     part of the targetAddress URI specifies the type of the device. The additionalConfiguration
     field holds further connector type specific configuration."""
    user_authentication: Optional["_models.UserAuthentication"] = rest_field(name="userAuthentication")
    """Defines the client authentication mechanism to the server."""
    transport_authentication: Optional["_models.TransportAuthentication"] = rest_field(name="transportAuthentication")
    """Defines the authentication mechanism for the southbound connector connecting to the shop
     floor/OT device."""
    additional_configuration: Optional[str] = rest_field(name="additionalConfiguration")
    """Contains connectivity type specific further configuration (e.g. OPC UA, Modbus, ONVIF)."""

    @overload
    def __init__(
        self,
        *,
        target_address: Optional[str] = None,
        user_authentication: Optional["_models.UserAuthentication"] = None,
        transport_authentication: Optional["_models.TransportAuthentication"] = None,
        additional_configuration: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AssetListResult(_model_base.Model):
    """The response of a Asset list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The Asset items on this page. Required.
    :vartype value: list[~azure.mgmt.deviceregistry.models.Asset]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    value: List["_models.Asset"] = rest_field()
    """The Asset items on this page. Required."""
    next_link: Optional[str] = rest_field(name="nextLink")
    """The link to the next page of items."""

    @overload
    def __init__(
        self,
        *,
        value: List["_models.Asset"],
        next_link: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AssetProperties(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Defines the asset properties.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar uuid: Globally unique, immutable, non-reusable id.
    :vartype uuid: str
    :ivar asset_type: Resource path to asset type (model) definition.
    :vartype asset_type: str
    :ivar enabled: Enabled/Disabled status of the asset.
    :vartype enabled: bool
    :ivar external_asset_id: Asset id provided by the customer.
    :vartype external_asset_id: str
    :ivar display_name: Human-readable display name.
    :vartype display_name: str
    :ivar description: Human-readable description of the asset.
    :vartype description: str
    :ivar asset_endpoint_profile_uri: A reference to the asset endpoint profile (connection
     information) used by brokers to connect to an endpoint that provides data points for this
     asset. Must have the format <ModuleCR.metadata.namespace>/<ModuleCR.metadata.name>. Required.
    :vartype asset_endpoint_profile_uri: str
    :ivar version: An integer that is incremented each time the resource is modified.
    :vartype version: int
    :ivar manufacturer: Asset manufacturer name.
    :vartype manufacturer: str
    :ivar manufacturer_uri: Asset manufacturer URI.
    :vartype manufacturer_uri: str
    :ivar model: Asset model name.
    :vartype model: str
    :ivar product_code: Asset product code.
    :vartype product_code: str
    :ivar hardware_revision: Revision number of the hardware.
    :vartype hardware_revision: str
    :ivar software_revision: Revision number of the software.
    :vartype software_revision: str
    :ivar documentation_uri: Reference to the documentation.
    :vartype documentation_uri: str
    :ivar serial_number: Asset serial number.
    :vartype serial_number: str
    :ivar attributes: A set of key-value pairs that contain custom attributes set by the customer.
    :vartype attributes: dict[str, any]
    :ivar default_data_points_configuration: Protocol-specific default configuration for all data
     points. Each data point can have its own configuration that overrides the default settings
     here. This assumes that each asset instance has one protocol.
    :vartype default_data_points_configuration: str
    :ivar default_events_configuration: Protocol-specific default configuration for all events.
     Each event can have its own configuration that overrides the default settings here. This
     assumes that each asset instance has one protocol.
    :vartype default_events_configuration: str
    :ivar data_points: Array of data points that are part of the asset. Each data point can
     reference an asset type capability and have per-data point configuration. See below for more
     details for the definition of the dataPoints element.
    :vartype data_points: list[~azure.mgmt.deviceregistry.models.DataPoint]
    :ivar events: Array of events that are part of the asset. Each event can reference an asset
     type capability and have per-event configuration. See below for more details about the
     definition of the events element.
    :vartype events: list[~azure.mgmt.deviceregistry.models.Event]
    :ivar status: Read only object to reflect changes that have occurred on the Edge. Similar to
     Kubernetes status property for custom resources.
    :vartype status: ~azure.mgmt.deviceregistry.models.AssetStatus
    :ivar provisioning_state: Provisioning state of the resource. Known values are: "Succeeded",
     "Failed", "Canceled", and "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.deviceregistry.models.ProvisioningState
    """

    uuid: Optional[str] = rest_field(visibility=["read"])
    """Globally unique, immutable, non-reusable id."""
    asset_type: Optional[str] = rest_field(name="assetType")
    """Resource path to asset type (model) definition."""
    enabled: Optional[bool] = rest_field()
    """Enabled/Disabled status of the asset."""
    external_asset_id: Optional[str] = rest_field(name="externalAssetId", visibility=["read", "create"])
    """Asset id provided by the customer."""
    display_name: Optional[str] = rest_field(name="displayName")
    """Human-readable display name."""
    description: Optional[str] = rest_field()
    """Human-readable description of the asset."""
    asset_endpoint_profile_uri: str = rest_field(name="assetEndpointProfileUri", visibility=["read", "create"])
    """A reference to the asset endpoint profile (connection information) used by brokers to connect
     to an endpoint that provides data points for this asset. Must have the format
     <ModuleCR.metadata.namespace>/<ModuleCR.metadata.name>. Required."""
    version: Optional[int] = rest_field(visibility=["read"])
    """An integer that is incremented each time the resource is modified."""
    manufacturer: Optional[str] = rest_field()
    """Asset manufacturer name."""
    manufacturer_uri: Optional[str] = rest_field(name="manufacturerUri")
    """Asset manufacturer URI."""
    model: Optional[str] = rest_field()
    """Asset model name."""
    product_code: Optional[str] = rest_field(name="productCode")
    """Asset product code."""
    hardware_revision: Optional[str] = rest_field(name="hardwareRevision")
    """Revision number of the hardware."""
    software_revision: Optional[str] = rest_field(name="softwareRevision")
    """Revision number of the software."""
    documentation_uri: Optional[str] = rest_field(name="documentationUri")
    """Reference to the documentation."""
    serial_number: Optional[str] = rest_field(name="serialNumber")
    """Asset serial number."""
    attributes: Optional[Dict[str, Any]] = rest_field()
    """A set of key-value pairs that contain custom attributes set by the customer."""
    default_data_points_configuration: Optional[str] = rest_field(name="defaultDataPointsConfiguration")
    """Protocol-specific default configuration for all data points. Each data point can have its own
     configuration that overrides the default settings here. This assumes that each asset instance
     has one protocol."""
    default_events_configuration: Optional[str] = rest_field(name="defaultEventsConfiguration")
    """Protocol-specific default configuration for all events. Each event can have its own
     configuration that overrides the default settings here. This assumes that each asset instance
     has one protocol."""
    data_points: Optional[List["_models.DataPoint"]] = rest_field(name="dataPoints")
    """Array of data points that are part of the asset. Each data point can reference an asset type
     capability and have per-data point configuration. See below for more details for the definition
     of the dataPoints element."""
    events: Optional[List["_models.Event"]] = rest_field()
    """Array of events that are part of the asset. Each event can reference an asset type capability
     and have per-event configuration. See below for more details about the definition of the events
     element."""
    status: Optional["_models.AssetStatus"] = rest_field(visibility=["read"])
    """Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes
     status property for custom resources."""
    provisioning_state: Optional[Union[str, "_models.ProvisioningState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provisioning state of the resource. Known values are: \"Succeeded\", \"Failed\", \"Canceled\",
     and \"Accepted\"."""

    @overload
    def __init__(
        self,
        *,
        asset_endpoint_profile_uri: str,
        asset_type: Optional[str] = None,
        enabled: Optional[bool] = None,
        external_asset_id: Optional[str] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        manufacturer: Optional[str] = None,
        manufacturer_uri: Optional[str] = None,
        model: Optional[str] = None,
        product_code: Optional[str] = None,
        hardware_revision: Optional[str] = None,
        software_revision: Optional[str] = None,
        documentation_uri: Optional[str] = None,
        serial_number: Optional[str] = None,
        attributes: Optional[Dict[str, Any]] = None,
        default_data_points_configuration: Optional[str] = None,
        default_events_configuration: Optional[str] = None,
        data_points: Optional[List["_models.DataPoint"]] = None,
        events: Optional[List["_models.Event"]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AssetStatus(_model_base.Model):
    """Defines the asset status properties.

    :ivar errors: Array object to transfer and persist errors that originate from the Edge.
    :vartype errors: list[~azure.mgmt.deviceregistry.models.AssetStatusError]
    :ivar version: A read only incremental counter indicating the number of times the configuration
     has been modified from the perspective of the current actual (Edge) state of the Asset. Edge
     would be the only writer of this value and would sync back up to the cloud. In steady state,
     this should equal version.
    :vartype version: int
    """

    errors: Optional[List["_models.AssetStatusError"]] = rest_field()
    """Array object to transfer and persist errors that originate from the Edge."""
    version: Optional[int] = rest_field()
    """A read only incremental counter indicating the number of times the configuration has been
     modified from the perspective of the current actual (Edge) state of the Asset. Edge would be
     the only writer of this value and would sync back up to the cloud. In steady state, this should
     equal version."""

    @overload
    def __init__(
        self,
        *,
        errors: Optional[List["_models.AssetStatusError"]] = None,
        version: Optional[int] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AssetStatusError(_model_base.Model):
    """Defines the asset status error properties.

    :ivar code: Error code for classification of errors (ex: 400, 404, 500, etc.).
    :vartype code: int
    :ivar message: Human readable helpful error message to provide additional context for error
     (ex: “capability Id 'foo' does not exist”).
    :vartype message: str
    """

    code: Optional[int] = rest_field()
    """Error code for classification of errors (ex: 400, 404, 500, etc.)."""
    message: Optional[str] = rest_field()
    """Human readable helpful error message to provide additional context for error (ex: “capability
     Id 'foo' does not exist”)."""

    @overload
    def __init__(
        self,
        *,
        code: Optional[int] = None,
        message: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AssetUpdate(_model_base.Model):
    """The type used for update operations of the Asset.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar properties:
    :vartype properties: ~azure.mgmt.deviceregistry.models.AssetUpdateProperties
    """

    tags: Optional[Dict[str, str]] = rest_field()
    """Resource tags."""
    properties: Optional["_models.AssetUpdateProperties"] = rest_field()

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["_models.AssetUpdateProperties"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class AssetUpdateProperties(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """The updatable properties of the Asset.

    :ivar asset_type: Resource path to asset type (model) definition.
    :vartype asset_type: str
    :ivar enabled: Enabled/Disabled status of the asset.
    :vartype enabled: bool
    :ivar display_name: Human-readable display name.
    :vartype display_name: str
    :ivar description: Human-readable description of the asset.
    :vartype description: str
    :ivar manufacturer: Asset manufacturer name.
    :vartype manufacturer: str
    :ivar manufacturer_uri: Asset manufacturer URI.
    :vartype manufacturer_uri: str
    :ivar model: Asset model name.
    :vartype model: str
    :ivar product_code: Asset product code.
    :vartype product_code: str
    :ivar hardware_revision: Revision number of the hardware.
    :vartype hardware_revision: str
    :ivar software_revision: Revision number of the software.
    :vartype software_revision: str
    :ivar documentation_uri: Reference to the documentation.
    :vartype documentation_uri: str
    :ivar serial_number: Asset serial number.
    :vartype serial_number: str
    :ivar attributes: A set of key-value pairs that contain custom attributes set by the customer.
    :vartype attributes: dict[str, any]
    :ivar default_data_points_configuration: Protocol-specific default configuration for all data
     points. Each data point can have its own configuration that overrides the default settings
     here. This assumes that each asset instance has one protocol.
    :vartype default_data_points_configuration: str
    :ivar default_events_configuration: Protocol-specific default configuration for all events.
     Each event can have its own configuration that overrides the default settings here. This
     assumes that each asset instance has one protocol.
    :vartype default_events_configuration: str
    :ivar data_points: Array of data points that are part of the asset. Each data point can
     reference an asset type capability and have per-data point configuration. See below for more
     details for the definition of the dataPoints element.
    :vartype data_points: list[~azure.mgmt.deviceregistry.models.DataPoint]
    :ivar events: Array of events that are part of the asset. Each event can reference an asset
     type capability and have per-event configuration. See below for more details about the
     definition of the events element.
    :vartype events: list[~azure.mgmt.deviceregistry.models.Event]
    """

    asset_type: Optional[str] = rest_field(name="assetType")
    """Resource path to asset type (model) definition."""
    enabled: Optional[bool] = rest_field()
    """Enabled/Disabled status of the asset."""
    display_name: Optional[str] = rest_field(name="displayName")
    """Human-readable display name."""
    description: Optional[str] = rest_field()
    """Human-readable description of the asset."""
    manufacturer: Optional[str] = rest_field()
    """Asset manufacturer name."""
    manufacturer_uri: Optional[str] = rest_field(name="manufacturerUri")
    """Asset manufacturer URI."""
    model: Optional[str] = rest_field()
    """Asset model name."""
    product_code: Optional[str] = rest_field(name="productCode")
    """Asset product code."""
    hardware_revision: Optional[str] = rest_field(name="hardwareRevision")
    """Revision number of the hardware."""
    software_revision: Optional[str] = rest_field(name="softwareRevision")
    """Revision number of the software."""
    documentation_uri: Optional[str] = rest_field(name="documentationUri")
    """Reference to the documentation."""
    serial_number: Optional[str] = rest_field(name="serialNumber")
    """Asset serial number."""
    attributes: Optional[Dict[str, Any]] = rest_field()
    """A set of key-value pairs that contain custom attributes set by the customer."""
    default_data_points_configuration: Optional[str] = rest_field(name="defaultDataPointsConfiguration")
    """Protocol-specific default configuration for all data points. Each data point can have its own
     configuration that overrides the default settings here. This assumes that each asset instance
     has one protocol."""
    default_events_configuration: Optional[str] = rest_field(name="defaultEventsConfiguration")
    """Protocol-specific default configuration for all events. Each event can have its own
     configuration that overrides the default settings here. This assumes that each asset instance
     has one protocol."""
    data_points: Optional[List["_models.DataPoint"]] = rest_field(name="dataPoints")
    """Array of data points that are part of the asset. Each data point can reference an asset type
     capability and have per-data point configuration. See below for more details for the definition
     of the dataPoints element."""
    events: Optional[List["_models.Event"]] = rest_field()
    """Array of events that are part of the asset. Each event can reference an asset type capability
     and have per-event configuration. See below for more details about the definition of the events
     element."""

    @overload
    def __init__(
        self,
        *,
        asset_type: Optional[str] = None,
        enabled: Optional[bool] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
        manufacturer: Optional[str] = None,
        manufacturer_uri: Optional[str] = None,
        model: Optional[str] = None,
        product_code: Optional[str] = None,
        hardware_revision: Optional[str] = None,
        software_revision: Optional[str] = None,
        documentation_uri: Optional[str] = None,
        serial_number: Optional[str] = None,
        attributes: Optional[Dict[str, Any]] = None,
        default_data_points_configuration: Optional[str] = None,
        default_events_configuration: Optional[str] = None,
        data_points: Optional[List["_models.DataPoint"]] = None,
        events: Optional[List["_models.Event"]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class DataPoint(_model_base.Model):
    """Defines the data point properties.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the data point.
    :vartype name: str
    :ivar data_source: The address of the source of the data in the asset (e.g. URL) so that a
     client can access the data source on the asset. Required.
    :vartype data_source: str
    :ivar capability_id: The path to the type definition of the capability (e.g. DTMI, OPC UA
     information model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1.
    :vartype capability_id: str
    :ivar observability_mode: An indication of how the data point should be mapped to
     OpenTelemetry. Known values are: "none", "counter", "gauge", "histogram", and "log".
    :vartype observability_mode: str or
     ~azure.mgmt.deviceregistry.models.DataPointsObservabilityMode
    :ivar data_point_configuration: Protocol-specific configuration for the data point. For OPC UA,
     this could include configuration like, publishingInterval, samplingInterval, and queueSize.
    :vartype data_point_configuration: str
    """

    name: Optional[str] = rest_field()
    """The name of the data point."""
    data_source: str = rest_field(name="dataSource")
    """The address of the source of the data in the asset (e.g. URL) so that a client can access the
     data source on the asset. Required."""
    capability_id: Optional[str] = rest_field(name="capabilityId")
    """The path to the type definition of the capability (e.g. DTMI, OPC UA information model node id,
     etc.), for example dtmi:com:example:Robot:_contents:__prop1;1."""
    observability_mode: Optional[Union[str, "_models.DataPointsObservabilityMode"]] = rest_field(
        name="observabilityMode"
    )
    """An indication of how the data point should be mapped to OpenTelemetry. Known values are:
     \"none\", \"counter\", \"gauge\", \"histogram\", and \"log\"."""
    data_point_configuration: Optional[str] = rest_field(name="dataPointConfiguration")
    """Protocol-specific configuration for the data point. For OPC UA, this could include
     configuration like, publishingInterval, samplingInterval, and queueSize."""

    @overload
    def __init__(
        self,
        *,
        data_source: str,
        name: Optional[str] = None,
        capability_id: Optional[str] = None,
        observability_mode: Optional[Union[str, "_models.DataPointsObservabilityMode"]] = None,
        data_point_configuration: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_model_base.Model):
    """The resource management error additional info.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_model_base.Model):
    """The error detail.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.deviceregistry.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.deviceregistry.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_model_base.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.deviceregistry.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field()
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Event(_model_base.Model):
    """Defines the event properties.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the event.
    :vartype name: str
    :ivar event_notifier: The address of the notifier of the event in the asset (e.g. URL) so that
     a client can access the event on the asset. Required.
    :vartype event_notifier: str
    :ivar capability_id: The path to the type definition of the capability (e.g. DTMI, OPC UA
     information model node id, etc.), for example dtmi:com:example:Robot:_contents:__prop1;1.
    :vartype capability_id: str
    :ivar observability_mode: An indication of how the event should be mapped to OpenTelemetry.
     Known values are: "none" and "log".
    :vartype observability_mode: str or ~azure.mgmt.deviceregistry.models.EventsObservabilityMode
    :ivar event_configuration: Protocol-specific configuration for the event. For OPC UA, this
     could include configuration like, publishingInterval, samplingInterval, and queueSize.
    :vartype event_configuration: str
    """

    name: Optional[str] = rest_field()
    """The name of the event."""
    event_notifier: str = rest_field(name="eventNotifier")
    """The address of the notifier of the event in the asset (e.g. URL) so that a client can access
     the event on the asset. Required."""
    capability_id: Optional[str] = rest_field(name="capabilityId")
    """The path to the type definition of the capability (e.g. DTMI, OPC UA information model node id,
     etc.), for example dtmi:com:example:Robot:_contents:__prop1;1."""
    observability_mode: Optional[Union[str, "_models.EventsObservabilityMode"]] = rest_field(name="observabilityMode")
    """An indication of how the event should be mapped to OpenTelemetry. Known values are: \"none\"
     and \"log\"."""
    event_configuration: Optional[str] = rest_field(name="eventConfiguration")
    """Protocol-specific configuration for the event. For OPC UA, this could include configuration
     like, publishingInterval, samplingInterval, and queueSize."""

    @overload
    def __init__(
        self,
        *,
        event_notifier: str,
        name: Optional[str] = None,
        capability_id: Optional[str] = None,
        observability_mode: Optional[Union[str, "_models.EventsObservabilityMode"]] = None,
        event_configuration: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class ExtendedLocation(_model_base.Model):
    """The extended location.

    All required parameters must be populated in order to send to server.

    :ivar type: The extended location type. Required.
    :vartype type: str
    :ivar name: The extended location name. Required.
    :vartype name: str
    """

    type: str = rest_field()
    """The extended location type. Required."""
    name: str = rest_field()
    """The extended location name. Required."""

    @overload
    def __init__(
        self,
        *,
        type: str,
        name: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class Operation(_model_base.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for Azure Resource Manager/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.deviceregistry.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.deviceregistry.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. "Internal"
    :vartype action_type: str or ~azure.mgmt.deviceregistry.models.ActionType
    """

    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     \"Microsoft.Compute/virtualMachines/write\",
     \"Microsoft.Compute/virtualMachines/capture/action\"."""
    is_data_action: Optional[bool] = rest_field(name="isDataAction", visibility=["read"])
    """Whether the operation applies to data-plane. This is \"true\" for data-plane operations and
     \"false\" for Azure Resource Manager/control-plane operations."""
    display: Optional["_models.OperationDisplay"] = rest_field()
    """Localized display information for this particular operation."""
    origin: Optional[Union[str, "_models.Origin"]] = rest_field(visibility=["read"])
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
     logs UX. Default value is \"user,system\". Known values are: \"user\", \"system\", and
     \"user,system\"."""
    action_type: Optional[Union[str, "_models.ActionType"]] = rest_field(name="actionType")
    """Enum. Indicates the action type. \"Internal\" refers to actions that are for internal only
     APIs. \"Internal\""""

    @overload
    def __init__(
        self,
        *,
        display: Optional["_models.OperationDisplay"] = None,
        action_type: Optional[Union[str, "_models.ActionType"]] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class OperationDisplay(_model_base.Model):
    """Localized display information for and operation.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    provider: Optional[str] = rest_field()
    """The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring
     Insights\" or \"Microsoft Compute\"."""
    resource: Optional[str] = rest_field()
    """The localized friendly name of the resource type related to this operation. E.g. \"Virtual
     Machines\" or \"Job Schedule Collections\"."""
    operation: Optional[str] = rest_field()
    """The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create
     or Update Virtual Machine\", \"Restart Virtual Machine\"."""
    description: Optional[str] = rest_field()
    """The short, localized friendly description of the operation; suitable for tool tips and detailed
     views."""

    @overload
    def __init__(
        self,
        *,
        provider: Optional[str] = None,
        resource: Optional[str] = None,
        operation: Optional[str] = None,
        description: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class OperationStatusResult(_model_base.Model):
    """The current status of an async operation.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified ID for the async operation.
    :vartype id: str
    :ivar name: Name of the async operation.
    :vartype name: str
    :ivar status: Operation status. Required.
    :vartype status: str
    :ivar percent_complete: Percent of the operation that is complete.
    :vartype percent_complete: int
    :ivar start_time: The start time of the operation.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The end time of the operation.
    :vartype end_time: ~datetime.datetime
    :ivar operations: The operations list. Required.
    :vartype operations: list[~azure.mgmt.deviceregistry.models.OperationStatusResult]
    :ivar error: If present, details of the operation error.
    :vartype error: ~azure.mgmt.deviceregistry.models.ErrorDetail
    """

    id: Optional[str] = rest_field()
    """Fully qualified ID for the async operation."""
    name: Optional[str] = rest_field()
    """Name of the async operation."""
    status: str = rest_field()
    """Operation status. Required."""
    percent_complete: Optional[int] = rest_field(name="percentComplete")
    """Percent of the operation that is complete."""
    start_time: Optional[datetime.datetime] = rest_field(name="startTime", format="rfc3339")
    """The start time of the operation."""
    end_time: Optional[datetime.datetime] = rest_field(name="endTime", format="rfc3339")
    """The end time of the operation."""
    operations: List["_models.OperationStatusResult"] = rest_field()
    """The operations list. Required."""
    error: Optional["_models.ErrorDetail"] = rest_field()
    """If present, details of the operation error."""

    @overload
    def __init__(
        self,
        *,
        status: str,
        operations: List["_models.OperationStatusResult"],
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        name: Optional[str] = None,
        percent_complete: Optional[int] = None,
        start_time: Optional[datetime.datetime] = None,
        end_time: Optional[datetime.datetime] = None,
        error: Optional["_models.ErrorDetail"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class OwnCertificate(_model_base.Model):
    """Certificate or private key that can be used by the southbound connector connecting to the shop
    floor/OT device. The accepted extensions are .der for certificates and .pfx/.pem for private
    keys.

    :ivar cert_thumbprint: Certificate thumbprint.
    :vartype cert_thumbprint: str
    :ivar cert_secret_reference: Secret Reference name (cert and private key).
    :vartype cert_secret_reference: str
    :ivar cert_password_reference: Secret Reference Name (Pfx or Pem password).
    :vartype cert_password_reference: str
    """

    cert_thumbprint: Optional[str] = rest_field(name="certThumbprint")
    """Certificate thumbprint."""
    cert_secret_reference: Optional[str] = rest_field(name="certSecretReference")
    """Secret Reference name (cert and private key)."""
    cert_password_reference: Optional[str] = rest_field(name="certPasswordReference")
    """Secret Reference Name (Pfx or Pem password)."""

    @overload
    def __init__(
        self,
        *,
        cert_thumbprint: Optional[str] = None,
        cert_secret_reference: Optional[str] = None,
        cert_password_reference: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class PagedOperation(_model_base.Model):
    """A list of REST API operations supported by an Azure Resource Provider. It contains an URL link
    to get the next set of results.

    All required parameters must be populated in order to send to server.

    :ivar value: The Operation items on this page. Required.
    :vartype value: list[~azure.mgmt.deviceregistry.models.Operation]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    value: List["_models.Operation"] = rest_field()
    """The Operation items on this page. Required."""
    next_link: Optional[str] = rest_field(name="nextLink")
    """The link to the next page of items."""

    @overload
    def __init__(
        self,
        *,
        value: List["_models.Operation"],
        next_link: Optional[str] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class SystemData(_model_base.Model):
    """Metadata pertaining to creation and last modification of the resource.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.deviceregistry.models.CreatedByType
    :ivar created_at: The type of identity that created the resource.
    :vartype created_at: ~datetime.date
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.deviceregistry.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.date
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.date] = rest_field(name="createdAt", visibility=["read"])
    """The type of identity that created the resource."""
    last_modified_by: Optional[str] = rest_field(name="lastModifiedBy", visibility=["read"])
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.date] = rest_field(name="lastModifiedAt", visibility=["read"])
    """The timestamp of resource last modification (UTC)."""


class TransportAuthentication(_model_base.Model):
    """Definition of the authentication mechanism for the southbound connector.

    All required parameters must be populated in order to send to server.

    :ivar own_certificates: Defines a reference to a secret which contains all certificates and
     private keys that can be used by the southbound connector connecting to the shop floor/OT
     device. The accepted extensions are .der for certificates and .pfx/.pem for private keys.
     Required.
    :vartype own_certificates: list[~azure.mgmt.deviceregistry.models.OwnCertificate]
    """

    own_certificates: List["_models.OwnCertificate"] = rest_field(name="ownCertificates")
    """Defines a reference to a secret which contains all certificates and private keys that can be
     used by the southbound connector connecting to the shop floor/OT device. The accepted
     extensions are .der for certificates and .pfx/.pem for private keys. Required."""

    @overload
    def __init__(
        self,
        *,
        own_certificates: List["_models.OwnCertificate"],
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class UserAuthentication(_model_base.Model):
    """Definition of the client authentication mechanism to the server.

    All required parameters must be populated in order to send to server.

    :ivar mode: Defines the mode to authenticate the user of the client at the server. Required.
     Known values are: "Anonymous", "Certificate", and "UsernamePassword".
    :vartype mode: str or ~azure.mgmt.deviceregistry.models.UserAuthenticationMode
    :ivar username_password_credentials: Defines the username and password references when
     UsernamePassword user authentication mode is selected.
    :vartype username_password_credentials:
     ~azure.mgmt.deviceregistry.models.UsernamePasswordCredentials
    :ivar x509_credentials: Defines the certificate reference when Certificate user authentication
     mode is selected.
    :vartype x509_credentials: ~azure.mgmt.deviceregistry.models.X509Credentials
    """

    mode: Union[str, "_models.UserAuthenticationMode"] = rest_field()
    """Defines the mode to authenticate the user of the client at the server. Required. Known values
     are: \"Anonymous\", \"Certificate\", and \"UsernamePassword\"."""
    username_password_credentials: Optional["_models.UsernamePasswordCredentials"] = rest_field(
        name="usernamePasswordCredentials"
    )
    """Defines the username and password references when UsernamePassword user authentication mode is
     selected."""
    x509_credentials: Optional["_models.X509Credentials"] = rest_field(name="x509Credentials")
    """Defines the certificate reference when Certificate user authentication mode is selected."""

    @overload
    def __init__(
        self,
        *,
        mode: Union[str, "_models.UserAuthenticationMode"],
        username_password_credentials: Optional["_models.UsernamePasswordCredentials"] = None,
        x509_credentials: Optional["_models.X509Credentials"] = None,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class UsernamePasswordCredentials(_model_base.Model):
    """The credentials for authentication mode UsernamePassword.

    All required parameters must be populated in order to send to server.

    :ivar username_reference: A reference to secret containing the username. Required.
    :vartype username_reference: str
    :ivar password_reference: A reference to secret containing the password. Required.
    :vartype password_reference: str
    """

    username_reference: str = rest_field(name="usernameReference")
    """A reference to secret containing the username. Required."""
    password_reference: str = rest_field(name="passwordReference")
    """A reference to secret containing the password. Required."""

    @overload
    def __init__(
        self,
        *,
        username_reference: str,
        password_reference: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)


class X509Credentials(_model_base.Model):
    """The x509 certificate for authentication mode Certificate.

    All required parameters must be populated in order to send to server.

    :ivar certificate_reference: A reference to secret containing the certificate and private key
     (e.g. stored as .der/.pem or .der/.pfx). Required.
    :vartype certificate_reference: str
    """

    certificate_reference: str = rest_field(name="certificateReference")
    """A reference to secret containing the certificate and private key (e.g. stored as .der/.pem or
     .der/.pfx). Required."""

    @overload
    def __init__(
        self,
        *,
        certificate_reference: str,
    ): ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:  # pylint: disable=useless-super-delegation
        super().__init__(*args, **kwargs)
