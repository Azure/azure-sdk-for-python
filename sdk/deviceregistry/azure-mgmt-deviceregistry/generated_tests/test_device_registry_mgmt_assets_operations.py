# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.deviceregistry import DeviceRegistryMgmtClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer, recorded_by_proxy

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDeviceRegistryMgmtAssetsOperations(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(DeviceRegistryMgmtClient)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_assets_get(self, resource_group):
        response = self.client.assets.get(
            resource_group_name=resource_group.name,
            asset_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_assets_begin_create_or_replace(self, resource_group):
        response = self.client.assets.begin_create_or_replace(
            resource_group_name=resource_group.name,
            asset_name="str",
            resource={
                "extendedLocation": {"name": "str", "type": "str"},
                "location": "str",
                "id": "str",
                "name": "str",
                "properties": {
                    "assetEndpointProfileRef": "str",
                    "attributes": {"str": {}},
                    "datasets": [
                        {
                            "name": "str",
                            "dataPoints": [
                                {
                                    "dataSource": "str",
                                    "name": "str",
                                    "dataPointConfiguration": "str",
                                    "observabilityMode": "str",
                                }
                            ],
                            "datasetConfiguration": "str",
                            "topic": {"path": "str", "retain": "str"},
                        }
                    ],
                    "defaultDatasetsConfiguration": "str",
                    "defaultEventsConfiguration": "str",
                    "defaultTopic": {"path": "str", "retain": "str"},
                    "description": "str",
                    "discoveredAssetRefs": ["str"],
                    "displayName": "str",
                    "documentationUri": "str",
                    "enabled": bool,
                    "events": [
                        {
                            "eventNotifier": "str",
                            "name": "str",
                            "eventConfiguration": "str",
                            "observabilityMode": "str",
                            "topic": {"path": "str", "retain": "str"},
                        }
                    ],
                    "externalAssetId": "str",
                    "hardwareRevision": "str",
                    "manufacturer": "str",
                    "manufacturerUri": "str",
                    "model": "str",
                    "productCode": "str",
                    "provisioningState": "str",
                    "serialNumber": "str",
                    "softwareRevision": "str",
                    "status": {
                        "datasets": [
                            {
                                "name": "str",
                                "messageSchemaReference": {
                                    "schemaName": "str",
                                    "schemaRegistryNamespace": "str",
                                    "schemaVersion": "str",
                                },
                            }
                        ],
                        "errors": [{"code": 0, "message": "str"}],
                        "events": [
                            {
                                "name": "str",
                                "messageSchemaReference": {
                                    "schemaName": "str",
                                    "schemaRegistryNamespace": "str",
                                    "schemaVersion": "str",
                                },
                            }
                        ],
                        "version": 0,
                    },
                    "uuid": "str",
                    "version": 0,
                },
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_assets_begin_update(self, resource_group):
        response = self.client.assets.begin_update(
            resource_group_name=resource_group.name,
            asset_name="str",
            properties={
                "properties": {
                    "attributes": {"str": {}},
                    "datasets": [
                        {
                            "name": "str",
                            "dataPoints": [
                                {
                                    "dataSource": "str",
                                    "name": "str",
                                    "dataPointConfiguration": "str",
                                    "observabilityMode": "str",
                                }
                            ],
                            "datasetConfiguration": "str",
                            "topic": {"path": "str", "retain": "str"},
                        }
                    ],
                    "defaultDatasetsConfiguration": "str",
                    "defaultEventsConfiguration": "str",
                    "defaultTopic": {"path": "str", "retain": "str"},
                    "description": "str",
                    "displayName": "str",
                    "documentationUri": "str",
                    "enabled": bool,
                    "events": [
                        {
                            "eventNotifier": "str",
                            "name": "str",
                            "eventConfiguration": "str",
                            "observabilityMode": "str",
                            "topic": {"path": "str", "retain": "str"},
                        }
                    ],
                    "hardwareRevision": "str",
                    "manufacturer": "str",
                    "manufacturerUri": "str",
                    "model": "str",
                    "productCode": "str",
                    "serialNumber": "str",
                    "softwareRevision": "str",
                },
                "tags": {"str": "str"},
            },
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_assets_begin_delete(self, resource_group):
        response = self.client.assets.begin_delete(
            resource_group_name=resource_group.name,
            asset_name="str",
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_assets_list_by_resource_group(self, resource_group):
        response = self.client.assets.list_by_resource_group(
            resource_group_name=resource_group.name,
        )
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy
    def test_assets_list_by_subscription(self, resource_group):
        response = self.client.assets.list_by_subscription()
        result = [r for r in response]
        # please add some check logic here by yourself
        # ...
