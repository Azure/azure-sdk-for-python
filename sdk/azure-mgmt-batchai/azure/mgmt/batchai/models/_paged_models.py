# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.paging import Paged


class OperationPaged(Paged):
    """
    A paging container for iterating over a list of :class:`Operation <azure.mgmt.batchai.models.Operation>` object
    """

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'current_page': {'key': 'value', 'type': '[Operation]'}
    }

    def __init__(self, *args, **kwargs):

        super(OperationPaged, self).__init__(*args, **kwargs)
class UsagePaged(Paged):
    """
    A paging container for iterating over a list of :class:`Usage <azure.mgmt.batchai.models.Usage>` object
    """

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'current_page': {'key': 'value', 'type': '[Usage]'}
    }

    def __init__(self, *args, **kwargs):

        super(UsagePaged, self).__init__(*args, **kwargs)
class WorkspacePaged(Paged):
    """
    A paging container for iterating over a list of :class:`Workspace <azure.mgmt.batchai.models.Workspace>` object
    """

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'current_page': {'key': 'value', 'type': '[Workspace]'}
    }

    def __init__(self, *args, **kwargs):

        super(WorkspacePaged, self).__init__(*args, **kwargs)
class ExperimentPaged(Paged):
    """
    A paging container for iterating over a list of :class:`Experiment <azure.mgmt.batchai.models.Experiment>` object
    """

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'current_page': {'key': 'value', 'type': '[Experiment]'}
    }

    def __init__(self, *args, **kwargs):

        super(ExperimentPaged, self).__init__(*args, **kwargs)
class JobPaged(Paged):
    """
    A paging container for iterating over a list of :class:`Job <azure.mgmt.batchai.models.Job>` object
    """

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'current_page': {'key': 'value', 'type': '[Job]'}
    }

    def __init__(self, *args, **kwargs):

        super(JobPaged, self).__init__(*args, **kwargs)
class FilePaged(Paged):
    """
    A paging container for iterating over a list of :class:`File <azure.mgmt.batchai.models.File>` object
    """

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'current_page': {'key': 'value', 'type': '[File]'}
    }

    def __init__(self, *args, **kwargs):

        super(FilePaged, self).__init__(*args, **kwargs)
class RemoteLoginInformationPaged(Paged):
    """
    A paging container for iterating over a list of :class:`RemoteLoginInformation <azure.mgmt.batchai.models.RemoteLoginInformation>` object
    """

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'current_page': {'key': 'value', 'type': '[RemoteLoginInformation]'}
    }

    def __init__(self, *args, **kwargs):

        super(RemoteLoginInformationPaged, self).__init__(*args, **kwargs)
class FileServerPaged(Paged):
    """
    A paging container for iterating over a list of :class:`FileServer <azure.mgmt.batchai.models.FileServer>` object
    """

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'current_page': {'key': 'value', 'type': '[FileServer]'}
    }

    def __init__(self, *args, **kwargs):

        super(FileServerPaged, self).__init__(*args, **kwargs)
class ClusterPaged(Paged):
    """
    A paging container for iterating over a list of :class:`Cluster <azure.mgmt.batchai.models.Cluster>` object
    """

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'current_page': {'key': 'value', 'type': '[Cluster]'}
    }

    def __init__(self, *args, **kwargs):

        super(ClusterPaged, self).__init__(*args, **kwargs)
