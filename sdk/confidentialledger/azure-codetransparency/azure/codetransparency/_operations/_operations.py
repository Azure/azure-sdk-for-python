# pylint: disable=line-too-long,useless-suppression
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from collections.abc import MutableMapping
from typing import Any, Callable, Dict, Iterator, Literal, Optional, TypeVar, Union, cast

from azure.core import PipelineClient
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    StreamClosedError,
    StreamConsumedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .._configuration import CodeTransparencyClientConfiguration
from .._utils.serialization import Serializer
from .._utils.utils import ClientMixinABC

JSON = MutableMapping[str, Any]
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_code_transparency_get_transparency_config_cbor_request(  # pylint: disable=name-too-long
    **kwargs: Any,
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept: Literal["application/cbor"] = kwargs.pop("accept", _headers.pop("accept", "application/cbor"))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-01-31-preview"))
    # Construct URL
    _url = "/.well-known/transparency-configuration"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_code_transparency_get_public_keys_request(**kwargs: Any) -> HttpRequest:  # pylint: disable=name-too-long
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-01-31-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/jwks"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_code_transparency_create_entry_request(  # pylint: disable=name-too-long
    *, json: bytes, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: str = kwargs.pop("content_type")
    accept: Literal["application/cose; application/cbor"] = kwargs.pop(
        "accept", _headers.pop("accept", "application/cose; application/cbor")
    )
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-01-31-preview"))
    # Construct URL
    _url = "/entries"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, json=json, **kwargs)


def build_code_transparency_get_operation_request(  # pylint: disable=name-too-long
    operation_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept: Literal["application/cbor"] = kwargs.pop("accept", _headers.pop("accept", "application/cbor"))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-01-31-preview"))
    # Construct URL
    _url = "/operations/{operationId}"
    path_format_arguments = {
        "operationId": _SERIALIZER.url("operation_id", operation_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_code_transparency_get_entry_request(  # pylint: disable=name-too-long
    entry_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept: Literal["application/cose"] = kwargs.pop("accept", _headers.pop("accept", "application/cose"))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-01-31-preview"))
    # Construct URL
    _url = "/entries/{entryId}"
    path_format_arguments = {
        "entryId": _SERIALIZER.url("entry_id", entry_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_code_transparency_get_entry_statement_request(  # pylint: disable=name-too-long
    entry_id: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept: Literal["application/cose"] = kwargs.pop("accept", _headers.pop("accept", "application/cose"))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2025-01-31-preview"))
    # Construct URL
    _url = "/entries/{entryId}/statement"
    path_format_arguments = {
        "entryId": _SERIALIZER.url("entry_id", entry_id, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


class CodeTransparencyClientOperationsMixin(
    ClientMixinABC[PipelineClient[HttpRequest, HttpResponse], CodeTransparencyClientConfiguration]
):

    @distributed_trace
    def get_transparency_config_cbor(self, **kwargs: Any) -> Iterator[bytes]:
        """Get the transparency service configuration, mandatory in IETF SCITT draft.

        :return: Iterator[bytes]
        :rtype: Iterator[bytes]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        accept: Literal["application/cbor"] = kwargs.pop("accept", _headers.pop("accept", "application/cbor"))
        cls: ClsType[Iterator[bytes]] = kwargs.pop("cls", None)

        _request = build_code_transparency_get_transparency_config_cbor_request(
            accept=accept,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", True)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 500, 503]:
            if _stream:
                try:
                    response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        if response.status_code == 500:
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        if response.status_code == 503:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, cast(Iterator[bytes], deserialized), response_headers)  # type: ignore

        return cast(Iterator[bytes], deserialized)  # type: ignore

    @distributed_trace
    def get_public_keys(self, **kwargs: Any) -> Union[JSON, Iterator[bytes]]:
        """Get the public keys used by the service to sign receipts, mentioned in IETF SCITT draft as part
        of jwks_uri implementation.

        :return: JSON object or Iterator[bytes]
        :rtype: JSON or Iterator[bytes]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "keys": [
                        {
                            "kty": "str",
                            "alg": "str",
                            "crv": "str",
                            "d": "str",
                            "dp": "str",
                            "dq": "str",
                            "e": "str",
                            "k": "str",
                            "kid": "str",
                            "n": "str",
                            "p": "str",
                            "q": "str",
                            "qi": "str",
                            "use": "str",
                            "x": "str",
                            "x5c": [
                                "str"
                            ],
                            "y": "str"
                        }
                    ]
                }
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Union[JSON, Iterator[bytes]]] = kwargs.pop("cls", None)

        _request = build_code_transparency_get_public_keys_request(
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", True)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 404, 429, 500, 503]:
            if _stream:
                try:
                    response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        if response.status_code == 400:
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        if response.status_code == 404:
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        if response.status_code == 429:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        if response.status_code == 500:
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        if response.status_code == 503:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, cast(Union[JSON, Iterator[bytes]], deserialized), response_headers)  # type: ignore

        return cast(Union[JSON, Iterator[bytes]], deserialized)  # type: ignore

    @distributed_trace
    def create_entry(self, body: bytes, **kwargs: Any) -> Iterator[bytes]:
        """Post an entry to be registered on the CodeTransparency instance, mandatory in IETF SCITT draft.

        :param body: CoseSign1 signature envelope. Required.
        :type body: bytes
        :return: Iterator[bytes]
        :rtype: Iterator[bytes]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: str = kwargs.pop("content_type", _headers.pop("Content-Type", "application/cose"))
        accept: Literal["application/cose; application/cbor"] = kwargs.pop(
            "accept", _headers.pop("accept", "application/cose; application/cbor")
        )
        cls: ClsType[Iterator[bytes]] = kwargs.pop("cls", None)

        _json = body

        _request = build_code_transparency_create_entry_request(
            content_type=content_type,
            accept=accept,
            api_version=self._config.api_version,
            json=_json,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", True)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201, 202, 400, 404, 429, 500, 503]:
            if _stream:
                try:
                    response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 201:
            response_headers["Content-Title"] = self._deserialize("str", response.headers.get("Content-Title"))
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Content-Type"] = self._deserialize("str", response.headers.get("Content-Type"))

        if response.status_code == 202:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
            response_headers["Content-Type"] = self._deserialize("str", response.headers.get("Content-Type"))

        if response.status_code == 400:
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        if response.status_code == 404:
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        if response.status_code == 429:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        if response.status_code == 500:
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        if response.status_code == 503:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, cast(Iterator[bytes], deserialized), response_headers)  # type: ignore

        return cast(Iterator[bytes], deserialized)  # type: ignore

    @distributed_trace
    def get_operation(self, operation_id: str, **kwargs: Any) -> Optional[Iterator[bytes]]:
        """Get status of the long running registration operation, mandatory in IETF SCITT draft.

        :param operation_id: ID of the operation to retrieve. Required.
        :type operation_id: str
        :return: Iterator[bytes] or None
        :rtype: Iterator[bytes] or None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        accept: Literal["application/cbor"] = kwargs.pop("accept", _headers.pop("accept", "application/cbor"))
        cls: ClsType[Optional[Iterator[bytes]]] = kwargs.pop("cls", None)

        _request = build_code_transparency_get_operation_request(
            operation_id=operation_id,
            accept=accept,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", True)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 202, 400, 404, 429, 500, 503]:
            if _stream:
                try:
                    response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        response_headers = {}
        if response.status_code == 200:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Content-Type"] = self._deserialize("str", response.headers.get("Content-Type"))

        if response.status_code == 202:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))

        if response.status_code == 400:
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        if response.status_code == 404:
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        if response.status_code == 429:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        if response.status_code == 500:
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        if response.status_code == 503:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace
    def get_entry(self, entry_id: str, **kwargs: Any) -> Iterator[bytes]:
        """Get receipt.

        :param entry_id: ID of the entry to retrieve. Required.
        :type entry_id: str
        :return: Iterator[bytes]
        :rtype: Iterator[bytes]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        accept: Literal["application/cose"] = kwargs.pop("accept", _headers.pop("accept", "application/cose"))
        cls: ClsType[Iterator[bytes]] = kwargs.pop("cls", None)

        _request = build_code_transparency_get_entry_request(
            entry_id=entry_id,
            accept=accept,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", True)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 404, 429, 500, 503]:
            if _stream:
                try:
                    response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Location"] = self._deserialize("str", response.headers.get("Location"))
            response_headers["Content-Type"] = self._deserialize("str", response.headers.get("Content-Type"))

        if response.status_code == 400:
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        if response.status_code == 404:
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        if response.status_code == 429:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        if response.status_code == 500:
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        if response.status_code == 503:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, cast(Iterator[bytes], deserialized), response_headers)  # type: ignore

        return cast(Iterator[bytes], deserialized)  # type: ignore

    @distributed_trace
    def get_entry_statement(self, entry_id: str, **kwargs: Any) -> Iterator[bytes]:
        """Get the transparent statement consisting of the signed statement and the receipt embedded in
        the header.

        :param entry_id: ID of the entry to retrieve. Required.
        :type entry_id: str
        :return: Iterator[bytes]
        :rtype: Iterator[bytes]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        accept: Literal["application/cose"] = kwargs.pop("accept", _headers.pop("accept", "application/cose"))
        cls: ClsType[Iterator[bytes]] = kwargs.pop("cls", None)

        _request = build_code_transparency_get_entry_statement_request(
            entry_id=entry_id,
            accept=accept,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", True)
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 400, 404, 429, 500, 503]:
            if _stream:
                try:
                    response.read()  # Load the body in memory and close the socket
                except (StreamConsumedError, StreamClosedError):
                    pass
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["Content-Type"] = self._deserialize("str", response.headers.get("Content-Type"))

        if response.status_code == 400:
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        if response.status_code == 404:
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        if response.status_code == 429:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        if response.status_code == 500:
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        if response.status_code == 503:
            response_headers["Retry-After"] = self._deserialize("int", response.headers.get("Retry-After"))
            response_headers["content-type"] = self._deserialize("str", response.headers.get("content-type"))

        deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, cast(Iterator[bytes], deserialized), response_headers)  # type: ignore

        return cast(Iterator[bytes], deserialized)  # type: ignore
