interactions:
- request:
    body: null
    headers:
      Accept:
      - application/json
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - azsdk-python-confidentialledger/1.0.0 Python/3.8.10 (Linux-5.10.102.1-microsoft-standard-WSL2-x86_64-with-glibc2.29)
    method: GET
    uri: https://fake.confidential-ledger.azure.com/app/governance/members?api-version=0.1-preview
  response:
    body:
      string: '{"members":[{"certificate":"-----BEGIN CERTIFICATE-----\nMIIB9zCCAXygAwIBAgIPcrLwRnpIy5asrfqEWgYwMAoGCCqGSM49BAMDMCAxHjAc\nBgNVBAMTFUNDRiBHb3Zlcm5vciBJZGVudGl0eTAeFw0yMjA1MTYyMjI4NDhaFw0y\nMjA4MTYyMjM4NDhaMCAxHjAcBgNVBAMTFUNDRiBHb3Zlcm5vciBJZGVudGl0eTB2\nMBAGByqGSM49AgEGBSuBBAAiA2IABJEG69+gogCO9HcRt+vvPz5ZGAHx5okXEzgb\nOKnUhlRWhQVPzZ+qsHKMQ0ONRyxD+Drx+9/71QVjo1L6I2OkFuWjESN/4qIKu+I6\nLUpecCTvhPo4AsHbIcz4qszdqmbx+qN8MHowDgYDVR0PAQH/BAQDAgeAMAkGA1Ud\nEwQCMAAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMB8GA1UdIwQYMBaA\nFFUra+Jd3/wISbsCG5Doak4sdSoNMB0GA1UdDgQWBBRVK2viXd/8CEm7AhuQ6GpO\nLHUqDTAKBggqhkjOPQQDAwNpADBmAjEAvLSD0exNK6m6KzrcSDj6dyblYCDkbvy7\nP1eCOCVHNMfdCsG2M8o27CmwfKH8+nYIAjEA323Fw4zNnvnXG+xg71qxjFGKacy2\naQDbj6/7fKNgf76OcjM7NarLmTy5h/85MACO\n-----END
        CERTIFICATE-----","id":"af979b9ec9f7f120a69574a96585658fa0fa426238b0400751f8cb25c05c588c"}]}'
    headers:
      content-length:
      - '856'
      content-type:
      - application/json
      x-ms-ccf-transaction-id:
      - '2.32102'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - application/json
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - azsdk-python-confidentialledger/1.0.0 Python/3.8.10 (Linux-5.10.102.1-microsoft-standard-WSL2-x86_64-with-glibc2.29)
    method: GET
    uri: https://fake.confidential-ledger.azure.com/app/governance/constitution?api-version=0.1-preview
  response:
    body:
      string: '{"digest":"2ddb98d3937e290a815f2abe08e903f39deb9a5e4c66de98c457f79f6a1004d7","script":"class
        Action {\n  constructor(validate, apply) {\n    this.validate = validate;\n    this.apply
        = apply;\n  }\n}\n\nfunction parseUrl(url) {\n  // From https://tools.ietf.org/html/rfc3986#appendix-B\n  const
        re = new RegExp(\n    \"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\"\n  );\n  const
        groups = url.match(re);\n  if (!groups) {\n    throw new TypeError(`${url}
        is not a valid URL.`);\n  }\n  return {\n    scheme: groups[2],\n    authority:
        groups[4],\n    path: groups[5],\n    query: groups[7],\n    fragment: groups[9],\n  };\n}\n\nfunction
        checkType(value, type, field) {\n  const optional = type.endsWith(\"?\");\n  if
        (optional) {\n    if (value === null || value === undefined) {\n      return;\n    }\n    type
        = type.slice(0, -1);\n  }\n  if (type === \"array\") {\n    if (!Array.isArray(value))
        {\n      throw new Error(`${field} must be an array`);\n    }\n  } else if
        (type === \"integer\") {\n    if (!Number.isInteger(value)) {\n      throw
        new Error(`${field} must be an integer`);\n    }\n  } else if (typeof value
        !== type) {\n    throw new Error(`${field} must be of type ${type} but is
        ${typeof value}`);\n  }\n}\n\nfunction checkEnum(value, members, field) {\n  if
        (!members.includes(value)) {\n    throw new Error(`${field} must be one of
        ${members}`);\n  }\n}\n\nfunction checkBounds(value, low, high, field) {\n  if
        (low !== null && value < low) {\n    throw new Error(`${field} must be greater
        than ${low}`);\n  }\n  if (high !== null && value > high) {\n    throw new
        Error(`${field} must be lower than ${high}`);\n  }\n}\n\nfunction checkLength(value,
        min, max, field) {\n  if (min !== null && value.length < min) {\n    throw
        new Error(`${field} must be an array of minimum ${min} elements`);\n  }\n  if
        (max !== null && value.length > max) {\n    throw new Error(`${field} must
        be an array of maximum ${max} elements`);\n  }\n}\n\nfunction checkNone(args)
        {\n  if (args !== null && args !== undefined) {\n    throw new Error(`Proposal
        does not accept any argument, found \"${args}\"`);\n  }\n}\n\nfunction getSingletonKvKey()
        {\n  // When a KV map only contains one value, this is the key at which\n  //
        the value is recorded\n  return new ArrayBuffer(8);\n}\n\nfunction getActiveRecoveryMembersCount()
        {\n  let activeRecoveryMembersCount = 0;\n  ccf.kv[\"public:ccf.gov.members.encryption_public_keys\"].forEach((_,
        k) => {\n    let rawMemberInfo = ccf.kv[\"public:ccf.gov.members.info\"].get(k);\n    if
        (rawMemberInfo === undefined) {\n      throw new Error(`Recovery member ${ccf.bufToStr(k)}
        has no information`);\n    }\n\n    const memberInfo = ccf.bufToJsonCompatible(rawMemberInfo);\n    if
        (memberInfo.status === \"Active\") {\n      activeRecoveryMembersCount++;\n    }\n  });\n  return
        activeRecoveryMembersCount;\n}\n\nfunction checkJwks(value, field) {\n  checkType(value,
        \"object\", field);\n  checkType(value.keys, \"array\", `${field}.keys`);\n  for
        (const [i, jwk] of value.keys.entries()) {\n    checkType(jwk.kid, \"string\",
        `${field}.keys[${i}].kid`);\n    checkType(jwk.kty, \"string\", `${field}.keys[${i}].kty`);\n    checkType(jwk.x5c,
        \"array\", `${field}.keys[${i}].x5c`);\n    checkLength(jwk.x5c, 1, null,
        `${field}.keys[${i}].x5c`);\n    for (const [j, b64der] of jwk.x5c.entries())
        {\n      checkType(b64der, \"string\", `${field}.keys[${i}].x5c[${j}]`);\n      const
        pem =\n        \"-----BEGIN CERTIFICATE-----\\n\" +\n        b64der +\n        \"\\n-----END
        CERTIFICATE-----\";\n      checkX509CertChain(pem, `${field}.keys[${i}].x5c[${j}]`);\n    }\n  }\n}\n\nfunction
        checkX509CertChain(value, field) {\n  if (!ccf.isValidX509CertBundle(value))
        {\n    throw new Error(\n      `${field} must be a valid X509 certificate
        (chain) in PEM format`\n    );\n  }\n}\n\nfunction invalidateOtherOpenProposals(proposalIdToRetain)
        {\n  let proposals = ccf.kv[\"public:ccf.gov.proposals_info.js\"];\n  const
        proposalsMap = ccf.kv[\"public:ccf.gov.proposals_info.js\"];\n  proposalsMap.forEach((v,
        k) => {\n    let proposalId = ccf.bufToStr(k);\n    if (proposalId !== proposalIdToRetain)
        {\n      let info = ccf.bufToJsonCompatible(v);\n      if (info.state ===
        \"Open\") {\n        info.state = \"Dropped\";\n        proposalsMap.set(k,
        ccf.jsonCompatibleToBuf(info));\n      }\n    }\n  });\n}\n\nconst actions
        = new Map([\n  [\n    \"set_constitution\",\n    new Action(\n      function
        (args) {\n        checkType(args.constitution, \"string\");\n      },\n      function
        (args, proposalId) {\n        ccf.kv[\"public:ccf.gov.constitution\"].set(\n          getSingletonKvKey(),\n          ccf.jsonCompatibleToBuf(args.constitution)\n        );\n\n        //
        Changing the constitution changes the semantics of any other open proposals,
        so invalidate them to avoid confusion or malicious vote modification\n        invalidateOtherOpenProposals(proposalId);\n      }\n    ),\n  ],\n  [\n    \"set_member\",\n    new
        Action(\n      function (args) {\n        checkX509CertChain(args.cert, \"cert\");\n        checkType(args.member_data,
        \"object?\", \"member_data\");\n        // Also check that public encryption
        key is well formed, if it exists\n      },\n\n      function (args) {\n        const
        memberId = ccf.pemToId(args.cert);\n        const rawMemberId = ccf.strToBuf(memberId);\n\n        ccf.kv[\"public:ccf.gov.members.certs\"].set(\n          rawMemberId,\n          ccf.strToBuf(args.cert)\n        );\n\n        if
        (args.encryption_pub_key == null) {\n          ccf.kv[\"public:ccf.gov.members.encryption_public_keys\"].delete(\n            rawMemberId\n          );\n        }
        else {\n          ccf.kv[\"public:ccf.gov.members.encryption_public_keys\"].set(\n            rawMemberId,\n            ccf.strToBuf(args.encryption_pub_key)\n          );\n        }\n\n        let
        member_info = {};\n        member_info.member_data = args.member_data;\n        member_info.status
        = \"Accepted\";\n        ccf.kv[\"public:ccf.gov.members.info\"].set(\n          rawMemberId,\n          ccf.jsonCompatibleToBuf(member_info)\n        );\n\n        const
        rawSignature = ccf.kv[\"public:ccf.internal.signatures\"].get(\n          getSingletonKvKey()\n        );\n        if
        (rawSignature === undefined) {\n          ccf.kv[\"public:ccf.gov.members.acks\"].set(rawMemberId);\n        }
        else {\n          const signature = ccf.bufToJsonCompatible(rawSignature);\n          const
        ack = {};\n          ack.state_digest = signature.root;\n          ccf.kv[\"public:ccf.gov.members.acks\"].set(\n            rawMemberId,\n            ccf.jsonCompatibleToBuf(ack)\n          );\n        }\n      }\n    ),\n  ],\n  [\n    \"remove_member\",\n    new
        Action(\n      function (args) {\n        checkX509CertChain(args.cert, \"cert\");\n      },\n      function
        (args) {\n        const memberId = ccf.pemToId(args.cert);\n        const
        rawMemberId = ccf.strToBuf(memberId);\n        const rawMemberInfo = ccf.kv[\"public:ccf.gov.members.info\"].get(\n          rawMemberId\n        );\n        if
        (rawMemberInfo === undefined) {\n          return; // Idempotent\n        }\n\n        const
        memberInfo = ccf.bufToJsonCompatible(rawMemberInfo);\n        const isActiveMember
        = memberInfo.status == \"Active\";\n\n        const isRecoveryMember = ccf.kv[\n          \"public:ccf.gov.members.encryption_public_keys\"\n        ].has(rawMemberId)\n          ?
        true\n          : false;\n\n        // If the member is an active recovery
        member, check that there\n        // would still be a sufficient number of
        recovery members left\n        // to recover the service\n        if (isActiveMember
        && isRecoveryMember) {\n          const rawConfig = ccf.kv[\"public:ccf.gov.service.config\"].get(\n            getSingletonKvKey()\n          );\n          if
        (rawConfig === undefined) {\n            throw new Error(\"Service configuration
        could not be found\");\n          }\n\n          const config = ccf.bufToJsonCompatible(rawConfig);\n          const
        activeRecoveryMembersCountAfter =\n            getActiveRecoveryMembersCount()
        - 1;\n          if (activeRecoveryMembersCountAfter < config.recovery_threshold)
        {\n            throw new Error(\n              `Number of active recovery
        members (${activeRecoveryMembersCountAfter}) would be less than recovery threshold
        (${config.recovery_threshold})`\n            );\n          }\n        }\n\n        ccf.kv[\"public:ccf.gov.members.info\"].delete(rawMemberId);\n        ccf.kv[\"public:ccf.gov.members.encryption_public_keys\"].delete(\n          rawMemberId\n        );\n        ccf.kv[\"public:ccf.gov.members.certs\"].delete(rawMemberId);\n        ccf.kv[\"public:ccf.gov.members.acks\"].delete(rawMemberId);\n        ccf.kv[\"public:ccf.gov.history\"].delete(rawMemberId);\n\n        if
        (isActiveMember && isRecoveryMember) {\n          // A retired recovery member
        should not have access to the private\n          // ledger going forward so
        rekey the ledger, issuing new shares to\n          // remaining active recovery
        members\n          ccf.node.triggerLedgerRekey();\n        }\n      }\n    ),\n  ],\n  [\n    \"set_member_data\",\n    new
        Action(\n      function (args) {\n        checkType(args.member_id, \"string\",
        \"member_id\");\n        checkType(args.member_data, \"object\", \"member_data\");\n      },\n\n      function
        (args) {\n        let member_id = ccf.strToBuf(args.member_id);\n        let
        members_info = ccf.kv[\"public:ccf.gov.members.info\"];\n        let member_info
        = members_info.get(member_id);\n        if (member_info === undefined) {\n          throw
        new Error(`Member ${args.member_id} does not exist`);\n        }\n        let
        mi = ccf.bufToJsonCompatible(member_info);\n        mi.member_data = args.member_data;\n        members_info.set(member_id,
        ccf.jsonCompatibleToBuf(mi));\n      }\n    ),\n  ],\n  [\n    \"set_user\",\n    new
        Action(\n      function (args) {\n        checkX509CertChain(args.cert, \"cert\");\n        checkType(args.user_data,
        \"object?\", \"user_data\");\n      },\n      function (args) {\n        let
        userId = ccf.pemToId(args.cert);\n        let rawUserId = ccf.strToBuf(userId);\n\n        ccf.kv[\"public:ccf.gov.users.certs\"].set(\n          rawUserId,\n          ccf.strToBuf(args.cert)\n        );\n\n        if
        (args.user_data !== null && args.user_data !== undefined) {\n          ccf.kv[\"public:ccf.gov.users.info\"].set(\n            rawUserId,\n            ccf.jsonCompatibleToBuf(args.user_data)\n          );\n        }
        else {\n          ccf.kv[\"public:ccf.gov.users.info\"].delete(rawUserId);\n        }\n      }\n    ),\n  ],\n  [\n    \"remove_user\",\n    new
        Action(\n      function (args) {\n        checkType(args.user_id, \"string\",
        \"user_id\");\n      },\n      function (args) {\n        const user_id =
        ccf.strToBuf(args.user_id);\n        ccf.kv[\"public:ccf.gov.users.certs\"].delete(user_id);\n        ccf.kv[\"public:ccf.gov.users.info\"].delete(user_id);\n      }\n    ),\n  ],\n  [\n    \"remove_user_by_cert\",\n    new
        Action(\n      function (args) {\n        checkX509CertChain(args.cert, \"cert\");\n      },\n      function
        (args) {\n        let userId = ccf.pemToId(args.cert);\n        let rawUserId
        = ccf.strToBuf(userId);\n\n        ccf.kv[\"public:ccf.gov.users.certs\"].delete(\n          rawUserId\n        );\n        ccf.kv[\"public:ccf.gov.users.info\"].delete(rawUserId);\n      }\n    ),\n  ],\n  [\n    \"set_user_data\",\n    new
        Action(\n      function (args) {\n        checkType(args.user_id, \"string\",
        \"user_id\");\n        checkType(args.user_data, \"object?\", \"user_data\");\n      },\n      function
        (args) {\n        const userId = ccf.strToBuf(args.user_id);\n\n        if
        (args.user_data !== null && args.user_data !== undefined) {\n          let
        userInfo = {};\n          userInfo.user_data = args.user_data;\n          ccf.kv[\"public:ccf.gov.users.info\"].set(\n            userId,\n            ccf.jsonCompatibleToBuf(userInfo)\n          );\n        }
        else {\n          ccf.kv[\"public:ccf.gov.users.info\"].delete(userId);\n        }\n      }\n    ),\n  ],\n  [\n    \"set_recovery_threshold\",\n    new
        Action(\n      function (args) {\n        checkType(args.recovery_threshold,
        \"integer\", \"threshold\");\n        checkBounds(args.recovery_threshold,
        1, 254, \"threshold\");\n      },\n      function (args) {\n        const
        rawConfig = ccf.kv[\"public:ccf.gov.service.config\"].get(\n          getSingletonKvKey()\n        );\n        if
        (rawConfig === undefined) {\n          throw new Error(\"Service configuration
        could not be found\");\n        }\n\n        let config = ccf.bufToJsonCompatible(rawConfig);\n\n        if
        (args.recovery_threshold === config.recovery_threshold) {\n          return;
        // No effect\n        }\n\n        const rawService = ccf.kv[\"public:ccf.gov.service.info\"].get(\n          getSingletonKvKey()\n        );\n        if
        (rawService === undefined) {\n          throw new Error(\"Service information
        could not be found\");\n        }\n\n        const service = ccf.bufToJsonCompatible(rawService);\n\n        if
        (service.status === \"WaitingForRecoveryShares\") {\n          throw new Error(\n            `Cannot
        set recovery threshold if service is ${service.status}`\n          );\n        }
        else if (service.status === \"Open\") {\n          let activeRecoveryMembersCount
        = getActiveRecoveryMembersCount();\n          if (args.recovery_threshold
        > activeRecoveryMembersCount) {\n            throw new Error(\n              `Cannot
        set recovery threshold to ${args.recovery_threshold}: recovery threshold would
        be greater than the number of recovery members ${activeRecoveryMembersCount}`\n            );\n          }\n        }\n\n        config.recovery_threshold
        = args.recovery_threshold;\n        ccf.kv[\"public:ccf.gov.service.config\"].set(\n          getSingletonKvKey(),\n          ccf.jsonCompatibleToBuf(config)\n        );\n\n        ccf.node.triggerRecoverySharesRefresh();\n      }\n    ),\n  ],\n  [\n    \"trigger_recovery_shares_refresh\",\n    new
        Action(\n      function (args) {\n        checkNone(args);\n      },\n      function
        (args) {\n        ccf.node.triggerRecoverySharesRefresh();\n      }\n    ),\n  ],\n  [\n    \"trigger_ledger_rekey\",\n    new
        Action(\n      function (args) {\n        checkNone(args);\n      },\n\n      function
        (args) {\n        ccf.node.triggerLedgerRekey();\n      }\n    ),\n  ],\n  [\n    \"transition_service_to_open\",\n    new
        Action(\n      function (args) {\n        checkNone(args);\n      },\n\n      function
        (args) {\n        ccf.node.transitionServiceToOpen();\n      }\n    ),\n  ],\n  [\n    \"set_js_app\",\n    new
        Action(\n      function (args) {\n        const bundle = args.bundle;\n        checkType(bundle,
        \"object\", \"bundle\");\n\n        let prefix = \"bundle.modules\";\n        checkType(bundle.modules,
        \"array\", prefix);\n        for (const [i, module] of bundle.modules.entries())
        {\n          checkType(module, \"object\", `${prefix}[${i}]`);\n          checkType(module.name,
        \"string\", `${prefix}[${i}].name`);\n          checkType(module.module, \"string\",
        `${prefix}[${i}].module`);\n        }\n\n        prefix = \"bundle.metadata\";\n        checkType(bundle.metadata,
        \"object\", prefix);\n        checkType(bundle.metadata.endpoints, \"object\",
        `${prefix}.endpoints`);\n        for (const [url, endpoint] of Object.entries(\n          bundle.metadata.endpoints\n        ))
        {\n          checkType(endpoint, \"object\", `${prefix}.endpoints[\"${url}\"]`);\n          for
        (const [method, info] of Object.entries(endpoint)) {\n            const prefix2
        = `${prefix}.endpoints[\"${url}\"][\"${method}\"]`;\n            checkType(info,
        \"object\", prefix2);\n            checkType(info.js_module, \"string\", `${prefix2}.js_module`);\n            checkType(info.js_function,
        \"string\", `${prefix2}.js_function`);\n            checkEnum(\n              info.mode,\n              [\"readwrite\",
        \"readonly\", \"historical\"],\n              `${prefix2}.mode`\n            );\n            checkEnum(\n              info.forwarding_required,\n              [\"sometimes\",
        \"always\", \"never\"],\n              `${prefix2}.forwarding_required`\n            );\n            checkType(info.openapi,
        \"object?\", `${prefix2}.openapi`);\n            checkType(\n              info.openapi_hidden,\n              \"boolean?\",\n              `${prefix2}.openapi_hidden`\n            );\n            checkType(\n              info.authn_policies,\n              \"array\",\n              `${prefix2}.authn_policies`\n            );\n            for
        (const [i, policy] of info.authn_policies.entries()) {\n              checkType(policy,
        \"string\", `${prefix2}.authn_policies[${i}]`);\n            }\n            if
        (!bundle.modules.some((m) => m.name === info.js_module)) {\n              throw
        new Error(`module ''${info.js_module}'' not found in bundle`);\n            }\n          }\n        }\n      },\n      function
        (args) {\n        const modulesMap = ccf.kv[\"public:ccf.gov.modules\"];\n        const
        endpointsMap = ccf.kv[\"public:ccf.gov.endpoints\"];\n        // kv should
        expose .clear()\n        modulesMap.forEach((_, k) => {\n          modulesMap.delete(k);\n        });\n        endpointsMap.forEach((_,
        k) => {\n          endpointsMap.delete(k);\n        });\n\n        const bundle
        = args.bundle;\n        for (const module of bundle.modules) {\n          const
        path = \"/\" + module.name;\n          const pathBuf = ccf.strToBuf(path);\n          const
        moduleBuf = ccf.strToBuf(module.module);\n          modulesMap.set(pathBuf,
        moduleBuf);\n        }\n\n        for (const [url, endpoint] of Object.entries(\n          bundle.metadata.endpoints\n        ))
        {\n          for (const [method, info] of Object.entries(endpoint)) {\n            const
        key = `${method.toUpperCase()} ${url}`;\n            const keyBuf = ccf.strToBuf(key);\n\n            info.js_module
        = \"/\" + info.js_module;\n            const infoBuf = ccf.jsonCompatibleToBuf(info);\n            endpointsMap.set(keyBuf,
        infoBuf);\n          }\n        }\n      }\n    ),\n  ],\n  [\n    \"remove_js_app\",\n    new
        Action(\n      function (args) { },\n      function (args) {\n        const
        modulesMap = ccf.kv[\"public:ccf.gov.modules\"];\n        const endpointsMap
        = ccf.kv[\"public:ccf.gov.endpoints\"];\n        // kv should expose .clear()\n        modulesMap.forEach((_,
        k) => {\n          modulesMap.delete(k);\n        });\n        endpointsMap.forEach((_,
        k) => {\n          endpointsMap.delete(k);\n        });\n      }\n    ),\n  ],\n  [\n    \"set_ca_cert_bundle\",\n    new
        Action(\n      function (args) {\n        checkType(args.name, \"string\",
        \"name\");\n        checkX509CertChain(args.cert_bundle, \"cert_bundle\");\n      },\n      function
        (args) {\n        const name = args.name;\n        const bundle = args.cert_bundle;\n        const
        nameBuf = ccf.strToBuf(name);\n        const bundleBuf = ccf.jsonCompatibleToBuf(bundle);\n        ccf.kv[\"public:ccf.gov.tls.ca_cert_bundles\"].set(nameBuf,
        bundleBuf);\n      }\n    ),\n  ],\n  [\n    \"remove_ca_cert_bundle\",\n    new
        Action(\n      function (args) {\n        checkType(args.name, \"string\",
        \"name\");\n      },\n      function (args) {\n        const name = args.name;\n        const
        nameBuf = ccf.strToBuf(name);\n        ccf.kv[\"public:ccf.gov.tls.ca_cert_bundles\"].delete(nameBuf);\n      }\n    ),\n  ],\n  [\n    \"set_jwt_issuer\",\n    new
        Action(\n      function (args) {\n        checkType(args.issuer, \"string\",
        \"issuer\");\n        checkType(args.auto_refresh, \"boolean?\", \"auto_refresh\");\n        checkType(args.ca_cert_bundle_name,
        \"string?\", \"ca_cert_bundle_name\");\n        checkEnum(args.key_filter,
        [\"all\", \"sgx\"], \"key_filter\");\n        checkType(args.key_policy, \"object?\",
        \"key_policy\");\n        if (args.key_policy) {\n          checkType(\n            args.key_policy.sgx_claims,\n            \"object?\",\n            \"key_policy.sgx_claims\"\n          );\n          if
        (args.key_policy.sgx_claims) {\n            for (const [name, value] of Object.entries(\n              args.key_policy.sgx_claims\n            ))
        {\n              checkType(value, \"string\", `key_policy.sgx_claims[\"${name}\"]`);\n            }\n          }\n        }\n        checkType(args.jwks,
        \"object?\", \"jwks\");\n        if (args.jwks) {\n          checkJwks(args.jwks,
        \"jwks\");\n        }\n        if (args.auto_refresh) {\n          if (!args.ca_cert_bundle_name)
        {\n            throw new Error(\n              \"ca_cert_bundle_name is missing
        but required if auto_refresh is true\"\n            );\n          }\n          let
        url;\n          try {\n            url = parseUrl(args.issuer);\n          }
        catch (e) {\n            throw new Error(\"issuer must be a URL if auto_refresh
        is true\");\n          }\n          if (url.scheme != \"https\") {\n            throw
        new Error(\n              \"issuer must be a URL starting with https:// if
        auto_refresh is true\"\n            );\n          }\n          if (url.query
        || url.fragment) {\n            throw new Error(\n              \"issuer must
        be a URL without query/fragment if auto_refresh is true\"\n            );\n          }\n        }\n      },\n      function
        (args) {\n        if (args.auto_refresh) {\n          const caCertBundleName
        = args.ca_cert_bundle_name;\n          const caCertBundleNameBuf = ccf.strToBuf(args.ca_cert_bundle_name);\n          if
        (\n            !ccf.kv[\"public:ccf.gov.tls.ca_cert_bundles\"].has(\n              caCertBundleNameBuf\n            )\n          )
        {\n            throw new Error(\n              `No CA cert bundle found with
        name ''${caCertBundleName}''`\n            );\n          }\n        }\n        const
        issuer = args.issuer;\n        const jwks = args.jwks;\n        delete args.jwks;\n        const
        metadata = args;\n        if (jwks) {\n          ccf.setJwtPublicSigningKeys(issuer,
        metadata, jwks);\n        }\n        const issuerBuf = ccf.strToBuf(issuer);\n        const
        metadataBuf = ccf.jsonCompatibleToBuf(metadata);\n        ccf.kv[\"public:ccf.gov.jwt.issuers\"].set(issuerBuf,
        metadataBuf);\n      }\n    ),\n  ],\n  [\n    \"set_jwt_public_signing_keys\",\n    new
        Action(\n      function (args) {\n        checkType(args.issuer, \"string\",
        \"issuer\");\n        checkJwks(args.jwks, \"jwks\");\n      },\n      function
        (args) {\n        const issuer = args.issuer;\n        const issuerBuf = ccf.strToBuf(issuer);\n        const
        metadataBuf = ccf.kv[\"public:ccf.gov.jwt.issuers\"].get(issuerBuf);\n        if
        (metadataBuf === undefined) {\n          throw new Error(`issuer ${issuer}
        not found`);\n        }\n        const metadata = ccf.bufToJsonCompatible(metadataBuf);\n        const
        jwks = args.jwks;\n        ccf.setJwtPublicSigningKeys(issuer, metadata, jwks);\n      }\n    ),\n  ],\n  [\n    \"remove_jwt_issuer\",\n    new
        Action(\n      function (args) {\n        checkType(args.issuer, \"string\",
        \"issuer\");\n      },\n      function (args) {\n        const issuerBuf =
        ccf.strToBuf(args.issuer);\n        if (!ccf.kv[\"public:ccf.gov.jwt.issuers\"].delete(issuerBuf))
        {\n          return;\n        }\n        ccf.removeJwtPublicSigningKeys(args.issuer);\n      }\n    ),\n  ],\n  [\n    \"add_node_code\",\n    new
        Action(\n      function (args) {\n        checkType(args.new_code_id, \"string\",
        \"new_code_id\");\n        checkType(args.existing_code_id, \"string\", \"existing_code_id\");\n      },\n      function
        (args, proposalId) {\n        const existingCode = ccf.kv[\"public:ccf.gov.nodes.code_ids\"].get(\n          ccf.strToBuf(args.existing_code_id)\n        );\n        if
        (existingCode === undefined) {\n          throw new Error(`Code required to
        exist is not present: ${args.existing_code_id}`);\n        }\n\n        const
        newCodeId = ccf.strToBuf(args.new_code_id);\n        const ALLOWED = ccf.jsonCompatibleToBuf(\"AllowedToJoin\");\n        ccf.kv[\"public:ccf.gov.nodes.code_ids\"].set(newCodeId,
        ALLOWED);\n\n        // Adding a new allowed code ID changes the semantics
        of any other open proposals, so invalidate them to avoid confusion or malicious
        vote modification\n        invalidateOtherOpenProposals(proposalId);\n      }\n    ),\n  ],\n\n  [\n    \"transition_node_to_trusted\",\n    new
        Action(\n      function (args) {\n        checkType(args.node_id, \"string\",
        \"node_id\");\n      },\n      function (args) {\n        const node = ccf.kv[\"public:ccf.gov.nodes.info\"].get(\n          ccf.strToBuf(args.node_id)\n        );\n        if
        (node === undefined) {\n          throw new Error(`No such node: ${args.node_id}`);\n        }\n        const
        nodeInfo = ccf.bufToJsonCompatible(node);\n        if (nodeInfo.status ===
        \"Pending\") {\n          nodeInfo.status = \"Trusted\";\n          nodeInfo.ledger_secret_seqno
        = ccf.network.getLatestLedgerSecretSeqno();\n          ccf.kv[\"public:ccf.gov.nodes.info\"].set(\n            ccf.strToBuf(args.node_id),\n            ccf.jsonCompatibleToBuf(nodeInfo)\n          );\n        }\n      }\n    ),\n  ],\n  [\n    \"remove_node_code\",\n    new
        Action(\n      function (args) {\n        checkType(args.code_id_to_remove,
        \"string\", \"code_id_to_remove\");\n        checkType(args.remaining_code_id,
        \"string\", \"remaining_code_id\");\n      },\n      function (args) {\n        const
        remainingCode = ccf.kv[\"public:ccf.gov.nodes.code_ids\"].get(\n          ccf.strToBuf(args.remaining_code_id)\n        );\n        if
        (remainingCode === undefined) {\n          throw new Error(`Code required
        to remain is not present: ${args.remaining_code_id}`);\n        }\n\n        const
        codeIdToRemove = ccf.strToBuf(args.code_id_to_remove);\n        ccf.kv[\"public:ccf.gov.nodes.code_ids\"].delete(codeIdToRemove);\n      }\n    ),\n  ],\n  [\n    \"remove_node\",\n    new
        Action(\n      function (args) {\n        checkType(args.node_id, \"string\",
        \"node_id\");\n      },\n      function (args) {\n        const node = ccf.kv[\"public:ccf.gov.nodes.info\"].get(\n          ccf.strToBuf(args.node_id)\n        );\n        if
        (node !== undefined) {\n          const node_obj = ccf.bufToJsonCompatible(node);\n          node_obj.status
        = \"Retired\";\n          ccf.kv[\"public:ccf.gov.nodes.info\"].set(\n            ccf.strToBuf(args.node_id),\n            ccf.jsonCompatibleToBuf(node_obj)\n          );\n        }\n      }\n    ),\n  ],\n  [\n    \"set_service_principal\",\n    new
        Action(\n      function (args) {\n        checkType(args.id, \"string\", \"id\");\n        checkType(args.data,
        \"object\", \"data\");\n      },\n      function (args) {\n        ccf.kv[\"public:ccf.gov.service_principals\"].set(\n          ccf.strToBuf(args.id),\n          ccf.jsonCompatibleToBuf(args.data)\n        );\n      }\n    ),\n  ],\n  [\n    \"remove_service_principal\",\n    new
        Action(\n      function (args) {\n        checkType(args.id, \"string\", \"id\");\n      },\n      function
        (args) {\n        ccf.kv[\"public:ccf.gov.service_principals\"].delete(\n          ccf.strToBuf(args.id)\n        );\n      }\n    ),\n  ],\n]);\nexport
        function apply(proposal, proposalId) {\n  const proposed_actions = JSON.parse(proposal)[\"actions\"];\n  for
        (const proposed_action of proposed_actions) {\n    const definition = actions.get(proposed_action.name);\n    definition.apply(proposed_action.args,
        proposalId);\n  }\n}\nfunction getMemberInfo(memberId) {\n  const key = ccf.strToBuf(memberId);\n  const
        value = ccf.kv[\"public:ccf.gov.members.info\"].get(key);\n  const info =
        ccf.bufToJsonCompatible(value);\n  return info;\n}\n\n// Returns true if the
        member is a recovery member.\nfunction isRecoveryMember(memberId) {\n  const
        info = getMemberInfo(memberId);\n  if (info.member_data.encryption_pub_key)
        {\n    return true;\n  }\n  return false;\n}\n\n// Defines which of the members
        are operators.\nfunction isOperator(memberId) {\n  // // Operators cannot
        be recovery members.\n  // if (isRecoveryMember(memberId)) {\n  //   return
        false;\n  // }\n  const info = getMemberInfo(memberId);\n  return info.member_data.is_operator;\n}\n\n//
        Defines actions that can be passed with sole operator input.\nfunction canOperatorPass(action)
        {\n  // To enable code upgrades and disaster recovery for Public Preview,
        we''ve given the\n  // operator member some additional privileges.\n  // 1.
        add/remove node code are required for code upgrades.\n  // 2. set_constitution
        to replace this constitution with a \"correct\" one easily later on.\n  //
        3. set_member to add a new member for privileged operations when we use MHSM
        keys.\n  const allowedOperatorActions = [\n    \"add_node_code\", // Remove\n    \"remove_ca_cert_bundle\",\n    \"remove_jwt_issuer\",\n    \"remove_node\",\n    \"remove_node_code\",
        // Remove\n    \"remove_service_principal\",\n    \"remove_user\",\n    \"remove_user_by_cert\",\n    \"set_ca_cert_bundle\",\n    \"set_constitution\",
        // Remove\n    \"set_js_app\",\n    \"set_jwt_issuer\",\n    \"set_jwt_public_signing_keys\",\n    \"set_member\",
        // Remove\n    \"set_service_principal\",\n    \"set_user\",\n    \"set_user_data\",\n    \"transition_node_to_trusted\",\n    \"transition_service_to_open\"\n  ];\n\n  if
        (allowedOperatorActions.includes(action.name)) {\n    return true;\n  }\n  //
        Additionally, operators can add or retire other operators.\n  if (action.name
        === \"set_member\") {\n    const memberData = action.args[\"member_data\"];\n    if
        (memberData && memberData.is_operator) {\n      return true;\n    }\n  } else
        if (action.name === \"remove_member\") {\n    const memberId = ccf.pemToId(action.args.cert);\n    if
        (isOperator(memberId)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport
        function resolve(proposal, proposerId, votes) {\n  const actions = JSON.parse(proposal)[\"actions\"];\n\n  //
        Count member votes.\n  const memberVoteCount = votes.filter(\n    (v) => v.vote
        && !isOperator(v.member_id)\n  ).length;\n\n  // Count active members, excluding
        operators.\n  let activeMemberCount = 0;\n  ccf.kv[\"public:ccf.gov.members.info\"].forEach((value,
        key) => {\n    const memberId = ccf.bufToStr(key);\n    const info = ccf.bufToJsonCompatible(value);\n    if
        (info.status === \"Active\" && !isOperator(memberId)) {\n      activeMemberCount++;\n    }\n  });\n\n  //
        A proposal is an operator change if it''s only applying operator actions.\n  const
        isOperatorChange = actions.every(canOperatorPass);\n\n  // A majority of members
        can always accept a proposal.\n  if (memberVoteCount > Math.floor(activeMemberCount
        / 2)) {\n    return \"Accepted\";\n  }\n\n  // Operators proposing operator
        changes can accept them without a vote.\n  if (isOperatorChange && isOperator(proposerId))
        {\n    return \"Accepted\";\n  }\n\n  return \"Open\";\n}\nexport function
        validate(input) {\n  let proposal = JSON.parse(input);\n  let errors = [];\n  let
        position = 0;\n  for (const action of proposal[\"actions\"]) {\n    const
        definition = actions.get(action.name);\n    if (definition) {\n      try {\n        definition.validate(action.args);\n      }
        catch (e) {\n        errors.push(\n          `${action.name} at position ${position}
        failed validation: ${e}\\n${e.stack}`\n        );\n      }\n    } else {\n      errors.push(`${action.name}:
        no such action`);\n    }\n    position++;\n  }\n  return { valid: errors.length
        === 0, description: errors.join(\", \") };\n}\n"}'
    headers:
      content-length:
      - '31452'
      content-type:
      - application/json
      x-ms-ccf-transaction-id:
      - '2.32102'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - application/json
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - azsdk-python-confidentialledger/1.0.0 Python/3.8.10 (Linux-5.10.102.1-microsoft-standard-WSL2-x86_64-with-glibc2.29)
    method: GET
    uri: https://fake.confidential-ledger.azure.com/app/enclaveQuotes?api-version=0.1-preview
  response:
    body:
      string: '{"currentNodeId":"a315dae59c10f193cd8653fa72e21f3cd54d91470d15e0a3c4c873d50a63a813","enclaveQuotes":{"1390d98cd48b6335a5e14e035cc5858ee1de2a6ea4d657346b5de624c5e2f580":{"mrenclave":"cb3220f5d70f2beaeeb9a285e3625b55f892c72e2510615ecd2de01aac0941f9","nodeId":"1390d98cd48b6335a5e14e035cc5858ee1de2a6ea4d657346b5de624c5e2f580","quoteVersion":"OE_SGX_v1","raw":"030002000000000007000c00939a7233f79c4ca9940a0db3957f060730079a55b5331eb4a5d975fadff4c69c0000000013130207ff8006000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000700000000000000cb3220f5d70f2beaeeb9a285e3625b55f892c72e2510615ecd2de01aac0941f90000000000000000000000000000000000000000000000000000000000000000bcd758d1c678b6b42726cae72c6752f51f69e9b44b6d6c72f163bcb5049188d300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e8e8f06f2d2b9579dfdbfbb2ed1ee352af70564268fe9d57ce61648b806bd4a7000000000000000000000000000000000000000000000000000000000000000048100000c66b1b7cf88127ba647b0460e4beddc2481ef4084c5d716043350a27f62b3be997835f4c8fd4c1fc2fc81977c4794834d9615c2cd8774c763abe22e76a8ef7d48cba8cf822ab38ce90e6007ec1bbd6ec81750a2d0aceadee20bc24642d3f860ad2c789b25d32677832262979200593cd4785dd0f7aa70e8f400906afc853bce913130207ff8006000000000000000000000000000000000000000000000000000000000000000000000000000000000015000000000000000700000000000000ae123cbfa96c268560dfd5dffe4854ce443de4e0fa51d281184c9428d7a340fb00000000000000000000000000000000000000000000000000000000000000008c4f5775d796503e96137f77c68a829a0056ac8ded70140b081b094490c57bff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064846a41fa6663a399e2ab976595aa997de8670683c41f78c7e525b56d69ff2e000000000000000000000000000000000000000000000000000000000000000046fc694cd4602133fcce4128aaef597e9fbf5abdbdf7b036baa1b5c8d19b8b93bedbc3585a46b2d8ddbb33451c50ccacb8db0ef771941fd6200f77e5240327052000000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0500e00d00002d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949456a7a4343424453674177494241674956414f6c5770567a497a6c5957565a445268784a7049764267594758444d416f4743437147534d343942414d430a4d484578497a416842674e5642414d4d476b6c756447567349464e48574342515130736755484a765932567a6332397949454e424d526f77474159445651514b0a4442464a626e526c6243424462334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e560a4241674d416b4e424d517377435159445651514745774a56557a4165467730794d6a41314d5441774e4445304d546c61467730794f5441314d5441774e4445300a4d546c614d484178496a416742674e5642414d4d47556c756447567349464e4857434251513073675132567964476c6d61574e6864475578476a415942674e560a42416f4d45556c756447567349454e76636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b470a413155454341774351304578437a414a42674e5642415954416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a304441516344516741450a6c346c4b556c64434b31647968694a717654434b6b6267717633676c6b4e786833674371656632687650464b6c767a6a78686c492f79576f53586e714b4e4a4f0a717038417258565431516f3848762f6e5a697a77754b4f434171677767674b6b4d42384741315564497751594d426141464e446f71747031312f6b75535265590a504873555a644456386c6c4e4d477747413155644877526c4d474d77596142666f463247573268306448427a4f693876595842704c6e527964584e305a57527a0a5a584a3261574e6c63793570626e526c6243356a62323076633264344c324e6c636e52705a6d6c6a5958527062323476646a4d7663474e7259334a7350324e680a5058427962324e6c63334e7663695a6c626d4e765a476c755a7a316b5a584977485159445652304f424259454644676b6e7a5776727138704d714d70326257360a484a6f7079434f344d41344741315564447745422f775145417749477744414d42674e5648524d4241663845416a41414d4949423141594a4b6f5a496876684e0a415130424249494278544343416345774867594b4b6f5a496876684e4151304241515151766c4247636674426a4f394d5a4944497734654643444343415751470a43697147534962345451454e41514977676746554d42414743797147534962345451454e41514942416745524d42414743797147534962345451454e415149430a416745524d42414743797147534962345451454e41514944416745434d42414743797147534962345451454e41514945416745454d42414743797147534962340a5451454e41514946416745424d42454743797147534962345451454e41514947416749416744415142677371686b69472b4530424451454342774942426a41510a42677371686b69472b45304244514543434149424144415142677371686b69472b45304244514543435149424144415142677371686b69472b453042445145430a436749424144415142677371686b69472b45304244514543437749424144415142677371686b69472b45304244514543444149424144415142677371686b69470a2b45304244514543445149424144415142677371686b69472b45304244514543446749424144415142677371686b69472b4530424451454344774942414441510a42677371686b69472b45304244514543454149424144415142677371686b69472b4530424451454345514942437a416642677371686b69472b453042445145430a4567515145524543424147414267414141414141414141414144415142676f71686b69472b45304244514544424149414144415542676f71686b69472b4530420a44514545424159416b473756414141774477594b4b6f5a496876684e4151304242516f424144414b42676771686b6a4f5051514441674e4a41444247416945410a30724e7a412b4a2f786239546a533768634d776e6f7658394c3879384c63306f58456d387175686f6a657343495144595756584e6f727774336c6257767662790a387a484a6965302b524d714837443231345070397748664270413d3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436d444343416a36674177494241674956414e446f71747031312f6b7553526559504873555a644456386c6c4e4d416f4743437147534d343942414d430a4d476778476a415942674e5642414d4d45556c756447567349464e48574342536232393049454e424d526f77474159445651514b4442464a626e526c624342440a62334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e424d5173770a435159445651514745774a56557a4165467730784f4441314d6a45784d4455774d5442614677307a4d7a41314d6a45784d4455774d5442614d484578497a41680a42674e5642414d4d476b6c756447567349464e48574342515130736755484a765932567a6332397949454e424d526f77474159445651514b4442464a626e526c0a6243424462334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e420a4d517377435159445651514745774a56557a425a4d424d4742797147534d34394167454743437147534d34394177454841304941424c39712b4e4d7032494f670a74646c31626b2f75575a352b5447516d38614369387a373866732b664b435133642b75447a586e56544154325a68444369667949754a77764e33774e427039690a484253534d4a4d4a72424f6a6762737767626777487759445652306a42426777466f4155496d554d316c71644e496e7a6737535655723951477a6b6e427177770a556759445652306642457377535442486f45576751345a426148523063484d364c79396a5a584a3061575a70593246305a584d7564484a316333526c5a484e6c0a636e5a705932567a4c6d6c75644756734c6d4e766253394a626e526c62464e4857464a76623352445153356b5a584977485159445652304f42425945464e446f0a71747031312f6b7553526559504873555a644456386c6c4e4d41344741315564447745422f77514541774942426a415342674e5648524d4241663845434441470a4151482f416745414d416f4743437147534d343942414d43413067414d4555434951434a6754627456714f795a316d336a716941584d365159613672357357530a34792f4737793875494a4778647749675271507642534b7a7a516167424c517135733541373070646f6961524a387a2f3075447a344e675639316b3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436a7a4343416a53674177494241674955496d554d316c71644e496e7a6737535655723951477a6b6e42717777436759494b6f5a497a6a3045417749770a614445614d4267474131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e760a636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a0a42674e5642415954416c56544d423458445445344d4455794d5445774e4455784d466f58445451354d54497a4d54497a4e546b314f566f77614445614d4267470a4131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e76636e4276636d46300a615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a42674e56424159540a416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a3044415163445167414543366e45774d4449595a4f6a2f69505773437a61454b69370a314f694f534c52466857476a626e42564a66566e6b59347533496a6b4459594c304d784f346d717379596a6c42616c54565978465032734a424b357a6c4b4f420a757a43427544416642674e5648534d4547444157674251695a517a575770303069664f44744a5653763141624f5363477244425342674e5648523845537a424a0a4d45656752614244686b466f64485277637a6f764c324e6c636e52705a6d6c6a5958526c63793530636e567a6447566b63325679646d6c6a5a584d75615735300a5a577775593239744c306c756447567355306459556d397664454e424c6d526c636a416442674e564851344546675155496d554d316c71644e496e7a673753560a55723951477a6b6e4271777744675944565230504151482f42415144416745474d42494741315564457745422f7751494d4159424166384341514577436759490a4b6f5a497a6a3045417749445351417752674968414f572f35516b522b533943695344634e6f6f774c7550524c735747662f59693747535839344267775477670a41694541344a306c72486f4d732b586f356f2f7358364f39515778485241765a55474f6452513763767152586171493d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a0001000000000000000100000000000000100000000000000020000000000000007367785f7265706f72745f64617461001390d98cd48b6335a5e14e035cc5858ee1de2a6ea4d657346b5de624c5e2f580"},"a315dae59c10f193cd8653fa72e21f3cd54d91470d15e0a3c4c873d50a63a813":{"mrenclave":"cb3220f5d70f2beaeeb9a285e3625b55f892c72e2510615ecd2de01aac0941f9","nodeId":"a315dae59c10f193cd8653fa72e21f3cd54d91470d15e0a3c4c873d50a63a813","quoteVersion":"OE_SGX_v1","raw":"030002000000000007000c00939a7233f79c4ca9940a0db3957f06078b1dd736a84a15fbb901f9a466b88b660000000013130207ff8006000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000700000000000000cb3220f5d70f2beaeeb9a285e3625b55f892c72e2510615ecd2de01aac0941f90000000000000000000000000000000000000000000000000000000000000000bcd758d1c678b6b42726cae72c6752f51f69e9b44b6d6c72f163bcb5049188d300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000475c35453decb35f06496808ea8dfb90440caf422fcc21f9d2686535e2b7d895000000000000000000000000000000000000000000000000000000000000000044100000c8a08d79553ac35a2625d7564d917d3ef357fb23b661581cf219cab3d705c9251aae2ed2f9753bc97dd8fd80ed6fc118b7d8f7934bbf2105b40c15acee6b9f8579de54d090acda62f53eb0267f17e4914b15555fd264a62cd76e73ce9a793e339a874d810e298970c6422fac547f681c0138563749bfc7ba441ccbbafe8a987613130207ff8006000000000000000000000000000000000000000000000000000000000000000000000000000000000015000000000000000700000000000000ae123cbfa96c268560dfd5dffe4854ce443de4e0fa51d281184c9428d7a340fb00000000000000000000000000000000000000000000000000000000000000008c4f5775d796503e96137f77c68a829a0056ac8ded70140b081b094490c57bff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004c6bf7c362924cec2fb1b41a6f45bf0ca2ecb65d12c5bf6044a600735ce887550000000000000000000000000000000000000000000000000000000000000000431d40d68e29ee25d881390924d12ce3f2a87277fe5c91b04311e2467b72e344ed6bf1a590085cf1c77a91c00c750725d98b293fcbf616c945eb963c259cbb5b2000000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0500dc0d00002d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949456a54434342444f6741774942416749554b58786878542b2b6e41697a43555a5967714b5242764c734b775977436759494b6f5a497a6a3045417749770a6354456a4d4345474131554541777761535735305a577767553064594946424453794251636d396a5a584e7a6233496751304578476a415942674e5642416f4d0a45556c756447567349454e76636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155450a4341774351304578437a414a42674e5642415954416c56544d423458445449794d4455784d44417a4d7a45794e316f58445449354d4455784d44417a4d7a45790a4e316f77634445694d434147413155454177775a535735305a5777675530645949464244537942445a584a3061575a70593246305a5445614d426747413155450a43677752535735305a577767513239796347397959585270623234784644415342674e564241634d43314e68626e526849454e7359584a684d517377435159440a5651514944414a445154454c4d416b474131554542684d4356564d775754415442676371686b6a4f5051494242676771686b6a4f50514d4242774e434141512f0a44365834547a306f4273492f7337555a7241325a4a6c3877793075774e544a434e437969764f7a7544634d586c336d39372b69774246656b53597178765446640a334d4141586955584153786855344f4f4c5647536f3449437144434341715177487759445652306a42426777466f4155304f6971326e58582b53354a463567380a6578526c304e587957553077624159445652306642475577597a42686f462b6758595a626148523063484d364c79396863476b7564484a316333526c5a484e6c0a636e5a705932567a4c6d6c75644756734c6d4e766253397a5a3367765932567964476c6d61574e6864476c76626939324d7939775932746a636d772f593245390a63484a765932567a633239794a6d56755932396b6157356e5057526c636a416442674e564851344546675155696347595a4d643248374b385665574f306672530a35426d6237756f7744675944565230504151482f42415144416762414d41774741315564457745422f7751434d4141776767485542676b71686b69472b4530420a44514545676748464d4949427754416542676f71686b69472b4530424451454242424477794a5847386949503365344c61386e34576877514d4949425a41594b0a4b6f5a496876684e41513042416a4343415651774541594c4b6f5a496876684e4151304241674543415245774541594c4b6f5a496876684e41513042416749430a415245774541594c4b6f5a496876684e4151304241674d43415149774541594c4b6f5a496876684e4151304241675143415151774541594c4b6f5a496876684e0a4151304241675543415145774551594c4b6f5a496876684e4151304241675943416743414d42414743797147534962345451454e41514948416745474d4241470a43797147534962345451454e41514949416745414d42414743797147534962345451454e4151494a416745414d42414743797147534962345451454e4151494b0a416745414d42414743797147534962345451454e4151494c416745414d42414743797147534962345451454e4151494d416745414d42414743797147534962340a5451454e4151494e416745414d42414743797147534962345451454e4151494f416745414d42414743797147534962345451454e41514950416745414d4241470a43797147534962345451454e41514951416745414d42414743797147534962345451454e415149524167454c4d42384743797147534962345451454e415149530a4242415245514945415941474141414141414141414141414d42414743697147534962345451454e41514d45416741414d42514743697147534962345451454e0a4151514542674351627455414144415042676f71686b69472b45304244514546436745414d416f4743437147534d343942414d43413067414d455543495144450a673372544a6f6f7861366734757754416950744f7675786d75676c2f4738665854387a6a6d35716d6c6749676641573441544a6a4e41365934376968717a75380a59584f726831444254426e5a423274595647646a4f4d513d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436d444343416a36674177494241674956414e446f71747031312f6b7553526559504873555a644456386c6c4e4d416f4743437147534d343942414d430a4d476778476a415942674e5642414d4d45556c756447567349464e48574342536232393049454e424d526f77474159445651514b4442464a626e526c624342440a62334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e424d5173770a435159445651514745774a56557a4165467730784f4441314d6a45784d4455774d5442614677307a4d7a41314d6a45784d4455774d5442614d484578497a41680a42674e5642414d4d476b6c756447567349464e48574342515130736755484a765932567a6332397949454e424d526f77474159445651514b4442464a626e526c0a6243424462334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e420a4d517377435159445651514745774a56557a425a4d424d4742797147534d34394167454743437147534d34394177454841304941424c39712b4e4d7032494f670a74646c31626b2f75575a352b5447516d38614369387a373866732b664b435133642b75447a586e56544154325a68444369667949754a77764e33774e427039690a484253534d4a4d4a72424f6a6762737767626777487759445652306a42426777466f4155496d554d316c71644e496e7a6737535655723951477a6b6e427177770a556759445652306642457377535442486f45576751345a426148523063484d364c79396a5a584a3061575a70593246305a584d7564484a316333526c5a484e6c0a636e5a705932567a4c6d6c75644756734c6d4e766253394a626e526c62464e4857464a76623352445153356b5a584977485159445652304f42425945464e446f0a71747031312f6b7553526559504873555a644456386c6c4e4d41344741315564447745422f77514541774942426a415342674e5648524d4241663845434441470a4151482f416745414d416f4743437147534d343942414d43413067414d4555434951434a6754627456714f795a316d336a716941584d365159613672357357530a34792f4737793875494a4778647749675271507642534b7a7a516167424c517135733541373070646f6961524a387a2f3075447a344e675639316b3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436a7a4343416a53674177494241674955496d554d316c71644e496e7a6737535655723951477a6b6e42717777436759494b6f5a497a6a3045417749770a614445614d4267474131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e760a636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a0a42674e5642415954416c56544d423458445445344d4455794d5445774e4455784d466f58445451354d54497a4d54497a4e546b314f566f77614445614d4267470a4131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e76636e4276636d46300a615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a42674e56424159540a416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a3044415163445167414543366e45774d4449595a4f6a2f69505773437a61454b69370a314f694f534c52466857476a626e42564a66566e6b59347533496a6b4459594c304d784f346d717379596a6c42616c54565978465032734a424b357a6c4b4f420a757a43427544416642674e5648534d4547444157674251695a517a575770303069664f44744a5653763141624f5363477244425342674e5648523845537a424a0a4d45656752614244686b466f64485277637a6f764c324e6c636e52705a6d6c6a5958526c63793530636e567a6447566b63325679646d6c6a5a584d75615735300a5a577775593239744c306c756447567355306459556d397664454e424c6d526c636a416442674e564851344546675155496d554d316c71644e496e7a673753560a55723951477a6b6e4271777744675944565230504151482f42415144416745474d42494741315564457745422f7751494d4159424166384341514577436759490a4b6f5a497a6a3045417749445351417752674968414f572f35516b522b533943695344634e6f6f774c7550524c735747662f59693747535839344267775477670a41694541344a306c72486f4d732b586f356f2f7358364f39515778485241765a55474f6452513763767152586171493d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a0001000000000000000100000000000000100000000000000020000000000000007367785f7265706f72745f6461746100a315dae59c10f193cd8653fa72e21f3cd54d91470d15e0a3c4c873d50a63a813"},"f4066fecddc3b1c517bc2bdd8be657df57337bd7df41809befaa3453f0861d5d":{"mrenclave":"cb3220f5d70f2beaeeb9a285e3625b55f892c72e2510615ecd2de01aac0941f9","nodeId":"f4066fecddc3b1c517bc2bdd8be657df57337bd7df41809befaa3453f0861d5d","quoteVersion":"OE_SGX_v1","raw":"030002000000000007000c00939a7233f79c4ca9940a0db3957f06071059316feac82ddbe7022c234a9c80b70000000013130207ff8006000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000700000000000000cb3220f5d70f2beaeeb9a285e3625b55f892c72e2510615ecd2de01aac0941f90000000000000000000000000000000000000000000000000000000000000000bcd758d1c678b6b42726cae72c6752f51f69e9b44b6d6c72f163bcb5049188d30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000061370401115973d864330f43f027a21cf911b8cb9cf4a218394830096c04a8af000000000000000000000000000000000000000000000000000000000000000044100000502ce4a223a28e98bdd237d71ced3e778ea9ae8eb8bd3c6096970a6208343a48ae78ce5a1484be70f7c0e1d1cf33cccc23af2465e696ab4a50e02aca6891b0c9486a2cc03b3ed91c26f310fb2cb50eeb482b9d33c33c7c106dd9044751d362cab130a533b2f7dfa8729a8ce4b687801c230d3a371a8806a26c06d3be19e6365e13130207ff8006000000000000000000000000000000000000000000000000000000000000000000000000000000000015000000000000000700000000000000ae123cbfa96c268560dfd5dffe4854ce443de4e0fa51d281184c9428d7a340fb00000000000000000000000000000000000000000000000000000000000000008c4f5775d796503e96137f77c68a829a0056ac8ded70140b081b094490c57bff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f719ce86aa3a719f3d5d78d420ae310000d8552c720eef42dea6f9bfdd500a0000000000000000000000000000000000000000000000000000000000000000c64d0321db0b0339bedaee79ae91792be41c3d4cb246232bd651b7582a0665e84771860a3fefce439a0670426ee2668fe4d555791dff14e68d307caa561918882000000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0500dc0d00002d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949456a6a434342445367417749424167495641506d302b394e57547056344247626c424a425071376468556b4a4b4d416f4743437147534d343942414d430a4d484578497a416842674e5642414d4d476b6c756447567349464e48574342515130736755484a765932567a6332397949454e424d526f77474159445651514b0a4442464a626e526c6243424462334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e560a4241674d416b4e424d517377435159445651514745774a56557a4165467730794d6a41314d5441774e5449354e544661467730794f5441314d5441774e5449350a4e5446614d484178496a416742674e5642414d4d47556c756447567349464e4857434251513073675132567964476c6d61574e6864475578476a415942674e560a42416f4d45556c756447567349454e76636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b470a413155454341774351304578437a414a42674e5642415954416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a304441516344516741450a617133576a527175565950434c6356666638597033756c61754442754d42413738516a354756365647443069644b2f503946672b6e3738745373467832376e590a6e6f724656346750704c3234637561704d57414b36614f434171677767674b6b4d42384741315564497751594d426141464e446f71747031312f6b75535265590a504873555a644456386c6c4e4d477747413155644877526c4d474d77596142666f463247573268306448427a4f693876595842704c6e527964584e305a57527a0a5a584a3261574e6c63793570626e526c6243356a62323076633264344c324e6c636e52705a6d6c6a5958527062323476646a4d7663474e7259334a7350324e680a5058427962324e6c63334e7663695a6c626d4e765a476c755a7a316b5a584977485159445652304f4242594546506e697639676f305176537273506c374e6a440a787a4f493353444e4d41344741315564447745422f775145417749477744414d42674e5648524d4241663845416a41414d4949423141594a4b6f5a496876684e0a415130424249494278544343416345774867594b4b6f5a496876684e415130424151515174537a504e7347352b30747950496746546e345851444343415751470a43697147534962345451454e41514977676746554d42414743797147534962345451454e41514942416745524d42414743797147534962345451454e415149430a416745524d42414743797147534962345451454e41514944416745434d42414743797147534962345451454e41514945416745454d42414743797147534962340a5451454e41514946416745424d42454743797147534962345451454e41514947416749416744415142677371686b69472b4530424451454342774942426a41510a42677371686b69472b45304244514543434149424144415142677371686b69472b45304244514543435149424144415142677371686b69472b453042445145430a436749424144415142677371686b69472b45304244514543437749424144415142677371686b69472b45304244514543444149424144415142677371686b69470a2b45304244514543445149424144415142677371686b69472b45304244514543446749424144415142677371686b69472b4530424451454344774942414441510a42677371686b69472b45304244514543454149424144415142677371686b69472b4530424451454345514942437a416642677371686b69472b453042445145430a4567515145524543424147414267414141414141414141414144415142676f71686b69472b45304244514544424149414144415542676f71686b69472b4530420a44514545424159416b473756414141774477594b4b6f5a496876684e4151304242516f424144414b42676771686b6a4f5051514441674e4941444246416945410a72374b575646663831527166574777513154445330686a6c4462596844367a384b4c346d5a492f626f4e4d43494235634b7a5769306c4271582b6c57656e6e630a4b4574303568735a73596f5733736d454c2f2b64485436390a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436d444343416a36674177494241674956414e446f71747031312f6b7553526559504873555a644456386c6c4e4d416f4743437147534d343942414d430a4d476778476a415942674e5642414d4d45556c756447567349464e48574342536232393049454e424d526f77474159445651514b4442464a626e526c624342440a62334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e424d5173770a435159445651514745774a56557a4165467730784f4441314d6a45784d4455774d5442614677307a4d7a41314d6a45784d4455774d5442614d484578497a41680a42674e5642414d4d476b6c756447567349464e48574342515130736755484a765932567a6332397949454e424d526f77474159445651514b4442464a626e526c0a6243424462334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e420a4d517377435159445651514745774a56557a425a4d424d4742797147534d34394167454743437147534d34394177454841304941424c39712b4e4d7032494f670a74646c31626b2f75575a352b5447516d38614369387a373866732b664b435133642b75447a586e56544154325a68444369667949754a77764e33774e427039690a484253534d4a4d4a72424f6a6762737767626777487759445652306a42426777466f4155496d554d316c71644e496e7a6737535655723951477a6b6e427177770a556759445652306642457377535442486f45576751345a426148523063484d364c79396a5a584a3061575a70593246305a584d7564484a316333526c5a484e6c0a636e5a705932567a4c6d6c75644756734c6d4e766253394a626e526c62464e4857464a76623352445153356b5a584977485159445652304f42425945464e446f0a71747031312f6b7553526559504873555a644456386c6c4e4d41344741315564447745422f77514541774942426a415342674e5648524d4241663845434441470a4151482f416745414d416f4743437147534d343942414d43413067414d4555434951434a6754627456714f795a316d336a716941584d365159613672357357530a34792f4737793875494a4778647749675271507642534b7a7a516167424c517135733541373070646f6961524a387a2f3075447a344e675639316b3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436a7a4343416a53674177494241674955496d554d316c71644e496e7a6737535655723951477a6b6e42717777436759494b6f5a497a6a3045417749770a614445614d4267474131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e760a636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a0a42674e5642415954416c56544d423458445445344d4455794d5445774e4455784d466f58445451354d54497a4d54497a4e546b314f566f77614445614d4267470a4131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e76636e4276636d46300a615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a42674e56424159540a416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a3044415163445167414543366e45774d4449595a4f6a2f69505773437a61454b69370a314f694f534c52466857476a626e42564a66566e6b59347533496a6b4459594c304d784f346d717379596a6c42616c54565978465032734a424b357a6c4b4f420a757a43427544416642674e5648534d4547444157674251695a517a575770303069664f44744a5653763141624f5363477244425342674e5648523845537a424a0a4d45656752614244686b466f64485277637a6f764c324e6c636e52705a6d6c6a5958526c63793530636e567a6447566b63325679646d6c6a5a584d75615735300a5a577775593239744c306c756447567355306459556d397664454e424c6d526c636a416442674e564851344546675155496d554d316c71644e496e7a673753560a55723951477a6b6e4271777744675944565230504151482f42415144416745474d42494741315564457745422f7751494d4159424166384341514577436759490a4b6f5a497a6a3045417749445351417752674968414f572f35516b522b533943695344634e6f6f774c7550524c735747662f59693747535839344267775477670a41694541344a306c72486f4d732b586f356f2f7358364f39515778485241765a55474f6452513763767152586171493d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a0001000000000000000100000000000000100000000000000020000000000000007367785f7265706f72745f6461746100f4066fecddc3b1c517bc2bdd8be657df57337bd7df41809befaa3453f0861d5d"}}}'
    headers:
      content-length:
      - '28970'
      content-type:
      - application/json
      x-ms-ccf-transaction-id:
      - '2.32103'
    status:
      code: 200
      message: OK
version: 1
