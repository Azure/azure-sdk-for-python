{
  "Entries": [
    {
      "RequestUri": "https://identity.confidential-ledger.core.azure.com/ledgerIdentity/fake?api-version=2022-05-13",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azsdk-python-confidentialledger-certificate/1.0.0 Python/3.8.10 (Linux-5.10.102.1-microsoft-standard-WSL2-x86_64-with-glibc2.29)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 16 Aug 2022 20:44:52 GMT",
        "Server": "Kestrel",
        "Transfer-Encoding": "chunked",
        "x-ms-correlation-request-id": "b66916cb-3869-4f59-875c-43177780e725",
        "x-ms-image-digest": "sha256:9b8d3952372e585a3b21995d9be0c8702fb7ba2ef54ca65392b2562dd2adcc73",
        "x-ms-image-tag": "1.0.02031.28-b60f6adbe3f21e46216336ba378cc34dd0ab86ca",
        "x-ms-machineName": "identityservice-6f96b84df8-wbxmj"
      },
      "ResponseBody": {
        "ledgerTlsCertificate": "-----BEGIN CERTIFICATE-----\nMIIBeTCCASCgAwIBAgIQcTrTRLjb9eOoGTXSvOEgxjAKBggqhkjOPQQDAjAWMRQw\nEgYDVQQDDAtDQ0YgTmV0d29yazAeFw0yMjA2MjcxNjA3MjNaFw0yMjA5MjUxNjA3\nMjJaMBYxFDASBgNVBAMMC0NDRiBOZXR3b3JrMFkwEwYHKoZIzj0CAQYIKoZIzj0D\nAQcDQgAEyn3oh7/D\u002Bm/yuzdWNSEh3ZOupuUiO6U7MIcwiM6RBZ3nsWQHGeVyT0Ai\n\u002B7cYDtPGo/8VRio\u002BBrknl7VALE3q9aNQME4wDAYDVR0TBAUwAwEB/zAdBgNVHQ4E\nFgQUh1gNHgpIlTONmFbFX7HeG1rcT6gwHwYDVR0jBBgwFoAUh1gNHgpIlTONmFbF\nX7HeG1rcT6gwCgYIKoZIzj0EAwIDRwAwRAIgdd7rQszgGJ\u002BjtjuiECigiFxoAvDk\nOPPBwTvMsE8TzsYCIDgYQ1mGHyZ52NXgoxPfqVVFTive8JIsjeQuczMZFq\u002B9\n-----END CERTIFICATE-----\n",
        "ledgerId": "fake"
      }
    },
    {
      "RequestUri": "https://login.microsoftonline.com/72f988bf-86f1-41af-91ab-2d7cd011db47/v2.0/.well-known/openid-configuration",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "*/*",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azsdk-python-identity/1.11.0b2 Python/3.8.10 (Linux-5.10.102.1-microsoft-standard-WSL2-x86_64-with-glibc2.29)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Access-Control-Allow-Methods": "GET, OPTIONS",
        "Access-Control-Allow-Origin": "*",
        "Cache-Control": "max-age=86400, private",
        "Content-Length": "1753",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 16 Aug 2022 20:44:53 GMT",
        "P3P": "CP=\u0022DSP CUR OTPi IND OTRi ONL FIN\u0022",
        "Set-Cookie": [
          "fpc=Atgxg8SjLcVMozccsqXh56Q; expires=Thu, 15-Sep-2022 20:44:53 GMT; path=/; secure; HttpOnly; SameSite=None",
          "esctx=AQABAAAAAAD--DLA3VO7QrddgJg7WevryFeqMiuGh-Op8DGYizTHOJJcdPVB7Q3IRqqiDt-66ILZ2TPefaSNji9ooBzM0Zn-GTR2UxE_Ffrjil-QsDCXLvbrh6GU3zKA054lyEDclP5ykCYtqcp--XJjulVjtQ3rnhOyyZm3RiuK5RjKT4Hrq2BhTeRaXFhhGK8NU4XnIE8gAA; domain=.login.microsoftonline.com; path=/; secure; HttpOnly; SameSite=None",
          "x-ms-gateway-slice=estsfd; path=/; secure; samesite=none; httponly",
          "stsservicecookie=estsfd; path=/; secure; samesite=none; httponly"
        ],
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "X-Content-Type-Options": "nosniff",
        "x-ms-ests-server": "2.1.13481.9 - NCUS ProdSlices",
        "X-XSS-Protection": "0"
      },
      "ResponseBody": {
        "token_endpoint": "https://login.microsoftonline.com/72f988bf-86f1-41af-91ab-2d7cd011db47/oauth2/v2.0/token",
        "token_endpoint_auth_methods_supported": [
          "client_secret_post",
          "private_key_jwt",
          "client_secret_basic"
        ],
        "jwks_uri": "https://login.microsoftonline.com/72f988bf-86f1-41af-91ab-2d7cd011db47/discovery/v2.0/keys",
        "response_modes_supported": [
          "query",
          "fragment",
          "form_post"
        ],
        "subject_types_supported": [
          "pairwise"
        ],
        "id_token_signing_alg_values_supported": [
          "RS256"
        ],
        "response_types_supported": [
          "code",
          "id_token",
          "code id_token",
          "id_token token"
        ],
        "scopes_supported": [
          "openid",
          "profile",
          "email",
          "offline_access"
        ],
        "issuer": "https://login.microsoftonline.com/72f988bf-86f1-41af-91ab-2d7cd011db47/v2.0",
        "request_uri_parameter_supported": false,
        "userinfo_endpoint": "https://graph.microsoft.com/oidc/userinfo",
        "authorization_endpoint": "https://login.microsoftonline.com/72f988bf-86f1-41af-91ab-2d7cd011db47/oauth2/v2.0/authorize",
        "device_authorization_endpoint": "https://login.microsoftonline.com/72f988bf-86f1-41af-91ab-2d7cd011db47/oauth2/v2.0/devicecode",
        "http_logout_supported": true,
        "frontchannel_logout_supported": true,
        "end_session_endpoint": "https://login.microsoftonline.com/72f988bf-86f1-41af-91ab-2d7cd011db47/oauth2/v2.0/logout",
        "claims_supported": [
          "sub",
          "iss",
          "cloud_instance_name",
          "cloud_instance_host_name",
          "cloud_graph_host_name",
          "msgraph_host",
          "aud",
          "exp",
          "iat",
          "auth_time",
          "acr",
          "nonce",
          "preferred_username",
          "name",
          "tid",
          "ver",
          "at_hash",
          "c_hash",
          "email"
        ],
        "kerberos_endpoint": "https://login.microsoftonline.com/72f988bf-86f1-41af-91ab-2d7cd011db47/kerberos",
        "tenant_region_scope": "WW",
        "cloud_instance_name": "microsoftonline.com",
        "cloud_graph_host_name": "graph.windows.net",
        "msgraph_host": "graph.microsoft.com",
        "rbac_url": "https://pas.windows.net"
      }
    },
    {
      "RequestUri": "https://login.microsoftonline.com/common/discovery/instance?api-version=1.1\u0026authorization_endpoint=https://login.microsoftonline.com/common/oauth2/authorize",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Cookie": "fpc=Atgxg8SjLcVMozccsqXh56Q; stsservicecookie=estsfd; x-ms-gateway-slice=estsfd",
        "User-Agent": "azsdk-python-identity/1.11.0b2 Python/3.8.10 (Linux-5.10.102.1-microsoft-standard-WSL2-x86_64-with-glibc2.29)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Access-Control-Allow-Methods": "GET, OPTIONS",
        "Access-Control-Allow-Origin": "*",
        "Cache-Control": "max-age=86400, private",
        "Content-Length": "945",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 16 Aug 2022 20:44:53 GMT",
        "P3P": "CP=\u0022DSP CUR OTPi IND OTRi ONL FIN\u0022",
        "Set-Cookie": [
          "fpc=Atgxg8SjLcVMozccsqXh56Q; expires=Thu, 15-Sep-2022 20:44:53 GMT; path=/; secure; HttpOnly; SameSite=None",
          "x-ms-gateway-slice=estsfd; path=/; secure; samesite=none; httponly",
          "stsservicecookie=estsfd; path=/; secure; samesite=none; httponly"
        ],
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "X-Content-Type-Options": "nosniff",
        "x-ms-ests-server": "2.1.13481.9 - WUS2 ProdSlices",
        "X-XSS-Protection": "0"
      },
      "ResponseBody": {
        "tenant_discovery_endpoint": "https://login.microsoftonline.com/common/.well-known/openid-configuration",
        "api-version": "1.1",
        "metadata": [
          {
            "preferred_network": "login.microsoftonline.com",
            "preferred_cache": "login.windows.net",
            "aliases": [
              "login.microsoftonline.com",
              "login.windows.net",
              "login.microsoft.com",
              "sts.windows.net"
            ]
          },
          {
            "preferred_network": "login.partner.microsoftonline.cn",
            "preferred_cache": "login.partner.microsoftonline.cn",
            "aliases": [
              "login.partner.microsoftonline.cn",
              "login.chinacloudapi.cn"
            ]
          },
          {
            "preferred_network": "login.microsoftonline.de",
            "preferred_cache": "login.microsoftonline.de",
            "aliases": [
              "login.microsoftonline.de"
            ]
          },
          {
            "preferred_network": "login.microsoftonline.us",
            "preferred_cache": "login.microsoftonline.us",
            "aliases": [
              "login.microsoftonline.us",
              "login.usgovcloudapi.net"
            ]
          },
          {
            "preferred_network": "login-us.microsoftonline.com",
            "preferred_cache": "login-us.microsoftonline.com",
            "aliases": [
              "login-us.microsoftonline.com"
            ]
          }
        ]
      }
    },
    {
      "RequestUri": "https://login.microsoftonline.com/72f988bf-86f1-41af-91ab-2d7cd011db47/oauth2/v2.0/token",
      "RequestMethod": "POST",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "client-request-id": "8d55015f-2f0f-4991-afc5-43740897b4e2",
        "Connection": "keep-alive",
        "Content-Length": "301",
        "Content-Type": "application/x-www-form-urlencoded",
        "Cookie": "fpc=Atgxg8SjLcVMozccsqXh56Q; stsservicecookie=estsfd; x-ms-gateway-slice=estsfd",
        "User-Agent": "azsdk-python-identity/1.11.0b2 Python/3.8.10 (Linux-5.10.102.1-microsoft-standard-WSL2-x86_64-with-glibc2.29)",
        "x-client-cpu": "x64",
        "x-client-current-telemetry": "4|730,0|",
        "x-client-last-telemetry": "4|0|||",
        "x-client-os": "linux",
        "x-client-sku": "MSAL.Python",
        "x-client-ver": "1.17.0",
        "x-ms-lib-capability": "retry-after, h429"
      },
      "RequestBody": "client_id=ad1ac7bf-b0ea-4c73-9b8d-a3de3fde2b2d\u0026grant_type=client_credentials\u0026client_info=1\u0026client_secret=9d88Q~P4KI3Oc7wuRN.ngX-Z0uNN8VEObNhL2bUJ\u0026claims=%7B%22access_token%22%3A\u002B%7B%22xms_cc%22%3A\u002B%7B%22values%22%3A\u002B%5B%22CP1%22%5D%7D%7D%7D\u0026scope=https%3A%2F%2Fconfidential-ledger.azure.com%2F.default",
      "StatusCode": 200,
      "ResponseHeaders": {
        "Cache-Control": "no-store, no-cache",
        "client-request-id": "8d55015f-2f0f-4991-afc5-43740897b4e2",
        "Content-Length": "111",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 16 Aug 2022 20:44:53 GMT",
        "Expires": "-1",
        "P3P": "CP=\u0022DSP CUR OTPi IND OTRi ONL FIN\u0022",
        "Pragma": "no-cache",
        "Set-Cookie": [
          "fpc=Atgxg8SjLcVMozccsqXh56Sb7eLaAQAAAMX4jdoOAAAA; expires=Thu, 15-Sep-2022 20:44:53 GMT; path=/; secure; HttpOnly; SameSite=None",
          "x-ms-gateway-slice=estsfd; path=/; secure; samesite=none; httponly",
          "stsservicecookie=estsfd; path=/; secure; samesite=none; httponly"
        ],
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "X-Content-Type-Options": "nosniff",
        "x-ms-clitelem": "1,0,0,,",
        "x-ms-ests-server": "2.1.13481.9 - SCUS ProdSlices",
        "X-XSS-Protection": "0"
      },
      "ResponseBody": {
        "token_type": "Bearer",
        "expires_in": 86399,
        "ext_expires_in": 86399,
        "refresh_in": 43199,
        "access_token": "Sanitized"
      }
    },
    {
      "RequestUri": "https://fake.confidential-ledger.azure.com/app/users/5F:23:3D:26:E2:28:88:9C:06:E0:88:21:FA:C7:B2:9A:F8:81:30:6B:F9:15:41:F2:34:05:05:44:4C:AD:5A:B5?api-version=2022-05-13",
      "RequestMethod": "PATCH",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "33",
        "Content-Type": "application/merge-patch\u002Bjson",
        "User-Agent": "azsdk-python-confidentialledger/1.0.1 Python/3.8.10 (Linux-5.10.102.1-microsoft-standard-WSL2-x86_64-with-glibc2.29)"
      },
      "RequestBody": {
        "assignedRole": "Administrator"
      },
      "StatusCode": 200,
      "ResponseHeaders": {
        "Content-Length": "139",
        "Content-Type": "application/json",
        "x-ms-ccf-transaction-id": "8.29635"
      },
      "ResponseBody": {
        "assignedRole": "Administrator",
        "userId": "5F:23:3D:26:E2:28:88:9C:06:E0:88:21:FA:C7:B2:9A:F8:81:30:6B:F9:15:41:F2:34:05:05:44:4C:AD:5A:B5"
      }
    },
    {
      "RequestUri": "https://fake.confidential-ledger.azure.com/app/governance/members?api-version=2022-05-13",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azsdk-python-confidentialledger/1.0.1 Python/3.8.10 (Linux-5.10.102.1-microsoft-standard-WSL2-x86_64-with-glibc2.29)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Content-Length": "856",
        "Content-Type": "application/json",
        "x-ms-ccf-transaction-id": "8.29636"
      },
      "ResponseBody": {
        "members": [
          {
            "certificate": "-----BEGIN CERTIFICATE-----\nMIIB9zCCAX2gAwIBAgIQMAEeooXfQdW6giXYaafT1DAKBggqhkjOPQQDAzAgMR4w\nHAYDVQQDExVDQ0YgR292ZXJub3IgSWRlbnRpdHkwHhcNMjIwNjI3MTU1NjQxWhcN\nMjIwOTI3MTYwNjQxWjAgMR4wHAYDVQQDExVDQ0YgR292ZXJub3IgSWRlbnRpdHkw\ndjAQBgcqhkjOPQIBBgUrgQQAIgNiAASqtUAZVCcGm38thbsTyFz\u002BwkUHNHixt5QF\ncr9Q095DywgBU9yUWXSHBjhVMtI8\u002BHJzq9PTSPvkO6yhvacaBr3w7uWrwN\u002B4yfpj\nwFwsl4GpDvnBa0PdHnRa03ayLcfjZEKjfDB6MA4GA1UdDwEB/wQEAwIHgDAJBgNV\nHRMEAjAAMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAfBgNVHSMEGDAW\ngBR6I6yFAZG9HMa6eJOorb\u002Bs5u0kADAdBgNVHQ4EFgQUeiOshQGRvRzGuniTqK2/\nrObtJAAwCgYIKoZIzj0EAwMDaAAwZQIwNZ63xMJXFHSuP9fYqpwaMN7IFBR/oihI\nBI/g/zdHJrpZ/WBflOu/h8NjOCJL/6gFAjEAttAEp5op\u002BuEZGVsC12BD\u002B3iSMbbU\nBCTbeRohXdmfrVh\u002BR4HTjMEkMZGulxArXsgl\n-----END CERTIFICATE-----",
            "id": "93579f54afd1c33c6924ffa2c1ef0e5aaf449d2d532f6e88cfff8f718cd2e068"
          }
        ]
      }
    },
    {
      "RequestUri": "https://fake.confidential-ledger.azure.com/app/governance/constitution?api-version=2022-05-13",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azsdk-python-confidentialledger/1.0.1 Python/3.8.10 (Linux-5.10.102.1-microsoft-standard-WSL2-x86_64-with-glibc2.29)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Content-Length": "45692",
        "Content-Type": "application/json",
        "x-ms-ccf-transaction-id": "8.29636"
      },
      "ResponseBody": {
        "digest": "c71e1e9cb9e2c0cb26a4e0ff04bdd3913cff868b241808869a81dd0de29ab703",
        "script": "export function validate(input) {\n  let proposal = JSON.parse(input);\n  let errors = [];\n  let position = 0;\n  for (const action of proposal[\u0022actions\u0022]) {\n    const definition = actions.get(action.name);\n    if (definition) {\n      try {\n        definition.validate(action.args);\n      } catch (e) {\n        errors.push(\n          \u0060${action.name} at position ${position} failed validation: ${e}\\n${e.stack}\u0060\n        );\n      }\n    } else {\n      errors.push(\u0060${action.name}: no such action\u0060);\n    }\n    position\u002B\u002B;\n  }\n  return { valid: errors.length === 0, description: errors.join(\u0022, \u0022) };\n}\nclass Action {\n  constructor(validate, apply) {\n    this.validate = validate;\n    this.apply = apply;\n  }\n}\n\nfunction parseUrl(url) {\n  // From https://tools.ietf.org/html/rfc3986#appendix-B\n  const re = new RegExp(\n    \u0022^(([^:/?#]\u002B):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\u0022\n  );\n  const groups = url.match(re);\n  if (!groups) {\n    throw new TypeError(\u0060${url} is not a valid URL.\u0060);\n  }\n  return {\n    scheme: groups[2],\n    authority: groups[4],\n    path: groups[5],\n    query: groups[7],\n    fragment: groups[9],\n  };\n}\n\nfunction checkType(value, type, field) {\n  const optional = type.endsWith(\u0022?\u0022);\n  if (optional) {\n    if (value === null || value === undefined) {\n      return;\n    }\n    type = type.slice(0, -1);\n  }\n  if (type === \u0022array\u0022) {\n    if (!Array.isArray(value)) {\n      throw new Error(\u0060${field} must be an array\u0060);\n    }\n  } else if (type === \u0022integer\u0022) {\n    if (!Number.isInteger(value)) {\n      throw new Error(\u0060${field} must be an integer\u0060);\n    }\n  } else if (typeof value !== type) {\n    throw new Error(\u0060${field} must be of type ${type} but is ${typeof value}\u0060);\n  }\n}\n\nfunction checkEnum(value, members, field) {\n  if (!members.includes(value)) {\n    throw new Error(\u0060${field} must be one of ${members}\u0060);\n  }\n}\n\nfunction checkBounds(value, low, high, field) {\n  if (low !== null \u0026\u0026 value \u003C low) {\n    throw new Error(\u0060${field} must be greater than ${low}\u0060);\n  }\n  if (high !== null \u0026\u0026 value \u003E high) {\n    throw new Error(\u0060${field} must be lower than ${high}\u0060);\n  }\n}\n\nfunction checkLength(value, min, max, field) {\n  if (min !== null \u0026\u0026 value.length \u003C min) {\n    throw new Error(\u0060${field} must be an array of minimum ${min} elements\u0060);\n  }\n  if (max !== null \u0026\u0026 value.length \u003E max) {\n    throw new Error(\u0060${field} must be an array of maximum ${max} elements\u0060);\n  }\n}\n\nfunction checkNone(args) {\n  if (args !== null \u0026\u0026 args !== undefined) {\n    throw new Error(\u0060Proposal does not accept any argument, found \u0022${args}\u0022\u0060);\n  }\n}\n\nfunction checkEntityId(value, field) {\n  checkType(value, \u0022string\u0022, field);\n  // This should be the hex-encoding of a SHA256 digest. This is 32 bytes long, so\n  // produces 64 hex characters.\n  const digestLength = 64;\n  if (value.length !== digestLength) {\n    throw new Error(\u0060${field} must contain exactly ${digestLength} characters\u0060);\n  }\n  const re = new RegExp(\u0022^[a-fA-F0-9]*$\u0022);\n  if (!re.test(value)) {\n    throw new Error(\u0060${field} contains non-hexadecimal character\u0060);\n  }\n}\n\nfunction getSingletonKvKey() {\n  // When a KV map only contains one value, this is the key at which\n  // the value is recorded\n  return new ArrayBuffer(8);\n}\n\nfunction getActiveRecoveryMembersCount() {\n  let activeRecoveryMembersCount = 0;\n  ccf.kv[\u0022public:ccf.gov.members.encryption_public_keys\u0022].forEach((_, k) =\u003E {\n    let rawMemberInfo = ccf.kv[\u0022public:ccf.gov.members.info\u0022].get(k);\n    if (rawMemberInfo === undefined) {\n      throw new Error(\u0060Recovery member ${ccf.bufToStr(k)} has no information\u0060);\n    }\n\n    const memberInfo = ccf.bufToJsonCompatible(rawMemberInfo);\n    if (memberInfo.status === \u0022Active\u0022) {\n      activeRecoveryMembersCount\u002B\u002B;\n    }\n  });\n  return activeRecoveryMembersCount;\n}\n\nfunction checkJwks(value, field) {\n  checkType(value, \u0022object\u0022, field);\n  checkType(value.keys, \u0022array\u0022, \u0060${field}.keys\u0060);\n  for (const [i, jwk] of value.keys.entries()) {\n    checkType(jwk.kid, \u0022string\u0022, \u0060${field}.keys[${i}].kid\u0060);\n    checkType(jwk.kty, \u0022string\u0022, \u0060${field}.keys[${i}].kty\u0060);\n    checkType(jwk.x5c, \u0022array\u0022, \u0060${field}.keys[${i}].x5c\u0060);\n    checkLength(jwk.x5c, 1, null, \u0060${field}.keys[${i}].x5c\u0060);\n    for (const [j, b64der] of jwk.x5c.entries()) {\n      checkType(b64der, \u0022string\u0022, \u0060${field}.keys[${i}].x5c[${j}]\u0060);\n      const pem =\n        \u0022-----BEGIN CERTIFICATE-----\\n\u0022 \u002B\n        b64der \u002B\n        \u0022\\n-----END CERTIFICATE-----\u0022;\n      checkX509CertChain(pem, \u0060${field}.keys[${i}].x5c[${j}]\u0060);\n    }\n  }\n}\n\nfunction checkX509CertChain(value, field) {\n  if (!ccf.isValidX509CertBundle(value)) {\n    throw new Error(\n      \u0060${field} must be a valid X509 certificate (chain) in PEM format\u0060\n    );\n  }\n}\n\nfunction invalidateOtherOpenProposals(proposalIdToRetain) {\n  const proposalsMap = ccf.kv[\u0022public:ccf.gov.proposals_info\u0022];\n  proposalsMap.forEach((v, k) =\u003E {\n    let proposalId = ccf.bufToStr(k);\n    if (proposalId !== proposalIdToRetain) {\n      let info = ccf.bufToJsonCompatible(v);\n      if (info.state === \u0022Open\u0022) {\n        info.state = \u0022Dropped\u0022;\n        proposalsMap.set(k, ccf.jsonCompatibleToBuf(info));\n      }\n    }\n  });\n}\n\nfunction setServiceCertificateValidityPeriod(validFrom, validityPeriodDays) {\n  const rawConfig = ccf.kv[\u0022public:ccf.gov.service.config\u0022].get(\n    getSingletonKvKey()\n  );\n  if (rawConfig === undefined) {\n    throw new Error(\u0022Service configuration could not be found\u0022);\n  }\n  const serviceConfig = ccf.bufToJsonCompatible(rawConfig);\n\n  const default_validity_period_days = 365;\n  const max_allowed_cert_validity_period_days =\n    serviceConfig.maximum_service_certificate_validity_days ??\n    default_validity_period_days;\n\n  if (\n    validityPeriodDays !== undefined \u0026\u0026\n    validityPeriodDays \u003E max_allowed_cert_validity_period_days\n  ) {\n    throw new Error(\n      \u0060Validity period ${validityPeriodDays} (days) is not allowed: service max allowed is ${max_allowed_cert_validity_period_days} (days)\u0060\n    );\n  }\n\n  const renewed_service_certificate = ccf.network.generateNetworkCertificate(\n    validFrom,\n    validityPeriodDays ?? max_allowed_cert_validity_period_days\n  );\n\n  const serviceInfoTable = \u0022public:ccf.gov.service.info\u0022;\n  const rawServiceInfo = ccf.kv[serviceInfoTable].get(getSingletonKvKey());\n  if (rawServiceInfo === undefined) {\n    throw new Error(\u0022Service info could not be found\u0022);\n  }\n  const serviceInfo = ccf.bufToJsonCompatible(rawServiceInfo);\n\n  serviceInfo.cert = renewed_service_certificate;\n  ccf.kv[serviceInfoTable].set(\n    getSingletonKvKey(),\n    ccf.jsonCompatibleToBuf(serviceInfo)\n  );\n}\n\nfunction setNodeCertificateValidityPeriod(\n  nodeId,\n  nodeInfo,\n  validFrom,\n  validityPeriodDays\n) {\n  if (nodeInfo.certificate_signing_request === undefined) {\n    throw new Error(\u0060Node ${nodeId} has no certificate signing request\u0060);\n  }\n\n  const rawConfig = ccf.kv[\u0022public:ccf.gov.service.config\u0022].get(\n    getSingletonKvKey()\n  );\n  if (rawConfig === undefined) {\n    throw new Error(\u0022Service configuration could not be found\u0022);\n  }\n  const serviceConfig = ccf.bufToJsonCompatible(rawConfig);\n\n  const default_validity_period_days = 365;\n  const max_allowed_cert_validity_period_days =\n    serviceConfig.maximum_node_certificate_validity_days ??\n    default_validity_period_days;\n\n  if (\n    validityPeriodDays !== undefined \u0026\u0026\n    validityPeriodDays \u003E max_allowed_cert_validity_period_days\n  ) {\n    throw new Error(\n      \u0060Validity period ${validityPeriodDays} (days) is not allowed: service max allowed is ${max_allowed_cert_validity_period_days} (days)\u0060\n    );\n  }\n\n  const endorsed_node_cert = ccf.network.generateEndorsedCertificate(\n    nodeInfo.certificate_signing_request,\n    validFrom,\n    validityPeriodDays ?? max_allowed_cert_validity_period_days\n  );\n  ccf.kv[\u0022public:ccf.gov.nodes.endorsed_certificates\u0022].set(\n    ccf.strToBuf(nodeId),\n    ccf.strToBuf(endorsed_node_cert)\n  );\n}\n\nfunction checkRecoveryThreshold(config, new_config) {\n  const from = config.recovery_threshold;\n  const to = new_config.recovery_threshold;\n  if (to === undefined || from === to) {\n    return;\n  }\n\n  const service_info = \u0022public:ccf.gov.service.info\u0022;\n  const rawService = ccf.kv[service_info].get(getSingletonKvKey());\n  if (rawService === undefined) {\n    throw new Error(\u0022Service information could not be found\u0022);\n  }\n\n  const service = ccf.bufToJsonCompatible(rawService);\n\n  if (service.status === \u0022WaitingForRecoveryShares\u0022) {\n    throw new Error(\n      \u0060Cannot set recovery threshold if service is ${service.status}\u0060\n    );\n  } else if (service.status === \u0022Open\u0022) {\n    let activeRecoveryMembersCount = getActiveRecoveryMembersCount();\n    if (new_config.recovery_threshold \u003E activeRecoveryMembersCount) {\n      throw new Error(\n        \u0060Cannot set recovery threshold to ${new_config.recovery_threshold}: recovery threshold would be greater than the number of recovery members ${activeRecoveryMembersCount}\u0060\n      );\n    }\n  }\n}\n\nfunction checkReconfigurationType(config, new_config) {\n  const from = config.reconfiguration_type;\n  const to = new_config.reconfiguration_type;\n  if (from !== to \u0026\u0026 to !== undefined) {\n    if (\n      !(\n        (from === undefined || from === \u0022OneTransaction\u0022) \u0026\u0026\n        to === \u0022TwoTransaction\u0022\n      )\n    ) {\n      throw new Error(\n        \u0060Cannot change reconfiguration type from ${from} to ${to}.\u0060\n      );\n    }\n  }\n}\n\nfunction updateServiceConfig(new_config) {\n  const service_config_table = \u0022public:ccf.gov.service.config\u0022;\n  const rawConfig = ccf.kv[service_config_table].get(getSingletonKvKey());\n  if (rawConfig === undefined) {\n    throw new Error(\u0022Service configuration could not be found\u0022);\n  }\n  let config = ccf.bufToJsonCompatible(rawConfig);\n\n  // First run all checks\n  checkReconfigurationType(config, new_config);\n  checkRecoveryThreshold(config, new_config);\n\n  // Then all updates\n  if (new_config.reconfiguration_type !== undefined) {\n    config.reconfiguration_type = new_config.reconfiguration_type;\n  }\n\n  let need_recovery_threshold_refresh = false;\n  if (\n    new_config.recovery_threshold !== undefined \u0026\u0026\n    new_config.recovery_threshold !== config.recovery_threshold\n  ) {\n    config.recovery_threshold = new_config.recovery_threshold;\n    need_recovery_threshold_refresh = true;\n  }\n\n  ccf.kv[service_config_table].set(\n    getSingletonKvKey(),\n    ccf.jsonCompatibleToBuf(config)\n  );\n\n  if (need_recovery_threshold_refresh) {\n    ccf.node.triggerRecoverySharesRefresh();\n  }\n}\n\nconst actions = new Map([\n  [\n    \u0022set_constitution\u0022,\n    new Action(\n      function (args) {\n        checkType(args.constitution, \u0022string\u0022);\n      },\n      function (args, proposalId) {\n        ccf.kv[\u0022public:ccf.gov.constitution\u0022].set(\n          getSingletonKvKey(),\n          ccf.jsonCompatibleToBuf(args.constitution)\n        );\n\n        // Changing the constitution changes the semantics of any other open proposals, so invalidate them to avoid confusion or malicious vote modification\n        invalidateOtherOpenProposals(proposalId);\n      }\n    ),\n  ],\n  [\n    \u0022set_member\u0022,\n    new Action(\n      function (args) {\n        checkX509CertChain(args.cert, \u0022cert\u0022);\n        checkType(args.member_data, \u0022object?\u0022, \u0022member_data\u0022);\n        // Also check that public encryption key is well formed, if it exists\n      },\n\n      function (args) {\n        const memberId = ccf.pemToId(args.cert);\n        const rawMemberId = ccf.strToBuf(memberId);\n\n        ccf.kv[\u0022public:ccf.gov.members.certs\u0022].set(\n          rawMemberId,\n          ccf.strToBuf(args.cert)\n        );\n\n        if (args.encryption_pub_key == null) {\n          ccf.kv[\u0022public:ccf.gov.members.encryption_public_keys\u0022].delete(\n            rawMemberId\n          );\n        } else {\n          ccf.kv[\u0022public:ccf.gov.members.encryption_public_keys\u0022].set(\n            rawMemberId,\n            ccf.strToBuf(args.encryption_pub_key)\n          );\n        }\n\n        let member_info = {};\n        member_info.member_data = args.member_data;\n        member_info.status = \u0022Accepted\u0022;\n        ccf.kv[\u0022public:ccf.gov.members.info\u0022].set(\n          rawMemberId,\n          ccf.jsonCompatibleToBuf(member_info)\n        );\n\n        const rawSignature = ccf.kv[\u0022public:ccf.internal.signatures\u0022].get(\n          getSingletonKvKey()\n        );\n        if (rawSignature === undefined) {\n          ccf.kv[\u0022public:ccf.gov.members.acks\u0022].set(rawMemberId);\n        } else {\n          const signature = ccf.bufToJsonCompatible(rawSignature);\n          const ack = {};\n          ack.state_digest = signature.root;\n          ccf.kv[\u0022public:ccf.gov.members.acks\u0022].set(\n            rawMemberId,\n            ccf.jsonCompatibleToBuf(ack)\n          );\n        }\n      }\n    ),\n  ],\n  [\n    \u0022remove_member\u0022,\n    new Action(\n      function (args) {\n        checkX509CertChain(args.cert, \u0022cert\u0022);\n      },\n      function (args) {\n        const memberId = ccf.pemToId(args.cert);\n        const rawMemberId = ccf.strToBuf(memberId);\n        const rawMemberInfo = ccf.kv[\u0022public:ccf.gov.members.info\u0022].get(\n          rawMemberId\n        );\n        if (rawMemberInfo === undefined) {\n          return; // Idempotent\n        }\n\n        const memberInfo = ccf.bufToJsonCompatible(rawMemberInfo);\n        const isActiveMember = memberInfo.status == \u0022Active\u0022;\n\n        const isRecoveryMember = ccf.kv[\n          \u0022public:ccf.gov.members.encryption_public_keys\u0022\n        ].has(rawMemberId)\n          ? true\n          : false;\n\n        // If the member is an active recovery member, check that there\n        // would still be a sufficient number of recovery members left\n        // to recover the service\n        if (isActiveMember \u0026\u0026 isRecoveryMember) {\n          const rawConfig = ccf.kv[\u0022public:ccf.gov.service.config\u0022].get(\n            getSingletonKvKey()\n          );\n          if (rawConfig === undefined) {\n            throw new Error(\u0022Service configuration could not be found\u0022);\n          }\n\n          const config = ccf.bufToJsonCompatible(rawConfig);\n          const activeRecoveryMembersCountAfter =\n            getActiveRecoveryMembersCount() - 1;\n          if (activeRecoveryMembersCountAfter \u003C config.recovery_threshold) {\n            throw new Error(\n              \u0060Number of active recovery members (${activeRecoveryMembersCountAfter}) would be less than recovery threshold (${config.recovery_threshold})\u0060\n            );\n          }\n        }\n\n        ccf.kv[\u0022public:ccf.gov.members.info\u0022].delete(rawMemberId);\n        ccf.kv[\u0022public:ccf.gov.members.encryption_public_keys\u0022].delete(\n          rawMemberId\n        );\n        ccf.kv[\u0022public:ccf.gov.members.certs\u0022].delete(rawMemberId);\n        ccf.kv[\u0022public:ccf.gov.members.acks\u0022].delete(rawMemberId);\n        ccf.kv[\u0022public:ccf.gov.history\u0022].delete(rawMemberId);\n\n        if (isActiveMember \u0026\u0026 isRecoveryMember) {\n          // A retired recovery member should not have access to the private\n          // ledger going forward so rekey the ledger, issuing new shares to\n          // remaining active recovery members\n          ccf.node.triggerLedgerRekey();\n        }\n      }\n    ),\n  ],\n  [\n    \u0022set_member_data\u0022,\n    new Action(\n      function (args) {\n        checkType(args.member_id, \u0022string\u0022, \u0022member_id\u0022);\n        checkType(args.member_data, \u0022object\u0022, \u0022member_data\u0022);\n      },\n\n      function (args) {\n        let member_id = ccf.strToBuf(args.member_id);\n        let members_info = ccf.kv[\u0022public:ccf.gov.members.info\u0022];\n        let member_info = members_info.get(member_id);\n        if (member_info === undefined) {\n          throw new Error(\u0060Member ${args.member_id} does not exist\u0060);\n        }\n        let mi = ccf.bufToJsonCompatible(member_info);\n        mi.member_data = args.member_data;\n        members_info.set(member_id, ccf.jsonCompatibleToBuf(mi));\n      }\n    ),\n  ],\n  [\n    \u0022set_user\u0022,\n    new Action(\n      function (args) {\n        checkX509CertChain(args.cert, \u0022cert\u0022);\n        checkType(args.user_data, \u0022object?\u0022, \u0022user_data\u0022);\n      },\n      function (args) {\n        let userId = ccf.pemToId(args.cert);\n        let rawUserId = ccf.strToBuf(userId);\n\n        ccf.kv[\u0022public:ccf.gov.users.certs\u0022].set(\n          rawUserId,\n          ccf.strToBuf(args.cert)\n        );\n\n        if (args.user_data !== null \u0026\u0026 args.user_data !== undefined) {\n          ccf.kv[\u0022public:ccf.gov.users.info\u0022].set(\n            rawUserId,\n            ccf.jsonCompatibleToBuf(args.user_data)\n          );\n        } else {\n          ccf.kv[\u0022public:ccf.gov.users.info\u0022].delete(rawUserId);\n        }\n      }\n    ),\n  ],\n  [\n    \u0022remove_user\u0022,\n    new Action(\n      function (args) {\n        checkType(args.user_id, \u0022string\u0022, \u0022user_id\u0022);\n      },\n      function (args) {\n        const user_id = ccf.strToBuf(args.user_id);\n        ccf.kv[\u0022public:ccf.gov.users.certs\u0022].delete(user_id);\n        ccf.kv[\u0022public:ccf.gov.users.info\u0022].delete(user_id);\n      }\n    ),\n  ],\n  [\n    \u0022remove_user_by_cert\u0022,\n    new Action(\n      function (args) {\n        checkX509CertChain(args.cert, \u0022cert\u0022);\n      },\n      function (args) {\n        let userId = ccf.pemToId(args.cert);\n        let rawUserId = ccf.strToBuf(userId);\n\n        ccf.kv[\u0022public:ccf.gov.users.certs\u0022].delete(\n          rawUserId\n        );\n        ccf.kv[\u0022public:ccf.gov.users.info\u0022].delete(rawUserId);\n      }\n    ),\n  ],\n  [\n    \u0022set_user_data\u0022,\n    new Action(\n      function (args) {\n        checkType(args.user_id, \u0022string\u0022, \u0022user_id\u0022);\n        checkType(args.user_data, \u0022object?\u0022, \u0022user_data\u0022);\n      },\n      function (args) {\n        const userId = ccf.strToBuf(args.user_id);\n\n        if (args.user_data !== null \u0026\u0026 args.user_data !== undefined) {\n          let userInfo = {};\n          userInfo.user_data = args.user_data;\n          ccf.kv[\u0022public:ccf.gov.users.info\u0022].set(\n            userId,\n            ccf.jsonCompatibleToBuf(userInfo)\n          );\n        } else {\n          ccf.kv[\u0022public:ccf.gov.users.info\u0022].delete(userId);\n        }\n      }\n    ),\n  ],\n  [\n    \u0022set_recovery_threshold\u0022,\n    new Action(\n      function (args) {\n        checkType(args.recovery_threshold, \u0022integer\u0022, \u0022threshold\u0022);\n        checkBounds(args.recovery_threshold, 1, 254, \u0022threshold\u0022);\n      },\n      function (args) {\n        updateServiceConfig(args);\n      }\n    ),\n  ],\n  [\n    \u0022trigger_recovery_shares_refresh\u0022,\n    new Action(\n      function (args) {\n        checkNone(args);\n      },\n      function (args) {\n        ccf.node.triggerRecoverySharesRefresh();\n      }\n    ),\n  ],\n  [\n    \u0022trigger_ledger_rekey\u0022,\n    new Action(\n      function (args) {\n        checkNone(args);\n      },\n\n      function (args) {\n        ccf.node.triggerLedgerRekey();\n      }\n    ),\n  ],\n  [\n    \u0022transition_service_to_open\u0022,\n    new Action(\n      function (args) {\n        checkType(\n          args.next_service_identity,\n          \u0022string\u0022,\n          \u0022next service identity (PEM certificate)\u0022\n        );\n        checkX509CertChain(\n          args.next_service_identity,\n          \u0022next_service_identity\u0022\n        );\n\n        checkType(\n          args.previous_service_identity,\n          \u0022string?\u0022,\n          \u0022previous service identity (PEM certificate)\u0022\n        );\n        if (args.previous_service_identity !== undefined) {\n          checkX509CertChain(\n            args.previous_service_identity,\n            \u0022previous_service_identity\u0022\n          );\n        }\n      },\n\n      function (args) {\n        const service_info = \u0022public:ccf.gov.service.info\u0022;\n        const rawService = ccf.kv[service_info].get(getSingletonKvKey());\n        if (rawService === undefined) {\n          throw new Error(\u0022Service information could not be found\u0022);\n        }\n\n        const service = ccf.bufToJsonCompatible(rawService);\n\n        if (\n          service.status === \u0022Recovering\u0022 \u0026\u0026\n          (args.previous_service_identity === undefined ||\n            args.next_service_identity === undefined)\n        ) {\n          throw new Error(\n            \u0060Opening a recovering network requires both, the previous and the next service identity\u0060\n          );\n        }\n\n        const previous_identity =\n          args.previous_service_identity !== undefined\n            ? ccf.strToBuf(args.previous_service_identity)\n            : undefined;\n        const next_identity = ccf.strToBuf(args.next_service_identity);\n        ccf.node.transitionServiceToOpen(previous_identity, next_identity);\n      }\n    ),\n  ],\n  [\n    \u0022set_js_app\u0022,\n    new Action(\n      function (args) {\n        const bundle = args.bundle;\n        checkType(bundle, \u0022object\u0022, \u0022bundle\u0022);\n\n        let prefix = \u0022bundle.modules\u0022;\n        checkType(bundle.modules, \u0022array\u0022, prefix);\n        for (const [i, module] of bundle.modules.entries()) {\n          checkType(module, \u0022object\u0022, \u0060${prefix}[${i}]\u0060);\n          checkType(module.name, \u0022string\u0022, \u0060${prefix}[${i}].name\u0060);\n          checkType(module.module, \u0022string\u0022, \u0060${prefix}[${i}].module\u0060);\n        }\n\n        prefix = \u0022bundle.metadata\u0022;\n        checkType(bundle.metadata, \u0022object\u0022, prefix);\n        checkType(bundle.metadata.endpoints, \u0022object\u0022, \u0060${prefix}.endpoints\u0060);\n        for (const [url, endpoint] of Object.entries(\n          bundle.metadata.endpoints\n        )) {\n          checkType(endpoint, \u0022object\u0022, \u0060${prefix}.endpoints[\u0022${url}\u0022]\u0060);\n          for (const [method, info] of Object.entries(endpoint)) {\n            const prefix2 = \u0060${prefix}.endpoints[\u0022${url}\u0022][\u0022${method}\u0022]\u0060;\n            checkType(info, \u0022object\u0022, prefix2);\n            checkType(info.js_module, \u0022string\u0022, \u0060${prefix2}.js_module\u0060);\n            checkType(info.js_function, \u0022string\u0022, \u0060${prefix2}.js_function\u0060);\n            checkEnum(\n              info.mode,\n              [\u0022readwrite\u0022, \u0022readonly\u0022, \u0022historical\u0022],\n              \u0060${prefix2}.mode\u0060\n            );\n            checkEnum(\n              info.forwarding_required,\n              [\u0022sometimes\u0022, \u0022always\u0022, \u0022never\u0022],\n              \u0060${prefix2}.forwarding_required\u0060\n            );\n            checkType(info.openapi, \u0022object?\u0022, \u0060${prefix2}.openapi\u0060);\n            checkType(\n              info.openapi_hidden,\n              \u0022boolean?\u0022,\n              \u0060${prefix2}.openapi_hidden\u0060\n            );\n            checkType(\n              info.authn_policies,\n              \u0022array\u0022,\n              \u0060${prefix2}.authn_policies\u0060\n            );\n            for (const [i, policy] of info.authn_policies.entries()) {\n              checkType(policy, \u0022string\u0022, \u0060${prefix2}.authn_policies[${i}]\u0060);\n            }\n            if (!bundle.modules.some((m) =\u003E m.name === info.js_module)) {\n              throw new Error(\u0060module \u0027${info.js_module}\u0027 not found in bundle\u0060);\n            }\n          }\n        }\n        \n        checkType(\n          args.disable_bytecode_cache,\n          \u0022boolean?\u0022,\n          \u0022disable_bytecode_cache\u0022\n        );\n      },\n      function (args) {\n        const modulesMap = ccf.kv[\u0022public:ccf.gov.modules\u0022];\n        const modulesQuickJsBytecodeMap =\n          ccf.kv[\u0022public:ccf.gov.modules_quickjs_bytecode\u0022];\n        const modulesQuickJsVersionVal =\n          ccf.kv[\u0022public:ccf.gov.modules_quickjs_version\u0022];\n        const endpointsMap = ccf.kv[\u0022public:ccf.gov.endpoints\u0022];\n        modulesMap.clear();\n        endpointsMap.clear();\n\n        const bundle = args.bundle;\n        for (const module of bundle.modules) {\n          const path = \u0022/\u0022 \u002B module.name;\n          const pathBuf = ccf.strToBuf(path);\n          const moduleBuf = ccf.strToBuf(module.module);\n          modulesMap.set(pathBuf, moduleBuf);\n        }\n\n        if (args.disable_bytecode_cache) {\n          modulesQuickJsBytecodeMap.clear();\n          modulesQuickJsVersionVal.clear();\n        } else {\n          ccf.refreshAppBytecodeCache();\n        }\n\n        for (const [url, endpoint] of Object.entries(\n          bundle.metadata.endpoints\n        )) {\n          for (const [method, info] of Object.entries(endpoint)) {\n            const key = \u0060${method.toUpperCase()} ${url}\u0060;\n            const keyBuf = ccf.strToBuf(key);\n\n            info.js_module = \u0022/\u0022 \u002B info.js_module;\n            const infoBuf = ccf.jsonCompatibleToBuf(info);\n            endpointsMap.set(keyBuf, infoBuf);\n          }\n        }\n      }\n    ),\n  ],\n  [\n    \u0022remove_js_app\u0022,\n    new Action(\n      function (args) {},\n      function (args) {\n        const modulesMap = ccf.kv[\u0022public:ccf.gov.modules\u0022];\n        const modulesQuickJsBytecodeMap =\n          ccf.kv[\u0022public:ccf.gov.modules_quickjs_bytecode\u0022];\n        const modulesQuickJsVersionVal =\n          ccf.kv[\u0022public:ccf.gov.modules_quickjs_version\u0022];\n        const endpointsMap = ccf.kv[\u0022public:ccf.gov.endpoints\u0022];\n        modulesMap.clear();\n        modulesQuickJsBytecodeMap.clear();\n        modulesQuickJsVersionVal.clear();\n        endpointsMap.clear();\n      }\n    ),\n  ],\n  [\n    \u0022refresh_js_app_bytecode_cache\u0022,\n    new Action(\n      function (args) {},\n      function (args) {\n        ccf.refreshAppBytecodeCache();\n      }\n    ),\n  ],\n  [\n    \u0022set_ca_cert_bundle\u0022,\n    new Action(\n      function (args) {\n        checkType(args.name, \u0022string\u0022, \u0022name\u0022);\n        checkX509CertChain(args.cert_bundle, \u0022cert_bundle\u0022);\n      },\n      function (args) {\n        const name = args.name;\n        const bundle = args.cert_bundle;\n        const nameBuf = ccf.strToBuf(name);\n        const bundleBuf = ccf.jsonCompatibleToBuf(bundle);\n        ccf.kv[\u0022public:ccf.gov.tls.ca_cert_bundles\u0022].set(nameBuf, bundleBuf);\n      }\n    ),\n  ],\n  [\n    \u0022remove_ca_cert_bundle\u0022,\n    new Action(\n      function (args) {\n        checkType(args.name, \u0022string\u0022, \u0022name\u0022);\n      },\n      function (args) {\n        const name = args.name;\n        const nameBuf = ccf.strToBuf(name);\n        ccf.kv[\u0022public:ccf.gov.tls.ca_cert_bundles\u0022].delete(nameBuf);\n      }\n    ),\n  ],\n  [\n    \u0022set_jwt_issuer\u0022,\n    new Action(\n      function (args) {\n        checkType(args.issuer, \u0022string\u0022, \u0022issuer\u0022);\n        checkType(args.auto_refresh, \u0022boolean?\u0022, \u0022auto_refresh\u0022);\n        checkType(args.ca_cert_bundle_name, \u0022string?\u0022, \u0022ca_cert_bundle_name\u0022);\n        checkEnum(args.key_filter, [\u0022all\u0022, \u0022sgx\u0022], \u0022key_filter\u0022);\n        checkType(args.key_policy, \u0022object?\u0022, \u0022key_policy\u0022);\n        if (args.key_policy) {\n          checkType(\n            args.key_policy.sgx_claims,\n            \u0022object?\u0022,\n            \u0022key_policy.sgx_claims\u0022\n          );\n          if (args.key_policy.sgx_claims) {\n            for (const [name, value] of Object.entries(\n              args.key_policy.sgx_claims\n            )) {\n              checkType(value, \u0022string\u0022, \u0060key_policy.sgx_claims[\u0022${name}\u0022]\u0060);\n            }\n          }\n        }\n        checkType(args.jwks, \u0022object?\u0022, \u0022jwks\u0022);\n        if (args.jwks) {\n          checkJwks(args.jwks, \u0022jwks\u0022);\n        }\n        if (args.auto_refresh) {\n          if (!args.ca_cert_bundle_name) {\n            throw new Error(\n              \u0022ca_cert_bundle_name is missing but required if auto_refresh is true\u0022\n            );\n          }\n          let url;\n          try {\n            url = parseUrl(args.issuer);\n          } catch (e) {\n            throw new Error(\u0022issuer must be a URL if auto_refresh is true\u0022);\n          }\n          if (url.scheme != \u0022https\u0022) {\n            throw new Error(\n              \u0022issuer must be a URL starting with https:// if auto_refresh is true\u0022\n            );\n          }\n          if (url.query || url.fragment) {\n            throw new Error(\n              \u0022issuer must be a URL without query/fragment if auto_refresh is true\u0022\n            );\n          }\n        }\n      },\n      function (args) {\n        if (args.auto_refresh) {\n          const caCertBundleName = args.ca_cert_bundle_name;\n          const caCertBundleNameBuf = ccf.strToBuf(args.ca_cert_bundle_name);\n          if (\n            !ccf.kv[\u0022public:ccf.gov.tls.ca_cert_bundles\u0022].has(\n              caCertBundleNameBuf\n            )\n          ) {\n            throw new Error(\n              \u0060No CA cert bundle found with name \u0027${caCertBundleName}\u0027\u0060\n            );\n          }\n        }\n        const issuer = args.issuer;\n        const jwks = args.jwks;\n        delete args.jwks;\n        const metadata = args;\n        if (jwks) {\n          ccf.setJwtPublicSigningKeys(issuer, metadata, jwks);\n        }\n        const issuerBuf = ccf.strToBuf(issuer);\n        const metadataBuf = ccf.jsonCompatibleToBuf(metadata);\n        ccf.kv[\u0022public:ccf.gov.jwt.issuers\u0022].set(issuerBuf, metadataBuf);\n      }\n    ),\n  ],\n  [\n    \u0022set_jwt_public_signing_keys\u0022,\n    new Action(\n      function (args) {\n        checkType(args.issuer, \u0022string\u0022, \u0022issuer\u0022);\n        checkJwks(args.jwks, \u0022jwks\u0022);\n      },\n      function (args) {\n        const issuer = args.issuer;\n        const issuerBuf = ccf.strToBuf(issuer);\n        const metadataBuf = ccf.kv[\u0022public:ccf.gov.jwt.issuers\u0022].get(issuerBuf);\n        if (metadataBuf === undefined) {\n          throw new Error(\u0060issuer ${issuer} not found\u0060);\n        }\n        const metadata = ccf.bufToJsonCompatible(metadataBuf);\n        const jwks = args.jwks;\n        ccf.setJwtPublicSigningKeys(issuer, metadata, jwks);\n      }\n    ),\n  ],\n  [\n    \u0022remove_jwt_issuer\u0022,\n    new Action(\n      function (args) {\n        checkType(args.issuer, \u0022string\u0022, \u0022issuer\u0022);\n      },\n      function (args) {\n        const issuerBuf = ccf.strToBuf(args.issuer);\n        if (!ccf.kv[\u0022public:ccf.gov.jwt.issuers\u0022].delete(issuerBuf)) {\n          return;\n        }\n        ccf.removeJwtPublicSigningKeys(args.issuer);\n      }\n    ),\n  ],\n  [\n     // custom logic specific to ACL\n    \u0022add_node_code\u0022,\n    new Action(\n      function (args) {\n        checkType(args.new_code_id, \u0022string\u0022, \u0022new_code_id\u0022);\n        checkType(args.existing_code_id, \u0022string\u0022, \u0022existing_code_id\u0022);\n      },\n      function (args, proposalId) {\n        const existingCode = ccf.kv[\u0022public:ccf.gov.nodes.code_ids\u0022].get(\n          ccf.strToBuf(args.existing_code_id)\n        );\n        if (existingCode === undefined) {\n          throw new Error(\u0060Code required to exist is not present: ${args.existing_code_id}\u0060);\n        }\n\n        const newCodeId = ccf.strToBuf(args.new_code_id);\n        const ALLOWED = ccf.jsonCompatibleToBuf(\u0022AllowedToJoin\u0022);\n        ccf.kv[\u0022public:ccf.gov.nodes.code_ids\u0022].set(newCodeId, ALLOWED);\n\n        // Adding a new allowed code ID changes the semantics of any other open proposals, so invalidate them to avoid confusion or malicious vote modification\n        invalidateOtherOpenProposals(proposalId);\n      }\n    ),\n  ],\n  [\n    \u0022set_node_data\u0022,\n    new Action(\n      function (args) {\n        checkEntityId(args.node_id, \u0022node_id\u0022);\n      },\n      function (args) {\n        let node_id = ccf.strToBuf(args.node_id);\n        let nodes_info = ccf.kv[\u0022public:ccf.gov.nodes.info\u0022];\n        let node_info = nodes_info.get(node_id);\n        if (node_info === undefined) {\n          throw new Error(\u0060Node ${node_id} does not exist\u0060);\n        }\n        let ni = ccf.bufToJsonCompatible(node_info);\n        ni.node_data = args.node_data;\n        nodes_info.set(node_id, ccf.jsonCompatibleToBuf(ni));\n      }\n    ),\n  ],\n  [\n    \u0022transition_node_to_trusted\u0022,\n    new Action(\n      function (args) {\n        checkEntityId(args.node_id, \u0022node_id\u0022);\n        checkType(args.valid_from, \u0022string\u0022, \u0022valid_from\u0022);\n        if (args.validity_period_days !== undefined) {\n          checkType(\n            args.validity_period_days,\n            \u0022integer\u0022,\n            \u0022validity_period_days\u0022\n          );\n          checkBounds(\n            args.validity_period_days,\n            1,\n            null,\n            \u0022validity_period_days\u0022\n          );\n        }\n      },\n      function (args) {\n        const rawConfig = ccf.kv[\u0022public:ccf.gov.service.config\u0022].get(\n          getSingletonKvKey()\n        );\n        if (rawConfig === undefined) {\n          throw new Error(\u0022Service configuration could not be found\u0022);\n        }\n        const serviceConfig = ccf.bufToJsonCompatible(rawConfig);\n        const node = ccf.kv[\u0022public:ccf.gov.nodes.info\u0022].get(\n          ccf.strToBuf(args.node_id)\n        );\n        if (node === undefined) {\n          throw new Error(\u0060No such node: ${args.node_id}\u0060);\n        }\n        const nodeInfo = ccf.bufToJsonCompatible(node);\n        if (nodeInfo.status === \u0022Pending\u0022) {\n          nodeInfo.status =\n            serviceConfig.reconfiguration_type == \u0022TwoTransaction\u0022\n              ? \u0022Learner\u0022\n              : \u0022Trusted\u0022;\n          nodeInfo.ledger_secret_seqno =\n            ccf.network.getLatestLedgerSecretSeqno();\n          ccf.kv[\u0022public:ccf.gov.nodes.info\u0022].set(\n            ccf.strToBuf(args.node_id),\n            ccf.jsonCompatibleToBuf(nodeInfo)\n          );\n\n          // Also generate and record service-endorsed node certificate from node CSR\n          if (\n            nodeInfo.certificate_signing_request !== undefined \u0026\u0026\n            serviceConfig.consensus !== \u0022BFT\u0022\n          ) {\n            // Note: CSR and node certificate validity config are only present from 2.x\n            const default_validity_period_days = 365;\n            const max_allowed_cert_validity_period_days =\n              serviceConfig.maximum_node_certificate_validity_days ??\n              default_validity_period_days;\n            if (\n              args.validity_period_days !== undefined \u0026\u0026\n              args.validity_period_days \u003E max_allowed_cert_validity_period_days\n            ) {\n              throw new Error(\n                \u0060Validity period ${args.validity_period_days} is not allowed: max allowed is ${max_allowed_cert_validity_period_days}\u0060\n              );\n            }\n\n            const endorsed_node_cert = ccf.network.generateEndorsedCertificate(\n              nodeInfo.certificate_signing_request,\n              args.valid_from,\n              args.validity_period_days ?? max_allowed_cert_validity_period_days\n            );\n            ccf.kv[\u0022public:ccf.gov.nodes.endorsed_certificates\u0022].set(\n              ccf.strToBuf(args.node_id),\n              ccf.strToBuf(endorsed_node_cert)\n            );\n          }\n        }\n      }\n    ),\n  ],\n  [\n    // custom logic for ACL\n    \u0022remove_node_code\u0022,\n    new Action(\n      function (args) {\n        checkType(args.code_id_to_remove, \u0022string\u0022, \u0022code_id_to_remove\u0022);\n        checkType(args.remaining_code_id, \u0022string\u0022, \u0022remaining_code_id\u0022);\n      },\n      function (args) {\n        const remainingCode = ccf.kv[\u0022public:ccf.gov.nodes.code_ids\u0022].get(\n          ccf.strToBuf(args.remaining_code_id)\n        );\n        if (remainingCode === undefined) {\n          throw new Error(\u0060Code required to remain is not present: ${args.remaining_code_id}\u0060);\n        }\n\n        const codeIdToRemove = ccf.strToBuf(args.code_id_to_remove);\n        ccf.kv[\u0022public:ccf.gov.nodes.code_ids\u0022].delete(codeIdToRemove);\n      }\n    ),\n  ],\n  [\n    \u0022remove_node\u0022,\n    new Action(\n      function (args) {\n        checkEntityId(args.node_id, \u0022node_id\u0022);\n      },\n      function (args) {\n        const rawConfig = ccf.kv[\u0022public:ccf.gov.service.config\u0022].get(\n          getSingletonKvKey()\n        );\n        if (rawConfig === undefined) {\n          throw new Error(\u0022Service configuration could not be found\u0022);\n        }\n        const serviceConfig = ccf.bufToJsonCompatible(rawConfig);\n        const node = ccf.kv[\u0022public:ccf.gov.nodes.info\u0022].get(\n          ccf.strToBuf(args.node_id)\n        );\n        if (node === undefined) {\n          return;\n        }\n        const node_obj = ccf.bufToJsonCompatible(node);\n        if (node_obj.status === \u0022Pending\u0022) {\n          ccf.kv[\u0022public:ccf.gov.nodes.info\u0022].delete(\n            ccf.strToBuf(args.node_id)\n          );\n        } else {\n          node_obj.status =\n            serviceConfig.reconfiguration_type === \u0022TwoTransaction\u0022\n              ? \u0022Retiring\u0022\n              : \u0022Retired\u0022;\n          ccf.kv[\u0022public:ccf.gov.nodes.info\u0022].set(\n            ccf.strToBuf(args.node_id),\n            ccf.jsonCompatibleToBuf(node_obj)\n          );\n        }\n      }\n    ),\n  ],\n  [\n    \u0022set_node_certificate_validity\u0022,\n    new Action(\n      function (args) {\n        checkEntityId(args.node_id, \u0022node_id\u0022);\n        checkType(args.valid_from, \u0022string\u0022, \u0022valid_from\u0022);\n        if (args.validity_period_days !== undefined) {\n          checkType(\n            args.validity_period_days,\n            \u0022integer\u0022,\n            \u0022validity_period_days\u0022\n          );\n          checkBounds(\n            args.validity_period_days,\n            1,\n            null,\n            \u0022validity_period_days\u0022\n          );\n        }\n      },\n      function (args) {\n        const node = ccf.kv[\u0022public:ccf.gov.nodes.info\u0022].get(\n          ccf.strToBuf(args.node_id)\n        );\n        if (node === undefined) {\n          throw new Error(\u0060No such node: ${args.node_id}\u0060);\n        }\n        const nodeInfo = ccf.bufToJsonCompatible(node);\n        if (nodeInfo.status !== \u0022Trusted\u0022) {\n          throw new Error(\u0060Node ${args.node_id} is not trusted\u0060);\n        }\n\n        setNodeCertificateValidityPeriod(\n          args.node_id,\n          nodeInfo,\n          args.valid_from,\n          args.validity_period_days\n        );\n      }\n    ),\n  ],\n  [\n    \u0022set_all_nodes_certificate_validity\u0022,\n    new Action(\n      function (args) {\n        checkType(args.valid_from, \u0022string\u0022, \u0022valid_from\u0022);\n        if (args.validity_period_days !== undefined) {\n          checkType(\n            args.validity_period_days,\n            \u0022integer\u0022,\n            \u0022validity_period_days\u0022\n          );\n          checkBounds(\n            args.validity_period_days,\n            1,\n            null,\n            \u0022validity_period_days\u0022\n          );\n        }\n      },\n      function (args) {\n        ccf.kv[\u0022public:ccf.gov.nodes.info\u0022].forEach((v, k) =\u003E {\n          const nodeId = ccf.bufToStr(k);\n          const nodeInfo = ccf.bufToJsonCompatible(v);\n          if (nodeInfo.status === \u0022Trusted\u0022) {\n            setNodeCertificateValidityPeriod(\n              nodeId,\n              nodeInfo,\n              args.valid_from,\n              args.validity_period_days\n            );\n          }\n        });\n      }\n    ),\n  ],\n  [\n    \u0022set_service_certificate_validity\u0022,\n    new Action(\n      function (args) {\n        checkType(args.valid_from, \u0022string\u0022, \u0022valid_from\u0022);\n        if (args.validity_period_days !== undefined) {\n          checkType(\n            args.validity_period_days,\n            \u0022integer\u0022,\n            \u0022validity_period_days\u0022\n          );\n          checkBounds(\n            args.validity_period_days,\n            1,\n            null,\n            \u0022validity_period_days\u0022\n          );\n        }\n      },\n      function (args) {\n        setServiceCertificateValidityPeriod(\n          args.valid_from,\n          args.validity_period_days\n        );\n      }\n    ),\n  ],\n  [\n    \u0022set_service_configuration\u0022,\n    new Action(\n      function (args) {\n        for (var key in args) {\n          if (key !== \u0022reconfiguration_type\u0022 \u0026\u0026 key !== \u0022recovery_threshold\u0022) {\n            throw new Error(\n              \u0060Cannot change ${key} via set_service_configuration.\u0060\n            );\n          }\n        }\n        checkType(args.reconfiguration_type, \u0022string?\u0022, \u0022reconfiguration type\u0022);\n        checkType(args.recovery_threshold, \u0022integer?\u0022, \u0022recovery threshold\u0022);\n        checkBounds(args.recovery_threshold, 1, 254, \u0022recovery threshold\u0022);\n      },\n      function (args) {\n        updateServiceConfig(args);\n      }\n    ),\n  ],\n  [\n    \u0022trigger_ledger_chunk\u0022,\n    new Action(\n      function (args) {},\n      function (args, proposalId) {\n        ccf.node.triggerLedgerChunk();\n      }\n    ),\n  ],\n  [\n    \u0022trigger_snapshot\u0022,\n    new Action(\n      function (args) {},\n      function (args, proposalId) {\n        ccf.node.triggerSnapshot();\n      }\n    ),\n  ],\n  [\n    \u0022set_service_principal\u0022,\n    new Action(\n      function (args) {\n        checkType(args.id, \u0022string\u0022, \u0022id\u0022);\n        checkType(args.data, \u0022object\u0022, \u0022data\u0022);\n      },\n      function (args) {\n        ccf.kv[\u0022public:ccf.gov.service_principals\u0022].set(\n          ccf.strToBuf(args.id),\n          ccf.jsonCompatibleToBuf(args.data)\n        );\n      }\n    ),\n  ],\n  [\n    \u0022remove_service_principal\u0022,\n    new Action(\n      function (args) {\n        checkType(args.id, \u0022string\u0022, \u0022id\u0022);\n      },\n      function (args) {\n        ccf.kv[\u0022public:ccf.gov.service_principals\u0022].delete(\n          ccf.strToBuf(args.id)\n        );\n      }\n    ),\n  ],\n]);\nfunction getMemberInfo(memberId) {\n  const key = ccf.strToBuf(memberId);\n  const value = ccf.kv[\u0022public:ccf.gov.members.info\u0022].get(key);\n  const info = ccf.bufToJsonCompatible(value);\n  return info;\n}\n\n// Returns true if the member is a recovery member.\nfunction isRecoveryMember(memberId) {\n  const info = getMemberInfo(memberId);\n  if (info.member_data.encryption_pub_key) {\n    return true;\n  }\n  return false;\n}\n\n// Defines which of the members are operators.\nfunction isOperator(memberId) {\n  // // Operators cannot be recovery members.\n  // if (isRecoveryMember(memberId)) {\n  //   return false;\n  // }\n  const info = getMemberInfo(memberId);\n  return info.member_data.is_operator;\n}\n\n// Defines actions that can be passed with sole operator input.\nfunction canOperatorPass(action) {\n  // To enable code upgrades and disaster recovery for Public Preview, we\u0027ve given the\n  // operator member some additional privileges.\n  // 1. add/remove node code are required for code upgrades.\n  // 2. set_constitution to replace this constitution with a \u0022correct\u0022 one easily later on.\n  // 3. set_member to add a new member for privileged operations when we use MHSM keys.\n  const allowedOperatorActions = [\n    \u0022add_node_code\u0022, // Remove\n    \u0022remove_ca_cert_bundle\u0022,\n    \u0022remove_jwt_issuer\u0022,\n    \u0022remove_node\u0022,\n    \u0022remove_node_code\u0022, // Remove\n    \u0022remove_service_principal\u0022,\n    \u0022remove_user\u0022,\n    \u0022remove_user_by_cert\u0022,\n    \u0022set_ca_cert_bundle\u0022,\n    \u0022set_constitution\u0022, // Remove\n    \u0022set_js_app\u0022,\n    \u0022set_jwt_issuer\u0022,\n    \u0022set_jwt_public_signing_keys\u0022,\n    \u0022set_member\u0022, // Remove,\n    \u0022set_node_certificate_validity\u0022,\n    \u0022set_node_data\u0022,\n    \u0022set_service_certificate_validity\u0022,\n    \u0022set_service_configuration\u0022,\n    \u0022set_service_principal\u0022,\n    \u0022set_user\u0022,\n    \u0022set_user_data\u0022,\n    \u0022transition_node_to_trusted\u0022,\n    \u0022transition_service_to_open\u0022\n  ];\n\n  if (allowedOperatorActions.includes(action.name)) {\n    return true;\n  }\n  // Additionally, operators can add or retire other operators.\n  if (action.name === \u0022set_member\u0022) {\n    const memberData = action.args[\u0022member_data\u0022];\n    if (memberData \u0026\u0026 memberData.is_operator) {\n      return true;\n    }\n  } else if (action.name === \u0022remove_member\u0022) {\n    const memberId = ccf.pemToId(action.args.cert);\n    if (isOperator(memberId)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function resolve(proposal, proposerId, votes) {\n  const actions = JSON.parse(proposal)[\u0022actions\u0022];\n\n  // Count member votes.\n  const memberVoteCount = votes.filter(\n    (v) =\u003E v.vote \u0026\u0026 !isOperator(v.member_id)\n  ).length;\n\n  // Count active members, excluding operators.\n  let activeMemberCount = 0;\n  ccf.kv[\u0022public:ccf.gov.members.info\u0022].forEach((value, key) =\u003E {\n    const memberId = ccf.bufToStr(key);\n    const info = ccf.bufToJsonCompatible(value);\n    if (info.status === \u0022Active\u0022 \u0026\u0026 !isOperator(memberId)) {\n      activeMemberCount\u002B\u002B;\n    }\n  });\n\n  // A proposal is an operator change if it\u0027s only applying operator actions.\n  const isOperatorChange = actions.every(canOperatorPass);\n\n  // A majority of members can always accept a proposal.\n  if (memberVoteCount \u003E Math.floor(activeMemberCount / 2)) {\n    return \u0022Accepted\u0022;\n  }\n\n  // Operators proposing operator changes can accept them without a vote.\n  if (isOperatorChange \u0026\u0026 isOperator(proposerId)) {\n    return \u0022Accepted\u0022;\n  }\n\n  return \u0022Open\u0022;\n}\nexport function apply(proposal, proposalId) {\n  const proposed_actions = JSON.parse(proposal)[\u0022actions\u0022];\n  for (const proposed_action of proposed_actions) {\n    const definition = actions.get(proposed_action.name);\n    definition.apply(proposed_action.args, proposalId);\n  }\n}"
      }
    },
    {
      "RequestUri": "https://fake.confidential-ledger.azure.com/app/enclaveQuotes?api-version=2022-05-13",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azsdk-python-confidentialledger/1.0.1 Python/3.8.10 (Linux-5.10.102.1-microsoft-standard-WSL2-x86_64-with-glibc2.29)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Content-Length": "28962",
        "Content-Type": "application/json",
        "x-ms-ccf-transaction-id": "8.29636"
      },
      "ResponseBody": {
        "currentNodeId": "ab835a731a3ec9113fbbac6411b2573eb4d36f107d4b1e0046c1cf71c35fc665",
        "enclaveQuotes": {
          "371ef36781b3268ae7f32f4bb1624ff3cb4d88a969e4ca70c1c50d7b2507445e": {
            "mrenclave": "ad305a2a10bcd49eb3b6c3cc5430b45780b29d4fe98377218d5257becc223d02",
            "nodeId": "371ef36781b3268ae7f32f4bb1624ff3cb4d88a969e4ca70c1c50d7b2507445e",
            "quoteVersion": "OE_SGX_v1",
            "raw": ""
          },
          "8b9273cc406cc8df4021f9ce5149248df6f182c9368a283e9b876c116ea2a2f3": {
            "mrenclave": "ad305a2a10bcd49eb3b6c3cc5430b45780b29d4fe98377218d5257becc223d02",
            "nodeId": "8b9273cc406cc8df4021f9ce5149248df6f182c9368a283e9b876c116ea2a2f3",
            "quoteVersion": "OE_SGX_v1",
            "raw": "030002000000000008000d00939a7233f79c4ca9940a0db3957f0607460b393708be080ad2fb1cf7749969720000000013130207ff8006000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000700000000000000ad305a2a10bcd49eb3b6c3cc5430b45780b29d4fe98377218d5257becc223d020000000000000000000000000000000000000000000000000000000000000000276b164665c6dc148bd1dd46bb70541e1a217b28ceeccfe8918931d9c6b3b1f200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000448951b208fed7aadeffba021a92ec61d4edd2107ed85da5b926d1928d0f63b000000000000000000000000000000000000000000000000000000000000000004410000081f21e94a9ad9028b31d0a185954d573c40b881f349eca3018582729e35d4511f7cb3d5656b5763f1af0a01d231abf1c498302d5c7d78b1a11c80f58289cc764135e2b83e1ab572fc34a75b88bc02afe338f6de8c6b947452f71c1d1482795c37dd2af5eec86e8e1215db505beaa6aa19b2497550415cfbaabb300203efd342913130207ff80060000000000000000000000000000000000000000000000000000000000000000000000000000000000150000000000000007000000000000008ce58685be36e46187c233c7e99ed6fe75dbb33f7567ada217b077ecd8cf82f900000000000000000000000000000000000000000000000000000000000000008c4f5775d796503e96137f77c68a829a0056ac8ded70140b081b094490c57bff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000099767bb6e69a0f9a34299a59e4483d91abf18c4ec6c8d97f67afb1bcd817b5ba00000000000000000000000000000000000000000000000000000000000000004618580444a4f14449defbf7b7bfd7b146b55c958ac1bd9bcbdbdf128e09c36047936cb022ea40d15e3d8424a934a8849b3f21144008bbeea9cd7c79d112e1fc2000000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0500dc0d00002d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949456a54434342444f674177494241674955477277536c776a7147643852424d79586e5230366a72545443394177436759494b6f5a497a6a3045417749770a6354456a4d4345474131554541777761535735305a577767553064594946424453794251636d396a5a584e7a6233496751304578476a415942674e5642416f4d0a45556c756447567349454e76636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155450a4341774351304578437a414a42674e5642415954416c56544d423458445449794d4455774e6a457a4d7a55774d6c6f58445449354d4455774e6a457a4d7a55770a4d6c6f77634445694d434147413155454177775a535735305a5777675530645949464244537942445a584a3061575a70593246305a5445614d426747413155450a43677752535735305a577767513239796347397959585270623234784644415342674e564241634d43314e68626e526849454e7359584a684d517377435159440a5651514944414a445154454c4d416b474131554542684d4356564d775754415442676371686b6a4f5051494242676771686b6a4f50514d4242774e43414152430a713966494b4474636a343236392f64506f566d495736726b452b4a72465670504935496e4f48445239523646547a6d6e514179624b77423567314246726b65790a717a724b6d614d53757775446d596633484a64426f3449437144434341715177487759445652306a42426777466f4155304f6971326e58582b53354a463567380a6578526c304e587957553077624159445652306642475577597a42686f462b6758595a626148523063484d364c79396863476b7564484a316333526c5a484e6c0a636e5a705932567a4c6d6c75644756734c6d4e766253397a5a3367765932567964476c6d61574e6864476c76626939324d7939775932746a636d772f593245390a63484a765932567a633239794a6d56755932396b6157356e5057526c636a416442674e564851344546675155544c72764148312f4d75794c426d377630645a4b0a4e70666d4977307744675944565230504151482f42415144416762414d41774741315564457745422f7751434d4141776767485542676b71686b69472b4530420a44514545676748464d4949427754416542676f71686b69472b45304244514542424241525954313464492b4b536258675252557639566a674d4949425a41594b0a4b6f5a496876684e41513042416a4343415651774541594c4b6f5a496876684e4151304241674543415245774541594c4b6f5a496876684e41513042416749430a415245774541594c4b6f5a496876684e4151304241674d43415149774541594c4b6f5a496876684e4151304241675143415151774541594c4b6f5a496876684e0a4151304241675543415145774551594c4b6f5a496876684e4151304241675943416743414d42414743797147534962345451454e41514948416745474d4241470a43797147534962345451454e41514949416745414d42414743797147534962345451454e4151494a416745414d42414743797147534962345451454e4151494b0a416745414d42414743797147534962345451454e4151494c416745414d42414743797147534962345451454e4151494d416745414d42414743797147534962340a5451454e4151494e416745414d42414743797147534962345451454e4151494f416745414d42414743797147534962345451454e41514950416745414d4241470a43797147534962345451454e41514951416745414d42414743797147534962345451454e415149524167454c4d42384743797147534962345451454e415149530a4242415245514945415941474141414141414141414141414d42414743697147534962345451454e41514d45416741414d42514743697147534962345451454e0a4151514542674351627455414144415042676f71686b69472b45304244514546436745414d416f4743437147534d343942414d43413067414d455543495144560a593561654369767042756b734878736b653431766b53616f4968454445424731374336534552447669674967625357476634612b5845716c575477784d576e2f0a7a51644e5a3774754270677a7a434169554e694b3243513d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436d444343416a36674177494241674956414e446f71747031312f6b7553526559504873555a644456386c6c4e4d416f4743437147534d343942414d430a4d476778476a415942674e5642414d4d45556c756447567349464e48574342536232393049454e424d526f77474159445651514b4442464a626e526c624342440a62334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e424d5173770a435159445651514745774a56557a4165467730784f4441314d6a45784d4455774d5442614677307a4d7a41314d6a45784d4455774d5442614d484578497a41680a42674e5642414d4d476b6c756447567349464e48574342515130736755484a765932567a6332397949454e424d526f77474159445651514b4442464a626e526c0a6243424462334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e420a4d517377435159445651514745774a56557a425a4d424d4742797147534d34394167454743437147534d34394177454841304941424c39712b4e4d7032494f670a74646c31626b2f75575a352b5447516d38614369387a373866732b664b435133642b75447a586e56544154325a68444369667949754a77764e33774e427039690a484253534d4a4d4a72424f6a6762737767626777487759445652306a42426777466f4155496d554d316c71644e496e7a6737535655723951477a6b6e427177770a556759445652306642457377535442486f45576751345a426148523063484d364c79396a5a584a3061575a70593246305a584d7564484a316333526c5a484e6c0a636e5a705932567a4c6d6c75644756734c6d4e766253394a626e526c62464e4857464a76623352445153356b5a584977485159445652304f42425945464e446f0a71747031312f6b7553526559504873555a644456386c6c4e4d41344741315564447745422f77514541774942426a415342674e5648524d4241663845434441470a4151482f416745414d416f4743437147534d343942414d43413067414d4555434951434a6754627456714f795a316d336a716941584d365159613672357357530a34792f4737793875494a4778647749675271507642534b7a7a516167424c517135733541373070646f6961524a387a2f3075447a344e675639316b3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436a7a4343416a53674177494241674955496d554d316c71644e496e7a6737535655723951477a6b6e42717777436759494b6f5a497a6a3045417749770a614445614d4267474131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e760a636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a0a42674e5642415954416c56544d423458445445344d4455794d5445774e4455784d466f58445451354d54497a4d54497a4e546b314f566f77614445614d4267470a4131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e76636e4276636d46300a615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a42674e56424159540a416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a3044415163445167414543366e45774d4449595a4f6a2f69505773437a61454b69370a314f694f534c52466857476a626e42564a66566e6b59347533496a6b4459594c304d784f346d717379596a6c42616c54565978465032734a424b357a6c4b4f420a757a43427544416642674e5648534d4547444157674251695a517a575770303069664f44744a5653763141624f5363477244425342674e5648523845537a424a0a4d45656752614244686b466f64485277637a6f764c324e6c636e52705a6d6c6a5958526c63793530636e567a6447566b63325679646d6c6a5a584d75615735300a5a577775593239744c306c756447567355306459556d397664454e424c6d526c636a416442674e564851344546675155496d554d316c71644e496e7a673753560a55723951477a6b6e4271777744675944565230504151482f42415144416745474d42494741315564457745422f7751494d4159424166384341514577436759490a4b6f5a497a6a3045417749445351417752674968414f572f35516b522b533943695344634e6f6f774c7550524c735747662f59693747535839344267775477670a41694541344a306c72486f4d732b586f356f2f7358364f39515778485241765a55474f6452513763767152586171493d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a0001000000000000000100000000000000100000000000000020000000000000007367785f7265706f72745f64617461008b9273cc406cc8df4021f9ce5149248df6f182c9368a283e9b876c116ea2a2f3"
          },
          "ab835a731a3ec9113fbbac6411b2573eb4d36f107d4b1e0046c1cf71c35fc665": {
            "mrenclave": "ad305a2a10bcd49eb3b6c3cc5430b45780b29d4fe98377218d5257becc223d02",
            "nodeId": "ab835a731a3ec9113fbbac6411b2573eb4d36f107d4b1e0046c1cf71c35fc665",
            "quoteVersion": "OE_SGX_v1",
            "raw": "030002000000000008000d00939a7233f79c4ca9940a0db3957f060799b5acc42ee79e70babcc6a32cf342600000000013130207ff8006000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000700000000000000ad305a2a10bcd49eb3b6c3cc5430b45780b29d4fe98377218d5257becc223d020000000000000000000000000000000000000000000000000000000000000000276b164665c6dc148bd1dd46bb70541e1a217b28ceeccfe8918931d9c6b3b1f2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000296b9f76c8f822c3e6b5f40b2c59ca2706a4ca128893e004780928e6b148a8d00000000000000000000000000000000000000000000000000000000000000004410000067b66a72869643bfb71f659f6062224c38573b49506cce98b0bc9de2eeb73fe8c4c8d5847b6f4ea448744614a4a6efba3fcd49777e6faca44a74484cc053fcf9a916d8d7fd6282b51794fedd31abf58cb864d61abd27ce427157cbf38a7abb08f14672354bfaf2f8442a4260b75cfb0315733ecde1eff43f38be3311d43a370113130207ff80060000000000000000000000000000000000000000000000000000000000000000000000000000000000150000000000000007000000000000008ce58685be36e46187c233c7e99ed6fe75dbb33f7567ada217b077ecd8cf82f900000000000000000000000000000000000000000000000000000000000000008c4f5775d796503e96137f77c68a829a0056ac8ded70140b081b094490c57bff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067a8477babeca08f5c95bf5ae486191ae7fbaac3469a230f6b91ac1548fab8b700000000000000000000000000000000000000000000000000000000000000009dfc866526bec649968b9785e181eea2ea4b572289784bdb08a8d4ff8f8cd18111e624205614cf9f3cd30efe0e0cb829b30ae79904f65629e8a7d8e6be0ff4a52000000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0500dc0d00002d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949456a54434342444f67417749424167495550772b2f6d71794b7837515a424b484658635270586e43706b776777436759494b6f5a497a6a3045417749770a6354456a4d4345474131554541777761535735305a577767553064594946424453794251636d396a5a584e7a6233496751304578476a415942674e5642416f4d0a45556c756447567349454e76636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155450a4341774351304578437a414a42674e5642415954416c56544d423458445449794d4463774e7a45304d6a51774e316f58445449354d4463774e7a45304d6a51770a4e316f77634445694d434147413155454177775a535735305a5777675530645949464244537942445a584a3061575a70593246305a5445614d426747413155450a43677752535735305a577767513239796347397959585270623234784644415342674e564241634d43314e68626e526849454e7359584a684d517377435159440a5651514944414a445154454c4d416b474131554542684d4356564d775754415442676371686b6a4f5051494242676771686b6a4f50514d4242774e43414153630a63666f4d6f7a372b596c6a74544d34424f57643233314a38634e4c5331544f3073546f3662796656474766776d746c596c6237354f77394f79463669784a55570a5354545273715062564b594b582b4f756f4c56596f3449437144434341715177487759445652306a42426777466f4155304f6971326e58582b53354a463567380a6578526c304e587957553077624159445652306642475577597a42686f462b6758595a626148523063484d364c79396863476b7564484a316333526c5a484e6c0a636e5a705932567a4c6d6c75644756734c6d4e766253397a5a3367765932567964476c6d61574e6864476c76626939324d7939775932746a636d772f593245390a63484a765932567a633239794a6d56755932396b6157356e5057526c636a416442674e564851344546675155332b6d353170416f472b7754664c7569784271380a417576336c33557744675944565230504151482f42415144416762414d41774741315564457745422f7751434d4141776767485542676b71686b69472b4530420a44514545676748464d4949427754416542676f71686b69472b453042445145424242434c7771777a37344155447377304d476b316f38562b4d4949425a41594b0a4b6f5a496876684e41513042416a4343415651774541594c4b6f5a496876684e4151304241674543415245774541594c4b6f5a496876684e41513042416749430a415245774541594c4b6f5a496876684e4151304241674d43415149774541594c4b6f5a496876684e4151304241675143415151774541594c4b6f5a496876684e0a4151304241675543415145774551594c4b6f5a496876684e4151304241675943416743414d42414743797147534962345451454e41514948416745474d4241470a43797147534962345451454e41514949416745414d42414743797147534962345451454e4151494a416745414d42414743797147534962345451454e4151494b0a416745414d42414743797147534962345451454e4151494c416745414d42414743797147534962345451454e4151494d416745414d42414743797147534962340a5451454e4151494e416745414d42414743797147534962345451454e4151494f416745414d42414743797147534962345451454e41514950416745414d4241470a43797147534962345451454e41514951416745414d42414743797147534962345451454e415149524167454c4d42384743797147534962345451454e415149530a4242415245514945415941474141414141414141414141414d42414743697147534962345451454e41514d45416741414d42514743697147534962345451454e0a4151514542674351627455414144415042676f71686b69472b45304244514546436745414d416f4743437147534d343942414d43413067414d455543494373410a554d7a746155636f3052716254796877565033696d552f50305358433778316d377777435a44556b41694541314c714a7a414768416f725276444f48484a68620a492b347872696d68616132764f69444756376e527050673d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436d444343416a36674177494241674956414e446f71747031312f6b7553526559504873555a644456386c6c4e4d416f4743437147534d343942414d430a4d476778476a415942674e5642414d4d45556c756447567349464e48574342536232393049454e424d526f77474159445651514b4442464a626e526c624342440a62334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e424d5173770a435159445651514745774a56557a4165467730784f4441314d6a45784d4455774d5442614677307a4d7a41314d6a45784d4455774d5442614d484578497a41680a42674e5642414d4d476b6c756447567349464e48574342515130736755484a765932567a6332397949454e424d526f77474159445651514b4442464a626e526c0a6243424462334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e420a4d517377435159445651514745774a56557a425a4d424d4742797147534d34394167454743437147534d34394177454841304941424c39712b4e4d7032494f670a74646c31626b2f75575a352b5447516d38614369387a373866732b664b435133642b75447a586e56544154325a68444369667949754a77764e33774e427039690a484253534d4a4d4a72424f6a6762737767626777487759445652306a42426777466f4155496d554d316c71644e496e7a6737535655723951477a6b6e427177770a556759445652306642457377535442486f45576751345a426148523063484d364c79396a5a584a3061575a70593246305a584d7564484a316333526c5a484e6c0a636e5a705932567a4c6d6c75644756734c6d4e766253394a626e526c62464e4857464a76623352445153356b5a584977485159445652304f42425945464e446f0a71747031312f6b7553526559504873555a644456386c6c4e4d41344741315564447745422f77514541774942426a415342674e5648524d4241663845434441470a4151482f416745414d416f4743437147534d343942414d43413067414d4555434951434a6754627456714f795a316d336a716941584d365159613672357357530a34792f4737793875494a4778647749675271507642534b7a7a516167424c517135733541373070646f6961524a387a2f3075447a344e675639316b3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436a7a4343416a53674177494241674955496d554d316c71644e496e7a6737535655723951477a6b6e42717777436759494b6f5a497a6a3045417749770a614445614d4267474131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e760a636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a0a42674e5642415954416c56544d423458445445344d4455794d5445774e4455784d466f58445451354d54497a4d54497a4e546b314f566f77614445614d4267470a4131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e76636e4276636d46300a615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a42674e56424159540a416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a3044415163445167414543366e45774d4449595a4f6a2f69505773437a61454b69370a314f694f534c52466857476a626e42564a66566e6b59347533496a6b4459594c304d784f346d717379596a6c42616c54565978465032734a424b357a6c4b4f420a757a43427544416642674e5648534d4547444157674251695a517a575770303069664f44744a5653763141624f5363477244425342674e5648523845537a424a0a4d45656752614244686b466f64485277637a6f764c324e6c636e52705a6d6c6a5958526c63793530636e567a6447566b63325679646d6c6a5a584d75615735300a5a577775593239744c306c756447567355306459556d397664454e424c6d526c636a416442674e564851344546675155496d554d316c71644e496e7a673753560a55723951477a6b6e4271777744675944565230504151482f42415144416745474d42494741315564457745422f7751494d4159424166384341514577436759490a4b6f5a497a6a3045417749445351417752674968414f572f35516b522b533943695344634e6f6f774c7550524c735747662f59693747535839344267775477670a41694541344a306c72486f4d732b586f356f2f7358364f39515778485241765a55474f6452513763767152586171493d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a0001000000000000000100000000000000100000000000000020000000000000007367785f7265706f72745f6461746100ab835a731a3ec9113fbbac6411b2573eb4d36f107d4b1e0046c1cf71c35fc665"
          }
        }
      }
    }
  ],
  "Variables": {}
}
