interactions:
- request:
    body: null
    headers:
      Accept:
      - application/json
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - azsdk-python-confidentialledger/1.0.0b1 Python/3.9.1 (macOS-10.16-x86_64-i386-64bit)
    method: GET
    uri: https://fake-confidential-ledger.azure.com/app/governance/members?api-version=0.1-preview
  response:
    body:
      string: '{"members":[{"certificate":"-----BEGIN CERTIFICATE-----\nMIIB+DCCAX2gAwIBAgIQbqIwsiHHQlWkhweK0NbPODAKBggqhkjOPQQDAzAgMR4w\nHAYDVQQDExVDQ0YgR292ZXJub3IgSWRlbnRpdHkwHhcNMjAxMTExMjAyNDUwWhcN\nMjExMTExMjAzNDUwWjAgMR4wHAYDVQQDExVDQ0YgR292ZXJub3IgSWRlbnRpdHkw\ndjAQBgcqhkjOPQIBBgUrgQQAIgNiAATTFBoe5FRZTXSQn5ZGl7BV40FpF6fvK3mj\nuDbh3BpAFCC9eXIU9nrGEEoaWH2n++c0TXuaR9TlXEm1ms47YMGmvr/epdI2Qgd6\nBC6bwYfMoRFVH/+G+itRj70ywY+lqrmjfDB6MA4GA1UdDwEB/wQEAwIHgDAJBgNV\nHRMEAjAAMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAfBgNVHSMEGDAW\ngBQefKdvzGwngW5bffiMcfFhoBYtNzAdBgNVHQ4EFgQUHnynb8xsJ4FuW334jHHx\nYaAWLTcwCgYIKoZIzj0EAwMDaQAwZgIxAKb40n899np5eoAei4YatmJ9P2kdGyGP\nqQBslkobR/Gb++QAHbFoD4m2tANPtpmYJAIxANklOHFie1OSLVwzl3n8zBbt1+KX\naH1qYPDr3MzPfvSBq7ckBGem2C6EEX4ratWAGQ==\n-----END
        CERTIFICATE-----","id":"eec5d23a0f376538a34cccb35705cad4850741dcf82cd9ec39d3972aabc58a72"}]}'
    headers:
      content-length:
      - '860'
      content-type:
      - application/json
      x-ms-ccf-transaction-id:
      - '2.1027'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - application/json
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - azsdk-python-confidentialledger/1.0.0b1 Python/3.9.1 (macOS-10.16-x86_64-i386-64bit)
    method: GET
    uri: https://fake-confidential-ledger.azure.com/app/governance/constitution?api-version=0.1-preview
  response:
    body:
      string: '{"digest":"f1167f64777c56b6e2d14615b6b2ada50a5db07b83ae724500f7a7313c9461da","script":"class
        Action {\n  constructor(validate, apply) {\n    this.validate = validate;\n    this.apply
        = apply;\n  }\n}\n\nfunction parseUrl(url) {\n  // From https://tools.ietf.org/html/rfc3986#appendix-B\n  const
        re = new RegExp(\n    \"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\"\n  );\n  const
        groups = url.match(re);\n  if (!groups) {\n    throw new TypeError(`${url}
        is not a valid URL.`);\n  }\n  return {\n    scheme: groups[2],\n    authority:
        groups[4],\n    path: groups[5],\n    query: groups[7],\n    fragment: groups[9],\n  };\n}\n\nfunction
        checkType(value, type, field) {\n  const optional = type.endsWith(\"?\");\n  if
        (optional) {\n    if (value === null || value === undefined) {\n      return;\n    }\n    type
        = type.slice(0, -1);\n  }\n  if (type === \"array\") {\n    if (!Array.isArray(value))
        {\n      throw new Error(`${field} must be an array`);\n    }\n  } else if
        (type === \"integer\") {\n    if (!Number.isInteger(value)) {\n      throw
        new Error(`${field} must be an integer`);\n    }\n  } else if (typeof value
        !== type) {\n    throw new Error(`${field} must be of type ${type} but is
        ${typeof value}`);\n  }\n}\n\nfunction checkEnum(value, members, field) {\n  if
        (!members.includes(value)) {\n    throw new Error(`${field} must be one of
        ${members}`);\n  }\n}\n\nfunction checkBounds(value, low, high, field) {\n  if
        (low !== null && value < low) {\n    throw new Error(`${field} must be greater
        than ${low}`);\n  }\n  if (high !== null && value > high) {\n    throw new
        Error(`${field} must be lower than ${high}`);\n  }\n}\n\nfunction checkLength(value,
        min, max, field) {\n  if (min !== null && value.length < min) {\n    throw
        new Error(`${field} must be an array of minimum ${min} elements`);\n  }\n  if
        (max !== null && value.length > max) {\n    throw new Error(`${field} must
        be an array of maximum ${max} elements`);\n  }\n}\n\nfunction checkNone(args)
        {\n  if (args !== null && args !== undefined) {\n    throw new Error(`Proposal
        does not accept any argument, found \"${args}\"`);\n  }\n}\n\nfunction getSingletonKvKey()
        {\n  // When a KV map only contains one value, this is the key at which\n  //
        the value is recorded\n  return new ArrayBuffer(8);\n}\n\nfunction getActiveRecoveryMembersCount()
        {\n  let activeRecoveryMembersCount = 0;\n  ccf.kv[\"public:ccf.gov.members.encryption_public_keys\"].forEach((_,
        k) => {\n    let rawMemberInfo = ccf.kv[\"public:ccf.gov.members.info\"].get(k);\n    if
        (rawMemberInfo === undefined) {\n      throw new Error(`Recovery member ${ccf.bufToStr(k)}
        has no information`);\n    }\n\n    const memberInfo = ccf.bufToJsonCompatible(rawMemberInfo);\n    if
        (memberInfo.status === \"Active\") {\n      activeRecoveryMembersCount++;\n    }\n  });\n  return
        activeRecoveryMembersCount;\n}\n\nfunction checkJwks(value, field) {\n  checkType(value,
        \"object\", field);\n  checkType(value.keys, \"array\", `${field}.keys`);\n  for
        (const [i, jwk] of value.keys.entries()) {\n    checkType(jwk.kid, \"string\",
        `${field}.keys[${i}].kid`);\n    checkType(jwk.kty, \"string\", `${field}.keys[${i}].kty`);\n    checkType(jwk.x5c,
        \"array\", `${field}.keys[${i}].x5c`);\n    checkLength(jwk.x5c, 1, null,
        `${field}.keys[${i}].x5c`);\n    for (const [j, b64der] of jwk.x5c.entries())
        {\n      checkType(b64der, \"string\", `${field}.keys[${i}].x5c[${j}]`);\n      const
        pem =\n        \"-----BEGIN CERTIFICATE-----\\n\" +\n        b64der +\n        \"\\n-----END
        CERTIFICATE-----\";\n      checkX509CertChain(pem, `${field}.keys[${i}].x5c[${j}]`);\n    }\n  }\n}\n\nfunction
        checkX509CertChain(value, field) {\n  if (!ccf.isValidX509CertBundle(value))
        {\n    throw new Error(\n      `${field} must be a valid X509 certificate
        (chain) in PEM format`\n    );\n  }\n}\n\nfunction invalidateOtherOpenProposals(proposalIdToRetain)
        {\n  let proposals = ccf.kv[\"public:ccf.gov.proposals_info.js\"];\n  const
        proposalsMap = ccf.kv[\"public:ccf.gov.proposals_info.js\"];\n  proposalsMap.forEach((v,
        k) => {\n    let proposalId = ccf.bufToStr(k);\n    if (proposalId !== proposalIdToRetain)
        {\n      let info = ccf.bufToJsonCompatible(v);\n      if (info.state ===
        \"Open\") {\n        info.state = \"Dropped\";\n        proposalsMap.set(k,
        ccf.jsonCompatibleToBuf(info));\n      }\n    }\n  });\n}\n\nconst actions
        = new Map([\n  [\n    \"set_constitution\",\n    new Action(\n      function
        (args) {\n        checkType(args.constitution, \"string\");\n      },\n      function
        (args, proposalId) {\n        ccf.kv[\"public:ccf.gov.constitution\"].set(\n          getSingletonKvKey(),\n          ccf.jsonCompatibleToBuf(args.constitution)\n        );\n\n        //
        Changing the constitution changes the semantics of any other open proposals,
        so invalidate them to avoid confusion or malicious vote modification\n        invalidateOtherOpenProposals(proposalId);\n      }\n    ),\n  ],\n  [\n    \"set_member\",\n    new
        Action(\n      function (args) {\n        checkX509CertChain(args.cert, \"cert\");\n        checkType(args.member_data,
        \"object?\", \"member_data\");\n        // Also check that public encryption
        key is well formed, if it exists\n      },\n\n      function (args) {\n        const
        memberId = ccf.pemToId(args.cert);\n        const rawMemberId = ccf.strToBuf(memberId);\n\n        ccf.kv[\"public:ccf.gov.members.certs\"].set(\n          rawMemberId,\n          ccf.strToBuf(args.cert)\n        );\n\n        if
        (args.encryption_pub_key == null) {\n          ccf.kv[\"public:ccf.gov.members.encryption_public_keys\"].delete(\n            rawMemberId\n          );\n        }
        else {\n          ccf.kv[\"public:ccf.gov.members.encryption_public_keys\"].set(\n            rawMemberId,\n            ccf.strToBuf(args.encryption_pub_key)\n          );\n        }\n\n        let
        member_info = {};\n        member_info.member_data = args.member_data;\n        member_info.status
        = \"Accepted\";\n        ccf.kv[\"public:ccf.gov.members.info\"].set(\n          rawMemberId,\n          ccf.jsonCompatibleToBuf(member_info)\n        );\n\n        const
        rawSignature = ccf.kv[\"public:ccf.internal.signatures\"].get(\n          getSingletonKvKey()\n        );\n        if
        (rawSignature === undefined) {\n          ccf.kv[\"public:ccf.gov.members.acks\"].set(rawMemberId);\n        }
        else {\n          const signature = ccf.bufToJsonCompatible(rawSignature);\n          const
        ack = {};\n          ack.state_digest = signature.root;\n          ccf.kv[\"public:ccf.gov.members.acks\"].set(\n            rawMemberId,\n            ccf.jsonCompatibleToBuf(ack)\n          );\n        }\n      }\n    ),\n  ],\n  [\n    \"remove_member\",\n    new
        Action(\n      function (args) {\n        checkType(args.member_id, \"string\",
        \"member_id\");\n      },\n      function (args) {\n        const rawMemberId
        = ccf.strToBuf(args.member_id);\n        const rawMemberInfo = ccf.kv[\"public:ccf.gov.members.info\"].get(\n          rawMemberId\n        );\n        if
        (rawMemberInfo === undefined) {\n          return; // Idempotent\n        }\n\n        const
        memberInfo = ccf.bufToJsonCompatible(rawMemberInfo);\n        const isActiveMember
        = memberInfo.status == \"Active\";\n\n        const isRecoveryMember = ccf.kv[\n          \"public:ccf.gov.members.encryption_public_keys\"\n        ].has(rawMemberId)\n          ?
        true\n          : false;\n\n        // If the member is an active recovery
        member, check that there\n        // would still be a sufficient number of
        recovery members left\n        // to recover the service\n        if (isActiveMember
        && isRecoveryMember) {\n          const rawConfig = ccf.kv[\"public:ccf.gov.service.config\"].get(\n            getSingletonKvKey()\n          );\n          if
        (rawConfig === undefined) {\n            throw new Error(\"Service configuration
        could not be found\");\n          }\n\n          const config = ccf.bufToJsonCompatible(rawConfig);\n          const
        activeRecoveryMembersCountAfter =\n            getActiveRecoveryMembersCount()
        - 1;\n          if (activeRecoveryMembersCountAfter < config.recovery_threshold)
        {\n            throw new Error(\n              `Number of active recovery
        members (${activeRecoveryMembersCountAfter}) would be less than recovery threshold
        (${config.recovery_threshold})`\n            );\n          }\n        }\n\n        ccf.kv[\"public:ccf.gov.members.info\"].delete(rawMemberId);\n        ccf.kv[\"public:ccf.gov.members.encryption_public_keys\"].delete(\n          rawMemberId\n        );\n        ccf.kv[\"public:ccf.gov.members.certs\"].delete(rawMemberId);\n        ccf.kv[\"public:ccf.gov.members.acks\"].delete(rawMemberId);\n        ccf.kv[\"public:ccf.gov.history\"].delete(rawMemberId);\n\n        if
        (isActiveMember && isRecoveryMember) {\n          // A retired recovery member
        should not have access to the private\n          // ledger going forward so
        rekey the ledger, issuing new shares to\n          // remaining active recovery
        members\n          ccf.node.triggerLedgerRekey();\n        }\n      }\n    ),\n  ],\n  [\n    \"set_member_data\",\n    new
        Action(\n      function (args) {\n        checkType(args.member_id, \"string\",
        \"member_id\");\n        checkType(args.member_data, \"object\", \"member_data\");\n      },\n\n      function
        (args) {\n        let member_id = ccf.strToBuf(args.member_id);\n        let
        members_info = ccf.kv[\"public:ccf.gov.members.info\"];\n        let member_info
        = members_info.get(member_id);\n        if (member_info === undefined) {\n          throw
        new Error(`Member ${args.member_id} does not exist`);\n        }\n        let
        mi = ccf.bufToJsonCompatible(member_info);\n        mi.member_data = args.member_data;\n        members_info.set(member_id,
        ccf.jsonCompatibleToBuf(mi));\n      }\n    ),\n  ],\n  [\n    \"set_user\",\n    new
        Action(\n      function (args) {\n        checkX509CertChain(args.cert, \"cert\");\n        checkType(args.user_data,
        \"object?\", \"user_data\");\n      },\n      function (args) {\n        let
        userId = ccf.pemToId(args.cert);\n        let rawUserId = ccf.strToBuf(userId);\n\n        ccf.kv[\"public:ccf.gov.users.certs\"].set(\n          rawUserId,\n          ccf.strToBuf(args.cert)\n        );\n\n        if
        (args.user_data !== null && args.user_data !== undefined) {\n          ccf.kv[\"public:ccf.gov.users.info\"].set(\n            rawUserId,\n            ccf.jsonCompatibleToBuf(args.user_data)\n          );\n        }
        else {\n          ccf.kv[\"public:ccf.gov.users.info\"].delete(rawUserId);\n        }\n      }\n    ),\n  ],\n  [\n    \"remove_user\",\n    new
        Action(\n      function (args) {\n        checkType(args.user_id, \"string\",
        \"user_id\");\n      },\n      function (args) {\n        const user_id =
        ccf.strToBuf(args.user_id);\n        ccf.kv[\"public:ccf.gov.users.certs\"].delete(user_id);\n        ccf.kv[\"public:ccf.gov.users.info\"].delete(user_id);\n      }\n    ),\n  ],\n  [\n    \"remove_user_by_cert\",\n    new
        Action(\n      function (args) {\n        checkX509CertChain(args.cert, \"cert\");\n      },\n      function
        (args) {\n        let userId = ccf.pemToId(args.cert);\n        let rawUserId
        = ccf.strToBuf(userId);\n\n        ccf.kv[\"public:ccf.gov.users.certs\"].delete(\n          rawUserId\n        );\n        ccf.kv[\"public:ccf.gov.users.info\"].delete(rawUserId);\n      }\n    ),\n  ],\n  [\n    \"set_user_data\",\n    new
        Action(\n      function (args) {\n        checkType(args.user_id, \"string\",
        \"user_id\");\n        checkType(args.user_data, \"object?\", \"user_data\");\n      },\n      function
        (args) {\n        const userId = ccf.strToBuf(args.user_id);\n\n        if
        (args.user_data !== null && args.user_data !== undefined) {\n          let
        userInfo = {};\n          userInfo.user_data = args.user_data;\n          ccf.kv[\"public:ccf.gov.users.info\"].set(\n            userId,\n            ccf.jsonCompatibleToBuf(userInfo)\n          );\n        }
        else {\n          ccf.kv[\"public:ccf.gov.users.info\"].delete(userId);\n        }\n      }\n    ),\n  ],\n  [\n    \"set_recovery_threshold\",\n    new
        Action(\n      function (args) {\n        checkType(args.recovery_threshold,
        \"integer\", \"threshold\");\n        checkBounds(args.recovery_threshold,
        1, 254, \"threshold\");\n      },\n      function (args) {\n        const
        rawConfig = ccf.kv[\"public:ccf.gov.service.config\"].get(\n          getSingletonKvKey()\n        );\n        if
        (rawConfig === undefined) {\n          throw new Error(\"Service configuration
        could not be found\");\n        }\n\n        let config = ccf.bufToJsonCompatible(rawConfig);\n\n        if
        (args.recovery_threshold === config.recovery_threshold) {\n          return;
        // No effect\n        }\n\n        const rawService = ccf.kv[\"public:ccf.gov.service.info\"].get(\n          getSingletonKvKey()\n        );\n        if
        (rawService === undefined) {\n          throw new Error(\"Service information
        could not be found\");\n        }\n\n        const service = ccf.bufToJsonCompatible(rawService);\n\n        if
        (service.status === \"WaitingForRecoveryShares\") {\n          throw new Error(\n            `Cannot
        set recovery threshold if service is ${service.status}`\n          );\n        }
        else if (service.status === \"Open\") {\n          let activeRecoveryMembersCount
        = getActiveRecoveryMembersCount();\n          if (args.recovery_threshold
        > activeRecoveryMembersCount) {\n            throw new Error(\n              `Cannot
        set recovery threshold to ${args.recovery_threshold}: recovery threshold would
        be greater than the number of recovery members ${activeRecoveryMembersCount}`\n            );\n          }\n        }\n\n        config.recovery_threshold
        = args.recovery_threshold;\n        ccf.kv[\"public:ccf.gov.service.config\"].set(\n          getSingletonKvKey(),\n          ccf.jsonCompatibleToBuf(config)\n        );\n\n        ccf.node.triggerRecoverySharesRefresh();\n      }\n    ),\n  ],\n  [\n    \"trigger_recovery_shares_refresh\",\n    new
        Action(\n      function (args) {\n        checkNone(args);\n      },\n      function
        (args) {\n        ccf.node.triggerRecoverySharesRefresh();\n      }\n    ),\n  ],\n  [\n    \"trigger_ledger_rekey\",\n    new
        Action(\n      function (args) {\n        checkNone(args);\n      },\n\n      function
        (args) {\n        ccf.node.triggerLedgerRekey();\n      }\n    ),\n  ],\n  [\n    \"transition_service_to_open\",\n    new
        Action(\n      function (args) {\n        checkNone(args);\n      },\n\n      function
        (args) {\n        ccf.node.transitionServiceToOpen();\n      }\n    ),\n  ],\n  [\n    \"set_js_app\",\n    new
        Action(\n      function (args) {\n        const bundle = args.bundle;\n        checkType(bundle,
        \"object\", \"bundle\");\n\n        let prefix = \"bundle.modules\";\n        checkType(bundle.modules,
        \"array\", prefix);\n        for (const [i, module] of bundle.modules.entries())
        {\n          checkType(module, \"object\", `${prefix}[${i}]`);\n          checkType(module.name,
        \"string\", `${prefix}[${i}].name`);\n          checkType(module.module, \"string\",
        `${prefix}[${i}].module`);\n        }\n\n        prefix = \"bundle.metadata\";\n        checkType(bundle.metadata,
        \"object\", prefix);\n        checkType(bundle.metadata.endpoints, \"object\",
        `${prefix}.endpoints`);\n        for (const [url, endpoint] of Object.entries(\n          bundle.metadata.endpoints\n        ))
        {\n          checkType(endpoint, \"object\", `${prefix}.endpoints[\"${url}\"]`);\n          for
        (const [method, info] of Object.entries(endpoint)) {\n            const prefix2
        = `${prefix}.endpoints[\"${url}\"][\"${method}\"]`;\n            checkType(info,
        \"object\", prefix2);\n            checkType(info.js_module, \"string\", `${prefix2}.js_module`);\n            checkType(info.js_function,
        \"string\", `${prefix2}.js_function`);\n            checkEnum(\n              info.mode,\n              [\"readwrite\",
        \"readonly\", \"historical\"],\n              `${prefix2}.mode`\n            );\n            checkEnum(\n              info.forwarding_required,\n              [\"sometimes\",
        \"always\", \"never\"],\n              `${prefix2}.forwarding_required`\n            );\n            checkType(info.openapi,
        \"object?\", `${prefix2}.openapi`);\n            checkType(\n              info.openapi_hidden,\n              \"boolean?\",\n              `${prefix2}.openapi_hidden`\n            );\n            checkType(\n              info.authn_policies,\n              \"array\",\n              `${prefix2}.authn_policies`\n            );\n            for
        (const [i, policy] of info.authn_policies.entries()) {\n              checkType(policy,
        \"string\", `${prefix2}.authn_policies[${i}]`);\n            }\n            if
        (!bundle.modules.some((m) => m.name === info.js_module)) {\n              throw
        new Error(`module ''${info.js_module}'' not found in bundle`);\n            }\n          }\n        }\n      },\n      function
        (args) {\n        const modulesMap = ccf.kv[\"public:ccf.gov.modules\"];\n        const
        endpointsMap = ccf.kv[\"public:ccf.gov.endpoints\"];\n        // kv should
        expose .clear()\n        modulesMap.forEach((_, k) => {\n          modulesMap.delete(k);\n        });\n        endpointsMap.forEach((_,
        k) => {\n          endpointsMap.delete(k);\n        });\n\n        const bundle
        = args.bundle;\n        for (const module of bundle.modules) {\n          const
        path = \"/\" + module.name;\n          const pathBuf = ccf.strToBuf(path);\n          const
        moduleBuf = ccf.strToBuf(module.module);\n          modulesMap.set(pathBuf,
        moduleBuf);\n        }\n\n        for (const [url, endpoint] of Object.entries(\n          bundle.metadata.endpoints\n        ))
        {\n          for (const [method, info] of Object.entries(endpoint)) {\n            const
        key = `${method.toUpperCase()} ${url}`;\n            const keyBuf = ccf.strToBuf(key);\n\n            info.js_module
        = \"/\" + info.js_module;\n            const infoBuf = ccf.jsonCompatibleToBuf(info);\n            endpointsMap.set(keyBuf,
        infoBuf);\n          }\n        }\n      }\n    ),\n  ],\n  [\n    \"remove_js_app\",\n    new
        Action(\n      function (args) { },\n      function (args) {\n        const
        modulesMap = ccf.kv[\"public:ccf.gov.modules\"];\n        const endpointsMap
        = ccf.kv[\"public:ccf.gov.endpoints\"];\n        // kv should expose .clear()\n        modulesMap.forEach((_,
        k) => {\n          modulesMap.delete(k);\n        });\n        endpointsMap.forEach((_,
        k) => {\n          endpointsMap.delete(k);\n        });\n      }\n    ),\n  ],\n  [\n    \"set_ca_cert_bundle\",\n    new
        Action(\n      function (args) {\n        checkType(args.name, \"string\",
        \"name\");\n        checkX509CertChain(args.cert_bundle, \"cert_bundle\");\n      },\n      function
        (args) {\n        const name = args.name;\n        const bundle = args.cert_bundle;\n        const
        nameBuf = ccf.strToBuf(name);\n        const bundleBuf = ccf.jsonCompatibleToBuf(bundle);\n        ccf.kv[\"public:ccf.gov.tls.ca_cert_bundles\"].set(nameBuf,
        bundleBuf);\n      }\n    ),\n  ],\n  [\n    \"remove_ca_cert_bundle\",\n    new
        Action(\n      function (args) {\n        checkType(args.name, \"string\",
        \"name\");\n      },\n      function (args) {\n        const name = args.name;\n        const
        nameBuf = ccf.strToBuf(name);\n        ccf.kv[\"public:ccf.gov.tls.ca_cert_bundles\"].delete(nameBuf);\n      }\n    ),\n  ],\n  [\n    \"set_jwt_issuer\",\n    new
        Action(\n      function (args) {\n        checkType(args.issuer, \"string\",
        \"issuer\");\n        checkType(args.auto_refresh, \"boolean?\", \"auto_refresh\");\n        checkType(args.ca_cert_bundle_name,
        \"string?\", \"ca_cert_bundle_name\");\n        checkEnum(args.key_filter,
        [\"all\", \"sgx\"], \"key_filter\");\n        checkType(args.key_policy, \"object?\",
        \"key_policy\");\n        if (args.key_policy) {\n          checkType(\n            args.key_policy.sgx_claims,\n            \"object?\",\n            \"key_policy.sgx_claims\"\n          );\n          if
        (args.key_policy.sgx_claims) {\n            for (const [name, value] of Object.entries(\n              args.key_policy.sgx_claims\n            ))
        {\n              checkType(value, \"string\", `key_policy.sgx_claims[\"${name}\"]`);\n            }\n          }\n        }\n        checkType(args.jwks,
        \"object?\", \"jwks\");\n        if (args.jwks) {\n          checkJwks(args.jwks,
        \"jwks\");\n        }\n        if (args.auto_refresh) {\n          if (!args.ca_cert_bundle_name)
        {\n            throw new Error(\n              \"ca_cert_bundle_name is missing
        but required if auto_refresh is true\"\n            );\n          }\n          let
        url;\n          try {\n            url = parseUrl(args.issuer);\n          }
        catch (e) {\n            throw new Error(\"issuer must be a URL if auto_refresh
        is true\");\n          }\n          if (url.scheme != \"https\") {\n            throw
        new Error(\n              \"issuer must be a URL starting with https:// if
        auto_refresh is true\"\n            );\n          }\n          if (url.query
        || url.fragment) {\n            throw new Error(\n              \"issuer must
        be a URL without query/fragment if auto_refresh is true\"\n            );\n          }\n        }\n      },\n      function
        (args) {\n        if (args.auto_refresh) {\n          const caCertBundleName
        = args.ca_cert_bundle_name;\n          const caCertBundleNameBuf = ccf.strToBuf(args.ca_cert_bundle_name);\n          if
        (\n            !ccf.kv[\"public:ccf.gov.tls.ca_cert_bundles\"].has(\n              caCertBundleNameBuf\n            )\n          )
        {\n            throw new Error(\n              `No CA cert bundle found with
        name ''${caCertBundleName}''`\n            );\n          }\n        }\n        const
        issuer = args.issuer;\n        const jwks = args.jwks;\n        delete args.jwks;\n        const
        metadata = args;\n        if (jwks) {\n          ccf.setJwtPublicSigningKeys(issuer,
        metadata, jwks);\n        }\n        const issuerBuf = ccf.strToBuf(issuer);\n        const
        metadataBuf = ccf.jsonCompatibleToBuf(metadata);\n        ccf.kv[\"public:ccf.gov.jwt.issuers\"].set(issuerBuf,
        metadataBuf);\n      }\n    ),\n  ],\n  [\n    \"set_jwt_public_signing_keys\",\n    new
        Action(\n      function (args) {\n        checkType(args.issuer, \"string\",
        \"issuer\");\n        checkJwks(args.jwks, \"jwks\");\n      },\n      function
        (args) {\n        const issuer = args.issuer;\n        const issuerBuf = ccf.strToBuf(issuer);\n        const
        metadataBuf = ccf.kv[\"public:ccf.gov.jwt.issuers\"].get(issuerBuf);\n        if
        (metadataBuf === undefined) {\n          throw new Error(`issuer ${issuer}
        not found`);\n        }\n        const metadata = ccf.bufToJsonCompatible(metadataBuf);\n        const
        jwks = args.jwks;\n        ccf.setJwtPublicSigningKeys(issuer, metadata, jwks);\n      }\n    ),\n  ],\n  [\n    \"remove_jwt_issuer\",\n    new
        Action(\n      function (args) {\n        checkType(args.issuer, \"string\",
        \"issuer\");\n      },\n      function (args) {\n        const issuerBuf =
        ccf.strToBuf(args.issuer);\n        if (!ccf.kv[\"public:ccf.gov.jwt.issuers\"].delete(issuerBuf))
        {\n          return;\n        }\n        ccf.removeJwtPublicSigningKeys(args.issuer);\n      }\n    ),\n  ],\n  [\n    \"add_node_code\",\n    new
        Action(\n      function (args) {\n        checkType(args.new_code_id, \"string\",
        \"new_code_id\");\n        checkType(args.existing_code_id, \"string\", \"existing_code_id\");\n      },\n      function
        (args, proposalId) {\n        const existingCode = ccf.kv[\"public:ccf.gov.nodes.code_ids\"].get(\n          ccf.strToBuf(args.existing_code_id)\n        );\n        if
        (existingCode === undefined) {\n          throw new Error(`Code required to
        exist is not present: ${args.existing_code_id}`);\n        }\n\n        const
        newCodeId = ccf.strToBuf(args.new_code_id);\n        const ALLOWED = ccf.jsonCompatibleToBuf(\"AllowedToJoin\");\n        ccf.kv[\"public:ccf.gov.nodes.code_ids\"].set(newCodeId,
        ALLOWED);\n\n        // Adding a new allowed code ID changes the semantics
        of any other open proposals, so invalidate them to avoid confusion or malicious
        vote modification\n        invalidateOtherOpenProposals(proposalId);\n      }\n    ),\n  ],\n\n  [\n    \"transition_node_to_trusted\",\n    new
        Action(\n      function (args) {\n        checkType(args.node_id, \"string\",
        \"node_id\");\n      },\n      function (args) {\n        const node = ccf.kv[\"public:ccf.gov.nodes.info\"].get(\n          ccf.strToBuf(args.node_id)\n        );\n        if
        (node === undefined) {\n          throw new Error(`No such node: ${args.node_id}`);\n        }\n        const
        nodeInfo = ccf.bufToJsonCompatible(node);\n        if (nodeInfo.status ===
        \"Pending\") {\n          nodeInfo.status = \"Trusted\";\n          nodeInfo.ledger_secret_seqno
        = ccf.network.getLatestLedgerSecretSeqno();\n          ccf.kv[\"public:ccf.gov.nodes.info\"].set(\n            ccf.strToBuf(args.node_id),\n            ccf.jsonCompatibleToBuf(nodeInfo)\n          );\n        }\n      }\n    ),\n  ],\n  [\n    \"remove_node_code\",\n    new
        Action(\n      function (args) {\n        checkType(args.code_id_to_remove,
        \"string\", \"code_id_to_remove\");\n        checkType(args.remaining_code_id,
        \"string\", \"remaining_code_id\");\n      },\n      function (args) {\n        const
        remainingCode = ccf.kv[\"public:ccf.gov.nodes.code_ids\"].get(\n          ccf.strToBuf(args.remaining_code_id)\n        );\n        if
        (remainingCode === undefined) {\n          throw new Error(`Code required
        to remain is not present: ${args.remaining_code_id}`);\n        }\n\n        const
        codeIdToRemove = ccf.strToBuf(args.code_id_to_remove);\n        ccf.kv[\"public:ccf.gov.nodes.code_ids\"].delete(codeIdToRemove);\n      }\n    ),\n  ],\n  [\n    \"remove_node\",\n    new
        Action(\n      function (args) {\n        checkType(args.node_id, \"string\",
        \"node_id\");\n      },\n      function (args) {\n        const node = ccf.kv[\"public:ccf.gov.nodes.info\"].get(\n          ccf.strToBuf(args.node_id)\n        );\n        if
        (node !== undefined) {\n          const node_obj = ccf.bufToJsonCompatible(node);\n          node_obj.status
        = \"Retired\";\n          ccf.kv[\"public:ccf.gov.nodes.info\"].set(\n            ccf.strToBuf(args.node_id),\n            ccf.jsonCompatibleToBuf(node_obj)\n          );\n        }\n      }\n    ),\n  ],\n  [\n    \"set_service_principal\",\n    new
        Action(\n      function (args) {\n        checkType(args.id, \"string\", \"id\");\n        checkType(args.data,
        \"object\", \"data\");\n      },\n      function (args) {\n        ccf.kv[\"public:ccf.gov.service_principals\"].set(\n          ccf.strToBuf(args.id),\n          ccf.jsonCompatibleToBuf(args.data)\n        );\n      }\n    ),\n  ],\n  [\n    \"remove_service_principal\",\n    new
        Action(\n      function (args) {\n        checkType(args.id, \"string\", \"id\");\n      },\n      function
        (args) {\n        ccf.kv[\"public:ccf.gov.service_principals\"].delete(\n          ccf.strToBuf(args.id)\n        );\n      }\n    ),\n  ],\n]);\nexport
        function apply(proposal, proposalId) {\n  const proposed_actions = JSON.parse(proposal)[\"actions\"];\n  for
        (const proposed_action of proposed_actions) {\n    const definition = actions.get(proposed_action.name);\n    definition.apply(proposed_action.args,
        proposalId);\n  }\n}\nfunction getMemberInfo(memberId) {\n  const key = ccf.strToBuf(memberId);\n  const
        value = ccf.kv[\"public:ccf.gov.members.info\"].get(key);\n  const info =
        ccf.bufToJsonCompatible(value);\n  return info;\n}\n\n// Returns true if the
        member is a recovery member.\nfunction isRecoveryMember(memberId) {\n  const
        info = getMemberInfo(memberId);\n  if (info.member_data.encryption_pub_key)
        {\n    return true;\n  }\n  return false;\n}\n\n// Defines which of the members
        are operators.\nfunction isOperator(memberId) {\n  // // Operators cannot
        be recovery members.\n  // if (isRecoveryMember(memberId)) {\n  //   return
        false;\n  // }\n  const info = getMemberInfo(memberId);\n  return info.member_data.is_operator;\n}\n\n//
        Defines actions that can be passed with sole operator input.\nfunction canOperatorPass(action)
        {\n  // Some actions can always be called by operators.\n  const allowedOperatorActions
        = [\n    \"remove_ca_cert_bundle\",\n    \"remove_jwt_issuer\",\n    \"remove_node\",\n    \"remove_service_principal\",\n    \"remove_user\",\n    \"remove_user_by_cert\",\n    \"set_ca_cert_bundle\",\n    \"set_js_app\",\n    \"set_jwt_issuer\",\n    \"set_jwt_public_signing_keys\",\n    \"set_service_principal\",\n    \"set_user\",\n    \"set_user_data\",\n    \"transition_node_to_trusted\",\n    \"transition_service_to_open\"\n  ];\n\n  if
        (allowedOperatorActions.includes(action.name)) {\n    return true;\n  }\n  //
        Additionally, operators can add or retire other operators.\n  if (action.name
        === \"set_member\") {\n    const memberData = action.args[\"member_data\"];\n    if
        (memberData && memberData.is_operator) {\n      return true;\n    }\n  } else
        if (action.name === \"remove_member\") {\n    if (isOperator(action.args.member_id))
        {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function resolve(proposal,
        proposerId, votes) {\n  const actions = JSON.parse(proposal)[\"actions\"];\n\n  //
        Count member votes.\n  const memberVoteCount = votes.filter(\n    (v) => v.vote
        && !isOperator(v.member_id)\n  ).length;\n\n  // Count active members, excluding
        operators.\n  let activeMemberCount = 0;\n  ccf.kv[\"public:ccf.gov.members.info\"].forEach((value,
        key) => {\n    const memberId = ccf.bufToStr(key);\n    const info = ccf.bufToJsonCompatible(value);\n    if
        (info.status === \"Active\" && !isOperator(memberId)) {\n      activeMemberCount++;\n    }\n  });\n\n  //
        A proposal is an operator change if it''s only applying operator actions.\n  const
        isOperatorChange = actions.every(canOperatorPass);\n\n  // A majority of members
        can always accept a proposal.\n  if (memberVoteCount > Math.floor(activeMemberCount
        / 2)) {\n    return \"Accepted\";\n  }\n\n  // Operators proposing operator
        changes can accept them without a vote.\n  if (isOperatorChange && isOperator(proposerId))
        {\n    return \"Accepted\";\n  }\n\n  return \"Open\";\n}\nexport function
        validate(input) {\n  let proposal = JSON.parse(input);\n  let errors = [];\n  let
        position = 0;\n  for (const action of proposal[\"actions\"]) {\n    const
        definition = actions.get(action.name);\n    if (definition) {\n      try {\n        definition.validate(action.args);\n      }
        catch (e) {\n        errors.push(\n          `${action.name} at position ${position}
        failed validation: ${e}\\n${e.stack}`\n        );\n      }\n    } else {\n      errors.push(`${action.name}:
        no such action`);\n    }\n    position++;\n  }\n  return { valid: errors.length
        === 0, description: errors.join(\", \") };\n}\n"}'
    headers:
      content-length:
      - '30912'
      content-type:
      - application/json
      x-ms-ccf-transaction-id:
      - '2.1027'
    status:
      code: 200
      message: OK
- request:
    body: null
    headers:
      Accept:
      - application/json
      Accept-Encoding:
      - gzip, deflate
      Connection:
      - keep-alive
      User-Agent:
      - azsdk-python-confidentialledger/1.0.0b1 Python/3.9.1 (macOS-10.16-x86_64-i386-64bit)
    method: GET
    uri: https://fake-confidential-ledger.azure.com/app/enclaveQuotes?api-version=0.1-preview
  response:
    body:
      string: '{"currentNodeId":"6f88f664c95b668980edb03b579287685709610b8cc35bcd93b2ba60c887f076","enclaveQuotes":{"6010d6eef406e3e96aa4d07c16192bb8584e1e694637e0b466818525191c99ee":{"mrenclave":"e7bc49902931149e29e9649cce0891ac468fdfc59326440b3297ef9134a8a576","nodeId":"6010d6eef406e3e96aa4d07c16192bb8584e1e694637e0b466818525191c99ee","quoteVersion":"OE_SGX_v1","raw":"030002000000000005000a00939a7233f79c4ca9940a0db3957f06074fca16e1b382cc4d9313fca5acbf408b0000000011110305ff8006000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000700000000000000e7bc49902931149e29e9649cce0891ac468fdfc59326440b3297ef9134a8a5760000000000000000000000000000000000000000000000000000000000000000434dc2c9b2b780e91369417ed54a892538854f04160d4f3e8a9c96786538e37f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b29f6c95262f276c27d647ad544333f705abc0d492c1bb6c8c5e85cd5349cf800000000000000000000000000000000000000000000000000000000000000003410000061af278ff696604a85f21ef449253c0d0053cefafddc13716293cde909aa5258b6f21ed480e8411418632b768a16a790c4efee2b69278a2b72ccc8411a59fa6e8eb0721568eb8eefb5ffe48d4c0535ccbd637f6998f30d252334d093bfe489707cef9b5abbe51428ff6feb0d5590723896f7e3d8466e7c4c7f661f5588b1cbc011110305ff800600000000000000000000000000000000000000000000000000000000000000000000000000000000001500000000000000070000000000000060d85af28be8d1c40a08d98b009d5f8acc1384a385cf460800e478791d1a979c00000000000000000000000000000000000000000000000000000000000000008c4f5775d796503e96137f77c68a829a0056ac8ded70140b081b094490c57bff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045566c39ee9249e7f197a87256fd7267ac67bec7f27e6133d95306656244366e00000000000000000000000000000000000000000000000000000000000000007d1cada36a9e54bde941973bd2de03d5304bffdd775474aec6d38207272d9226a3e9e0314555d3960507f3224cf7d2009d75c8b968071fc31094a3dfb999c1e42000000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0500cc0d00002d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949456754434342436167417749424167495545646d6b4833625131367152525856766e73307369596b3979495577436759494b6f5a497a6a3045417749770a6354456a4d4345474131554541777761535735305a577767553064594946424453794251636d396a5a584e7a6233496751304578476a415942674e5642416f4d0a45556c756447567349454e76636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155450a4341774351304578437a414a42674e5642415954416c56544d423458445449784d4449784d4449794d5455774e466f58445449344d4449784d4449794d5455770a4e466f77634445694d434147413155454177775a535735305a5777675530645949464244537942445a584a3061575a70593246305a5445614d426747413155450a43677752535735305a577767513239796347397959585270623234784644415342674e564241634d43314e68626e526849454e7359584a684d517377435159440a5651514944414a445154454c4d416b474131554542684d4356564d775754415442676371686b6a4f5051494242676771686b6a4f50514d4242774e43414152680a5247587236365079506673764a55444a666158563841575957586768454e6b784638614d6d3471396a5a543546356d2f4d446b466365724a735a486c6d2b58710a4471673138452f344f416e39622f70344e366d796f3449436d7a434341706377487759445652306a42426777466f4155304f6971326e58582b53354a463567380a6578526c304e587957553077587759445652306642466777566a42556f464b6755495a4f6148523063484d364c79396863476b7564484a316333526c5a484e6c0a636e5a705932567a4c6d6c75644756734c6d4e766253397a5a3367765932567964476c6d61574e6864476c76626939324d6939775932746a636d772f593245390a63484a765932567a633239794d42304741315564446751574242537956634a3754335950586f383059535762493759504e514233506a414f42674e56485138420a4166384542414d434273417744415944565230544151482f42414977414443434164514743537147534962345451454e4151534341635577676748424d4234470a43697147534962345451454e4151454545475a445038395a483248673435704f4f5337372b564d776767466b42676f71686b69472b453042445145434d4949420a5644415142677371686b69472b45304244514543415149424554415142677371686b69472b45304244514543416749424554415142677371686b69472b4530420a4451454341774942416a415142677371686b69472b45304244514543424149424244415142677371686b69472b453042445145434251494241544152426773710a686b69472b4530424451454342674943414941774541594c4b6f5a496876684e4151304241676343415159774541594c4b6f5a496876684e41513042416767430a415141774541594c4b6f5a496876684e4151304241676b43415141774541594c4b6f5a496876684e4151304241676f43415141774541594c4b6f5a496876684e0a4151304241677343415141774541594c4b6f5a496876684e4151304241677743415141774541594c4b6f5a496876684e4151304241673043415141774541594c0a4b6f5a496876684e4151304241673443415141774541594c4b6f5a496876684e4151304241673843415141774541594c4b6f5a496876684e41513042416841430a415141774541594c4b6f5a496876684e415130424168454341516f774877594c4b6f5a496876684e4151304241684945454245524167514267415941414141410a41414141414141774541594b4b6f5a496876684e4151304241775143414141774641594b4b6f5a496876684e4151304242415147414a4275315141414d4138470a43697147534962345451454e4151554b41514177436759494b6f5a497a6a3045417749445351417752674968414a497245793530694b564857596f70573844500a56525366306859546f7232535830674b4f517569354f644241694541354d6351674a7a615550497a456342714c7970554a646a6a5a6e694c77686458387a75520a496458303244593d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436c7a4343416a36674177494241674956414e446f71747031312f6b7553526559504873555a644456386c6c4e4d416f4743437147534d343942414d430a4d476778476a415942674e5642414d4d45556c756447567349464e48574342536232393049454e424d526f77474159445651514b4442464a626e526c624342440a62334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e424d5173770a435159445651514745774a56557a4165467730784f4441314d6a45784d4451314d4468614677307a4d7a41314d6a45784d4451314d4468614d484578497a41680a42674e5642414d4d476b6c756447567349464e48574342515130736755484a765932567a6332397949454e424d526f77474159445651514b4442464a626e526c0a6243424462334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e420a4d517377435159445651514745774a56557a425a4d424d4742797147534d34394167454743437147534d34394177454841304941424c39712b4e4d7032494f670a74646c31626b2f75575a352b5447516d38614369387a373866732b664b435133642b75447a586e56544154325a68444369667949754a77764e33774e427039690a484253534d4a4d4a72424f6a6762737767626777487759445652306a42426777466f4155496d554d316c71644e496e7a6737535655723951477a6b6e427177770a556759445652306642457377535442486f45576751345a426148523063484d364c79396a5a584a3061575a70593246305a584d7564484a316333526c5a484e6c0a636e5a705932567a4c6d6c75644756734c6d4e766253394a626e526c62464e4857464a76623352445153356a636d7777485159445652304f42425945464e446f0a71747031312f6b7553526559504873555a644456386c6c4e4d41344741315564447745422f77514541774942426a415342674e5648524d4241663845434441470a4151482f416745414d416f4743437147534d343942414d43413063414d45514349432f396a2b3834542b487a74564f2f734f5142574a6253642b2f327565784b0a342b6141306a6346424c63704169413364684d72463563443532743646714d764149706a385864476d79326265656c6a4c4a4b2b707a706352413d3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436a6a4343416a53674177494241674955496d554d316c71644e496e7a6737535655723951477a6b6e42717777436759494b6f5a497a6a3045417749770a614445614d4267474131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e760a636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a0a42674e5642415954416c56544d423458445445344d4455794d5445774e4445784d566f5844544d7a4d4455794d5445774e4445784d466f77614445614d4267470a4131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e76636e4276636d46300a615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a42674e56424159540a416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a3044415163445167414543366e45774d4449595a4f6a2f69505773437a61454b69370a314f694f534c52466857476a626e42564a66566e6b59347533496a6b4459594c304d784f346d717379596a6c42616c54565978465032734a424b357a6c4b4f420a757a43427544416642674e5648534d4547444157674251695a517a575770303069664f44744a5653763141624f5363477244425342674e5648523845537a424a0a4d45656752614244686b466f64485277637a6f764c324e6c636e52705a6d6c6a5958526c63793530636e567a6447566b63325679646d6c6a5a584d75615735300a5a577775593239744c306c756447567355306459556d397664454e424c6d4e796244416442674e564851344546675155496d554d316c71644e496e7a673753560a55723951477a6b6e4271777744675944565230504151482f42415144416745474d42494741315564457745422f7751494d4159424166384341514577436759490a4b6f5a497a6a30454177494453414177525149675151732f30387279636450617543466b3855505158434d416c736c6f4265374e7761514754636470613045430a495143557438534776784b6d6a70634d2f7a3057503944766f3868326b3564753169574464426b416e2b306969413d3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a0001000000000000000100000000000000100000000000000020000000000000007367785f7265706f72745f64617461006010d6eef406e3e96aa4d07c16192bb8584e1e694637e0b466818525191c99ee"},"6f88f664c95b668980edb03b579287685709610b8cc35bcd93b2ba60c887f076":{"mrenclave":"e7bc49902931149e29e9649cce0891ac468fdfc59326440b3297ef9134a8a576","nodeId":"6f88f664c95b668980edb03b579287685709610b8cc35bcd93b2ba60c887f076","quoteVersion":"OE_SGX_v1","raw":""},"a18f4dd33a4861d5b0eb1c28fd101d55aa72999327aaa3615e98aa618702e5b3":{"mrenclave":"e7bc49902931149e29e9649cce0891ac468fdfc59326440b3297ef9134a8a576","nodeId":"a18f4dd33a4861d5b0eb1c28fd101d55aa72999327aaa3615e98aa618702e5b3","quoteVersion":"OE_SGX_v1","raw":"030002000000000005000a00939a7233f79c4ca9940a0db3957f060754a876d8093c9425005f2e6815d530010000000011110305ff8006000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000700000000000000e7bc49902931149e29e9649cce0891ac468fdfc59326440b3297ef9134a8a5760000000000000000000000000000000000000000000000000000000000000000434dc2c9b2b780e91369417ed54a892538854f04160d4f3e8a9c96786538e37f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007cffd2506bd7388597f99ac20e4a744e498ff0ef505108c34368f1f731247e43000000000000000000000000000000000000000000000000000000000000000034100000c369dfe6412619ce5c1bf9026f7fcbfdd79ae58aa1053c2cad78356e614240701f60ba69220f9cbd8592d40cbf1f477a13a253dbb45bd242580ccb9f11f912ea06834e14e82c9982eb6cee7471e3b13721661ece0a68458b0948b26ed53322b58dbf3252283ce9fe4703d59aff2003d8f94c5b61722eefd439c735d7e40b0e9a11110305ff800600000000000000000000000000000000000000000000000000000000000000000000000000000000001500000000000000070000000000000060d85af28be8d1c40a08d98b009d5f8acc1384a385cf460800e478791d1a979c00000000000000000000000000000000000000000000000000000000000000008c4f5775d796503e96137f77c68a829a0056ac8ded70140b081b094490c57bff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000751ade3621fe0e0e62fdfda76b32e7524bd87388a96e0a98ace244c95a8965b500000000000000000000000000000000000000000000000000000000000000000322ce315e71a60490bddf773f32b059f4cce7b435d550e2c1cd34aa7faf1cf4d06858ceb9ff5b8fa2aa9d3ba7a564c53853ca78ea6e1175e02b185f94ec4e852000000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f0500cc0d00002d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d49494567544343424365674177494241674956414c546d71796a394e4363724f414844654849486f6c754d565758464d416f4743437147534d343942414d430a4d484578497a416842674e5642414d4d476b6c756447567349464e48574342515130736755484a765932567a6332397949454e424d526f77474159445651514b0a4442464a626e526c6243424462334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e560a4241674d416b4e424d517377435159445651514745774a56557a4165467730794d54417a4d6a4d774f544d304e546c61467730794f44417a4d6a4d774f544d300a4e546c614d484178496a416742674e5642414d4d47556c756447567349464e4857434251513073675132567964476c6d61574e6864475578476a415942674e560a42416f4d45556c756447567349454e76636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b470a413155454341774351304578437a414a42674e5642415954416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a304441516344516741450a715165687944707854673273444b6849772b64454f2b42647536527039586f516e6c3359322f6a32497455566e524374704236484c707943325a45614d6853610a4b716c6f436476715674426872504f7364377374474b4f434170737767674b584d42384741315564497751594d426141464e446f71747031312f6b75535265590a504873555a644456386c6c4e4d46384741315564487752594d465977564b42536f464347546d68306448427a4f693876595842704c6e527964584e305a57527a0a5a584a3261574e6c63793570626e526c6243356a62323076633264344c324e6c636e52705a6d6c6a5958527062323476646a497663474e7259334a7350324e680a5058427962324e6c63334e76636a416442674e5648513445466751552f724673795665793276384e58594e354178754c766177586868347744675944565230500a4151482f42415144416762414d41774741315564457745422f7751434d4141776767485542676b71686b69472b45304244514545676748464d494942775441650a42676f71686b69472b4530424451454242424132346f6d696e7451356a58772f325543756237766b4d4949425a41594b4b6f5a496876684e41513042416a43430a415651774541594c4b6f5a496876684e4151304241674543415245774541594c4b6f5a496876684e4151304241674943415245774541594c4b6f5a496876684e0a4151304241674d43415149774541594c4b6f5a496876684e4151304241675143415151774541594c4b6f5a496876684e4151304241675543415145774551594c0a4b6f5a496876684e4151304241675943416743414d42414743797147534962345451454e41514948416745474d42414743797147534962345451454e415149490a416745414d42414743797147534962345451454e4151494a416745414d42414743797147534962345451454e4151494b416745414d42414743797147534962340a5451454e4151494c416745414d42414743797147534962345451454e4151494d416745414d42414743797147534962345451454e4151494e416745414d4241470a43797147534962345451454e4151494f416745414d42414743797147534962345451454e41514950416745414d42414743797147534962345451454e415149510a416745414d42414743797147534962345451454e415149524167454b4d42384743797147534962345451454e41514953424241524551494541594147414141410a41414141414141414d42414743697147534962345451454e41514d45416741414d42514743697147534962345451454e415151454267435162745541414441500a42676f71686b69472b45304244514546436745414d416f4743437147534d343942414d43413067414d455543494252454b346b4c5559532b766149336436536d0a6668564f613642726d4c43316d50314b7265346f52456262416945416d78325a496f506f36584838303839576668746f6539356b6345733432507050343152370a643544467167513d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436c7a4343416a36674177494241674956414e446f71747031312f6b7553526559504873555a644456386c6c4e4d416f4743437147534d343942414d430a4d476778476a415942674e5642414d4d45556c756447567349464e48574342536232393049454e424d526f77474159445651514b4442464a626e526c624342440a62334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e424d5173770a435159445651514745774a56557a4165467730784f4441314d6a45784d4451314d4468614677307a4d7a41314d6a45784d4451314d4468614d484578497a41680a42674e5642414d4d476b6c756447567349464e48574342515130736755484a765932567a6332397949454e424d526f77474159445651514b4442464a626e526c0a6243424462334a7762334a6864476c76626a45554d424947413155454277774c553246756447456751327868636d4578437a414a42674e564241674d416b4e420a4d517377435159445651514745774a56557a425a4d424d4742797147534d34394167454743437147534d34394177454841304941424c39712b4e4d7032494f670a74646c31626b2f75575a352b5447516d38614369387a373866732b664b435133642b75447a586e56544154325a68444369667949754a77764e33774e427039690a484253534d4a4d4a72424f6a6762737767626777487759445652306a42426777466f4155496d554d316c71644e496e7a6737535655723951477a6b6e427177770a556759445652306642457377535442486f45576751345a426148523063484d364c79396a5a584a3061575a70593246305a584d7564484a316333526c5a484e6c0a636e5a705932567a4c6d6c75644756734c6d4e766253394a626e526c62464e4857464a76623352445153356a636d7777485159445652304f42425945464e446f0a71747031312f6b7553526559504873555a644456386c6c4e4d41344741315564447745422f77514541774942426a415342674e5648524d4241663845434441470a4151482f416745414d416f4743437147534d343942414d43413063414d45514349432f396a2b3834542b487a74564f2f734f5142574a6253642b2f327565784b0a342b6141306a6346424c63704169413364684d72463563443532743646714d764149706a385864476d79326265656c6a4c4a4b2b707a706352413d3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a2d2d2d2d2d424547494e2043455254494649434154452d2d2d2d2d0a4d4949436a6a4343416a53674177494241674955496d554d316c71644e496e7a6737535655723951477a6b6e42717777436759494b6f5a497a6a3045417749770a614445614d4267474131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e760a636e4276636d4630615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a0a42674e5642415954416c56544d423458445445344d4455794d5445774e4445784d566f5844544d7a4d4455794d5445774e4445784d466f77614445614d4267470a4131554541777752535735305a5777675530645949464a766233516751304578476a415942674e5642416f4d45556c756447567349454e76636e4276636d46300a615739754d5251774567594456515148444174545957353059534244624746795954454c4d416b47413155454341774351304578437a414a42674e56424159540a416c56544d466b77457759484b6f5a497a6a3043415159494b6f5a497a6a3044415163445167414543366e45774d4449595a4f6a2f69505773437a61454b69370a314f694f534c52466857476a626e42564a66566e6b59347533496a6b4459594c304d784f346d717379596a6c42616c54565978465032734a424b357a6c4b4f420a757a43427544416642674e5648534d4547444157674251695a517a575770303069664f44744a5653763141624f5363477244425342674e5648523845537a424a0a4d45656752614244686b466f64485277637a6f764c324e6c636e52705a6d6c6a5958526c63793530636e567a6447566b63325679646d6c6a5a584d75615735300a5a577775593239744c306c756447567355306459556d397664454e424c6d4e796244416442674e564851344546675155496d554d316c71644e496e7a673753560a55723951477a6b6e4271777744675944565230504151482f42415144416745474d42494741315564457745422f7751494d4159424166384341514577436759490a4b6f5a497a6a30454177494453414177525149675151732f30387279636450617543466b3855505158434d416c736c6f4265374e7761514754636470613045430a495143557438534776784b6d6a70634d2f7a3057503944766f3868326b3564753169574464426b416e2b306969413d3d0a2d2d2d2d2d454e442043455254494649434154452d2d2d2d2d0a0001000000000000000100000000000000100000000000000020000000000000007367785f7265706f72745f6461746100a18f4dd33a4861d5b0eb1c28fd101d55aa72999327aaa3615e98aa618702e5b3"}}}'
    headers:
      content-length:
      - '28866'
      content-type:
      - application/json
      x-ms-ccf-transaction-id:
      - '2.1027'
    status:
      code: 200
      message: OK
version: 1
