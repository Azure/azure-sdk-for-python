{
    "chosen_version": "0.1-preview",
    "total_api_version_list": ["0.1-preview"],
    "client": {
        "name": "ConfidentialLedgerClient",
        "filename": "_confidential_ledger_client",
        "description": "The ConfidentialLedgerClient writes and retrieves ledger entries against the Confidential Ledger service.",
        "base_url": null,
        "custom_base_url": "\u0027{ledgerBaseUrl}\u0027",
        "azure_arm": false,
        "has_lro_operations": false,
        "client_side_validation": false,
        "sync_imports": "{\"regular\": {\"azurecore\": {\"azure.profiles\": [\"KnownProfiles\", \"ProfileDefinition\"], \"azure.profiles.multiapiclient\": [\"MultiApiClientMixin\"], \"msrest\": [\"Deserializer\", \"Serializer\"], \"azure.core\": [\"PipelineClient\"]}, \"local\": {\"._configuration\": [\"ConfidentialLedgerClientConfiguration\"], \"._operations_mixin\": [\"ConfidentialLedgerClientOperationsMixin\"]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Optional\"]}, \"azurecore\": {\"azure.core.pipeline.transport\": [\"HttpRequest\", \"HttpResponse\"]}}}",
        "async_imports": "{\"regular\": {\"azurecore\": {\"azure.profiles\": [\"KnownProfiles\", \"ProfileDefinition\"], \"azure.profiles.multiapiclient\": [\"MultiApiClientMixin\"], \"msrest\": [\"Deserializer\", \"Serializer\"], \"azure.core\": [\"AsyncPipelineClient\"]}, \"local\": {\"._configuration\": [\"ConfidentialLedgerClientConfiguration\"], \"._operations_mixin\": [\"ConfidentialLedgerClientOperationsMixin\"]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Optional\"]}, \"azurecore\": {\"azure.core.pipeline.transport\": [\"AsyncHttpResponse\", \"HttpRequest\"]}}}"
    },
    "global_parameters": {
        "sync": {
        },
        "async": {
        },
        "constant": {
        },
        "call": "",
        "service_client_specific": {
            "sync": {
                "api_version": {
                    "signature": "api_version=None, # type: Optional[str]",
                    "description": "API version to use if no profile is provided, or if missing in profile.",
                    "docstring_type": "str",
                    "required": false
                },
                "profile": {
                    "signature": "profile=KnownProfiles.default, # type: KnownProfiles",
                    "description": "A profile definition, from KnownProfiles to dict.",
                    "docstring_type": "azure.profiles.KnownProfiles",
                    "required": false
                }
            },
            "async": {
                "api_version": {
                    "signature": "api_version: Optional[str] = None,",
                    "description": "API version to use if no profile is provided, or if missing in profile.",
                    "docstring_type": "str",
                    "required": false
                },
                "profile": {
                    "signature": "profile: KnownProfiles = KnownProfiles.default,",
                    "description": "A profile definition, from KnownProfiles to dict.",
                    "docstring_type": "azure.profiles.KnownProfiles",
                    "required": false
                }
            }
        }
    },
    "config": {
        "credential": false,
        "credential_scopes": null,
        "credential_default_policy_type": "BearerTokenCredentialPolicy",
        "credential_default_policy_type_has_async_version": true,
        "credential_key_header_name": null,
        "sync_imports": "{\"regular\": {\"azurecore\": {\"azure.core.configuration\": [\"Configuration\"], \"azure.core.pipeline\": [\"policies\"]}, \"local\": {\"._version\": [\"VERSION\"]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\"]}}}",
        "async_imports": "{\"regular\": {\"azurecore\": {\"azure.core.configuration\": [\"Configuration\"], \"azure.core.pipeline\": [\"policies\"]}, \"local\": {\".._version\": [\"VERSION\"]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\"]}}}"
    },
    "operation_groups": {
    },
    "operation_mixins": {
        "sync_imports": "{\"regular\": {\"azurecore\": {\"azure.core.exceptions\": [\"ClientAuthenticationError\", \"HttpResponseError\", \"ResourceExistsError\", \"ResourceNotFoundError\", \"map_error\"], \"azure.core.pipeline\": [\"PipelineResponse\"], \"azure.core.pipeline.transport\": [\"HttpRequest\", \"HttpResponse\"], \"azure.core.paging\": [\"ItemPaged\"]}, \"stdlib\": {\"warnings\": [null]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"Callable\", \"Dict\", \"Generic\", \"Iterable\", \"Optional\", \"TypeVar\", \"Union\"]}}}",
        "async_imports": "{\"regular\": {\"azurecore\": {\"azure.core.exceptions\": [\"ClientAuthenticationError\", \"HttpResponseError\", \"ResourceExistsError\", \"ResourceNotFoundError\", \"map_error\"], \"azure.core.pipeline\": [\"PipelineResponse\"], \"azure.core.pipeline.transport\": [\"AsyncHttpResponse\", \"HttpRequest\"], \"azure.core.async_paging\": [\"AsyncItemPaged\", \"AsyncList\"]}, \"stdlib\": {\"warnings\": [null]}}, \"conditional\": {\"stdlib\": {\"typing\": [\"Any\", \"AsyncIterable\", \"Callable\", \"Dict\", \"Generic\", \"Optional\", \"TypeVar\", \"Union\"]}}}",
        "operations": {
            "get_constitution" : {
                "sync": {
                    "signature": "def get_constitution(\n    self,\n    ledger_base_url,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Gets the constitution used for governance.\n\nThe constitution is a script that assesses and applies proposals from consortium members.\n\n:param ledger_base_url: The Confidential Ledger URL, for example\n https://contoso.eastus.cloudapp.azure.com.\n:type ledger_base_url: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: Constitution, or the result of cls(response)\n:rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.Constitution\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def get_constitution(\n    self,\n    ledger_base_url: str,\n    **kwargs\n) -\u003e \"_models.Constitution\":\n",
                    "doc": "\"\"\"Gets the constitution used for governance.\n\nThe constitution is a script that assesses and applies proposals from consortium members.\n\n:param ledger_base_url: The Confidential Ledger URL, for example\n https://contoso.eastus.cloudapp.azure.com.\n:type ledger_base_url: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: Constitution, or the result of cls(response)\n:rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.Constitution\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "ledger_base_url"
            },
            "get_consortium_members" : {
                "sync": {
                    "signature": "def get_consortium_members(\n    self,\n    ledger_base_url,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Gets the consortium members.\n\nConsortium members can manage the Confidential Ledger.\n\n:param ledger_base_url: The Confidential Ledger URL, for example\n https://contoso.eastus.cloudapp.azure.com.\n:type ledger_base_url: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: Consortium, or the result of cls(response)\n:rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.Consortium\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def get_consortium_members(\n    self,\n    ledger_base_url: str,\n    **kwargs\n) -\u003e \"_models.Consortium\":\n",
                    "doc": "\"\"\"Gets the consortium members.\n\nConsortium members can manage the Confidential Ledger.\n\n:param ledger_base_url: The Confidential Ledger URL, for example\n https://contoso.eastus.cloudapp.azure.com.\n:type ledger_base_url: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: Consortium, or the result of cls(response)\n:rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.Consortium\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "ledger_base_url"
            },
            "get_enclave_quotes" : {
                "sync": {
                    "signature": "def get_enclave_quotes(\n    self,\n    ledger_base_url,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Gets quotes for all nodes of the Confidential Ledger.\n\nA quote is an SGX enclave measurement that can be used to verify the validity of a node and its\nenclave.\n\n:param ledger_base_url: The Confidential Ledger URL, for example\n https://contoso.eastus.cloudapp.azure.com.\n:type ledger_base_url: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: ConfidentialLedgerEnclaves, or the result of cls(response)\n:rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.ConfidentialLedgerEnclaves\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def get_enclave_quotes(\n    self,\n    ledger_base_url: str,\n    **kwargs\n) -\u003e \"_models.ConfidentialLedgerEnclaves\":\n",
                    "doc": "\"\"\"Gets quotes for all nodes of the Confidential Ledger.\n\nA quote is an SGX enclave measurement that can be used to verify the validity of a node and its\nenclave.\n\n:param ledger_base_url: The Confidential Ledger URL, for example\n https://contoso.eastus.cloudapp.azure.com.\n:type ledger_base_url: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: ConfidentialLedgerEnclaves, or the result of cls(response)\n:rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.ConfidentialLedgerEnclaves\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "ledger_base_url"
            },
            "get_ledger_entries" : {
                "sync": {
                    "signature": "def get_ledger_entries(\n    self,\n    ledger_base_url,  # type: str\n    sub_ledger_id=None,  # type: Optional[str]\n    from_transaction_id=None,  # type: Optional[str]\n    to_transaction_id=None,  # type: Optional[str]\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Gets ledger entries from a sub-ledger corresponding to a range.\n\nA sub-ledger id may optionally be specified. Only entries in the specified (or default) sub-\nledger will be returned.\n\n:param ledger_base_url: The Confidential Ledger URL, for example\n https://contoso.eastus.cloudapp.azure.com.\n:type ledger_base_url: str\n:param sub_ledger_id: The sub-ledger id.\n:type sub_ledger_id: str\n:param from_transaction_id: Specify the first transaction ID in a range.\n:type from_transaction_id: str\n:param to_transaction_id: Specify the last transaction ID in a range.\n:type to_transaction_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either PagedLedgerEntries or the result of cls(response)\n:rtype: ~azure.core.paging.ItemPaged[~azure.confidentialledger._generated_ledger.v0_1_preview.models.PagedLedgerEntries]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": false,
                    "signature": "def get_ledger_entries(\n    self,\n    ledger_base_url: str,\n    sub_ledger_id: Optional[str] = None,\n    from_transaction_id: Optional[str] = None,\n    to_transaction_id: Optional[str] = None,\n    **kwargs\n) -\u003e AsyncItemPaged[\"_models.PagedLedgerEntries\"]:\n",
                    "doc": "\"\"\"Gets ledger entries from a sub-ledger corresponding to a range.\n\nA sub-ledger id may optionally be specified. Only entries in the specified (or default) sub-\nledger will be returned.\n\n:param ledger_base_url: The Confidential Ledger URL, for example\n https://contoso.eastus.cloudapp.azure.com.\n:type ledger_base_url: str\n:param sub_ledger_id: The sub-ledger id.\n:type sub_ledger_id: str\n:param from_transaction_id: Specify the first transaction ID in a range.\n:type from_transaction_id: str\n:param to_transaction_id: Specify the last transaction ID in a range.\n:type to_transaction_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: An iterator like instance of either PagedLedgerEntries or the result of cls(response)\n:rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.confidentialledger._generated_ledger.v0_1_preview.models.PagedLedgerEntries]\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "ledger_base_url, sub_ledger_id, from_transaction_id, to_transaction_id"
            },
            "post_ledger_entry" : {
                "sync": {
                    "signature": "def post_ledger_entry(\n    self,\n    ledger_base_url,  # type: str\n    contents,  # type: str\n    sub_ledger_id=None,  # type: Optional[str]\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Writes a ledger entry.\n\nA sub-ledger id may optionally be specified.\n\n:param ledger_base_url: The Confidential Ledger URL, for example\n https://contoso.eastus.cloudapp.azure.com.\n:type ledger_base_url: str\n:param contents: Contents of the ledger entry.\n:type contents: str\n:param sub_ledger_id: The sub-ledger id.\n:type sub_ledger_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: LedgerWriteResult, or the result of cls(response)\n:rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.LedgerWriteResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def post_ledger_entry(\n    self,\n    ledger_base_url: str,\n    contents: str,\n    sub_ledger_id: Optional[str] = None,\n    **kwargs\n) -\u003e \"_models.LedgerWriteResult\":\n",
                    "doc": "\"\"\"Writes a ledger entry.\n\nA sub-ledger id may optionally be specified.\n\n:param ledger_base_url: The Confidential Ledger URL, for example\n https://contoso.eastus.cloudapp.azure.com.\n:type ledger_base_url: str\n:param contents: Contents of the ledger entry.\n:type contents: str\n:param sub_ledger_id: The sub-ledger id.\n:type sub_ledger_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: LedgerWriteResult, or the result of cls(response)\n:rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.LedgerWriteResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "ledger_base_url, contents, sub_ledger_id"
            },
            "get_ledger_entry_for_transaction_id" : {
                "sync": {
                    "signature": "def get_ledger_entry_for_transaction_id(\n    self,\n    ledger_base_url,  # type: str\n    transaction_id,  # type: str\n    sub_ledger_id=None,  # type: Optional[str]\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Gets the ledger entry at the specified transaction id. A sub-ledger id may optionally be specified to indicate the sub-ledger from which to fetch the value.\n\nTo return older ledger entries, the relevant sections of the ledger must be read from disk and\nvalidated. To prevent blocking within the enclave, the response will indicate whether the entry\nis ready and part of the response, or if the loading is still ongoing.\n\n:param ledger_base_url: The Confidential Ledger URL, for example\n https://contoso.eastus.cloudapp.azure.com.\n:type ledger_base_url: str\n:param transaction_id: Identifies a write transaction.\n:type transaction_id: str\n:param sub_ledger_id: The sub-ledger id.\n:type sub_ledger_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: LedgerQueryResult, or the result of cls(response)\n:rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.LedgerQueryResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def get_ledger_entry_for_transaction_id(\n    self,\n    ledger_base_url: str,\n    transaction_id: str,\n    sub_ledger_id: Optional[str] = None,\n    **kwargs\n) -\u003e \"_models.LedgerQueryResult\":\n",
                    "doc": "\"\"\"Gets the ledger entry at the specified transaction id. A sub-ledger id may optionally be specified to indicate the sub-ledger from which to fetch the value.\n\nTo return older ledger entries, the relevant sections of the ledger must be read from disk and\nvalidated. To prevent blocking within the enclave, the response will indicate whether the entry\nis ready and part of the response, or if the loading is still ongoing.\n\n:param ledger_base_url: The Confidential Ledger URL, for example\n https://contoso.eastus.cloudapp.azure.com.\n:type ledger_base_url: str\n:param transaction_id: Identifies a write transaction.\n:type transaction_id: str\n:param sub_ledger_id: The sub-ledger id.\n:type sub_ledger_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: LedgerQueryResult, or the result of cls(response)\n:rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.LedgerQueryResult\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "ledger_base_url, transaction_id, sub_ledger_id"
            },
            "get_receipt" : {
                "sync": {
                    "signature": "def get_receipt(\n    self,\n    ledger_base_url,  # type: str\n    transaction_id,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Gets a receipt certifying ledger contents at a particular transaction id.\n\nGets a receipt certifying ledger contents at a particular transaction id.\n\n:param ledger_base_url: The Confidential Ledger URL, for example\n https://contoso.eastus.cloudapp.azure.com.\n:type ledger_base_url: str\n:param transaction_id: Identifies a write transaction.\n:type transaction_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: TransactionReceipt, or the result of cls(response)\n:rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.TransactionReceipt\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def get_receipt(\n    self,\n    ledger_base_url: str,\n    transaction_id: str,\n    **kwargs\n) -\u003e \"_models.TransactionReceipt\":\n",
                    "doc": "\"\"\"Gets a receipt certifying ledger contents at a particular transaction id.\n\nGets a receipt certifying ledger contents at a particular transaction id.\n\n:param ledger_base_url: The Confidential Ledger URL, for example\n https://contoso.eastus.cloudapp.azure.com.\n:type ledger_base_url: str\n:param transaction_id: Identifies a write transaction.\n:type transaction_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: TransactionReceipt, or the result of cls(response)\n:rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.TransactionReceipt\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "ledger_base_url, transaction_id"
            },
            "get_transaction_status" : {
                "sync": {
                    "signature": "def get_transaction_status(\n    self,\n    ledger_base_url,  # type: str\n    transaction_id,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Gets the status of an entry identified by a transaction id.\n\nGets the status of an entry identified by a transaction id.\n\n:param ledger_base_url: The Confidential Ledger URL, for example\n https://contoso.eastus.cloudapp.azure.com.\n:type ledger_base_url: str\n:param transaction_id: Identifies a write transaction.\n:type transaction_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: TransactionStatus, or the result of cls(response)\n:rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.TransactionStatus\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def get_transaction_status(\n    self,\n    ledger_base_url: str,\n    transaction_id: str,\n    **kwargs\n) -\u003e \"_models.TransactionStatus\":\n",
                    "doc": "\"\"\"Gets the status of an entry identified by a transaction id.\n\nGets the status of an entry identified by a transaction id.\n\n:param ledger_base_url: The Confidential Ledger URL, for example\n https://contoso.eastus.cloudapp.azure.com.\n:type ledger_base_url: str\n:param transaction_id: Identifies a write transaction.\n:type transaction_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: TransactionStatus, or the result of cls(response)\n:rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.TransactionStatus\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "ledger_base_url, transaction_id"
            },
            "get_current_ledger_entry" : {
                "sync": {
                    "signature": "def get_current_ledger_entry(\n    self,\n    ledger_base_url,  # type: str\n    sub_ledger_id=None,  # type: Optional[str]\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Gets the current value available in the ledger.\n\nA sub-ledger id may optionally be specified.\n\n:param ledger_base_url: The Confidential Ledger URL, for example\n https://contoso.eastus.cloudapp.azure.com.\n:type ledger_base_url: str\n:param sub_ledger_id: The sub-ledger id.\n:type sub_ledger_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: LedgerEntry, or the result of cls(response)\n:rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.LedgerEntry\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def get_current_ledger_entry(\n    self,\n    ledger_base_url: str,\n    sub_ledger_id: Optional[str] = None,\n    **kwargs\n) -\u003e \"_models.LedgerEntry\":\n",
                    "doc": "\"\"\"Gets the current value available in the ledger.\n\nA sub-ledger id may optionally be specified.\n\n:param ledger_base_url: The Confidential Ledger URL, for example\n https://contoso.eastus.cloudapp.azure.com.\n:type ledger_base_url: str\n:param sub_ledger_id: The sub-ledger id.\n:type sub_ledger_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: LedgerEntry, or the result of cls(response)\n:rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.LedgerEntry\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "ledger_base_url, sub_ledger_id"
            },
            "delete_user" : {
                "sync": {
                    "signature": "def delete_user(\n    self,\n    ledger_base_url,  # type: str\n    user_id,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Deletes a user from the Confidential Ledger.\n\nDeletes a user from the Confidential Ledger.\n\n:param ledger_base_url: The Confidential Ledger URL, for example\n https://contoso.eastus.cloudapp.azure.com.\n:type ledger_base_url: str\n:param user_id: The user id, either an AAD object ID or certificate fingerprint.\n:type user_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: None, or the result of cls(response)\n:rtype: None\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def delete_user(\n    self,\n    ledger_base_url: str,\n    user_id: str,\n    **kwargs\n) -\u003e None:\n",
                    "doc": "\"\"\"Deletes a user from the Confidential Ledger.\n\nDeletes a user from the Confidential Ledger.\n\n:param ledger_base_url: The Confidential Ledger URL, for example\n https://contoso.eastus.cloudapp.azure.com.\n:type ledger_base_url: str\n:param user_id: The user id, either an AAD object ID or certificate fingerprint.\n:type user_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: None, or the result of cls(response)\n:rtype: None\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "ledger_base_url, user_id"
            },
            "get_user" : {
                "sync": {
                    "signature": "def get_user(\n    self,\n    ledger_base_url,  # type: str\n    user_id,  # type: str\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Gets a user.\n\nGets a user.\n\n:param ledger_base_url: The Confidential Ledger URL, for example\n https://contoso.eastus.cloudapp.azure.com.\n:type ledger_base_url: str\n:param user_id: The user id, either an AAD object ID or certificate fingerprint.\n:type user_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: LedgerUser, or the result of cls(response)\n:rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.LedgerUser\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def get_user(\n    self,\n    ledger_base_url: str,\n    user_id: str,\n    **kwargs\n) -\u003e \"_models.LedgerUser\":\n",
                    "doc": "\"\"\"Gets a user.\n\nGets a user.\n\n:param ledger_base_url: The Confidential Ledger URL, for example\n https://contoso.eastus.cloudapp.azure.com.\n:type ledger_base_url: str\n:param user_id: The user id, either an AAD object ID or certificate fingerprint.\n:type user_id: str\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: LedgerUser, or the result of cls(response)\n:rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.LedgerUser\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "ledger_base_url, user_id"
            },
            "patch_user" : {
                "sync": {
                    "signature": "def patch_user(\n    self,\n    ledger_base_url,  # type: str\n    user_id,  # type: str\n    assigned_role,  # type: Union[str, \"_models.ConfidentialLedgerUserRoleName\"]\n    **kwargs  # type: Any\n):\n",
                    "doc": "\"\"\"Adds a user or updates a user\u0027s fields.\n\nA JSON merge patch is applied for existing users.\n\n:param ledger_base_url: The Confidential Ledger URL, for example\n https://contoso.eastus.cloudapp.azure.com.\n:type ledger_base_url: str\n:param user_id: The user id, either an AAD object ID or certificate fingerprint.\n:type user_id: str\n:param assigned_role: Represents an assignable role.\n:type assigned_role: str or ~azure.confidentialledger._generated_ledger.v0_1_preview.models.ConfidentialLedgerUserRoleName\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: LedgerUser, or the result of cls(response)\n:rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.LedgerUser\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "async": {
                    "coroutine": true,
                    "signature": "async def patch_user(\n    self,\n    ledger_base_url: str,\n    user_id: str,\n    assigned_role: Union[str, \"_models.ConfidentialLedgerUserRoleName\"],\n    **kwargs\n) -\u003e \"_models.LedgerUser\":\n",
                    "doc": "\"\"\"Adds a user or updates a user\u0027s fields.\n\nA JSON merge patch is applied for existing users.\n\n:param ledger_base_url: The Confidential Ledger URL, for example\n https://contoso.eastus.cloudapp.azure.com.\n:type ledger_base_url: str\n:param user_id: The user id, either an AAD object ID or certificate fingerprint.\n:type user_id: str\n:param assigned_role: Represents an assignable role.\n:type assigned_role: str or ~azure.confidentialledger._generated_ledger.v0_1_preview.models.ConfidentialLedgerUserRoleName\n:keyword callable cls: A custom type or function that will be passed the direct response\n:return: LedgerUser, or the result of cls(response)\n:rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.LedgerUser\n:raises: ~azure.core.exceptions.HttpResponseError\n\"\"\""
                },
                "call": "ledger_base_url, user_id, assigned_role"
            }
        }
    }
}