# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
from msrest import Serializer, Deserializer
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Optional, TypeVar, Union


class ConfidentialLedgerClientOperationsMixin(object):
    def delete_user(
        self,
        ledger_base_url,  # type: str
        user_id,  # type: str
        **kwargs  # type: Any
    ):
        """Deletes a user from the Confidential Ledger.

        Deletes a user from the Confidential Ledger.

        :param ledger_base_url: The Confidential Ledger URL, for example
         https://contoso.eastus.cloudapp.azure.com.
        :type ledger_base_url: str
        :param user_id: The user id, either an AAD object ID or certificate fingerprint.
        :type user_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version("delete_user")
        if api_version == "0.1-preview":
            from .v0_1_preview.operations import (
                ConfidentialLedgerClientOperationsMixin as OperationClass,
            )
        else:
            raise ValueError(
                "API version {} does not have operation 'delete_user'".format(
                    api_version
                )
            )
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance._config = self._config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._serialize.client_side_validation = False
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        return mixin_instance.delete_user(ledger_base_url, user_id, **kwargs)

    def get_consortium_members(
        self,
        ledger_base_url,  # type: str
        **kwargs  # type: Any
    ):
        """Gets the consortium members.

        Consortium members can manage the Confidential Ledger.

        :param ledger_base_url: The Confidential Ledger URL, for example
         https://contoso.eastus.cloudapp.azure.com.
        :type ledger_base_url: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Consortium, or the result of cls(response)
        :rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.Consortium
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version("get_consortium_members")
        if api_version == "0.1-preview":
            from .v0_1_preview.operations import (
                ConfidentialLedgerClientOperationsMixin as OperationClass,
            )
        else:
            raise ValueError(
                "API version {} does not have operation 'get_consortium_members'".format(
                    api_version
                )
            )
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance._config = self._config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._serialize.client_side_validation = False
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        return mixin_instance.get_consortium_members(ledger_base_url, **kwargs)

    def get_constitution(
        self,
        ledger_base_url,  # type: str
        **kwargs  # type: Any
    ):
        """Gets the constitution used for governance.

        The constitution is a script that assesses and applies proposals from consortium members.

        :param ledger_base_url: The Confidential Ledger URL, for example
         https://contoso.eastus.cloudapp.azure.com.
        :type ledger_base_url: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Constitution, or the result of cls(response)
        :rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.Constitution
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version("get_constitution")
        if api_version == "0.1-preview":
            from .v0_1_preview.operations import (
                ConfidentialLedgerClientOperationsMixin as OperationClass,
            )
        else:
            raise ValueError(
                "API version {} does not have operation 'get_constitution'".format(
                    api_version
                )
            )
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance._config = self._config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._serialize.client_side_validation = False
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        return mixin_instance.get_constitution(ledger_base_url, **kwargs)

    def get_current_ledger_entry(
        self,
        ledger_base_url,  # type: str
        sub_ledger_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        """Gets the current value available in the ledger.

        A sub-ledger id may optionally be specified.

        :param ledger_base_url: The Confidential Ledger URL, for example
         https://contoso.eastus.cloudapp.azure.com.
        :type ledger_base_url: str
        :param sub_ledger_id: The sub-ledger id.
        :type sub_ledger_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: LedgerEntry, or the result of cls(response)
        :rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.LedgerEntry
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version("get_current_ledger_entry")
        if api_version == "0.1-preview":
            from .v0_1_preview.operations import (
                ConfidentialLedgerClientOperationsMixin as OperationClass,
            )
        else:
            raise ValueError(
                "API version {} does not have operation 'get_current_ledger_entry'".format(
                    api_version
                )
            )
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance._config = self._config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._serialize.client_side_validation = False
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        return mixin_instance.get_current_ledger_entry(
            ledger_base_url, sub_ledger_id, **kwargs
        )

    def get_enclave_quotes(
        self,
        ledger_base_url,  # type: str
        **kwargs  # type: Any
    ):
        """Gets quotes for all nodes of the Confidential Ledger.

        A quote is an SGX enclave measurement that can be used to verify the validity of a node and its
        enclave.

        :param ledger_base_url: The Confidential Ledger URL, for example
         https://contoso.eastus.cloudapp.azure.com.
        :type ledger_base_url: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ConfidentialLedgerEnclaves, or the result of cls(response)
        :rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.ConfidentialLedgerEnclaves
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version("get_enclave_quotes")
        if api_version == "0.1-preview":
            from .v0_1_preview.operations import (
                ConfidentialLedgerClientOperationsMixin as OperationClass,
            )
        else:
            raise ValueError(
                "API version {} does not have operation 'get_enclave_quotes'".format(
                    api_version
                )
            )
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance._config = self._config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._serialize.client_side_validation = False
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        return mixin_instance.get_enclave_quotes(ledger_base_url, **kwargs)

    def get_ledger_entries(
        self,
        ledger_base_url,  # type: str
        sub_ledger_id=None,  # type: Optional[str]
        from_transaction_id=None,  # type: Optional[str]
        to_transaction_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        """Gets ledger entries corresponding to a range of time.

        A sub-ledger id may optionally be specified. Only entries in that sub-ledger will be returned.

        :param ledger_base_url: The Confidential Ledger URL, for example
         https://contoso.eastus.cloudapp.azure.com.
        :type ledger_base_url: str
        :param sub_ledger_id: The sub-ledger id.
        :type sub_ledger_id: str
        :param from_transaction_id: Specify the first transaction ID in a range.
        :type from_transaction_id: str
        :param to_transaction_id: Specify the last transaction ID in a range.
        :type to_transaction_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: PagedLedgerEntries, or the result of cls(response)
        :rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.PagedLedgerEntries
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version("get_ledger_entries")
        if api_version == "0.1-preview":
            from .v0_1_preview.operations import (
                ConfidentialLedgerClientOperationsMixin as OperationClass,
            )
        else:
            raise ValueError(
                "API version {} does not have operation 'get_ledger_entries'".format(
                    api_version
                )
            )
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance._config = self._config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._serialize.client_side_validation = False
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        return mixin_instance.get_ledger_entries(
            ledger_base_url,
            sub_ledger_id,
            from_transaction_id,
            to_transaction_id,
            **kwargs
        )

    def get_ledger_entry_for_transaction_id(
        self,
        ledger_base_url,  # type: str
        transaction_id,  # type: str
        sub_ledger_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        """Gets the ledger entry at the specified transaction id. A sub-ledger id may optionally be specified to indicate the sub-ledger from which to fetch the value.

        To return older ledger entries, the relevant sections of the ledger must be read from disk and
        validated. To prevent blocking within the enclave, the response will indicate whether the entry
        is ready and part of the response, or if the loading is still ongoing.

        :param ledger_base_url: The Confidential Ledger URL, for example
         https://contoso.eastus.cloudapp.azure.com.
        :type ledger_base_url: str
        :param transaction_id: Identifies a write transaction.
        :type transaction_id: str
        :param sub_ledger_id: The sub-ledger id.
        :type sub_ledger_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: LedgerQueryResult, or the result of cls(response)
        :rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.LedgerQueryResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version("get_ledger_entry_for_transaction_id")
        if api_version == "0.1-preview":
            from .v0_1_preview.operations import (
                ConfidentialLedgerClientOperationsMixin as OperationClass,
            )
        else:
            raise ValueError(
                "API version {} does not have operation 'get_ledger_entry_for_transaction_id'".format(
                    api_version
                )
            )
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance._config = self._config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._serialize.client_side_validation = False
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        return mixin_instance.get_ledger_entry_for_transaction_id(
            ledger_base_url, transaction_id, sub_ledger_id, **kwargs
        )

    def get_receipt(
        self,
        ledger_base_url,  # type: str
        transaction_id,  # type: str
        **kwargs  # type: Any
    ):
        """Gets a receipt certifying ledger contents at a particular transaction id.

        Gets a receipt certifying ledger contents at a particular transaction id.

        :param ledger_base_url: The Confidential Ledger URL, for example
         https://contoso.eastus.cloudapp.azure.com.
        :type ledger_base_url: str
        :param transaction_id: Identifies a write transaction.
        :type transaction_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: TransactionReceipt, or the result of cls(response)
        :rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.TransactionReceipt
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version("get_receipt")
        if api_version == "0.1-preview":
            from .v0_1_preview.operations import (
                ConfidentialLedgerClientOperationsMixin as OperationClass,
            )
        else:
            raise ValueError(
                "API version {} does not have operation 'get_receipt'".format(
                    api_version
                )
            )
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance._config = self._config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._serialize.client_side_validation = False
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        return mixin_instance.get_receipt(ledger_base_url, transaction_id, **kwargs)

    def get_transaction_status(
        self,
        ledger_base_url,  # type: str
        transaction_id,  # type: str
        **kwargs  # type: Any
    ):
        """Gets the status of an entry identified by a transaction id.

        Gets the status of an entry identified by a transaction id.

        :param ledger_base_url: The Confidential Ledger URL, for example
         https://contoso.eastus.cloudapp.azure.com.
        :type ledger_base_url: str
        :param transaction_id: Identifies a write transaction.
        :type transaction_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: TransactionStatus, or the result of cls(response)
        :rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.TransactionStatus
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version("get_transaction_status")
        if api_version == "0.1-preview":
            from .v0_1_preview.operations import (
                ConfidentialLedgerClientOperationsMixin as OperationClass,
            )
        else:
            raise ValueError(
                "API version {} does not have operation 'get_transaction_status'".format(
                    api_version
                )
            )
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance._config = self._config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._serialize.client_side_validation = False
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        return mixin_instance.get_transaction_status(
            ledger_base_url, transaction_id, **kwargs
        )

    def get_user(
        self,
        ledger_base_url,  # type: str
        user_id,  # type: str
        **kwargs  # type: Any
    ):
        """Gets a user.

        Gets a user.

        :param ledger_base_url: The Confidential Ledger URL, for example
         https://contoso.eastus.cloudapp.azure.com.
        :type ledger_base_url: str
        :param user_id: The user id, either an AAD object ID or certificate fingerprint.
        :type user_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: LedgerUser, or the result of cls(response)
        :rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.LedgerUser
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version("get_user")
        if api_version == "0.1-preview":
            from .v0_1_preview.operations import (
                ConfidentialLedgerClientOperationsMixin as OperationClass,
            )
        else:
            raise ValueError(
                "API version {} does not have operation 'get_user'".format(api_version)
            )
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance._config = self._config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._serialize.client_side_validation = False
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        return mixin_instance.get_user(ledger_base_url, user_id, **kwargs)

    def patch_user(
        self,
        ledger_base_url,  # type: str
        user_id,  # type: str
        assigned_role,  # type: Union[str, "_models.ConfidentialLedgerUserRoleName"]
        **kwargs  # type: Any
    ):
        """Adds a user or updates a user's fields.

        A JSON merge patch is applied for existing users.

        :param ledger_base_url: The Confidential Ledger URL, for example
         https://contoso.eastus.cloudapp.azure.com.
        :type ledger_base_url: str
        :param user_id: The user id, either an AAD object ID or certificate fingerprint.
        :type user_id: str
        :param assigned_role: Represents an assignable role.
        :type assigned_role: str or ~azure.confidentialledger._generated_ledger.v0_1_preview.models.ConfidentialLedgerUserRoleName
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: LedgerUser, or the result of cls(response)
        :rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.LedgerUser
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version("patch_user")
        if api_version == "0.1-preview":
            from .v0_1_preview.operations import (
                ConfidentialLedgerClientOperationsMixin as OperationClass,
            )
        else:
            raise ValueError(
                "API version {} does not have operation 'patch_user'".format(
                    api_version
                )
            )
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance._config = self._config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._serialize.client_side_validation = False
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        return mixin_instance.patch_user(
            ledger_base_url, user_id, assigned_role, **kwargs
        )

    def post_ledger_entry(
        self,
        ledger_base_url,  # type: str
        contents,  # type: str
        sub_ledger_id=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        """Writes a ledger entry.

        A sub-ledger id may optionally be specified.

        :param ledger_base_url: The Confidential Ledger URL, for example
         https://contoso.eastus.cloudapp.azure.com.
        :type ledger_base_url: str
        :param contents: Contents of the ledger entry.
        :type contents: str
        :param sub_ledger_id: The sub-ledger id.
        :type sub_ledger_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: LedgerWriteResult, or the result of cls(response)
        :rtype: ~azure.confidentialledger._generated_ledger.v0_1_preview.models.LedgerWriteResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version("post_ledger_entry")
        if api_version == "0.1-preview":
            from .v0_1_preview.operations import (
                ConfidentialLedgerClientOperationsMixin as OperationClass,
            )
        else:
            raise ValueError(
                "API version {} does not have operation 'post_ledger_entry'".format(
                    api_version
                )
            )
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance._config = self._config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._serialize.client_side_validation = False
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        return mixin_instance.post_ledger_entry(
            ledger_base_url, contents, sub_ledger_id, **kwargs
        )
