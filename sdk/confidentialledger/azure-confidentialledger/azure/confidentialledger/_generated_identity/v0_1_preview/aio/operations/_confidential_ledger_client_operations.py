# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Generic, Optional, TypeVar
import warnings

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest

from ... import models as _models

T = TypeVar("T")
ClsType = Optional[
    Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]
]


class ConfidentialLedgerClientOperationsMixin:
    async def get_ledger_identity(
        self, identity_service_base_url: str, ledger_id: str, **kwargs
    ) -> "_models.LedgerIdentityInformation":
        """Gets identity information for a Confidential Ledger instance.

        Gets identity information for a Confidential Ledger instance.

        :param identity_service_base_url: The Identity Service URL, for example
         https://identity.accledger.azure.com.
        :type identity_service_base_url: str
        :param ledger_id: Id of the Confidential Ledger instance to get information for.
        :type ledger_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: LedgerIdentityInformation, or the result of cls(response)
        :rtype: ~azure.confidentialledger._generated_identity.v0_1_preview.models.LedgerIdentityInformation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop(
            "cls", None
        )  # type: ClsType["_models.LedgerIdentityInformation"]
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
        }
        error_map.update(kwargs.pop("error_map", {}))
        api_version = "0.1-preview"
        accept = "application/json"

        # Construct URL
        url = self.get_ledger_identity.metadata["url"]  # type: ignore
        path_format_arguments = {
            "identityServiceBaseUrl": self._serialize.url(
                "identity_service_base_url",
                identity_service_base_url,
                "str",
                skip_quote=True,
            ),
            "ledgerId": self._serialize.url("ledger_id", ledger_id, "str"),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters["api-version"] = self._serialize.query(
            "api_version", api_version, "str"
        )

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters["Accept"] = self._serialize.header("accept", accept, "str")

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(
            request, stream=False, **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(
                status_code=response.status_code, response=response, error_map=error_map
            )
            error = self._deserialize.failsafe_deserialize(
                _models.ConfidentialLedgerError, response
            )
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize("LedgerIdentityInformation", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_ledger_identity.metadata = {"url": "/ledgerIdentity/{ledgerId}"}  # type: ignore
