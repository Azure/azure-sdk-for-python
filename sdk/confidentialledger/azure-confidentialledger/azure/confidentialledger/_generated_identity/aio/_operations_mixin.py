# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
from msrest import Serializer, Deserializer
from typing import Any, Callable, Dict, Generic, Optional, TypeVar
import warnings

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest


class ConfidentialLedgerClientOperationsMixin(object):
    async def get_ledger_identity(
        self, identity_service_base_url: str, ledger_id: str, **kwargs
    ) -> "_models.LedgerIdentityInformation":
        """Gets identity information for a Confidential Ledger instance.

        Gets identity information for a Confidential Ledger instance.

        :param identity_service_base_url: The Identity Service URL, for example
         https://identity.accledger.azure.com.
        :type identity_service_base_url: str
        :param ledger_id: Id of the Confidential Ledger instance to get information for.
        :type ledger_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: LedgerIdentityInformation, or the result of cls(response)
        :rtype: ~azure.confidentialledger._generated_identity.v0_1_preview.models.LedgerIdentityInformation
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        api_version = self._get_api_version("get_ledger_identity")
        if api_version == "0.1-preview":
            from ..v0_1_preview.aio.operations import (
                ConfidentialLedgerClientOperationsMixin as OperationClass,
            )
        else:
            raise ValueError(
                "API version {} does not have operation 'get_ledger_identity'".format(
                    api_version
                )
            )
        mixin_instance = OperationClass()
        mixin_instance._client = self._client
        mixin_instance._config = self._config
        mixin_instance._serialize = Serializer(self._models_dict(api_version))
        mixin_instance._serialize.client_side_validation = False
        mixin_instance._deserialize = Deserializer(self._models_dict(api_version))
        return await mixin_instance.get_ledger_identity(
            identity_service_base_url, ledger_id, **kwargs
        )
