# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import CodeTransparencyPreparer
from testpreparer_async import CodeTransparencyClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestCodeTransparencyAsync(CodeTransparencyClientTestBaseAsync):
    @CodeTransparencyPreparer()
    @recorded_by_proxy_async
    async def test_get_transparency_config_cbor(self, codetransparency_endpoint):
        client = self.create_async_client(endpoint=codetransparency_endpoint)
        response = await client.get_transparency_config_cbor(
            accept="application/cbor",
        )

        # please add some check logic here by yourself
        # ...

    @CodeTransparencyPreparer()
    @recorded_by_proxy_async
    async def test_get_public_keys(self, codetransparency_endpoint):
        client = self.create_async_client(endpoint=codetransparency_endpoint)
        response = await client.get_public_keys()

        # please add some check logic here by yourself
        # ...

    @CodeTransparencyPreparer()
    @recorded_by_proxy_async
    async def test_create_entry(self, codetransparency_endpoint):
        client = self.create_async_client(endpoint=codetransparency_endpoint)
        response = await client.create_entry(
            body=bytes("bytes", encoding="utf-8"),
            content_type="str",
            accept="application/cose; application/cbor",
        )

        # please add some check logic here by yourself
        # ...

    @CodeTransparencyPreparer()
    @recorded_by_proxy_async
    async def test_get_operation(self, codetransparency_endpoint):
        client = self.create_async_client(endpoint=codetransparency_endpoint)
        response = await client.get_operation(
            operation_id="str",
            accept="application/cbor",
        )

        # please add some check logic here by yourself
        # ...

    @CodeTransparencyPreparer()
    @recorded_by_proxy_async
    async def test_get_entry(self, codetransparency_endpoint):
        client = self.create_async_client(endpoint=codetransparency_endpoint)
        response = await client.get_entry(
            entry_id="str",
            accept="application/cose",
        )

        # please add some check logic here by yourself
        # ...

    @CodeTransparencyPreparer()
    @recorded_by_proxy_async
    async def test_get_entry_statement(self, codetransparency_endpoint):
        client = self.create_async_client(endpoint=codetransparency_endpoint)
        response = await client.get_entry_statement(
            entry_id="str",
            accept="application/cose",
        )

        # please add some check logic here by yourself
        # ...
