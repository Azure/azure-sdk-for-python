# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from devtools_testutils.aio import recorded_by_proxy_async
from testpreparer import ConfidentialLedgerPreparer
from testpreparer_async import ConfidentialLedgerClientTestBaseAsync


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestConfidentialLedgerAsync(ConfidentialLedgerClientTestBaseAsync):
    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_get_constitution(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.get_constitution()

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_list_consortium_members(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = client.list_consortium_members()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_get_enclave_quotes(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.get_enclave_quotes()

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_list_collections(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = client.list_collections()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_list_ledger_entries(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = client.list_ledger_entries()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_create_ledger_entry(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.create_ledger_entry(
            entry={
                "contents": "str",
                "collectionId": "str",
                "postHooks": [
                    {
                        "functionId": "str",
                        "properties": {
                            "arguments": ["str"],
                            "exportedFunctionName": "str",
                            "runtimeOptions": {
                                "log_exception_details": bool,
                                "max_cached_interpreters": 0,
                                "max_execution_time_ms": 0,
                                "max_heap_bytes": 0,
                                "max_stack_bytes": 0,
                                "return_exception_details": bool,
                            },
                        },
                    }
                ],
                "preHooks": [
                    {
                        "functionId": "str",
                        "properties": {
                            "arguments": ["str"],
                            "exportedFunctionName": "str",
                            "runtimeOptions": {
                                "log_exception_details": bool,
                                "max_cached_interpreters": 0,
                                "max_execution_time_ms": 0,
                                "max_heap_bytes": 0,
                                "max_stack_bytes": 0,
                                "return_exception_details": bool,
                            },
                        },
                    }
                ],
                "transactionId": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_get_ledger_entry(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.get_ledger_entry(
            transaction_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_get_receipt(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.get_receipt(
            transaction_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_get_transaction_status(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.get_transaction_status(
            transaction_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_get_current_ledger_entry(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.get_current_ledger_entry()

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_list_users(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = client.list_users()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_list_ledger_users(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = client.list_ledger_users()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_delete_user(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.delete_user(
            user_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_get_user(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.get_user(
            user_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_create_or_update_user(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.create_or_update_user(
            user_id="str",
            user_details={"assignedRole": "str", "userId": "str"},
        )

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_delete_ledger_user(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.delete_ledger_user(
            user_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_get_ledger_user(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.get_ledger_user(
            user_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_create_or_update_ledger_user(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.create_or_update_ledger_user(
            user_id="str",
            user_multiple_roles={"assignedRoles": ["str"], "userId": "str"},
        )

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_get_user_defined_endpoint(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.get_user_defined_endpoint()

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_create_user_defined_endpoint(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.create_user_defined_endpoint(
            bundle={
                "metadata": {
                    "endpoints": {
                        "str": {
                            "delete": {
                                "authn_policies": [{"str": {}}],
                                "forwarding_required": "str",
                                "interpreter_reuse": {"key": "str"},
                                "js_function": "str",
                                "js_module": "str",
                                "mode": "str",
                                "openapi": {"str": {}},
                                "openapi_hidden": bool,
                                "redirection_strategy": "str",
                            },
                            "get": {
                                "authn_policies": [{"str": {}}],
                                "forwarding_required": "str",
                                "interpreter_reuse": {"key": "str"},
                                "js_function": "str",
                                "js_module": "str",
                                "mode": "str",
                                "openapi": {"str": {}},
                                "openapi_hidden": bool,
                                "redirection_strategy": "str",
                            },
                            "patch": {
                                "authn_policies": [{"str": {}}],
                                "forwarding_required": "str",
                                "interpreter_reuse": {"key": "str"},
                                "js_function": "str",
                                "js_module": "str",
                                "mode": "str",
                                "openapi": {"str": {}},
                                "openapi_hidden": bool,
                                "redirection_strategy": "str",
                            },
                            "put": {
                                "authn_policies": [{"str": {}}],
                                "forwarding_required": "str",
                                "interpreter_reuse": {"key": "str"},
                                "js_function": "str",
                                "js_module": "str",
                                "mode": "str",
                                "openapi": {"str": {}},
                                "openapi_hidden": bool,
                                "redirection_strategy": "str",
                            },
                        }
                    }
                },
                "modules": [{"module": "str", "name": "str"}],
            },
        )

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_get_runtime_options(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.get_runtime_options()

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_update_runtime_options(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.update_runtime_options(
            js_runtime_options={
                "log_exception_details": bool,
                "max_cached_interpreters": 0,
                "max_execution_time_ms": 0,
                "max_heap_bytes": 0,
                "max_stack_bytes": 0,
                "return_exception_details": bool,
            },
        )

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_get_user_defined_endpoints_module(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.get_user_defined_endpoints_module(
            module_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_list_user_defined_functions(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = client.list_user_defined_functions()
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_delete_user_defined_function(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.delete_user_defined_function(
            function_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_get_user_defined_function(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.get_user_defined_function(
            function_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_create_user_defined_function(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.create_user_defined_function(
            function_id="str",
            user_defined_function={"code": "str", "id": "str"},
        )

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_execute_user_defined_function(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.execute_user_defined_function(
            function_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_get_user_defined_role(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.get_user_defined_role(
            role_name="str",
        )

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_create_user_defined_role(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.create_user_defined_role(
            roles=[{"roleActions": ["str"], "roleName": "str"}],
        )

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_update_user_defined_role(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.update_user_defined_role(
            roles=[{"roleActions": ["str"], "roleName": "str"}],
        )

        # please add some check logic here by yourself
        # ...

    @ConfidentialLedgerPreparer()
    @recorded_by_proxy_async
    async def test_delete_user_defined_role(self, confidentialledger_endpoint):
        client = self.create_async_client(endpoint=confidentialledger_endpoint)
        response = await client.delete_user_defined_role(
            role_name="str",
        )

        # please add some check logic here by yourself
        # ...
