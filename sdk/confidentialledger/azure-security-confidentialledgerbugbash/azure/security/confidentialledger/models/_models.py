# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import sys
from typing import Any, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_field

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class CollectionModel(_model_base.Model):
    """Identifier for collections.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar collection_id: The collection id. Required.
    :vartype collection_id: str
    """

    collection_id: str = rest_field(name="collectionId", readonly=True)
    """The collection id. Required. """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class LedgerEntry(_model_base.Model):
    """Details about a ledger entry.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar contents: Contents of the ledger entry. Required.
    :vartype contents: str
    :ivar collection_id: The collection id. Required.
    :vartype collection_id: str
    :ivar transaction_id: A unique identifier for the state of the ledger. If returned as part of a
     LedgerEntry, it indicates the state from which the entry was read. Required.
    :vartype transaction_id: str
    """

    contents: str = rest_field()
    """Contents of the ledger entry. Required. """
    collection_id: str = rest_field(name="collectionId", readonly=True)
    """The collection id. Required. """
    transaction_id: str = rest_field(name="transactionId", readonly=True)
    """A unique identifier for the state of the ledger. If returned as part of a LedgerEntry, it indicates the state from which the entry was read. Required. """

    @overload
    def __init__(
        self,
        *,
        contents: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class LedgerUser(_model_base.Model):
    """LedgerUser.

    Readonly variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar user_id: The user id, either an AAD object ID or certificate fingerprint. Required.
    :vartype user_id: str
    :ivar assigned_role: The user's assigned role. Required. Known values are: "Administrator",
     "Contributor", and "Reader".
    :vartype assigned_role: str or ~azure.security.confidentialledger.models.LedgerUserRole
    """

    user_id: str = rest_field(name="userId", readonly=True)
    """The user id, either an AAD object ID or certificate fingerprint. Required. """
    assigned_role: Union[str, "_models.LedgerUserRole"] = rest_field(name="assignedRole")
    """The user's assigned role. Required. Known values are: \"Administrator\", \"Contributor\", and \"Reader\"."""

    @overload
    def __init__(
        self,
        *,
        assigned_role: Union[str, "_models.LedgerUserRole"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class PagedLedgerEntries(_model_base.Model):
    """Paginated ledger entries returned in response to a query.

    All required parameters must be populated in order to send to Azure.

    :ivar entries: Array of ledger entries. Required.
    :vartype entries: list[~azure.security.confidentialledger.models.LedgerEntry]
    :ivar state: State of the ledger query. Required. Known values are: "Loading" and "Ready".
    :vartype state: str or ~azure.security.confidentialledger.models.LedgerQueryState
    :ivar next_link: Path from which to retrieve the next page of results.
    :vartype next_link: str
    """

    entries: List["_models.LedgerEntry"] = rest_field()
    """Array of ledger entries. Required. """
    state: Union[str, "_models.LedgerQueryState"] = rest_field()
    """State of the ledger query. Required. Known values are: \"Loading\" and \"Ready\"."""
    next_link: Optional[str] = rest_field(name="nextLink")
    """Path from which to retrieve the next page of results. """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class ReceiptContents(_model_base.Model):
    """The contents of a receipt."""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class TransactionReceipt(_model_base.Model):
    """A receipt certifying the transaction at the specified id.

    All required parameters must be populated in order to send to Azure.

    :ivar receipt: The receipt contents. Required.
    :vartype receipt: ~azure.security.confidentialledger.models.ReceiptContents
    :ivar state: The state of the ledger query. Required. Known values are: "Loading" and "Ready".
    :vartype state: str or ~azure.security.confidentialledger.models.LedgerQueryState
    :ivar transaction_id: The transaction ID. Required.
    :vartype transaction_id: str
    """

    receipt: "_models.ReceiptContents" = rest_field()
    """The receipt contents. Required. """
    state: Union[str, "_models.LedgerQueryState"] = rest_field()
    """The state of the ledger query. Required. Known values are: \"Loading\" and \"Ready\"."""
    transaction_id: str = rest_field(name="transactionId")
    """The transaction ID. Required. """

    @overload
    def __init__(
        self,
        *,
        receipt: "_models.ReceiptContents",
        state: Union[str, "_models.LedgerQueryState"],
        transaction_id: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class TransactionStatus(_model_base.Model):
    """Response returned to a query for the transaction status.

    All required parameters must be populated in order to send to Azure.

    :ivar state: The transaction state. Required. Known values are: "Committed" and "Pending".
    :vartype state: str or ~azure.security.confidentialledger.models.TransactionState
    :ivar transaction_id: The transaction ID. Required.
    :vartype transaction_id: str
    """

    state: Union[str, "_models.TransactionState"] = rest_field()
    """The transaction state. Required. Known values are: \"Committed\" and \"Pending\"."""
    transaction_id: str = rest_field(name="transactionId")
    """The transaction ID. Required. """

    @overload
    def __init__(
        self,
        *,
        state: Union[str, "_models.TransactionState"],
        transaction_id: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
