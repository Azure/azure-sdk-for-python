# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class ConfidentialLedgerCertUser(Model):
    """User cert and permissions associated with that user.

    :param cert: Base64 encoded public key of the user cert (.pem or .cer)
    :type cert: str
    """

    _attribute_map = {
        'cert': {'key': 'cert', 'type': 'str'},
    }

    def __init__(self, *, cert: str=None, **kwargs) -> None:
        super(ConfidentialLedgerCertUser, self).__init__(**kwargs)
        self.cert = cert


class ConfidentialLedgerModel(Model):
    """Confidential Ledger. Contains the properties of Confidential Ledger
    Resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name: Name of the Resource.
    :vartype name: str
    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar system_data: Metadata pertaining to creation and last modification
     of the resource
    :vartype system_data: ~microsoft.confidentialledger.models.SystemData
    :param location: The Azure location where the Confidential Ledger is
     running.
    :type location: str
    :param tags: Additional tags for Confidential Ledger
    :type tags: dict[str, str]
    :param properties: Properties of Confidential Ledger Resource.
    :type properties: ~microsoft.confidentialledger.models.LedgerProperties
    """

    _validation = {
        'name': {'readonly': True},
        'id': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': 'LedgerProperties'},
    }

    def __init__(self, *, location: str=None, tags=None, properties=None, **kwargs) -> None:
        super(ConfidentialLedgerModel, self).__init__(**kwargs)
        self.name = None
        self.id = None
        self.type = None
        self.system_data = None
        self.location = location
        self.tags = tags
        self.properties = properties


class ErrorAdditionalInfo(Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: object
    """

    _validation = {
        'type': {'readonly': True},
        'info': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'info': {'key': 'info', 'type': 'object'},
    }

    def __init__(self, **kwargs) -> None:
        super(ErrorAdditionalInfo, self).__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~microsoft.confidentialledger.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info:
     list[~microsoft.confidentialledger.models.ErrorAdditionalInfo]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'additional_info': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetail]'},
        'additional_info': {'key': 'additionalInfo', 'type': '[ErrorAdditionalInfo]'},
    }

    def __init__(self, **kwargs) -> None:
        super(ErrorDetail, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(Model):
    """Error response.

    Common error response for all Azure Resource Manager APIs to return error
    details for failed operations. (This also follows the OData error response
    format.).

    :param error: The error object.
    :type error: ~microsoft.confidentialledger.models.ErrorDetail
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorDetail'},
    }

    def __init__(self, *, error=None, **kwargs) -> None:
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class ErrorResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ErrorResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorResponseException, self).__init__(deserialize, response, 'ErrorResponse', *args)


class LedgerProperties(Model):
    """LedgerProperties.

    Additional Confidential Ledger properties.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar ledger_name: Unique name for the Confidential Ledger.
    :vartype ledger_name: str
    :ivar ledger_uri: Endpoint for calling Ledger Service.
    :vartype ledger_uri: str
    :ivar identity_service_uri: Endpoint for accessing network identity.
    :vartype identity_service_uri: str
    :ivar ledger_internal_namespace: Internal namespace for the Ledger
    :vartype ledger_internal_namespace: str
    :param ledger_storage_account: Name of the Blob Storage Account for saving
     ledger files
    :type ledger_storage_account: str
    :param ledger_type: Type of Confidential Ledger. Possible values include:
     'Unknown', 'Public', 'Private'
    :type ledger_type: str or ~microsoft.confidentialledger.models.LedgerType
    :ivar provisioning_state: Provisioning state of Ledger Resource. Possible
     values include: 'Unknown', 'Succeeded', 'Failed', 'Canceled', 'Creating',
     'Deleting', 'Updating'
    :vartype provisioning_state: str or
     ~microsoft.confidentialledger.models.ProvisioningState
    :param cert_users: Array of all the cert based users who can access
     Confidential Ledger
    :type cert_users:
     list[~microsoft.confidentialledger.models.ConfidentialLedgerCertUser]
    """

    _validation = {
        'ledger_name': {'readonly': True},
        'ledger_uri': {'readonly': True},
        'identity_service_uri': {'readonly': True},
        'ledger_internal_namespace': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'ledger_name': {'key': 'ledgerName', 'type': 'str'},
        'ledger_uri': {'key': 'ledgerUri', 'type': 'str'},
        'identity_service_uri': {'key': 'identityServiceUri', 'type': 'str'},
        'ledger_internal_namespace': {'key': 'ledgerInternalNamespace', 'type': 'str'},
        'ledger_storage_account': {'key': 'ledgerStorageAccount', 'type': 'str'},
        'ledger_type': {'key': 'ledgerType', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'cert_users': {'key': 'certUsers', 'type': '[ConfidentialLedgerCertUser]'},
    }

    def __init__(self, *, ledger_storage_account: str=None, ledger_type=None, cert_users=None, **kwargs) -> None:
        super(LedgerProperties, self).__init__(**kwargs)
        self.ledger_name = None
        self.ledger_uri = None
        self.identity_service_uri = None
        self.ledger_internal_namespace = None
        self.ledger_storage_account = ledger_storage_account
        self.ledger_type = ledger_type
        self.provisioning_state = None
        self.cert_users = cert_users


class Location(Model):
    """Location of the ARM Resource.

    :param location: The Azure location where the Confidential Ledger is
     running.
    :type location: str
    """

    _attribute_map = {
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(self, *, location: str=None, **kwargs) -> None:
        super(Location, self).__init__(**kwargs)
        self.location = location


class Resource(Model):
    """An Azure resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name: Name of the Resource.
    :vartype name: str
    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar system_data: Metadata pertaining to creation and last modification
     of the resource
    :vartype system_data: ~microsoft.confidentialledger.models.SystemData
    """

    _validation = {
        'name': {'readonly': True},
        'id': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
    }

    def __init__(self, **kwargs) -> None:
        super(Resource, self).__init__(**kwargs)
        self.name = None
        self.id = None
        self.type = None
        self.system_data = None


class ResourceProviderOperationDefinition(Model):
    """Describes the Resource Provider Operation.

    :param name: Resource provider operation name.
    :type name: str
    :param is_data_action: Indicates whether the operation is data action or
     not.
    :type is_data_action: bool
    :param display: Details about the operations
    :type display:
     ~microsoft.confidentialledger.models.ResourceProviderOperationDisplay
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'is_data_action': {'key': 'isDataAction', 'type': 'bool'},
        'display': {'key': 'display', 'type': 'ResourceProviderOperationDisplay'},
    }

    def __init__(self, *, name: str=None, is_data_action: bool=None, display=None, **kwargs) -> None:
        super(ResourceProviderOperationDefinition, self).__init__(**kwargs)
        self.name = name
        self.is_data_action = is_data_action
        self.display = display


class ResourceProviderOperationDisplay(Model):
    """Describes the properties of the Operation.

    :param provider: Name of the resource provider.
    :type provider: str
    :param resource: Name of the resource type.
    :type resource: str
    :param operation: Name of the resource provider operation.
    :type operation: str
    :param description: Description of the resource provider operation.
    :type description: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(self, *, provider: str=None, resource: str=None, operation: str=None, description: str=None, **kwargs) -> None:
        super(ResourceProviderOperationDisplay, self).__init__(**kwargs)
        self.provider = provider
        self.resource = resource
        self.operation = operation
        self.description = description


class SystemData(Model):
    """Metadata pertaining to creation and last modification of the resource.

    :param created_by: The identity that created the resource.
    :type created_by: str
    :param created_by_type: The type of identity that created the resource.
     Possible values include: 'User', 'Application', 'ManagedIdentity', 'Key'
    :type created_by_type: str or
     ~microsoft.confidentialledger.models.CreatedByType
    :param created_at: The timestamp of resource creation (UTC).
    :type created_at: datetime
    :param last_modified_by: The identity that last modified the resource.
    :type last_modified_by: str
    :param last_modified_by_type: The type of identity that last modified the
     resource. Possible values include: 'User', 'Application',
     'ManagedIdentity', 'Key'
    :type last_modified_by_type: str or
     ~microsoft.confidentialledger.models.CreatedByType
    :param last_modified_at: The type of identity that last modified the
     resource.
    :type last_modified_at: datetime
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
    }

    def __init__(self, *, created_by: str=None, created_by_type=None, created_at=None, last_modified_by: str=None, last_modified_by_type=None, last_modified_at=None, **kwargs) -> None:
        super(SystemData, self).__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class Tags(Model):
    """Tags for Confidential Ledger Resource.

    :param tags: Additional tags for Confidential Ledger
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, *, tags=None, **kwargs) -> None:
        super(Tags, self).__init__(**kwargs)
        self.tags = tags
