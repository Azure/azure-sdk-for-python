# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class Approval(Model):
    """Request content object, in the use of Approve or Deny a Lockbox request.

    :param decision: Approval decision to the Lockbox request. Possible values
     include: 'Approve', 'Deny'
    :type decision: str or ~microsoft.customerlockbox.models.Decision
    :param reason: Reason of the decision
    :type reason: str
    """

    _attribute_map = {
        'decision': {'key': 'decision', 'type': 'str'},
        'reason': {'key': 'reason', 'type': 'str'},
    }

    def __init__(self, *, decision=None, reason: str=None, **kwargs) -> None:
        super(Approval, self).__init__(**kwargs)
        self.decision = decision
        self.reason = reason


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class ErrorAdditionalInfo(Model):
    """An error additional info for the Lockbox service.

    :param type: The type of error info.
    :type type: str
    :param info:
    :type info: ~microsoft.customerlockbox.models.ErrorAdditionalInfoInfo
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'info': {'key': 'info', 'type': 'ErrorAdditionalInfoInfo'},
    }

    def __init__(self, *, type: str=None, info=None, **kwargs) -> None:
        super(ErrorAdditionalInfo, self).__init__(**kwargs)
        self.type = type
        self.info = info


class ErrorAdditionalInfoInfo(Model):
    """ErrorAdditionalInfoInfo.

    :param current_status: The current status/state of the request quired.
     Possible values include: 'Initializing', 'Pending', 'Approving',
     'Denying', 'Approved', 'Denied', 'Expired', 'Revoking', 'Revoked',
     'Error', 'Unknown', 'Completed', 'Completing'
    :type current_status: str or ~microsoft.customerlockbox.models.Status
    """

    _attribute_map = {
        'current_status': {'key': 'currentStatus', 'type': 'str'},
    }

    def __init__(self, *, current_status=None, **kwargs) -> None:
        super(ErrorAdditionalInfoInfo, self).__init__(**kwargs)
        self.current_status = current_status


class ErrorBody(Model):
    """An error response body from the Lockbox service.

    :param code: An identifier for the error. Codes are invariant and are
     intended to be consumed programmatically.
    :type code: str
    :param message: A message describing the error, intended to be suitable
     for display in a user interface.
    :type message: str
    :param target: The target of the particular error. For example, the name
     of the property in error.
    :type target: str
    :param additional_info: A list of error details about the error.
    :type additional_info:
     list[~microsoft.customerlockbox.models.ErrorAdditionalInfo]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'additional_info': {'key': 'additionalInfo', 'type': '[ErrorAdditionalInfo]'},
    }

    def __init__(self, *, code: str=None, message: str=None, target: str=None, additional_info=None, **kwargs) -> None:
        super(ErrorBody, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.additional_info = additional_info


class ErrorResponse(Model):
    """An error response from the Lockbox service.

    :param error:
    :type error: ~microsoft.customerlockbox.models.ErrorBody
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorBody'},
    }

    def __init__(self, *, error=None, **kwargs) -> None:
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class ErrorResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ErrorResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorResponseException, self).__init__(deserialize, response, 'ErrorResponse', *args)


class LockboxRequestResponse(Model):
    """A Lockbox request response object, containing all information associated
    with the request.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The Arm resource id of the Lockbox request.
    :vartype id: str
    :ivar name: The name of the Lockbox request.
    :vartype name: str
    :ivar type: The type of the Lockbox request.
    :vartype type: str
    :param properties: The properties that are associated with a lockbox
     request.
    :type properties:
     ~microsoft.customerlockbox.models.LockboxRequestResponseProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'LockboxRequestResponseProperties'},
    }

    def __init__(self, *, properties=None, **kwargs) -> None:
        super(LockboxRequestResponse, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.properties = properties


class LockboxRequestResponseProperties(Model):
    """The properties that are associated with a lockbox request.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar request_id: The Lockbox request ID.
    :vartype request_id: str
    :ivar justification: The justification of the requestor.
    :vartype justification: str
    :param status: The status of the request. Possible values include:
     'Initializing', 'Pending', 'Approving', 'Denying', 'Approved', 'Denied',
     'Expired', 'Revoking', 'Revoked', 'Error', 'Unknown', 'Completed',
     'Completing'
    :type status: str or ~microsoft.customerlockbox.models.Status
    :ivar created_date_time: The creation time of the request.
    :vartype created_date_time: datetime
    :ivar expiration_date_time: The expiration time of the request.
    :vartype expiration_date_time: datetime
    :ivar duration: The duration of the request in hours.
    :vartype duration: int
    :ivar requested_resource_ids: A list of resource IDs associated with the
     Lockbox request separated by ','.
    :vartype requested_resource_ids: list[str]
    :ivar resource_type: The resource type of the requested resources.
    :vartype resource_type: str
    :ivar support_request: The id of the support request associated.
    :vartype support_request: str
    :ivar support_case_url: The url of the support case.
    :vartype support_case_url: str
    :ivar subscription_id: The subscription ID.
    :vartype subscription_id: str
    """

    _validation = {
        'request_id': {'readonly': True},
        'justification': {'readonly': True},
        'created_date_time': {'readonly': True},
        'expiration_date_time': {'readonly': True},
        'duration': {'readonly': True},
        'requested_resource_ids': {'readonly': True},
        'resource_type': {'readonly': True},
        'support_request': {'readonly': True},
        'support_case_url': {'readonly': True},
        'subscription_id': {'readonly': True},
    }

    _attribute_map = {
        'request_id': {'key': 'requestId', 'type': 'str'},
        'justification': {'key': 'justification', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_date_time': {'key': 'createdDateTime', 'type': 'iso-8601'},
        'expiration_date_time': {'key': 'expirationDateTime', 'type': 'iso-8601'},
        'duration': {'key': 'duration', 'type': 'int'},
        'requested_resource_ids': {'key': 'requestedResourceIds', 'type': '[str]'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'support_request': {'key': 'supportRequest', 'type': 'str'},
        'support_case_url': {'key': 'supportCaseUrl', 'type': 'str'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
    }

    def __init__(self, *, status=None, **kwargs) -> None:
        super(LockboxRequestResponseProperties, self).__init__(**kwargs)
        self.request_id = None
        self.justification = None
        self.status = status
        self.created_date_time = None
        self.expiration_date_time = None
        self.duration = None
        self.requested_resource_ids = None
        self.resource_type = None
        self.support_request = None
        self.support_case_url = None
        self.subscription_id = None


class Operation(Model):
    """Operation result model for ARM RP.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name: Gets or sets action name
    :vartype name: str
    :ivar is_data_action: Gets or sets a value indicating whether it is a data
     plane action
    :vartype is_data_action: str
    :ivar display: Contains the localized display information for this
     particular operation / action.
    :vartype display: ~microsoft.customerlockbox.models.OperationDisplay
    :ivar properties: Gets or sets properties
    :vartype properties: str
    :ivar origin: Gets or sets origin
    :vartype origin: str
    """

    _validation = {
        'name': {'readonly': True},
        'is_data_action': {'readonly': True},
        'display': {'readonly': True},
        'properties': {'readonly': True},
        'origin': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'is_data_action': {'key': 'isDataAction', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'properties': {'key': 'properties', 'type': 'str'},
        'origin': {'key': 'origin', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(Operation, self).__init__(**kwargs)
        self.name = None
        self.is_data_action = None
        self.display = None
        self.properties = None
        self.origin = None


class OperationDisplay(Model):
    """Contains the localized display information for this particular operation /
    action.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar provider: The localized friendly form of the resource provider name.
    :vartype provider: str
    :ivar resource: The localized friendly form of the resource type related
     to this action/operation.
    :vartype resource: str
    :ivar operation: The localized friendly name for the operation.
    :vartype operation: str
    :ivar description: The localized friendly description for the operation.
    :vartype description: str
    """

    _validation = {
        'provider': {'readonly': True},
        'resource': {'readonly': True},
        'operation': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None
