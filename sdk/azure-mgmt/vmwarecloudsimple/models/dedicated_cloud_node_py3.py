# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class DedicatedCloudNode(Model):
    """Dedicated cloud node model.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id:
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/dedicatedCloudNodes/{dedicatedCloudNodeName}
    :vartype id: str
    :param location: Required. Azure region
    :type location: str
    :ivar name: {dedicatedCloudNodeName}
    :vartype name: str
    :param availability_zone_id: Required. Availability Zone id, e.g. "az1"
    :type availability_zone_id: str
    :ivar availability_zone_name: Availability Zone name, e.g. "Availability
     Zone 1"
    :vartype availability_zone_name: str
    :ivar cloud_rack_name: VMWare Cloud Rack Name
    :vartype cloud_rack_name: str
    :ivar created: date time the resource was created
    :vartype created: object
    :param nodes_count: Required. count of nodes to create
    :type nodes_count: int
    :param placement_group_id: Required. Placement Group id, e.g. "n1"
    :type placement_group_id: str
    :ivar placement_group_name: Placement Name, e.g. "Placement Group 1"
    :vartype placement_group_name: str
    :ivar private_cloud_id: Private Cloud Id
    :vartype private_cloud_id: str
    :ivar private_cloud_name: Resource Pool Name
    :vartype private_cloud_name: str
    :ivar provisioning_state: The provisioning status of the resource
    :vartype provisioning_state: str
    :param purchase_id: Required. purchase id
    :type purchase_id: str
    :param id1: Required. SKU's id
    :type id1: str
    :param name1: Required. SKU's name
    :type name1: str
    :ivar status: Node status, indicates is private cloud set up on this node
     or not. Possible values include: 'unused', 'used'
    :vartype status: str or ~microsoft.vmwarecloudsimple.models.NodeStatus
    :ivar vmware_cluster_name: VMWare Cluster Name
    :vartype vmware_cluster_name: str
    :param sku: Dedicated Cloud Nodes SKU
    :type sku: ~microsoft.vmwarecloudsimple.models.Sku
    :param tags: Dedicated Cloud Nodes tags
    :type tags: dict[str, str]
    :ivar type: {resourceProviderNamespace}/{resourceType}
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'location': {'required': True},
        'name': {'readonly': True, 'pattern': r'^[-a-zA-Z0-9]+$'},
        'availability_zone_id': {'required': True},
        'availability_zone_name': {'readonly': True},
        'cloud_rack_name': {'readonly': True},
        'created': {'readonly': True},
        'nodes_count': {'required': True},
        'placement_group_id': {'required': True},
        'placement_group_name': {'readonly': True},
        'private_cloud_id': {'readonly': True},
        'private_cloud_name': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'purchase_id': {'required': True},
        'id1': {'required': True},
        'name1': {'required': True},
        'status': {'readonly': True},
        'vmware_cluster_name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'availability_zone_id': {'key': 'properties.availabilityZoneId', 'type': 'str'},
        'availability_zone_name': {'key': 'properties.availabilityZoneName', 'type': 'str'},
        'cloud_rack_name': {'key': 'properties.cloudRackName', 'type': 'str'},
        'created': {'key': 'properties.created', 'type': 'object'},
        'nodes_count': {'key': 'properties.nodesCount', 'type': 'int'},
        'placement_group_id': {'key': 'properties.placementGroupId', 'type': 'str'},
        'placement_group_name': {'key': 'properties.placementGroupName', 'type': 'str'},
        'private_cloud_id': {'key': 'properties.privateCloudId', 'type': 'str'},
        'private_cloud_name': {'key': 'properties.privateCloudName', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'purchase_id': {'key': 'properties.purchaseId', 'type': 'str'},
        'id1': {'key': 'properties.skuDescription.id', 'type': 'str'},
        'name1': {'key': 'properties.skuDescription.name', 'type': 'str'},
        'status': {'key': 'properties.status', 'type': 'NodeStatus'},
        'vmware_cluster_name': {'key': 'properties.vmwareClusterName', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'Sku'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, *, location: str, availability_zone_id: str, nodes_count: int, placement_group_id: str, purchase_id: str, id1: str, name1: str, sku=None, tags=None, **kwargs) -> None:
        super(DedicatedCloudNode, self).__init__(**kwargs)
        self.id = None
        self.location = location
        self.name = None
        self.availability_zone_id = availability_zone_id
        self.availability_zone_name = None
        self.cloud_rack_name = None
        self.created = None
        self.nodes_count = nodes_count
        self.placement_group_id = placement_group_id
        self.placement_group_name = None
        self.private_cloud_id = None
        self.private_cloud_name = None
        self.provisioning_state = None
        self.purchase_id = purchase_id
        self.id1 = id1
        self.name1 = name1
        self.status = None
        self.vmware_cluster_name = None
        self.sku = sku
        self.tags = tags
        self.type = None
