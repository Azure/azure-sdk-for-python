# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=useless-super-delegation

import datetime
from typing import Any, Dict, List, Literal, Mapping, Optional, TYPE_CHECKING, Union, overload

from .._utils.model_base import Model as _Model, rest_discriminator, rest_field
from ._enums import ConnectorServiceType, PartnerConnectorType

if TYPE_CHECKING:
    from .. import models as _models


class AccessCreateRoleBindingRequestModel(_Model):
    """Create role binding request model.

    :ivar principal: The principal User or Group to bind the role to.
    :vartype principal: str
    :ivar role_name: The name of the role to bind to the principal.
    :vartype role_name: str
    :ivar crn_pattern: A CRN that specifies the scope and resource patterns necessary for the role
     to bind.
    :vartype crn_pattern: str
    """

    principal: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The principal User or Group to bind the role to."""
    role_name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the role to bind to the principal."""
    crn_pattern: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A CRN that specifies the scope and resource patterns necessary for the role to bind."""

    @overload
    def __init__(
        self,
        *,
        principal: Optional[str] = None,
        role_name: Optional[str] = None,
        crn_pattern: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AccessInvitedUserDetails(_Model):
    """Details of the user being invited.

    :ivar invited_email: UPN/Email of the user who is being invited.
    :vartype invited_email: str
    :ivar auth_type: Auth type of the user.
    :vartype auth_type: str
    """

    invited_email: Optional[str] = rest_field(
        name="invitedEmail", visibility=["read", "create", "update", "delete", "query"]
    )
    """UPN/Email of the user who is being invited."""
    auth_type: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Auth type of the user."""

    @overload
    def __init__(
        self,
        *,
        invited_email: Optional[str] = None,
        auth_type: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AccessInviteUserAccountModel(_Model):
    """Invite User Account model.

    :ivar organization_id: Id of the organization.
    :vartype organization_id: str
    :ivar email: Email of the logged in user.
    :vartype email: str
    :ivar upn: Upn of the logged in user.
    :vartype upn: str
    :ivar invited_user_details: Details of the user who is being invited.
    :vartype invited_user_details: ~azure.mgmt.confluent.models.AccessInvitedUserDetails
    """

    organization_id: Optional[str] = rest_field(
        name="organizationId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Id of the organization."""
    email: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Email of the logged in user."""
    upn: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Upn of the logged in user."""
    invited_user_details: Optional["_models.AccessInvitedUserDetails"] = rest_field(
        name="invitedUserDetails", visibility=["read", "create", "update", "delete", "query"]
    )
    """Details of the user who is being invited."""

    @overload
    def __init__(
        self,
        *,
        organization_id: Optional[str] = None,
        email: Optional[str] = None,
        upn: Optional[str] = None,
        invited_user_details: Optional["_models.AccessInvitedUserDetails"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AccessListClusterSuccessResponse(_Model):
    """Details of the clusters returned on successful response.

    :ivar kind: Type of response.
    :vartype kind: str
    :ivar metadata: Metadata of the list.
    :vartype metadata: ~azure.mgmt.confluent.models.ConfluentListMetadata
    :ivar data: List of clusters.
    :vartype data: list[~azure.mgmt.confluent.models.ClusterRecord]
    """

    kind: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of response."""
    metadata: Optional["_models.ConfluentListMetadata"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Metadata of the list."""
    data: Optional[List["_models.ClusterRecord"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of clusters."""

    @overload
    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        metadata: Optional["_models.ConfluentListMetadata"] = None,
        data: Optional[List["_models.ClusterRecord"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AccessListEnvironmentsSuccessResponse(_Model):
    """Details of the environments returned on successful response.

    :ivar kind: Type of response.
    :vartype kind: str
    :ivar metadata: Metadata of the  environment list.
    :vartype metadata: ~azure.mgmt.confluent.models.ConfluentListMetadata
    :ivar data: Environment list data.
    :vartype data: list[~azure.mgmt.confluent.models.EnvironmentRecord]
    """

    kind: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of response."""
    metadata: Optional["_models.ConfluentListMetadata"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Metadata of the  environment list."""
    data: Optional[List["_models.EnvironmentRecord"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Environment list data."""

    @overload
    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        metadata: Optional["_models.ConfluentListMetadata"] = None,
        data: Optional[List["_models.EnvironmentRecord"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AccessListInvitationsSuccessResponse(_Model):
    """List invitations success response.

    :ivar kind: Type of response.
    :vartype kind: str
    :ivar metadata: Metadata of the list.
    :vartype metadata: ~azure.mgmt.confluent.models.ConfluentListMetadata
    :ivar data: Data of the invitations list.
    :vartype data: list[~azure.mgmt.confluent.models.InvitationRecord]
    """

    kind: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of response."""
    metadata: Optional["_models.ConfluentListMetadata"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Metadata of the list."""
    data: Optional[List["_models.InvitationRecord"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Data of the invitations list."""

    @overload
    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        metadata: Optional["_models.ConfluentListMetadata"] = None,
        data: Optional[List["_models.InvitationRecord"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AccessListRoleBindingsSuccessResponse(_Model):
    """Details of the role bindings returned on successful response.

    :ivar kind: Type of response.
    :vartype kind: str
    :ivar metadata: Metadata of the list.
    :vartype metadata: ~azure.mgmt.confluent.models.ConfluentListMetadata
    :ivar data: List of role binding.
    :vartype data: list[~azure.mgmt.confluent.models.RoleBindingRecord]
    """

    kind: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of response."""
    metadata: Optional["_models.ConfluentListMetadata"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Metadata of the list."""
    data: Optional[List["_models.RoleBindingRecord"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of role binding."""

    @overload
    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        metadata: Optional["_models.ConfluentListMetadata"] = None,
        data: Optional[List["_models.RoleBindingRecord"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AccessListServiceAccountsSuccessResponse(_Model):
    """List service accounts success response.

    :ivar kind: Type of response.
    :vartype kind: str
    :ivar metadata: Metadata of the list.
    :vartype metadata: ~azure.mgmt.confluent.models.ConfluentListMetadata
    :ivar data: Data of the service accounts list.
    :vartype data: list[~azure.mgmt.confluent.models.ServiceAccountRecord]
    """

    kind: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of response."""
    metadata: Optional["_models.ConfluentListMetadata"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Metadata of the list."""
    data: Optional[List["_models.ServiceAccountRecord"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Data of the service accounts list."""

    @overload
    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        metadata: Optional["_models.ConfluentListMetadata"] = None,
        data: Optional[List["_models.ServiceAccountRecord"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AccessListUsersSuccessResponse(_Model):
    """List users success response.

    :ivar kind: Type of response.
    :vartype kind: str
    :ivar metadata: Metadata of the list.
    :vartype metadata: ~azure.mgmt.confluent.models.ConfluentListMetadata
    :ivar data: Data of the users list.
    :vartype data: list[~azure.mgmt.confluent.models.UserRecord]
    """

    kind: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of response."""
    metadata: Optional["_models.ConfluentListMetadata"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Metadata of the list."""
    data: Optional[List["_models.UserRecord"]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Data of the users list."""

    @overload
    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        metadata: Optional["_models.ConfluentListMetadata"] = None,
        data: Optional[List["_models.UserRecord"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AccessRoleBindingNameListSuccessResponse(_Model):
    """Details of the role binding names returned on successful response.

    :ivar kind: Type of response.
    :vartype kind: str
    :ivar metadata: Metadata of the list.
    :vartype metadata: ~azure.mgmt.confluent.models.ConfluentListMetadata
    :ivar data: List of role binding names.
    :vartype data: list[str]
    """

    kind: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of response."""
    metadata: Optional["_models.ConfluentListMetadata"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Metadata of the list."""
    data: Optional[List[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """List of role binding names."""

    @overload
    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        metadata: Optional["_models.ConfluentListMetadata"] = None,
        data: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class APIKeyOwnerEntity(_Model):
    """API Key Owner details which can be a user or service account.

    :ivar id: API Key owner id.
    :vartype id: str
    :ivar related: API URL for accessing or modifying the referred object.
    :vartype related: str
    :ivar resource_name: CRN reference to the referred resource.
    :vartype resource_name: str
    :ivar kind: Type of the owner service or user account.
    :vartype kind: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """API Key owner id."""
    related: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """API URL for accessing or modifying the referred object."""
    resource_name: Optional[str] = rest_field(
        name="resourceName", visibility=["read", "create", "update", "delete", "query"]
    )
    """CRN reference to the referred resource."""
    kind: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of the owner service or user account."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        related: Optional[str] = None,
        resource_name: Optional[str] = None,
        kind: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class APIKeyProperties(_Model):
    """API Key Properties.

    :ivar metadata: Metadata of the record.
    :vartype metadata: ~azure.mgmt.confluent.models.SCMetadataEntity
    :ivar spec: Specification of the API Key.
    :vartype spec: ~azure.mgmt.confluent.models.APIKeySpecEntity
    """

    metadata: Optional["_models.SCMetadataEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Metadata of the record."""
    spec: Optional["_models.APIKeySpecEntity"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Specification of the API Key."""

    @overload
    def __init__(
        self,
        *,
        metadata: Optional["_models.SCMetadataEntity"] = None,
        spec: Optional["_models.APIKeySpecEntity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class APIKeyRecord(_Model):
    """Details API key.

    :ivar kind: Type of api key.
    :vartype kind: str
    :ivar id: Id of the api key.
    :vartype id: str
    :ivar properties: API Key Properties.
    :vartype properties: ~azure.mgmt.confluent.models.APIKeyProperties
    """

    kind: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of api key."""
    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Id of the api key."""
    properties: Optional["_models.APIKeyProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """API Key Properties."""

    __flattened_items = ["metadata", "spec"]

    @overload
    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        properties: Optional["_models.APIKeyProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class APIKeyResourceEntity(_Model):
    """API Key Resource details which can be kafka cluster or schema registry cluster.

    :ivar id: Id of the resource.
    :vartype id: str
    :ivar environment: The environment of the api key.
    :vartype environment: str
    :ivar related: API URL for accessing or modifying the api key resource object.
    :vartype related: str
    :ivar resource_name: CRN reference to the referred resource.
    :vartype resource_name: str
    :ivar kind: Type of the owner which can be service or user account.
    :vartype kind: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Id of the resource."""
    environment: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The environment of the api key."""
    related: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """API URL for accessing or modifying the api key resource object."""
    resource_name: Optional[str] = rest_field(
        name="resourceName", visibility=["read", "create", "update", "delete", "query"]
    )
    """CRN reference to the referred resource."""
    kind: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of the owner which can be service or user account."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        environment: Optional[str] = None,
        related: Optional[str] = None,
        resource_name: Optional[str] = None,
        kind: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class APIKeySpecEntity(_Model):
    """Spec of the API Key record.

    :ivar description: The description of the API Key.
    :vartype description: str
    :ivar name: The name of the API Key.
    :vartype name: str
    :ivar secret: API Key Secret.
    :vartype secret: str
    :ivar resource: Specification of the cluster.
    :vartype resource: ~azure.mgmt.confluent.models.APIKeyResourceEntity
    :ivar owner: Specification of the cluster.
    :vartype owner: ~azure.mgmt.confluent.models.APIKeyOwnerEntity
    """

    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The description of the API Key."""
    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the API Key."""
    secret: Optional[str] = rest_field(visibility=["create"])
    """API Key Secret."""
    resource: Optional["_models.APIKeyResourceEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Specification of the cluster."""
    owner: Optional["_models.APIKeyOwnerEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Specification of the cluster."""

    @overload
    def __init__(
        self,
        *,
        description: Optional[str] = None,
        name: Optional[str] = None,
        secret: Optional[str] = None,
        resource: Optional["_models.APIKeyResourceEntity"] = None,
        owner: Optional["_models.APIKeyOwnerEntity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ConnectorServiceTypeInfoBase(_Model):
    """The connector service type info.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AzureBlobStorageSinkConnectorServiceInfo, AzureBlobStorageSourceConnectorServiceInfo,
    AzureCosmosDBSinkConnectorServiceInfo, AzureCosmosDBSourceConnectorServiceInfo,
    AzureSynapseAnalyticsSinkConnectorServiceInfo

    :ivar connector_service_type: The connector service type. Required. Known values are:
     "AzureBlobStorageSinkConnector", "AzureBlobStorageSourceConnector",
     "AzureCosmosDBSinkConnector", "AzureCosmosDBSourceConnector", and
     "AzureSynapseAnalyticsSinkConnector".
    :vartype connector_service_type: str or ~azure.mgmt.confluent.models.ConnectorServiceType
    """

    __mapping__: Dict[str, _Model] = {}
    connector_service_type: str = rest_discriminator(
        name="connectorServiceType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The connector service type. Required. Known values are: \"AzureBlobStorageSinkConnector\",
     \"AzureBlobStorageSourceConnector\", \"AzureCosmosDBSinkConnector\",
     \"AzureCosmosDBSourceConnector\", and \"AzureSynapseAnalyticsSinkConnector\"."""

    @overload
    def __init__(
        self,
        *,
        connector_service_type: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class AzureBlobStorageSinkConnectorServiceInfo(
    ConnectorServiceTypeInfoBase, discriminator="AzureBlobStorageSinkConnector"
):
    """The authentication info when auth_type is azureBlobStorageSinkConnector.

    :ivar storage_account_name: Azure Blob Storage Account Name.
    :vartype storage_account_name: str
    :ivar storage_account_key: Azure Blob Storage Account Key.
    :vartype storage_account_key: str
    :ivar storage_container_name: Azure Blob Storage Account Container Name.
    :vartype storage_container_name: str
    :ivar connector_service_type: The connector service type. Required.
    :vartype connector_service_type: str or
     ~azure.mgmt.confluent.models.AZURE_BLOB_STORAGE_SINK_CONNECTOR
    """

    storage_account_name: Optional[str] = rest_field(
        name="storageAccountName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Blob Storage Account Name."""
    storage_account_key: Optional[str] = rest_field(
        name="storageAccountKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Blob Storage Account Key."""
    storage_container_name: Optional[str] = rest_field(
        name="storageContainerName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Blob Storage Account Container Name."""
    connector_service_type: Literal[ConnectorServiceType.AZURE_BLOB_STORAGE_SINK_CONNECTOR] = rest_discriminator(name="connectorServiceType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The connector service type. Required."""

    @overload
    def __init__(
        self,
        *,
        storage_account_name: Optional[str] = None,
        storage_account_key: Optional[str] = None,
        storage_container_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, connector_service_type=ConnectorServiceType.AZURE_BLOB_STORAGE_SINK_CONNECTOR, **kwargs)


class AzureBlobStorageSourceConnectorServiceInfo(
    ConnectorServiceTypeInfoBase, discriminator="AzureBlobStorageSourceConnector"
):  # pylint: disable=name-too-long
    """The connector service type is AzureBlobStorageSourceConnector.

    :ivar storage_account_name: Azure Blob Storage Account Name.
    :vartype storage_account_name: str
    :ivar storage_account_key: Azure Blob Storage Account Key.
    :vartype storage_account_key: str
    :ivar storage_container_name: Azure Blob Storage Account Container Name.
    :vartype storage_container_name: str
    :ivar connector_service_type: The connector service type. Required.
    :vartype connector_service_type: str or
     ~azure.mgmt.confluent.models.AZURE_BLOB_STORAGE_SOURCE_CONNECTOR
    """

    storage_account_name: Optional[str] = rest_field(
        name="storageAccountName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Blob Storage Account Name."""
    storage_account_key: Optional[str] = rest_field(
        name="storageAccountKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Blob Storage Account Key."""
    storage_container_name: Optional[str] = rest_field(
        name="storageContainerName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Blob Storage Account Container Name."""
    connector_service_type: Literal[ConnectorServiceType.AZURE_BLOB_STORAGE_SOURCE_CONNECTOR] = rest_discriminator(name="connectorServiceType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The connector service type. Required."""

    @overload
    def __init__(
        self,
        *,
        storage_account_name: Optional[str] = None,
        storage_account_key: Optional[str] = None,
        storage_container_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(
            *args, connector_service_type=ConnectorServiceType.AZURE_BLOB_STORAGE_SOURCE_CONNECTOR, **kwargs
        )


class AzureCosmosDBSinkConnectorServiceInfo(ConnectorServiceTypeInfoBase, discriminator="AzureCosmosDBSinkConnector"):
    """The authentication info when auth_type is AzureCosmosDBSinkConnector.

    :ivar cosmos_database_name: Azure Cosmos Database Name.
    :vartype cosmos_database_name: str
    :ivar cosmos_master_key: Azure Cosmos Database Master Key.
    :vartype cosmos_master_key: str
    :ivar cosmos_connection_endpoint: Azure Cosmos Database Connection Endpoint.
    :vartype cosmos_connection_endpoint: str
    :ivar cosmos_containers_topic_mapping: Azure Cosmos Database Containers Topic Mapping.
    :vartype cosmos_containers_topic_mapping: str
    :ivar cosmos_id_strategy: Azure Cosmos Database Id Strategy.
    :vartype cosmos_id_strategy: str
    :ivar connector_service_type: The connector service type. Required.
    :vartype connector_service_type: str or
     ~azure.mgmt.confluent.models.AZURE_COSMOS_DB_SINK_CONNECTOR
    """

    cosmos_database_name: Optional[str] = rest_field(
        name="cosmosDatabaseName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Cosmos Database Name."""
    cosmos_master_key: Optional[str] = rest_field(
        name="cosmosMasterKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Cosmos Database Master Key."""
    cosmos_connection_endpoint: Optional[str] = rest_field(
        name="cosmosConnectionEndpoint", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Cosmos Database Connection Endpoint."""
    cosmos_containers_topic_mapping: Optional[str] = rest_field(
        name="cosmosContainersTopicMapping", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Cosmos Database Containers Topic Mapping."""
    cosmos_id_strategy: Optional[str] = rest_field(
        name="cosmosIdStrategy", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Cosmos Database Id Strategy."""
    connector_service_type: Literal[ConnectorServiceType.AZURE_COSMOS_DB_SINK_CONNECTOR] = rest_discriminator(name="connectorServiceType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The connector service type. Required."""

    @overload
    def __init__(
        self,
        *,
        cosmos_database_name: Optional[str] = None,
        cosmos_master_key: Optional[str] = None,
        cosmos_connection_endpoint: Optional[str] = None,
        cosmos_containers_topic_mapping: Optional[str] = None,
        cosmos_id_strategy: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, connector_service_type=ConnectorServiceType.AZURE_COSMOS_DB_SINK_CONNECTOR, **kwargs)


class AzureCosmosDBSourceConnectorServiceInfo(
    ConnectorServiceTypeInfoBase, discriminator="AzureCosmosDBSourceConnector"
):
    """The authentication info when auth_type is AzureCosmosDBSourceConnector.

    :ivar cosmos_database_name: Azure Cosmos Database Name.
    :vartype cosmos_database_name: str
    :ivar cosmos_master_key: Azure Cosmos Database Master Key.
    :vartype cosmos_master_key: str
    :ivar cosmos_connection_endpoint: Azure Cosmos Database Connection Endpoint.
    :vartype cosmos_connection_endpoint: str
    :ivar cosmos_containers_topic_mapping: Azure Cosmos Database Containers Topic Mapping.
    :vartype cosmos_containers_topic_mapping: str
    :ivar cosmos_message_key_enabled: Azure Cosmos Database Message Key Enabled.
    :vartype cosmos_message_key_enabled: bool
    :ivar cosmos_message_key_field: Azure Cosmos Database Message Key Field.
    :vartype cosmos_message_key_field: str
    :ivar connector_service_type: The connector service type. Required.
    :vartype connector_service_type: str or
     ~azure.mgmt.confluent.models.AZURE_COSMOS_DB_SOURCE_CONNECTOR
    """

    cosmos_database_name: Optional[str] = rest_field(
        name="cosmosDatabaseName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Cosmos Database Name."""
    cosmos_master_key: Optional[str] = rest_field(
        name="cosmosMasterKey", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Cosmos Database Master Key."""
    cosmos_connection_endpoint: Optional[str] = rest_field(
        name="cosmosConnectionEndpoint", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Cosmos Database Connection Endpoint."""
    cosmos_containers_topic_mapping: Optional[str] = rest_field(
        name="cosmosContainersTopicMapping", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Cosmos Database Containers Topic Mapping."""
    cosmos_message_key_enabled: Optional[bool] = rest_field(
        name="cosmosMessageKeyEnabled", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Cosmos Database Message Key Enabled."""
    cosmos_message_key_field: Optional[str] = rest_field(
        name="cosmosMessageKeyField", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Cosmos Database Message Key Field."""
    connector_service_type: Literal[ConnectorServiceType.AZURE_COSMOS_DB_SOURCE_CONNECTOR] = rest_discriminator(name="connectorServiceType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The connector service type. Required."""

    @overload
    def __init__(
        self,
        *,
        cosmos_database_name: Optional[str] = None,
        cosmos_master_key: Optional[str] = None,
        cosmos_connection_endpoint: Optional[str] = None,
        cosmos_containers_topic_mapping: Optional[str] = None,
        cosmos_message_key_enabled: Optional[bool] = None,
        cosmos_message_key_field: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, connector_service_type=ConnectorServiceType.AZURE_COSMOS_DB_SOURCE_CONNECTOR, **kwargs)


class AzureSynapseAnalyticsSinkConnectorServiceInfo(
    ConnectorServiceTypeInfoBase, discriminator="AzureSynapseAnalyticsSinkConnector"
):  # pylint: disable=name-too-long
    """The authentication info when auth_type is AzureSynapseAnalyticsSinkConnector.

    :ivar synapse_sql_server_name: Azure Synapse Analytics SQL Server Name.
    :vartype synapse_sql_server_name: str
    :ivar synapse_sql_user: Azure Synapse SQL login details.
    :vartype synapse_sql_user: str
    :ivar synapse_sql_password: Azure Synapse SQL login details.
    :vartype synapse_sql_password: str
    :ivar synapse_sql_database_name: Azure Synapse Dedicated SQL Pool Database Name.
    :vartype synapse_sql_database_name: str
    :ivar connector_service_type: The connector service type. Required.
    :vartype connector_service_type: str or
     ~azure.mgmt.confluent.models.AZURE_SYNAPSE_ANALYTICS_SINK_CONNECTOR
    """

    synapse_sql_server_name: Optional[str] = rest_field(
        name="synapseSqlServerName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Synapse Analytics SQL Server Name."""
    synapse_sql_user: Optional[str] = rest_field(
        name="synapseSqlUser", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Synapse SQL login details."""
    synapse_sql_password: Optional[str] = rest_field(
        name="synapseSqlPassword", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Synapse SQL login details."""
    synapse_sql_database_name: Optional[str] = rest_field(
        name="synapseSqlDatabaseName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Azure Synapse Dedicated SQL Pool Database Name."""
    connector_service_type: Literal[ConnectorServiceType.AZURE_SYNAPSE_ANALYTICS_SINK_CONNECTOR] = rest_discriminator(name="connectorServiceType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The connector service type. Required."""

    @overload
    def __init__(
        self,
        *,
        synapse_sql_server_name: Optional[str] = None,
        synapse_sql_user: Optional[str] = None,
        synapse_sql_password: Optional[str] = None,
        synapse_sql_database_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(
            *args, connector_service_type=ConnectorServiceType.AZURE_SYNAPSE_ANALYTICS_SINK_CONNECTOR, **kwargs
        )


class ClusterByokEntity(_Model):
    """The network associated with this object.

    :ivar id: ID of the referred resource.
    :vartype id: str
    :ivar related: API URL for accessing or modifying the referred object.
    :vartype related: str
    :ivar resource_name: CRN reference to the referred resource.
    :vartype resource_name: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """ID of the referred resource."""
    related: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """API URL for accessing or modifying the referred object."""
    resource_name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """CRN reference to the referred resource."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        related: Optional[str] = None,
        resource_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ClusterConfigEntity(_Model):
    """The configuration of the Kafka cluster.

    :ivar kind: The lifecycle phase of the cluster.
    :vartype kind: str
    """

    kind: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The lifecycle phase of the cluster."""

    @overload
    def __init__(
        self,
        *,
        kind: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ClusterEnvironmentEntity(_Model):
    """The environment to which cluster belongs.

    :ivar id: ID of the referred resource.
    :vartype id: str
    :ivar environment: Environment of the referred resource.
    :vartype environment: str
    :ivar related: API URL for accessing or modifying the referred object.
    :vartype related: str
    :ivar resource_name: CRN reference to the referred resource.
    :vartype resource_name: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """ID of the referred resource."""
    environment: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Environment of the referred resource."""
    related: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """API URL for accessing or modifying the referred object."""
    resource_name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """CRN reference to the referred resource."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        environment: Optional[str] = None,
        related: Optional[str] = None,
        resource_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ClusterNetworkEntity(_Model):
    """The network associated with this object.

    :ivar id: ID of the referred resource.
    :vartype id: str
    :ivar environment: Environment of the referred resource.
    :vartype environment: str
    :ivar related: API URL for accessing or modifying the referred object.
    :vartype related: str
    :ivar resource_name: CRN reference to the referred resource.
    :vartype resource_name: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """ID of the referred resource."""
    environment: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Environment of the referred resource."""
    related: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """API URL for accessing or modifying the referred object."""
    resource_name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """CRN reference to the referred resource."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        environment: Optional[str] = None,
        related: Optional[str] = None,
        resource_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ClusterProperties(_Model):
    """Service Connector Cluster Properties.

    :ivar metadata: Metadata of the record.
    :vartype metadata: ~azure.mgmt.confluent.models.SCMetadataEntity
    :ivar spec: Specification of the cluster.
    :vartype spec: ~azure.mgmt.confluent.models.SCClusterSpecEntity
    :ivar status: Specification of the cluster status.
    :vartype status: ~azure.mgmt.confluent.models.ClusterStatusEntity
    """

    metadata: Optional["_models.SCMetadataEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Metadata of the record."""
    spec: Optional["_models.SCClusterSpecEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Specification of the cluster."""
    status: Optional["_models.ClusterStatusEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Specification of the cluster status."""

    @overload
    def __init__(
        self,
        *,
        metadata: Optional["_models.SCMetadataEntity"] = None,
        spec: Optional["_models.SCClusterSpecEntity"] = None,
        status: Optional["_models.ClusterStatusEntity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ClusterRecord(_Model):
    """Details of cluster record.

    :ivar kind: Type of cluster.
    :vartype kind: str
    :ivar id: Id of the cluster.
    :vartype id: str
    :ivar metadata: Metadata of the record.
    :vartype metadata: ~azure.mgmt.confluent.models.MetadataEntity
    :ivar display_name: Display name of the cluster.
    :vartype display_name: str
    :ivar spec: Specification of the cluster.
    :vartype spec: ~azure.mgmt.confluent.models.ClusterSpecEntity
    :ivar status: Specification of the cluster.
    :vartype status: ~azure.mgmt.confluent.models.ClusterStatusEntity
    """

    kind: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of cluster."""
    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Id of the cluster."""
    metadata: Optional["_models.MetadataEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Metadata of the record."""
    display_name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Display name of the cluster."""
    spec: Optional["_models.ClusterSpecEntity"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Specification of the cluster."""
    status: Optional["_models.ClusterStatusEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Specification of the cluster."""

    @overload
    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        metadata: Optional["_models.MetadataEntity"] = None,
        display_name: Optional[str] = None,
        spec: Optional["_models.ClusterSpecEntity"] = None,
        status: Optional["_models.ClusterStatusEntity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ClusterSpecEntity(_Model):
    """Spec of the cluster record.

    :ivar display_name: The name of the cluster.
    :vartype display_name: str
    :ivar availability: The availability zone configuration of the cluster.
    :vartype availability: str
    :ivar cloud: The cloud service provider.
    :vartype cloud: str
    :ivar zone: type of zone availability.
    :vartype zone: str
    :ivar region: The cloud service provider region.
    :vartype region: str
    :ivar kafka_bootstrap_endpoint: The bootstrap endpoint used by Kafka clients to connect to the
     cluster.
    :vartype kafka_bootstrap_endpoint: str
    :ivar http_endpoint: The cluster HTTP request URL.
    :vartype http_endpoint: str
    :ivar api_endpoint: The Kafka API cluster endpoint.
    :vartype api_endpoint: str
    :ivar config: Specification of the cluster.
    :vartype config: ~azure.mgmt.confluent.models.ClusterConfigEntity
    :ivar environment: Specification of the cluster.
    :vartype environment: ~azure.mgmt.confluent.models.ClusterEnvironmentEntity
    :ivar network: Specification of the cluster.
    :vartype network: ~azure.mgmt.confluent.models.ClusterNetworkEntity
    :ivar byok: Specification of the cluster.
    :vartype byok: ~azure.mgmt.confluent.models.ClusterByokEntity
    """

    display_name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the cluster."""
    availability: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The availability zone configuration of the cluster."""
    cloud: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The cloud service provider."""
    zone: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """type of zone availability."""
    region: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The cloud service provider region."""
    kafka_bootstrap_endpoint: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The bootstrap endpoint used by Kafka clients to connect to the cluster."""
    http_endpoint: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The cluster HTTP request URL."""
    api_endpoint: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The Kafka API cluster endpoint."""
    config: Optional["_models.ClusterConfigEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Specification of the cluster."""
    environment: Optional["_models.ClusterEnvironmentEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Specification of the cluster."""
    network: Optional["_models.ClusterNetworkEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Specification of the cluster."""
    byok: Optional["_models.ClusterByokEntity"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Specification of the cluster."""

    @overload
    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        availability: Optional[str] = None,
        cloud: Optional[str] = None,
        zone: Optional[str] = None,
        region: Optional[str] = None,
        kafka_bootstrap_endpoint: Optional[str] = None,
        http_endpoint: Optional[str] = None,
        api_endpoint: Optional[str] = None,
        config: Optional["_models.ClusterConfigEntity"] = None,
        environment: Optional["_models.ClusterEnvironmentEntity"] = None,
        network: Optional["_models.ClusterNetworkEntity"] = None,
        byok: Optional["_models.ClusterByokEntity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ClusterStatusEntity(_Model):
    """Status of the cluster record.

    :ivar phase: The lifecycle phase of the cluster.
    :vartype phase: str
    :ivar cku: The number of Confluent Kafka Units.
    :vartype cku: int
    """

    phase: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The lifecycle phase of the cluster."""
    cku: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The number of Confluent Kafka Units."""

    @overload
    def __init__(
        self,
        *,
        phase: Optional[str] = None,
        cku: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ConfluentAgreementProperties(_Model):
    """Terms properties for Marketplace and Confluent.

    :ivar publisher: Publisher identifier string.
    :vartype publisher: str
    :ivar product: Product identifier string.
    :vartype product: str
    :ivar plan: Plan identifier string.
    :vartype plan: str
    :ivar license_text_link: Link to HTML with Microsoft and Publisher terms.
    :vartype license_text_link: str
    :ivar privacy_policy_link: Link to the privacy policy of the publisher.
    :vartype privacy_policy_link: str
    :ivar retrieve_datetime: Date and time in UTC of when the terms were accepted. This is empty if
     Accepted is false.
    :vartype retrieve_datetime: ~datetime.datetime
    :ivar signature: Terms signature.
    :vartype signature: str
    :ivar accepted: If any version of the terms have been accepted, otherwise false.
    :vartype accepted: bool
    """

    publisher: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Publisher identifier string."""
    product: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Product identifier string."""
    plan: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Plan identifier string."""
    license_text_link: Optional[str] = rest_field(
        name="licenseTextLink", visibility=["read", "create", "update", "delete", "query"]
    )
    """Link to HTML with Microsoft and Publisher terms."""
    privacy_policy_link: Optional[str] = rest_field(
        name="privacyPolicyLink", visibility=["read", "create", "update", "delete", "query"]
    )
    """Link to the privacy policy of the publisher."""
    retrieve_datetime: Optional[datetime.datetime] = rest_field(
        name="retrieveDatetime", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """Date and time in UTC of when the terms were accepted. This is empty if Accepted is false."""
    signature: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Terms signature."""
    accepted: Optional[bool] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """If any version of the terms have been accepted, otherwise false."""

    @overload
    def __init__(
        self,
        *,
        publisher: Optional[str] = None,
        product: Optional[str] = None,
        plan: Optional[str] = None,
        license_text_link: Optional[str] = None,
        privacy_policy_link: Optional[str] = None,
        retrieve_datetime: Optional[datetime.datetime] = None,
        signature: Optional[str] = None,
        accepted: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ConfluentAgreementResource(_Model):
    """Agreement Terms definition.

    :ivar id: The ARM id of the resource.
    :vartype id: str
    :ivar name: The name of the agreement.
    :vartype name: str
    :ivar type: The type of the agreement.
    :vartype type: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.confluent.models.SystemData
    :ivar properties: Represents the properties of the resource.
    :vartype properties: ~azure.mgmt.confluent.models.ConfluentAgreementProperties
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """The ARM id of the resource."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the agreement."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the agreement."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Metadata pertaining to creation and last modification of the resource."""
    properties: Optional["_models.ConfluentAgreementProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Represents the properties of the resource."""

    __flattened_items = [
        "publisher",
        "product",
        "plan",
        "license_text_link",
        "privacy_policy_link",
        "retrieve_datetime",
        "signature",
        "accepted",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.ConfluentAgreementProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ConfluentListMetadata(_Model):
    """Metadata of the list.

    :ivar first: First page of the list.
    :vartype first: str
    :ivar last: Last page of the list.
    :vartype last: str
    :ivar prev: Previous page of the list.
    :vartype prev: str
    :ivar next: Next page of the list.
    :vartype next: str
    :ivar total_size: Total size of the list.
    :vartype total_size: int
    """

    first: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """First page of the list."""
    last: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Last page of the list."""
    prev: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Previous page of the list."""
    next: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Next page of the list."""
    total_size: Optional[int] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Total size of the list."""

    @overload
    def __init__(
        self,
        *,
        first: Optional[str] = None,
        last: Optional[str] = None,
        prev: Optional[str] = None,
        next: Optional[str] = None,
        total_size: Optional[int] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ConnectorInfoBase(_Model):
    """Connector Info Base properties.

    :ivar connector_type: Connector Type. Known values are: "SINK" and "SOURCE".
    :vartype connector_type: str or ~azure.mgmt.confluent.models.ConnectorType
    :ivar connector_class: Connector Class. Known values are: "AZUREBLOBSOURCE" and
     "AZUREBLOBSINK".
    :vartype connector_class: str or ~azure.mgmt.confluent.models.ConnectorClass
    :ivar connector_name: Connector Name.
    :vartype connector_name: str
    :ivar connector_id: Connector Id.
    :vartype connector_id: str
    :ivar connector_state: Connector Status. Known values are: "PROVISIONING", "RUNNING", "PAUSED",
     and "FAILED".
    :vartype connector_state: str or ~azure.mgmt.confluent.models.ConnectorStatus
    """

    connector_type: Optional[Union[str, "_models.ConnectorType"]] = rest_field(
        name="connectorType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Connector Type. Known values are: \"SINK\" and \"SOURCE\"."""
    connector_class: Optional[Union[str, "_models.ConnectorClass"]] = rest_field(
        name="connectorClass", visibility=["read", "create", "update", "delete", "query"]
    )
    """Connector Class. Known values are: \"AZUREBLOBSOURCE\" and \"AZUREBLOBSINK\"."""
    connector_name: Optional[str] = rest_field(
        name="connectorName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Connector Name."""
    connector_id: Optional[str] = rest_field(
        name="connectorId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Connector Id."""
    connector_state: Optional[Union[str, "_models.ConnectorStatus"]] = rest_field(
        name="connectorState", visibility=["read", "create", "update", "delete", "query"]
    )
    """Connector Status. Known values are: \"PROVISIONING\", \"RUNNING\", \"PAUSED\", and \"FAILED\"."""

    @overload
    def __init__(
        self,
        *,
        connector_type: Optional[Union[str, "_models.ConnectorType"]] = None,
        connector_class: Optional[Union[str, "_models.ConnectorClass"]] = None,
        connector_name: Optional[str] = None,
        connector_id: Optional[str] = None,
        connector_state: Optional[Union[str, "_models.ConnectorStatus"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class Resource(_Model):
    """Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.confluent.models.SystemData
    """

    id: Optional[str] = rest_field(visibility=["read"])
    """Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}."""
    name: Optional[str] = rest_field(visibility=["read"])
    """The name of the resource."""
    type: Optional[str] = rest_field(visibility=["read"])
    """The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or
     \"Microsoft.Storage/storageAccounts\"."""
    system_data: Optional["_models.SystemData"] = rest_field(name="systemData", visibility=["read"])
    """Azure Resource Manager metadata containing createdBy and modifiedBy information."""


class ProxyResource(Resource):
    """Proxy Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.confluent.models.SystemData
    """


class ConnectorResource(ProxyResource):
    """Details of connector record.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.confluent.models.SystemData
    :ivar properties: The properties of the Connector. Required.
    :vartype properties: ~azure.mgmt.confluent.models.ConnectorResourceProperties
    """

    properties: "_models.ConnectorResourceProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The properties of the Connector. Required."""

    __flattened_items = ["connector_basic_info", "connector_service_type_info", "partner_connector_info"]

    @overload
    def __init__(
        self,
        *,
        properties: "_models.ConnectorResourceProperties",
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class ConnectorResourceProperties(_Model):
    """The resource properties of the Connector.

    :ivar connector_basic_info: Connector Info Base.
    :vartype connector_basic_info: ~azure.mgmt.confluent.models.ConnectorInfoBase
    :ivar connector_service_type_info: Connector Service type info base properties.
    :vartype connector_service_type_info: ~azure.mgmt.confluent.models.ConnectorServiceTypeInfoBase
    :ivar partner_connector_info: The connection information consumed by applications.
    :vartype partner_connector_info: ~azure.mgmt.confluent.models.PartnerInfoBase
    """

    connector_basic_info: Optional["_models.ConnectorInfoBase"] = rest_field(
        name="connectorBasicInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """Connector Info Base."""
    connector_service_type_info: Optional["_models.ConnectorServiceTypeInfoBase"] = rest_field(
        name="connectorServiceTypeInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """Connector Service type info base properties."""
    partner_connector_info: Optional["_models.PartnerInfoBase"] = rest_field(
        name="partnerConnectorInfo", visibility=["read", "create", "update", "delete", "query"]
    )
    """The connection information consumed by applications."""

    @overload
    def __init__(
        self,
        *,
        connector_basic_info: Optional["_models.ConnectorInfoBase"] = None,
        connector_service_type_info: Optional["_models.ConnectorServiceTypeInfoBase"] = None,
        partner_connector_info: Optional["_models.PartnerInfoBase"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class CreateAPIKeyModel(_Model):
    """Create API Key model.

    :ivar name: Name of the API Key.
    :vartype name: str
    :ivar description: Description of the API Key.
    :vartype description: str
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the API Key."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Description of the API Key."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        description: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EnvironmentProperties(_Model):
    """Environment resource property.

    :ivar stream_governance_config: Stream governance configuration.
    :vartype stream_governance_config: ~azure.mgmt.confluent.models.StreamGovernanceConfig
    :ivar metadata: Metadata of the record.
    :vartype metadata: ~azure.mgmt.confluent.models.SCMetadataEntity
    """

    stream_governance_config: Optional["_models.StreamGovernanceConfig"] = rest_field(
        name="streamGovernanceConfig", visibility=["read", "create", "update", "delete", "query"]
    )
    """Stream governance configuration."""
    metadata: Optional["_models.SCMetadataEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Metadata of the record."""

    @overload
    def __init__(
        self,
        *,
        stream_governance_config: Optional["_models.StreamGovernanceConfig"] = None,
        metadata: Optional["_models.SCMetadataEntity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class EnvironmentRecord(_Model):
    """Details about environment name, metadata and environment id of an environment.

    :ivar kind: Type of environment.
    :vartype kind: str
    :ivar id: Id of the environment.
    :vartype id: str
    :ivar metadata: Metadata of the record.
    :vartype metadata: ~azure.mgmt.confluent.models.MetadataEntity
    :ivar display_name: Display name of the user.
    :vartype display_name: str
    """

    kind: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of environment."""
    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Id of the environment."""
    metadata: Optional["_models.MetadataEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Metadata of the record."""
    display_name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Display name of the user."""

    @overload
    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        metadata: Optional["_models.MetadataEntity"] = None,
        display_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorAdditionalInfo(_Model):
    """The resource management error additional info.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    type: Optional[str] = rest_field(visibility=["read"])
    """The additional info type."""
    info: Optional[Any] = rest_field(visibility=["read"])
    """The additional info."""


class ErrorDetail(_Model):
    """The error detail.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.confluent.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.confluent.models.ErrorAdditionalInfo]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """The error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """The error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """The error target."""
    details: Optional[List["_models.ErrorDetail"]] = rest_field(visibility=["read"])
    """The error details."""
    additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = rest_field(
        name="additionalInfo", visibility=["read"]
    )
    """The error additional info."""


class ErrorResponse(_Model):
    """Error response.

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.confluent.models.ErrorDetail
    """

    error: Optional["_models.ErrorDetail"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The error object."""

    @overload
    def __init__(
        self,
        *,
        error: Optional["_models.ErrorDetail"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ErrorResponseBody(_Model):
    """Response body of Error.

    :ivar code: Error code.
    :vartype code: str
    :ivar message: Error message.
    :vartype message: str
    :ivar target: Error target.
    :vartype target: str
    :ivar details: Error detail.
    :vartype details: list[~azure.mgmt.confluent.models.ErrorResponseBody]
    """

    code: Optional[str] = rest_field(visibility=["read"])
    """Error code."""
    message: Optional[str] = rest_field(visibility=["read"])
    """Error message."""
    target: Optional[str] = rest_field(visibility=["read"])
    """Error target."""
    details: Optional[List["_models.ErrorResponseBody"]] = rest_field(visibility=["read"])
    """Error detail."""


class InvitationRecord(_Model):
    """Record of the invitation.

    :ivar kind: Type of account.
    :vartype kind: str
    :ivar id: Id of the invitation.
    :vartype id: str
    :ivar metadata: Metadata of the record.
    :vartype metadata: ~azure.mgmt.confluent.models.MetadataEntity
    :ivar email: Email of the user.
    :vartype email: str
    :ivar auth_type: Auth type of the user.
    :vartype auth_type: str
    :ivar status: Status of the invitation.
    :vartype status: str
    :ivar accepted_at: Accepted date time of the invitation.
    :vartype accepted_at: str
    :ivar expires_at: Expiration date time of the invitation.
    :vartype expires_at: str
    """

    kind: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of account."""
    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Id of the invitation."""
    metadata: Optional["_models.MetadataEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Metadata of the record."""
    email: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Email of the user."""
    auth_type: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Auth type of the user."""
    status: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Status of the invitation."""
    accepted_at: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Accepted date time of the invitation."""
    expires_at: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Expiration date time of the invitation."""

    @overload
    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        metadata: Optional["_models.MetadataEntity"] = None,
        email: Optional[str] = None,
        auth_type: Optional[str] = None,
        status: Optional[str] = None,
        accepted_at: Optional[str] = None,
        expires_at: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class PartnerInfoBase(_Model):
    """The partner info base.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    KafkaAzureBlobStorageSinkConnectorInfo, KafkaAzureBlobStorageSourceConnectorInfo,
    KafkaAzureCosmosDBSinkConnectorInfo, KafkaAzureCosmosDBSourceConnectorInfo,
    KafkaAzureSynapseAnalyticsSinkConnectorInfo

    :ivar partner_connector_type: The partner connector type. Required. Known values are:
     "KafkaAzureBlobStorageSource", "KafkaAzureBlobStorageSink", "KafkaAzureCosmosDBSource",
     "KafkaAzureCosmosDBSink", and "KafkaAzureSynapseAnalyticsSink".
    :vartype partner_connector_type: str or ~azure.mgmt.confluent.models.PartnerConnectorType
    """

    __mapping__: Dict[str, _Model] = {}
    partner_connector_type: str = rest_discriminator(
        name="partnerConnectorType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The partner connector type. Required. Known values are: \"KafkaAzureBlobStorageSource\",
     \"KafkaAzureBlobStorageSink\", \"KafkaAzureCosmosDBSource\", \"KafkaAzureCosmosDBSink\", and
     \"KafkaAzureSynapseAnalyticsSink\"."""

    @overload
    def __init__(
        self,
        *,
        partner_connector_type: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class KafkaAzureBlobStorageSinkConnectorInfo(PartnerInfoBase, discriminator="KafkaAzureBlobStorageSink"):
    """The partner connector type is KafkaAzureBlobStorageSink.

    :ivar auth_type: Kafka Auth Type. Known values are: "SERVICE_ACCOUNT" and "KAFKA_API_KEY".
    :vartype auth_type: str or ~azure.mgmt.confluent.models.AuthType
    :ivar input_format: Kafka Input Data Format Type. Known values are: "AVRO", "JSON", "STRING",
     "BYTES", and "PROTOBUF".
    :vartype input_format: str or ~azure.mgmt.confluent.models.DataFormatType
    :ivar output_format: Kafka Output Data Format Type. Known values are: "AVRO", "JSON", "STRING",
     "BYTES", and "PROTOBUF".
    :vartype output_format: str or ~azure.mgmt.confluent.models.DataFormatType
    :ivar api_key: Kafka API Key.
    :vartype api_key: str
    :ivar api_secret: Kafka API Key Secret.
    :vartype api_secret: str
    :ivar service_account_id: Kafka Service Account Id.
    :vartype service_account_id: str
    :ivar topics: Kafka topics list.
    :vartype topics: list[str]
    :ivar topics_dir: Kafka topics directory.
    :vartype topics_dir: str
    :ivar flush_size: Flush size.
    :vartype flush_size: str
    :ivar max_tasks: Maximum Tasks.
    :vartype max_tasks: str
    :ivar time_interval: Time Interval.
    :vartype time_interval: str
    :ivar partner_connector_type: The partner connector type. Required.
    :vartype partner_connector_type: str or
     ~azure.mgmt.confluent.models.KAFKA_AZURE_BLOB_STORAGE_SINK
    """

    auth_type: Optional[Union[str, "_models.AuthType"]] = rest_field(
        name="authType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kafka Auth Type. Known values are: \"SERVICE_ACCOUNT\" and \"KAFKA_API_KEY\"."""
    input_format: Optional[Union[str, "_models.DataFormatType"]] = rest_field(
        name="inputFormat", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kafka Input Data Format Type. Known values are: \"AVRO\", \"JSON\", \"STRING\", \"BYTES\", and
     \"PROTOBUF\"."""
    output_format: Optional[Union[str, "_models.DataFormatType"]] = rest_field(
        name="outputFormat", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kafka Output Data Format Type. Known values are: \"AVRO\", \"JSON\", \"STRING\", \"BYTES\", and
     \"PROTOBUF\"."""
    api_key: Optional[str] = rest_field(name="apiKey", visibility=["read", "create", "update", "delete", "query"])
    """Kafka API Key."""
    api_secret: Optional[str] = rest_field(name="apiSecret", visibility=["read", "create", "update", "delete", "query"])
    """Kafka API Key Secret."""
    service_account_id: Optional[str] = rest_field(
        name="serviceAccountId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kafka Service Account Id."""
    topics: Optional[List[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Kafka topics list."""
    topics_dir: Optional[str] = rest_field(name="topicsDir", visibility=["read", "create", "update", "delete", "query"])
    """Kafka topics directory."""
    flush_size: Optional[str] = rest_field(name="flushSize", visibility=["read", "create", "update", "delete", "query"])
    """Flush size."""
    max_tasks: Optional[str] = rest_field(name="maxTasks", visibility=["read", "create", "update", "delete", "query"])
    """Maximum Tasks."""
    time_interval: Optional[str] = rest_field(
        name="timeInterval", visibility=["read", "create", "update", "delete", "query"]
    )
    """Time Interval."""
    partner_connector_type: Literal[PartnerConnectorType.KAFKA_AZURE_BLOB_STORAGE_SINK] = rest_discriminator(name="partnerConnectorType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The partner connector type. Required."""

    @overload
    def __init__(
        self,
        *,
        auth_type: Optional[Union[str, "_models.AuthType"]] = None,
        input_format: Optional[Union[str, "_models.DataFormatType"]] = None,
        output_format: Optional[Union[str, "_models.DataFormatType"]] = None,
        api_key: Optional[str] = None,
        api_secret: Optional[str] = None,
        service_account_id: Optional[str] = None,
        topics: Optional[List[str]] = None,
        topics_dir: Optional[str] = None,
        flush_size: Optional[str] = None,
        max_tasks: Optional[str] = None,
        time_interval: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, partner_connector_type=PartnerConnectorType.KAFKA_AZURE_BLOB_STORAGE_SINK, **kwargs)


class KafkaAzureBlobStorageSourceConnectorInfo(PartnerInfoBase, discriminator="KafkaAzureBlobStorageSource"):
    """The partner connector type is KafkaAzureBlobStorageSource.

    :ivar auth_type: Kafka Auth Type. Known values are: "SERVICE_ACCOUNT" and "KAFKA_API_KEY".
    :vartype auth_type: str or ~azure.mgmt.confluent.models.AuthType
    :ivar input_format: Kafka Input Data Format Type. Known values are: "AVRO", "JSON", "STRING",
     "BYTES", and "PROTOBUF".
    :vartype input_format: str or ~azure.mgmt.confluent.models.DataFormatType
    :ivar output_format: Kafka Output Data Format Type. Known values are: "AVRO", "JSON", "STRING",
     "BYTES", and "PROTOBUF".
    :vartype output_format: str or ~azure.mgmt.confluent.models.DataFormatType
    :ivar api_key: Kafka API Key.
    :vartype api_key: str
    :ivar api_secret: Kafka API Secret.
    :vartype api_secret: str
    :ivar service_account_id: Kafka Service Account Id.
    :vartype service_account_id: str
    :ivar topic_regex: Kafka topics Regex pattern.
    :vartype topic_regex: str
    :ivar topics_dir: Kafka topics directory.
    :vartype topics_dir: str
    :ivar max_tasks: Maximum Tasks.
    :vartype max_tasks: str
    :ivar partner_connector_type: The partner connector type. Required.
    :vartype partner_connector_type: str or
     ~azure.mgmt.confluent.models.KAFKA_AZURE_BLOB_STORAGE_SOURCE
    """

    auth_type: Optional[Union[str, "_models.AuthType"]] = rest_field(
        name="authType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kafka Auth Type. Known values are: \"SERVICE_ACCOUNT\" and \"KAFKA_API_KEY\"."""
    input_format: Optional[Union[str, "_models.DataFormatType"]] = rest_field(
        name="inputFormat", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kafka Input Data Format Type. Known values are: \"AVRO\", \"JSON\", \"STRING\", \"BYTES\", and
     \"PROTOBUF\"."""
    output_format: Optional[Union[str, "_models.DataFormatType"]] = rest_field(
        name="outputFormat", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kafka Output Data Format Type. Known values are: \"AVRO\", \"JSON\", \"STRING\", \"BYTES\", and
     \"PROTOBUF\"."""
    api_key: Optional[str] = rest_field(name="apiKey", visibility=["read", "create", "update", "delete", "query"])
    """Kafka API Key."""
    api_secret: Optional[str] = rest_field(name="apiSecret", visibility=["read", "create", "update", "delete", "query"])
    """Kafka API Secret."""
    service_account_id: Optional[str] = rest_field(
        name="serviceAccountId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kafka Service Account Id."""
    topic_regex: Optional[str] = rest_field(
        name="topicRegex", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kafka topics Regex pattern."""
    topics_dir: Optional[str] = rest_field(name="topicsDir", visibility=["read", "create", "update", "delete", "query"])
    """Kafka topics directory."""
    max_tasks: Optional[str] = rest_field(name="maxTasks", visibility=["read", "create", "update", "delete", "query"])
    """Maximum Tasks."""
    partner_connector_type: Literal[PartnerConnectorType.KAFKA_AZURE_BLOB_STORAGE_SOURCE] = rest_discriminator(name="partnerConnectorType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The partner connector type. Required."""

    @overload
    def __init__(
        self,
        *,
        auth_type: Optional[Union[str, "_models.AuthType"]] = None,
        input_format: Optional[Union[str, "_models.DataFormatType"]] = None,
        output_format: Optional[Union[str, "_models.DataFormatType"]] = None,
        api_key: Optional[str] = None,
        api_secret: Optional[str] = None,
        service_account_id: Optional[str] = None,
        topic_regex: Optional[str] = None,
        topics_dir: Optional[str] = None,
        max_tasks: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, partner_connector_type=PartnerConnectorType.KAFKA_AZURE_BLOB_STORAGE_SOURCE, **kwargs)


class KafkaAzureCosmosDBSinkConnectorInfo(PartnerInfoBase, discriminator="KafkaAzureCosmosDBSink"):
    """The partner connector type is KafkaAzureCosmosDBSink.

    :ivar auth_type: Kafka Auth Type. Known values are: "SERVICE_ACCOUNT" and "KAFKA_API_KEY".
    :vartype auth_type: str or ~azure.mgmt.confluent.models.AuthType
    :ivar input_format: Kafka Input Data Format Type. Known values are: "AVRO", "JSON", "STRING",
     "BYTES", and "PROTOBUF".
    :vartype input_format: str or ~azure.mgmt.confluent.models.DataFormatType
    :ivar output_format: Kafka Output Data Format Type. Known values are: "AVRO", "JSON", "STRING",
     "BYTES", and "PROTOBUF".
    :vartype output_format: str or ~azure.mgmt.confluent.models.DataFormatType
    :ivar api_key: Kafka API Key.
    :vartype api_key: str
    :ivar api_secret: Kafka API Key Secret.
    :vartype api_secret: str
    :ivar service_account_id: Kafka Service Account Id.
    :vartype service_account_id: str
    :ivar topics: Kafka topics list.
    :vartype topics: list[str]
    :ivar topics_dir: Kafka topics directory.
    :vartype topics_dir: str
    :ivar flush_size: Flush size.
    :vartype flush_size: str
    :ivar max_tasks: Maximum Tasks.
    :vartype max_tasks: str
    :ivar time_interval: Time Interval.
    :vartype time_interval: str
    :ivar partner_connector_type: The partner connector type. Required.
    :vartype partner_connector_type: str or ~azure.mgmt.confluent.models.KAFKA_AZURE_COSMOS_DB_SINK
    """

    auth_type: Optional[Union[str, "_models.AuthType"]] = rest_field(
        name="authType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kafka Auth Type. Known values are: \"SERVICE_ACCOUNT\" and \"KAFKA_API_KEY\"."""
    input_format: Optional[Union[str, "_models.DataFormatType"]] = rest_field(
        name="inputFormat", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kafka Input Data Format Type. Known values are: \"AVRO\", \"JSON\", \"STRING\", \"BYTES\", and
     \"PROTOBUF\"."""
    output_format: Optional[Union[str, "_models.DataFormatType"]] = rest_field(
        name="outputFormat", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kafka Output Data Format Type. Known values are: \"AVRO\", \"JSON\", \"STRING\", \"BYTES\", and
     \"PROTOBUF\"."""
    api_key: Optional[str] = rest_field(name="apiKey", visibility=["read", "create", "update", "delete", "query"])
    """Kafka API Key."""
    api_secret: Optional[str] = rest_field(name="apiSecret", visibility=["read", "create", "update", "delete", "query"])
    """Kafka API Key Secret."""
    service_account_id: Optional[str] = rest_field(
        name="serviceAccountId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kafka Service Account Id."""
    topics: Optional[List[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Kafka topics list."""
    topics_dir: Optional[str] = rest_field(name="topicsDir", visibility=["read", "create", "update", "delete", "query"])
    """Kafka topics directory."""
    flush_size: Optional[str] = rest_field(name="flushSize", visibility=["read", "create", "update", "delete", "query"])
    """Flush size."""
    max_tasks: Optional[str] = rest_field(name="maxTasks", visibility=["read", "create", "update", "delete", "query"])
    """Maximum Tasks."""
    time_interval: Optional[str] = rest_field(
        name="timeInterval", visibility=["read", "create", "update", "delete", "query"]
    )
    """Time Interval."""
    partner_connector_type: Literal[PartnerConnectorType.KAFKA_AZURE_COSMOS_DB_SINK] = rest_discriminator(name="partnerConnectorType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The partner connector type. Required."""

    @overload
    def __init__(
        self,
        *,
        auth_type: Optional[Union[str, "_models.AuthType"]] = None,
        input_format: Optional[Union[str, "_models.DataFormatType"]] = None,
        output_format: Optional[Union[str, "_models.DataFormatType"]] = None,
        api_key: Optional[str] = None,
        api_secret: Optional[str] = None,
        service_account_id: Optional[str] = None,
        topics: Optional[List[str]] = None,
        topics_dir: Optional[str] = None,
        flush_size: Optional[str] = None,
        max_tasks: Optional[str] = None,
        time_interval: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, partner_connector_type=PartnerConnectorType.KAFKA_AZURE_COSMOS_DB_SINK, **kwargs)


class KafkaAzureCosmosDBSourceConnectorInfo(PartnerInfoBase, discriminator="KafkaAzureCosmosDBSource"):
    """The partner connector type is KafkaAzureCosmosDBSource.

    :ivar auth_type: Kafka Auth Type. Known values are: "SERVICE_ACCOUNT" and "KAFKA_API_KEY".
    :vartype auth_type: str or ~azure.mgmt.confluent.models.AuthType
    :ivar input_format: Kafka Input Data Format Type. Known values are: "AVRO", "JSON", "STRING",
     "BYTES", and "PROTOBUF".
    :vartype input_format: str or ~azure.mgmt.confluent.models.DataFormatType
    :ivar output_format: Kafka Output Data Format Type. Known values are: "AVRO", "JSON", "STRING",
     "BYTES", and "PROTOBUF".
    :vartype output_format: str or ~azure.mgmt.confluent.models.DataFormatType
    :ivar api_key: Kafka API Key.
    :vartype api_key: str
    :ivar api_secret: Kafka API Secret.
    :vartype api_secret: str
    :ivar service_account_id: Kafka Service Account Id.
    :vartype service_account_id: str
    :ivar topic_regex: Kafka topics Regex pattern.
    :vartype topic_regex: str
    :ivar topics_dir: Kafka topics directory.
    :vartype topics_dir: str
    :ivar max_tasks: Maximum Tasks.
    :vartype max_tasks: str
    :ivar partner_connector_type: The partner connector type. Required.
    :vartype partner_connector_type: str or
     ~azure.mgmt.confluent.models.KAFKA_AZURE_COSMOS_DB_SOURCE
    """

    auth_type: Optional[Union[str, "_models.AuthType"]] = rest_field(
        name="authType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kafka Auth Type. Known values are: \"SERVICE_ACCOUNT\" and \"KAFKA_API_KEY\"."""
    input_format: Optional[Union[str, "_models.DataFormatType"]] = rest_field(
        name="inputFormat", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kafka Input Data Format Type. Known values are: \"AVRO\", \"JSON\", \"STRING\", \"BYTES\", and
     \"PROTOBUF\"."""
    output_format: Optional[Union[str, "_models.DataFormatType"]] = rest_field(
        name="outputFormat", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kafka Output Data Format Type. Known values are: \"AVRO\", \"JSON\", \"STRING\", \"BYTES\", and
     \"PROTOBUF\"."""
    api_key: Optional[str] = rest_field(name="apiKey", visibility=["read", "create", "update", "delete", "query"])
    """Kafka API Key."""
    api_secret: Optional[str] = rest_field(name="apiSecret", visibility=["read", "create", "update", "delete", "query"])
    """Kafka API Secret."""
    service_account_id: Optional[str] = rest_field(
        name="serviceAccountId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kafka Service Account Id."""
    topic_regex: Optional[str] = rest_field(
        name="topicRegex", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kafka topics Regex pattern."""
    topics_dir: Optional[str] = rest_field(name="topicsDir", visibility=["read", "create", "update", "delete", "query"])
    """Kafka topics directory."""
    max_tasks: Optional[str] = rest_field(name="maxTasks", visibility=["read", "create", "update", "delete", "query"])
    """Maximum Tasks."""
    partner_connector_type: Literal[PartnerConnectorType.KAFKA_AZURE_COSMOS_DB_SOURCE] = rest_discriminator(name="partnerConnectorType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The partner connector type. Required."""

    @overload
    def __init__(
        self,
        *,
        auth_type: Optional[Union[str, "_models.AuthType"]] = None,
        input_format: Optional[Union[str, "_models.DataFormatType"]] = None,
        output_format: Optional[Union[str, "_models.DataFormatType"]] = None,
        api_key: Optional[str] = None,
        api_secret: Optional[str] = None,
        service_account_id: Optional[str] = None,
        topic_regex: Optional[str] = None,
        topics_dir: Optional[str] = None,
        max_tasks: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, partner_connector_type=PartnerConnectorType.KAFKA_AZURE_COSMOS_DB_SOURCE, **kwargs)


class KafkaAzureSynapseAnalyticsSinkConnectorInfo(
    PartnerInfoBase, discriminator="KafkaAzureSynapseAnalyticsSink"
):  # pylint: disable=name-too-long
    """The partner connector type is KafkaAzureSynapseAnalyticsSink.

    :ivar auth_type: Kafka Auth Type. Known values are: "SERVICE_ACCOUNT" and "KAFKA_API_KEY".
    :vartype auth_type: str or ~azure.mgmt.confluent.models.AuthType
    :ivar input_format: Kafka Input Data Format Type. Known values are: "AVRO", "JSON", "STRING",
     "BYTES", and "PROTOBUF".
    :vartype input_format: str or ~azure.mgmt.confluent.models.DataFormatType
    :ivar output_format: Kafka Output Data Format Type. Known values are: "AVRO", "JSON", "STRING",
     "BYTES", and "PROTOBUF".
    :vartype output_format: str or ~azure.mgmt.confluent.models.DataFormatType
    :ivar api_key: Kafka API Key.
    :vartype api_key: str
    :ivar api_secret: Kafka API Key Secret.
    :vartype api_secret: str
    :ivar service_account_id: Kafka Service Account Id.
    :vartype service_account_id: str
    :ivar topics: Kafka topics list.
    :vartype topics: list[str]
    :ivar topics_dir: Kafka topics directory.
    :vartype topics_dir: str
    :ivar flush_size: Flush size.
    :vartype flush_size: str
    :ivar max_tasks: Maximum Tasks.
    :vartype max_tasks: str
    :ivar time_interval: Time Interval.
    :vartype time_interval: str
    :ivar partner_connector_type: The partner connector type. Required.
    :vartype partner_connector_type: str or
     ~azure.mgmt.confluent.models.KAFKA_AZURE_SYNAPSE_ANALYTICS_SINK
    """

    auth_type: Optional[Union[str, "_models.AuthType"]] = rest_field(
        name="authType", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kafka Auth Type. Known values are: \"SERVICE_ACCOUNT\" and \"KAFKA_API_KEY\"."""
    input_format: Optional[Union[str, "_models.DataFormatType"]] = rest_field(
        name="inputFormat", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kafka Input Data Format Type. Known values are: \"AVRO\", \"JSON\", \"STRING\", \"BYTES\", and
     \"PROTOBUF\"."""
    output_format: Optional[Union[str, "_models.DataFormatType"]] = rest_field(
        name="outputFormat", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kafka Output Data Format Type. Known values are: \"AVRO\", \"JSON\", \"STRING\", \"BYTES\", and
     \"PROTOBUF\"."""
    api_key: Optional[str] = rest_field(name="apiKey", visibility=["read", "create", "update", "delete", "query"])
    """Kafka API Key."""
    api_secret: Optional[str] = rest_field(name="apiSecret", visibility=["read", "create", "update", "delete", "query"])
    """Kafka API Key Secret."""
    service_account_id: Optional[str] = rest_field(
        name="serviceAccountId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Kafka Service Account Id."""
    topics: Optional[List[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Kafka topics list."""
    topics_dir: Optional[str] = rest_field(name="topicsDir", visibility=["read", "create", "update", "delete", "query"])
    """Kafka topics directory."""
    flush_size: Optional[str] = rest_field(name="flushSize", visibility=["read", "create", "update", "delete", "query"])
    """Flush size."""
    max_tasks: Optional[str] = rest_field(name="maxTasks", visibility=["read", "create", "update", "delete", "query"])
    """Maximum Tasks."""
    time_interval: Optional[str] = rest_field(
        name="timeInterval", visibility=["read", "create", "update", "delete", "query"]
    )
    """Time Interval."""
    partner_connector_type: Literal[PartnerConnectorType.KAFKA_AZURE_SYNAPSE_ANALYTICS_SINK] = rest_discriminator(name="partnerConnectorType", visibility=["read", "create", "update", "delete", "query"])  # type: ignore
    """The partner connector type. Required."""

    @overload
    def __init__(
        self,
        *,
        auth_type: Optional[Union[str, "_models.AuthType"]] = None,
        input_format: Optional[Union[str, "_models.DataFormatType"]] = None,
        output_format: Optional[Union[str, "_models.DataFormatType"]] = None,
        api_key: Optional[str] = None,
        api_secret: Optional[str] = None,
        service_account_id: Optional[str] = None,
        topics: Optional[List[str]] = None,
        topics_dir: Optional[str] = None,
        flush_size: Optional[str] = None,
        max_tasks: Optional[str] = None,
        time_interval: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(
            *args, partner_connector_type=PartnerConnectorType.KAFKA_AZURE_SYNAPSE_ANALYTICS_SINK, **kwargs
        )


class LinkOrganization(_Model):
    """Link an existing Confluent organization.

    :ivar token: User auth token. Required.
    :vartype token: str
    """

    token: str = rest_field(visibility=["create"])
    """User auth token. Required."""

    @overload
    def __init__(
        self,
        *,
        token: str,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ListAccessRequestModel(_Model):
    """List Access Request Model.

    :ivar search_filters: Search filters for the request.
    :vartype search_filters: dict[str, str]
    """

    search_filters: Optional[Dict[str, str]] = rest_field(
        name="searchFilters", visibility=["read", "create", "update", "delete", "query"]
    )
    """Search filters for the request."""

    @overload
    def __init__(
        self,
        *,
        search_filters: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ListRegionsSuccessResponse(_Model):
    """Result of POST request to list regions supported by confluent.

    :ivar data: List of regions supported by confluent.
    :vartype data: list[~azure.mgmt.confluent.models.RegionRecord]
    """

    data: Optional[List["_models.RegionRecord"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """List of regions supported by confluent."""

    @overload
    def __init__(
        self,
        *,
        data: Optional[List["_models.RegionRecord"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class MetadataEntity(_Model):
    """Metadata of the data record.

    :ivar self_property: Self lookup url.
    :vartype self_property: str
    :ivar resource_name: Resource name of the record.
    :vartype resource_name: str
    :ivar created_at: Created Date Time.
    :vartype created_at: str
    :ivar updated_at: Updated Date time.
    :vartype updated_at: str
    :ivar deleted_at: Deleted Date time.
    :vartype deleted_at: str
    """

    self_property: Optional[str] = rest_field(name="self", visibility=["read", "create", "update", "delete", "query"])
    """Self lookup url."""
    resource_name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource name of the record."""
    created_at: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Created Date Time."""
    updated_at: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Updated Date time."""
    deleted_at: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Deleted Date time."""

    @overload
    def __init__(
        self,
        *,
        self_property: Optional[str] = None,
        resource_name: Optional[str] = None,
        created_at: Optional[str] = None,
        updated_at: Optional[str] = None,
        deleted_at: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OfferDetail(_Model):
    """Confluent Offer detail.

    :ivar publisher_id: Publisher Id. Required.
    :vartype publisher_id: str
    :ivar id: Offer Id. Required.
    :vartype id: str
    :ivar plan_id: Offer Plan Id. Required.
    :vartype plan_id: str
    :ivar plan_name: Offer Plan Name. Required.
    :vartype plan_name: str
    :ivar term_unit: Offer Plan Term unit. Required.
    :vartype term_unit: str
    :ivar term_id: Offer Plan Term Id.
    :vartype term_id: str
    :ivar private_offer_id: Private Offer Id.
    :vartype private_offer_id: str
    :ivar private_offer_ids: Array of Private Offer Ids.
    :vartype private_offer_ids: list[str]
    :ivar status: SaaS Offer Status. Known values are: "Started", "PendingFulfillmentStart",
     "InProgress", "Subscribed", "Suspended", "Reinstated", "Succeeded", "Failed", "Unsubscribed",
     and "Updating".
    :vartype status: str or ~azure.mgmt.confluent.models.SaaSOfferStatus
    """

    publisher_id: str = rest_field(name="publisherId", visibility=["read", "create", "update", "delete", "query"])
    """Publisher Id. Required."""
    id: str = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Offer Id. Required."""
    plan_id: str = rest_field(name="planId", visibility=["read", "create", "update", "delete", "query"])
    """Offer Plan Id. Required."""
    plan_name: str = rest_field(name="planName", visibility=["read", "create", "update", "delete", "query"])
    """Offer Plan Name. Required."""
    term_unit: str = rest_field(name="termUnit", visibility=["read", "create", "update", "delete", "query"])
    """Offer Plan Term unit. Required."""
    term_id: Optional[str] = rest_field(name="termId", visibility=["read", "create", "update", "delete", "query"])
    """Offer Plan Term Id."""
    private_offer_id: Optional[str] = rest_field(
        name="privateOfferId", visibility=["read", "create", "update", "delete", "query"]
    )
    """Private Offer Id."""
    private_offer_ids: Optional[List[str]] = rest_field(
        name="privateOfferIds", visibility=["read", "create", "update", "delete", "query"]
    )
    """Array of Private Offer Ids."""
    status: Optional[Union[str, "_models.SaaSOfferStatus"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """SaaS Offer Status. Known values are: \"Started\", \"PendingFulfillmentStart\", \"InProgress\",
     \"Subscribed\", \"Suspended\", \"Reinstated\", \"Succeeded\", \"Failed\", \"Unsubscribed\", and
     \"Updating\"."""

    @overload
    def __init__(
        self,
        *,
        publisher_id: str,
        id: str,  # pylint: disable=redefined-builtin
        plan_id: str,
        plan_name: str,
        term_unit: str,
        term_id: Optional[str] = None,
        private_offer_id: Optional[str] = None,
        private_offer_ids: Optional[List[str]] = None,
        status: Optional[Union[str, "_models.SaaSOfferStatus"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationDisplay(_Model):
    """The object that represents the operation.

    :ivar provider: Service provider: Microsoft.Confluent.
    :vartype provider: str
    :ivar resource: Type on which the operation is performed, e.g., 'clusters'.
    :vartype resource: str
    :ivar operation: Operation type, e.g., read, write, delete, etc.
    :vartype operation: str
    :ivar description: Description of the operation, e.g., 'Write confluent'.
    :vartype description: str
    """

    provider: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Service provider: Microsoft.Confluent."""
    resource: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type on which the operation is performed, e.g., 'clusters'."""
    operation: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Operation type, e.g., read, write, delete, etc."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Description of the operation, e.g., 'Write confluent'."""

    @overload
    def __init__(
        self,
        *,
        provider: Optional[str] = None,
        resource: Optional[str] = None,
        operation: Optional[str] = None,
        description: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OperationResult(_Model):
    """An Confluent REST API operation.

    :ivar name: Operation name: {provider}/{resource}/{operation}.
    :vartype name: str
    :ivar display: The object that represents the operation.
    :vartype display: ~azure.mgmt.confluent.models.OperationDisplay
    :ivar is_data_action: Indicates whether the operation is a data action.
    :vartype is_data_action: bool
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Operation name: {provider}/{resource}/{operation}."""
    display: Optional["_models.OperationDisplay"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """The object that represents the operation."""
    is_data_action: Optional[bool] = rest_field(
        name="isDataAction", visibility=["read", "create", "update", "delete", "query"]
    )
    """Indicates whether the operation is a data action."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        display: Optional["_models.OperationDisplay"] = None,
        is_data_action: Optional[bool] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TrackedResource(Resource):
    """Tracked Resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.confluent.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Resource tags."""
    location: str = rest_field(visibility=["read", "create"])
    """The geo-location where the resource lives. Required."""

    @overload
    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OrganizationResource(TrackedResource):
    """Organization resource.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.confluent.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar properties: Organization resource properties. Required.
    :vartype properties: ~azure.mgmt.confluent.models.OrganizationResourceProperties
    """

    properties: "_models.OrganizationResourceProperties" = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Organization resource properties. Required."""

    __flattened_items = [
        "created_time",
        "provisioning_state",
        "organization_id",
        "sso_url",
        "offer_detail",
        "user_detail",
        "link_organization",
    ]

    @overload
    def __init__(
        self,
        *,
        location: str,
        properties: "_models.OrganizationResourceProperties",
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class OrganizationResourceProperties(_Model):
    """Organization resource property.

    :ivar created_time: The creation time of the resource.
    :vartype created_time: ~datetime.datetime
    :ivar provisioning_state: Provision states for confluent RP. Known values are: "Accepted",
     "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled", "Deleted", and
     "NotSpecified".
    :vartype provisioning_state: str or ~azure.mgmt.confluent.models.ProvisionState
    :ivar organization_id: Id of the Confluent organization.
    :vartype organization_id: str
    :ivar sso_url: SSO url for the Confluent organization.
    :vartype sso_url: str
    :ivar offer_detail: Confluent offer detail. Required.
    :vartype offer_detail: ~azure.mgmt.confluent.models.OfferDetail
    :ivar user_detail: Subscriber detail. Required.
    :vartype user_detail: ~azure.mgmt.confluent.models.UserDetail
    :ivar link_organization: Link an existing Confluent organization.
    :vartype link_organization: ~azure.mgmt.confluent.models.LinkOrganization
    """

    created_time: Optional[datetime.datetime] = rest_field(name="createdTime", visibility=["read"], format="rfc3339")
    """The creation time of the resource."""
    provisioning_state: Optional[Union[str, "_models.ProvisionState"]] = rest_field(
        name="provisioningState", visibility=["read"]
    )
    """Provision states for confluent RP. Known values are: \"Accepted\", \"Creating\", \"Updating\",
     \"Deleting\", \"Succeeded\", \"Failed\", \"Canceled\", \"Deleted\", and \"NotSpecified\"."""
    organization_id: Optional[str] = rest_field(name="organizationId", visibility=["read"])
    """Id of the Confluent organization."""
    sso_url: Optional[str] = rest_field(name="ssoUrl", visibility=["read"])
    """SSO url for the Confluent organization."""
    offer_detail: "_models.OfferDetail" = rest_field(
        name="offerDetail", visibility=["read", "create", "update", "delete", "query"]
    )
    """Confluent offer detail. Required."""
    user_detail: "_models.UserDetail" = rest_field(
        name="userDetail", visibility=["read", "create", "update", "delete", "query"]
    )
    """Subscriber detail. Required."""
    link_organization: Optional["_models.LinkOrganization"] = rest_field(
        name="linkOrganization", visibility=["read", "create", "update", "delete", "query"]
    )
    """Link an existing Confluent organization."""

    @overload
    def __init__(
        self,
        *,
        offer_detail: "_models.OfferDetail",
        user_detail: "_models.UserDetail",
        link_organization: Optional["_models.LinkOrganization"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class OrganizationResourceUpdate(_Model):
    """Organization Resource update.

    :ivar tags: ARM resource tags.
    :vartype tags: dict[str, str]
    """

    tags: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """ARM resource tags."""

    @overload
    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RegionProperties(_Model):
    """Region Properties.

    :ivar metadata: Metadata of the record.
    :vartype metadata: ~azure.mgmt.confluent.models.SCMetadataEntity
    :ivar spec: Specification of the region.
    :vartype spec: ~azure.mgmt.confluent.models.RegionSpecEntity
    """

    metadata: Optional["_models.SCMetadataEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Metadata of the record."""
    spec: Optional["_models.RegionSpecEntity"] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Specification of the region."""

    @overload
    def __init__(
        self,
        *,
        metadata: Optional["_models.SCMetadataEntity"] = None,
        spec: Optional["_models.RegionSpecEntity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class RegionRecord(_Model):
    """Details of region record.

    :ivar kind: Kind of the cluster.
    :vartype kind: str
    :ivar id: Id of the cluster.
    :vartype id: str
    :ivar properties: Region Properties.
    :vartype properties: ~azure.mgmt.confluent.models.RegionProperties
    """

    kind: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Kind of the cluster."""
    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Id of the cluster."""
    properties: Optional["_models.RegionProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Region Properties."""

    __flattened_items = ["metadata", "spec"]

    @overload
    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        properties: Optional["_models.RegionProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class RegionSpecEntity(_Model):
    """Region spec details.

    :ivar name: Display Name of the region.
    :vartype name: str
    :ivar cloud: Cloud provider name.
    :vartype cloud: str
    :ivar region_name: Region name.
    :vartype region_name: str
    :ivar packages:
    :vartype packages: list[str]
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Display Name of the region."""
    cloud: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Cloud provider name."""
    region_name: Optional[str] = rest_field(
        name="regionName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Region name."""
    packages: Optional[List[str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        cloud: Optional[str] = None,
        region_name: Optional[str] = None,
        packages: Optional[List[str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ResourceProviderDefaultErrorResponse(_Model):
    """Default error response for resource provider.

    :ivar error: Response body of Error.
    :vartype error: ~azure.mgmt.confluent.models.ErrorResponseBody
    """

    error: Optional["_models.ErrorResponseBody"] = rest_field(visibility=["read"])
    """Response body of Error."""


class RoleBindingRecord(_Model):
    """Details on principal, role name and crn pattern of a role binding.

    :ivar kind: The type of the resource.
    :vartype kind: str
    :ivar id: Id of the role binding.
    :vartype id: str
    :ivar metadata: Metadata of the record.
    :vartype metadata: ~azure.mgmt.confluent.models.MetadataEntity
    :ivar principal: The principal User or Group to bind the role to.
    :vartype principal: str
    :ivar role_name: The name of the role to bind to the principal.
    :vartype role_name: str
    :ivar crn_pattern: A CRN that specifies the scope and resource patterns necessary for the role
     to bind.
    :vartype crn_pattern: str
    """

    kind: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The type of the resource."""
    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Id of the role binding."""
    metadata: Optional["_models.MetadataEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Metadata of the record."""
    principal: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The principal User or Group to bind the role to."""
    role_name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the role to bind to the principal."""
    crn_pattern: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """A CRN that specifies the scope and resource patterns necessary for the role to bind."""

    @overload
    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        metadata: Optional["_models.MetadataEntity"] = None,
        principal: Optional[str] = None,
        role_name: Optional[str] = None,
        crn_pattern: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SCClusterByokEntity(_Model):
    """The network associated with this object.

    :ivar id: ID of the referred resource.
    :vartype id: str
    :ivar related: API URL for accessing or modifying the referred object.
    :vartype related: str
    :ivar resource_name: CRN reference to the referred resource.
    :vartype resource_name: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """ID of the referred resource."""
    related: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """API URL for accessing or modifying the referred object."""
    resource_name: Optional[str] = rest_field(
        name="resourceName", visibility=["read", "create", "update", "delete", "query"]
    )
    """CRN reference to the referred resource."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        related: Optional[str] = None,
        resource_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SCClusterNetworkEnvironmentEntity(_Model):
    """The environment or the network to which cluster belongs.

    :ivar id: ID of the referred resource.
    :vartype id: str
    :ivar environment: Environment of the referred resource.
    :vartype environment: str
    :ivar related: API URL for accessing or modifying the referred object.
    :vartype related: str
    :ivar resource_name: CRN reference to the referred resource.
    :vartype resource_name: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """ID of the referred resource."""
    environment: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Environment of the referred resource."""
    related: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """API URL for accessing or modifying the referred object."""
    resource_name: Optional[str] = rest_field(
        name="resourceName", visibility=["read", "create", "update", "delete", "query"]
    )
    """CRN reference to the referred resource."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        environment: Optional[str] = None,
        related: Optional[str] = None,
        resource_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SCClusterRecord(ProxyResource):
    """Details of cluster record.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.confluent.models.SystemData
    :ivar kind: Type of cluster.
    :vartype kind: str
    :ivar properties: Cluster Properties.
    :vartype properties: ~azure.mgmt.confluent.models.ClusterProperties
    """

    kind: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of cluster."""
    properties: Optional["_models.ClusterProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Cluster Properties."""

    __flattened_items = ["metadata", "spec", "status"]

    @overload
    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        properties: Optional["_models.ClusterProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class SCClusterSpecEntity(_Model):
    """Spec of the cluster record.

    :ivar name: The name of the cluster.
    :vartype name: str
    :ivar availability: The availability zone configuration of the cluster.
    :vartype availability: str
    :ivar cloud: The cloud service provider.
    :vartype cloud: str
    :ivar zone: type of zone availability.
    :vartype zone: str
    :ivar package: Stream governance configuration. Known values are: "ESSENTIALS" and "ADVANCED".
    :vartype package: str or ~azure.mgmt.confluent.models.Package
    :ivar region: The cloud service provider region.
    :vartype region: str
    :ivar kafka_bootstrap_endpoint: The bootstrap endpoint used by Kafka clients to connect to the
     cluster.
    :vartype kafka_bootstrap_endpoint: str
    :ivar http_endpoint: The cluster HTTP request URL.
    :vartype http_endpoint: str
    :ivar api_endpoint: The Kafka API cluster endpoint.
    :vartype api_endpoint: str
    :ivar config: Specification of the cluster configuration.
    :vartype config: ~azure.mgmt.confluent.models.ClusterConfigEntity
    :ivar environment: Specification of the cluster environment.
    :vartype environment: ~azure.mgmt.confluent.models.SCClusterNetworkEnvironmentEntity
    :ivar network: Specification of the cluster network.
    :vartype network: ~azure.mgmt.confluent.models.SCClusterNetworkEnvironmentEntity
    :ivar byok: Specification of the cluster byok.
    :vartype byok: ~azure.mgmt.confluent.models.SCClusterByokEntity
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The name of the cluster."""
    availability: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The availability zone configuration of the cluster."""
    cloud: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The cloud service provider."""
    zone: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """type of zone availability."""
    package: Optional[Union[str, "_models.Package"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Stream governance configuration. Known values are: \"ESSENTIALS\" and \"ADVANCED\"."""
    region: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The cloud service provider region."""
    kafka_bootstrap_endpoint: Optional[str] = rest_field(
        name="kafkaBootstrapEndpoint", visibility=["read", "create", "update", "delete", "query"]
    )
    """The bootstrap endpoint used by Kafka clients to connect to the cluster."""
    http_endpoint: Optional[str] = rest_field(
        name="httpEndpoint", visibility=["read", "create", "update", "delete", "query"]
    )
    """The cluster HTTP request URL."""
    api_endpoint: Optional[str] = rest_field(
        name="apiEndpoint", visibility=["read", "create", "update", "delete", "query"]
    )
    """The Kafka API cluster endpoint."""
    config: Optional["_models.ClusterConfigEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Specification of the cluster configuration."""
    environment: Optional["_models.SCClusterNetworkEnvironmentEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Specification of the cluster environment."""
    network: Optional["_models.SCClusterNetworkEnvironmentEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Specification of the cluster network."""
    byok: Optional["_models.SCClusterByokEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Specification of the cluster byok."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        availability: Optional[str] = None,
        cloud: Optional[str] = None,
        zone: Optional[str] = None,
        package: Optional[Union[str, "_models.Package"]] = None,
        region: Optional[str] = None,
        kafka_bootstrap_endpoint: Optional[str] = None,
        http_endpoint: Optional[str] = None,
        api_endpoint: Optional[str] = None,
        config: Optional["_models.ClusterConfigEntity"] = None,
        environment: Optional["_models.SCClusterNetworkEnvironmentEntity"] = None,
        network: Optional["_models.SCClusterNetworkEnvironmentEntity"] = None,
        byok: Optional["_models.SCClusterByokEntity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SCEnvironmentRecord(ProxyResource):
    """Details about environment name, metadata and environment id of an environment.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.confluent.models.SystemData
    :ivar kind: Type of environment.
    :vartype kind: str
    :ivar properties: Environment properties.
    :vartype properties: ~azure.mgmt.confluent.models.EnvironmentProperties
    """

    kind: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of environment."""
    properties: Optional["_models.EnvironmentProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Environment properties."""

    __flattened_items = ["stream_governance_config", "metadata"]

    @overload
    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        properties: Optional["_models.EnvironmentProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class SchemaRegistryClusterEnvironmentRegionEntity(_Model):  # pylint: disable=name-too-long
    """The environment associated with this object.

    :ivar id: ID of the referred resource.
    :vartype id: str
    :ivar related: API URL for accessing or modifying the referred object.
    :vartype related: str
    :ivar resource_name: CRN reference to the referred resource.
    :vartype resource_name: str
    """

    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """ID of the referred resource."""
    related: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """API URL for accessing or modifying the referred object."""
    resource_name: Optional[str] = rest_field(
        name="resourceName", visibility=["read", "create", "update", "delete", "query"]
    )
    """CRN reference to the referred resource."""

    @overload
    def __init__(
        self,
        *,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        related: Optional[str] = None,
        resource_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SchemaRegistryClusterProperties(_Model):
    """Schema Registry Cluster Properties.

    :ivar metadata: Metadata of the record.
    :vartype metadata: ~azure.mgmt.confluent.models.SCMetadataEntity
    :ivar spec: Specification of the schema registry cluster.
    :vartype spec: ~azure.mgmt.confluent.models.SchemaRegistryClusterSpecEntity
    :ivar status: Specification of the cluster status.
    :vartype status: ~azure.mgmt.confluent.models.SchemaRegistryClusterStatusEntity
    """

    metadata: Optional["_models.SCMetadataEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Metadata of the record."""
    spec: Optional["_models.SchemaRegistryClusterSpecEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Specification of the schema registry cluster."""
    status: Optional["_models.SchemaRegistryClusterStatusEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Specification of the cluster status."""

    @overload
    def __init__(
        self,
        *,
        metadata: Optional["_models.SCMetadataEntity"] = None,
        spec: Optional["_models.SchemaRegistryClusterSpecEntity"] = None,
        status: Optional["_models.SchemaRegistryClusterStatusEntity"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SchemaRegistryClusterRecord(_Model):
    """Details of schema registry cluster record.

    :ivar kind: Kind of the cluster.
    :vartype kind: str
    :ivar id: Id of the cluster.
    :vartype id: str
    :ivar properties: Schema Registry Cluster Properties.
    :vartype properties: ~azure.mgmt.confluent.models.SchemaRegistryClusterProperties
    """

    kind: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Kind of the cluster."""
    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Id of the cluster."""
    properties: Optional["_models.SchemaRegistryClusterProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Schema Registry Cluster Properties."""

    __flattened_items = ["metadata", "spec", "status"]

    @overload
    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        properties: Optional["_models.SchemaRegistryClusterProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class SchemaRegistryClusterSpecEntity(_Model):
    """Details of schema registry cluster spec.

    :ivar name: Name of the schema registry cluster.
    :vartype name: str
    :ivar http_endpoint: Http endpoint of the cluster.
    :vartype http_endpoint: str
    :ivar package: Type of the cluster package Advanced, essentials.
    :vartype package: str
    :ivar region: Region details of the schema registry cluster.
    :vartype region: ~azure.mgmt.confluent.models.SchemaRegistryClusterEnvironmentRegionEntity
    :ivar environment: Environment details of the schema registry cluster.
    :vartype environment: ~azure.mgmt.confluent.models.SchemaRegistryClusterEnvironmentRegionEntity
    :ivar cloud: The cloud service provider.
    :vartype cloud: str
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the schema registry cluster."""
    http_endpoint: Optional[str] = rest_field(
        name="httpEndpoint", visibility=["read", "create", "update", "delete", "query"]
    )
    """Http endpoint of the cluster."""
    package: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of the cluster package Advanced, essentials."""
    region: Optional["_models.SchemaRegistryClusterEnvironmentRegionEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Region details of the schema registry cluster."""
    environment: Optional["_models.SchemaRegistryClusterEnvironmentRegionEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Environment details of the schema registry cluster."""
    cloud: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The cloud service provider."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        http_endpoint: Optional[str] = None,
        package: Optional[str] = None,
        region: Optional["_models.SchemaRegistryClusterEnvironmentRegionEntity"] = None,
        environment: Optional["_models.SchemaRegistryClusterEnvironmentRegionEntity"] = None,
        cloud: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SchemaRegistryClusterStatusEntity(_Model):
    """Status of the schema registry cluster record.

    :ivar phase: The lifecycle phase of the cluster.
    :vartype phase: str
    """

    phase: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """The lifecycle phase of the cluster."""

    @overload
    def __init__(
        self,
        *,
        phase: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SCMetadataEntity(_Model):
    """Metadata of the data record.

    :ivar self_property: Self lookup url.
    :vartype self_property: str
    :ivar resource_name: Resource name of the record.
    :vartype resource_name: str
    :ivar created_timestamp: Created Date Time.
    :vartype created_timestamp: str
    :ivar updated_timestamp: Updated Date time.
    :vartype updated_timestamp: str
    :ivar deleted_timestamp: Deleted Date time.
    :vartype deleted_timestamp: str
    """

    self_property: Optional[str] = rest_field(name="self", visibility=["read", "create", "update", "delete", "query"])
    """Self lookup url."""
    resource_name: Optional[str] = rest_field(
        name="resourceName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Resource name of the record."""
    created_timestamp: Optional[str] = rest_field(
        name="createdTimestamp", visibility=["read", "create", "update", "delete", "query"]
    )
    """Created Date Time."""
    updated_timestamp: Optional[str] = rest_field(
        name="updatedTimestamp", visibility=["read", "create", "update", "delete", "query"]
    )
    """Updated Date time."""
    deleted_timestamp: Optional[str] = rest_field(
        name="deletedTimestamp", visibility=["read", "create", "update", "delete", "query"]
    )
    """Deleted Date time."""

    @overload
    def __init__(
        self,
        *,
        self_property: Optional[str] = None,
        resource_name: Optional[str] = None,
        created_timestamp: Optional[str] = None,
        updated_timestamp: Optional[str] = None,
        deleted_timestamp: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ServiceAccountRecord(_Model):
    """Record of the service account.

    :ivar kind: Type of account.
    :vartype kind: str
    :ivar id: Id of the service account.
    :vartype id: str
    :ivar metadata: Metadata of the record.
    :vartype metadata: ~azure.mgmt.confluent.models.MetadataEntity
    :ivar display_name: Name of the service account.
    :vartype display_name: str
    :ivar description: Description of the service account.
    :vartype description: str
    """

    kind: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of account."""
    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Id of the service account."""
    metadata: Optional["_models.MetadataEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Metadata of the record."""
    display_name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the service account."""
    description: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Description of the service account."""

    @overload
    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        metadata: Optional["_models.MetadataEntity"] = None,
        display_name: Optional[str] = None,
        description: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class StreamGovernanceConfig(_Model):
    """Stream governance configuration.

    :ivar package: Stream governance configuration. Known values are: "ESSENTIALS" and "ADVANCED".
    :vartype package: str or ~azure.mgmt.confluent.models.Package
    """

    package: Optional[Union[str, "_models.Package"]] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Stream governance configuration. Known values are: \"ESSENTIALS\" and \"ADVANCED\"."""

    @overload
    def __init__(
        self,
        *,
        package: Optional[Union[str, "_models.Package"]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class SystemData(_Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or ~azure.mgmt.confluent.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.confluent.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    created_by: Optional[str] = rest_field(name="createdBy", visibility=["read", "create", "update", "delete", "query"])
    """The identity that created the resource."""
    created_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="createdByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that created the resource. Known values are: \"User\", \"Application\",
     \"ManagedIdentity\", and \"Key\"."""
    created_at: Optional[datetime.datetime] = rest_field(
        name="createdAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource creation (UTC)."""
    last_modified_by: Optional[str] = rest_field(
        name="lastModifiedBy", visibility=["read", "create", "update", "delete", "query"]
    )
    """The identity that last modified the resource."""
    last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = rest_field(
        name="lastModifiedByType", visibility=["read", "create", "update", "delete", "query"]
    )
    """The type of identity that last modified the resource. Known values are: \"User\",
     \"Application\", \"ManagedIdentity\", and \"Key\"."""
    last_modified_at: Optional[datetime.datetime] = rest_field(
        name="lastModifiedAt", visibility=["read", "create", "update", "delete", "query"], format="rfc3339"
    )
    """The timestamp of resource last modification (UTC)."""

    @overload
    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TopicMetadataEntity(_Model):
    """Metadata of the data record.

    :ivar self_property: Self lookup url.
    :vartype self_property: str
    :ivar resource_name: Resource name of the record.
    :vartype resource_name: str
    """

    self_property: Optional[str] = rest_field(name="self", visibility=["read", "create", "update", "delete", "query"])
    """Self lookup url."""
    resource_name: Optional[str] = rest_field(
        name="resourceName", visibility=["read", "create", "update", "delete", "query"]
    )
    """Resource name of the record."""

    @overload
    def __init__(
        self,
        *,
        self_property: Optional[str] = None,
        resource_name: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TopicProperties(_Model):
    """Topic Properties.

    :ivar kind: Type of topic.
    :vartype kind: str
    :ivar topic_id: Topic Id returned by Confluent.
    :vartype topic_id: str
    :ivar metadata: Metadata of the record.
    :vartype metadata: ~azure.mgmt.confluent.models.TopicMetadataEntity
    :ivar partitions: Partition Specification of the topic.
    :vartype partitions: ~azure.mgmt.confluent.models.TopicsRelatedLink
    :ivar configs: Config Specification of the topic.
    :vartype configs: ~azure.mgmt.confluent.models.TopicsRelatedLink
    :ivar input_configs: Input Config Specification of the topic.
    :vartype input_configs: list[~azure.mgmt.confluent.models.TopicsInputConfig]
    :ivar partitions_reassignments: Partition Reassignment Specification of the topic.
    :vartype partitions_reassignments: ~azure.mgmt.confluent.models.TopicsRelatedLink
    :ivar partitions_count: Partition count of the topic.
    :vartype partitions_count: str
    :ivar replication_factor: Replication factor of the topic.
    :vartype replication_factor: str
    """

    kind: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of topic."""
    topic_id: Optional[str] = rest_field(name="topicId", visibility=["read", "create", "update", "delete", "query"])
    """Topic Id returned by Confluent."""
    metadata: Optional["_models.TopicMetadataEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Metadata of the record."""
    partitions: Optional["_models.TopicsRelatedLink"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Partition Specification of the topic."""
    configs: Optional["_models.TopicsRelatedLink"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Config Specification of the topic."""
    input_configs: Optional[List["_models.TopicsInputConfig"]] = rest_field(
        name="inputConfigs", visibility=["read", "create", "update", "delete", "query"]
    )
    """Input Config Specification of the topic."""
    partitions_reassignments: Optional["_models.TopicsRelatedLink"] = rest_field(
        name="partitionsReassignments", visibility=["read", "create", "update", "delete", "query"]
    )
    """Partition Reassignment Specification of the topic."""
    partitions_count: Optional[str] = rest_field(
        name="partitionsCount", visibility=["read", "create", "update", "delete", "query"]
    )
    """Partition count of the topic."""
    replication_factor: Optional[str] = rest_field(
        name="replicationFactor", visibility=["read", "create", "update", "delete", "query"]
    )
    """Replication factor of the topic."""

    @overload
    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        topic_id: Optional[str] = None,
        metadata: Optional["_models.TopicMetadataEntity"] = None,
        partitions: Optional["_models.TopicsRelatedLink"] = None,
        configs: Optional["_models.TopicsRelatedLink"] = None,
        input_configs: Optional[List["_models.TopicsInputConfig"]] = None,
        partitions_reassignments: Optional["_models.TopicsRelatedLink"] = None,
        partitions_count: Optional[str] = None,
        replication_factor: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TopicRecord(ProxyResource):
    """Details of topic record.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.confluent.models.SystemData
    :ivar properties: Topic Properties.
    :vartype properties: ~azure.mgmt.confluent.models.TopicProperties
    """

    properties: Optional["_models.TopicProperties"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Topic Properties."""

    __flattened_items = [
        "kind",
        "topic_id",
        "metadata",
        "partitions",
        "configs",
        "input_configs",
        "partitions_reassignments",
        "partitions_count",
        "replication_factor",
    ]

    @overload
    def __init__(
        self,
        *,
        properties: Optional["_models.TopicProperties"] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        _flattened_input = {k: kwargs.pop(k) for k in kwargs.keys() & self.__flattened_items}
        super().__init__(*args, **kwargs)
        for k, v in _flattened_input.items():
            setattr(self, k, v)

    def __getattr__(self, name: str) -> Any:
        if name in self.__flattened_items:
            if self.properties is None:
                return None
            return getattr(self.properties, name)
        raise AttributeError(f"'{self.__class__.__name__}' object has no attribute '{name}'")

    def __setattr__(self, key: str, value: Any) -> None:
        if key in self.__flattened_items:
            if self.properties is None:
                self.properties = self._attr_to_rest_field["properties"]._class_type()
            setattr(self.properties, key, value)
        else:
            super().__setattr__(key, value)


class TopicsInputConfig(_Model):
    """Topics input config.

    :ivar name: Name of the topic input config.
    :vartype name: str
    :ivar value: Value of the topic input config.
    :vartype value: str
    """

    name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the topic input config."""
    value: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Value of the topic input config."""

    @overload
    def __init__(
        self,
        *,
        name: Optional[str] = None,
        value: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class TopicsRelatedLink(_Model):
    """Partition Config spec of the topic record.

    :ivar related: Relationship of the topic.
    :vartype related: str
    """

    related: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Relationship of the topic."""

    @overload
    def __init__(
        self,
        *,
        related: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserDetail(_Model):
    """Subscriber detail.

    :ivar first_name: First name.
    :vartype first_name: str
    :ivar last_name: Last name.
    :vartype last_name: str
    :ivar email_address: Email address. Required.
    :vartype email_address: str
    :ivar user_principal_name: User principal name.
    :vartype user_principal_name: str
    :ivar aad_email: AAD email address.
    :vartype aad_email: str
    """

    first_name: Optional[str] = rest_field(name="firstName", visibility=["read", "create", "update", "delete", "query"])
    """First name."""
    last_name: Optional[str] = rest_field(name="lastName", visibility=["read", "create", "update", "delete", "query"])
    """Last name."""
    email_address: str = rest_field(name="emailAddress", visibility=["read", "create", "update", "delete", "query"])
    """Email address. Required."""
    user_principal_name: Optional[str] = rest_field(
        name="userPrincipalName", visibility=["read", "create", "update", "delete", "query"]
    )
    """User principal name."""
    aad_email: Optional[str] = rest_field(name="aadEmail", visibility=["read", "create", "update", "delete", "query"])
    """AAD email address."""

    @overload
    def __init__(
        self,
        *,
        email_address: str,
        first_name: Optional[str] = None,
        last_name: Optional[str] = None,
        user_principal_name: Optional[str] = None,
        aad_email: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class UserRecord(_Model):
    """Record of the user.

    :ivar kind: Type of account.
    :vartype kind: str
    :ivar id: Id of the user.
    :vartype id: str
    :ivar metadata: Metadata of the record.
    :vartype metadata: ~azure.mgmt.confluent.models.MetadataEntity
    :ivar email: Email of the user.
    :vartype email: str
    :ivar full_name: Name of the user.
    :vartype full_name: str
    :ivar auth_type: Auth type of the user.
    :vartype auth_type: str
    """

    kind: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Type of account."""
    id: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Id of the user."""
    metadata: Optional["_models.MetadataEntity"] = rest_field(
        visibility=["read", "create", "update", "delete", "query"]
    )
    """Metadata of the record."""
    email: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Email of the user."""
    full_name: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Name of the user."""
    auth_type: Optional[str] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Auth type of the user."""

    @overload
    def __init__(
        self,
        *,
        kind: Optional[str] = None,
        id: Optional[str] = None,  # pylint: disable=redefined-builtin
        metadata: Optional["_models.MetadataEntity"] = None,
        email: Optional[str] = None,
        full_name: Optional[str] = None,
        auth_type: Optional[str] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)


class ValidationResponse(_Model):
    """Validation response from the provider.

    :ivar info: Info from the response.
    :vartype info: dict[str, str]
    """

    info: Optional[Dict[str, str]] = rest_field(visibility=["read", "create", "update", "delete", "query"])
    """Info from the response."""

    @overload
    def __init__(
        self,
        *,
        info: Optional[Dict[str, str]] = None,
    ) -> None: ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]) -> None:
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        super().__init__(*args, **kwargs)
