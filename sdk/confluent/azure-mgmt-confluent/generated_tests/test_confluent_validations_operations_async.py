# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.confluent.aio import ConfluentClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestConfluentValidationsOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(ConfluentClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_validations_validate_organization(self, resource_group):
        response = await self.client.validations.validate_organization(
            resource_group_name=resource_group.name,
            organization_name="str",
            body={
                "location": "str",
                "properties": {
                    "offerDetail": {
                        "id": "str",
                        "planId": "str",
                        "planName": "str",
                        "publisherId": "str",
                        "termUnit": "str",
                        "privateOfferId": "str",
                        "privateOfferIds": ["str"],
                        "status": "str",
                        "termId": "str",
                    },
                    "userDetail": {
                        "emailAddress": "str",
                        "aadEmail": "str",
                        "firstName": "str",
                        "lastName": "str",
                        "userPrincipalName": "str",
                    },
                    "createdTime": "2020-02-20 00:00:00",
                    "linkOrganization": {"token": "str"},
                    "organizationId": "str",
                    "provisioningState": "str",
                    "ssoUrl": "str",
                },
                "id": "str",
                "name": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_validations_validate_organization_v2(self, resource_group):
        response = await self.client.validations.validate_organization_v2(
            resource_group_name=resource_group.name,
            organization_name="str",
            body={
                "location": "str",
                "properties": {
                    "offerDetail": {
                        "id": "str",
                        "planId": "str",
                        "planName": "str",
                        "publisherId": "str",
                        "termUnit": "str",
                        "privateOfferId": "str",
                        "privateOfferIds": ["str"],
                        "status": "str",
                        "termId": "str",
                    },
                    "userDetail": {
                        "emailAddress": "str",
                        "aadEmail": "str",
                        "firstName": "str",
                        "lastName": "str",
                        "userPrincipalName": "str",
                    },
                    "createdTime": "2020-02-20 00:00:00",
                    "linkOrganization": {"token": "str"},
                    "organizationId": "str",
                    "provisioningState": "str",
                    "ssoUrl": "str",
                },
                "id": "str",
                "name": "str",
                "systemData": {
                    "createdAt": "2020-02-20 00:00:00",
                    "createdBy": "str",
                    "createdByType": "str",
                    "lastModifiedAt": "2020-02-20 00:00:00",
                    "lastModifiedBy": "str",
                    "lastModifiedByType": "str",
                },
                "tags": {"str": "str"},
                "type": "str",
            },
        )

        # please add some check logic here by yourself
        # ...
