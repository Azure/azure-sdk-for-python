# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.confluent.aio import ConfluentClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestConfluentAccessOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(ConfluentClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_access_delete_role_binding(self, resource_group):
        response = await self.client.access.delete_role_binding(
            resource_group_name=resource_group.name,
            organization_name="str",
            role_binding_id="str",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_access_list_users(self, resource_group):
        response = await self.client.access.list_users(
            resource_group_name=resource_group.name,
            organization_name="str",
            body={"searchFilters": {"str": "str"}},
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_access_list_service_accounts(self, resource_group):
        response = await self.client.access.list_service_accounts(
            resource_group_name=resource_group.name,
            organization_name="str",
            body={"searchFilters": {"str": "str"}},
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_access_list_invitations(self, resource_group):
        response = await self.client.access.list_invitations(
            resource_group_name=resource_group.name,
            organization_name="str",
            body={"searchFilters": {"str": "str"}},
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_access_invite_user(self, resource_group):
        response = await self.client.access.invite_user(
            resource_group_name=resource_group.name,
            organization_name="str",
            body={
                "email": "str",
                "invitedUserDetails": {"auth_type": "str", "invitedEmail": "str"},
                "organizationId": "str",
                "upn": "str",
            },
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_access_list_environments(self, resource_group):
        response = await self.client.access.list_environments(
            resource_group_name=resource_group.name,
            organization_name="str",
            body={"searchFilters": {"str": "str"}},
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_access_list_clusters(self, resource_group):
        response = await self.client.access.list_clusters(
            resource_group_name=resource_group.name,
            organization_name="str",
            body={"searchFilters": {"str": "str"}},
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_access_list_role_bindings(self, resource_group):
        response = await self.client.access.list_role_bindings(
            resource_group_name=resource_group.name,
            organization_name="str",
            body={"searchFilters": {"str": "str"}},
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_access_create_role_binding(self, resource_group):
        response = await self.client.access.create_role_binding(
            resource_group_name=resource_group.name,
            organization_name="str",
            body={"crn_pattern": "str", "principal": "str", "role_name": "str"},
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_access_list_role_binding_name_list(self, resource_group):
        response = await self.client.access.list_role_binding_name_list(
            resource_group_name=resource_group.name,
            organization_name="str",
            body={"searchFilters": {"str": "str"}},
        )

        # please add some check logic here by yourself
        # ...
