# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class AffectedMoveResource(Model):
    """The RP custom operation error info.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: The affected move resource id.
    :vartype id: str
    :ivar source_id: The affected move resource source id.
    :vartype source_id: str
    :ivar move_resources: The affected move resources.
    :vartype move_resources:
     list[~azure.mgmt.resourcemover.models.AffectedMoveResource]
    """

    _validation = {
        'id': {'readonly': True},
        'source_id': {'readonly': True},
        'move_resources': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'source_id': {'key': 'sourceId', 'type': 'str'},
        'move_resources': {'key': 'moveResources', 'type': '[AffectedMoveResource]'},
    }

    def __init__(self, **kwargs) -> None:
        super(AffectedMoveResource, self).__init__(**kwargs)
        self.id = None
        self.source_id = None
        self.move_resources = None


class AutomaticResolutionProperties(Model):
    """Defines the properties for automatic resolution.

    :param move_resource_id: Gets the MoveResource ARM ID of
     the dependent resource if the resolution type is Automatic.
    :type move_resource_id: str
    """

    _attribute_map = {
        'move_resource_id': {'key': 'moveResourceId', 'type': 'str'},
    }

    def __init__(self, *, move_resource_id: str=None, **kwargs) -> None:
        super(AutomaticResolutionProperties, self).__init__(**kwargs)
        self.move_resource_id = move_resource_id


class ResourceSettings(Model):
    """Gets or sets the resource settings.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: VirtualMachineResourceSettings,
    AvailabilitySetResourceSettings, VirtualNetworkResourceSettings,
    NetworkInterfaceResourceSettings, NetworkSecurityGroupResourceSettings,
    LoadBalancerResourceSettings, SqlServerResourceSettings,
    SqlElasticPoolResourceSettings, SqlDatabaseResourceSettings,
    ResourceGroupResourceSettings, PublicIPAddressResourceSettings

    All required parameters must be populated in order to send to Azure.

    :param target_resource_name: Required. Gets or sets the target Resource
     name.
    :type target_resource_name: str
    :param resource_type: Required. Constant filled by server.
    :type resource_type: str
    """

    _validation = {
        'target_resource_name': {'required': True},
        'resource_type': {'required': True},
    }

    _attribute_map = {
        'target_resource_name': {'key': 'targetResourceName', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
    }

    _subtype_map = {
        'resource_type': {'Microsoft.Compute/virtualMachines': 'VirtualMachineResourceSettings', 'Microsoft.Compute/availabilitySets': 'AvailabilitySetResourceSettings', 'Microsoft.Network/virtualNetworks': 'VirtualNetworkResourceSettings', 'Microsoft.Network/networkInterfaces': 'NetworkInterfaceResourceSettings', 'Microsoft.Network/networkSecurityGroups': 'NetworkSecurityGroupResourceSettings', 'Microsoft.Network/loadBalancers': 'LoadBalancerResourceSettings', 'Microsoft.Sql/servers': 'SqlServerResourceSettings', 'Microsoft.Sql/servers/elasticPools': 'SqlElasticPoolResourceSettings', 'Microsoft.Sql/servers/databases': 'SqlDatabaseResourceSettings', 'resourceGroups': 'ResourceGroupResourceSettings', 'Microsoft.Network/publicIPAddresses': 'PublicIPAddressResourceSettings'}
    }

    def __init__(self, *, target_resource_name: str, **kwargs) -> None:
        super(ResourceSettings, self).__init__(**kwargs)
        self.target_resource_name = target_resource_name
        self.resource_type = None


class AvailabilitySetResourceSettings(ResourceSettings):
    """Gets or sets the availability set resource settings.

    All required parameters must be populated in order to send to Azure.

    :param target_resource_name: Required. Gets or sets the target Resource
     name.
    :type target_resource_name: str
    :param resource_type: Required. Constant filled by server.
    :type resource_type: str
    :param fault_domain: Gets or sets the target fault domain.
    :type fault_domain: int
    :param update_domain: Gets or sets the target update domain.
    :type update_domain: int
    """

    _validation = {
        'target_resource_name': {'required': True},
        'resource_type': {'required': True},
        'fault_domain': {'minimum': 1},
        'update_domain': {'maximum': 20, 'minimum': 1},
    }

    _attribute_map = {
        'target_resource_name': {'key': 'targetResourceName', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'fault_domain': {'key': 'faultDomain', 'type': 'int'},
        'update_domain': {'key': 'updateDomain', 'type': 'int'},
    }

    def __init__(self, *, target_resource_name: str, fault_domain: int=None, update_domain: int=None, **kwargs) -> None:
        super(AvailabilitySetResourceSettings, self).__init__(target_resource_name=target_resource_name, **kwargs)
        self.fault_domain = fault_domain
        self.update_domain = update_domain
        self.resource_type = 'Microsoft.Compute/availabilitySets'


class AzureResourceReference(Model):
    """Defines reference to an Azure resource.

    All required parameters must be populated in order to send to Azure.

    :param source_arm_resource_id: Required. Gets the ARM resource ID of the
     tracked resource being referenced.
    :type source_arm_resource_id: str
    """

    _validation = {
        'source_arm_resource_id': {'required': True},
    }

    _attribute_map = {
        'source_arm_resource_id': {'key': 'sourceArmResourceId', 'type': 'str'},
    }

    def __init__(self, *, source_arm_resource_id: str, **kwargs) -> None:
        super(AzureResourceReference, self).__init__(**kwargs)
        self.source_arm_resource_id = source_arm_resource_id


class BulkRemoveRequest(Model):
    """Defines the request body for bulk remove of move resources operation.

    :param validate_only: Gets or sets a value indicating whether the
     operation needs to only run pre-requisite.
    :type validate_only: bool
    :param move_resources: Gets or sets the list of resource Id's, by default
     it accepts move resource id's unless the input type is switched via
     moveResourceInputType property.
    :type move_resources: list[str]
    :param move_resource_input_type: Possible values include:
     'MoveResourceId', 'MoveResourceSourceId'
    :type move_resource_input_type: str or
     ~azure.mgmt.resourcemover.models.MoveResourceInputType
    """

    _attribute_map = {
        'validate_only': {'key': 'validateOnly', 'type': 'bool'},
        'move_resources': {'key': 'moveResources', 'type': '[str]'},
        'move_resource_input_type': {'key': 'moveResourceInputType', 'type': 'str'},
    }

    def __init__(self, *, validate_only: bool=None, move_resources=None, move_resource_input_type=None, **kwargs) -> None:
        super(BulkRemoveRequest, self).__init__(**kwargs)
        self.validate_only = validate_only
        self.move_resources = move_resources
        self.move_resource_input_type = move_resource_input_type


class CloudError(Model):
    """An error response from the service.

    :param error: Cloud error body.
    :type error: ~azure.mgmt.resourcemover.models.CloudErrorBody
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'CloudErrorBody'},
    }

    def __init__(self, *, error=None, **kwargs) -> None:
        super(CloudError, self).__init__(**kwargs)
        self.error = error


class CloudErrorException(HttpOperationError):
    """Server responsed with exception of type: 'CloudError'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(CloudErrorException, self).__init__(deserialize, response, 'CloudError', *args)


class CloudErrorBody(Model):
    """An error response from the service.

    :param code: An identifier for the error. Codes are invariant and are
     intended to be consumed programmatically.
    :type code: str
    :param message: A message describing the error, intended to be suitable
     for display in a user interface.
    :type message: str
    :param target: The target of the particular error. For example, the name
     of the property in error.
    :type target: str
    :param details: A list of additional details about the error.
    :type details: list[~azure.mgmt.resourcemover.models.CloudErrorBody]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CloudErrorBody]'},
    }

    def __init__(self, *, code: str=None, message: str=None, target: str=None, details=None, **kwargs) -> None:
        super(CloudErrorBody, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details


class CommitRequest(Model):
    """Defines the request body for commit operation.

    All required parameters must be populated in order to send to Azure.

    :param validate_only: Gets or sets a value indicating whether the
     operation needs to only run pre-requisite.
    :type validate_only: bool
    :param move_resources: Required. Gets or sets the list of resource Id's,
     by default it accepts move resource id's unless the input type is switched
     via moveResourceInputType property.
    :type move_resources: list[str]
    :param move_resource_input_type: Possible values include:
     'MoveResourceId', 'MoveResourceSourceId'
    :type move_resource_input_type: str or
     ~azure.mgmt.resourcemover.models.MoveResourceInputType
    """

    _validation = {
        'move_resources': {'required': True},
    }

    _attribute_map = {
        'validate_only': {'key': 'validateOnly', 'type': 'bool'},
        'move_resources': {'key': 'moveResources', 'type': '[str]'},
        'move_resource_input_type': {'key': 'moveResourceInputType', 'type': 'str'},
    }

    def __init__(self, *, move_resources, validate_only: bool=None, move_resource_input_type=None, **kwargs) -> None:
        super(CommitRequest, self).__init__(**kwargs)
        self.validate_only = validate_only
        self.move_resources = move_resources
        self.move_resource_input_type = move_resource_input_type


class DiscardRequest(Model):
    """Defines the request body for discard operation.

    All required parameters must be populated in order to send to Azure.

    :param validate_only: Gets or sets a value indicating whether the
     operation needs to only run pre-requisite.
    :type validate_only: bool
    :param move_resources: Required. Gets or sets the list of resource Id's,
     by default it accepts move resource id's unless the input type is switched
     via moveResourceInputType property.
    :type move_resources: list[str]
    :param move_resource_input_type: Possible values include:
     'MoveResourceId', 'MoveResourceSourceId'
    :type move_resource_input_type: str or
     ~azure.mgmt.resourcemover.models.MoveResourceInputType
    """

    _validation = {
        'move_resources': {'required': True},
    }

    _attribute_map = {
        'validate_only': {'key': 'validateOnly', 'type': 'bool'},
        'move_resources': {'key': 'moveResources', 'type': '[str]'},
        'move_resource_input_type': {'key': 'moveResourceInputType', 'type': 'str'},
    }

    def __init__(self, *, move_resources, validate_only: bool=None, move_resource_input_type=None, **kwargs) -> None:
        super(DiscardRequest, self).__init__(**kwargs)
        self.validate_only = validate_only
        self.move_resources = move_resources
        self.move_resource_input_type = move_resource_input_type


class Display(Model):
    """Contains the localized display information for this particular operation /
    action. These
    value will be used by several clients for
    (1) custom role definitions for RBAC;
    (2) complex query filters for the event service; and
    (3) audit history / records for management operations.

    :param provider: Gets or sets the provider.
     The localized friendly form of the resource provider name – it is expected
     to also
     include the publisher/company responsible.
     It should use Title Casing and begin with "Microsoft" for 1st party
     services.
     e.g. "Microsoft Monitoring Insights" or "Microsoft Compute.".
    :type provider: str
    :param resource: Gets or sets the resource.
     The localized friendly form of the resource related to this
     action/operation – it
     should match the public documentation for the resource provider.
     It should use Title Casing.
     This value should be unique for a particular URL type (e.g. nested types
     should *not*
     reuse their parent’s display.resource field)
     e.g. "Virtual Machines" or "Scheduler Job Collections", or "Virtual
     Machine VM Sizes"
     or "Scheduler Jobs".
    :type resource: str
    :param operation: Gets or sets the operation.
     The localized friendly name for the operation, as it should be shown to
     the user.
     It should be concise (to fit in drop downs) but clear (i.e.
     self-documenting).
     It should use Title Casing.
     Prescriptive guidance: Read Create or Update Delete 'ActionName'.
    :type operation: str
    :param description: Gets or sets the description.
     The localized friendly description for the operation, as it should be
     shown to the
     user.
     It should be thorough, yet concise – it will be used in tool tips and
     detailed views.
     Prescriptive guidance for namespace:
     Read any 'display.provider'  resource
     Create or Update any  'display.provider'  resource
     Delete any  'display.provider'  resource
     Perform any other action on any  'display.provider'  resource
     Prescriptive guidance for namespace:
     Read any 'display.resource' Create or Update any  'display.resource'
     Delete any
     'display.resource' 'ActionName' any 'display.resources'.
    :type description: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(self, *, provider: str=None, resource: str=None, operation: str=None, description: str=None, **kwargs) -> None:
        super(Display, self).__init__(**kwargs)
        self.provider = provider
        self.resource = resource
        self.operation = operation
        self.description = description


class Identity(Model):
    """Defines the MSI properties of the Move Collection.

    :param type: Possible values include: 'None', 'SystemAssigned',
     'UserAssigned'
    :type type: str or ~azure.mgmt.resourcemover.models.ResourceIdentityType
    :param principal_id: Gets or sets the principal id.
    :type principal_id: str
    :param tenant_id: Gets or sets the tenant id.
    :type tenant_id: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
    }

    def __init__(self, *, type=None, principal_id: str=None, tenant_id: str=None, **kwargs) -> None:
        super(Identity, self).__init__(**kwargs)
        self.type = type
        self.principal_id = principal_id
        self.tenant_id = tenant_id


class JobStatus(Model):
    """Defines the job status.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param job_name: Possible values include: 'InitialSync'
    :type job_name: str or ~azure.mgmt.resourcemover.models.JobName
    :ivar job_progress: Gets or sets the monitoring job percentage.
    :vartype job_progress: str
    """

    _validation = {
        'job_progress': {'readonly': True},
    }

    _attribute_map = {
        'job_name': {'key': 'jobName', 'type': 'str'},
        'job_progress': {'key': 'jobProgress', 'type': 'str'},
    }

    def __init__(self, *, job_name=None, **kwargs) -> None:
        super(JobStatus, self).__init__(**kwargs)
        self.job_name = job_name
        self.job_progress = None


class LBBackendAddressPoolResourceSettings(Model):
    """Defines load balancer backend address pool properties.

    :param name: Gets or sets the backend address pool name.
    :type name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, *, name: str=None, **kwargs) -> None:
        super(LBBackendAddressPoolResourceSettings, self).__init__(**kwargs)
        self.name = name


class LBFrontendIPConfigurationResourceSettings(Model):
    """Defines load balancer frontend IP configuration properties.

    :param name: Gets or sets the frontend IP configuration name.
    :type name: str
    :param private_ip_address: Gets or sets the IP address of the Load
     Balancer.This is only specified if a specific
     private IP address shall be allocated from the subnet specified in
     subnetRef.
    :type private_ip_address: str
    :param private_ip_allocation_method: Gets or sets PrivateIP allocation
     method (Static/Dynamic).
    :type private_ip_allocation_method: str
    :param subnet:
    :type subnet: ~azure.mgmt.resourcemover.models.SubnetReference
    :param zones: Gets or sets the csv list of zones.
    :type zones: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'private_ip_address': {'key': 'privateIpAddress', 'type': 'str'},
        'private_ip_allocation_method': {'key': 'privateIpAllocationMethod', 'type': 'str'},
        'subnet': {'key': 'subnet', 'type': 'SubnetReference'},
        'zones': {'key': 'zones', 'type': 'str'},
    }

    def __init__(self, *, name: str=None, private_ip_address: str=None, private_ip_allocation_method: str=None, subnet=None, zones: str=None, **kwargs) -> None:
        super(LBFrontendIPConfigurationResourceSettings, self).__init__(**kwargs)
        self.name = name
        self.private_ip_address = private_ip_address
        self.private_ip_allocation_method = private_ip_allocation_method
        self.subnet = subnet
        self.zones = zones


class ProxyResourceReference(AzureResourceReference):
    """Defines reference to a proxy resource.

    All required parameters must be populated in order to send to Azure.

    :param source_arm_resource_id: Required. Gets the ARM resource ID of the
     tracked resource being referenced.
    :type source_arm_resource_id: str
    :param name: Gets the name of the proxy resource on the target side.
    :type name: str
    """

    _validation = {
        'source_arm_resource_id': {'required': True},
    }

    _attribute_map = {
        'source_arm_resource_id': {'key': 'sourceArmResourceId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, *, source_arm_resource_id: str, name: str=None, **kwargs) -> None:
        super(ProxyResourceReference, self).__init__(source_arm_resource_id=source_arm_resource_id, **kwargs)
        self.name = name


class LoadBalancerBackendAddressPoolReference(ProxyResourceReference):
    """Defines reference to load balancer backend address pools.

    All required parameters must be populated in order to send to Azure.

    :param source_arm_resource_id: Required. Gets the ARM resource ID of the
     tracked resource being referenced.
    :type source_arm_resource_id: str
    :param name: Gets the name of the proxy resource on the target side.
    :type name: str
    """

    _validation = {
        'source_arm_resource_id': {'required': True},
    }

    _attribute_map = {
        'source_arm_resource_id': {'key': 'sourceArmResourceId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, *, source_arm_resource_id: str, name: str=None, **kwargs) -> None:
        super(LoadBalancerBackendAddressPoolReference, self).__init__(source_arm_resource_id=source_arm_resource_id, name=name, **kwargs)


class LoadBalancerNatRuleReference(ProxyResourceReference):
    """Defines reference to load balancer NAT rules.

    All required parameters must be populated in order to send to Azure.

    :param source_arm_resource_id: Required. Gets the ARM resource ID of the
     tracked resource being referenced.
    :type source_arm_resource_id: str
    :param name: Gets the name of the proxy resource on the target side.
    :type name: str
    """

    _validation = {
        'source_arm_resource_id': {'required': True},
    }

    _attribute_map = {
        'source_arm_resource_id': {'key': 'sourceArmResourceId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, *, source_arm_resource_id: str, name: str=None, **kwargs) -> None:
        super(LoadBalancerNatRuleReference, self).__init__(source_arm_resource_id=source_arm_resource_id, name=name, **kwargs)


class LoadBalancerResourceSettings(ResourceSettings):
    """Defines the load balancer resource settings.

    All required parameters must be populated in order to send to Azure.

    :param target_resource_name: Required. Gets or sets the target Resource
     name.
    :type target_resource_name: str
    :param resource_type: Required. Constant filled by server.
    :type resource_type: str
    :param sku: Gets or sets load balancer sku (Basic/Standard).
    :type sku: str
    :param frontend_ip_configurations: Gets or sets the frontend IP
     configurations of the load balancer.
    :type frontend_ip_configurations:
     list[~azure.mgmt.resourcemover.models.LBFrontendIPConfigurationResourceSettings]
    :param backend_address_pools: Gets or sets the backend address pools of
     the load balancer.
    :type backend_address_pools:
     list[~azure.mgmt.resourcemover.models.LBBackendAddressPoolResourceSettings]
    :param zones: Gets or sets the csv list of zones common for all frontend
     IP configurations. Note this is given
     precedence only if frontend IP configurations settings are not present.
    :type zones: str
    """

    _validation = {
        'target_resource_name': {'required': True},
        'resource_type': {'required': True},
    }

    _attribute_map = {
        'target_resource_name': {'key': 'targetResourceName', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'str'},
        'frontend_ip_configurations': {'key': 'frontendIPConfigurations', 'type': '[LBFrontendIPConfigurationResourceSettings]'},
        'backend_address_pools': {'key': 'backendAddressPools', 'type': '[LBBackendAddressPoolResourceSettings]'},
        'zones': {'key': 'zones', 'type': 'str'},
    }

    def __init__(self, *, target_resource_name: str, sku: str=None, frontend_ip_configurations=None, backend_address_pools=None, zones: str=None, **kwargs) -> None:
        super(LoadBalancerResourceSettings, self).__init__(target_resource_name=target_resource_name, **kwargs)
        self.sku = sku
        self.frontend_ip_configurations = frontend_ip_configurations
        self.backend_address_pools = backend_address_pools
        self.zones = zones
        self.resource_type = 'Microsoft.Network/loadBalancers'


class ManualResolutionProperties(Model):
    """Defines the properties for manual resolution.

    :param target_id: Gets or sets the target resource ARM ID of the dependent
     resource if the resource type is Manual.
    :type target_id: str
    """

    _attribute_map = {
        'target_id': {'key': 'targetId', 'type': 'str'},
    }

    def __init__(self, *, target_id: str=None, **kwargs) -> None:
        super(ManualResolutionProperties, self).__init__(**kwargs)
        self.target_id = target_id


class MoveCollection(Model):
    """Define the move collection.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param location: The geo-location where the resource lives.
    :type location: str
    :param identity:
    :type identity: ~azure.mgmt.resourcemover.models.Identity
    :param properties:
    :type properties:
     ~azure.mgmt.resourcemover.models.MoveCollectionProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'Identity'},
        'properties': {'key': 'properties', 'type': 'MoveCollectionProperties'},
    }

    def __init__(self, *, tags=None, location: str=None, identity=None, properties=None, **kwargs) -> None:
        super(MoveCollection, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.tags = tags
        self.location = location
        self.identity = identity
        self.properties = properties


class MoveCollectionProperties(Model):
    """Defines the move collection properties.

    All required parameters must be populated in order to send to Azure.

    :param source_region: Required. Gets or sets the source region.
    :type source_region: str
    :param target_region: Required. Gets or sets the target region.
    :type target_region: str
    :param provisioning_state: Possible values include: 'Succeeded',
     'Updating', 'Creating', 'Failed'
    :type provisioning_state: str or
     ~azure.mgmt.resourcemover.models.ProvisioningState
    """

    _validation = {
        'source_region': {'required': True},
        'target_region': {'required': True},
    }

    _attribute_map = {
        'source_region': {'key': 'sourceRegion', 'type': 'str'},
        'target_region': {'key': 'targetRegion', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(self, *, source_region: str, target_region: str, provisioning_state=None, **kwargs) -> None:
        super(MoveCollectionProperties, self).__init__(**kwargs)
        self.source_region = source_region
        self.target_region = target_region
        self.provisioning_state = provisioning_state


class MoveErrorInfo(Model):
    """The move custom error info.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar move_resources: The affected move resources.
    :vartype move_resources:
     list[~azure.mgmt.resourcemover.models.AffectedMoveResource]
    """

    _validation = {
        'move_resources': {'readonly': True},
    }

    _attribute_map = {
        'move_resources': {'key': 'moveResources', 'type': '[AffectedMoveResource]'},
    }

    def __init__(self, **kwargs) -> None:
        super(MoveErrorInfo, self).__init__(**kwargs)
        self.move_resources = None


class MoveResource(Model):
    """Defines the move resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param properties:
    :type properties: ~azure.mgmt.resourcemover.models.MoveResourceProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'MoveResourceProperties'},
    }

    def __init__(self, *, properties=None, **kwargs) -> None:
        super(MoveResource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.properties = properties


class MoveResourceDependency(Model):
    """Defines the dependency of the move resource.

    :param id: Gets the source ARM ID of the dependent resource.
    :type id: str
    :param resolution_status: Gets the dependency resolution status.
    :type resolution_status: str
    :param resolution_type: Possible values include: 'Manual', 'Automatic'
    :type resolution_type: str or
     ~azure.mgmt.resourcemover.models.ResolutionType
    :param dependency_type: Possible values include: 'RequiredForPrepare',
     'RequiredForMove'
    :type dependency_type: str or
     ~azure.mgmt.resourcemover.models.DependencyType
    :param manual_resolution:
    :type manual_resolution:
     ~azure.mgmt.resourcemover.models.ManualResolutionProperties
    :param automatic_resolution:
    :type automatic_resolution:
     ~azure.mgmt.resourcemover.models.AutomaticResolutionProperties
    :param is_optional: Gets or sets a value indicating whether the dependency
     is optional.
    :type is_optional: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'resolution_status': {'key': 'resolutionStatus', 'type': 'str'},
        'resolution_type': {'key': 'resolutionType', 'type': 'str'},
        'dependency_type': {'key': 'dependencyType', 'type': 'str'},
        'manual_resolution': {'key': 'manualResolution', 'type': 'ManualResolutionProperties'},
        'automatic_resolution': {'key': 'automaticResolution', 'type': 'AutomaticResolutionProperties'},
        'is_optional': {'key': 'isOptional', 'type': 'str'},
    }

    def __init__(self, *, id: str=None, resolution_status: str=None, resolution_type=None, dependency_type=None, manual_resolution=None, automatic_resolution=None, is_optional: str=None, **kwargs) -> None:
        super(MoveResourceDependency, self).__init__(**kwargs)
        self.id = id
        self.resolution_status = resolution_status
        self.resolution_type = resolution_type
        self.dependency_type = dependency_type
        self.manual_resolution = manual_resolution
        self.automatic_resolution = automatic_resolution
        self.is_optional = is_optional


class MoveResourceDependencyOverride(Model):
    """Defines the dependency override of the move resource.

    :param id: Gets or sets the ARM ID of the dependent resource.
    :type id: str
    :param target_id: Gets or sets the resource ARM id of either the
     MoveResource or the resource ARM ID of
     the dependent resource.
    :type target_id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'target_id': {'key': 'targetId', 'type': 'str'},
    }

    def __init__(self, *, id: str=None, target_id: str=None, **kwargs) -> None:
        super(MoveResourceDependencyOverride, self).__init__(**kwargs)
        self.id = id
        self.target_id = target_id


class MoveResourceError(Model):
    """An error response from the azure resource mover service.

    :param properties: The move resource error body.
    :type properties: ~azure.mgmt.resourcemover.models.MoveResourceErrorBody
    """

    _attribute_map = {
        'properties': {'key': 'properties', 'type': 'MoveResourceErrorBody'},
    }

    def __init__(self, *, properties=None, **kwargs) -> None:
        super(MoveResourceError, self).__init__(**kwargs)
        self.properties = properties


class MoveResourceErrorBody(Model):
    """An error response from the Azure Migrate service.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar code: An identifier for the error. Codes are invariant and are
     intended to be consumed programmatically.
    :vartype code: str
    :ivar message: A message describing the error, intended to be suitable for
     display in a user interface.
    :vartype message: str
    :ivar target: The target of the particular error. For example, the name of
     the property in error.
    :vartype target: str
    :ivar details: A list of additional details about the error.
    :vartype details:
     list[~azure.mgmt.resourcemover.models.MoveResourceErrorBody]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[MoveResourceErrorBody]'},
    }

    def __init__(self, **kwargs) -> None:
        super(MoveResourceErrorBody, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None


class MoveResourceFilter(Model):
    """Move resource filter.

    :param properties:
    :type properties:
     ~azure.mgmt.resourcemover.models.MoveResourceFilterProperties
    """

    _attribute_map = {
        'properties': {'key': 'properties', 'type': 'MoveResourceFilterProperties'},
    }

    def __init__(self, *, properties=None, **kwargs) -> None:
        super(MoveResourceFilter, self).__init__(**kwargs)
        self.properties = properties


class MoveResourceFilterProperties(Model):
    """MoveResourceFilterProperties.

    :param provisioning_state: The provisioning state.
    :type provisioning_state: str
    """

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(self, *, provisioning_state: str=None, **kwargs) -> None:
        super(MoveResourceFilterProperties, self).__init__(**kwargs)
        self.provisioning_state = provisioning_state


class MoveResourceProperties(Model):
    """Defines the move resource properties.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param provisioning_state: Possible values include: 'Succeeded',
     'Updating', 'Creating', 'Failed'
    :type provisioning_state: str or
     ~azure.mgmt.resourcemover.models.ProvisioningState
    :param source_id: Required. Gets or sets the Source ARM Id of the
     resource.
    :type source_id: str
    :ivar target_id: Gets or sets the Target ARM Id of the resource.
    :vartype target_id: str
    :param existing_target_id: Gets or sets the existing target ARM Id of the
     resource.
    :type existing_target_id: str
    :param resource_settings: Gets or sets the resource settings.
    :type resource_settings: ~azure.mgmt.resourcemover.models.ResourceSettings
    :ivar source_resource_settings: Gets or sets the source resource settings.
    :vartype source_resource_settings:
     ~azure.mgmt.resourcemover.models.ResourceSettings
    :ivar move_status: Defines the move resource status.
    :vartype move_status:
     ~azure.mgmt.resourcemover.models.MoveResourcePropertiesMoveStatus
    :ivar depends_on: Gets or sets the move resource dependencies.
    :vartype depends_on:
     list[~azure.mgmt.resourcemover.models.MoveResourceDependency]
    :param depends_on_overrides: Gets or sets the move resource dependencies
     overrides.
    :type depends_on_overrides:
     list[~azure.mgmt.resourcemover.models.MoveResourceDependencyOverride]
    :ivar errors: Defines the move resource errors.
    :vartype errors:
     ~azure.mgmt.resourcemover.models.MoveResourcePropertiesErrors
    """

    _validation = {
        'source_id': {'required': True},
        'target_id': {'readonly': True},
        'source_resource_settings': {'readonly': True},
        'move_status': {'readonly': True},
        'depends_on': {'readonly': True},
        'errors': {'readonly': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'source_id': {'key': 'sourceId', 'type': 'str'},
        'target_id': {'key': 'targetId', 'type': 'str'},
        'existing_target_id': {'key': 'existingTargetId', 'type': 'str'},
        'resource_settings': {'key': 'resourceSettings', 'type': 'ResourceSettings'},
        'source_resource_settings': {'key': 'sourceResourceSettings', 'type': 'ResourceSettings'},
        'move_status': {'key': 'moveStatus', 'type': 'MoveResourcePropertiesMoveStatus'},
        'depends_on': {'key': 'dependsOn', 'type': '[MoveResourceDependency]'},
        'depends_on_overrides': {'key': 'dependsOnOverrides', 'type': '[MoveResourceDependencyOverride]'},
        'errors': {'key': 'errors', 'type': 'MoveResourcePropertiesErrors'},
    }

    def __init__(self, *, source_id: str, provisioning_state=None, existing_target_id: str=None, resource_settings=None, depends_on_overrides=None, **kwargs) -> None:
        super(MoveResourceProperties, self).__init__(**kwargs)
        self.provisioning_state = provisioning_state
        self.source_id = source_id
        self.target_id = None
        self.existing_target_id = existing_target_id
        self.resource_settings = resource_settings
        self.source_resource_settings = None
        self.move_status = None
        self.depends_on = None
        self.depends_on_overrides = depends_on_overrides
        self.errors = None


class MoveResourcePropertiesErrors(MoveResourceError):
    """Defines the move resource errors.

    :param properties: The move resource error body.
    :type properties: ~azure.mgmt.resourcemover.models.MoveResourceErrorBody
    """

    _attribute_map = {
        'properties': {'key': 'properties', 'type': 'MoveResourceErrorBody'},
    }

    def __init__(self, *, properties=None, **kwargs) -> None:
        super(MoveResourcePropertiesErrors, self).__init__(properties=properties, **kwargs)


class MoveResourceStatus(Model):
    """Defines the move resource status.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param move_state: Possible values include: 'AssignmentPending',
     'PreparePending', 'PrepareInProgress', 'PrepareFailed', 'MovePending',
     'MoveInProgress', 'MoveFailed', 'DiscardInProgress', 'DiscardFailed',
     'CommitPending', 'CommitInProgress', 'CommitFailed', 'Committed'
    :type move_state: str or ~azure.mgmt.resourcemover.models.MoveState
    :param job_status:
    :type job_status: ~azure.mgmt.resourcemover.models.JobStatus
    :param errors:
    :type errors: ~azure.mgmt.resourcemover.models.MoveResourceError
    :ivar target_id: Gets the Target ARM Id of the resource.
    :vartype target_id: str
    """

    _validation = {
        'target_id': {'readonly': True},
    }

    _attribute_map = {
        'move_state': {'key': 'moveState', 'type': 'str'},
        'job_status': {'key': 'jobStatus', 'type': 'JobStatus'},
        'errors': {'key': 'errors', 'type': 'MoveResourceError'},
        'target_id': {'key': 'targetId', 'type': 'str'},
    }

    def __init__(self, *, move_state=None, job_status=None, errors=None, **kwargs) -> None:
        super(MoveResourceStatus, self).__init__(**kwargs)
        self.move_state = move_state
        self.job_status = job_status
        self.errors = errors
        self.target_id = None


class MoveResourcePropertiesMoveStatus(MoveResourceStatus):
    """Defines the move resource status.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param move_state: Possible values include: 'AssignmentPending',
     'PreparePending', 'PrepareInProgress', 'PrepareFailed', 'MovePending',
     'MoveInProgress', 'MoveFailed', 'DiscardInProgress', 'DiscardFailed',
     'CommitPending', 'CommitInProgress', 'CommitFailed', 'Committed'
    :type move_state: str or ~azure.mgmt.resourcemover.models.MoveState
    :param job_status:
    :type job_status: ~azure.mgmt.resourcemover.models.JobStatus
    :param errors:
    :type errors: ~azure.mgmt.resourcemover.models.MoveResourceError
    :ivar target_id: Gets the Target ARM Id of the resource.
    :vartype target_id: str
    """

    _validation = {
        'target_id': {'readonly': True},
    }

    _attribute_map = {
        'move_state': {'key': 'moveState', 'type': 'str'},
        'job_status': {'key': 'jobStatus', 'type': 'JobStatus'},
        'errors': {'key': 'errors', 'type': 'MoveResourceError'},
        'target_id': {'key': 'targetId', 'type': 'str'},
    }

    def __init__(self, *, move_state=None, job_status=None, errors=None, **kwargs) -> None:
        super(MoveResourcePropertiesMoveStatus, self).__init__(move_state=move_state, job_status=job_status, errors=errors, **kwargs)


class NetworkInterfaceResourceSettings(ResourceSettings):
    """Defines the network interface resource settings.

    All required parameters must be populated in order to send to Azure.

    :param target_resource_name: Required. Gets or sets the target Resource
     name.
    :type target_resource_name: str
    :param resource_type: Required. Constant filled by server.
    :type resource_type: str
    :param ip_configurations: Gets or sets the IP configurations of the NIC.
    :type ip_configurations:
     list[~azure.mgmt.resourcemover.models.NicIpConfigurationResourceSettings]
    :param enable_accelerated_networking: Gets or sets a value indicating
     whether accelerated networking is enabled.
    :type enable_accelerated_networking: bool
    """

    _validation = {
        'target_resource_name': {'required': True},
        'resource_type': {'required': True},
    }

    _attribute_map = {
        'target_resource_name': {'key': 'targetResourceName', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'ip_configurations': {'key': 'ipConfigurations', 'type': '[NicIpConfigurationResourceSettings]'},
        'enable_accelerated_networking': {'key': 'enableAcceleratedNetworking', 'type': 'bool'},
    }

    def __init__(self, *, target_resource_name: str, ip_configurations=None, enable_accelerated_networking: bool=None, **kwargs) -> None:
        super(NetworkInterfaceResourceSettings, self).__init__(target_resource_name=target_resource_name, **kwargs)
        self.ip_configurations = ip_configurations
        self.enable_accelerated_networking = enable_accelerated_networking
        self.resource_type = 'Microsoft.Network/networkInterfaces'


class NetworkSecurityGroupResourceSettings(ResourceSettings):
    """Defines the NSG resource settings.

    All required parameters must be populated in order to send to Azure.

    :param target_resource_name: Required. Gets or sets the target Resource
     name.
    :type target_resource_name: str
    :param resource_type: Required. Constant filled by server.
    :type resource_type: str
    :param security_rules: Gets or sets Security rules of network security
     group.
    :type security_rules:
     list[~azure.mgmt.resourcemover.models.NsgSecurityRule]
    """

    _validation = {
        'target_resource_name': {'required': True},
        'resource_type': {'required': True},
    }

    _attribute_map = {
        'target_resource_name': {'key': 'targetResourceName', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'security_rules': {'key': 'securityRules', 'type': '[NsgSecurityRule]'},
    }

    def __init__(self, *, target_resource_name: str, security_rules=None, **kwargs) -> None:
        super(NetworkSecurityGroupResourceSettings, self).__init__(target_resource_name=target_resource_name, **kwargs)
        self.security_rules = security_rules
        self.resource_type = 'Microsoft.Network/networkSecurityGroups'


class NicIpConfigurationResourceSettings(Model):
    """Defines NIC IP configuration properties.

    :param name: Gets or sets the IP configuration name.
    :type name: str
    :param private_ip_address: Gets or sets the private IP address of the
     network interface IP Configuration.
    :type private_ip_address: str
    :param private_ip_allocation_method: Gets or sets the private IP address
     allocation method.
    :type private_ip_allocation_method: str
    :param subnet:
    :type subnet: ~azure.mgmt.resourcemover.models.SubnetReference
    :param primary: Gets or sets a value indicating whether this IP
     configuration is the primary.
    :type primary: bool
    :param load_balancer_backend_address_pools: Gets or sets the references of
     the load balancer backend address pools.
    :type load_balancer_backend_address_pools:
     list[~azure.mgmt.resourcemover.models.LoadBalancerBackendAddressPoolReference]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'private_ip_address': {'key': 'privateIpAddress', 'type': 'str'},
        'private_ip_allocation_method': {'key': 'privateIpAllocationMethod', 'type': 'str'},
        'subnet': {'key': 'subnet', 'type': 'SubnetReference'},
        'primary': {'key': 'primary', 'type': 'bool'},
        'load_balancer_backend_address_pools': {'key': 'loadBalancerBackendAddressPools', 'type': '[LoadBalancerBackendAddressPoolReference]'},
    }

    def __init__(self, *, name: str=None, private_ip_address: str=None, private_ip_allocation_method: str=None, subnet=None, primary: bool=None, load_balancer_backend_address_pools=None, **kwargs) -> None:
        super(NicIpConfigurationResourceSettings, self).__init__(**kwargs)
        self.name = name
        self.private_ip_address = private_ip_address
        self.private_ip_allocation_method = private_ip_allocation_method
        self.subnet = subnet
        self.primary = primary
        self.load_balancer_backend_address_pools = load_balancer_backend_address_pools


class NsgSecurityRule(Model):
    """Security Rule data model for Network Security Groups.

    :param name: Gets or sets the Security rule name.
    :type name: str
    :param access: Gets or sets whether network traffic is allowed or denied.
     Possible values are “Allow” and “Deny”.
    :type access: str
    :param description: Gets or sets a description for this rule. Restricted
     to 140 chars.
    :type description: str
    :param destination_address_prefix: Gets or sets destination address
     prefix. CIDR or source IP range.
     A “*” can also be used to match all source IPs. Default tags such
     as ‘VirtualNetwork’, ‘AzureLoadBalancer’ and ‘Internet’ can also be used.
    :type destination_address_prefix: str
    :param destination_port_range: Gets or sets Destination Port or Range.
     Integer or range between
     0 and 65535. A “*” can also be used to match all ports.
    :type destination_port_range: str
    :param direction: Gets or sets the direction of the rule.InBound or
     Outbound. The
     direction specifies if rule will be evaluated on incoming or outgoing
     traffic.
    :type direction: str
    :param priority: Gets or sets the priority of the rule. The value can be
     between
     100 and 4096. The priority number must be unique for each rule in the
     collection.
     The lower the priority number, the higher the priority of the rule.
    :type priority: int
    :param protocol: Gets or sets Network protocol this rule applies to. Can
     be Tcp, Udp or All(*).
    :type protocol: str
    :param source_address_prefix: Gets or sets source address prefix. CIDR or
     source IP range. A
     “*” can also be used to match all source IPs.  Default tags such as
     ‘VirtualNetwork’,
     ‘AzureLoadBalancer’ and ‘Internet’ can also be used. If this is an ingress
     rule, specifies where network traffic originates from.
    :type source_address_prefix: str
    :param source_port_range: Gets or sets Source Port or Range. Integer or
     range between 0 and
     65535. A “*” can also be used to match all ports.
    :type source_port_range: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'access': {'key': 'access', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'destination_address_prefix': {'key': 'destinationAddressPrefix', 'type': 'str'},
        'destination_port_range': {'key': 'destinationPortRange', 'type': 'str'},
        'direction': {'key': 'direction', 'type': 'str'},
        'priority': {'key': 'priority', 'type': 'int'},
        'protocol': {'key': 'protocol', 'type': 'str'},
        'source_address_prefix': {'key': 'sourceAddressPrefix', 'type': 'str'},
        'source_port_range': {'key': 'sourcePortRange', 'type': 'str'},
    }

    def __init__(self, *, name: str=None, access: str=None, description: str=None, destination_address_prefix: str=None, destination_port_range: str=None, direction: str=None, priority: int=None, protocol: str=None, source_address_prefix: str=None, source_port_range: str=None, **kwargs) -> None:
        super(NsgSecurityRule, self).__init__(**kwargs)
        self.name = name
        self.access = access
        self.description = description
        self.destination_address_prefix = destination_address_prefix
        self.destination_port_range = destination_port_range
        self.direction = direction
        self.priority = priority
        self.protocol = protocol
        self.source_address_prefix = source_address_prefix
        self.source_port_range = source_port_range


class OperationErrorAdditionalInfo(Model):
    """The operation error info.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar type: The error type.
    :vartype type: str
    :ivar info: The operation error info.
    :vartype info: ~azure.mgmt.resourcemover.models.MoveErrorInfo
    """

    _validation = {
        'type': {'readonly': True},
        'info': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'info': {'key': 'info', 'type': 'MoveErrorInfo'},
    }

    def __init__(self, **kwargs) -> None:
        super(OperationErrorAdditionalInfo, self).__init__(**kwargs)
        self.type = None
        self.info = None


class OperationsDiscovery(Model):
    """Operations discovery class.

    :param name: Gets or sets Name of the API.
     The name of the operation being performed on this particular object. It
     should
     match the action name that appears in RBAC / the event service.
     Examples of operations include:
     * Microsoft.Compute/virtualMachine/capture/action
     * Microsoft.Compute/virtualMachine/restart/action
     * Microsoft.Compute/virtualMachine/write
     * Microsoft.Compute/virtualMachine/read
     * Microsoft.Compute/virtualMachine/delete
     Each action should include, in order:
     (1) Resource Provider Namespace
     (2) Type hierarchy for which the action applies (e.g. server/databases for
     a SQL
     Azure database)
     (3) Read, Write, Action or Delete indicating which type applies. If it is
     a PUT/PATCH
     on a collection or named value, Write should be used.
     If it is a GET, Read should be used. If it is a DELETE, Delete should be
     used. If it
     is a POST, Action should be used.
     As a note: all resource providers would need to include the "{Resource
     Provider
     Namespace}/register/action" operation in their response.
     This API is used to register for their service, and should include details
     about the
     operation (e.g. a localized name for the resource provider + any special
     considerations like PII release).
    :type name: str
    :param is_data_action: Indicates whether the operation is a data action
    :type is_data_action: bool
    :param display:
    :type display: ~azure.mgmt.resourcemover.models.Display
    :param origin: Gets or sets Origin.
     The intended executor of the operation; governs the display of the
     operation in the
     RBAC UX and the audit logs UX.
     Default value is "user,system".
    :type origin: str
    :param properties:
    :type properties: object
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'is_data_action': {'key': 'isDataAction', 'type': 'bool'},
        'display': {'key': 'display', 'type': 'Display'},
        'origin': {'key': 'origin', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'object'},
    }

    def __init__(self, *, name: str=None, is_data_action: bool=None, display=None, origin: str=None, properties=None, **kwargs) -> None:
        super(OperationsDiscovery, self).__init__(**kwargs)
        self.name = name
        self.is_data_action = is_data_action
        self.display = display
        self.origin = origin
        self.properties = properties


class OperationsDiscoveryCollection(Model):
    """Collection of ClientDiscovery details.

    :param value: Gets or sets the ClientDiscovery details.
    :type value: list[~azure.mgmt.resourcemover.models.OperationsDiscovery]
    :param next_link: Gets or sets the value of next link.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[OperationsDiscovery]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(self, *, value=None, next_link: str=None, **kwargs) -> None:
        super(OperationsDiscoveryCollection, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class OperationStatus(Model):
    """Operation status REST resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Operation name.
    :vartype name: str
    :ivar status: Status of the operation. ARM expects the terminal status to
     be one of Succeeded/ Failed/ Canceled. All other values imply that the
     operation is still running.
    :vartype status: str
    :ivar start_time: Start time.
    :vartype start_time: str
    :ivar end_time: End time.
    :vartype end_time: str
    :ivar error: Error stating all error details for the operation.
    :vartype error: ~azure.mgmt.resourcemover.models.OperationStatusError
    :ivar properties: Custom data.
    :vartype properties: object
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'status': {'readonly': True},
        'start_time': {'readonly': True},
        'end_time': {'readonly': True},
        'error': {'readonly': True},
        'properties': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'str'},
        'end_time': {'key': 'endTime', 'type': 'str'},
        'error': {'key': 'error', 'type': 'OperationStatusError'},
        'properties': {'key': 'properties', 'type': 'object'},
    }

    def __init__(self, **kwargs) -> None:
        super(OperationStatus, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.status = None
        self.start_time = None
        self.end_time = None
        self.error = None
        self.properties = None


class OperationStatusError(Model):
    """Class for operation status errors.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar details: The error details.
    :vartype details:
     list[~azure.mgmt.resourcemover.models.OperationStatusError]
    :ivar additional_info: The additional info.
    :vartype additional_info:
     list[~azure.mgmt.resourcemover.models.OperationErrorAdditionalInfo]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'details': {'readonly': True},
        'additional_info': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'details': {'key': 'details', 'type': '[OperationStatusError]'},
        'additional_info': {'key': 'additionalInfo', 'type': '[OperationErrorAdditionalInfo]'},
    }

    def __init__(self, **kwargs) -> None:
        super(OperationStatusError, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.details = None
        self.additional_info = None


class PrepareRequest(Model):
    """Defines the request body for initiate prepare operation.

    All required parameters must be populated in order to send to Azure.

    :param validate_only: Gets or sets a value indicating whether the
     operation needs to only run pre-requisite.
    :type validate_only: bool
    :param move_resources: Required. Gets or sets the list of resource Id's,
     by default it accepts move resource id's unless the input type is switched
     via moveResourceInputType property.
    :type move_resources: list[str]
    :param move_resource_input_type: Possible values include:
     'MoveResourceId', 'MoveResourceSourceId'
    :type move_resource_input_type: str or
     ~azure.mgmt.resourcemover.models.MoveResourceInputType
    """

    _validation = {
        'move_resources': {'required': True},
    }

    _attribute_map = {
        'validate_only': {'key': 'validateOnly', 'type': 'bool'},
        'move_resources': {'key': 'moveResources', 'type': '[str]'},
        'move_resource_input_type': {'key': 'moveResourceInputType', 'type': 'str'},
    }

    def __init__(self, *, move_resources, validate_only: bool=None, move_resource_input_type=None, **kwargs) -> None:
        super(PrepareRequest, self).__init__(**kwargs)
        self.validate_only = validate_only
        self.move_resources = move_resources
        self.move_resource_input_type = move_resource_input_type


class PublicIPAddressResourceSettings(ResourceSettings):
    """Defines the public IP address resource settings.

    All required parameters must be populated in order to send to Azure.

    :param target_resource_name: Required. Gets or sets the target Resource
     name.
    :type target_resource_name: str
    :param resource_type: Required. Constant filled by server.
    :type resource_type: str
    :param domain_name_label: Gets or sets the domain name label.
    :type domain_name_label: str
    :param f_qdn: Gets or sets the fully qualified domain name.
    :type f_qdn: str
    :param public_ip_allocation_method: Gets or sets public IP allocation
     method.
    :type public_ip_allocation_method: str
    :param sku: Gets or sets public IP sku.
    :type sku: str
    :param zones: Gets or sets public IP zones.
    :type zones: str
    """

    _validation = {
        'target_resource_name': {'required': True},
        'resource_type': {'required': True},
    }

    _attribute_map = {
        'target_resource_name': {'key': 'targetResourceName', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'domain_name_label': {'key': 'domainNameLabel', 'type': 'str'},
        'f_qdn': {'key': 'fQDN', 'type': 'str'},
        'public_ip_allocation_method': {'key': 'publicIpAllocationMethod', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'str'},
        'zones': {'key': 'zones', 'type': 'str'},
    }

    def __init__(self, *, target_resource_name: str, domain_name_label: str=None, f_qdn: str=None, public_ip_allocation_method: str=None, sku: str=None, zones: str=None, **kwargs) -> None:
        super(PublicIPAddressResourceSettings, self).__init__(target_resource_name=target_resource_name, **kwargs)
        self.domain_name_label = domain_name_label
        self.f_qdn = f_qdn
        self.public_ip_allocation_method = public_ip_allocation_method
        self.sku = sku
        self.zones = zones
        self.resource_type = 'Microsoft.Network/publicIPAddresses'


class ResourceGroupResourceSettings(ResourceSettings):
    """Defines the resource group resource settings.

    All required parameters must be populated in order to send to Azure.

    :param target_resource_name: Required. Gets or sets the target Resource
     name.
    :type target_resource_name: str
    :param resource_type: Required. Constant filled by server.
    :type resource_type: str
    """

    _validation = {
        'target_resource_name': {'required': True},
        'resource_type': {'required': True},
    }

    _attribute_map = {
        'target_resource_name': {'key': 'targetResourceName', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
    }

    def __init__(self, *, target_resource_name: str, **kwargs) -> None:
        super(ResourceGroupResourceSettings, self).__init__(target_resource_name=target_resource_name, **kwargs)
        self.resource_type = 'resourceGroups'


class ResourceMoveRequest(Model):
    """Defines the request body for resource move operation.

    All required parameters must be populated in order to send to Azure.

    :param validate_only: Gets or sets a value indicating whether the
     operation needs to only run pre-requisite.
    :type validate_only: bool
    :param move_resources: Required. Gets or sets the list of resource Id's,
     by default it accepts move resource id's unless the input type is switched
     via moveResourceInputType property.
    :type move_resources: list[str]
    :param move_resource_input_type: Possible values include:
     'MoveResourceId', 'MoveResourceSourceId'
    :type move_resource_input_type: str or
     ~azure.mgmt.resourcemover.models.MoveResourceInputType
    """

    _validation = {
        'move_resources': {'required': True},
    }

    _attribute_map = {
        'validate_only': {'key': 'validateOnly', 'type': 'bool'},
        'move_resources': {'key': 'moveResources', 'type': '[str]'},
        'move_resource_input_type': {'key': 'moveResourceInputType', 'type': 'str'},
    }

    def __init__(self, *, move_resources, validate_only: bool=None, move_resource_input_type=None, **kwargs) -> None:
        super(ResourceMoveRequest, self).__init__(**kwargs)
        self.validate_only = validate_only
        self.move_resources = move_resources
        self.move_resource_input_type = move_resource_input_type


class SqlDatabaseResourceSettings(ResourceSettings):
    """Defines the Sql Database resource settings.

    All required parameters must be populated in order to send to Azure.

    :param target_resource_name: Required. Gets or sets the target Resource
     name.
    :type target_resource_name: str
    :param resource_type: Required. Constant filled by server.
    :type resource_type: str
    :param zone_redundant: Possible values include: 'Enable', 'Disable'
    :type zone_redundant: str or
     ~azure.mgmt.resourcemover.models.ZoneRedundant
    """

    _validation = {
        'target_resource_name': {'required': True},
        'resource_type': {'required': True},
    }

    _attribute_map = {
        'target_resource_name': {'key': 'targetResourceName', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'zone_redundant': {'key': 'zoneRedundant', 'type': 'str'},
    }

    def __init__(self, *, target_resource_name: str, zone_redundant=None, **kwargs) -> None:
        super(SqlDatabaseResourceSettings, self).__init__(target_resource_name=target_resource_name, **kwargs)
        self.zone_redundant = zone_redundant
        self.resource_type = 'Microsoft.Sql/servers/databases'


class SqlElasticPoolResourceSettings(ResourceSettings):
    """Defines the Sql ElasticPool resource settings.

    All required parameters must be populated in order to send to Azure.

    :param target_resource_name: Required. Gets or sets the target Resource
     name.
    :type target_resource_name: str
    :param resource_type: Required. Constant filled by server.
    :type resource_type: str
    :param zone_redundant: Possible values include: 'Enable', 'Disable'
    :type zone_redundant: str or
     ~azure.mgmt.resourcemover.models.ZoneRedundant
    """

    _validation = {
        'target_resource_name': {'required': True},
        'resource_type': {'required': True},
    }

    _attribute_map = {
        'target_resource_name': {'key': 'targetResourceName', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'zone_redundant': {'key': 'zoneRedundant', 'type': 'str'},
    }

    def __init__(self, *, target_resource_name: str, zone_redundant=None, **kwargs) -> None:
        super(SqlElasticPoolResourceSettings, self).__init__(target_resource_name=target_resource_name, **kwargs)
        self.zone_redundant = zone_redundant
        self.resource_type = 'Microsoft.Sql/servers/elasticPools'


class SqlServerResourceSettings(ResourceSettings):
    """Defines the SQL Server resource settings.

    All required parameters must be populated in order to send to Azure.

    :param target_resource_name: Required. Gets or sets the target Resource
     name.
    :type target_resource_name: str
    :param resource_type: Required. Constant filled by server.
    :type resource_type: str
    """

    _validation = {
        'target_resource_name': {'required': True},
        'resource_type': {'required': True},
    }

    _attribute_map = {
        'target_resource_name': {'key': 'targetResourceName', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
    }

    def __init__(self, *, target_resource_name: str, **kwargs) -> None:
        super(SqlServerResourceSettings, self).__init__(target_resource_name=target_resource_name, **kwargs)
        self.resource_type = 'Microsoft.Sql/servers'


class SubnetReference(ProxyResourceReference):
    """Defines reference to subnet.

    All required parameters must be populated in order to send to Azure.

    :param source_arm_resource_id: Required. Gets the ARM resource ID of the
     tracked resource being referenced.
    :type source_arm_resource_id: str
    :param name: Gets the name of the proxy resource on the target side.
    :type name: str
    """

    _validation = {
        'source_arm_resource_id': {'required': True},
    }

    _attribute_map = {
        'source_arm_resource_id': {'key': 'sourceArmResourceId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, *, source_arm_resource_id: str, name: str=None, **kwargs) -> None:
        super(SubnetReference, self).__init__(source_arm_resource_id=source_arm_resource_id, name=name, **kwargs)


class SubnetResourceSettings(Model):
    """Defines the virtual network subnets resource settings.

    :param name: Gets or sets the Subnet name.
    :type name: str
    :param address_prefix: Gets or sets address prefix for the subnet.
    :type address_prefix: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'address_prefix': {'key': 'addressPrefix', 'type': 'str'},
    }

    def __init__(self, *, name: str=None, address_prefix: str=None, **kwargs) -> None:
        super(SubnetResourceSettings, self).__init__(**kwargs)
        self.name = name
        self.address_prefix = address_prefix


class Summary(Model):
    """Summary item.

    :param count: Gets the count.
    :type count: int
    :param item: Gets the item.
    :type item: str
    """

    _attribute_map = {
        'count': {'key': 'count', 'type': 'int'},
        'item': {'key': 'item', 'type': 'str'},
    }

    def __init__(self, *, count: int=None, item: str=None, **kwargs) -> None:
        super(Summary, self).__init__(**kwargs)
        self.count = count
        self.item = item


class SummaryCollection(Model):
    """Summary Collection.

    :param field_name: Gets or sets the field name on which summary is done.
    :type field_name: str
    :param summary: Gets or sets the list of summary items.
    :type summary: list[~azure.mgmt.resourcemover.models.Summary]
    """

    _attribute_map = {
        'field_name': {'key': 'fieldName', 'type': 'str'},
        'summary': {'key': 'summary', 'type': '[Summary]'},
    }

    def __init__(self, *, field_name: str=None, summary=None, **kwargs) -> None:
        super(SummaryCollection, self).__init__(**kwargs)
        self.field_name = field_name
        self.summary = summary


class UnresolvedDependency(Model):
    """Unresolved dependency.

    :param count: Gets or sets the count.
    :type count: int
    :param id: Gets or sets the arm id of the dependency.
    :type id: str
    """

    _attribute_map = {
        'count': {'key': 'count', 'type': 'int'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(self, *, count: int=None, id: str=None, **kwargs) -> None:
        super(UnresolvedDependency, self).__init__(**kwargs)
        self.count = count
        self.id = id


class UnresolvedDependencyCollection(Model):
    """Unresolved dependency collection.

    :param value: Gets or sets the list of unresolved dependencies.
    :type value: list[~azure.mgmt.resourcemover.models.UnresolvedDependency]
    :param next_link: Gets or sets the value of  next link.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[UnresolvedDependency]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(self, *, value=None, next_link: str=None, **kwargs) -> None:
        super(UnresolvedDependencyCollection, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class UpdateMoveCollectionRequest(Model):
    """Defines the request body for updating move collection.

    :param tags: Gets or sets the Resource tags.
    :type tags: dict[str, str]
    :param identity:
    :type identity: ~azure.mgmt.resourcemover.models.Identity
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'identity': {'key': 'identity', 'type': 'Identity'},
    }

    def __init__(self, *, tags=None, identity=None, **kwargs) -> None:
        super(UpdateMoveCollectionRequest, self).__init__(**kwargs)
        self.tags = tags
        self.identity = identity


class VirtualMachineResourceSettings(ResourceSettings):
    """Gets or sets the virtual machine resource settings.

    All required parameters must be populated in order to send to Azure.

    :param target_resource_name: Required. Gets or sets the target Resource
     name.
    :type target_resource_name: str
    :param resource_type: Required. Constant filled by server.
    :type resource_type: str
    :param target_availability_zone: Gets or sets the target availability
     zone. Possible values include: '1', '2', '3', 'NA'
    :type target_availability_zone: str or
     ~azure.mgmt.resourcemover.models.TargetAvailabilityZone
    :param target_vm_size: Gets or sets the target virtual machine size.
    :type target_vm_size: str
    :param target_availability_set_id: Gets or sets the target availability
     set id for virtual machines not in an availability set at source.
    :type target_availability_set_id: str
    """

    _validation = {
        'target_resource_name': {'required': True},
        'resource_type': {'required': True},
    }

    _attribute_map = {
        'target_resource_name': {'key': 'targetResourceName', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'target_availability_zone': {'key': 'targetAvailabilityZone', 'type': 'str'},
        'target_vm_size': {'key': 'targetVmSize', 'type': 'str'},
        'target_availability_set_id': {'key': 'targetAvailabilitySetId', 'type': 'str'},
    }

    def __init__(self, *, target_resource_name: str, target_availability_zone=None, target_vm_size: str=None, target_availability_set_id: str=None, **kwargs) -> None:
        super(VirtualMachineResourceSettings, self).__init__(target_resource_name=target_resource_name, **kwargs)
        self.target_availability_zone = target_availability_zone
        self.target_vm_size = target_vm_size
        self.target_availability_set_id = target_availability_set_id
        self.resource_type = 'Microsoft.Compute/virtualMachines'


class VirtualNetworkResourceSettings(ResourceSettings):
    """Defines the virtual network resource settings.

    All required parameters must be populated in order to send to Azure.

    :param target_resource_name: Required. Gets or sets the target Resource
     name.
    :type target_resource_name: str
    :param resource_type: Required. Constant filled by server.
    :type resource_type: str
    :param enable_ddos_protection: Gets or sets a value indicating whether
     gets or sets whether the
     DDOS protection should be switched on.
    :type enable_ddos_protection: bool
    :param address_space: Gets or sets the address prefixes for the virtual
     network.
    :type address_space: list[str]
    :param dns_servers: Gets or sets DHCPOptions that contains an array of DNS
     servers available to VMs
     deployed in the virtual network.
    :type dns_servers: list[str]
    :param subnets: Gets or sets List of subnets in a VirtualNetwork.
    :type subnets:
     list[~azure.mgmt.resourcemover.models.SubnetResourceSettings]
    """

    _validation = {
        'target_resource_name': {'required': True},
        'resource_type': {'required': True},
    }

    _attribute_map = {
        'target_resource_name': {'key': 'targetResourceName', 'type': 'str'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'enable_ddos_protection': {'key': 'enableDdosProtection', 'type': 'bool'},
        'address_space': {'key': 'addressSpace', 'type': '[str]'},
        'dns_servers': {'key': 'dnsServers', 'type': '[str]'},
        'subnets': {'key': 'subnets', 'type': '[SubnetResourceSettings]'},
    }

    def __init__(self, *, target_resource_name: str, enable_ddos_protection: bool=None, address_space=None, dns_servers=None, subnets=None, **kwargs) -> None:
        super(VirtualNetworkResourceSettings, self).__init__(target_resource_name=target_resource_name, **kwargs)
        self.enable_ddos_protection = enable_ddos_protection
        self.address_space = address_space
        self.dns_servers = dns_servers
        self.subnets = subnets
        self.resource_type = 'Microsoft.Network/virtualNetworks'
