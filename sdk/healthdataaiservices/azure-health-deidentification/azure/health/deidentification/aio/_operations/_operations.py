# pylint: disable=too-many-lines,too-many-statements
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from io import IOBase
import json
import sys
from typing import Any, AsyncIterable, Callable, Dict, IO, List, Optional, Type, TypeVar, Union, cast, overload
import urllib.parse

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.polling import AsyncLROPoller, AsyncNoPolling, AsyncPollingMethod
from azure.core.polling.async_base_polling import AsyncLROBasePolling
from azure.core.rest import AsyncHttpResponse, HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict

from ... import models as _models
from ..._model_base import SdkJSONEncoder, _deserialize
from ..._operations._operations import (
    build_deidentification_cancel_job_request,
    build_deidentification_create_job_request,
    build_deidentification_deidentify_request,
    build_deidentification_delete_job_request,
    build_deidentification_get_job_request,
    build_deidentification_list_job_files_request,
    build_deidentification_list_jobs_request,
)
from .._vendor import DeidentificationClientMixinABC

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class DeidentificationClientOperationsMixin(DeidentificationClientMixinABC):

    @distributed_trace_async
    async def get_job(self, name: str, **kwargs: Any) -> _models.DeidentificationJob:
        # pylint: disable=line-too-long
        """Get a De-Identify Job.

        Resource read operation template.

        :param name: The name of a job. Required.
        :type name: str
        :return: DeidentificationJob. The DeidentificationJob is compatible with MutableMapping
        :rtype: ~azure.health.deidentification.models.DeidentificationJob
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "createdAt": "2020-02-20 00:00:00",  # Date and time when the job was
                      created. Required.
                    "dataType": "str",  # Data type of the input documents. Required. "PlainText"
                    "name": "str",  # The name of a job. Required.
                    "operation": "str",  # Operation to perform on the input documents. Required.
                      Known values are: "Redact", "Surrogate", and "Tag".
                    "sourceLocation": {
                        "extensions": [
                            "str"  # List of extensions to filter blobs by. Required.
                        ],
                        "location": "str",  # URL to storage location. Must be a valid Azure
                          Storage SAS URI. Required.
                        "prefix": "str"  # Prefix to filter blobs by. Required.
                    },
                    "status": "str",  # Current status of a job. Required. Known values are:
                      "NotStarted", "Running", "Succeeded", "PartialFailed", "Failed", and "Canceled".
                    "targetLocation": {
                        "location": "str",  # URL to storage location. Must be a valid Azure
                          Storage SAS URI. Required.
                        "prefix": "str"  # Prefix to filter blobs by. Required.
                    },
                    "error": {
                        "code": "str",  # One of a server-defined set of error codes.
                          Required.
                        "message": "str",  # A human-readable representation of the error.
                          Required.
                        "details": [
                            ...
                        ],
                        "innererror": {
                            "code": "str",  # Optional. One of a server-defined set of
                              error codes.
                            "innererror": ...
                        },
                        "target": "str"  # Optional. The target of the error.
                    },
                    "lastUpdatedAt": "2020-02-20 00:00:00",  # Optional. Date and time when the
                      job was completed.  If the job is canceled, this is the time when the job was
                      canceled.  If the job failed, this is the time when the job failed.
                    "redactionFormat": "str",  # Optional. Format of the redacted output. Only
                      valid when Operation is Redact.
                    "startedAt": "2020-02-20 00:00:00",  # Optional. Date and time when the job
                      was started.
                    "summary": {
                        "bytesProcessed": 0,  # Number of bytes processed. Required.
                        "canceled": 0,  # Number of blobs that have been canceled. Required.
                        "failed": 0,  # Number of blobs that have failed. Required.
                        "successful": 0,  # Number of blobs that have completed. Required.
                        "total": 0  # Number of blobs total. Required.
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.DeidentificationJob] = kwargs.pop("cls", None)

        _request = build_deidentification_get_job_request(
            name=name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.DeidentificationJob, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    async def _create_job_initial(
        self, name: str, resource: Union[_models.DeidentificationJob, JSON, IO[bytes]], **kwargs: Any
    ) -> JSON:
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(resource, (IOBase, bytes)):
            _content = resource
        else:
            _content = json.dumps(resource, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_deidentification_create_job_request(
            name=name,
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        if response.status_code == 200:
            response_headers["x-ms-client-request-id"] = self._deserialize(
                "str", response.headers.get("x-ms-client-request-id")
            )
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            deserialized = _deserialize(JSON, response.json())

        if response.status_code == 201:
            response_headers["x-ms-client-request-id"] = self._deserialize(
                "str", response.headers.get("x-ms-client-request-id")
            )
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            deserialized = _deserialize(JSON, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @overload
    async def begin_create_job(
        self, name: str, resource: _models.DeidentificationJob, *, content_type: str = "application/json", **kwargs: Any
    ) -> AsyncLROPoller[_models.DeidentificationJob]:
        # pylint: disable=line-too-long
        """Create a De-Identify Job.

        Long-running resource create or replace operation template.

        :param name: The name of a job. Required.
        :type name: str
        :param resource: The resource instance. Required.
        :type resource: ~azure.health.deidentification.models.DeidentificationJob
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of AsyncLROPoller that returns DeidentificationJob. The
         DeidentificationJob is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.AsyncLROPoller[~azure.health.deidentification.models.DeidentificationJob]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource = {
                    "createdAt": "2020-02-20 00:00:00",  # Date and time when the job was
                      created. Required.
                    "dataType": "str",  # Data type of the input documents. Required. "PlainText"
                    "name": "str",  # The name of a job. Required.
                    "operation": "str",  # Operation to perform on the input documents. Required.
                      Known values are: "Redact", "Surrogate", and "Tag".
                    "sourceLocation": {
                        "extensions": [
                            "str"  # List of extensions to filter blobs by. Required.
                        ],
                        "location": "str",  # URL to storage location. Must be a valid Azure
                          Storage SAS URI. Required.
                        "prefix": "str"  # Prefix to filter blobs by. Required.
                    },
                    "status": "str",  # Current status of a job. Required. Known values are:
                      "NotStarted", "Running", "Succeeded", "PartialFailed", "Failed", and "Canceled".
                    "targetLocation": {
                        "location": "str",  # URL to storage location. Must be a valid Azure
                          Storage SAS URI. Required.
                        "prefix": "str"  # Prefix to filter blobs by. Required.
                    },
                    "error": {
                        "code": "str",  # One of a server-defined set of error codes.
                          Required.
                        "message": "str",  # A human-readable representation of the error.
                          Required.
                        "details": [
                            ...
                        ],
                        "innererror": {
                            "code": "str",  # Optional. One of a server-defined set of
                              error codes.
                            "innererror": ...
                        },
                        "target": "str"  # Optional. The target of the error.
                    },
                    "lastUpdatedAt": "2020-02-20 00:00:00",  # Optional. Date and time when the
                      job was completed.  If the job is canceled, this is the time when the job was
                      canceled.  If the job failed, this is the time when the job failed.
                    "redactionFormat": "str",  # Optional. Format of the redacted output. Only
                      valid when Operation is Redact.
                    "startedAt": "2020-02-20 00:00:00",  # Optional. Date and time when the job
                      was started.
                    "summary": {
                        "bytesProcessed": 0,  # Number of bytes processed. Required.
                        "canceled": 0,  # Number of blobs that have been canceled. Required.
                        "failed": 0,  # Number of blobs that have failed. Required.
                        "successful": 0,  # Number of blobs that have completed. Required.
                        "total": 0  # Number of blobs total. Required.
                    }
                }

                # response body for status code(s): 201, 200
                response == {
                    "createdAt": "2020-02-20 00:00:00",  # Date and time when the job was
                      created. Required.
                    "dataType": "str",  # Data type of the input documents. Required. "PlainText"
                    "name": "str",  # The name of a job. Required.
                    "operation": "str",  # Operation to perform on the input documents. Required.
                      Known values are: "Redact", "Surrogate", and "Tag".
                    "sourceLocation": {
                        "extensions": [
                            "str"  # List of extensions to filter blobs by. Required.
                        ],
                        "location": "str",  # URL to storage location. Must be a valid Azure
                          Storage SAS URI. Required.
                        "prefix": "str"  # Prefix to filter blobs by. Required.
                    },
                    "status": "str",  # Current status of a job. Required. Known values are:
                      "NotStarted", "Running", "Succeeded", "PartialFailed", "Failed", and "Canceled".
                    "targetLocation": {
                        "location": "str",  # URL to storage location. Must be a valid Azure
                          Storage SAS URI. Required.
                        "prefix": "str"  # Prefix to filter blobs by. Required.
                    },
                    "error": {
                        "code": "str",  # One of a server-defined set of error codes.
                          Required.
                        "message": "str",  # A human-readable representation of the error.
                          Required.
                        "details": [
                            ...
                        ],
                        "innererror": {
                            "code": "str",  # Optional. One of a server-defined set of
                              error codes.
                            "innererror": ...
                        },
                        "target": "str"  # Optional. The target of the error.
                    },
                    "lastUpdatedAt": "2020-02-20 00:00:00",  # Optional. Date and time when the
                      job was completed.  If the job is canceled, this is the time when the job was
                      canceled.  If the job failed, this is the time when the job failed.
                    "redactionFormat": "str",  # Optional. Format of the redacted output. Only
                      valid when Operation is Redact.
                    "startedAt": "2020-02-20 00:00:00",  # Optional. Date and time when the job
                      was started.
                    "summary": {
                        "bytesProcessed": 0,  # Number of bytes processed. Required.
                        "canceled": 0,  # Number of blobs that have been canceled. Required.
                        "failed": 0,  # Number of blobs that have failed. Required.
                        "successful": 0,  # Number of blobs that have completed. Required.
                        "total": 0  # Number of blobs total. Required.
                    }
                }
        """

    @overload
    async def begin_create_job(
        self, name: str, resource: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> AsyncLROPoller[_models.DeidentificationJob]:
        # pylint: disable=line-too-long
        """Create a De-Identify Job.

        Long-running resource create or replace operation template.

        :param name: The name of a job. Required.
        :type name: str
        :param resource: The resource instance. Required.
        :type resource: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of AsyncLROPoller that returns DeidentificationJob. The
         DeidentificationJob is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.AsyncLROPoller[~azure.health.deidentification.models.DeidentificationJob]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201, 200
                response == {
                    "createdAt": "2020-02-20 00:00:00",  # Date and time when the job was
                      created. Required.
                    "dataType": "str",  # Data type of the input documents. Required. "PlainText"
                    "name": "str",  # The name of a job. Required.
                    "operation": "str",  # Operation to perform on the input documents. Required.
                      Known values are: "Redact", "Surrogate", and "Tag".
                    "sourceLocation": {
                        "extensions": [
                            "str"  # List of extensions to filter blobs by. Required.
                        ],
                        "location": "str",  # URL to storage location. Must be a valid Azure
                          Storage SAS URI. Required.
                        "prefix": "str"  # Prefix to filter blobs by. Required.
                    },
                    "status": "str",  # Current status of a job. Required. Known values are:
                      "NotStarted", "Running", "Succeeded", "PartialFailed", "Failed", and "Canceled".
                    "targetLocation": {
                        "location": "str",  # URL to storage location. Must be a valid Azure
                          Storage SAS URI. Required.
                        "prefix": "str"  # Prefix to filter blobs by. Required.
                    },
                    "error": {
                        "code": "str",  # One of a server-defined set of error codes.
                          Required.
                        "message": "str",  # A human-readable representation of the error.
                          Required.
                        "details": [
                            ...
                        ],
                        "innererror": {
                            "code": "str",  # Optional. One of a server-defined set of
                              error codes.
                            "innererror": ...
                        },
                        "target": "str"  # Optional. The target of the error.
                    },
                    "lastUpdatedAt": "2020-02-20 00:00:00",  # Optional. Date and time when the
                      job was completed.  If the job is canceled, this is the time when the job was
                      canceled.  If the job failed, this is the time when the job failed.
                    "redactionFormat": "str",  # Optional. Format of the redacted output. Only
                      valid when Operation is Redact.
                    "startedAt": "2020-02-20 00:00:00",  # Optional. Date and time when the job
                      was started.
                    "summary": {
                        "bytesProcessed": 0,  # Number of bytes processed. Required.
                        "canceled": 0,  # Number of blobs that have been canceled. Required.
                        "failed": 0,  # Number of blobs that have failed. Required.
                        "successful": 0,  # Number of blobs that have completed. Required.
                        "total": 0  # Number of blobs total. Required.
                    }
                }
        """

    @overload
    async def begin_create_job(
        self, name: str, resource: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> AsyncLROPoller[_models.DeidentificationJob]:
        # pylint: disable=line-too-long
        """Create a De-Identify Job.

        Long-running resource create or replace operation template.

        :param name: The name of a job. Required.
        :type name: str
        :param resource: The resource instance. Required.
        :type resource: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: An instance of AsyncLROPoller that returns DeidentificationJob. The
         DeidentificationJob is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.AsyncLROPoller[~azure.health.deidentification.models.DeidentificationJob]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201, 200
                response == {
                    "createdAt": "2020-02-20 00:00:00",  # Date and time when the job was
                      created. Required.
                    "dataType": "str",  # Data type of the input documents. Required. "PlainText"
                    "name": "str",  # The name of a job. Required.
                    "operation": "str",  # Operation to perform on the input documents. Required.
                      Known values are: "Redact", "Surrogate", and "Tag".
                    "sourceLocation": {
                        "extensions": [
                            "str"  # List of extensions to filter blobs by. Required.
                        ],
                        "location": "str",  # URL to storage location. Must be a valid Azure
                          Storage SAS URI. Required.
                        "prefix": "str"  # Prefix to filter blobs by. Required.
                    },
                    "status": "str",  # Current status of a job. Required. Known values are:
                      "NotStarted", "Running", "Succeeded", "PartialFailed", "Failed", and "Canceled".
                    "targetLocation": {
                        "location": "str",  # URL to storage location. Must be a valid Azure
                          Storage SAS URI. Required.
                        "prefix": "str"  # Prefix to filter blobs by. Required.
                    },
                    "error": {
                        "code": "str",  # One of a server-defined set of error codes.
                          Required.
                        "message": "str",  # A human-readable representation of the error.
                          Required.
                        "details": [
                            ...
                        ],
                        "innererror": {
                            "code": "str",  # Optional. One of a server-defined set of
                              error codes.
                            "innererror": ...
                        },
                        "target": "str"  # Optional. The target of the error.
                    },
                    "lastUpdatedAt": "2020-02-20 00:00:00",  # Optional. Date and time when the
                      job was completed.  If the job is canceled, this is the time when the job was
                      canceled.  If the job failed, this is the time when the job failed.
                    "redactionFormat": "str",  # Optional. Format of the redacted output. Only
                      valid when Operation is Redact.
                    "startedAt": "2020-02-20 00:00:00",  # Optional. Date and time when the job
                      was started.
                    "summary": {
                        "bytesProcessed": 0,  # Number of bytes processed. Required.
                        "canceled": 0,  # Number of blobs that have been canceled. Required.
                        "failed": 0,  # Number of blobs that have failed. Required.
                        "successful": 0,  # Number of blobs that have completed. Required.
                        "total": 0  # Number of blobs total. Required.
                    }
                }
        """

    @distributed_trace_async
    async def begin_create_job(
        self, name: str, resource: Union[_models.DeidentificationJob, JSON, IO[bytes]], **kwargs: Any
    ) -> AsyncLROPoller[_models.DeidentificationJob]:
        # pylint: disable=line-too-long
        """Create a De-Identify Job.

        Long-running resource create or replace operation template.

        :param name: The name of a job. Required.
        :type name: str
        :param resource: The resource instance. Is one of the following types: DeidentificationJob,
         JSON, IO[bytes] Required.
        :type resource: ~azure.health.deidentification.models.DeidentificationJob or JSON or IO[bytes]
        :return: An instance of AsyncLROPoller that returns DeidentificationJob. The
         DeidentificationJob is compatible with MutableMapping
        :rtype:
         ~azure.core.polling.AsyncLROPoller[~azure.health.deidentification.models.DeidentificationJob]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                resource = {
                    "createdAt": "2020-02-20 00:00:00",  # Date and time when the job was
                      created. Required.
                    "dataType": "str",  # Data type of the input documents. Required. "PlainText"
                    "name": "str",  # The name of a job. Required.
                    "operation": "str",  # Operation to perform on the input documents. Required.
                      Known values are: "Redact", "Surrogate", and "Tag".
                    "sourceLocation": {
                        "extensions": [
                            "str"  # List of extensions to filter blobs by. Required.
                        ],
                        "location": "str",  # URL to storage location. Must be a valid Azure
                          Storage SAS URI. Required.
                        "prefix": "str"  # Prefix to filter blobs by. Required.
                    },
                    "status": "str",  # Current status of a job. Required. Known values are:
                      "NotStarted", "Running", "Succeeded", "PartialFailed", "Failed", and "Canceled".
                    "targetLocation": {
                        "location": "str",  # URL to storage location. Must be a valid Azure
                          Storage SAS URI. Required.
                        "prefix": "str"  # Prefix to filter blobs by. Required.
                    },
                    "error": {
                        "code": "str",  # One of a server-defined set of error codes.
                          Required.
                        "message": "str",  # A human-readable representation of the error.
                          Required.
                        "details": [
                            ...
                        ],
                        "innererror": {
                            "code": "str",  # Optional. One of a server-defined set of
                              error codes.
                            "innererror": ...
                        },
                        "target": "str"  # Optional. The target of the error.
                    },
                    "lastUpdatedAt": "2020-02-20 00:00:00",  # Optional. Date and time when the
                      job was completed.  If the job is canceled, this is the time when the job was
                      canceled.  If the job failed, this is the time when the job failed.
                    "redactionFormat": "str",  # Optional. Format of the redacted output. Only
                      valid when Operation is Redact.
                    "startedAt": "2020-02-20 00:00:00",  # Optional. Date and time when the job
                      was started.
                    "summary": {
                        "bytesProcessed": 0,  # Number of bytes processed. Required.
                        "canceled": 0,  # Number of blobs that have been canceled. Required.
                        "failed": 0,  # Number of blobs that have failed. Required.
                        "successful": 0,  # Number of blobs that have completed. Required.
                        "total": 0  # Number of blobs total. Required.
                    }
                }

                # response body for status code(s): 201, 200
                response == {
                    "createdAt": "2020-02-20 00:00:00",  # Date and time when the job was
                      created. Required.
                    "dataType": "str",  # Data type of the input documents. Required. "PlainText"
                    "name": "str",  # The name of a job. Required.
                    "operation": "str",  # Operation to perform on the input documents. Required.
                      Known values are: "Redact", "Surrogate", and "Tag".
                    "sourceLocation": {
                        "extensions": [
                            "str"  # List of extensions to filter blobs by. Required.
                        ],
                        "location": "str",  # URL to storage location. Must be a valid Azure
                          Storage SAS URI. Required.
                        "prefix": "str"  # Prefix to filter blobs by. Required.
                    },
                    "status": "str",  # Current status of a job. Required. Known values are:
                      "NotStarted", "Running", "Succeeded", "PartialFailed", "Failed", and "Canceled".
                    "targetLocation": {
                        "location": "str",  # URL to storage location. Must be a valid Azure
                          Storage SAS URI. Required.
                        "prefix": "str"  # Prefix to filter blobs by. Required.
                    },
                    "error": {
                        "code": "str",  # One of a server-defined set of error codes.
                          Required.
                        "message": "str",  # A human-readable representation of the error.
                          Required.
                        "details": [
                            ...
                        ],
                        "innererror": {
                            "code": "str",  # Optional. One of a server-defined set of
                              error codes.
                            "innererror": ...
                        },
                        "target": "str"  # Optional. The target of the error.
                    },
                    "lastUpdatedAt": "2020-02-20 00:00:00",  # Optional. Date and time when the
                      job was completed.  If the job is canceled, this is the time when the job was
                      canceled.  If the job failed, this is the time when the job failed.
                    "redactionFormat": "str",  # Optional. Format of the redacted output. Only
                      valid when Operation is Redact.
                    "startedAt": "2020-02-20 00:00:00",  # Optional. Date and time when the job
                      was started.
                    "summary": {
                        "bytesProcessed": 0,  # Number of bytes processed. Required.
                        "canceled": 0,  # Number of blobs that have been canceled. Required.
                        "failed": 0,  # Number of blobs that have failed. Required.
                        "successful": 0,  # Number of blobs that have completed. Required.
                        "total": 0  # Number of blobs total. Required.
                    }
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.DeidentificationJob] = kwargs.pop("cls", None)
        polling: Union[bool, AsyncPollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = await self._create_job_initial(
                name=name,
                resource=resource,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["x-ms-client-request-id"] = self._deserialize(
                "str", response.headers.get("x-ms-client-request-id")
            )
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            deserialized = _deserialize(_models.DeidentificationJob, response.json())
            if cls:
                return cls(pipeline_response, deserialized, response_headers)  # type: ignore
            return deserialized

        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }

        if polling is True:
            polling_method: AsyncPollingMethod = cast(
                AsyncPollingMethod,
                AsyncLROBasePolling(lro_delay, path_format_arguments=path_format_arguments, **kwargs),
            )
        elif polling is False:
            polling_method = cast(AsyncPollingMethod, AsyncNoPolling())
        else:
            polling_method = polling
        if cont_token:
            return AsyncLROPoller[_models.DeidentificationJob].from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return AsyncLROPoller[_models.DeidentificationJob](
            self._client, raw_result, get_long_running_output, polling_method  # type: ignore
        )

    @distributed_trace
    def list_jobs(
        self, *, continuation_token_parameter: Optional[str] = None, **kwargs: Any
    ) -> AsyncIterable["_models.DeidentificationJob"]:
        # pylint: disable=line-too-long
        """List De-Identify Jobs.

        Resource list operation template.

        :keyword continuation_token_parameter: Token to continue a previous query. Default value is
         None.
        :paramtype continuation_token_parameter: str
        :return: An iterator like instance of DeidentificationJob
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~azure.health.deidentification.models.DeidentificationJob]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "createdAt": "2020-02-20 00:00:00",  # Date and time when the job was
                      created. Required.
                    "dataType": "str",  # Data type of the input documents. Required. "PlainText"
                    "name": "str",  # The name of a job. Required.
                    "operation": "str",  # Operation to perform on the input documents. Required.
                      Known values are: "Redact", "Surrogate", and "Tag".
                    "sourceLocation": {
                        "extensions": [
                            "str"  # List of extensions to filter blobs by. Required.
                        ],
                        "location": "str",  # URL to storage location. Must be a valid Azure
                          Storage SAS URI. Required.
                        "prefix": "str"  # Prefix to filter blobs by. Required.
                    },
                    "status": "str",  # Current status of a job. Required. Known values are:
                      "NotStarted", "Running", "Succeeded", "PartialFailed", "Failed", and "Canceled".
                    "targetLocation": {
                        "location": "str",  # URL to storage location. Must be a valid Azure
                          Storage SAS URI. Required.
                        "prefix": "str"  # Prefix to filter blobs by. Required.
                    },
                    "error": {
                        "code": "str",  # One of a server-defined set of error codes.
                          Required.
                        "message": "str",  # A human-readable representation of the error.
                          Required.
                        "details": [
                            ...
                        ],
                        "innererror": {
                            "code": "str",  # Optional. One of a server-defined set of
                              error codes.
                            "innererror": ...
                        },
                        "target": "str"  # Optional. The target of the error.
                    },
                    "lastUpdatedAt": "2020-02-20 00:00:00",  # Optional. Date and time when the
                      job was completed.  If the job is canceled, this is the time when the job was
                      canceled.  If the job failed, this is the time when the job failed.
                    "redactionFormat": "str",  # Optional. Format of the redacted output. Only
                      valid when Operation is Redact.
                    "startedAt": "2020-02-20 00:00:00",  # Optional. Date and time when the job
                      was started.
                    "summary": {
                        "bytesProcessed": 0,  # Number of bytes processed. Required.
                        "canceled": 0,  # Number of blobs that have been canceled. Required.
                        "failed": 0,  # Number of blobs that have failed. Required.
                        "successful": 0,  # Number of blobs that have completed. Required.
                        "total": 0  # Number of blobs total. Required.
                    }
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        maxpagesize = kwargs.pop("maxpagesize", None)
        cls: ClsType[List[_models.DeidentificationJob]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_deidentification_list_jobs_request(
                    maxpagesize=maxpagesize,
                    continuation_token_parameter=continuation_token_parameter,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.DeidentificationJob], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    await response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace
    def list_job_files(
        self, name: str, *, continuation_token_parameter: Optional[str] = None, **kwargs: Any
    ) -> AsyncIterable["_models.HealthFileDetails"]:
        # pylint: disable=line-too-long
        """List processed files within a Job.

        Resource list operation template.

        :param name: The name of a job. Required.
        :type name: str
        :keyword continuation_token_parameter: Token to continue a previous query. Default value is
         None.
        :paramtype continuation_token_parameter: str
        :return: An iterator like instance of HealthFileDetails
        :rtype:
         ~azure.core.async_paging.AsyncItemPaged[~azure.health.deidentification.models.HealthFileDetails]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "id": "str",  # Id of the file report. Required.
                    "input": {
                        "etag": "str",  # The entity tag for this resource. Required.
                        "path": "str"  # Absolute path to the file in storage. Required.
                    },
                    "status": "str",  # Status of the file. Required. Known values are:
                      "NotStarted", "Running", "Succeeded", "Failed", and "Canceled".
                    "error": {
                        "code": "str",  # One of a server-defined set of error codes.
                          Required.
                        "message": "str",  # A human-readable representation of the error.
                          Required.
                        "details": [
                            ...
                        ],
                        "innererror": {
                            "code": "str",  # Optional. One of a server-defined set of
                              error codes.
                            "innererror": ...
                        },
                        "target": "str"  # Optional. The target of the error.
                    },
                    "output": {
                        "etag": "str",  # The entity tag for this resource. Required.
                        "path": "str"  # Absolute path to the file in storage. Required.
                    }
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        maxpagesize = kwargs.pop("maxpagesize", None)
        cls: ClsType[List[_models.HealthFileDetails]] = kwargs.pop("cls", None)

        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                _request = build_deidentification_list_job_files_request(
                    name=name,
                    maxpagesize=maxpagesize,
                    continuation_token_parameter=continuation_token_parameter,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                _request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
                }
                _request.url = self._client.format_url(_request.url, **path_format_arguments)

            return _request

        async def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = _deserialize(List[_models.HealthFileDetails], deserialized["value"])
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            _request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
                _request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    await response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    @distributed_trace_async
    async def cancel_job(self, name: str, **kwargs: Any) -> _models.DeidentificationJob:
        # pylint: disable=line-too-long
        """Cancel a De-Identify Job.

        Cancels a job that is in progress.

        The job will be marked as canceled and the service will stop processing the job. The service
        will not delete any files that have already been processed.

        If the job is already complete, this will have no effect.

        :param name: The name of a job. Required.
        :type name: str
        :return: DeidentificationJob. The DeidentificationJob is compatible with MutableMapping
        :rtype: ~azure.health.deidentification.models.DeidentificationJob
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "createdAt": "2020-02-20 00:00:00",  # Date and time when the job was
                      created. Required.
                    "dataType": "str",  # Data type of the input documents. Required. "PlainText"
                    "name": "str",  # The name of a job. Required.
                    "operation": "str",  # Operation to perform on the input documents. Required.
                      Known values are: "Redact", "Surrogate", and "Tag".
                    "sourceLocation": {
                        "extensions": [
                            "str"  # List of extensions to filter blobs by. Required.
                        ],
                        "location": "str",  # URL to storage location. Must be a valid Azure
                          Storage SAS URI. Required.
                        "prefix": "str"  # Prefix to filter blobs by. Required.
                    },
                    "status": "str",  # Current status of a job. Required. Known values are:
                      "NotStarted", "Running", "Succeeded", "PartialFailed", "Failed", and "Canceled".
                    "targetLocation": {
                        "location": "str",  # URL to storage location. Must be a valid Azure
                          Storage SAS URI. Required.
                        "prefix": "str"  # Prefix to filter blobs by. Required.
                    },
                    "error": {
                        "code": "str",  # One of a server-defined set of error codes.
                          Required.
                        "message": "str",  # A human-readable representation of the error.
                          Required.
                        "details": [
                            ...
                        ],
                        "innererror": {
                            "code": "str",  # Optional. One of a server-defined set of
                              error codes.
                            "innererror": ...
                        },
                        "target": "str"  # Optional. The target of the error.
                    },
                    "lastUpdatedAt": "2020-02-20 00:00:00",  # Optional. Date and time when the
                      job was completed.  If the job is canceled, this is the time when the job was
                      canceled.  If the job failed, this is the time when the job failed.
                    "redactionFormat": "str",  # Optional. Format of the redacted output. Only
                      valid when Operation is Redact.
                    "startedAt": "2020-02-20 00:00:00",  # Optional. Date and time when the job
                      was started.
                    "summary": {
                        "bytesProcessed": 0,  # Number of bytes processed. Required.
                        "canceled": 0,  # Number of blobs that have been canceled. Required.
                        "failed": 0,  # Number of blobs that have failed. Required.
                        "successful": 0,  # Number of blobs that have completed. Required.
                        "total": 0  # Number of blobs total. Required.
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.DeidentificationJob] = kwargs.pop("cls", None)

        _request = build_deidentification_cancel_job_request(
            name=name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.DeidentificationJob, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)  # type: ignore

        return deserialized  # type: ignore

    @distributed_trace_async
    async def delete_job(self, name: str, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Delete a De-Identify Job.

        Removes the record of the job from the service. Does not delete any files.

        :param name: The name of a job. Required.
        :type name: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        _request = build_deidentification_delete_job_request(
            name=name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["x-ms-client-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-client-request-id")
        )

        if cls:
            return cls(pipeline_response, None, response_headers)  # type: ignore

    @overload
    async def deidentify(
        self, body: _models.DeidentificationContent, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.DeidentificationResult:
        # pylint: disable=line-too-long
        """Realtime Synchronous Deidentification.

        A remote procedure call (RPC) operation.

        :param body: The request body for realtime deidentification. Required.
        :type body: ~azure.health.deidentification.models.DeidentificationContent
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: DeidentificationResult. The DeidentificationResult is compatible with MutableMapping
        :rtype: ~azure.health.deidentification.models.DeidentificationResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "dataType": "str",  # Data type of the input. Required. "PlainText"
                    "inputText": "str",  # Input text to deidentify. Required.
                    "operation": "str",  # Operation to perform on the input. Required. Known
                      values are: "Redact", "Surrogate", and "Tag".
                    "redactionFormat": "str",  # Optional. Format of the redacted output. Only
                      valid when OperationType is Redact.
                    "stringIndexType": "str"  # Optional. Requested Encoding of the tag response
                      indices. Known values are: "TextElement_v8", "UnicodeCodePoint", and
                      "Utf16CodeUnit".
                }

                # response body for status code(s): 200
                response == {
                    "outputText": "str",  # Optional. Output text after de-identifying. Not
                      available for Tag Operation.
                    "taggerResult": {
                        "entities": [
                            {
                                "category": "str",  # Phi Category of the entity.
                                  Required. Known values are: "Unknown", "Account", "Age", "BioID",
                                  "City", "CountryOrRegion", "Date", "Device", "Doctor", "Email",
                                  "Fax", "HealthPlan", "Hospital", "IDNum", "IPAddress", "License",
                                  "LocationOther", "MedicalRecord", "Organization", "Patient", "Phone",
                                  "Profession", "SocialSecurity", "State", "Street", "Url", "Username",
                                  "Vehicle", and "Zip".
                                "length": 0,  # Length of the input text. Required.
                                "offset": 0,  # Starting index of the location from
                                  within the input text. Required.
                                "confidenceScore": 0.0,  # Optional. Confidence score
                                  of the text/type pairing.
                                "text": "str"  # Optional. Text of the entity.
                            }
                        ],
                        "etag": "str",  # The entity tag for this resource. Required.
                        "stringIndexType": "str",  # Requested Encoding of the tag response
                          indices. Required. Known values are: "TextElement_v8", "UnicodeCodePoint",
                          and "Utf16CodeUnit".
                        "path": "str"  # Optional. Path to the file in the storage container.
                    }
                }
        """

    @overload
    async def deidentify(
        self, body: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.DeidentificationResult:
        # pylint: disable=line-too-long
        """Realtime Synchronous Deidentification.

        A remote procedure call (RPC) operation.

        :param body: The request body for realtime deidentification. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: DeidentificationResult. The DeidentificationResult is compatible with MutableMapping
        :rtype: ~azure.health.deidentification.models.DeidentificationResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "outputText": "str",  # Optional. Output text after de-identifying. Not
                      available for Tag Operation.
                    "taggerResult": {
                        "entities": [
                            {
                                "category": "str",  # Phi Category of the entity.
                                  Required. Known values are: "Unknown", "Account", "Age", "BioID",
                                  "City", "CountryOrRegion", "Date", "Device", "Doctor", "Email",
                                  "Fax", "HealthPlan", "Hospital", "IDNum", "IPAddress", "License",
                                  "LocationOther", "MedicalRecord", "Organization", "Patient", "Phone",
                                  "Profession", "SocialSecurity", "State", "Street", "Url", "Username",
                                  "Vehicle", and "Zip".
                                "length": 0,  # Length of the input text. Required.
                                "offset": 0,  # Starting index of the location from
                                  within the input text. Required.
                                "confidenceScore": 0.0,  # Optional. Confidence score
                                  of the text/type pairing.
                                "text": "str"  # Optional. Text of the entity.
                            }
                        ],
                        "etag": "str",  # The entity tag for this resource. Required.
                        "stringIndexType": "str",  # Requested Encoding of the tag response
                          indices. Required. Known values are: "TextElement_v8", "UnicodeCodePoint",
                          and "Utf16CodeUnit".
                        "path": "str"  # Optional. Path to the file in the storage container.
                    }
                }
        """

    @overload
    async def deidentify(
        self, body: IO[bytes], *, content_type: str = "application/json", **kwargs: Any
    ) -> _models.DeidentificationResult:
        # pylint: disable=line-too-long
        """Realtime Synchronous Deidentification.

        A remote procedure call (RPC) operation.

        :param body: The request body for realtime deidentification. Required.
        :type body: IO[bytes]
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: DeidentificationResult. The DeidentificationResult is compatible with MutableMapping
        :rtype: ~azure.health.deidentification.models.DeidentificationResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "outputText": "str",  # Optional. Output text after de-identifying. Not
                      available for Tag Operation.
                    "taggerResult": {
                        "entities": [
                            {
                                "category": "str",  # Phi Category of the entity.
                                  Required. Known values are: "Unknown", "Account", "Age", "BioID",
                                  "City", "CountryOrRegion", "Date", "Device", "Doctor", "Email",
                                  "Fax", "HealthPlan", "Hospital", "IDNum", "IPAddress", "License",
                                  "LocationOther", "MedicalRecord", "Organization", "Patient", "Phone",
                                  "Profession", "SocialSecurity", "State", "Street", "Url", "Username",
                                  "Vehicle", and "Zip".
                                "length": 0,  # Length of the input text. Required.
                                "offset": 0,  # Starting index of the location from
                                  within the input text. Required.
                                "confidenceScore": 0.0,  # Optional. Confidence score
                                  of the text/type pairing.
                                "text": "str"  # Optional. Text of the entity.
                            }
                        ],
                        "etag": "str",  # The entity tag for this resource. Required.
                        "stringIndexType": "str",  # Requested Encoding of the tag response
                          indices. Required. Known values are: "TextElement_v8", "UnicodeCodePoint",
                          and "Utf16CodeUnit".
                        "path": "str"  # Optional. Path to the file in the storage container.
                    }
                }
        """

    @distributed_trace_async
    async def deidentify(
        self, body: Union[_models.DeidentificationContent, JSON, IO[bytes]], **kwargs: Any
    ) -> _models.DeidentificationResult:
        # pylint: disable=line-too-long
        """Realtime Synchronous Deidentification.

        A remote procedure call (RPC) operation.

        :param body: The request body for realtime deidentification. Is one of the following types:
         DeidentificationContent, JSON, IO[bytes] Required.
        :type body: ~azure.health.deidentification.models.DeidentificationContent or JSON or IO[bytes]
        :return: DeidentificationResult. The DeidentificationResult is compatible with MutableMapping
        :rtype: ~azure.health.deidentification.models.DeidentificationResult
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "dataType": "str",  # Data type of the input. Required. "PlainText"
                    "inputText": "str",  # Input text to deidentify. Required.
                    "operation": "str",  # Operation to perform on the input. Required. Known
                      values are: "Redact", "Surrogate", and "Tag".
                    "redactionFormat": "str",  # Optional. Format of the redacted output. Only
                      valid when OperationType is Redact.
                    "stringIndexType": "str"  # Optional. Requested Encoding of the tag response
                      indices. Known values are: "TextElement_v8", "UnicodeCodePoint", and
                      "Utf16CodeUnit".
                }

                # response body for status code(s): 200
                response == {
                    "outputText": "str",  # Optional. Output text after de-identifying. Not
                      available for Tag Operation.
                    "taggerResult": {
                        "entities": [
                            {
                                "category": "str",  # Phi Category of the entity.
                                  Required. Known values are: "Unknown", "Account", "Age", "BioID",
                                  "City", "CountryOrRegion", "Date", "Device", "Doctor", "Email",
                                  "Fax", "HealthPlan", "Hospital", "IDNum", "IPAddress", "License",
                                  "LocationOther", "MedicalRecord", "Organization", "Patient", "Phone",
                                  "Profession", "SocialSecurity", "State", "Street", "Url", "Username",
                                  "Vehicle", and "Zip".
                                "length": 0,  # Length of the input text. Required.
                                "offset": 0,  # Starting index of the location from
                                  within the input text. Required.
                                "confidenceScore": 0.0,  # Optional. Confidence score
                                  of the text/type pairing.
                                "text": "str"  # Optional. Text of the entity.
                            }
                        ],
                        "etag": "str",  # The entity tag for this resource. Required.
                        "stringIndexType": "str",  # Requested Encoding of the tag response
                          indices. Required. Known values are: "TextElement_v8", "UnicodeCodePoint",
                          and "Utf16CodeUnit".
                        "path": "str"  # Optional. Path to the file in the storage container.
                    }
                }
        """
        error_map: MutableMapping[int, Type[HttpResponseError]] = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.DeidentificationResult] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=SdkJSONEncoder, exclude_readonly=True)  # type: ignore

        _request = build_deidentification_deidentify_request(
            content_type=content_type,
            api_version=self._config.api_version,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str"),
        }
        _request.url = self._client.format_url(_request.url, **path_format_arguments)

        _stream = kwargs.pop("stream", False)
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            _request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                await response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if _stream:
            deserialized = response.iter_bytes()
        else:
            deserialized = _deserialize(_models.DeidentificationResult, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore
