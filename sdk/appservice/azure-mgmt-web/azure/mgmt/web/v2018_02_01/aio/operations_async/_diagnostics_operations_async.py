# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import Any, Callable, Dict, Generic, Optional, TypeVar
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class DiagnosticsOperations:
    """DiagnosticsOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.mgmt.web.v2018_02_01.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_hosting_environment_detector_responses(
        self,
        resource_group_name: str,
        name: str,
        **kwargs
    ) -> "models.DetectorResponseCollection":
        """List Hosting Environment Detector Responses.

        List Hosting Environment Detector Responses.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param name: Site Name.
        :type name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DetectorResponseCollection or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.DetectorResponseCollection
        :raises: ~azure.mgmt.web.v2018_02_01.models.DefaultErrorResponseException:
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.DetectorResponseCollection"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2018-02-01"

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.list_hosting_environment_detector_responses.metadata['url']
                path_format_arguments = {
                    'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+[^\.]$'),
                    'name': self._serialize.url("name", name, 'str'),
                    'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
            else:
                url = next_link

            # Construct parameters
            query_parameters = {}  # type: Dict[str, Any]
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('DetectorResponseCollection', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise models.DefaultErrorResponseException.from_response(response, self._deserialize)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_hosting_environment_detector_responses.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/detectors'}

    async def get_hosting_environment_detector_response(
        self,
        resource_group_name: str,
        name: str,
        detector_name: str,
        start_time: Optional[datetime.datetime] = None,
        end_time: Optional[datetime.datetime] = None,
        time_grain: Optional[str] = None,
        **kwargs
    ) -> "models.DetectorResponse":
        """Get Hosting Environment Detector Response.

        Get Hosting Environment Detector Response.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param name: App Service Environment Name.
        :type name: str
        :param detector_name: Detector Resource Name.
        :type detector_name: str
        :param start_time: Start Time.
        :type start_time: ~datetime.datetime
        :param end_time: End Time.
        :type end_time: ~datetime.datetime
        :param time_grain: Time Grain.
        :type time_grain: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DetectorResponse or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.DetectorResponse
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.DetectorResponse"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2018-02-01"

        # Construct URL
        url = self.get_hosting_environment_detector_response.metadata['url']
        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+[^\.]$'),
            'name': self._serialize.url("name", name, 'str'),
            'detectorName': self._serialize.url("detector_name", detector_name, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if start_time is not None:
            query_parameters['startTime'] = self._serialize.query("start_time", start_time, 'iso-8601')
        if end_time is not None:
            query_parameters['endTime'] = self._serialize.query("end_time", end_time, 'iso-8601')
        if time_grain is not None:
            query_parameters['timeGrain'] = self._serialize.query("time_grain", time_grain, 'str', pattern=r'PT[1-9][0-9]+[SMH]')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.DefaultErrorResponseException.from_response(response, self._deserialize)

        deserialized = self._deserialize('DetectorResponse', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    get_hosting_environment_detector_response.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/detectors/{detectorName}'}

    def list_site_detector_responses(
        self,
        resource_group_name: str,
        site_name: str,
        **kwargs
    ) -> "models.DetectorResponseCollection":
        """List Site Detector Responses.

        List Site Detector Responses.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param site_name: Site Name.
        :type site_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DetectorResponseCollection or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.DetectorResponseCollection
        :raises: ~azure.mgmt.web.v2018_02_01.models.DefaultErrorResponseException:
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.DetectorResponseCollection"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2018-02-01"

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.list_site_detector_responses.metadata['url']
                path_format_arguments = {
                    'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+[^\.]$'),
                    'siteName': self._serialize.url("site_name", site_name, 'str'),
                    'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
            else:
                url = next_link

            # Construct parameters
            query_parameters = {}  # type: Dict[str, Any]
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('DetectorResponseCollection', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise models.DefaultErrorResponseException.from_response(response, self._deserialize)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_site_detector_responses.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/detectors'}

    async def get_site_detector_response(
        self,
        resource_group_name: str,
        site_name: str,
        detector_name: str,
        start_time: Optional[datetime.datetime] = None,
        end_time: Optional[datetime.datetime] = None,
        time_grain: Optional[str] = None,
        **kwargs
    ) -> "models.DetectorResponse":
        """Get site detector response.

        Get site detector response.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param site_name: Site Name.
        :type site_name: str
        :param detector_name: Detector Resource Name.
        :type detector_name: str
        :param start_time: Start Time.
        :type start_time: ~datetime.datetime
        :param end_time: End Time.
        :type end_time: ~datetime.datetime
        :param time_grain: Time Grain.
        :type time_grain: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DetectorResponse or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.DetectorResponse
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.DetectorResponse"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2018-02-01"

        # Construct URL
        url = self.get_site_detector_response.metadata['url']
        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+[^\.]$'),
            'siteName': self._serialize.url("site_name", site_name, 'str'),
            'detectorName': self._serialize.url("detector_name", detector_name, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if start_time is not None:
            query_parameters['startTime'] = self._serialize.query("start_time", start_time, 'iso-8601')
        if end_time is not None:
            query_parameters['endTime'] = self._serialize.query("end_time", end_time, 'iso-8601')
        if time_grain is not None:
            query_parameters['timeGrain'] = self._serialize.query("time_grain", time_grain, 'str', pattern=r'PT[1-9][0-9]+[SMH]')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.DefaultErrorResponseException.from_response(response, self._deserialize)

        deserialized = self._deserialize('DetectorResponse', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    get_site_detector_response.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/detectors/{detectorName}'}

    def list_site_diagnostic_categories(
        self,
        resource_group_name: str,
        site_name: str,
        **kwargs
    ) -> "models.DiagnosticCategoryCollection":
        """Get Diagnostics Categories.

        Get Diagnostics Categories.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param site_name: Site Name.
        :type site_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DiagnosticCategoryCollection or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.DiagnosticCategoryCollection
        :raises: ~azure.mgmt.web.v2018_02_01.models.DefaultErrorResponseException:
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.DiagnosticCategoryCollection"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2018-02-01"

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.list_site_diagnostic_categories.metadata['url']
                path_format_arguments = {
                    'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+[^\.]$'),
                    'siteName': self._serialize.url("site_name", site_name, 'str'),
                    'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
            else:
                url = next_link

            # Construct parameters
            query_parameters = {}  # type: Dict[str, Any]
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('DiagnosticCategoryCollection', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise models.DefaultErrorResponseException.from_response(response, self._deserialize)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_site_diagnostic_categories.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics'}

    async def get_site_diagnostic_category(
        self,
        resource_group_name: str,
        site_name: str,
        diagnostic_category: str,
        **kwargs
    ) -> "models.DiagnosticCategory":
        """Get Diagnostics Category.

        Get Diagnostics Category.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param site_name: Site Name.
        :type site_name: str
        :param diagnostic_category: Diagnostic Category.
        :type diagnostic_category: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DiagnosticCategory or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.DiagnosticCategory
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.DiagnosticCategory"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2018-02-01"

        # Construct URL
        url = self.get_site_diagnostic_category.metadata['url']
        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+[^\.]$'),
            'siteName': self._serialize.url("site_name", site_name, 'str'),
            'diagnosticCategory': self._serialize.url("diagnostic_category", diagnostic_category, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.DefaultErrorResponseException.from_response(response, self._deserialize)

        deserialized = self._deserialize('DiagnosticCategory', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    get_site_diagnostic_category.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}'}

    def list_site_analyses(
        self,
        resource_group_name: str,
        site_name: str,
        diagnostic_category: str,
        **kwargs
    ) -> "models.DiagnosticAnalysisCollection":
        """Get Site Analyses.

        Get Site Analyses.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param site_name: Site Name.
        :type site_name: str
        :param diagnostic_category: Diagnostic Category.
        :type diagnostic_category: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DiagnosticAnalysisCollection or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.DiagnosticAnalysisCollection
        :raises: ~azure.mgmt.web.v2018_02_01.models.DefaultErrorResponseException:
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.DiagnosticAnalysisCollection"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2018-02-01"

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.list_site_analyses.metadata['url']
                path_format_arguments = {
                    'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+[^\.]$'),
                    'siteName': self._serialize.url("site_name", site_name, 'str'),
                    'diagnosticCategory': self._serialize.url("diagnostic_category", diagnostic_category, 'str'),
                    'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
            else:
                url = next_link

            # Construct parameters
            query_parameters = {}  # type: Dict[str, Any]
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('DiagnosticAnalysisCollection', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise models.DefaultErrorResponseException.from_response(response, self._deserialize)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_site_analyses.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses'}

    async def get_site_analysis(
        self,
        resource_group_name: str,
        site_name: str,
        diagnostic_category: str,
        analysis_name: str,
        **kwargs
    ) -> "models.DiagnosticAnalysis":
        """Get Site Analysis.

        Get Site Analysis.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param site_name: Site Name.
        :type site_name: str
        :param diagnostic_category: Diagnostic Category.
        :type diagnostic_category: str
        :param analysis_name: Analysis Name.
        :type analysis_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DiagnosticAnalysis or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.DiagnosticAnalysis
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.DiagnosticAnalysis"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2018-02-01"

        # Construct URL
        url = self.get_site_analysis.metadata['url']
        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+[^\.]$'),
            'siteName': self._serialize.url("site_name", site_name, 'str'),
            'diagnosticCategory': self._serialize.url("diagnostic_category", diagnostic_category, 'str'),
            'analysisName': self._serialize.url("analysis_name", analysis_name, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.DefaultErrorResponseException.from_response(response, self._deserialize)

        deserialized = self._deserialize('DiagnosticAnalysis', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    get_site_analysis.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses/{analysisName}'}

    async def execute_site_analysis(
        self,
        resource_group_name: str,
        site_name: str,
        diagnostic_category: str,
        analysis_name: str,
        start_time: Optional[datetime.datetime] = None,
        end_time: Optional[datetime.datetime] = None,
        time_grain: Optional[str] = None,
        **kwargs
    ) -> "models.DiagnosticAnalysis":
        """Execute Analysis.

        Execute Analysis.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param site_name: Site Name.
        :type site_name: str
        :param diagnostic_category: Category Name.
        :type diagnostic_category: str
        :param analysis_name: Analysis Resource Name.
        :type analysis_name: str
        :param start_time: Start Time.
        :type start_time: ~datetime.datetime
        :param end_time: End Time.
        :type end_time: ~datetime.datetime
        :param time_grain: Time Grain.
        :type time_grain: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DiagnosticAnalysis or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.DiagnosticAnalysis
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.DiagnosticAnalysis"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2018-02-01"

        # Construct URL
        url = self.execute_site_analysis.metadata['url']
        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+[^\.]$'),
            'siteName': self._serialize.url("site_name", site_name, 'str'),
            'diagnosticCategory': self._serialize.url("diagnostic_category", diagnostic_category, 'str'),
            'analysisName': self._serialize.url("analysis_name", analysis_name, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if start_time is not None:
            query_parameters['startTime'] = self._serialize.query("start_time", start_time, 'iso-8601')
        if end_time is not None:
            query_parameters['endTime'] = self._serialize.query("end_time", end_time, 'iso-8601')
        if time_grain is not None:
            query_parameters['timeGrain'] = self._serialize.query("time_grain", time_grain, 'str', pattern=r'PT[1-9][0-9]+[SMH]')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.DefaultErrorResponseException.from_response(response, self._deserialize)

        deserialized = self._deserialize('DiagnosticAnalysis', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    execute_site_analysis.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses/{analysisName}/execute'}

    def list_site_detectors(
        self,
        resource_group_name: str,
        site_name: str,
        diagnostic_category: str,
        **kwargs
    ) -> "models.DiagnosticDetectorCollection":
        """Get Detectors.

        Get Detectors.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param site_name: Site Name.
        :type site_name: str
        :param diagnostic_category: Diagnostic Category.
        :type diagnostic_category: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DiagnosticDetectorCollection or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.DiagnosticDetectorCollection
        :raises: ~azure.mgmt.web.v2018_02_01.models.DefaultErrorResponseException:
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.DiagnosticDetectorCollection"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2018-02-01"

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.list_site_detectors.metadata['url']
                path_format_arguments = {
                    'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+[^\.]$'),
                    'siteName': self._serialize.url("site_name", site_name, 'str'),
                    'diagnosticCategory': self._serialize.url("diagnostic_category", diagnostic_category, 'str'),
                    'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
            else:
                url = next_link

            # Construct parameters
            query_parameters = {}  # type: Dict[str, Any]
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('DiagnosticDetectorCollection', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise models.DefaultErrorResponseException.from_response(response, self._deserialize)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_site_detectors.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors'}

    def get_site_detector(
        self,
        resource_group_name: str,
        site_name: str,
        diagnostic_category: str,
        detector_name: str,
        **kwargs
    ) -> "models.DiagnosticDetectorCollection":
        """Get Detector.

        Get Detector.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param site_name: Site Name.
        :type site_name: str
        :param diagnostic_category: Diagnostic Category.
        :type diagnostic_category: str
        :param detector_name: Detector Name.
        :type detector_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DiagnosticDetectorCollection or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.DiagnosticDetectorCollection
        :raises: ~azure.mgmt.web.v2018_02_01.models.DefaultErrorResponseException:
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.DiagnosticDetectorCollection"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2018-02-01"

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.get_site_detector.metadata['url']
                path_format_arguments = {
                    'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+[^\.]$'),
                    'siteName': self._serialize.url("site_name", site_name, 'str'),
                    'diagnosticCategory': self._serialize.url("diagnostic_category", diagnostic_category, 'str'),
                    'detectorName': self._serialize.url("detector_name", detector_name, 'str'),
                    'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
            else:
                url = next_link

            # Construct parameters
            query_parameters = {}  # type: Dict[str, Any]
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('DiagnosticDetectorCollection', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise models.DefaultErrorResponseException.from_response(response, self._deserialize)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    get_site_detector.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors/{detectorName}'}

    async def execute_site_detector(
        self,
        resource_group_name: str,
        site_name: str,
        detector_name: str,
        diagnostic_category: str,
        start_time: Optional[datetime.datetime] = None,
        end_time: Optional[datetime.datetime] = None,
        time_grain: Optional[str] = None,
        **kwargs
    ) -> "models.DiagnosticDetectorResponse":
        """Execute Detector.

        Execute Detector.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param site_name: Site Name.
        :type site_name: str
        :param detector_name: Detector Resource Name.
        :type detector_name: str
        :param diagnostic_category: Category Name.
        :type diagnostic_category: str
        :param start_time: Start Time.
        :type start_time: ~datetime.datetime
        :param end_time: End Time.
        :type end_time: ~datetime.datetime
        :param time_grain: Time Grain.
        :type time_grain: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DiagnosticDetectorResponse or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.DiagnosticDetectorResponse
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.DiagnosticDetectorResponse"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2018-02-01"

        # Construct URL
        url = self.execute_site_detector.metadata['url']
        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+[^\.]$'),
            'siteName': self._serialize.url("site_name", site_name, 'str'),
            'detectorName': self._serialize.url("detector_name", detector_name, 'str'),
            'diagnosticCategory': self._serialize.url("diagnostic_category", diagnostic_category, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if start_time is not None:
            query_parameters['startTime'] = self._serialize.query("start_time", start_time, 'iso-8601')
        if end_time is not None:
            query_parameters['endTime'] = self._serialize.query("end_time", end_time, 'iso-8601')
        if time_grain is not None:
            query_parameters['timeGrain'] = self._serialize.query("time_grain", time_grain, 'str', pattern=r'PT[1-9][0-9]+[SMH]')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.DefaultErrorResponseException.from_response(response, self._deserialize)

        deserialized = self._deserialize('DiagnosticDetectorResponse', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    execute_site_detector.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors/{detectorName}/execute'}

    def list_site_detector_responses_slot(
        self,
        resource_group_name: str,
        site_name: str,
        slot: str,
        **kwargs
    ) -> "models.DetectorResponseCollection":
        """List Site Detector Responses.

        List Site Detector Responses.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param site_name: Site Name.
        :type site_name: str
        :param slot: Slot Name.
        :type slot: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DetectorResponseCollection or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.DetectorResponseCollection
        :raises: ~azure.mgmt.web.v2018_02_01.models.DefaultErrorResponseException:
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.DetectorResponseCollection"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2018-02-01"

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.list_site_detector_responses_slot.metadata['url']
                path_format_arguments = {
                    'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+[^\.]$'),
                    'siteName': self._serialize.url("site_name", site_name, 'str'),
                    'slot': self._serialize.url("slot", slot, 'str'),
                    'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
            else:
                url = next_link

            # Construct parameters
            query_parameters = {}  # type: Dict[str, Any]
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('DetectorResponseCollection', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise models.DefaultErrorResponseException.from_response(response, self._deserialize)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_site_detector_responses_slot.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/detectors'}

    async def get_site_detector_response_slot(
        self,
        resource_group_name: str,
        site_name: str,
        detector_name: str,
        slot: str,
        start_time: Optional[datetime.datetime] = None,
        end_time: Optional[datetime.datetime] = None,
        time_grain: Optional[str] = None,
        **kwargs
    ) -> "models.DetectorResponse":
        """Get site detector response.

        Get site detector response.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param site_name: Site Name.
        :type site_name: str
        :param detector_name: Detector Resource Name.
        :type detector_name: str
        :param slot: Slot Name.
        :type slot: str
        :param start_time: Start Time.
        :type start_time: ~datetime.datetime
        :param end_time: End Time.
        :type end_time: ~datetime.datetime
        :param time_grain: Time Grain.
        :type time_grain: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DetectorResponse or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.DetectorResponse
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.DetectorResponse"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2018-02-01"

        # Construct URL
        url = self.get_site_detector_response_slot.metadata['url']
        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+[^\.]$'),
            'siteName': self._serialize.url("site_name", site_name, 'str'),
            'detectorName': self._serialize.url("detector_name", detector_name, 'str'),
            'slot': self._serialize.url("slot", slot, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if start_time is not None:
            query_parameters['startTime'] = self._serialize.query("start_time", start_time, 'iso-8601')
        if end_time is not None:
            query_parameters['endTime'] = self._serialize.query("end_time", end_time, 'iso-8601')
        if time_grain is not None:
            query_parameters['timeGrain'] = self._serialize.query("time_grain", time_grain, 'str', pattern=r'PT[1-9][0-9]+[SMH]')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.DefaultErrorResponseException.from_response(response, self._deserialize)

        deserialized = self._deserialize('DetectorResponse', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    get_site_detector_response_slot.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/detectors/{detectorName}'}

    def list_site_diagnostic_categories_slot(
        self,
        resource_group_name: str,
        site_name: str,
        slot: str,
        **kwargs
    ) -> "models.DiagnosticCategoryCollection":
        """Get Diagnostics Categories.

        Get Diagnostics Categories.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param site_name: Site Name.
        :type site_name: str
        :param slot: Slot Name.
        :type slot: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DiagnosticCategoryCollection or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.DiagnosticCategoryCollection
        :raises: ~azure.mgmt.web.v2018_02_01.models.DefaultErrorResponseException:
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.DiagnosticCategoryCollection"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2018-02-01"

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.list_site_diagnostic_categories_slot.metadata['url']
                path_format_arguments = {
                    'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+[^\.]$'),
                    'siteName': self._serialize.url("site_name", site_name, 'str'),
                    'slot': self._serialize.url("slot", slot, 'str'),
                    'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
            else:
                url = next_link

            # Construct parameters
            query_parameters = {}  # type: Dict[str, Any]
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('DiagnosticCategoryCollection', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise models.DefaultErrorResponseException.from_response(response, self._deserialize)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_site_diagnostic_categories_slot.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics'}

    async def get_site_diagnostic_category_slot(
        self,
        resource_group_name: str,
        site_name: str,
        diagnostic_category: str,
        slot: str,
        **kwargs
    ) -> "models.DiagnosticCategory":
        """Get Diagnostics Category.

        Get Diagnostics Category.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param site_name: Site Name.
        :type site_name: str
        :param diagnostic_category: Diagnostic Category.
        :type diagnostic_category: str
        :param slot: Slot Name.
        :type slot: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DiagnosticCategory or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.DiagnosticCategory
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.DiagnosticCategory"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2018-02-01"

        # Construct URL
        url = self.get_site_diagnostic_category_slot.metadata['url']
        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+[^\.]$'),
            'siteName': self._serialize.url("site_name", site_name, 'str'),
            'diagnosticCategory': self._serialize.url("diagnostic_category", diagnostic_category, 'str'),
            'slot': self._serialize.url("slot", slot, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.DefaultErrorResponseException.from_response(response, self._deserialize)

        deserialized = self._deserialize('DiagnosticCategory', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    get_site_diagnostic_category_slot.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}'}

    def list_site_analyses_slot(
        self,
        resource_group_name: str,
        site_name: str,
        diagnostic_category: str,
        slot: str,
        **kwargs
    ) -> "models.DiagnosticAnalysisCollection":
        """Get Site Analyses.

        Get Site Analyses.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param site_name: Site Name.
        :type site_name: str
        :param diagnostic_category: Diagnostic Category.
        :type diagnostic_category: str
        :param slot: Slot Name.
        :type slot: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DiagnosticAnalysisCollection or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.DiagnosticAnalysisCollection
        :raises: ~azure.mgmt.web.v2018_02_01.models.DefaultErrorResponseException:
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.DiagnosticAnalysisCollection"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2018-02-01"

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.list_site_analyses_slot.metadata['url']
                path_format_arguments = {
                    'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+[^\.]$'),
                    'siteName': self._serialize.url("site_name", site_name, 'str'),
                    'diagnosticCategory': self._serialize.url("diagnostic_category", diagnostic_category, 'str'),
                    'slot': self._serialize.url("slot", slot, 'str'),
                    'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
            else:
                url = next_link

            # Construct parameters
            query_parameters = {}  # type: Dict[str, Any]
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('DiagnosticAnalysisCollection', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise models.DefaultErrorResponseException.from_response(response, self._deserialize)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_site_analyses_slot.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses'}

    async def get_site_analysis_slot(
        self,
        resource_group_name: str,
        site_name: str,
        diagnostic_category: str,
        analysis_name: str,
        slot: str,
        **kwargs
    ) -> "models.DiagnosticAnalysis":
        """Get Site Analysis.

        Get Site Analysis.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param site_name: Site Name.
        :type site_name: str
        :param diagnostic_category: Diagnostic Category.
        :type diagnostic_category: str
        :param analysis_name: Analysis Name.
        :type analysis_name: str
        :param slot: Slot - optional.
        :type slot: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DiagnosticAnalysis or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.DiagnosticAnalysis
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.DiagnosticAnalysis"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2018-02-01"

        # Construct URL
        url = self.get_site_analysis_slot.metadata['url']
        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+[^\.]$'),
            'siteName': self._serialize.url("site_name", site_name, 'str'),
            'diagnosticCategory': self._serialize.url("diagnostic_category", diagnostic_category, 'str'),
            'analysisName': self._serialize.url("analysis_name", analysis_name, 'str'),
            'slot': self._serialize.url("slot", slot, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.DefaultErrorResponseException.from_response(response, self._deserialize)

        deserialized = self._deserialize('DiagnosticAnalysis', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    get_site_analysis_slot.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses/{analysisName}'}

    async def execute_site_analysis_slot(
        self,
        resource_group_name: str,
        site_name: str,
        diagnostic_category: str,
        analysis_name: str,
        slot: str,
        start_time: Optional[datetime.datetime] = None,
        end_time: Optional[datetime.datetime] = None,
        time_grain: Optional[str] = None,
        **kwargs
    ) -> "models.DiagnosticAnalysis":
        """Execute Analysis.

        Execute Analysis.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param site_name: Site Name.
        :type site_name: str
        :param diagnostic_category: Category Name.
        :type diagnostic_category: str
        :param analysis_name: Analysis Resource Name.
        :type analysis_name: str
        :param slot: Slot Name.
        :type slot: str
        :param start_time: Start Time.
        :type start_time: ~datetime.datetime
        :param end_time: End Time.
        :type end_time: ~datetime.datetime
        :param time_grain: Time Grain.
        :type time_grain: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DiagnosticAnalysis or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.DiagnosticAnalysis
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.DiagnosticAnalysis"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2018-02-01"

        # Construct URL
        url = self.execute_site_analysis_slot.metadata['url']
        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+[^\.]$'),
            'siteName': self._serialize.url("site_name", site_name, 'str'),
            'diagnosticCategory': self._serialize.url("diagnostic_category", diagnostic_category, 'str'),
            'analysisName': self._serialize.url("analysis_name", analysis_name, 'str'),
            'slot': self._serialize.url("slot", slot, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if start_time is not None:
            query_parameters['startTime'] = self._serialize.query("start_time", start_time, 'iso-8601')
        if end_time is not None:
            query_parameters['endTime'] = self._serialize.query("end_time", end_time, 'iso-8601')
        if time_grain is not None:
            query_parameters['timeGrain'] = self._serialize.query("time_grain", time_grain, 'str', pattern=r'PT[1-9][0-9]+[SMH]')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.DefaultErrorResponseException.from_response(response, self._deserialize)

        deserialized = self._deserialize('DiagnosticAnalysis', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    execute_site_analysis_slot.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses/{analysisName}/execute'}

    def list_site_detectors_slot(
        self,
        resource_group_name: str,
        site_name: str,
        diagnostic_category: str,
        slot: str,
        **kwargs
    ) -> "models.DiagnosticDetectorCollection":
        """Get Detectors.

        Get Detectors.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param site_name: Site Name.
        :type site_name: str
        :param diagnostic_category: Diagnostic Category.
        :type diagnostic_category: str
        :param slot: Slot Name.
        :type slot: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DiagnosticDetectorCollection or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.DiagnosticDetectorCollection
        :raises: ~azure.mgmt.web.v2018_02_01.models.DefaultErrorResponseException:
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.DiagnosticDetectorCollection"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2018-02-01"

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.list_site_detectors_slot.metadata['url']
                path_format_arguments = {
                    'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+[^\.]$'),
                    'siteName': self._serialize.url("site_name", site_name, 'str'),
                    'diagnosticCategory': self._serialize.url("diagnostic_category", diagnostic_category, 'str'),
                    'slot': self._serialize.url("slot", slot, 'str'),
                    'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
            else:
                url = next_link

            # Construct parameters
            query_parameters = {}  # type: Dict[str, Any]
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('DiagnosticDetectorCollection', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise models.DefaultErrorResponseException.from_response(response, self._deserialize)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_site_detectors_slot.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors'}

    def get_site_detector_slot(
        self,
        resource_group_name: str,
        site_name: str,
        diagnostic_category: str,
        detector_name: str,
        slot: str,
        **kwargs
    ) -> "models.DiagnosticDetectorCollection":
        """Get Detector.

        Get Detector.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param site_name: Site Name.
        :type site_name: str
        :param diagnostic_category: Diagnostic Category.
        :type diagnostic_category: str
        :param detector_name: Detector Name.
        :type detector_name: str
        :param slot: Slot Name.
        :type slot: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DiagnosticDetectorCollection or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.DiagnosticDetectorCollection
        :raises: ~azure.mgmt.web.v2018_02_01.models.DefaultErrorResponseException:
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.DiagnosticDetectorCollection"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2018-02-01"

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.get_site_detector_slot.metadata['url']
                path_format_arguments = {
                    'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+[^\.]$'),
                    'siteName': self._serialize.url("site_name", site_name, 'str'),
                    'diagnosticCategory': self._serialize.url("diagnostic_category", diagnostic_category, 'str'),
                    'detectorName': self._serialize.url("detector_name", detector_name, 'str'),
                    'slot': self._serialize.url("slot", slot, 'str'),
                    'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
            else:
                url = next_link

            # Construct parameters
            query_parameters = {}  # type: Dict[str, Any]
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('DiagnosticDetectorCollection', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise models.DefaultErrorResponseException.from_response(response, self._deserialize)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    get_site_detector_slot.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors/{detectorName}'}

    async def execute_site_detector_slot(
        self,
        resource_group_name: str,
        site_name: str,
        detector_name: str,
        diagnostic_category: str,
        slot: str,
        start_time: Optional[datetime.datetime] = None,
        end_time: Optional[datetime.datetime] = None,
        time_grain: Optional[str] = None,
        **kwargs
    ) -> "models.DiagnosticDetectorResponse":
        """Execute Detector.

        Execute Detector.

        :param resource_group_name: Name of the resource group to which the resource belongs.
        :type resource_group_name: str
        :param site_name: Site Name.
        :type site_name: str
        :param detector_name: Detector Resource Name.
        :type detector_name: str
        :param diagnostic_category: Category Name.
        :type diagnostic_category: str
        :param slot: Slot Name.
        :type slot: str
        :param start_time: Start Time.
        :type start_time: ~datetime.datetime
        :param end_time: End Time.
        :type end_time: ~datetime.datetime
        :param time_grain: Time Grain.
        :type time_grain: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DiagnosticDetectorResponse or the result of cls(response)
        :rtype: ~azure.mgmt.web.v2018_02_01.models.DiagnosticDetectorResponse
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.DiagnosticDetectorResponse"]
        error_map = kwargs.pop('error_map', {})
        api_version = "2018-02-01"

        # Construct URL
        url = self.execute_site_detector_slot.metadata['url']
        path_format_arguments = {
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+[^\.]$'),
            'siteName': self._serialize.url("site_name", site_name, 'str'),
            'detectorName': self._serialize.url("detector_name", detector_name, 'str'),
            'diagnosticCategory': self._serialize.url("diagnostic_category", diagnostic_category, 'str'),
            'slot': self._serialize.url("slot", slot, 'str'),
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if start_time is not None:
            query_parameters['startTime'] = self._serialize.query("start_time", start_time, 'iso-8601')
        if end_time is not None:
            query_parameters['endTime'] = self._serialize.query("end_time", end_time, 'iso-8601')
        if time_grain is not None:
            query_parameters['timeGrain'] = self._serialize.query("time_grain", time_grain, 'str', pattern=r'PT[1-9][0-9]+[SMH]')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise models.DefaultErrorResponseException.from_response(response, self._deserialize)

        deserialized = self._deserialize('DiagnosticDetectorResponse', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    execute_site_detector_slot.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors/{detectorName}/execute'}
