# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum

class KeyVaultSecretStatus(str, Enum):
    """Status of the Key Vault secret.
    """

    initialized = "Initialized"
    waiting_on_certificate_order = "WaitingOnCertificateOrder"
    succeeded = "Succeeded"
    certificate_order_failed = "CertificateOrderFailed"
    operation_not_permitted_on_key_vault = "OperationNotPermittedOnKeyVault"
    azure_service_unauthorized_to_access_key_vault = "AzureServiceUnauthorizedToAccessKeyVault"
    key_vault_does_not_exist = "KeyVaultDoesNotExist"
    key_vault_secret_does_not_exist = "KeyVaultSecretDoesNotExist"
    unknown_error = "UnknownError"
    external_private_key = "ExternalPrivateKey"
    unknown = "Unknown"

class RenderingType(str, Enum):
    """Rendering Type
    """

    no_graph = "NoGraph"
    table = "Table"
    time_series = "TimeSeries"
    time_series_per_instance = "TimeSeriesPerInstance"

class SolutionType(str, Enum):
    """Type of Solution
    """

    quick_solution = "QuickSolution"
    deep_investigation = "DeepInvestigation"
    best_practices = "BestPractices"

class IssueType(str, Enum):
    """Represents the type of the Detector
    """

    service_incident = "ServiceIncident"
    app_deployment = "AppDeployment"
    app_crash = "AppCrash"
    runtime_issue_detected = "RuntimeIssueDetected"
    ase_deployment = "AseDeployment"
    user_issue = "UserIssue"
    platform_issue = "PlatformIssue"
    other = "Other"

class ResourceScopeType(str, Enum):
    """Name of a resource type this recommendation applies, e.g. Subscription, ServerFarm, Site.
    """

    server_farm = "ServerFarm"
    subscription = "Subscription"
    web_site = "WebSite"

class NotificationLevel(str, Enum):
    """Level indicating how critical this recommendation can impact.
    """

    critical = "Critical"
    warning = "Warning"
    information = "Information"
    non_urgent_suggestion = "NonUrgentSuggestion"

class Channels(str, Enum):
    """List of channels that this recommendation can apply.
    """

    notification = "Notification"
    api = "Api"
    email = "Email"
    webhook = "Webhook"
    all = "All"

class ComputeModeOptions(str, Enum):
    """Shared/dedicated workers.
    """

    shared = "Shared"
    dedicated = "Dedicated"
    dynamic = "Dynamic"

class WorkerSizeOptions(str, Enum):
    """Size of the machines.
    """

    default = "Default"
    small = "Small"
    medium = "Medium"
    large = "Large"
    d1 = "D1"
    d2 = "D2"
    d3 = "D3"

class AccessControlEntryAction(str, Enum):
    """Action object.
    """

    permit = "Permit"
    deny = "Deny"

class ProvisioningState(str, Enum):
    """Provisioning state of the App Service Environment.
    """

    succeeded = "Succeeded"
    failed = "Failed"
    canceled = "Canceled"
    in_progress = "InProgress"
    deleting = "Deleting"

class HostingEnvironmentStatus(str, Enum):
    """Current status of the App Service Environment.
    """

    preparing = "Preparing"
    ready = "Ready"
    scaling = "Scaling"
    deleting = "Deleting"

class InternalLoadBalancingMode(str, Enum):
    """Specifies which endpoints to serve internally in the Virtual Network for the App Service
    Environment.
    """

    none = "None"
    web = "Web"
    publishing = "Publishing"

class AppServicePlanRestrictions(str, Enum):
    """App Service plans this offer is restricted to.
    """

    none = "None"
    free = "Free"
    shared = "Shared"
    basic = "Basic"
    standard = "Standard"
    premium = "Premium"

class StatusOptions(str, Enum):
    """App Service plan status.
    """

    ready = "Ready"
    pending = "Pending"
    creating = "Creating"

class SslState(str, Enum):
    """SSL type.
    """

    disabled = "Disabled"
    sni_enabled = "SniEnabled"
    ip_based_enabled = "IpBasedEnabled"

class HostType(str, Enum):
    """Indicates whether the hostname is a standard or repository hostname.
    """

    standard = "Standard"
    repository = "Repository"

class ConnectionStringType(str, Enum):
    """Type of database.
    """

    my_sql = "MySql"
    sql_server = "SQLServer"
    sql_azure = "SQLAzure"
    custom = "Custom"
    notification_hub = "NotificationHub"
    service_bus = "ServiceBus"
    event_hub = "EventHub"
    api_hub = "ApiHub"
    doc_db = "DocDb"
    redis_cache = "RedisCache"
    postgre_sql = "PostgreSQL"

class RouteType(str, Enum):
    """The type of route this is:
    DEFAULT - By default, every app has routes to the local address ranges specified by RFC1918
    INHERITED - Routes inherited from the real Virtual Network routes
    STATIC - Static route set on the app only
    
    These values will be used for syncing an app's routes with those from a Virtual Network.
    """

    default = "DEFAULT"
    inherited = "INHERITED"
    static = "STATIC"

class UsageState(str, Enum):
    """State indicating whether the app has exceeded its quota usage. Read-only.
    """

    normal = "Normal"
    exceeded = "Exceeded"

class SiteAvailabilityState(str, Enum):
    """Management information availability state for the app.
    """

    normal = "Normal"
    limited = "Limited"
    disaster_recovery_mode = "DisasterRecoveryMode"

class ScmType(str, Enum):
    """SCM type.
    """

    none = "None"
    dropbox = "Dropbox"
    tfs = "Tfs"
    local_git = "LocalGit"
    git_hub = "GitHub"
    code_plex_git = "CodePlexGit"
    code_plex_hg = "CodePlexHg"
    bitbucket_git = "BitbucketGit"
    bitbucket_hg = "BitbucketHg"
    external_git = "ExternalGit"
    external_hg = "ExternalHg"
    one_drive = "OneDrive"
    vso = "VSO"

class ManagedPipelineMode(str, Enum):
    """Managed pipeline mode.
    """

    integrated = "Integrated"
    classic = "Classic"

class SiteLoadBalancing(str, Enum):
    """Site load balancing.
    """

    weighted_round_robin = "WeightedRoundRobin"
    least_requests = "LeastRequests"
    least_response_time = "LeastResponseTime"
    weighted_total_traffic = "WeightedTotalTraffic"
    request_hash = "RequestHash"

class AutoHealActionType(str, Enum):
    """Predefined action to be taken.
    """

    recycle = "Recycle"
    log_event = "LogEvent"
    custom_action = "CustomAction"

class SupportedTlsVersions(str, Enum):
    """MinTlsVersion: configures the minimum version of TLS required for SSL requests
    """

    one0 = "1.0"
    one1 = "1.1"
    one2 = "1.2"

class Enum0(str, Enum):

    windows = "Windows"
    linux = "Linux"

class Enum1(str, Enum):

    windows = "Windows"
    linux = "Linux"

class CheckNameResourceTypes(str, Enum):
    """Resource type used for verification.
    """

    site = "Site"
    slot = "Slot"
    hosting_environment = "HostingEnvironment"
    publishing_user = "PublishingUser"
    microsoft_web_sites = "Microsoft.Web/sites"
    microsoft_web_sites_slots = "Microsoft.Web/sites/slots"
    microsoft_web_hosting_environments = "Microsoft.Web/hostingEnvironments"
    microsoft_web_publishing_users = "Microsoft.Web/publishingUsers"

class InAvailabilityReasonType(str, Enum):
    """:code:`<code>Invalid</code>` indicates the name provided does not match Azure App Service
    naming requirements. :code:`<code>AlreadyExists</code>` indicates that the name is already in
    use and is therefore unavailable.
    """

    invalid = "Invalid"
    already_exists = "AlreadyExists"

class SkuName(str, Enum):

    free = "Free"
    shared = "Shared"
    basic = "Basic"
    standard = "Standard"
    premium = "Premium"
    premium_v2 = "PremiumV2"
    dynamic = "Dynamic"
    isolated = "Isolated"

class ValidateResourceTypes(str, Enum):
    """Resource type used for verification.
    """

    server_farm = "ServerFarm"
    site = "Site"

class OperationStatus(str, Enum):
    """The current status of the operation.
    """

    in_progress = "InProgress"
    failed = "Failed"
    succeeded = "Succeeded"
    timed_out = "TimedOut"
    created = "Created"
