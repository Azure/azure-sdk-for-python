# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core import AsyncPipelineClient
from msrest import Deserializer, Serializer

from ._configuration_async import GraphRbacManagementClientConfiguration
from .operations_async import SignedInUserOperations
from .operations_async import ApplicationsOperations
from .operations_async import DeletedApplicationsOperations
from .operations_async import GroupsOperations
from .operations_async import ServicePrincipalsOperations
from .operations_async import UsersOperations
from .operations_async import ObjectsOperations
from .operations_async import DomainsOperations
from .operations_async import OAuth2PermissionGrantOperations
from .. import models


class GraphRbacManagementClient(object):
    """The Graph RBAC Management Client

    :ivar signed_in_user: SignedInUserOperations operations
    :vartype signed_in_user: azure.graphrbac.aio.operations_async.SignedInUserOperations
    :ivar applications: ApplicationsOperations operations
    :vartype applications: azure.graphrbac.aio.operations_async.ApplicationsOperations
    :ivar deleted_applications: DeletedApplicationsOperations operations
    :vartype deleted_applications: azure.graphrbac.aio.operations_async.DeletedApplicationsOperations
    :ivar groups: GroupsOperations operations
    :vartype groups: azure.graphrbac.aio.operations_async.GroupsOperations
    :ivar service_principals: ServicePrincipalsOperations operations
    :vartype service_principals: azure.graphrbac.aio.operations_async.ServicePrincipalsOperations
    :ivar users: UsersOperations operations
    :vartype users: azure.graphrbac.aio.operations_async.UsersOperations
    :ivar objects: ObjectsOperations operations
    :vartype objects: azure.graphrbac.aio.operations_async.ObjectsOperations
    :ivar domains: DomainsOperations operations
    :vartype domains: azure.graphrbac.aio.operations_async.DomainsOperations
    :ivar oauth2_permission_grant: OAuth2PermissionGrantOperations operations
    :vartype oauth2_permission_grant: azure.graphrbac.aio.operations_async.OAuth2PermissionGrantOperations
    :param tenant_id: The tenant ID.
    :type tenant_id: str
    :param str base_url: Service URL
    """

    def __init__(self, tenant_id, base_url=None, **kwargs):
        if not base_url:
            base_url = 'https://graph.windows.net'
        self._config = GraphRbacManagementClientConfiguration(tenant_id, **kwargs)
        self._client = AsyncPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.signed_in_user = SignedInUserOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.applications = ApplicationsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.deleted_applications = DeletedApplicationsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.groups = GroupsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.service_principals = ServicePrincipalsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.users = UsersOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.objects = ObjectsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.domains = DomainsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.oauth2_permission_grant = OAuth2PermissionGrantOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def close(self):
        await self._client.close()

    async def __aenter__(self):
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details):
        await self._client.__aexit__(*exc_details)
