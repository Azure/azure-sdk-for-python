# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from ._models_py3 import Association
from ._models_py3 import AssociationsList
from ._models_py3 import CustomRPActionRouteDefinition
from ._models_py3 import CustomRPManifest
from ._models_py3 import CustomRPResourceTypeRouteDefinition
from ._models_py3 import CustomRPRouteDefinition
from ._models_py3 import CustomRPValidations
from ._models_py3 import ErrorDefinition
from ._models_py3 import ErrorResponse
from ._models_py3 import ListByCustomRPManifest
from ._models_py3 import Resource
from ._models_py3 import ResourceProviderOperation
from ._models_py3 import ResourceProviderOperationDisplay
from ._models_py3 import ResourceProviderOperationList
from ._models_py3 import ResourceProvidersUpdate

from ._customproviders_enums import ActionRouting
from ._customproviders_enums import ProvisioningState
from ._customproviders_enums import ResourceTypeRouting
from ._customproviders_enums import ValidationType
from ._patch import __all__ as _patch_all
from ._patch import *  # type: ignore # pylint: disable=unused-wildcard-import
from ._patch import patch_sdk as _patch_sdk

__all__ = [
    "Association",
    "AssociationsList",
    "CustomRPActionRouteDefinition",
    "CustomRPManifest",
    "CustomRPResourceTypeRouteDefinition",
    "CustomRPRouteDefinition",
    "CustomRPValidations",
    "ErrorDefinition",
    "ErrorResponse",
    "ListByCustomRPManifest",
    "Resource",
    "ResourceProviderOperation",
    "ResourceProviderOperationDisplay",
    "ResourceProviderOperationList",
    "ResourceProvidersUpdate",
    "ActionRouting",
    "ProvisioningState",
    "ResourceTypeRouting",
    "ValidationType",
]
__all__.extend([p for p in _patch_all if p not in __all__])
_patch_sdk()
