# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.pipeline import ClientRawResponse

from .. import models


class AccountOperations(object):
    """AccountOperations operations.

    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    :ivar api_version: The API version to use for the request. Constant value: "2023-11-01.18.0".
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self.config = config
        self.api_version = "2023-11-01.18.0"

    def list_supported_images(
            self, account_list_supported_images_options=None, custom_headers=None, raw=False, **operation_config):
        """Lists all Virtual Machine Images supported by the Azure Batch service.

        :param account_list_supported_images_options: Additional parameters
         for the operation
        :type account_list_supported_images_options:
         ~batchservice.models.AccountListSupportedImagesOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: AccountListSupportedImagesResult or ClientRawResponse if
         raw=true
        :rtype: ~batchservice.models.AccountListSupportedImagesResult or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`BatchErrorException<batchservice.models.BatchErrorException>`
        """
        filter = None
        if account_list_supported_images_options is not None:
            filter = account_list_supported_images_options.filter
        max_results = None
        if account_list_supported_images_options is not None:
            max_results = account_list_supported_images_options.max_results
        timeout = None
        if account_list_supported_images_options is not None:
            timeout = account_list_supported_images_options.timeout
        client_request_id = None
        if account_list_supported_images_options is not None:
            client_request_id = account_list_supported_images_options.client_request_id
        return_client_request_id = None
        if account_list_supported_images_options is not None:
            return_client_request_id = account_list_supported_images_options.return_client_request_id
        ocp_date = None
        if account_list_supported_images_options is not None:
            ocp_date = account_list_supported_images_options.ocp_date

        # Construct URL
        url = self.list_supported_images.metadata['url']
        path_format_arguments = {
            'batchUrl': self._serialize.url("self.config.batch_url", self.config.batch_url, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str')
        if filter is not None:
            query_parameters['$filter'] = self._serialize.query("filter", filter, 'str')
        if max_results is not None:
            query_parameters['maxresults'] = self._serialize.query("max_results", max_results, 'int', maximum=1000, minimum=1)
        if timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", timeout, 'int')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)
        if client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", client_request_id, 'str')
        if return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", return_client_request_id, 'bool')
        if ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", ocp_date, 'rfc-1123')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.BatchErrorException(self._deserialize, response)

        header_dict = {}
        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('AccountListSupportedImagesResult', response)
            header_dict = {
                'client-request-id': 'str',
                'request-id': 'str',
                'ETag': 'str',
                'Last-Modified': 'rfc-1123',
            }

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            client_raw_response.add_headers(header_dict)
            return client_raw_response

        return deserialized
    list_supported_images.metadata = {'url': '/supportedimages'}

    def list_pool_node_counts(
            self, account_list_pool_node_counts_options=None, custom_headers=None, raw=False, **operation_config):
        """Gets the number of Compute Nodes in each state, grouped by Pool. Note
        that the numbers returned may not always be up to date. If you need
        exact node counts, use a list query.

        :param account_list_pool_node_counts_options: Additional parameters
         for the operation
        :type account_list_pool_node_counts_options:
         ~batchservice.models.AccountListPoolNodeCountsOptions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: PoolNodeCountsListResult or ClientRawResponse if raw=true
        :rtype: ~batchservice.models.PoolNodeCountsListResult or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`BatchErrorException<batchservice.models.BatchErrorException>`
        """
        filter = None
        if account_list_pool_node_counts_options is not None:
            filter = account_list_pool_node_counts_options.filter
        max_results = None
        if account_list_pool_node_counts_options is not None:
            max_results = account_list_pool_node_counts_options.max_results
        timeout = None
        if account_list_pool_node_counts_options is not None:
            timeout = account_list_pool_node_counts_options.timeout
        client_request_id = None
        if account_list_pool_node_counts_options is not None:
            client_request_id = account_list_pool_node_counts_options.client_request_id
        return_client_request_id = None
        if account_list_pool_node_counts_options is not None:
            return_client_request_id = account_list_pool_node_counts_options.return_client_request_id
        ocp_date = None
        if account_list_pool_node_counts_options is not None:
            ocp_date = account_list_pool_node_counts_options.ocp_date

        # Construct URL
        url = self.list_pool_node_counts.metadata['url']
        path_format_arguments = {
            'batchUrl': self._serialize.url("self.config.batch_url", self.config.batch_url, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str')
        if filter is not None:
            query_parameters['$filter'] = self._serialize.query("filter", filter, 'str')
        if max_results is not None:
            query_parameters['maxresults'] = self._serialize.query("max_results", max_results, 'int', maximum=10, minimum=1)
        if timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", timeout, 'int')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)
        if client_request_id is not None:
            header_parameters['client-request-id'] = self._serialize.header("client_request_id", client_request_id, 'str')
        if return_client_request_id is not None:
            header_parameters['return-client-request-id'] = self._serialize.header("return_client_request_id", return_client_request_id, 'bool')
        if ocp_date is not None:
            header_parameters['ocp-date'] = self._serialize.header("ocp_date", ocp_date, 'rfc-1123')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.BatchErrorException(self._deserialize, response)

        header_dict = {}
        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('PoolNodeCountsListResult', response)
            header_dict = {
                'client-request-id': 'str',
                'request-id': 'str',
            }

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            client_raw_response.add_headers(header_dict)
            return client_raw_response

        return deserialized
    list_pool_node_counts.metadata = {'url': '/nodecounts'}
