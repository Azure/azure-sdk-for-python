# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import pytest
from azure.mgmt.dashboard.aio import DashboardManagementClient

from devtools_testutils import AzureMgmtRecordedTestCase, RandomNameResourceGroupPreparer
from devtools_testutils.aio import recorded_by_proxy_async

AZURE_LOCATION = "eastus"


@pytest.mark.skip("you may need to update the auto-generated test case before run it")
class TestDashboardManagementGrafanaOperationsAsync(AzureMgmtRecordedTestCase):
    def setup_method(self, method):
        self.client = self.create_mgmt_client(DashboardManagementClient, is_async=True)

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_grafana_list(self, resource_group):
        response = self.client.grafana.list(
            api_version="2024-11-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_grafana_list_by_resource_group(self, resource_group):
        response = self.client.grafana.list_by_resource_group(
            resource_group_name=resource_group.name,
            api_version="2024-11-01-preview",
        )
        result = [r async for r in response]
        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_grafana_get(self, resource_group):
        response = await self.client.grafana.get(
            resource_group_name=resource_group.name,
            workspace_name="str",
            api_version="2024-11-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_grafana_begin_create(self, resource_group):
        response = await (
            await self.client.grafana.begin_create(
                resource_group_name=resource_group.name,
                workspace_name="str",
                request_body_parameters={
                    "id": "str",
                    "identity": {
                        "type": "str",
                        "principalId": "str",
                        "tenantId": "str",
                        "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                    },
                    "location": "str",
                    "name": "str",
                    "properties": {
                        "apiKey": "Disabled",
                        "autoGeneratedDomainNameLabelScope": "str",
                        "deterministicOutboundIP": "Disabled",
                        "endpoint": "str",
                        "enterpriseConfigurations": {"marketplaceAutoRenew": "str", "marketplacePlanId": "str"},
                        "grafanaConfigurations": {
                            "security": {"csrfAlwaysCheck": bool},
                            "smtp": {
                                "enabled": False,
                                "fromAddress": "str",
                                "fromName": "str",
                                "host": "str",
                                "password": "str",
                                "skipVerify": bool,
                                "startTLSPolicy": "str",
                                "user": "str",
                            },
                            "snapshots": {"externalEnabled": bool},
                            "unifiedAlertingScreenshots": {"captureEnabled": bool},
                            "users": {"editorsCanAdmin": bool, "viewersCanEdit": bool},
                        },
                        "grafanaIntegrations": {
                            "azureMonitorWorkspaceIntegrations": [{"azureMonitorWorkspaceResourceId": "str"}]
                        },
                        "grafanaMajorVersion": "str",
                        "grafanaPlugins": {"str": {"pluginId": "str"}},
                        "grafanaVersion": "str",
                        "outboundIPs": ["str"],
                        "privateEndpointConnections": [
                            {
                                "groupIds": ["str"],
                                "id": "str",
                                "name": "str",
                                "privateEndpoint": {"id": "str"},
                                "privateLinkServiceConnectionState": {
                                    "actionsRequired": "str",
                                    "description": "str",
                                    "status": "str",
                                },
                                "provisioningState": "str",
                                "systemData": {
                                    "createdAt": "2020-02-20 00:00:00",
                                    "createdBy": "str",
                                    "createdByType": "str",
                                    "lastModifiedAt": "2020-02-20 00:00:00",
                                    "lastModifiedBy": "str",
                                    "lastModifiedByType": "str",
                                },
                                "type": "str",
                            }
                        ],
                        "provisioningState": "str",
                        "publicNetworkAccess": "Enabled",
                        "zoneRedundancy": "Disabled",
                    },
                    "sku": {"name": "str"},
                    "systemData": {
                        "createdAt": "2020-02-20 00:00:00",
                        "createdBy": "str",
                        "createdByType": "str",
                        "lastModifiedAt": "2020-02-20 00:00:00",
                        "lastModifiedBy": "str",
                        "lastModifiedByType": "str",
                    },
                    "tags": {"str": "str"},
                    "type": "str",
                },
                api_version="2024-11-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_grafana_update(self, resource_group):
        response = await self.client.grafana.update(
            resource_group_name=resource_group.name,
            workspace_name="str",
            request_body_parameters={
                "identity": {
                    "type": "str",
                    "principalId": "str",
                    "tenantId": "str",
                    "userAssignedIdentities": {"str": {"clientId": "str", "principalId": "str"}},
                },
                "properties": {
                    "apiKey": "Disabled",
                    "deterministicOutboundIP": "Disabled",
                    "enterpriseConfigurations": {"marketplaceAutoRenew": "str", "marketplacePlanId": "str"},
                    "grafanaConfigurations": {
                        "security": {"csrfAlwaysCheck": bool},
                        "smtp": {
                            "enabled": False,
                            "fromAddress": "str",
                            "fromName": "str",
                            "host": "str",
                            "password": "str",
                            "skipVerify": bool,
                            "startTLSPolicy": "str",
                            "user": "str",
                        },
                        "snapshots": {"externalEnabled": bool},
                        "unifiedAlertingScreenshots": {"captureEnabled": bool},
                        "users": {"editorsCanAdmin": bool, "viewersCanEdit": bool},
                    },
                    "grafanaIntegrations": {
                        "azureMonitorWorkspaceIntegrations": [{"azureMonitorWorkspaceResourceId": "str"}]
                    },
                    "grafanaMajorVersion": "str",
                    "grafanaPlugins": {"str": {"pluginId": "str"}},
                    "publicNetworkAccess": "Enabled",
                    "zoneRedundancy": "Disabled",
                },
                "sku": {"name": "str"},
                "tags": {"str": "str"},
            },
            api_version="2024-11-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_grafana_begin_delete(self, resource_group):
        response = await (
            await self.client.grafana.begin_delete(
                resource_group_name=resource_group.name,
                workspace_name="str",
                api_version="2024-11-01-preview",
            )
        ).result()  # call '.result()' to poll until service return final result

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_grafana_check_enterprise_details(self, resource_group):
        response = await self.client.grafana.check_enterprise_details(
            resource_group_name=resource_group.name,
            workspace_name="str",
            api_version="2024-11-01-preview",
        )

        # please add some check logic here by yourself
        # ...

    @RandomNameResourceGroupPreparer(location=AZURE_LOCATION)
    @recorded_by_proxy_async
    async def test_grafana_fetch_available_plugins(self, resource_group):
        response = await self.client.grafana.fetch_available_plugins(
            resource_group_name=resource_group.name,
            workspace_name="str",
            api_version="2024-11-01-preview",
        )

        # please add some check logic here by yourself
        # ...
