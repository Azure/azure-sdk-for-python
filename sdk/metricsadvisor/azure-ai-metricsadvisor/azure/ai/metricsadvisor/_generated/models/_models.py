# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import TYPE_CHECKING

from azure.core.exceptions import HttpResponseError
import msrest.serialization

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from ..._patch import AlertResultCustomization, AlertResultListCustomization, AlertSnoozeConditionCustomization, AlertingResultQueryCustomization, AnomalyAlertingConfigurationCustomization, AnomalyAlertingConfigurationListCustomization, AnomalyAlertingConfigurationPatchCustomization, AnomalyDetectionConfigurationCustomization, AnomalyDetectionConfigurationListCustomization, AnomalyDetectionConfigurationPatchCustomization, AnomalyDimensionListCustomization, AnomalyDimensionQueryCustomization, AnomalyFeedbackCustomization, AnomalyFeedbackValueCustomization, AnomalyPropertyCustomization, AnomalyResultCustomization, AnomalyResultListCustomization, AzureApplicationInsightsDataFeedCustomization, AzureApplicationInsightsDataFeedPatchCustomization, AzureApplicationInsightsParameterCustomization, AzureApplicationInsightsParameterPatchCustomization, AzureBlobDataFeedCustomization, AzureBlobDataFeedPatchCustomization, AzureBlobParameterCustomization, AzureBlobParameterPatchCustomization, AzureCosmosDBDataFeedCustomization, AzureCosmosDBDataFeedPatchCustomization, AzureCosmosDBParameterCustomization, AzureCosmosDBParameterPatchCustomization, AzureDataExplorerDataFeedCustomization, AzureDataExplorerDataFeedPatchCustomization, AzureDataLakeStorageGen2DataFeedCustomization, AzureDataLakeStorageGen2DataFeedPatchCustomization, AzureDataLakeStorageGen2ParameterCustomization, AzureDataLakeStorageGen2ParameterPatchCustomization, AzureEventHubsDataFeedCustomization, AzureEventHubsDataFeedPatchCustomization, AzureEventHubsParameterCustomization, AzureEventHubsParameterPatchCustomization, AzureLogAnalyticsDataFeedCustomization, AzureLogAnalyticsDataFeedPatchCustomization, AzureLogAnalyticsParameterCustomization, AzureLogAnalyticsParameterPatchCustomization, AzureSQLConnectionStringCredentialCustomization, AzureSQLConnectionStringCredentialPatchCustomization, AzureSQLConnectionStringParamCustomization, AzureSQLConnectionStringParamPatchCustomization, AzureTableDataFeedCustomization, AzureTableDataFeedPatchCustomization, AzureTableParameterCustomization, AzureTableParameterPatchCustomization, ChangePointFeedbackCustomization, ChangePointFeedbackValueCustomization, ChangeThresholdConditionCustomization, ChangeThresholdConditionPatchCustomization, CommentFeedbackCustomization, CommentFeedbackValueCustomization, DataFeedDetailCustomization, DataFeedDetailPatchCustomization, DataFeedIngestionProgressCustomization, DataFeedListCustomization, DataLakeGen2SharedKeyCredentialCustomization, DataLakeGen2SharedKeyCredentialPatchCustomization, DataLakeGen2SharedKeyParamCustomization, DataLakeGen2SharedKeyParamPatchCustomization, DataSourceCredentialCustomization, DataSourceCredentialListCustomization, DataSourceCredentialPatchCustomization, DetectionAnomalyFilterConditionCustomization, DetectionAnomalyResultQueryCustomization, DetectionIncidentFilterConditionCustomization, DetectionIncidentResultQueryCustomization, DetectionSeriesQueryCustomization, DimensionCustomization, DimensionGroupConfigurationCustomization, DimensionGroupIdentityCustomization, EmailHookInfoCustomization, EmailHookInfoPatchCustomization, EmailHookParameterCustomization, EmailHookParameterPatchCustomization, EnrichmentStatusCustomization, EnrichmentStatusListCustomization, EnrichmentStatusQueryOptionCustomization, ErrorCodeCustomization, FeedbackDimensionFilterCustomization, HardThresholdConditionCustomization, HardThresholdConditionPatchCustomization, HookInfoCustomization, HookInfoPatchCustomization, HookListCustomization, IncidentPropertyCustomization, IncidentResultCustomization, IncidentResultListCustomization, InfluxDBDataFeedCustomization, InfluxDBDataFeedPatchCustomization, InfluxDBParameterCustomization, InfluxDBParameterPatchCustomization, IngestionProgressResetOptionsCustomization, IngestionStatusCustomization, IngestionStatusListCustomization, IngestionStatusQueryOptionsCustomization, MetricAlertingConfigurationCustomization, MetricCustomization, MetricDataItemCustomization, MetricDataListCustomization, MetricDataQueryOptionsCustomization, MetricDimensionListCustomization, MetricDimensionQueryOptionsCustomization, MetricFeedbackCustomization, MetricFeedbackFilterCustomization, MetricFeedbackListCustomization, MetricSeriesItemCustomization, MetricSeriesListCustomization, MetricSeriesQueryOptionsCustomization, MongoDBDataFeedCustomization, MongoDBDataFeedPatchCustomization, MongoDBParameterCustomization, MongoDBParameterPatchCustomization, MySqlDataFeedCustomization, MySqlDataFeedPatchCustomization, PeriodFeedbackCustomization, PeriodFeedbackValueCustomization, PostgreSqlDataFeedCustomization, PostgreSqlDataFeedPatchCustomization, RootCauseCustomization, RootCauseListCustomization, SQLServerDataFeedCustomization, SQLServerDataFeedPatchCustomization, SQLSourceParameterPatchCustomization, SeriesConfigurationCustomization, SeriesIdentityCustomization, SeriesResultCustomization, SeriesResultListCustomization, ServicePrincipalCredentialCustomization, ServicePrincipalCredentialPatchCustomization, ServicePrincipalInKVCredentialCustomization, ServicePrincipalInKVCredentialPatchCustomization, ServicePrincipalInKVParamCustomization, ServicePrincipalInKVParamPatchCustomization, ServicePrincipalParamCustomization, ServicePrincipalParamPatchCustomization, SeverityConditionCustomization, SeverityFilterConditionCustomization, SmartDetectionConditionCustomization, SmartDetectionConditionPatchCustomization, SqlSourceParameterCustomization, SuppressConditionCustomization, SuppressConditionPatchCustomization, TopNGroupScopeCustomization, UsageStatsCustomization, ValueConditionCustomization, WebhookHookInfoCustomization, WebhookHookInfoPatchCustomization, WebhookHookParameterCustomization, WebhookHookParameterPatchCustomization, WholeMetricConfigurationCustomization, WholeMetricConfigurationPatchCustomization
else:
    try:
        from .._patch import AlertingResultQueryCustomization
    except ImportError:
        class AlertingResultQueryCustomization(object):
            pass
    try:
        from .._patch import AlertResultCustomization
    except ImportError:
        class AlertResultCustomization(object):
            pass
    try:
        from .._patch import AlertResultListCustomization
    except ImportError:
        class AlertResultListCustomization(object):
            pass
    try:
        from .._patch import AlertSnoozeConditionCustomization
    except ImportError:
        class AlertSnoozeConditionCustomization(object):
            pass
    try:
        from .._patch import AnomalyAlertingConfigurationCustomization
    except ImportError:
        class AnomalyAlertingConfigurationCustomization(object):
            pass
    try:
        from .._patch import AnomalyAlertingConfigurationListCustomization
    except ImportError:
        class AnomalyAlertingConfigurationListCustomization(object):
            pass
    try:
        from .._patch import AnomalyAlertingConfigurationPatchCustomization
    except ImportError:
        class AnomalyAlertingConfigurationPatchCustomization(object):
            pass
    try:
        from .._patch import AnomalyDetectionConfigurationCustomization
    except ImportError:
        class AnomalyDetectionConfigurationCustomization(object):
            pass
    try:
        from .._patch import AnomalyDetectionConfigurationListCustomization
    except ImportError:
        class AnomalyDetectionConfigurationListCustomization(object):
            pass
    try:
        from .._patch import AnomalyDetectionConfigurationPatchCustomization
    except ImportError:
        class AnomalyDetectionConfigurationPatchCustomization(object):
            pass
    try:
        from .._patch import AnomalyDimensionListCustomization
    except ImportError:
        class AnomalyDimensionListCustomization(object):
            pass
    try:
        from .._patch import AnomalyDimensionQueryCustomization
    except ImportError:
        class AnomalyDimensionQueryCustomization(object):
            pass
    try:
        from .._patch import MetricFeedbackCustomization
    except ImportError:
        class MetricFeedbackCustomization(object):
            pass
    try:
        from .._patch import AnomalyFeedbackCustomization
    except ImportError:
        class AnomalyFeedbackCustomization(object):
            pass
    try:
        from .._patch import AnomalyFeedbackValueCustomization
    except ImportError:
        class AnomalyFeedbackValueCustomization(object):
            pass
    try:
        from .._patch import AnomalyPropertyCustomization
    except ImportError:
        class AnomalyPropertyCustomization(object):
            pass
    try:
        from .._patch import AnomalyResultCustomization
    except ImportError:
        class AnomalyResultCustomization(object):
            pass
    try:
        from .._patch import AnomalyResultListCustomization
    except ImportError:
        class AnomalyResultListCustomization(object):
            pass
    try:
        from .._patch import DataFeedDetailCustomization
    except ImportError:
        class DataFeedDetailCustomization(object):
            pass
    try:
        from .._patch import AzureApplicationInsightsDataFeedCustomization
    except ImportError:
        class AzureApplicationInsightsDataFeedCustomization(object):
            pass
    try:
        from .._patch import DataFeedDetailPatchCustomization
    except ImportError:
        class DataFeedDetailPatchCustomization(object):
            pass
    try:
        from .._patch import AzureApplicationInsightsDataFeedPatchCustomization
    except ImportError:
        class AzureApplicationInsightsDataFeedPatchCustomization(object):
            pass
    try:
        from .._patch import AzureApplicationInsightsParameterCustomization
    except ImportError:
        class AzureApplicationInsightsParameterCustomization(object):
            pass
    try:
        from .._patch import AzureApplicationInsightsParameterPatchCustomization
    except ImportError:
        class AzureApplicationInsightsParameterPatchCustomization(object):
            pass
    try:
        from .._patch import AzureBlobDataFeedCustomization
    except ImportError:
        class AzureBlobDataFeedCustomization(object):
            pass
    try:
        from .._patch import AzureBlobDataFeedPatchCustomization
    except ImportError:
        class AzureBlobDataFeedPatchCustomization(object):
            pass
    try:
        from .._patch import AzureBlobParameterCustomization
    except ImportError:
        class AzureBlobParameterCustomization(object):
            pass
    try:
        from .._patch import AzureBlobParameterPatchCustomization
    except ImportError:
        class AzureBlobParameterPatchCustomization(object):
            pass
    try:
        from .._patch import AzureCosmosDBDataFeedCustomization
    except ImportError:
        class AzureCosmosDBDataFeedCustomization(object):
            pass
    try:
        from .._patch import AzureCosmosDBDataFeedPatchCustomization
    except ImportError:
        class AzureCosmosDBDataFeedPatchCustomization(object):
            pass
    try:
        from .._patch import AzureCosmosDBParameterCustomization
    except ImportError:
        class AzureCosmosDBParameterCustomization(object):
            pass
    try:
        from .._patch import AzureCosmosDBParameterPatchCustomization
    except ImportError:
        class AzureCosmosDBParameterPatchCustomization(object):
            pass
    try:
        from .._patch import AzureDataExplorerDataFeedCustomization
    except ImportError:
        class AzureDataExplorerDataFeedCustomization(object):
            pass
    try:
        from .._patch import AzureDataExplorerDataFeedPatchCustomization
    except ImportError:
        class AzureDataExplorerDataFeedPatchCustomization(object):
            pass
    try:
        from .._patch import AzureDataLakeStorageGen2DataFeedCustomization
    except ImportError:
        class AzureDataLakeStorageGen2DataFeedCustomization(object):
            pass
    try:
        from .._patch import AzureDataLakeStorageGen2DataFeedPatchCustomization
    except ImportError:
        class AzureDataLakeStorageGen2DataFeedPatchCustomization(object):
            pass
    try:
        from .._patch import AzureDataLakeStorageGen2ParameterCustomization
    except ImportError:
        class AzureDataLakeStorageGen2ParameterCustomization(object):
            pass
    try:
        from .._patch import AzureDataLakeStorageGen2ParameterPatchCustomization
    except ImportError:
        class AzureDataLakeStorageGen2ParameterPatchCustomization(object):
            pass
    try:
        from .._patch import AzureEventHubsDataFeedCustomization
    except ImportError:
        class AzureEventHubsDataFeedCustomization(object):
            pass
    try:
        from .._patch import AzureEventHubsDataFeedPatchCustomization
    except ImportError:
        class AzureEventHubsDataFeedPatchCustomization(object):
            pass
    try:
        from .._patch import AzureEventHubsParameterCustomization
    except ImportError:
        class AzureEventHubsParameterCustomization(object):
            pass
    try:
        from .._patch import AzureEventHubsParameterPatchCustomization
    except ImportError:
        class AzureEventHubsParameterPatchCustomization(object):
            pass
    try:
        from .._patch import AzureLogAnalyticsDataFeedCustomization
    except ImportError:
        class AzureLogAnalyticsDataFeedCustomization(object):
            pass
    try:
        from .._patch import AzureLogAnalyticsDataFeedPatchCustomization
    except ImportError:
        class AzureLogAnalyticsDataFeedPatchCustomization(object):
            pass
    try:
        from .._patch import AzureLogAnalyticsParameterCustomization
    except ImportError:
        class AzureLogAnalyticsParameterCustomization(object):
            pass
    try:
        from .._patch import AzureLogAnalyticsParameterPatchCustomization
    except ImportError:
        class AzureLogAnalyticsParameterPatchCustomization(object):
            pass
    try:
        from .._patch import DataSourceCredentialCustomization
    except ImportError:
        class DataSourceCredentialCustomization(object):
            pass
    try:
        from .._patch import AzureSQLConnectionStringCredentialCustomization
    except ImportError:
        class AzureSQLConnectionStringCredentialCustomization(object):
            pass
    try:
        from .._patch import DataSourceCredentialPatchCustomization
    except ImportError:
        class DataSourceCredentialPatchCustomization(object):
            pass
    try:
        from .._patch import AzureSQLConnectionStringCredentialPatchCustomization
    except ImportError:
        class AzureSQLConnectionStringCredentialPatchCustomization(object):
            pass
    try:
        from .._patch import AzureSQLConnectionStringParamCustomization
    except ImportError:
        class AzureSQLConnectionStringParamCustomization(object):
            pass
    try:
        from .._patch import AzureSQLConnectionStringParamPatchCustomization
    except ImportError:
        class AzureSQLConnectionStringParamPatchCustomization(object):
            pass
    try:
        from .._patch import AzureTableDataFeedCustomization
    except ImportError:
        class AzureTableDataFeedCustomization(object):
            pass
    try:
        from .._patch import AzureTableDataFeedPatchCustomization
    except ImportError:
        class AzureTableDataFeedPatchCustomization(object):
            pass
    try:
        from .._patch import AzureTableParameterCustomization
    except ImportError:
        class AzureTableParameterCustomization(object):
            pass
    try:
        from .._patch import AzureTableParameterPatchCustomization
    except ImportError:
        class AzureTableParameterPatchCustomization(object):
            pass
    try:
        from .._patch import ChangePointFeedbackCustomization
    except ImportError:
        class ChangePointFeedbackCustomization(object):
            pass
    try:
        from .._patch import ChangePointFeedbackValueCustomization
    except ImportError:
        class ChangePointFeedbackValueCustomization(object):
            pass
    try:
        from .._patch import ChangeThresholdConditionCustomization
    except ImportError:
        class ChangeThresholdConditionCustomization(object):
            pass
    try:
        from .._patch import ChangeThresholdConditionPatchCustomization
    except ImportError:
        class ChangeThresholdConditionPatchCustomization(object):
            pass
    try:
        from .._patch import CommentFeedbackCustomization
    except ImportError:
        class CommentFeedbackCustomization(object):
            pass
    try:
        from .._patch import CommentFeedbackValueCustomization
    except ImportError:
        class CommentFeedbackValueCustomization(object):
            pass
    try:
        from .._patch import DataFeedIngestionProgressCustomization
    except ImportError:
        class DataFeedIngestionProgressCustomization(object):
            pass
    try:
        from .._patch import DataFeedListCustomization
    except ImportError:
        class DataFeedListCustomization(object):
            pass
    try:
        from .._patch import DataLakeGen2SharedKeyCredentialCustomization
    except ImportError:
        class DataLakeGen2SharedKeyCredentialCustomization(object):
            pass
    try:
        from .._patch import DataLakeGen2SharedKeyCredentialPatchCustomization
    except ImportError:
        class DataLakeGen2SharedKeyCredentialPatchCustomization(object):
            pass
    try:
        from .._patch import DataLakeGen2SharedKeyParamCustomization
    except ImportError:
        class DataLakeGen2SharedKeyParamCustomization(object):
            pass
    try:
        from .._patch import DataLakeGen2SharedKeyParamPatchCustomization
    except ImportError:
        class DataLakeGen2SharedKeyParamPatchCustomization(object):
            pass
    try:
        from .._patch import DataSourceCredentialListCustomization
    except ImportError:
        class DataSourceCredentialListCustomization(object):
            pass
    try:
        from .._patch import DetectionAnomalyFilterConditionCustomization
    except ImportError:
        class DetectionAnomalyFilterConditionCustomization(object):
            pass
    try:
        from .._patch import DetectionAnomalyResultQueryCustomization
    except ImportError:
        class DetectionAnomalyResultQueryCustomization(object):
            pass
    try:
        from .._patch import DetectionIncidentFilterConditionCustomization
    except ImportError:
        class DetectionIncidentFilterConditionCustomization(object):
            pass
    try:
        from .._patch import DetectionIncidentResultQueryCustomization
    except ImportError:
        class DetectionIncidentResultQueryCustomization(object):
            pass
    try:
        from .._patch import DetectionSeriesQueryCustomization
    except ImportError:
        class DetectionSeriesQueryCustomization(object):
            pass
    try:
        from .._patch import DimensionCustomization
    except ImportError:
        class DimensionCustomization(object):
            pass
    try:
        from .._patch import DimensionGroupConfigurationCustomization
    except ImportError:
        class DimensionGroupConfigurationCustomization(object):
            pass
    try:
        from .._patch import DimensionGroupIdentityCustomization
    except ImportError:
        class DimensionGroupIdentityCustomization(object):
            pass
    try:
        from .._patch import HookInfoCustomization
    except ImportError:
        class HookInfoCustomization(object):
            pass
    try:
        from .._patch import EmailHookInfoCustomization
    except ImportError:
        class EmailHookInfoCustomization(object):
            pass
    try:
        from .._patch import HookInfoPatchCustomization
    except ImportError:
        class HookInfoPatchCustomization(object):
            pass
    try:
        from .._patch import EmailHookInfoPatchCustomization
    except ImportError:
        class EmailHookInfoPatchCustomization(object):
            pass
    try:
        from .._patch import EmailHookParameterCustomization
    except ImportError:
        class EmailHookParameterCustomization(object):
            pass
    try:
        from .._patch import EmailHookParameterPatchCustomization
    except ImportError:
        class EmailHookParameterPatchCustomization(object):
            pass
    try:
        from .._patch import EnrichmentStatusCustomization
    except ImportError:
        class EnrichmentStatusCustomization(object):
            pass
    try:
        from .._patch import EnrichmentStatusListCustomization
    except ImportError:
        class EnrichmentStatusListCustomization(object):
            pass
    try:
        from .._patch import EnrichmentStatusQueryOptionCustomization
    except ImportError:
        class EnrichmentStatusQueryOptionCustomization(object):
            pass
    try:
        from .._patch import ErrorCodeCustomization
    except ImportError:
        class ErrorCodeCustomization(object):
            pass
    try:
        from .._patch import FeedbackDimensionFilterCustomization
    except ImportError:
        class FeedbackDimensionFilterCustomization(object):
            pass
    try:
        from .._patch import HardThresholdConditionCustomization
    except ImportError:
        class HardThresholdConditionCustomization(object):
            pass
    try:
        from .._patch import HardThresholdConditionPatchCustomization
    except ImportError:
        class HardThresholdConditionPatchCustomization(object):
            pass
    try:
        from .._patch import HookListCustomization
    except ImportError:
        class HookListCustomization(object):
            pass
    try:
        from .._patch import IncidentPropertyCustomization
    except ImportError:
        class IncidentPropertyCustomization(object):
            pass
    try:
        from .._patch import IncidentResultCustomization
    except ImportError:
        class IncidentResultCustomization(object):
            pass
    try:
        from .._patch import IncidentResultListCustomization
    except ImportError:
        class IncidentResultListCustomization(object):
            pass
    try:
        from .._patch import InfluxDBDataFeedCustomization
    except ImportError:
        class InfluxDBDataFeedCustomization(object):
            pass
    try:
        from .._patch import InfluxDBDataFeedPatchCustomization
    except ImportError:
        class InfluxDBDataFeedPatchCustomization(object):
            pass
    try:
        from .._patch import InfluxDBParameterCustomization
    except ImportError:
        class InfluxDBParameterCustomization(object):
            pass
    try:
        from .._patch import InfluxDBParameterPatchCustomization
    except ImportError:
        class InfluxDBParameterPatchCustomization(object):
            pass
    try:
        from .._patch import IngestionProgressResetOptionsCustomization
    except ImportError:
        class IngestionProgressResetOptionsCustomization(object):
            pass
    try:
        from .._patch import IngestionStatusCustomization
    except ImportError:
        class IngestionStatusCustomization(object):
            pass
    try:
        from .._patch import IngestionStatusListCustomization
    except ImportError:
        class IngestionStatusListCustomization(object):
            pass
    try:
        from .._patch import IngestionStatusQueryOptionsCustomization
    except ImportError:
        class IngestionStatusQueryOptionsCustomization(object):
            pass
    try:
        from .._patch import MetricCustomization
    except ImportError:
        class MetricCustomization(object):
            pass
    try:
        from .._patch import MetricAlertingConfigurationCustomization
    except ImportError:
        class MetricAlertingConfigurationCustomization(object):
            pass
    try:
        from .._patch import MetricDataItemCustomization
    except ImportError:
        class MetricDataItemCustomization(object):
            pass
    try:
        from .._patch import MetricDataListCustomization
    except ImportError:
        class MetricDataListCustomization(object):
            pass
    try:
        from .._patch import MetricDataQueryOptionsCustomization
    except ImportError:
        class MetricDataQueryOptionsCustomization(object):
            pass
    try:
        from .._patch import MetricDimensionListCustomization
    except ImportError:
        class MetricDimensionListCustomization(object):
            pass
    try:
        from .._patch import MetricDimensionQueryOptionsCustomization
    except ImportError:
        class MetricDimensionQueryOptionsCustomization(object):
            pass
    try:
        from .._patch import MetricFeedbackFilterCustomization
    except ImportError:
        class MetricFeedbackFilterCustomization(object):
            pass
    try:
        from .._patch import MetricFeedbackListCustomization
    except ImportError:
        class MetricFeedbackListCustomization(object):
            pass
    try:
        from .._patch import MetricSeriesItemCustomization
    except ImportError:
        class MetricSeriesItemCustomization(object):
            pass
    try:
        from .._patch import MetricSeriesListCustomization
    except ImportError:
        class MetricSeriesListCustomization(object):
            pass
    try:
        from .._patch import MetricSeriesQueryOptionsCustomization
    except ImportError:
        class MetricSeriesQueryOptionsCustomization(object):
            pass
    try:
        from .._patch import MongoDBDataFeedCustomization
    except ImportError:
        class MongoDBDataFeedCustomization(object):
            pass
    try:
        from .._patch import MongoDBDataFeedPatchCustomization
    except ImportError:
        class MongoDBDataFeedPatchCustomization(object):
            pass
    try:
        from .._patch import MongoDBParameterCustomization
    except ImportError:
        class MongoDBParameterCustomization(object):
            pass
    try:
        from .._patch import MongoDBParameterPatchCustomization
    except ImportError:
        class MongoDBParameterPatchCustomization(object):
            pass
    try:
        from .._patch import MySqlDataFeedCustomization
    except ImportError:
        class MySqlDataFeedCustomization(object):
            pass
    try:
        from .._patch import MySqlDataFeedPatchCustomization
    except ImportError:
        class MySqlDataFeedPatchCustomization(object):
            pass
    try:
        from .._patch import PeriodFeedbackCustomization
    except ImportError:
        class PeriodFeedbackCustomization(object):
            pass
    try:
        from .._patch import PeriodFeedbackValueCustomization
    except ImportError:
        class PeriodFeedbackValueCustomization(object):
            pass
    try:
        from .._patch import PostgreSqlDataFeedCustomization
    except ImportError:
        class PostgreSqlDataFeedCustomization(object):
            pass
    try:
        from .._patch import PostgreSqlDataFeedPatchCustomization
    except ImportError:
        class PostgreSqlDataFeedPatchCustomization(object):
            pass
    try:
        from .._patch import RootCauseCustomization
    except ImportError:
        class RootCauseCustomization(object):
            pass
    try:
        from .._patch import RootCauseListCustomization
    except ImportError:
        class RootCauseListCustomization(object):
            pass
    try:
        from .._patch import SeriesConfigurationCustomization
    except ImportError:
        class SeriesConfigurationCustomization(object):
            pass
    try:
        from .._patch import SeriesIdentityCustomization
    except ImportError:
        class SeriesIdentityCustomization(object):
            pass
    try:
        from .._patch import SeriesResultCustomization
    except ImportError:
        class SeriesResultCustomization(object):
            pass
    try:
        from .._patch import SeriesResultListCustomization
    except ImportError:
        class SeriesResultListCustomization(object):
            pass
    try:
        from .._patch import ServicePrincipalCredentialCustomization
    except ImportError:
        class ServicePrincipalCredentialCustomization(object):
            pass
    try:
        from .._patch import ServicePrincipalCredentialPatchCustomization
    except ImportError:
        class ServicePrincipalCredentialPatchCustomization(object):
            pass
    try:
        from .._patch import ServicePrincipalInKVCredentialCustomization
    except ImportError:
        class ServicePrincipalInKVCredentialCustomization(object):
            pass
    try:
        from .._patch import ServicePrincipalInKVCredentialPatchCustomization
    except ImportError:
        class ServicePrincipalInKVCredentialPatchCustomization(object):
            pass
    try:
        from .._patch import ServicePrincipalInKVParamCustomization
    except ImportError:
        class ServicePrincipalInKVParamCustomization(object):
            pass
    try:
        from .._patch import ServicePrincipalInKVParamPatchCustomization
    except ImportError:
        class ServicePrincipalInKVParamPatchCustomization(object):
            pass
    try:
        from .._patch import ServicePrincipalParamCustomization
    except ImportError:
        class ServicePrincipalParamCustomization(object):
            pass
    try:
        from .._patch import ServicePrincipalParamPatchCustomization
    except ImportError:
        class ServicePrincipalParamPatchCustomization(object):
            pass
    try:
        from .._patch import SeverityConditionCustomization
    except ImportError:
        class SeverityConditionCustomization(object):
            pass
    try:
        from .._patch import SeverityFilterConditionCustomization
    except ImportError:
        class SeverityFilterConditionCustomization(object):
            pass
    try:
        from .._patch import SmartDetectionConditionCustomization
    except ImportError:
        class SmartDetectionConditionCustomization(object):
            pass
    try:
        from .._patch import SmartDetectionConditionPatchCustomization
    except ImportError:
        class SmartDetectionConditionPatchCustomization(object):
            pass
    try:
        from .._patch import SQLServerDataFeedCustomization
    except ImportError:
        class SQLServerDataFeedCustomization(object):
            pass
    try:
        from .._patch import SQLServerDataFeedPatchCustomization
    except ImportError:
        class SQLServerDataFeedPatchCustomization(object):
            pass
    try:
        from .._patch import SqlSourceParameterCustomization
    except ImportError:
        class SqlSourceParameterCustomization(object):
            pass
    try:
        from .._patch import SQLSourceParameterPatchCustomization
    except ImportError:
        class SQLSourceParameterPatchCustomization(object):
            pass
    try:
        from .._patch import SuppressConditionCustomization
    except ImportError:
        class SuppressConditionCustomization(object):
            pass
    try:
        from .._patch import SuppressConditionPatchCustomization
    except ImportError:
        class SuppressConditionPatchCustomization(object):
            pass
    try:
        from .._patch import TopNGroupScopeCustomization
    except ImportError:
        class TopNGroupScopeCustomization(object):
            pass
    try:
        from .._patch import UsageStatsCustomization
    except ImportError:
        class UsageStatsCustomization(object):
            pass
    try:
        from .._patch import ValueConditionCustomization
    except ImportError:
        class ValueConditionCustomization(object):
            pass
    try:
        from .._patch import WebhookHookInfoCustomization
    except ImportError:
        class WebhookHookInfoCustomization(object):
            pass
    try:
        from .._patch import WebhookHookInfoPatchCustomization
    except ImportError:
        class WebhookHookInfoPatchCustomization(object):
            pass
    try:
        from .._patch import WebhookHookParameterCustomization
    except ImportError:
        class WebhookHookParameterCustomization(object):
            pass
    try:
        from .._patch import WebhookHookParameterPatchCustomization
    except ImportError:
        class WebhookHookParameterPatchCustomization(object):
            pass
    try:
        from .._patch import WholeMetricConfigurationCustomization
    except ImportError:
        class WholeMetricConfigurationCustomization(object):
            pass
    try:
        from .._patch import WholeMetricConfigurationPatchCustomization
    except ImportError:
        class WholeMetricConfigurationPatchCustomization(object):
            pass


class _AlertingResultQueryGenerated(msrest.serialization.Model):
    """AlertingResultQuery.

    All required parameters must be populated in order to send to Azure.

    :ivar start_time: Required. start time.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Required. end time.
    :vartype end_time: ~datetime.datetime
    :ivar time_mode: Required. time mode. Possible values include: "AnomalyTime", "CreatedTime",
     "ModifiedTime".
    :vartype time_mode: str or ~azure.ai.metricsadvisor.models.TimeMode
    """

    _validation = {
        'start_time': {'required': True},
        'end_time': {'required': True},
        'time_mode': {'required': True},
    }

    _attribute_map = {
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'time_mode': {'key': 'timeMode', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword start_time: Required. start time.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: Required. end time.
        :paramtype end_time: ~datetime.datetime
        :keyword time_mode: Required. time mode. Possible values include: "AnomalyTime", "CreatedTime",
         "ModifiedTime".
        :paramtype time_mode: str or ~azure.ai.metricsadvisor.models.TimeMode
        """
        super(AlertingResultQuery, self).__init__(**kwargs)
        self.start_time = kwargs['start_time']
        self.end_time = kwargs['end_time']
        self.time_mode = kwargs['time_mode']

class AlertingResultQuery(AlertingResultQueryCustomization, _AlertingResultQueryGenerated):
    pass


class _AlertResultGenerated(msrest.serialization.Model):
    """AlertResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar alert_id: alert id.
    :vartype alert_id: str
    :ivar timestamp: anomaly time.
    :vartype timestamp: ~datetime.datetime
    :ivar created_time: created time.
    :vartype created_time: ~datetime.datetime
    :ivar modified_time: modified time.
    :vartype modified_time: ~datetime.datetime
    """

    _validation = {
        'alert_id': {'readonly': True},
        'timestamp': {'readonly': True},
        'created_time': {'readonly': True},
        'modified_time': {'readonly': True},
    }

    _attribute_map = {
        'alert_id': {'key': 'alertId', 'type': 'str'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'modified_time': {'key': 'modifiedTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(AlertResult, self).__init__(**kwargs)
        self.alert_id = None
        self.timestamp = None
        self.created_time = None
        self.modified_time = None

class AlertResult(AlertResultCustomization, _AlertResultGenerated):
    pass


class _AlertResultListGenerated(msrest.serialization.Model):
    """AlertResultList.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link:
    :vartype next_link: str
    :ivar value: Required.
    :vartype value: list[~azure.ai.metricsadvisor.models.AlertResult]
    """

    _validation = {
        'next_link': {'readonly': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': '@nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[AlertResult]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required.
        :paramtype value: list[~azure.ai.metricsadvisor.models.AlertResult]
        """
        super(AlertResultList, self).__init__(**kwargs)
        self.next_link = None
        self.value = kwargs['value']

class AlertResultList(AlertResultListCustomization, _AlertResultListGenerated):
    pass


class _AlertSnoozeConditionGenerated(msrest.serialization.Model):
    """AlertSnoozeCondition.

    All required parameters must be populated in order to send to Azure.

    :ivar auto_snooze: Required. snooze point count, value range : [0, +∞).
    :vartype auto_snooze: int
    :ivar snooze_scope: Required. snooze scope. Possible values include: "Metric", "Series".
    :vartype snooze_scope: str or ~azure.ai.metricsadvisor.models.SnoozeScope
    :ivar only_for_successive: Required. only snooze for successive anomalies.
    :vartype only_for_successive: bool
    """

    _validation = {
        'auto_snooze': {'required': True},
        'snooze_scope': {'required': True},
        'only_for_successive': {'required': True},
    }

    _attribute_map = {
        'auto_snooze': {'key': 'autoSnooze', 'type': 'int'},
        'snooze_scope': {'key': 'snoozeScope', 'type': 'str'},
        'only_for_successive': {'key': 'onlyForSuccessive', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword auto_snooze: Required. snooze point count, value range : [0, +∞).
        :paramtype auto_snooze: int
        :keyword snooze_scope: Required. snooze scope. Possible values include: "Metric", "Series".
        :paramtype snooze_scope: str or ~azure.ai.metricsadvisor.models.SnoozeScope
        :keyword only_for_successive: Required. only snooze for successive anomalies.
        :paramtype only_for_successive: bool
        """
        super(AlertSnoozeCondition, self).__init__(**kwargs)
        self.auto_snooze = kwargs['auto_snooze']
        self.snooze_scope = kwargs['snooze_scope']
        self.only_for_successive = kwargs['only_for_successive']

class AlertSnoozeCondition(AlertSnoozeConditionCustomization, _AlertSnoozeConditionGenerated):
    pass


class _AnomalyAlertingConfigurationGenerated(msrest.serialization.Model):
    """AnomalyAlertingConfiguration.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar anomaly_alerting_configuration_id: anomaly alerting configuration unique id.
    :vartype anomaly_alerting_configuration_id: str
    :ivar name: Required. anomaly alerting configuration name.
    :vartype name: str
    :ivar description: anomaly alerting configuration description.
    :vartype description: str
    :ivar cross_metrics_operator: cross metrics operator
    
     should be specified when setting up multiple metric alerting configurations. Possible values
     include: "AND", "OR", "XOR".
    :vartype cross_metrics_operator: str or
     ~azure.ai.metricsadvisor.models.AnomalyAlertingConfigurationLogicType
    :ivar split_alert_by_dimensions: dimensions used to split alert.
    :vartype split_alert_by_dimensions: list[str]
    :ivar hook_ids: Required. hook unique ids.
    :vartype hook_ids: list[str]
    :ivar metric_alerting_configurations: Required. Anomaly alerting configurations.
    :vartype metric_alerting_configurations:
     list[~azure.ai.metricsadvisor.models.MetricAlertingConfiguration]
    """

    _validation = {
        'anomaly_alerting_configuration_id': {'readonly': True},
        'name': {'required': True},
        'split_alert_by_dimensions': {'unique': True},
        'hook_ids': {'required': True, 'unique': True},
        'metric_alerting_configurations': {'required': True, 'unique': True},
    }

    _attribute_map = {
        'anomaly_alerting_configuration_id': {'key': 'anomalyAlertingConfigurationId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'cross_metrics_operator': {'key': 'crossMetricsOperator', 'type': 'str'},
        'split_alert_by_dimensions': {'key': 'splitAlertByDimensions', 'type': '[str]'},
        'hook_ids': {'key': 'hookIds', 'type': '[str]'},
        'metric_alerting_configurations': {'key': 'metricAlertingConfigurations', 'type': '[MetricAlertingConfiguration]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Required. anomaly alerting configuration name.
        :paramtype name: str
        :keyword description: anomaly alerting configuration description.
        :paramtype description: str
        :keyword cross_metrics_operator: cross metrics operator
        
         should be specified when setting up multiple metric alerting configurations. Possible values
         include: "AND", "OR", "XOR".
        :paramtype cross_metrics_operator: str or
         ~azure.ai.metricsadvisor.models.AnomalyAlertingConfigurationLogicType
        :keyword split_alert_by_dimensions: dimensions used to split alert.
        :paramtype split_alert_by_dimensions: list[str]
        :keyword hook_ids: Required. hook unique ids.
        :paramtype hook_ids: list[str]
        :keyword metric_alerting_configurations: Required. Anomaly alerting configurations.
        :paramtype metric_alerting_configurations:
         list[~azure.ai.metricsadvisor.models.MetricAlertingConfiguration]
        """
        super(AnomalyAlertingConfiguration, self).__init__(**kwargs)
        self.anomaly_alerting_configuration_id = None
        self.name = kwargs['name']
        self.description = kwargs.get('description', "")
        self.cross_metrics_operator = kwargs.get('cross_metrics_operator', None)
        self.split_alert_by_dimensions = kwargs.get('split_alert_by_dimensions', None)
        self.hook_ids = kwargs['hook_ids']
        self.metric_alerting_configurations = kwargs['metric_alerting_configurations']

class AnomalyAlertingConfiguration(AnomalyAlertingConfigurationCustomization, _AnomalyAlertingConfigurationGenerated):
    pass


class _AnomalyAlertingConfigurationListGenerated(msrest.serialization.Model):
    """AnomalyAlertingConfigurationList.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value:
    :vartype value: list[~azure.ai.metricsadvisor.models.AnomalyAlertingConfiguration]
    :ivar next_link:
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[AnomalyAlertingConfiguration]'},
        'next_link': {'key': '@nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(AnomalyAlertingConfigurationList, self).__init__(**kwargs)
        self.value = None
        self.next_link = None

class AnomalyAlertingConfigurationList(AnomalyAlertingConfigurationListCustomization, _AnomalyAlertingConfigurationListGenerated):
    pass


class _AnomalyAlertingConfigurationPatchGenerated(msrest.serialization.Model):
    """AnomalyAlertingConfigurationPatch.

    :ivar name: Anomaly alerting configuration name.
    :vartype name: str
    :ivar description: anomaly alerting configuration description.
    :vartype description: str
    :ivar cross_metrics_operator: cross metrics operator. Possible values include: "AND", "OR",
     "XOR".
    :vartype cross_metrics_operator: str or
     ~azure.ai.metricsadvisor.models.AnomalyAlertingConfigurationLogicType
    :ivar split_alert_by_dimensions: dimensions used to split alert.
    :vartype split_alert_by_dimensions: list[str]
    :ivar hook_ids: hook unique ids.
    :vartype hook_ids: list[str]
    :ivar metric_alerting_configurations: Anomaly alerting configurations.
    :vartype metric_alerting_configurations:
     list[~azure.ai.metricsadvisor.models.MetricAlertingConfiguration]
    """

    _validation = {
        'split_alert_by_dimensions': {'unique': True},
        'hook_ids': {'unique': True},
        'metric_alerting_configurations': {'unique': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'cross_metrics_operator': {'key': 'crossMetricsOperator', 'type': 'str'},
        'split_alert_by_dimensions': {'key': 'splitAlertByDimensions', 'type': '[str]'},
        'hook_ids': {'key': 'hookIds', 'type': '[str]'},
        'metric_alerting_configurations': {'key': 'metricAlertingConfigurations', 'type': '[MetricAlertingConfiguration]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Anomaly alerting configuration name.
        :paramtype name: str
        :keyword description: anomaly alerting configuration description.
        :paramtype description: str
        :keyword cross_metrics_operator: cross metrics operator. Possible values include: "AND", "OR",
         "XOR".
        :paramtype cross_metrics_operator: str or
         ~azure.ai.metricsadvisor.models.AnomalyAlertingConfigurationLogicType
        :keyword split_alert_by_dimensions: dimensions used to split alert.
        :paramtype split_alert_by_dimensions: list[str]
        :keyword hook_ids: hook unique ids.
        :paramtype hook_ids: list[str]
        :keyword metric_alerting_configurations: Anomaly alerting configurations.
        :paramtype metric_alerting_configurations:
         list[~azure.ai.metricsadvisor.models.MetricAlertingConfiguration]
        """
        super(AnomalyAlertingConfigurationPatch, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', "")
        self.cross_metrics_operator = kwargs.get('cross_metrics_operator', None)
        self.split_alert_by_dimensions = kwargs.get('split_alert_by_dimensions', None)
        self.hook_ids = kwargs.get('hook_ids', None)
        self.metric_alerting_configurations = kwargs.get('metric_alerting_configurations', None)

class AnomalyAlertingConfigurationPatch(AnomalyAlertingConfigurationPatchCustomization, _AnomalyAlertingConfigurationPatchGenerated):
    pass


class _AnomalyDetectionConfigurationGenerated(msrest.serialization.Model):
    """AnomalyDetectionConfiguration.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar anomaly_detection_configuration_id: anomaly detection configuration unique id.
    :vartype anomaly_detection_configuration_id: str
    :ivar name: Required. anomaly detection configuration name.
    :vartype name: str
    :ivar description: anomaly detection configuration description.
    :vartype description: str
    :ivar metric_id: Required. metric unique id.
    :vartype metric_id: str
    :ivar whole_metric_configuration: Required.
    :vartype whole_metric_configuration: ~azure.ai.metricsadvisor.models.WholeMetricConfiguration
    :ivar dimension_group_override_configurations: detection configuration for series group.
    :vartype dimension_group_override_configurations:
     list[~azure.ai.metricsadvisor.models.DimensionGroupConfiguration]
    :ivar series_override_configurations: detection configuration for specific series.
    :vartype series_override_configurations:
     list[~azure.ai.metricsadvisor.models.SeriesConfiguration]
    """

    _validation = {
        'anomaly_detection_configuration_id': {'readonly': True},
        'name': {'required': True},
        'metric_id': {'required': True},
        'whole_metric_configuration': {'required': True},
        'dimension_group_override_configurations': {'unique': True},
        'series_override_configurations': {'unique': True},
    }

    _attribute_map = {
        'anomaly_detection_configuration_id': {'key': 'anomalyDetectionConfigurationId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'metric_id': {'key': 'metricId', 'type': 'str'},
        'whole_metric_configuration': {'key': 'wholeMetricConfiguration', 'type': 'WholeMetricConfiguration'},
        'dimension_group_override_configurations': {'key': 'dimensionGroupOverrideConfigurations', 'type': '[DimensionGroupConfiguration]'},
        'series_override_configurations': {'key': 'seriesOverrideConfigurations', 'type': '[SeriesConfiguration]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Required. anomaly detection configuration name.
        :paramtype name: str
        :keyword description: anomaly detection configuration description.
        :paramtype description: str
        :keyword metric_id: Required. metric unique id.
        :paramtype metric_id: str
        :keyword whole_metric_configuration: Required.
        :paramtype whole_metric_configuration: ~azure.ai.metricsadvisor.models.WholeMetricConfiguration
        :keyword dimension_group_override_configurations: detection configuration for series group.
        :paramtype dimension_group_override_configurations:
         list[~azure.ai.metricsadvisor.models.DimensionGroupConfiguration]
        :keyword series_override_configurations: detection configuration for specific series.
        :paramtype series_override_configurations:
         list[~azure.ai.metricsadvisor.models.SeriesConfiguration]
        """
        super(AnomalyDetectionConfiguration, self).__init__(**kwargs)
        self.anomaly_detection_configuration_id = None
        self.name = kwargs['name']
        self.description = kwargs.get('description', "")
        self.metric_id = kwargs['metric_id']
        self.whole_metric_configuration = kwargs['whole_metric_configuration']
        self.dimension_group_override_configurations = kwargs.get('dimension_group_override_configurations', None)
        self.series_override_configurations = kwargs.get('series_override_configurations', None)

class AnomalyDetectionConfiguration(AnomalyDetectionConfigurationCustomization, _AnomalyDetectionConfigurationGenerated):
    pass


class _AnomalyDetectionConfigurationListGenerated(msrest.serialization.Model):
    """AnomalyDetectionConfigurationList.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value:
    :vartype value: list[~azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration]
    :ivar next_link:
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[AnomalyDetectionConfiguration]'},
        'next_link': {'key': '@nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(AnomalyDetectionConfigurationList, self).__init__(**kwargs)
        self.value = None
        self.next_link = None

class AnomalyDetectionConfigurationList(AnomalyDetectionConfigurationListCustomization, _AnomalyDetectionConfigurationListGenerated):
    pass


class _AnomalyDetectionConfigurationPatchGenerated(msrest.serialization.Model):
    """AnomalyDetectionConfigurationPatch.

    :ivar name: anomaly detection configuration name.
    :vartype name: str
    :ivar description: anomaly detection configuration description.
    :vartype description: str
    :ivar whole_metric_configuration:
    :vartype whole_metric_configuration:
     ~azure.ai.metricsadvisor.models.WholeMetricConfigurationPatch
    :ivar dimension_group_override_configurations: detection configuration for series group.
    :vartype dimension_group_override_configurations:
     list[~azure.ai.metricsadvisor.models.DimensionGroupConfiguration]
    :ivar series_override_configurations: detection configuration for specific series.
    :vartype series_override_configurations:
     list[~azure.ai.metricsadvisor.models.SeriesConfiguration]
    """

    _validation = {
        'dimension_group_override_configurations': {'unique': True},
        'series_override_configurations': {'unique': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'whole_metric_configuration': {'key': 'wholeMetricConfiguration', 'type': 'WholeMetricConfigurationPatch'},
        'dimension_group_override_configurations': {'key': 'dimensionGroupOverrideConfigurations', 'type': '[DimensionGroupConfiguration]'},
        'series_override_configurations': {'key': 'seriesOverrideConfigurations', 'type': '[SeriesConfiguration]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: anomaly detection configuration name.
        :paramtype name: str
        :keyword description: anomaly detection configuration description.
        :paramtype description: str
        :keyword whole_metric_configuration:
        :paramtype whole_metric_configuration:
         ~azure.ai.metricsadvisor.models.WholeMetricConfigurationPatch
        :keyword dimension_group_override_configurations: detection configuration for series group.
        :paramtype dimension_group_override_configurations:
         list[~azure.ai.metricsadvisor.models.DimensionGroupConfiguration]
        :keyword series_override_configurations: detection configuration for specific series.
        :paramtype series_override_configurations:
         list[~azure.ai.metricsadvisor.models.SeriesConfiguration]
        """
        super(AnomalyDetectionConfigurationPatch, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.description = kwargs.get('description', "")
        self.whole_metric_configuration = kwargs.get('whole_metric_configuration', None)
        self.dimension_group_override_configurations = kwargs.get('dimension_group_override_configurations', None)
        self.series_override_configurations = kwargs.get('series_override_configurations', None)

class AnomalyDetectionConfigurationPatch(AnomalyDetectionConfigurationPatchCustomization, _AnomalyDetectionConfigurationPatchGenerated):
    pass


class _AnomalyDimensionListGenerated(msrest.serialization.Model):
    """AnomalyDimensionList.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link:
    :vartype next_link: str
    :ivar value: Required.
    :vartype value: list[str]
    """

    _validation = {
        'next_link': {'readonly': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': '@nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required.
        :paramtype value: list[str]
        """
        super(AnomalyDimensionList, self).__init__(**kwargs)
        self.next_link = None
        self.value = kwargs['value']

class AnomalyDimensionList(AnomalyDimensionListCustomization, _AnomalyDimensionListGenerated):
    pass


class _AnomalyDimensionQueryGenerated(msrest.serialization.Model):
    """AnomalyDimensionQuery.

    All required parameters must be populated in order to send to Azure.

    :ivar start_time: Required. start time.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Required. end time.
    :vartype end_time: ~datetime.datetime
    :ivar dimension_name: Required. dimension to query.
    :vartype dimension_name: str
    :ivar dimension_filter:
    :vartype dimension_filter: ~azure.ai.metricsadvisor.models.DimensionGroupIdentity
    """

    _validation = {
        'start_time': {'required': True},
        'end_time': {'required': True},
        'dimension_name': {'required': True},
    }

    _attribute_map = {
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'dimension_name': {'key': 'dimensionName', 'type': 'str'},
        'dimension_filter': {'key': 'dimensionFilter', 'type': 'DimensionGroupIdentity'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword start_time: Required. start time.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: Required. end time.
        :paramtype end_time: ~datetime.datetime
        :keyword dimension_name: Required. dimension to query.
        :paramtype dimension_name: str
        :keyword dimension_filter:
        :paramtype dimension_filter: ~azure.ai.metricsadvisor.models.DimensionGroupIdentity
        """
        super(AnomalyDimensionQuery, self).__init__(**kwargs)
        self.start_time = kwargs['start_time']
        self.end_time = kwargs['end_time']
        self.dimension_name = kwargs['dimension_name']
        self.dimension_filter = kwargs.get('dimension_filter', None)

class AnomalyDimensionQuery(AnomalyDimensionQueryCustomization, _AnomalyDimensionQueryGenerated):
    pass


class _MetricFeedbackGenerated(msrest.serialization.Model):
    """MetricFeedback.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AnomalyFeedback, ChangePointFeedback, CommentFeedback, PeriodFeedback.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar feedback_type: Required. feedback type.Constant filled by server. Possible values
     include: "Anomaly", "ChangePoint", "Period", "Comment".
    :vartype feedback_type: str or ~azure.ai.metricsadvisor.models.FeedbackType
    :ivar feedback_id: feedback unique id.
    :vartype feedback_id: str
    :ivar created_time: feedback created time.
    :vartype created_time: ~datetime.datetime
    :ivar user_principal: user who gives this feedback.
    :vartype user_principal: str
    :ivar metric_id: Required. metric unique id.
    :vartype metric_id: str
    :ivar dimension_filter: Required.
    :vartype dimension_filter: ~azure.ai.metricsadvisor.models.FeedbackDimensionFilter
    """

    _validation = {
        'feedback_type': {'required': True},
        'feedback_id': {'readonly': True},
        'created_time': {'readonly': True},
        'user_principal': {'readonly': True},
        'metric_id': {'required': True},
        'dimension_filter': {'required': True},
    }

    _attribute_map = {
        'feedback_type': {'key': 'feedbackType', 'type': 'str'},
        'feedback_id': {'key': 'feedbackId', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'user_principal': {'key': 'userPrincipal', 'type': 'str'},
        'metric_id': {'key': 'metricId', 'type': 'str'},
        'dimension_filter': {'key': 'dimensionFilter', 'type': 'FeedbackDimensionFilter'},
    }

    _subtype_map = {
        'feedback_type': {'Anomaly': 'AnomalyFeedback', 'ChangePoint': 'ChangePointFeedback', 'Comment': 'CommentFeedback', 'Period': 'PeriodFeedback'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword metric_id: Required. metric unique id.
        :paramtype metric_id: str
        :keyword dimension_filter: Required.
        :paramtype dimension_filter: ~azure.ai.metricsadvisor.models.FeedbackDimensionFilter
        """
        super(MetricFeedback, self).__init__(**kwargs)
        self.feedback_type = None  # type: Optional[str]
        self.feedback_id = None
        self.created_time = None
        self.user_principal = None
        self.metric_id = kwargs['metric_id']
        self.dimension_filter = kwargs['dimension_filter']

class MetricFeedback(MetricFeedbackCustomization, _MetricFeedbackGenerated):
    pass


class _AnomalyFeedbackGenerated(_MetricFeedbackGenerated):
    """AnomalyFeedback.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar feedback_type: Required. feedback type.Constant filled by server. Possible values
     include: "Anomaly", "ChangePoint", "Period", "Comment".
    :vartype feedback_type: str or ~azure.ai.metricsadvisor.models.FeedbackType
    :ivar feedback_id: feedback unique id.
    :vartype feedback_id: str
    :ivar created_time: feedback created time.
    :vartype created_time: ~datetime.datetime
    :ivar user_principal: user who gives this feedback.
    :vartype user_principal: str
    :ivar metric_id: Required. metric unique id.
    :vartype metric_id: str
    :ivar dimension_filter: Required.
    :vartype dimension_filter: ~azure.ai.metricsadvisor.models.FeedbackDimensionFilter
    :ivar start_time: Required. the start timestamp of feedback time range.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Required. the end timestamp of feedback time range, when equals to startTime
     means only one timestamp.
    :vartype end_time: ~datetime.datetime
    :ivar value: Required.
    :vartype value: ~azure.ai.metricsadvisor.models.AnomalyFeedbackValue
    :ivar anomaly_detection_configuration_id: the corresponding anomaly detection configuration of
     this feedback.
    :vartype anomaly_detection_configuration_id: str
    :ivar anomaly_detection_configuration_snapshot:
    :vartype anomaly_detection_configuration_snapshot:
     ~azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
    """

    _validation = {
        'feedback_type': {'required': True},
        'feedback_id': {'readonly': True},
        'created_time': {'readonly': True},
        'user_principal': {'readonly': True},
        'metric_id': {'required': True},
        'dimension_filter': {'required': True},
        'start_time': {'required': True},
        'end_time': {'required': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'feedback_type': {'key': 'feedbackType', 'type': 'str'},
        'feedback_id': {'key': 'feedbackId', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'user_principal': {'key': 'userPrincipal', 'type': 'str'},
        'metric_id': {'key': 'metricId', 'type': 'str'},
        'dimension_filter': {'key': 'dimensionFilter', 'type': 'FeedbackDimensionFilter'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'value': {'key': 'value', 'type': 'AnomalyFeedbackValue'},
        'anomaly_detection_configuration_id': {'key': 'anomalyDetectionConfigurationId', 'type': 'str'},
        'anomaly_detection_configuration_snapshot': {'key': 'anomalyDetectionConfigurationSnapshot', 'type': 'AnomalyDetectionConfiguration'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword metric_id: Required. metric unique id.
        :paramtype metric_id: str
        :keyword dimension_filter: Required.
        :paramtype dimension_filter: ~azure.ai.metricsadvisor.models.FeedbackDimensionFilter
        :keyword start_time: Required. the start timestamp of feedback time range.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: Required. the end timestamp of feedback time range, when equals to startTime
         means only one timestamp.
        :paramtype end_time: ~datetime.datetime
        :keyword value: Required.
        :paramtype value: ~azure.ai.metricsadvisor.models.AnomalyFeedbackValue
        :keyword anomaly_detection_configuration_id: the corresponding anomaly detection configuration
         of this feedback.
        :paramtype anomaly_detection_configuration_id: str
        :keyword anomaly_detection_configuration_snapshot:
        :paramtype anomaly_detection_configuration_snapshot:
         ~azure.ai.metricsadvisor.models.AnomalyDetectionConfiguration
        """
        super(AnomalyFeedback, self).__init__(**kwargs)
        self.feedback_type = 'Anomaly'  # type: str
        self.start_time = kwargs['start_time']
        self.end_time = kwargs['end_time']
        self.value = kwargs['value']
        self.anomaly_detection_configuration_id = kwargs.get('anomaly_detection_configuration_id', None)
        self.anomaly_detection_configuration_snapshot = kwargs.get('anomaly_detection_configuration_snapshot', None)

class AnomalyFeedback(AnomalyFeedbackCustomization, MetricFeedback, _AnomalyFeedbackGenerated):
    pass


class _AnomalyFeedbackValueGenerated(msrest.serialization.Model):
    """AnomalyFeedbackValue.

    All required parameters must be populated in order to send to Azure.

    :ivar anomaly_value: Required. Possible values include: "AutoDetect", "Anomaly", "NotAnomaly".
    :vartype anomaly_value: str or ~azure.ai.metricsadvisor.models.AnomalyValue
    """

    _validation = {
        'anomaly_value': {'required': True},
    }

    _attribute_map = {
        'anomaly_value': {'key': 'anomalyValue', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword anomaly_value: Required. Possible values include: "AutoDetect", "Anomaly",
         "NotAnomaly".
        :paramtype anomaly_value: str or ~azure.ai.metricsadvisor.models.AnomalyValue
        """
        super(AnomalyFeedbackValue, self).__init__(**kwargs)
        self.anomaly_value = kwargs['anomaly_value']

class AnomalyFeedbackValue(AnomalyFeedbackValueCustomization, _AnomalyFeedbackValueGenerated):
    pass


class _AnomalyPropertyGenerated(msrest.serialization.Model):
    """AnomalyProperty.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar anomaly_severity: Required. anomaly severity. Possible values include: "Low", "Medium",
     "High".
    :vartype anomaly_severity: str or ~azure.ai.metricsadvisor.models.Severity
    :ivar anomaly_status: anomaly status
    
     only return for alerting anomaly result. Possible values include: "Active", "Resolved".
    :vartype anomaly_status: str or ~azure.ai.metricsadvisor.models.AnomalyStatus
    :ivar value: value of the anomaly.
    :vartype value: float
    :ivar expected_value: expected value of the anomaly given by smart detector.
    :vartype expected_value: float
    """

    _validation = {
        'anomaly_severity': {'required': True},
        'anomaly_status': {'readonly': True},
        'value': {'readonly': True},
        'expected_value': {'readonly': True},
    }

    _attribute_map = {
        'anomaly_severity': {'key': 'anomalySeverity', 'type': 'str'},
        'anomaly_status': {'key': 'anomalyStatus', 'type': 'str'},
        'value': {'key': 'value', 'type': 'float'},
        'expected_value': {'key': 'expectedValue', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword anomaly_severity: Required. anomaly severity. Possible values include: "Low",
         "Medium", "High".
        :paramtype anomaly_severity: str or ~azure.ai.metricsadvisor.models.Severity
        """
        super(AnomalyProperty, self).__init__(**kwargs)
        self.anomaly_severity = kwargs['anomaly_severity']
        self.anomaly_status = None
        self.value = None
        self.expected_value = None

class AnomalyProperty(AnomalyPropertyCustomization, _AnomalyPropertyGenerated):
    pass


class _AnomalyResultGenerated(msrest.serialization.Model):
    """AnomalyResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar data_feed_id: data feed unique id
    
     only return for alerting anomaly result.
    :vartype data_feed_id: str
    :ivar metric_id: metric unique id
    
     only return for alerting anomaly result.
    :vartype metric_id: str
    :ivar anomaly_detection_configuration_id: anomaly detection configuration unique id
    
     only return for alerting anomaly result.
    :vartype anomaly_detection_configuration_id: str
    :ivar timestamp: Required. anomaly time.
    :vartype timestamp: ~datetime.datetime
    :ivar created_time: created time
    
     only return for alerting result.
    :vartype created_time: ~datetime.datetime
    :ivar modified_time: modified time
    
     only return for alerting result.
    :vartype modified_time: ~datetime.datetime
    :ivar dimension: Required. dimension specified for series.
    :vartype dimension: dict[str, str]
    :ivar property: Required.
    :vartype property: ~azure.ai.metricsadvisor.models.AnomalyProperty
    """

    _validation = {
        'data_feed_id': {'readonly': True},
        'metric_id': {'readonly': True},
        'anomaly_detection_configuration_id': {'readonly': True},
        'timestamp': {'required': True},
        'created_time': {'readonly': True},
        'modified_time': {'readonly': True},
        'dimension': {'required': True},
        'property': {'required': True},
    }

    _attribute_map = {
        'data_feed_id': {'key': 'dataFeedId', 'type': 'str'},
        'metric_id': {'key': 'metricId', 'type': 'str'},
        'anomaly_detection_configuration_id': {'key': 'anomalyDetectionConfigurationId', 'type': 'str'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'modified_time': {'key': 'modifiedTime', 'type': 'iso-8601'},
        'dimension': {'key': 'dimension', 'type': '{str}'},
        'property': {'key': 'property', 'type': 'AnomalyProperty'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword timestamp: Required. anomaly time.
        :paramtype timestamp: ~datetime.datetime
        :keyword dimension: Required. dimension specified for series.
        :paramtype dimension: dict[str, str]
        :keyword property: Required.
        :paramtype property: ~azure.ai.metricsadvisor.models.AnomalyProperty
        """
        super(AnomalyResult, self).__init__(**kwargs)
        self.data_feed_id = None
        self.metric_id = None
        self.anomaly_detection_configuration_id = None
        self.timestamp = kwargs['timestamp']
        self.created_time = None
        self.modified_time = None
        self.dimension = kwargs['dimension']
        self.property = kwargs['property']

class AnomalyResult(AnomalyResultCustomization, _AnomalyResultGenerated):
    pass


class _AnomalyResultListGenerated(msrest.serialization.Model):
    """AnomalyResultList.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link:
    :vartype next_link: str
    :ivar value: Required.
    :vartype value: list[~azure.ai.metricsadvisor.models.AnomalyResult]
    """

    _validation = {
        'next_link': {'readonly': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': '@nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[AnomalyResult]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required.
        :paramtype value: list[~azure.ai.metricsadvisor.models.AnomalyResult]
        """
        super(AnomalyResultList, self).__init__(**kwargs)
        self.next_link = None
        self.value = kwargs['value']

class AnomalyResultList(AnomalyResultListCustomization, _AnomalyResultListGenerated):
    pass


class _DataFeedDetailGenerated(msrest.serialization.Model):
    """DataFeedDetail.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AzureApplicationInsightsDataFeed, AzureBlobDataFeed, AzureCosmosDBDataFeed, AzureDataExplorerDataFeed, AzureDataLakeStorageGen2DataFeed, AzureEventHubsDataFeed, AzureLogAnalyticsDataFeed, AzureTableDataFeed, InfluxDBDataFeed, MongoDBDataFeed, MySqlDataFeed, PostgreSqlDataFeed, SQLServerDataFeed.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_id: data feed unique id.
    :vartype data_feed_id: str
    :ivar data_feed_name: Required. data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar granularity_name: Required. granularity of the time series. Possible values include:
     "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
    :vartype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
    :ivar granularity_amount: if granularity is custom,it is required.
    :vartype granularity_amount: int
    :ivar metrics: Required. measure list.
    :vartype metrics: list[~azure.ai.metricsadvisor.models.Metric]
    :ivar dimension: dimension list.
    :vartype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: Required. ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar is_admin: the query user is one of data feed administrator or not.
    :vartype is_admin: bool
    :ivar creator: data feed creator.
    :vartype creator: str
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar created_time: data feed created time.
    :vartype created_time: ~datetime.datetime
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    """

    _validation = {
        'data_source_type': {'required': True},
        'data_feed_id': {'readonly': True},
        'data_feed_name': {'required': True},
        'granularity_name': {'required': True},
        'metrics': {'required': True, 'unique': True},
        'dimension': {'unique': True},
        'data_start_from': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
        'is_admin': {'readonly': True},
        'creator': {'readonly': True},
        'status': {'readonly': True},
        'created_time': {'readonly': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_id': {'key': 'dataFeedId', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'granularity_name': {'key': 'granularityName', 'type': 'str'},
        'granularity_amount': {'key': 'granularityAmount', 'type': 'int'},
        'metrics': {'key': 'metrics', 'type': '[Metric]'},
        'dimension': {'key': 'dimension', 'type': '[Dimension]'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'is_admin': {'key': 'isAdmin', 'type': 'bool'},
        'creator': {'key': 'creator', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
    }

    _subtype_map = {
        'data_source_type': {'AzureApplicationInsights': 'AzureApplicationInsightsDataFeed', 'AzureBlob': 'AzureBlobDataFeed', 'AzureCosmosDB': 'AzureCosmosDBDataFeed', 'AzureDataExplorer': 'AzureDataExplorerDataFeed', 'AzureDataLakeStorageGen2': 'AzureDataLakeStorageGen2DataFeed', 'AzureEventHubs': 'AzureEventHubsDataFeed', 'AzureLogAnalytics': 'AzureLogAnalyticsDataFeed', 'AzureTable': 'AzureTableDataFeed', 'InfluxDB': 'InfluxDBDataFeed', 'MongoDB': 'MongoDBDataFeed', 'MySql': 'MySqlDataFeed', 'PostgreSql': 'PostgreSqlDataFeed', 'SqlServer': 'SQLServerDataFeed'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: Required. data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword granularity_name: Required. granularity of the time series. Possible values include:
         "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
        :paramtype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
        :keyword granularity_amount: if granularity is custom,it is required.
        :paramtype granularity_amount: int
        :keyword metrics: Required. measure list.
        :paramtype metrics: list[~azure.ai.metricsadvisor.models.Metric]
        :keyword dimension: dimension list.
        :paramtype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: Required. ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        """
        super(DataFeedDetail, self).__init__(**kwargs)
        self.data_source_type = None  # type: Optional[str]
        self.data_feed_id = None
        self.data_feed_name = kwargs['data_feed_name']
        self.data_feed_description = kwargs.get('data_feed_description', "")
        self.granularity_name = kwargs['granularity_name']
        self.granularity_amount = kwargs.get('granularity_amount', None)
        self.metrics = kwargs['metrics']
        self.dimension = kwargs.get('dimension', None)
        self.timestamp_column = kwargs.get('timestamp_column', "")
        self.data_start_from = kwargs['data_start_from']
        self.start_offset_in_seconds = kwargs.get('start_offset_in_seconds', 0)
        self.max_concurrency = kwargs.get('max_concurrency', -1)
        self.min_retry_interval_in_seconds = kwargs.get('min_retry_interval_in_seconds', -1)
        self.stop_retry_after_in_seconds = kwargs.get('stop_retry_after_in_seconds', -1)
        self.need_rollup = kwargs.get('need_rollup', None)
        self.roll_up_method = kwargs.get('roll_up_method', None)
        self.roll_up_columns = kwargs.get('roll_up_columns', None)
        self.all_up_identification = kwargs.get('all_up_identification', None)
        self.fill_missing_point_type = kwargs.get('fill_missing_point_type', None)
        self.fill_missing_point_value = kwargs.get('fill_missing_point_value', None)
        self.view_mode = kwargs.get('view_mode', None)
        self.admins = kwargs.get('admins', None)
        self.viewers = kwargs.get('viewers', None)
        self.is_admin = None
        self.creator = None
        self.status = None
        self.created_time = None
        self.action_link_template = kwargs.get('action_link_template', "")
        self.authentication_type = kwargs.get('authentication_type', None)
        self.credential_id = kwargs.get('credential_id', None)

class DataFeedDetail(DataFeedDetailCustomization, _DataFeedDetailGenerated):
    pass


class _AzureApplicationInsightsDataFeedGenerated(_DataFeedDetailGenerated):
    """AzureApplicationInsightsDataFeed.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_id: data feed unique id.
    :vartype data_feed_id: str
    :ivar data_feed_name: Required. data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar granularity_name: Required. granularity of the time series. Possible values include:
     "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
    :vartype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
    :ivar granularity_amount: if granularity is custom,it is required.
    :vartype granularity_amount: int
    :ivar metrics: Required. measure list.
    :vartype metrics: list[~azure.ai.metricsadvisor.models.Metric]
    :ivar dimension: dimension list.
    :vartype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: Required. ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar is_admin: the query user is one of data feed administrator or not.
    :vartype is_admin: bool
    :ivar creator: data feed creator.
    :vartype creator: str
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar created_time: data feed created time.
    :vartype created_time: ~datetime.datetime
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter: Required.
    :vartype data_source_parameter:
     ~azure.ai.metricsadvisor.models.AzureApplicationInsightsParameter
    """

    _validation = {
        'data_source_type': {'required': True},
        'data_feed_id': {'readonly': True},
        'data_feed_name': {'required': True},
        'granularity_name': {'required': True},
        'metrics': {'required': True, 'unique': True},
        'dimension': {'unique': True},
        'data_start_from': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
        'is_admin': {'readonly': True},
        'creator': {'readonly': True},
        'status': {'readonly': True},
        'created_time': {'readonly': True},
        'data_source_parameter': {'required': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_id': {'key': 'dataFeedId', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'granularity_name': {'key': 'granularityName', 'type': 'str'},
        'granularity_amount': {'key': 'granularityAmount', 'type': 'int'},
        'metrics': {'key': 'metrics', 'type': '[Metric]'},
        'dimension': {'key': 'dimension', 'type': '[Dimension]'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'is_admin': {'key': 'isAdmin', 'type': 'bool'},
        'creator': {'key': 'creator', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'AzureApplicationInsightsParameter'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: Required. data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword granularity_name: Required. granularity of the time series. Possible values include:
         "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
        :paramtype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
        :keyword granularity_amount: if granularity is custom,it is required.
        :paramtype granularity_amount: int
        :keyword metrics: Required. measure list.
        :paramtype metrics: list[~azure.ai.metricsadvisor.models.Metric]
        :keyword dimension: dimension list.
        :paramtype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: Required. ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter: Required.
        :paramtype data_source_parameter:
         ~azure.ai.metricsadvisor.models.AzureApplicationInsightsParameter
        """
        super(AzureApplicationInsightsDataFeed, self).__init__(**kwargs)
        self.data_source_type = 'AzureApplicationInsights'  # type: str
        self.data_source_parameter = kwargs['data_source_parameter']

class AzureApplicationInsightsDataFeed(AzureApplicationInsightsDataFeedCustomization, DataFeedDetail, _AzureApplicationInsightsDataFeedGenerated):
    pass


class _DataFeedDetailPatchGenerated(msrest.serialization.Model):
    """DataFeedDetailPatch.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AzureApplicationInsightsDataFeedPatch, AzureBlobDataFeedPatch, AzureCosmosDBDataFeedPatch, AzureDataExplorerDataFeedPatch, AzureDataLakeStorageGen2DataFeedPatch, AzureEventHubsDataFeedPatch, AzureLogAnalyticsDataFeedPatch, AzureTableDataFeedPatch, InfluxDBDataFeedPatch, MongoDBDataFeedPatch, MySqlDataFeedPatch, PostgreSqlDataFeedPatch, SQLServerDataFeedPatch.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_name: data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    """

    _validation = {
        'data_source_type': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'status': {'key': 'status', 'type': 'str'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
    }

    _subtype_map = {
        'data_source_type': {'AzureApplicationInsights': 'AzureApplicationInsightsDataFeedPatch', 'AzureBlob': 'AzureBlobDataFeedPatch', 'AzureCosmosDB': 'AzureCosmosDBDataFeedPatch', 'AzureDataExplorer': 'AzureDataExplorerDataFeedPatch', 'AzureDataLakeStorageGen2': 'AzureDataLakeStorageGen2DataFeedPatch', 'AzureEventHubs': 'AzureEventHubsDataFeedPatch', 'AzureLogAnalytics': 'AzureLogAnalyticsDataFeedPatch', 'AzureTable': 'AzureTableDataFeedPatch', 'InfluxDB': 'InfluxDBDataFeedPatch', 'MongoDB': 'MongoDBDataFeedPatch', 'MySql': 'MySqlDataFeedPatch', 'PostgreSql': 'PostgreSqlDataFeedPatch', 'SqlServer': 'SQLServerDataFeedPatch'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword status: data feed status. Possible values include: "Active", "Paused".
        :paramtype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        """
        super(DataFeedDetailPatch, self).__init__(**kwargs)
        self.data_source_type = None  # type: Optional[str]
        self.data_feed_name = kwargs.get('data_feed_name', None)
        self.data_feed_description = kwargs.get('data_feed_description', None)
        self.timestamp_column = kwargs.get('timestamp_column', None)
        self.data_start_from = kwargs.get('data_start_from', None)
        self.start_offset_in_seconds = kwargs.get('start_offset_in_seconds', None)
        self.max_concurrency = kwargs.get('max_concurrency', None)
        self.min_retry_interval_in_seconds = kwargs.get('min_retry_interval_in_seconds', None)
        self.stop_retry_after_in_seconds = kwargs.get('stop_retry_after_in_seconds', None)
        self.need_rollup = kwargs.get('need_rollup', None)
        self.roll_up_method = kwargs.get('roll_up_method', None)
        self.roll_up_columns = kwargs.get('roll_up_columns', None)
        self.all_up_identification = kwargs.get('all_up_identification', None)
        self.fill_missing_point_type = kwargs.get('fill_missing_point_type', None)
        self.fill_missing_point_value = kwargs.get('fill_missing_point_value', None)
        self.view_mode = kwargs.get('view_mode', None)
        self.admins = kwargs.get('admins', None)
        self.viewers = kwargs.get('viewers', None)
        self.status = kwargs.get('status', None)
        self.action_link_template = kwargs.get('action_link_template', None)
        self.authentication_type = kwargs.get('authentication_type', None)
        self.credential_id = kwargs.get('credential_id', None)

class DataFeedDetailPatch(DataFeedDetailPatchCustomization, _DataFeedDetailPatchGenerated):
    pass


class _AzureApplicationInsightsDataFeedPatchGenerated(_DataFeedDetailPatchGenerated):
    """AzureApplicationInsightsDataFeedPatch.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_name: data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter:
    :vartype data_source_parameter:
     ~azure.ai.metricsadvisor.models.AzureApplicationInsightsParameterPatch
    """

    _validation = {
        'data_source_type': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'status': {'key': 'status', 'type': 'str'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'AzureApplicationInsightsParameterPatch'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword status: data feed status. Possible values include: "Active", "Paused".
        :paramtype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter:
        :paramtype data_source_parameter:
         ~azure.ai.metricsadvisor.models.AzureApplicationInsightsParameterPatch
        """
        super(AzureApplicationInsightsDataFeedPatch, self).__init__(**kwargs)
        self.data_source_type = 'AzureApplicationInsights'  # type: str
        self.data_source_parameter = kwargs.get('data_source_parameter', None)

class AzureApplicationInsightsDataFeedPatch(AzureApplicationInsightsDataFeedPatchCustomization, DataFeedDetailPatch, _AzureApplicationInsightsDataFeedPatchGenerated):
    pass


class _AzureApplicationInsightsParameterGenerated(msrest.serialization.Model):
    """AzureApplicationInsightsParameter.

    All required parameters must be populated in order to send to Azure.

    :ivar azure_cloud: The Azure cloud that this Azure Application Insights in.
    :vartype azure_cloud: str
    :ivar application_id: The application id of this Azure Application Insights.
    :vartype application_id: str
    :ivar api_key: The API Key that can access this Azure Application Insights.
    :vartype api_key: str
    :ivar query: Required. The statement to query this Azure Application Insights.
    :vartype query: str
    """

    _validation = {
        'query': {'required': True},
    }

    _attribute_map = {
        'azure_cloud': {'key': 'azureCloud', 'type': 'str'},
        'application_id': {'key': 'applicationId', 'type': 'str'},
        'api_key': {'key': 'apiKey', 'type': 'str'},
        'query': {'key': 'query', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword azure_cloud: The Azure cloud that this Azure Application Insights in.
        :paramtype azure_cloud: str
        :keyword application_id: The application id of this Azure Application Insights.
        :paramtype application_id: str
        :keyword api_key: The API Key that can access this Azure Application Insights.
        :paramtype api_key: str
        :keyword query: Required. The statement to query this Azure Application Insights.
        :paramtype query: str
        """
        super(AzureApplicationInsightsParameter, self).__init__(**kwargs)
        self.azure_cloud = kwargs.get('azure_cloud', None)
        self.application_id = kwargs.get('application_id', None)
        self.api_key = kwargs.get('api_key', None)
        self.query = kwargs['query']

class AzureApplicationInsightsParameter(AzureApplicationInsightsParameterCustomization, _AzureApplicationInsightsParameterGenerated):
    pass


class _AzureApplicationInsightsParameterPatchGenerated(msrest.serialization.Model):
    """AzureApplicationInsightsParameterPatch.

    :ivar azure_cloud: The Azure cloud that this Azure Application Insights in.
    :vartype azure_cloud: str
    :ivar application_id: The application id of this Azure Application Insights.
    :vartype application_id: str
    :ivar api_key: The API Key that can access this Azure Application Insights.
    :vartype api_key: str
    :ivar query: The statement to query this Azure Application Insights.
    :vartype query: str
    """

    _attribute_map = {
        'azure_cloud': {'key': 'azureCloud', 'type': 'str'},
        'application_id': {'key': 'applicationId', 'type': 'str'},
        'api_key': {'key': 'apiKey', 'type': 'str'},
        'query': {'key': 'query', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword azure_cloud: The Azure cloud that this Azure Application Insights in.
        :paramtype azure_cloud: str
        :keyword application_id: The application id of this Azure Application Insights.
        :paramtype application_id: str
        :keyword api_key: The API Key that can access this Azure Application Insights.
        :paramtype api_key: str
        :keyword query: The statement to query this Azure Application Insights.
        :paramtype query: str
        """
        super(AzureApplicationInsightsParameterPatch, self).__init__(**kwargs)
        self.azure_cloud = kwargs.get('azure_cloud', None)
        self.application_id = kwargs.get('application_id', None)
        self.api_key = kwargs.get('api_key', None)
        self.query = kwargs.get('query', None)

class AzureApplicationInsightsParameterPatch(AzureApplicationInsightsParameterPatchCustomization, _AzureApplicationInsightsParameterPatchGenerated):
    pass


class _AzureBlobDataFeedGenerated(_DataFeedDetailGenerated):
    """AzureBlobDataFeed.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_id: data feed unique id.
    :vartype data_feed_id: str
    :ivar data_feed_name: Required. data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar granularity_name: Required. granularity of the time series. Possible values include:
     "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
    :vartype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
    :ivar granularity_amount: if granularity is custom,it is required.
    :vartype granularity_amount: int
    :ivar metrics: Required. measure list.
    :vartype metrics: list[~azure.ai.metricsadvisor.models.Metric]
    :ivar dimension: dimension list.
    :vartype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: Required. ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar is_admin: the query user is one of data feed administrator or not.
    :vartype is_admin: bool
    :ivar creator: data feed creator.
    :vartype creator: str
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar created_time: data feed created time.
    :vartype created_time: ~datetime.datetime
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter: Required.
    :vartype data_source_parameter: ~azure.ai.metricsadvisor.models.AzureBlobParameter
    """

    _validation = {
        'data_source_type': {'required': True},
        'data_feed_id': {'readonly': True},
        'data_feed_name': {'required': True},
        'granularity_name': {'required': True},
        'metrics': {'required': True, 'unique': True},
        'dimension': {'unique': True},
        'data_start_from': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
        'is_admin': {'readonly': True},
        'creator': {'readonly': True},
        'status': {'readonly': True},
        'created_time': {'readonly': True},
        'data_source_parameter': {'required': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_id': {'key': 'dataFeedId', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'granularity_name': {'key': 'granularityName', 'type': 'str'},
        'granularity_amount': {'key': 'granularityAmount', 'type': 'int'},
        'metrics': {'key': 'metrics', 'type': '[Metric]'},
        'dimension': {'key': 'dimension', 'type': '[Dimension]'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'is_admin': {'key': 'isAdmin', 'type': 'bool'},
        'creator': {'key': 'creator', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'AzureBlobParameter'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: Required. data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword granularity_name: Required. granularity of the time series. Possible values include:
         "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
        :paramtype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
        :keyword granularity_amount: if granularity is custom,it is required.
        :paramtype granularity_amount: int
        :keyword metrics: Required. measure list.
        :paramtype metrics: list[~azure.ai.metricsadvisor.models.Metric]
        :keyword dimension: dimension list.
        :paramtype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: Required. ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter: Required.
        :paramtype data_source_parameter: ~azure.ai.metricsadvisor.models.AzureBlobParameter
        """
        super(AzureBlobDataFeed, self).__init__(**kwargs)
        self.data_source_type = 'AzureBlob'  # type: str
        self.data_source_parameter = kwargs['data_source_parameter']

class AzureBlobDataFeed(AzureBlobDataFeedCustomization, DataFeedDetail, _AzureBlobDataFeedGenerated):
    pass


class _AzureBlobDataFeedPatchGenerated(_DataFeedDetailPatchGenerated):
    """AzureBlobDataFeedPatch.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_name: data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter:
    :vartype data_source_parameter: ~azure.ai.metricsadvisor.models.AzureBlobParameterPatch
    """

    _validation = {
        'data_source_type': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'status': {'key': 'status', 'type': 'str'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'AzureBlobParameterPatch'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword status: data feed status. Possible values include: "Active", "Paused".
        :paramtype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter:
        :paramtype data_source_parameter: ~azure.ai.metricsadvisor.models.AzureBlobParameterPatch
        """
        super(AzureBlobDataFeedPatch, self).__init__(**kwargs)
        self.data_source_type = 'AzureBlob'  # type: str
        self.data_source_parameter = kwargs.get('data_source_parameter', None)

class AzureBlobDataFeedPatch(AzureBlobDataFeedPatchCustomization, DataFeedDetailPatch, _AzureBlobDataFeedPatchGenerated):
    pass


class _AzureBlobParameterGenerated(msrest.serialization.Model):
    """AzureBlobParameter.

    All required parameters must be populated in order to send to Azure.

    :ivar connection_string: The connection string of this Azure Blob.
    :vartype connection_string: str
    :ivar container: Required. The container name in this Azure Blob.
    :vartype container: str
    :ivar blob_template: Required. The path template in this container.
    :vartype blob_template: str
    """

    _validation = {
        'container': {'required': True},
        'blob_template': {'required': True},
    }

    _attribute_map = {
        'connection_string': {'key': 'connectionString', 'type': 'str'},
        'container': {'key': 'container', 'type': 'str'},
        'blob_template': {'key': 'blobTemplate', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword connection_string: The connection string of this Azure Blob.
        :paramtype connection_string: str
        :keyword container: Required. The container name in this Azure Blob.
        :paramtype container: str
        :keyword blob_template: Required. The path template in this container.
        :paramtype blob_template: str
        """
        super(AzureBlobParameter, self).__init__(**kwargs)
        self.connection_string = kwargs.get('connection_string', None)
        self.container = kwargs['container']
        self.blob_template = kwargs['blob_template']

class AzureBlobParameter(AzureBlobParameterCustomization, _AzureBlobParameterGenerated):
    pass


class _AzureBlobParameterPatchGenerated(msrest.serialization.Model):
    """AzureBlobParameterPatch.

    :ivar connection_string: The connection string of this Azure Blob.
    :vartype connection_string: str
    :ivar container: The container name in this Azure Blob.
    :vartype container: str
    :ivar blob_template: The path template in this container.
    :vartype blob_template: str
    """

    _attribute_map = {
        'connection_string': {'key': 'connectionString', 'type': 'str'},
        'container': {'key': 'container', 'type': 'str'},
        'blob_template': {'key': 'blobTemplate', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword connection_string: The connection string of this Azure Blob.
        :paramtype connection_string: str
        :keyword container: The container name in this Azure Blob.
        :paramtype container: str
        :keyword blob_template: The path template in this container.
        :paramtype blob_template: str
        """
        super(AzureBlobParameterPatch, self).__init__(**kwargs)
        self.connection_string = kwargs.get('connection_string', None)
        self.container = kwargs.get('container', None)
        self.blob_template = kwargs.get('blob_template', None)

class AzureBlobParameterPatch(AzureBlobParameterPatchCustomization, _AzureBlobParameterPatchGenerated):
    pass


class _AzureCosmosDBDataFeedGenerated(_DataFeedDetailGenerated):
    """AzureCosmosDBDataFeed.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_id: data feed unique id.
    :vartype data_feed_id: str
    :ivar data_feed_name: Required. data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar granularity_name: Required. granularity of the time series. Possible values include:
     "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
    :vartype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
    :ivar granularity_amount: if granularity is custom,it is required.
    :vartype granularity_amount: int
    :ivar metrics: Required. measure list.
    :vartype metrics: list[~azure.ai.metricsadvisor.models.Metric]
    :ivar dimension: dimension list.
    :vartype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: Required. ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar is_admin: the query user is one of data feed administrator or not.
    :vartype is_admin: bool
    :ivar creator: data feed creator.
    :vartype creator: str
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar created_time: data feed created time.
    :vartype created_time: ~datetime.datetime
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter: Required.
    :vartype data_source_parameter: ~azure.ai.metricsadvisor.models.AzureCosmosDBParameter
    """

    _validation = {
        'data_source_type': {'required': True},
        'data_feed_id': {'readonly': True},
        'data_feed_name': {'required': True},
        'granularity_name': {'required': True},
        'metrics': {'required': True, 'unique': True},
        'dimension': {'unique': True},
        'data_start_from': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
        'is_admin': {'readonly': True},
        'creator': {'readonly': True},
        'status': {'readonly': True},
        'created_time': {'readonly': True},
        'data_source_parameter': {'required': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_id': {'key': 'dataFeedId', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'granularity_name': {'key': 'granularityName', 'type': 'str'},
        'granularity_amount': {'key': 'granularityAmount', 'type': 'int'},
        'metrics': {'key': 'metrics', 'type': '[Metric]'},
        'dimension': {'key': 'dimension', 'type': '[Dimension]'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'is_admin': {'key': 'isAdmin', 'type': 'bool'},
        'creator': {'key': 'creator', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'AzureCosmosDBParameter'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: Required. data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword granularity_name: Required. granularity of the time series. Possible values include:
         "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
        :paramtype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
        :keyword granularity_amount: if granularity is custom,it is required.
        :paramtype granularity_amount: int
        :keyword metrics: Required. measure list.
        :paramtype metrics: list[~azure.ai.metricsadvisor.models.Metric]
        :keyword dimension: dimension list.
        :paramtype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: Required. ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter: Required.
        :paramtype data_source_parameter: ~azure.ai.metricsadvisor.models.AzureCosmosDBParameter
        """
        super(AzureCosmosDBDataFeed, self).__init__(**kwargs)
        self.data_source_type = 'AzureCosmosDB'  # type: str
        self.data_source_parameter = kwargs['data_source_parameter']

class AzureCosmosDBDataFeed(AzureCosmosDBDataFeedCustomization, DataFeedDetail, _AzureCosmosDBDataFeedGenerated):
    pass


class _AzureCosmosDBDataFeedPatchGenerated(_DataFeedDetailPatchGenerated):
    """AzureCosmosDBDataFeedPatch.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_name: data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter:
    :vartype data_source_parameter: ~azure.ai.metricsadvisor.models.AzureCosmosDBParameterPatch
    """

    _validation = {
        'data_source_type': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'status': {'key': 'status', 'type': 'str'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'AzureCosmosDBParameterPatch'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword status: data feed status. Possible values include: "Active", "Paused".
        :paramtype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter:
        :paramtype data_source_parameter: ~azure.ai.metricsadvisor.models.AzureCosmosDBParameterPatch
        """
        super(AzureCosmosDBDataFeedPatch, self).__init__(**kwargs)
        self.data_source_type = 'AzureCosmosDB'  # type: str
        self.data_source_parameter = kwargs.get('data_source_parameter', None)

class AzureCosmosDBDataFeedPatch(AzureCosmosDBDataFeedPatchCustomization, DataFeedDetailPatch, _AzureCosmosDBDataFeedPatchGenerated):
    pass


class _AzureCosmosDBParameterGenerated(msrest.serialization.Model):
    """AzureCosmosDBParameter.

    All required parameters must be populated in order to send to Azure.

    :ivar connection_string: The connection string of this Azure CosmosDB.
    :vartype connection_string: str
    :ivar sql_query: Required. The statement to query this collection.
    :vartype sql_query: str
    :ivar database: Required. A database name in this Azure CosmosDB.
    :vartype database: str
    :ivar collection_id: Required. A collection id in this database.
    :vartype collection_id: str
    """

    _validation = {
        'sql_query': {'required': True},
        'database': {'required': True},
        'collection_id': {'required': True},
    }

    _attribute_map = {
        'connection_string': {'key': 'connectionString', 'type': 'str'},
        'sql_query': {'key': 'sqlQuery', 'type': 'str'},
        'database': {'key': 'database', 'type': 'str'},
        'collection_id': {'key': 'collectionId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword connection_string: The connection string of this Azure CosmosDB.
        :paramtype connection_string: str
        :keyword sql_query: Required. The statement to query this collection.
        :paramtype sql_query: str
        :keyword database: Required. A database name in this Azure CosmosDB.
        :paramtype database: str
        :keyword collection_id: Required. A collection id in this database.
        :paramtype collection_id: str
        """
        super(AzureCosmosDBParameter, self).__init__(**kwargs)
        self.connection_string = kwargs.get('connection_string', None)
        self.sql_query = kwargs['sql_query']
        self.database = kwargs['database']
        self.collection_id = kwargs['collection_id']

class AzureCosmosDBParameter(AzureCosmosDBParameterCustomization, _AzureCosmosDBParameterGenerated):
    pass


class _AzureCosmosDBParameterPatchGenerated(msrest.serialization.Model):
    """AzureCosmosDBParameterPatch.

    :ivar connection_string: The connection string of this Azure CosmosDB.
    :vartype connection_string: str
    :ivar sql_query: The statement to query this collection.
    :vartype sql_query: str
    :ivar database: A database name in this Azure CosmosDB.
    :vartype database: str
    :ivar collection_id: A collection id in this database.
    :vartype collection_id: str
    """

    _attribute_map = {
        'connection_string': {'key': 'connectionString', 'type': 'str'},
        'sql_query': {'key': 'sqlQuery', 'type': 'str'},
        'database': {'key': 'database', 'type': 'str'},
        'collection_id': {'key': 'collectionId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword connection_string: The connection string of this Azure CosmosDB.
        :paramtype connection_string: str
        :keyword sql_query: The statement to query this collection.
        :paramtype sql_query: str
        :keyword database: A database name in this Azure CosmosDB.
        :paramtype database: str
        :keyword collection_id: A collection id in this database.
        :paramtype collection_id: str
        """
        super(AzureCosmosDBParameterPatch, self).__init__(**kwargs)
        self.connection_string = kwargs.get('connection_string', None)
        self.sql_query = kwargs.get('sql_query', None)
        self.database = kwargs.get('database', None)
        self.collection_id = kwargs.get('collection_id', None)

class AzureCosmosDBParameterPatch(AzureCosmosDBParameterPatchCustomization, _AzureCosmosDBParameterPatchGenerated):
    pass


class _AzureDataExplorerDataFeedGenerated(_DataFeedDetailGenerated):
    """AzureDataExplorerDataFeed.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_id: data feed unique id.
    :vartype data_feed_id: str
    :ivar data_feed_name: Required. data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar granularity_name: Required. granularity of the time series. Possible values include:
     "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
    :vartype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
    :ivar granularity_amount: if granularity is custom,it is required.
    :vartype granularity_amount: int
    :ivar metrics: Required. measure list.
    :vartype metrics: list[~azure.ai.metricsadvisor.models.Metric]
    :ivar dimension: dimension list.
    :vartype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: Required. ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar is_admin: the query user is one of data feed administrator or not.
    :vartype is_admin: bool
    :ivar creator: data feed creator.
    :vartype creator: str
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar created_time: data feed created time.
    :vartype created_time: ~datetime.datetime
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter: Required.
    :vartype data_source_parameter: ~azure.ai.metricsadvisor.models.SqlSourceParameter
    """

    _validation = {
        'data_source_type': {'required': True},
        'data_feed_id': {'readonly': True},
        'data_feed_name': {'required': True},
        'granularity_name': {'required': True},
        'metrics': {'required': True, 'unique': True},
        'dimension': {'unique': True},
        'data_start_from': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
        'is_admin': {'readonly': True},
        'creator': {'readonly': True},
        'status': {'readonly': True},
        'created_time': {'readonly': True},
        'data_source_parameter': {'required': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_id': {'key': 'dataFeedId', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'granularity_name': {'key': 'granularityName', 'type': 'str'},
        'granularity_amount': {'key': 'granularityAmount', 'type': 'int'},
        'metrics': {'key': 'metrics', 'type': '[Metric]'},
        'dimension': {'key': 'dimension', 'type': '[Dimension]'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'is_admin': {'key': 'isAdmin', 'type': 'bool'},
        'creator': {'key': 'creator', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'SqlSourceParameter'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: Required. data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword granularity_name: Required. granularity of the time series. Possible values include:
         "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
        :paramtype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
        :keyword granularity_amount: if granularity is custom,it is required.
        :paramtype granularity_amount: int
        :keyword metrics: Required. measure list.
        :paramtype metrics: list[~azure.ai.metricsadvisor.models.Metric]
        :keyword dimension: dimension list.
        :paramtype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: Required. ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter: Required.
        :paramtype data_source_parameter: ~azure.ai.metricsadvisor.models.SqlSourceParameter
        """
        super(AzureDataExplorerDataFeed, self).__init__(**kwargs)
        self.data_source_type = 'AzureDataExplorer'  # type: str
        self.data_source_parameter = kwargs['data_source_parameter']

class AzureDataExplorerDataFeed(AzureDataExplorerDataFeedCustomization, DataFeedDetail, _AzureDataExplorerDataFeedGenerated):
    pass


class _AzureDataExplorerDataFeedPatchGenerated(_DataFeedDetailPatchGenerated):
    """AzureDataExplorerDataFeedPatch.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_name: data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter:
    :vartype data_source_parameter: ~azure.ai.metricsadvisor.models.SQLSourceParameterPatch
    """

    _validation = {
        'data_source_type': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'status': {'key': 'status', 'type': 'str'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'SQLSourceParameterPatch'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword status: data feed status. Possible values include: "Active", "Paused".
        :paramtype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter:
        :paramtype data_source_parameter: ~azure.ai.metricsadvisor.models.SQLSourceParameterPatch
        """
        super(AzureDataExplorerDataFeedPatch, self).__init__(**kwargs)
        self.data_source_type = 'AzureDataExplorer'  # type: str
        self.data_source_parameter = kwargs.get('data_source_parameter', None)

class AzureDataExplorerDataFeedPatch(AzureDataExplorerDataFeedPatchCustomization, DataFeedDetailPatch, _AzureDataExplorerDataFeedPatchGenerated):
    pass


class _AzureDataLakeStorageGen2DataFeedGenerated(_DataFeedDetailGenerated):
    """AzureDataLakeStorageGen2DataFeed.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_id: data feed unique id.
    :vartype data_feed_id: str
    :ivar data_feed_name: Required. data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar granularity_name: Required. granularity of the time series. Possible values include:
     "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
    :vartype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
    :ivar granularity_amount: if granularity is custom,it is required.
    :vartype granularity_amount: int
    :ivar metrics: Required. measure list.
    :vartype metrics: list[~azure.ai.metricsadvisor.models.Metric]
    :ivar dimension: dimension list.
    :vartype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: Required. ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar is_admin: the query user is one of data feed administrator or not.
    :vartype is_admin: bool
    :ivar creator: data feed creator.
    :vartype creator: str
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar created_time: data feed created time.
    :vartype created_time: ~datetime.datetime
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter: Required.
    :vartype data_source_parameter:
     ~azure.ai.metricsadvisor.models.AzureDataLakeStorageGen2Parameter
    """

    _validation = {
        'data_source_type': {'required': True},
        'data_feed_id': {'readonly': True},
        'data_feed_name': {'required': True},
        'granularity_name': {'required': True},
        'metrics': {'required': True, 'unique': True},
        'dimension': {'unique': True},
        'data_start_from': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
        'is_admin': {'readonly': True},
        'creator': {'readonly': True},
        'status': {'readonly': True},
        'created_time': {'readonly': True},
        'data_source_parameter': {'required': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_id': {'key': 'dataFeedId', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'granularity_name': {'key': 'granularityName', 'type': 'str'},
        'granularity_amount': {'key': 'granularityAmount', 'type': 'int'},
        'metrics': {'key': 'metrics', 'type': '[Metric]'},
        'dimension': {'key': 'dimension', 'type': '[Dimension]'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'is_admin': {'key': 'isAdmin', 'type': 'bool'},
        'creator': {'key': 'creator', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'AzureDataLakeStorageGen2Parameter'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: Required. data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword granularity_name: Required. granularity of the time series. Possible values include:
         "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
        :paramtype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
        :keyword granularity_amount: if granularity is custom,it is required.
        :paramtype granularity_amount: int
        :keyword metrics: Required. measure list.
        :paramtype metrics: list[~azure.ai.metricsadvisor.models.Metric]
        :keyword dimension: dimension list.
        :paramtype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: Required. ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter: Required.
        :paramtype data_source_parameter:
         ~azure.ai.metricsadvisor.models.AzureDataLakeStorageGen2Parameter
        """
        super(AzureDataLakeStorageGen2DataFeed, self).__init__(**kwargs)
        self.data_source_type = 'AzureDataLakeStorageGen2'  # type: str
        self.data_source_parameter = kwargs['data_source_parameter']

class AzureDataLakeStorageGen2DataFeed(AzureDataLakeStorageGen2DataFeedCustomization, DataFeedDetail, _AzureDataLakeStorageGen2DataFeedGenerated):
    pass


class _AzureDataLakeStorageGen2DataFeedPatchGenerated(_DataFeedDetailPatchGenerated):
    """AzureDataLakeStorageGen2DataFeedPatch.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_name: data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter:
    :vartype data_source_parameter:
     ~azure.ai.metricsadvisor.models.AzureDataLakeStorageGen2ParameterPatch
    """

    _validation = {
        'data_source_type': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'status': {'key': 'status', 'type': 'str'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'AzureDataLakeStorageGen2ParameterPatch'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword status: data feed status. Possible values include: "Active", "Paused".
        :paramtype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter:
        :paramtype data_source_parameter:
         ~azure.ai.metricsadvisor.models.AzureDataLakeStorageGen2ParameterPatch
        """
        super(AzureDataLakeStorageGen2DataFeedPatch, self).__init__(**kwargs)
        self.data_source_type = 'AzureDataLakeStorageGen2'  # type: str
        self.data_source_parameter = kwargs.get('data_source_parameter', None)

class AzureDataLakeStorageGen2DataFeedPatch(AzureDataLakeStorageGen2DataFeedPatchCustomization, DataFeedDetailPatch, _AzureDataLakeStorageGen2DataFeedPatchGenerated):
    pass


class _AzureDataLakeStorageGen2ParameterGenerated(msrest.serialization.Model):
    """AzureDataLakeStorageGen2Parameter.

    All required parameters must be populated in order to send to Azure.

    :ivar account_name: The account name of this Azure Data Lake.
    :vartype account_name: str
    :ivar account_key: The account key that can access this Azure Data Lake.
    :vartype account_key: str
    :ivar file_system_name: Required. The file system (container) name in this Azure Data Lake.
    :vartype file_system_name: str
    :ivar directory_template: Required. The directory template under this file system.
    :vartype directory_template: str
    :ivar file_template: Required. The file template.
    :vartype file_template: str
    """

    _validation = {
        'file_system_name': {'required': True},
        'directory_template': {'required': True},
        'file_template': {'required': True},
    }

    _attribute_map = {
        'account_name': {'key': 'accountName', 'type': 'str'},
        'account_key': {'key': 'accountKey', 'type': 'str'},
        'file_system_name': {'key': 'fileSystemName', 'type': 'str'},
        'directory_template': {'key': 'directoryTemplate', 'type': 'str'},
        'file_template': {'key': 'fileTemplate', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword account_name: The account name of this Azure Data Lake.
        :paramtype account_name: str
        :keyword account_key: The account key that can access this Azure Data Lake.
        :paramtype account_key: str
        :keyword file_system_name: Required. The file system (container) name in this Azure Data Lake.
        :paramtype file_system_name: str
        :keyword directory_template: Required. The directory template under this file system.
        :paramtype directory_template: str
        :keyword file_template: Required. The file template.
        :paramtype file_template: str
        """
        super(AzureDataLakeStorageGen2Parameter, self).__init__(**kwargs)
        self.account_name = kwargs.get('account_name', None)
        self.account_key = kwargs.get('account_key', None)
        self.file_system_name = kwargs['file_system_name']
        self.directory_template = kwargs['directory_template']
        self.file_template = kwargs['file_template']

class AzureDataLakeStorageGen2Parameter(AzureDataLakeStorageGen2ParameterCustomization, _AzureDataLakeStorageGen2ParameterGenerated):
    pass


class _AzureDataLakeStorageGen2ParameterPatchGenerated(msrest.serialization.Model):
    """AzureDataLakeStorageGen2ParameterPatch.

    :ivar account_name: The account name of this Azure Data Lake.
    :vartype account_name: str
    :ivar account_key: The account key that can access this Azure Data Lake.
    :vartype account_key: str
    :ivar file_system_name: The file system (container) name in this Azure Data Lake.
    :vartype file_system_name: str
    :ivar directory_template: The directory template under this file system.
    :vartype directory_template: str
    :ivar file_template: The file template.
    :vartype file_template: str
    """

    _attribute_map = {
        'account_name': {'key': 'accountName', 'type': 'str'},
        'account_key': {'key': 'accountKey', 'type': 'str'},
        'file_system_name': {'key': 'fileSystemName', 'type': 'str'},
        'directory_template': {'key': 'directoryTemplate', 'type': 'str'},
        'file_template': {'key': 'fileTemplate', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword account_name: The account name of this Azure Data Lake.
        :paramtype account_name: str
        :keyword account_key: The account key that can access this Azure Data Lake.
        :paramtype account_key: str
        :keyword file_system_name: The file system (container) name in this Azure Data Lake.
        :paramtype file_system_name: str
        :keyword directory_template: The directory template under this file system.
        :paramtype directory_template: str
        :keyword file_template: The file template.
        :paramtype file_template: str
        """
        super(AzureDataLakeStorageGen2ParameterPatch, self).__init__(**kwargs)
        self.account_name = kwargs.get('account_name', None)
        self.account_key = kwargs.get('account_key', None)
        self.file_system_name = kwargs.get('file_system_name', None)
        self.directory_template = kwargs.get('directory_template', None)
        self.file_template = kwargs.get('file_template', None)

class AzureDataLakeStorageGen2ParameterPatch(AzureDataLakeStorageGen2ParameterPatchCustomization, _AzureDataLakeStorageGen2ParameterPatchGenerated):
    pass


class _AzureEventHubsDataFeedGenerated(_DataFeedDetailGenerated):
    """AzureEventHubsDataFeed.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_id: data feed unique id.
    :vartype data_feed_id: str
    :ivar data_feed_name: Required. data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar granularity_name: Required. granularity of the time series. Possible values include:
     "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
    :vartype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
    :ivar granularity_amount: if granularity is custom,it is required.
    :vartype granularity_amount: int
    :ivar metrics: Required. measure list.
    :vartype metrics: list[~azure.ai.metricsadvisor.models.Metric]
    :ivar dimension: dimension list.
    :vartype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: Required. ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar is_admin: the query user is one of data feed administrator or not.
    :vartype is_admin: bool
    :ivar creator: data feed creator.
    :vartype creator: str
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar created_time: data feed created time.
    :vartype created_time: ~datetime.datetime
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter: Required.
    :vartype data_source_parameter: ~azure.ai.metricsadvisor.models.AzureEventHubsParameter
    """

    _validation = {
        'data_source_type': {'required': True},
        'data_feed_id': {'readonly': True},
        'data_feed_name': {'required': True},
        'granularity_name': {'required': True},
        'metrics': {'required': True, 'unique': True},
        'dimension': {'unique': True},
        'data_start_from': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
        'is_admin': {'readonly': True},
        'creator': {'readonly': True},
        'status': {'readonly': True},
        'created_time': {'readonly': True},
        'data_source_parameter': {'required': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_id': {'key': 'dataFeedId', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'granularity_name': {'key': 'granularityName', 'type': 'str'},
        'granularity_amount': {'key': 'granularityAmount', 'type': 'int'},
        'metrics': {'key': 'metrics', 'type': '[Metric]'},
        'dimension': {'key': 'dimension', 'type': '[Dimension]'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'is_admin': {'key': 'isAdmin', 'type': 'bool'},
        'creator': {'key': 'creator', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'AzureEventHubsParameter'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: Required. data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword granularity_name: Required. granularity of the time series. Possible values include:
         "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
        :paramtype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
        :keyword granularity_amount: if granularity is custom,it is required.
        :paramtype granularity_amount: int
        :keyword metrics: Required. measure list.
        :paramtype metrics: list[~azure.ai.metricsadvisor.models.Metric]
        :keyword dimension: dimension list.
        :paramtype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: Required. ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter: Required.
        :paramtype data_source_parameter: ~azure.ai.metricsadvisor.models.AzureEventHubsParameter
        """
        super(AzureEventHubsDataFeed, self).__init__(**kwargs)
        self.data_source_type = 'AzureEventHubs'  # type: str
        self.data_source_parameter = kwargs['data_source_parameter']

class AzureEventHubsDataFeed(AzureEventHubsDataFeedCustomization, DataFeedDetail, _AzureEventHubsDataFeedGenerated):
    pass


class _AzureEventHubsDataFeedPatchGenerated(_DataFeedDetailPatchGenerated):
    """AzureEventHubsDataFeedPatch.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_name: data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter:
    :vartype data_source_parameter: ~azure.ai.metricsadvisor.models.AzureEventHubsParameterPatch
    """

    _validation = {
        'data_source_type': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'status': {'key': 'status', 'type': 'str'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'AzureEventHubsParameterPatch'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword status: data feed status. Possible values include: "Active", "Paused".
        :paramtype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter:
        :paramtype data_source_parameter: ~azure.ai.metricsadvisor.models.AzureEventHubsParameterPatch
        """
        super(AzureEventHubsDataFeedPatch, self).__init__(**kwargs)
        self.data_source_type = 'AzureEventHubs'  # type: str
        self.data_source_parameter = kwargs.get('data_source_parameter', None)

class AzureEventHubsDataFeedPatch(AzureEventHubsDataFeedPatchCustomization, DataFeedDetailPatch, _AzureEventHubsDataFeedPatchGenerated):
    pass


class _AzureEventHubsParameterGenerated(msrest.serialization.Model):
    """AzureEventHubsParameter.

    All required parameters must be populated in order to send to Azure.

    :ivar connection_string: The connection string of this Azure Event Hubs.
    :vartype connection_string: str
    :ivar consumer_group: Required. The consumer group to be used in this data feed.
    :vartype consumer_group: str
    """

    _validation = {
        'consumer_group': {'required': True},
    }

    _attribute_map = {
        'connection_string': {'key': 'connectionString', 'type': 'str'},
        'consumer_group': {'key': 'consumerGroup', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword connection_string: The connection string of this Azure Event Hubs.
        :paramtype connection_string: str
        :keyword consumer_group: Required. The consumer group to be used in this data feed.
        :paramtype consumer_group: str
        """
        super(AzureEventHubsParameter, self).__init__(**kwargs)
        self.connection_string = kwargs.get('connection_string', None)
        self.consumer_group = kwargs['consumer_group']

class AzureEventHubsParameter(AzureEventHubsParameterCustomization, _AzureEventHubsParameterGenerated):
    pass


class _AzureEventHubsParameterPatchGenerated(msrest.serialization.Model):
    """AzureEventHubsParameterPatch.

    :ivar connection_string: The connection string of this Azure Event Hubs.
    :vartype connection_string: str
    :ivar consumer_group: The consumer group to be used in this data feed.
    :vartype consumer_group: str
    """

    _attribute_map = {
        'connection_string': {'key': 'connectionString', 'type': 'str'},
        'consumer_group': {'key': 'consumerGroup', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword connection_string: The connection string of this Azure Event Hubs.
        :paramtype connection_string: str
        :keyword consumer_group: The consumer group to be used in this data feed.
        :paramtype consumer_group: str
        """
        super(AzureEventHubsParameterPatch, self).__init__(**kwargs)
        self.connection_string = kwargs.get('connection_string', None)
        self.consumer_group = kwargs.get('consumer_group', None)

class AzureEventHubsParameterPatch(AzureEventHubsParameterPatchCustomization, _AzureEventHubsParameterPatchGenerated):
    pass


class _AzureLogAnalyticsDataFeedGenerated(_DataFeedDetailGenerated):
    """AzureLogAnalyticsDataFeed.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_id: data feed unique id.
    :vartype data_feed_id: str
    :ivar data_feed_name: Required. data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar granularity_name: Required. granularity of the time series. Possible values include:
     "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
    :vartype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
    :ivar granularity_amount: if granularity is custom,it is required.
    :vartype granularity_amount: int
    :ivar metrics: Required. measure list.
    :vartype metrics: list[~azure.ai.metricsadvisor.models.Metric]
    :ivar dimension: dimension list.
    :vartype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: Required. ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar is_admin: the query user is one of data feed administrator or not.
    :vartype is_admin: bool
    :ivar creator: data feed creator.
    :vartype creator: str
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar created_time: data feed created time.
    :vartype created_time: ~datetime.datetime
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter: Required.
    :vartype data_source_parameter: ~azure.ai.metricsadvisor.models.AzureLogAnalyticsParameter
    """

    _validation = {
        'data_source_type': {'required': True},
        'data_feed_id': {'readonly': True},
        'data_feed_name': {'required': True},
        'granularity_name': {'required': True},
        'metrics': {'required': True, 'unique': True},
        'dimension': {'unique': True},
        'data_start_from': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
        'is_admin': {'readonly': True},
        'creator': {'readonly': True},
        'status': {'readonly': True},
        'created_time': {'readonly': True},
        'data_source_parameter': {'required': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_id': {'key': 'dataFeedId', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'granularity_name': {'key': 'granularityName', 'type': 'str'},
        'granularity_amount': {'key': 'granularityAmount', 'type': 'int'},
        'metrics': {'key': 'metrics', 'type': '[Metric]'},
        'dimension': {'key': 'dimension', 'type': '[Dimension]'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'is_admin': {'key': 'isAdmin', 'type': 'bool'},
        'creator': {'key': 'creator', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'AzureLogAnalyticsParameter'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: Required. data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword granularity_name: Required. granularity of the time series. Possible values include:
         "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
        :paramtype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
        :keyword granularity_amount: if granularity is custom,it is required.
        :paramtype granularity_amount: int
        :keyword metrics: Required. measure list.
        :paramtype metrics: list[~azure.ai.metricsadvisor.models.Metric]
        :keyword dimension: dimension list.
        :paramtype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: Required. ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter: Required.
        :paramtype data_source_parameter: ~azure.ai.metricsadvisor.models.AzureLogAnalyticsParameter
        """
        super(AzureLogAnalyticsDataFeed, self).__init__(**kwargs)
        self.data_source_type = 'AzureLogAnalytics'  # type: str
        self.data_source_parameter = kwargs['data_source_parameter']

class AzureLogAnalyticsDataFeed(AzureLogAnalyticsDataFeedCustomization, DataFeedDetail, _AzureLogAnalyticsDataFeedGenerated):
    pass


class _AzureLogAnalyticsDataFeedPatchGenerated(_DataFeedDetailPatchGenerated):
    """AzureLogAnalyticsDataFeedPatch.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_name: data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter:
    :vartype data_source_parameter: ~azure.ai.metricsadvisor.models.AzureLogAnalyticsParameterPatch
    """

    _validation = {
        'data_source_type': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'status': {'key': 'status', 'type': 'str'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'AzureLogAnalyticsParameterPatch'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword status: data feed status. Possible values include: "Active", "Paused".
        :paramtype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter:
        :paramtype data_source_parameter:
         ~azure.ai.metricsadvisor.models.AzureLogAnalyticsParameterPatch
        """
        super(AzureLogAnalyticsDataFeedPatch, self).__init__(**kwargs)
        self.data_source_type = 'AzureLogAnalytics'  # type: str
        self.data_source_parameter = kwargs.get('data_source_parameter', None)

class AzureLogAnalyticsDataFeedPatch(AzureLogAnalyticsDataFeedPatchCustomization, DataFeedDetailPatch, _AzureLogAnalyticsDataFeedPatchGenerated):
    pass


class _AzureLogAnalyticsParameterGenerated(msrest.serialization.Model):
    """AzureLogAnalyticsParameter.

    All required parameters must be populated in order to send to Azure.

    :ivar tenant_id: The tenant id of service principal that have access to this Log Analytics.
    :vartype tenant_id: str
    :ivar client_id: The client id of service principal that have access to this Log Analytics.
    :vartype client_id: str
    :ivar client_secret: The client secret of service principal that have access to this Log
     Analytics.
    :vartype client_secret: str
    :ivar workspace_id: Required. The workspace id of this Log Analytics.
    :vartype workspace_id: str
    :ivar query: Required. The KQL (Kusto Query Language) query to fetch data from this Log
     Analytics.
    :vartype query: str
    """

    _validation = {
        'workspace_id': {'required': True},
        'query': {'required': True},
    }

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'client_id': {'key': 'clientId', 'type': 'str'},
        'client_secret': {'key': 'clientSecret', 'type': 'str'},
        'workspace_id': {'key': 'workspaceId', 'type': 'str'},
        'query': {'key': 'query', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tenant_id: The tenant id of service principal that have access to this Log Analytics.
        :paramtype tenant_id: str
        :keyword client_id: The client id of service principal that have access to this Log Analytics.
        :paramtype client_id: str
        :keyword client_secret: The client secret of service principal that have access to this Log
         Analytics.
        :paramtype client_secret: str
        :keyword workspace_id: Required. The workspace id of this Log Analytics.
        :paramtype workspace_id: str
        :keyword query: Required. The KQL (Kusto Query Language) query to fetch data from this Log
         Analytics.
        :paramtype query: str
        """
        super(AzureLogAnalyticsParameter, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.client_id = kwargs.get('client_id', None)
        self.client_secret = kwargs.get('client_secret', None)
        self.workspace_id = kwargs['workspace_id']
        self.query = kwargs['query']

class AzureLogAnalyticsParameter(AzureLogAnalyticsParameterCustomization, _AzureLogAnalyticsParameterGenerated):
    pass


class _AzureLogAnalyticsParameterPatchGenerated(msrest.serialization.Model):
    """AzureLogAnalyticsParameterPatch.

    :ivar tenant_id: The tenant id of service principal that have access to this Log Analytics.
    :vartype tenant_id: str
    :ivar client_id: The client id of service principal that have access to this Log Analytics.
    :vartype client_id: str
    :ivar client_secret: The client secret of service principal that have access to this Log
     Analytics.
    :vartype client_secret: str
    :ivar workspace_id: The workspace id of this Log Analytics.
    :vartype workspace_id: str
    :ivar query: The KQL (Kusto Query Language) query to fetch data from this Log Analytics.
    :vartype query: str
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'client_id': {'key': 'clientId', 'type': 'str'},
        'client_secret': {'key': 'clientSecret', 'type': 'str'},
        'workspace_id': {'key': 'workspaceId', 'type': 'str'},
        'query': {'key': 'query', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tenant_id: The tenant id of service principal that have access to this Log Analytics.
        :paramtype tenant_id: str
        :keyword client_id: The client id of service principal that have access to this Log Analytics.
        :paramtype client_id: str
        :keyword client_secret: The client secret of service principal that have access to this Log
         Analytics.
        :paramtype client_secret: str
        :keyword workspace_id: The workspace id of this Log Analytics.
        :paramtype workspace_id: str
        :keyword query: The KQL (Kusto Query Language) query to fetch data from this Log Analytics.
        :paramtype query: str
        """
        super(AzureLogAnalyticsParameterPatch, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.client_id = kwargs.get('client_id', None)
        self.client_secret = kwargs.get('client_secret', None)
        self.workspace_id = kwargs.get('workspace_id', None)
        self.query = kwargs.get('query', None)

class AzureLogAnalyticsParameterPatch(AzureLogAnalyticsParameterPatchCustomization, _AzureLogAnalyticsParameterPatchGenerated):
    pass


class _DataSourceCredentialGenerated(msrest.serialization.Model):
    """DataSourceCredential.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AzureSQLConnectionStringCredential, DataLakeGen2SharedKeyCredential, ServicePrincipalCredential, ServicePrincipalInKVCredential.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_credential_type: Required. Type of data source credential.Constant filled by
     server. Possible values include: "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype data_source_credential_type: str or
     ~azure.ai.metricsadvisor.models.DataSourceCredentialType
    :ivar data_source_credential_id: Unique id of data source credential.
    :vartype data_source_credential_id: str
    :ivar data_source_credential_name: Required. Name of data source credential.
    :vartype data_source_credential_name: str
    :ivar data_source_credential_description: Description of data source credential.
    :vartype data_source_credential_description: str
    """

    _validation = {
        'data_source_credential_type': {'required': True},
        'data_source_credential_id': {'readonly': True},
        'data_source_credential_name': {'required': True},
    }

    _attribute_map = {
        'data_source_credential_type': {'key': 'dataSourceCredentialType', 'type': 'str'},
        'data_source_credential_id': {'key': 'dataSourceCredentialId', 'type': 'str'},
        'data_source_credential_name': {'key': 'dataSourceCredentialName', 'type': 'str'},
        'data_source_credential_description': {'key': 'dataSourceCredentialDescription', 'type': 'str'},
    }

    _subtype_map = {
        'data_source_credential_type': {'AzureSQLConnectionString': 'AzureSQLConnectionStringCredential', 'DataLakeGen2SharedKey': 'DataLakeGen2SharedKeyCredential', 'ServicePrincipal': 'ServicePrincipalCredential', 'ServicePrincipalInKV': 'ServicePrincipalInKVCredential'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_source_credential_name: Required. Name of data source credential.
        :paramtype data_source_credential_name: str
        :keyword data_source_credential_description: Description of data source credential.
        :paramtype data_source_credential_description: str
        """
        super(DataSourceCredential, self).__init__(**kwargs)
        self.data_source_credential_type = None  # type: Optional[str]
        self.data_source_credential_id = None
        self.data_source_credential_name = kwargs['data_source_credential_name']
        self.data_source_credential_description = kwargs.get('data_source_credential_description', None)

class DataSourceCredential(DataSourceCredentialCustomization, _DataSourceCredentialGenerated):
    pass


class _AzureSQLConnectionStringCredentialGenerated(_DataSourceCredentialGenerated):
    """AzureSQLConnectionStringCredential.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_credential_type: Required. Type of data source credential.Constant filled by
     server. Possible values include: "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype data_source_credential_type: str or
     ~azure.ai.metricsadvisor.models.DataSourceCredentialType
    :ivar data_source_credential_id: Unique id of data source credential.
    :vartype data_source_credential_id: str
    :ivar data_source_credential_name: Required. Name of data source credential.
    :vartype data_source_credential_name: str
    :ivar data_source_credential_description: Description of data source credential.
    :vartype data_source_credential_description: str
    :ivar parameters: Required.
    :vartype parameters: ~azure.ai.metricsadvisor.models.AzureSQLConnectionStringParam
    """

    _validation = {
        'data_source_credential_type': {'required': True},
        'data_source_credential_id': {'readonly': True},
        'data_source_credential_name': {'required': True},
        'parameters': {'required': True},
    }

    _attribute_map = {
        'data_source_credential_type': {'key': 'dataSourceCredentialType', 'type': 'str'},
        'data_source_credential_id': {'key': 'dataSourceCredentialId', 'type': 'str'},
        'data_source_credential_name': {'key': 'dataSourceCredentialName', 'type': 'str'},
        'data_source_credential_description': {'key': 'dataSourceCredentialDescription', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': 'AzureSQLConnectionStringParam'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_source_credential_name: Required. Name of data source credential.
        :paramtype data_source_credential_name: str
        :keyword data_source_credential_description: Description of data source credential.
        :paramtype data_source_credential_description: str
        :keyword parameters: Required.
        :paramtype parameters: ~azure.ai.metricsadvisor.models.AzureSQLConnectionStringParam
        """
        super(AzureSQLConnectionStringCredential, self).__init__(**kwargs)
        self.data_source_credential_type = 'AzureSQLConnectionString'  # type: str
        self.parameters = kwargs['parameters']

class AzureSQLConnectionStringCredential(AzureSQLConnectionStringCredentialCustomization, DataSourceCredential, _AzureSQLConnectionStringCredentialGenerated):
    pass


class _DataSourceCredentialPatchGenerated(msrest.serialization.Model):
    """DataSourceCredentialPatch.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AzureSQLConnectionStringCredentialPatch, DataLakeGen2SharedKeyCredentialPatch, ServicePrincipalCredentialPatch, ServicePrincipalInKVCredentialPatch.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_credential_type: Required. Type of data source credential.Constant filled by
     server. Possible values include: "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype data_source_credential_type: str or
     ~azure.ai.metricsadvisor.models.DataSourceCredentialType
    :ivar data_source_credential_name: Name of data source credential.
    :vartype data_source_credential_name: str
    :ivar data_source_credential_description: Description of data source credential.
    :vartype data_source_credential_description: str
    """

    _validation = {
        'data_source_credential_type': {'required': True},
    }

    _attribute_map = {
        'data_source_credential_type': {'key': 'dataSourceCredentialType', 'type': 'str'},
        'data_source_credential_name': {'key': 'dataSourceCredentialName', 'type': 'str'},
        'data_source_credential_description': {'key': 'dataSourceCredentialDescription', 'type': 'str'},
    }

    _subtype_map = {
        'data_source_credential_type': {'AzureSQLConnectionString': 'AzureSQLConnectionStringCredentialPatch', 'DataLakeGen2SharedKey': 'DataLakeGen2SharedKeyCredentialPatch', 'ServicePrincipal': 'ServicePrincipalCredentialPatch', 'ServicePrincipalInKV': 'ServicePrincipalInKVCredentialPatch'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_source_credential_name: Name of data source credential.
        :paramtype data_source_credential_name: str
        :keyword data_source_credential_description: Description of data source credential.
        :paramtype data_source_credential_description: str
        """
        super(DataSourceCredentialPatch, self).__init__(**kwargs)
        self.data_source_credential_type = None  # type: Optional[str]
        self.data_source_credential_name = kwargs.get('data_source_credential_name', None)
        self.data_source_credential_description = kwargs.get('data_source_credential_description', None)

class DataSourceCredentialPatch(DataSourceCredentialPatchCustomization, _DataSourceCredentialPatchGenerated):
    pass


class _AzureSQLConnectionStringCredentialPatchGenerated(_DataSourceCredentialPatchGenerated):
    """AzureSQLConnectionStringCredentialPatch.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_credential_type: Required. Type of data source credential.Constant filled by
     server. Possible values include: "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype data_source_credential_type: str or
     ~azure.ai.metricsadvisor.models.DataSourceCredentialType
    :ivar data_source_credential_name: Name of data source credential.
    :vartype data_source_credential_name: str
    :ivar data_source_credential_description: Description of data source credential.
    :vartype data_source_credential_description: str
    :ivar parameters:
    :vartype parameters: ~azure.ai.metricsadvisor.models.AzureSQLConnectionStringParamPatch
    """

    _validation = {
        'data_source_credential_type': {'required': True},
    }

    _attribute_map = {
        'data_source_credential_type': {'key': 'dataSourceCredentialType', 'type': 'str'},
        'data_source_credential_name': {'key': 'dataSourceCredentialName', 'type': 'str'},
        'data_source_credential_description': {'key': 'dataSourceCredentialDescription', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': 'AzureSQLConnectionStringParamPatch'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_source_credential_name: Name of data source credential.
        :paramtype data_source_credential_name: str
        :keyword data_source_credential_description: Description of data source credential.
        :paramtype data_source_credential_description: str
        :keyword parameters:
        :paramtype parameters: ~azure.ai.metricsadvisor.models.AzureSQLConnectionStringParamPatch
        """
        super(AzureSQLConnectionStringCredentialPatch, self).__init__(**kwargs)
        self.data_source_credential_type = 'AzureSQLConnectionString'  # type: str
        self.parameters = kwargs.get('parameters', None)

class AzureSQLConnectionStringCredentialPatch(AzureSQLConnectionStringCredentialPatchCustomization, DataSourceCredentialPatch, _AzureSQLConnectionStringCredentialPatchGenerated):
    pass


class _AzureSQLConnectionStringParamGenerated(msrest.serialization.Model):
    """AzureSQLConnectionStringParam.

    :ivar connection_string: The connection string to access the Azure SQL.
    :vartype connection_string: str
    """

    _attribute_map = {
        'connection_string': {'key': 'connectionString', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword connection_string: The connection string to access the Azure SQL.
        :paramtype connection_string: str
        """
        super(AzureSQLConnectionStringParam, self).__init__(**kwargs)
        self.connection_string = kwargs.get('connection_string', None)

class AzureSQLConnectionStringParam(AzureSQLConnectionStringParamCustomization, _AzureSQLConnectionStringParamGenerated):
    pass


class _AzureSQLConnectionStringParamPatchGenerated(msrest.serialization.Model):
    """AzureSQLConnectionStringParamPatch.

    :ivar connection_string: The connection string to access the Azure SQL.
    :vartype connection_string: str
    """

    _attribute_map = {
        'connection_string': {'key': 'connectionString', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword connection_string: The connection string to access the Azure SQL.
        :paramtype connection_string: str
        """
        super(AzureSQLConnectionStringParamPatch, self).__init__(**kwargs)
        self.connection_string = kwargs.get('connection_string', None)

class AzureSQLConnectionStringParamPatch(AzureSQLConnectionStringParamPatchCustomization, _AzureSQLConnectionStringParamPatchGenerated):
    pass


class _AzureTableDataFeedGenerated(_DataFeedDetailGenerated):
    """AzureTableDataFeed.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_id: data feed unique id.
    :vartype data_feed_id: str
    :ivar data_feed_name: Required. data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar granularity_name: Required. granularity of the time series. Possible values include:
     "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
    :vartype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
    :ivar granularity_amount: if granularity is custom,it is required.
    :vartype granularity_amount: int
    :ivar metrics: Required. measure list.
    :vartype metrics: list[~azure.ai.metricsadvisor.models.Metric]
    :ivar dimension: dimension list.
    :vartype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: Required. ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar is_admin: the query user is one of data feed administrator or not.
    :vartype is_admin: bool
    :ivar creator: data feed creator.
    :vartype creator: str
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar created_time: data feed created time.
    :vartype created_time: ~datetime.datetime
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter: Required.
    :vartype data_source_parameter: ~azure.ai.metricsadvisor.models.AzureTableParameter
    """

    _validation = {
        'data_source_type': {'required': True},
        'data_feed_id': {'readonly': True},
        'data_feed_name': {'required': True},
        'granularity_name': {'required': True},
        'metrics': {'required': True, 'unique': True},
        'dimension': {'unique': True},
        'data_start_from': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
        'is_admin': {'readonly': True},
        'creator': {'readonly': True},
        'status': {'readonly': True},
        'created_time': {'readonly': True},
        'data_source_parameter': {'required': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_id': {'key': 'dataFeedId', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'granularity_name': {'key': 'granularityName', 'type': 'str'},
        'granularity_amount': {'key': 'granularityAmount', 'type': 'int'},
        'metrics': {'key': 'metrics', 'type': '[Metric]'},
        'dimension': {'key': 'dimension', 'type': '[Dimension]'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'is_admin': {'key': 'isAdmin', 'type': 'bool'},
        'creator': {'key': 'creator', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'AzureTableParameter'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: Required. data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword granularity_name: Required. granularity of the time series. Possible values include:
         "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
        :paramtype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
        :keyword granularity_amount: if granularity is custom,it is required.
        :paramtype granularity_amount: int
        :keyword metrics: Required. measure list.
        :paramtype metrics: list[~azure.ai.metricsadvisor.models.Metric]
        :keyword dimension: dimension list.
        :paramtype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: Required. ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter: Required.
        :paramtype data_source_parameter: ~azure.ai.metricsadvisor.models.AzureTableParameter
        """
        super(AzureTableDataFeed, self).__init__(**kwargs)
        self.data_source_type = 'AzureTable'  # type: str
        self.data_source_parameter = kwargs['data_source_parameter']

class AzureTableDataFeed(AzureTableDataFeedCustomization, DataFeedDetail, _AzureTableDataFeedGenerated):
    pass


class _AzureTableDataFeedPatchGenerated(_DataFeedDetailPatchGenerated):
    """AzureTableDataFeedPatch.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_name: data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter:
    :vartype data_source_parameter: ~azure.ai.metricsadvisor.models.AzureTableParameterPatch
    """

    _validation = {
        'data_source_type': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'status': {'key': 'status', 'type': 'str'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'AzureTableParameterPatch'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword status: data feed status. Possible values include: "Active", "Paused".
        :paramtype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter:
        :paramtype data_source_parameter: ~azure.ai.metricsadvisor.models.AzureTableParameterPatch
        """
        super(AzureTableDataFeedPatch, self).__init__(**kwargs)
        self.data_source_type = 'AzureTable'  # type: str
        self.data_source_parameter = kwargs.get('data_source_parameter', None)

class AzureTableDataFeedPatch(AzureTableDataFeedPatchCustomization, DataFeedDetailPatch, _AzureTableDataFeedPatchGenerated):
    pass


class _AzureTableParameterGenerated(msrest.serialization.Model):
    """AzureTableParameter.

    All required parameters must be populated in order to send to Azure.

    :ivar connection_string: The connection string of this Azure Table.
    :vartype connection_string: str
    :ivar table: Required. A table name in this Azure Table.
    :vartype table: str
    :ivar query: Required. The statement to query this table. Please find syntax and details from
     Azure Table documents.
    :vartype query: str
    """

    _validation = {
        'table': {'required': True},
        'query': {'required': True},
    }

    _attribute_map = {
        'connection_string': {'key': 'connectionString', 'type': 'str'},
        'table': {'key': 'table', 'type': 'str'},
        'query': {'key': 'query', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword connection_string: The connection string of this Azure Table.
        :paramtype connection_string: str
        :keyword table: Required. A table name in this Azure Table.
        :paramtype table: str
        :keyword query: Required. The statement to query this table. Please find syntax and details
         from Azure Table documents.
        :paramtype query: str
        """
        super(AzureTableParameter, self).__init__(**kwargs)
        self.connection_string = kwargs.get('connection_string', None)
        self.table = kwargs['table']
        self.query = kwargs['query']

class AzureTableParameter(AzureTableParameterCustomization, _AzureTableParameterGenerated):
    pass


class _AzureTableParameterPatchGenerated(msrest.serialization.Model):
    """AzureTableParameterPatch.

    :ivar connection_string: The connection string of this Azure Table.
    :vartype connection_string: str
    :ivar table: A table name in this Azure Table.
    :vartype table: str
    :ivar query: The statement to query this table. Please find syntax and details from Azure Table
     documents.
    :vartype query: str
    """

    _attribute_map = {
        'connection_string': {'key': 'connectionString', 'type': 'str'},
        'table': {'key': 'table', 'type': 'str'},
        'query': {'key': 'query', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword connection_string: The connection string of this Azure Table.
        :paramtype connection_string: str
        :keyword table: A table name in this Azure Table.
        :paramtype table: str
        :keyword query: The statement to query this table. Please find syntax and details from Azure
         Table documents.
        :paramtype query: str
        """
        super(AzureTableParameterPatch, self).__init__(**kwargs)
        self.connection_string = kwargs.get('connection_string', None)
        self.table = kwargs.get('table', None)
        self.query = kwargs.get('query', None)

class AzureTableParameterPatch(AzureTableParameterPatchCustomization, _AzureTableParameterPatchGenerated):
    pass


class _ChangePointFeedbackGenerated(_MetricFeedbackGenerated):
    """ChangePointFeedback.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar feedback_type: Required. feedback type.Constant filled by server. Possible values
     include: "Anomaly", "ChangePoint", "Period", "Comment".
    :vartype feedback_type: str or ~azure.ai.metricsadvisor.models.FeedbackType
    :ivar feedback_id: feedback unique id.
    :vartype feedback_id: str
    :ivar created_time: feedback created time.
    :vartype created_time: ~datetime.datetime
    :ivar user_principal: user who gives this feedback.
    :vartype user_principal: str
    :ivar metric_id: Required. metric unique id.
    :vartype metric_id: str
    :ivar dimension_filter: Required.
    :vartype dimension_filter: ~azure.ai.metricsadvisor.models.FeedbackDimensionFilter
    :ivar start_time: Required. the start timestamp of feedback time range.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Required. the end timestamp of feedback time range, when equals to startTime
     means only one timestamp.
    :vartype end_time: ~datetime.datetime
    :ivar value: Required.
    :vartype value: ~azure.ai.metricsadvisor.models.ChangePointFeedbackValue
    """

    _validation = {
        'feedback_type': {'required': True},
        'feedback_id': {'readonly': True},
        'created_time': {'readonly': True},
        'user_principal': {'readonly': True},
        'metric_id': {'required': True},
        'dimension_filter': {'required': True},
        'start_time': {'required': True},
        'end_time': {'required': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'feedback_type': {'key': 'feedbackType', 'type': 'str'},
        'feedback_id': {'key': 'feedbackId', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'user_principal': {'key': 'userPrincipal', 'type': 'str'},
        'metric_id': {'key': 'metricId', 'type': 'str'},
        'dimension_filter': {'key': 'dimensionFilter', 'type': 'FeedbackDimensionFilter'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'value': {'key': 'value', 'type': 'ChangePointFeedbackValue'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword metric_id: Required. metric unique id.
        :paramtype metric_id: str
        :keyword dimension_filter: Required.
        :paramtype dimension_filter: ~azure.ai.metricsadvisor.models.FeedbackDimensionFilter
        :keyword start_time: Required. the start timestamp of feedback time range.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: Required. the end timestamp of feedback time range, when equals to startTime
         means only one timestamp.
        :paramtype end_time: ~datetime.datetime
        :keyword value: Required.
        :paramtype value: ~azure.ai.metricsadvisor.models.ChangePointFeedbackValue
        """
        super(ChangePointFeedback, self).__init__(**kwargs)
        self.feedback_type = 'ChangePoint'  # type: str
        self.start_time = kwargs['start_time']
        self.end_time = kwargs['end_time']
        self.value = kwargs['value']

class ChangePointFeedback(ChangePointFeedbackCustomization, MetricFeedback, _ChangePointFeedbackGenerated):
    pass


class _ChangePointFeedbackValueGenerated(msrest.serialization.Model):
    """ChangePointFeedbackValue.

    All required parameters must be populated in order to send to Azure.

    :ivar change_point_value: Required. Possible values include: "AutoDetect", "ChangePoint",
     "NotChangePoint".
    :vartype change_point_value: str or ~azure.ai.metricsadvisor.models.ChangePointValue
    """

    _validation = {
        'change_point_value': {'required': True},
    }

    _attribute_map = {
        'change_point_value': {'key': 'changePointValue', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword change_point_value: Required. Possible values include: "AutoDetect", "ChangePoint",
         "NotChangePoint".
        :paramtype change_point_value: str or ~azure.ai.metricsadvisor.models.ChangePointValue
        """
        super(ChangePointFeedbackValue, self).__init__(**kwargs)
        self.change_point_value = kwargs['change_point_value']

class ChangePointFeedbackValue(ChangePointFeedbackValueCustomization, _ChangePointFeedbackValueGenerated):
    pass


class _ChangeThresholdConditionGenerated(msrest.serialization.Model):
    """ChangeThresholdCondition.

    All required parameters must be populated in order to send to Azure.

    :ivar change_percentage: Required. change percentage, value range : [0, +∞).
    :vartype change_percentage: float
    :ivar shift_point: Required. shift point, value range : [1, +∞).
    :vartype shift_point: int
    :ivar within_range: Required. if the withinRange = true, detected data is abnormal when the
     value falls in the range, in this case anomalyDetectorDirection must be Both
     if the withinRange = false, detected data is abnormal when the value falls out of the range.
    :vartype within_range: bool
    :ivar anomaly_detector_direction: Required. detection direction. Possible values include:
     "Both", "Down", "Up".
    :vartype anomaly_detector_direction: str or
     ~azure.ai.metricsadvisor.models.AnomalyDetectorDirection
    :ivar suppress_condition: Required.
    :vartype suppress_condition: ~azure.ai.metricsadvisor.models.SuppressCondition
    """

    _validation = {
        'change_percentage': {'required': True},
        'shift_point': {'required': True},
        'within_range': {'required': True},
        'anomaly_detector_direction': {'required': True},
        'suppress_condition': {'required': True},
    }

    _attribute_map = {
        'change_percentage': {'key': 'changePercentage', 'type': 'float'},
        'shift_point': {'key': 'shiftPoint', 'type': 'int'},
        'within_range': {'key': 'withinRange', 'type': 'bool'},
        'anomaly_detector_direction': {'key': 'anomalyDetectorDirection', 'type': 'str'},
        'suppress_condition': {'key': 'suppressCondition', 'type': 'SuppressCondition'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword change_percentage: Required. change percentage, value range : [0, +∞).
        :paramtype change_percentage: float
        :keyword shift_point: Required. shift point, value range : [1, +∞).
        :paramtype shift_point: int
        :keyword within_range: Required. if the withinRange = true, detected data is abnormal when the
         value falls in the range, in this case anomalyDetectorDirection must be Both
         if the withinRange = false, detected data is abnormal when the value falls out of the range.
        :paramtype within_range: bool
        :keyword anomaly_detector_direction: Required. detection direction. Possible values include:
         "Both", "Down", "Up".
        :paramtype anomaly_detector_direction: str or
         ~azure.ai.metricsadvisor.models.AnomalyDetectorDirection
        :keyword suppress_condition: Required.
        :paramtype suppress_condition: ~azure.ai.metricsadvisor.models.SuppressCondition
        """
        super(ChangeThresholdCondition, self).__init__(**kwargs)
        self.change_percentage = kwargs['change_percentage']
        self.shift_point = kwargs['shift_point']
        self.within_range = kwargs['within_range']
        self.anomaly_detector_direction = kwargs['anomaly_detector_direction']
        self.suppress_condition = kwargs['suppress_condition']

class ChangeThresholdCondition(ChangeThresholdConditionCustomization, _ChangeThresholdConditionGenerated):
    pass


class _ChangeThresholdConditionPatchGenerated(msrest.serialization.Model):
    """ChangeThresholdConditionPatch.

    :ivar change_percentage: change percentage, value range : [0, +∞).
    :vartype change_percentage: float
    :ivar shift_point: shift point, value range : [1, +∞).
    :vartype shift_point: int
    :ivar within_range: if the withinRange = true, detected data is abnormal when the value falls
     in the range, in this case anomalyDetectorDirection must be Both
     if the withinRange = false, detected data is abnormal when the value falls out of the range.
    :vartype within_range: bool
    :ivar anomaly_detector_direction: detection direction. Possible values include: "Both", "Down",
     "Up".
    :vartype anomaly_detector_direction: str or
     ~azure.ai.metricsadvisor.models.AnomalyDetectorDirection
    :ivar suppress_condition:
    :vartype suppress_condition: ~azure.ai.metricsadvisor.models.SuppressConditionPatch
    """

    _attribute_map = {
        'change_percentage': {'key': 'changePercentage', 'type': 'float'},
        'shift_point': {'key': 'shiftPoint', 'type': 'int'},
        'within_range': {'key': 'withinRange', 'type': 'bool'},
        'anomaly_detector_direction': {'key': 'anomalyDetectorDirection', 'type': 'str'},
        'suppress_condition': {'key': 'suppressCondition', 'type': 'SuppressConditionPatch'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword change_percentage: change percentage, value range : [0, +∞).
        :paramtype change_percentage: float
        :keyword shift_point: shift point, value range : [1, +∞).
        :paramtype shift_point: int
        :keyword within_range: if the withinRange = true, detected data is abnormal when the value
         falls in the range, in this case anomalyDetectorDirection must be Both
         if the withinRange = false, detected data is abnormal when the value falls out of the range.
        :paramtype within_range: bool
        :keyword anomaly_detector_direction: detection direction. Possible values include: "Both",
         "Down", "Up".
        :paramtype anomaly_detector_direction: str or
         ~azure.ai.metricsadvisor.models.AnomalyDetectorDirection
        :keyword suppress_condition:
        :paramtype suppress_condition: ~azure.ai.metricsadvisor.models.SuppressConditionPatch
        """
        super(ChangeThresholdConditionPatch, self).__init__(**kwargs)
        self.change_percentage = kwargs.get('change_percentage', None)
        self.shift_point = kwargs.get('shift_point', None)
        self.within_range = kwargs.get('within_range', None)
        self.anomaly_detector_direction = kwargs.get('anomaly_detector_direction', None)
        self.suppress_condition = kwargs.get('suppress_condition', None)

class ChangeThresholdConditionPatch(ChangeThresholdConditionPatchCustomization, _ChangeThresholdConditionPatchGenerated):
    pass


class _CommentFeedbackGenerated(_MetricFeedbackGenerated):
    """CommentFeedback.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar feedback_type: Required. feedback type.Constant filled by server. Possible values
     include: "Anomaly", "ChangePoint", "Period", "Comment".
    :vartype feedback_type: str or ~azure.ai.metricsadvisor.models.FeedbackType
    :ivar feedback_id: feedback unique id.
    :vartype feedback_id: str
    :ivar created_time: feedback created time.
    :vartype created_time: ~datetime.datetime
    :ivar user_principal: user who gives this feedback.
    :vartype user_principal: str
    :ivar metric_id: Required. metric unique id.
    :vartype metric_id: str
    :ivar dimension_filter: Required.
    :vartype dimension_filter: ~azure.ai.metricsadvisor.models.FeedbackDimensionFilter
    :ivar start_time: the start timestamp of feedback time range.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: the end timestamp of feedback time range, when equals to startTime means only
     one timestamp.
    :vartype end_time: ~datetime.datetime
    :ivar value: Required.
    :vartype value: ~azure.ai.metricsadvisor.models.CommentFeedbackValue
    """

    _validation = {
        'feedback_type': {'required': True},
        'feedback_id': {'readonly': True},
        'created_time': {'readonly': True},
        'user_principal': {'readonly': True},
        'metric_id': {'required': True},
        'dimension_filter': {'required': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'feedback_type': {'key': 'feedbackType', 'type': 'str'},
        'feedback_id': {'key': 'feedbackId', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'user_principal': {'key': 'userPrincipal', 'type': 'str'},
        'metric_id': {'key': 'metricId', 'type': 'str'},
        'dimension_filter': {'key': 'dimensionFilter', 'type': 'FeedbackDimensionFilter'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'value': {'key': 'value', 'type': 'CommentFeedbackValue'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword metric_id: Required. metric unique id.
        :paramtype metric_id: str
        :keyword dimension_filter: Required.
        :paramtype dimension_filter: ~azure.ai.metricsadvisor.models.FeedbackDimensionFilter
        :keyword start_time: the start timestamp of feedback time range.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: the end timestamp of feedback time range, when equals to startTime means
         only one timestamp.
        :paramtype end_time: ~datetime.datetime
        :keyword value: Required.
        :paramtype value: ~azure.ai.metricsadvisor.models.CommentFeedbackValue
        """
        super(CommentFeedback, self).__init__(**kwargs)
        self.feedback_type = 'Comment'  # type: str
        self.start_time = kwargs.get('start_time', None)
        self.end_time = kwargs.get('end_time', None)
        self.value = kwargs['value']

class CommentFeedback(CommentFeedbackCustomization, MetricFeedback, _CommentFeedbackGenerated):
    pass


class _CommentFeedbackValueGenerated(msrest.serialization.Model):
    """CommentFeedbackValue.

    All required parameters must be populated in order to send to Azure.

    :ivar comment_value: Required. the comment string.
    :vartype comment_value: str
    """

    _validation = {
        'comment_value': {'required': True},
    }

    _attribute_map = {
        'comment_value': {'key': 'commentValue', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword comment_value: Required. the comment string.
        :paramtype comment_value: str
        """
        super(CommentFeedbackValue, self).__init__(**kwargs)
        self.comment_value = kwargs['comment_value']

class CommentFeedbackValue(CommentFeedbackValueCustomization, _CommentFeedbackValueGenerated):
    pass


class _DataFeedIngestionProgressGenerated(msrest.serialization.Model):
    """DataFeedIngestionProgress.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar latest_success_timestamp: the timestamp of latest success ingestion job.
     null indicates not available.
    :vartype latest_success_timestamp: ~datetime.datetime
    :ivar latest_active_timestamp: the timestamp of latest ingestion job with status update.
     null indicates not available.
    :vartype latest_active_timestamp: ~datetime.datetime
    """

    _validation = {
        'latest_success_timestamp': {'readonly': True},
        'latest_active_timestamp': {'readonly': True},
    }

    _attribute_map = {
        'latest_success_timestamp': {'key': 'latestSuccessTimestamp', 'type': 'iso-8601'},
        'latest_active_timestamp': {'key': 'latestActiveTimestamp', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(DataFeedIngestionProgress, self).__init__(**kwargs)
        self.latest_success_timestamp = None
        self.latest_active_timestamp = None

class DataFeedIngestionProgress(DataFeedIngestionProgressCustomization, _DataFeedIngestionProgressGenerated):
    pass


class _DataFeedListGenerated(msrest.serialization.Model):
    """DataFeedList.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar next_link:
    :vartype next_link: str
    :ivar value:
    :vartype value: list[~azure.ai.metricsadvisor.models.DataFeedDetail]
    """

    _validation = {
        'next_link': {'readonly': True},
        'value': {'readonly': True},
    }

    _attribute_map = {
        'next_link': {'key': '@nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[DataFeedDetail]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(DataFeedList, self).__init__(**kwargs)
        self.next_link = None
        self.value = None

class DataFeedList(DataFeedListCustomization, _DataFeedListGenerated):
    pass


class _DataLakeGen2SharedKeyCredentialGenerated(_DataSourceCredentialGenerated):
    """DataLakeGen2SharedKeyCredential.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_credential_type: Required. Type of data source credential.Constant filled by
     server. Possible values include: "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype data_source_credential_type: str or
     ~azure.ai.metricsadvisor.models.DataSourceCredentialType
    :ivar data_source_credential_id: Unique id of data source credential.
    :vartype data_source_credential_id: str
    :ivar data_source_credential_name: Required. Name of data source credential.
    :vartype data_source_credential_name: str
    :ivar data_source_credential_description: Description of data source credential.
    :vartype data_source_credential_description: str
    :ivar parameters: Required.
    :vartype parameters: ~azure.ai.metricsadvisor.models.DataLakeGen2SharedKeyParam
    """

    _validation = {
        'data_source_credential_type': {'required': True},
        'data_source_credential_id': {'readonly': True},
        'data_source_credential_name': {'required': True},
        'parameters': {'required': True},
    }

    _attribute_map = {
        'data_source_credential_type': {'key': 'dataSourceCredentialType', 'type': 'str'},
        'data_source_credential_id': {'key': 'dataSourceCredentialId', 'type': 'str'},
        'data_source_credential_name': {'key': 'dataSourceCredentialName', 'type': 'str'},
        'data_source_credential_description': {'key': 'dataSourceCredentialDescription', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': 'DataLakeGen2SharedKeyParam'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_source_credential_name: Required. Name of data source credential.
        :paramtype data_source_credential_name: str
        :keyword data_source_credential_description: Description of data source credential.
        :paramtype data_source_credential_description: str
        :keyword parameters: Required.
        :paramtype parameters: ~azure.ai.metricsadvisor.models.DataLakeGen2SharedKeyParam
        """
        super(DataLakeGen2SharedKeyCredential, self).__init__(**kwargs)
        self.data_source_credential_type = 'DataLakeGen2SharedKey'  # type: str
        self.parameters = kwargs['parameters']

class DataLakeGen2SharedKeyCredential(DataLakeGen2SharedKeyCredentialCustomization, DataSourceCredential, _DataLakeGen2SharedKeyCredentialGenerated):
    pass


class _DataLakeGen2SharedKeyCredentialPatchGenerated(_DataSourceCredentialPatchGenerated):
    """DataLakeGen2SharedKeyCredentialPatch.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_credential_type: Required. Type of data source credential.Constant filled by
     server. Possible values include: "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype data_source_credential_type: str or
     ~azure.ai.metricsadvisor.models.DataSourceCredentialType
    :ivar data_source_credential_name: Name of data source credential.
    :vartype data_source_credential_name: str
    :ivar data_source_credential_description: Description of data source credential.
    :vartype data_source_credential_description: str
    :ivar parameters:
    :vartype parameters: ~azure.ai.metricsadvisor.models.DataLakeGen2SharedKeyParamPatch
    """

    _validation = {
        'data_source_credential_type': {'required': True},
    }

    _attribute_map = {
        'data_source_credential_type': {'key': 'dataSourceCredentialType', 'type': 'str'},
        'data_source_credential_name': {'key': 'dataSourceCredentialName', 'type': 'str'},
        'data_source_credential_description': {'key': 'dataSourceCredentialDescription', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': 'DataLakeGen2SharedKeyParamPatch'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_source_credential_name: Name of data source credential.
        :paramtype data_source_credential_name: str
        :keyword data_source_credential_description: Description of data source credential.
        :paramtype data_source_credential_description: str
        :keyword parameters:
        :paramtype parameters: ~azure.ai.metricsadvisor.models.DataLakeGen2SharedKeyParamPatch
        """
        super(DataLakeGen2SharedKeyCredentialPatch, self).__init__(**kwargs)
        self.data_source_credential_type = 'DataLakeGen2SharedKey'  # type: str
        self.parameters = kwargs.get('parameters', None)

class DataLakeGen2SharedKeyCredentialPatch(DataLakeGen2SharedKeyCredentialPatchCustomization, DataSourceCredentialPatch, _DataLakeGen2SharedKeyCredentialPatchGenerated):
    pass


class _DataLakeGen2SharedKeyParamGenerated(msrest.serialization.Model):
    """DataLakeGen2SharedKeyParam.

    :ivar account_key: The account key to access the Azure Data Lake Storage Gen2.
    :vartype account_key: str
    """

    _attribute_map = {
        'account_key': {'key': 'accountKey', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword account_key: The account key to access the Azure Data Lake Storage Gen2.
        :paramtype account_key: str
        """
        super(DataLakeGen2SharedKeyParam, self).__init__(**kwargs)
        self.account_key = kwargs.get('account_key', None)

class DataLakeGen2SharedKeyParam(DataLakeGen2SharedKeyParamCustomization, _DataLakeGen2SharedKeyParamGenerated):
    pass


class _DataLakeGen2SharedKeyParamPatchGenerated(msrest.serialization.Model):
    """DataLakeGen2SharedKeyParamPatch.

    :ivar account_key: The account key to access the Azure Data Lake Storage Gen2.
    :vartype account_key: str
    """

    _attribute_map = {
        'account_key': {'key': 'accountKey', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword account_key: The account key to access the Azure Data Lake Storage Gen2.
        :paramtype account_key: str
        """
        super(DataLakeGen2SharedKeyParamPatch, self).__init__(**kwargs)
        self.account_key = kwargs.get('account_key', None)

class DataLakeGen2SharedKeyParamPatch(DataLakeGen2SharedKeyParamPatchCustomization, _DataLakeGen2SharedKeyParamPatchGenerated):
    pass


class _DataSourceCredentialListGenerated(msrest.serialization.Model):
    """DataSourceCredentialList.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar next_link:
    :vartype next_link: str
    :ivar value:
    :vartype value: list[~azure.ai.metricsadvisor.models.DataSourceCredential]
    """

    _validation = {
        'next_link': {'readonly': True},
        'value': {'readonly': True, 'unique': True},
    }

    _attribute_map = {
        'next_link': {'key': '@nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[DataSourceCredential]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(DataSourceCredentialList, self).__init__(**kwargs)
        self.next_link = None
        self.value = None

class DataSourceCredentialList(DataSourceCredentialListCustomization, _DataSourceCredentialListGenerated):
    pass


class _DetectionAnomalyFilterConditionGenerated(msrest.serialization.Model):
    """DetectionAnomalyFilterCondition.

    :ivar dimension_filter: dimension filter.
    :vartype dimension_filter: list[~azure.ai.metricsadvisor.models.DimensionGroupIdentity]
    :ivar severity_filter:
    :vartype severity_filter: ~azure.ai.metricsadvisor.models.SeverityFilterCondition
    """

    _validation = {
        'dimension_filter': {'unique': True},
    }

    _attribute_map = {
        'dimension_filter': {'key': 'dimensionFilter', 'type': '[DimensionGroupIdentity]'},
        'severity_filter': {'key': 'severityFilter', 'type': 'SeverityFilterCondition'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword dimension_filter: dimension filter.
        :paramtype dimension_filter: list[~azure.ai.metricsadvisor.models.DimensionGroupIdentity]
        :keyword severity_filter:
        :paramtype severity_filter: ~azure.ai.metricsadvisor.models.SeverityFilterCondition
        """
        super(DetectionAnomalyFilterCondition, self).__init__(**kwargs)
        self.dimension_filter = kwargs.get('dimension_filter', None)
        self.severity_filter = kwargs.get('severity_filter', None)

class DetectionAnomalyFilterCondition(DetectionAnomalyFilterConditionCustomization, _DetectionAnomalyFilterConditionGenerated):
    pass


class _DetectionAnomalyResultQueryGenerated(msrest.serialization.Model):
    """DetectionAnomalyResultQuery.

    All required parameters must be populated in order to send to Azure.

    :ivar start_time: Required. start time.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Required. end time.
    :vartype end_time: ~datetime.datetime
    :ivar filter:
    :vartype filter: ~azure.ai.metricsadvisor.models.DetectionAnomalyFilterCondition
    """

    _validation = {
        'start_time': {'required': True},
        'end_time': {'required': True},
    }

    _attribute_map = {
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'filter': {'key': 'filter', 'type': 'DetectionAnomalyFilterCondition'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword start_time: Required. start time.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: Required. end time.
        :paramtype end_time: ~datetime.datetime
        :keyword filter:
        :paramtype filter: ~azure.ai.metricsadvisor.models.DetectionAnomalyFilterCondition
        """
        super(DetectionAnomalyResultQuery, self).__init__(**kwargs)
        self.start_time = kwargs['start_time']
        self.end_time = kwargs['end_time']
        self.filter = kwargs.get('filter', None)

class DetectionAnomalyResultQuery(DetectionAnomalyResultQueryCustomization, _DetectionAnomalyResultQueryGenerated):
    pass


class _DetectionIncidentFilterConditionGenerated(msrest.serialization.Model):
    """DetectionIncidentFilterCondition.

    :ivar dimension_filter: dimension filter.
    :vartype dimension_filter: list[~azure.ai.metricsadvisor.models.DimensionGroupIdentity]
    """

    _validation = {
        'dimension_filter': {'unique': True},
    }

    _attribute_map = {
        'dimension_filter': {'key': 'dimensionFilter', 'type': '[DimensionGroupIdentity]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword dimension_filter: dimension filter.
        :paramtype dimension_filter: list[~azure.ai.metricsadvisor.models.DimensionGroupIdentity]
        """
        super(DetectionIncidentFilterCondition, self).__init__(**kwargs)
        self.dimension_filter = kwargs.get('dimension_filter', None)

class DetectionIncidentFilterCondition(DetectionIncidentFilterConditionCustomization, _DetectionIncidentFilterConditionGenerated):
    pass


class _DetectionIncidentResultQueryGenerated(msrest.serialization.Model):
    """DetectionIncidentResultQuery.

    All required parameters must be populated in order to send to Azure.

    :ivar start_time: Required. start time.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Required. end time.
    :vartype end_time: ~datetime.datetime
    :ivar filter:
    :vartype filter: ~azure.ai.metricsadvisor.models.DetectionIncidentFilterCondition
    """

    _validation = {
        'start_time': {'required': True},
        'end_time': {'required': True},
    }

    _attribute_map = {
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'filter': {'key': 'filter', 'type': 'DetectionIncidentFilterCondition'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword start_time: Required. start time.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: Required. end time.
        :paramtype end_time: ~datetime.datetime
        :keyword filter:
        :paramtype filter: ~azure.ai.metricsadvisor.models.DetectionIncidentFilterCondition
        """
        super(DetectionIncidentResultQuery, self).__init__(**kwargs)
        self.start_time = kwargs['start_time']
        self.end_time = kwargs['end_time']
        self.filter = kwargs.get('filter', None)

class DetectionIncidentResultQuery(DetectionIncidentResultQueryCustomization, _DetectionIncidentResultQueryGenerated):
    pass


class _DetectionSeriesQueryGenerated(msrest.serialization.Model):
    """DetectionSeriesQuery.

    All required parameters must be populated in order to send to Azure.

    :ivar start_time: Required. This is inclusive. The maximum number of data points (series number
     * time range) is 10000.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Required. This is exclusive. The maximum number of data points (series number *
     time range) is 10000.
    :vartype end_time: ~datetime.datetime
    :ivar series: Required. The series to be queried. The identity must be able to define one
     single time series instead of a group of time series. The maximum number of series is 100.
    :vartype series: list[~azure.ai.metricsadvisor.models.SeriesIdentity]
    """

    _validation = {
        'start_time': {'required': True},
        'end_time': {'required': True},
        'series': {'required': True, 'unique': True},
    }

    _attribute_map = {
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'series': {'key': 'series', 'type': '[SeriesIdentity]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword start_time: Required. This is inclusive. The maximum number of data points (series
         number * time range) is 10000.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: Required. This is exclusive. The maximum number of data points (series
         number * time range) is 10000.
        :paramtype end_time: ~datetime.datetime
        :keyword series: Required. The series to be queried. The identity must be able to define one
         single time series instead of a group of time series. The maximum number of series is 100.
        :paramtype series: list[~azure.ai.metricsadvisor.models.SeriesIdentity]
        """
        super(DetectionSeriesQuery, self).__init__(**kwargs)
        self.start_time = kwargs['start_time']
        self.end_time = kwargs['end_time']
        self.series = kwargs['series']

class DetectionSeriesQuery(DetectionSeriesQueryCustomization, _DetectionSeriesQueryGenerated):
    pass


class _DimensionGenerated(msrest.serialization.Model):
    """Dimension.

    All required parameters must be populated in order to send to Azure.

    :ivar dimension_name: Required. dimension name.
    :vartype dimension_name: str
    :ivar dimension_display_name: dimension display name.
    :vartype dimension_display_name: str
    """

    _validation = {
        'dimension_name': {'required': True},
        'dimension_display_name': {'pattern': r'[.a-zA-Z0-9_-]+'},
    }

    _attribute_map = {
        'dimension_name': {'key': 'dimensionName', 'type': 'str'},
        'dimension_display_name': {'key': 'dimensionDisplayName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword dimension_name: Required. dimension name.
        :paramtype dimension_name: str
        :keyword dimension_display_name: dimension display name.
        :paramtype dimension_display_name: str
        """
        super(Dimension, self).__init__(**kwargs)
        self.dimension_name = kwargs['dimension_name']
        self.dimension_display_name = kwargs.get('dimension_display_name', None)

class Dimension(DimensionCustomization, _DimensionGenerated):
    pass


class _DimensionGroupConfigurationGenerated(msrest.serialization.Model):
    """DimensionGroupConfiguration.

    All required parameters must be populated in order to send to Azure.

    :ivar group: Required.
    :vartype group: ~azure.ai.metricsadvisor.models.DimensionGroupIdentity
    :ivar condition_operator: condition operator
    
     should be specified when combining multiple detection conditions. Possible values include:
     "AND", "OR".
    :vartype condition_operator: str or
     ~azure.ai.metricsadvisor.models.AnomalyDetectionConfigurationLogicType
    :ivar smart_detection_condition:
    :vartype smart_detection_condition: ~azure.ai.metricsadvisor.models.SmartDetectionCondition
    :ivar hard_threshold_condition:
    :vartype hard_threshold_condition: ~azure.ai.metricsadvisor.models.HardThresholdCondition
    :ivar change_threshold_condition:
    :vartype change_threshold_condition: ~azure.ai.metricsadvisor.models.ChangeThresholdCondition
    """

    _validation = {
        'group': {'required': True},
    }

    _attribute_map = {
        'group': {'key': 'group', 'type': 'DimensionGroupIdentity'},
        'condition_operator': {'key': 'conditionOperator', 'type': 'str'},
        'smart_detection_condition': {'key': 'smartDetectionCondition', 'type': 'SmartDetectionCondition'},
        'hard_threshold_condition': {'key': 'hardThresholdCondition', 'type': 'HardThresholdCondition'},
        'change_threshold_condition': {'key': 'changeThresholdCondition', 'type': 'ChangeThresholdCondition'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword group: Required.
        :paramtype group: ~azure.ai.metricsadvisor.models.DimensionGroupIdentity
        :keyword condition_operator: condition operator
        
         should be specified when combining multiple detection conditions. Possible values include:
         "AND", "OR".
        :paramtype condition_operator: str or
         ~azure.ai.metricsadvisor.models.AnomalyDetectionConfigurationLogicType
        :keyword smart_detection_condition:
        :paramtype smart_detection_condition: ~azure.ai.metricsadvisor.models.SmartDetectionCondition
        :keyword hard_threshold_condition:
        :paramtype hard_threshold_condition: ~azure.ai.metricsadvisor.models.HardThresholdCondition
        :keyword change_threshold_condition:
        :paramtype change_threshold_condition: ~azure.ai.metricsadvisor.models.ChangeThresholdCondition
        """
        super(DimensionGroupConfiguration, self).__init__(**kwargs)
        self.group = kwargs['group']
        self.condition_operator = kwargs.get('condition_operator', None)
        self.smart_detection_condition = kwargs.get('smart_detection_condition', None)
        self.hard_threshold_condition = kwargs.get('hard_threshold_condition', None)
        self.change_threshold_condition = kwargs.get('change_threshold_condition', None)

class DimensionGroupConfiguration(DimensionGroupConfigurationCustomization, _DimensionGroupConfigurationGenerated):
    pass


class _DimensionGroupIdentityGenerated(msrest.serialization.Model):
    """DimensionGroupIdentity.

    All required parameters must be populated in order to send to Azure.

    :ivar dimension: Required. dimension specified for series group.
    :vartype dimension: dict[str, str]
    """

    _validation = {
        'dimension': {'required': True},
    }

    _attribute_map = {
        'dimension': {'key': 'dimension', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword dimension: Required. dimension specified for series group.
        :paramtype dimension: dict[str, str]
        """
        super(DimensionGroupIdentity, self).__init__(**kwargs)
        self.dimension = kwargs['dimension']

class DimensionGroupIdentity(DimensionGroupIdentityCustomization, _DimensionGroupIdentityGenerated):
    pass


class _HookInfoGenerated(msrest.serialization.Model):
    """HookInfo.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: EmailHookInfo, WebhookHookInfo.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar hook_type: Required. hook type.Constant filled by server. Possible values include:
     "Webhook", "Email".
    :vartype hook_type: str or ~azure.ai.metricsadvisor.models.HookType
    :ivar hook_id: Hook unique id.
    :vartype hook_id: str
    :ivar hook_name: Required. hook unique name.
    :vartype hook_name: str
    :ivar description: hook description.
    :vartype description: str
    :ivar external_link: hook external link.
    :vartype external_link: str
    :ivar admins: hook administrators.
    :vartype admins: list[str]
    """

    _validation = {
        'hook_type': {'required': True},
        'hook_id': {'readonly': True},
        'hook_name': {'required': True},
        'admins': {'unique': True},
    }

    _attribute_map = {
        'hook_type': {'key': 'hookType', 'type': 'str'},
        'hook_id': {'key': 'hookId', 'type': 'str'},
        'hook_name': {'key': 'hookName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'external_link': {'key': 'externalLink', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
    }

    _subtype_map = {
        'hook_type': {'Email': 'EmailHookInfo', 'Webhook': 'WebhookHookInfo'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword hook_name: Required. hook unique name.
        :paramtype hook_name: str
        :keyword description: hook description.
        :paramtype description: str
        :keyword external_link: hook external link.
        :paramtype external_link: str
        :keyword admins: hook administrators.
        :paramtype admins: list[str]
        """
        super(HookInfo, self).__init__(**kwargs)
        self.hook_type = None  # type: Optional[str]
        self.hook_id = None
        self.hook_name = kwargs['hook_name']
        self.description = kwargs.get('description', "")
        self.external_link = kwargs.get('external_link', "")
        self.admins = kwargs.get('admins', None)

class HookInfo(HookInfoCustomization, _HookInfoGenerated):
    pass


class _EmailHookInfoGenerated(_HookInfoGenerated):
    """EmailHookInfo.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar hook_type: Required. hook type.Constant filled by server. Possible values include:
     "Webhook", "Email".
    :vartype hook_type: str or ~azure.ai.metricsadvisor.models.HookType
    :ivar hook_id: Hook unique id.
    :vartype hook_id: str
    :ivar hook_name: Required. hook unique name.
    :vartype hook_name: str
    :ivar description: hook description.
    :vartype description: str
    :ivar external_link: hook external link.
    :vartype external_link: str
    :ivar admins: hook administrators.
    :vartype admins: list[str]
    :ivar hook_parameter: Required.
    :vartype hook_parameter: ~azure.ai.metricsadvisor.models.EmailHookParameter
    """

    _validation = {
        'hook_type': {'required': True},
        'hook_id': {'readonly': True},
        'hook_name': {'required': True},
        'admins': {'unique': True},
        'hook_parameter': {'required': True},
    }

    _attribute_map = {
        'hook_type': {'key': 'hookType', 'type': 'str'},
        'hook_id': {'key': 'hookId', 'type': 'str'},
        'hook_name': {'key': 'hookName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'external_link': {'key': 'externalLink', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'hook_parameter': {'key': 'hookParameter', 'type': 'EmailHookParameter'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword hook_name: Required. hook unique name.
        :paramtype hook_name: str
        :keyword description: hook description.
        :paramtype description: str
        :keyword external_link: hook external link.
        :paramtype external_link: str
        :keyword admins: hook administrators.
        :paramtype admins: list[str]
        :keyword hook_parameter: Required.
        :paramtype hook_parameter: ~azure.ai.metricsadvisor.models.EmailHookParameter
        """
        super(EmailHookInfo, self).__init__(**kwargs)
        self.hook_type = 'Email'  # type: str
        self.hook_parameter = kwargs['hook_parameter']

class EmailHookInfo(EmailHookInfoCustomization, HookInfo, _EmailHookInfoGenerated):
    pass


class _HookInfoPatchGenerated(msrest.serialization.Model):
    """HookInfoPatch.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: EmailHookInfoPatch, WebhookHookInfoPatch.

    All required parameters must be populated in order to send to Azure.

    :ivar hook_type: Required. hook type.Constant filled by server. Possible values include:
     "Webhook", "Email".
    :vartype hook_type: str or ~azure.ai.metricsadvisor.models.HookType
    :ivar hook_name: hook unique name.
    :vartype hook_name: str
    :ivar description: hook description.
    :vartype description: str
    :ivar external_link: hook external link.
    :vartype external_link: str
    :ivar admins: hook administrators.
    :vartype admins: list[str]
    """

    _validation = {
        'hook_type': {'required': True},
        'admins': {'unique': True},
    }

    _attribute_map = {
        'hook_type': {'key': 'hookType', 'type': 'str'},
        'hook_name': {'key': 'hookName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'external_link': {'key': 'externalLink', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
    }

    _subtype_map = {
        'hook_type': {'Email': 'EmailHookInfoPatch', 'Webhook': 'WebhookHookInfoPatch'}
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword hook_name: hook unique name.
        :paramtype hook_name: str
        :keyword description: hook description.
        :paramtype description: str
        :keyword external_link: hook external link.
        :paramtype external_link: str
        :keyword admins: hook administrators.
        :paramtype admins: list[str]
        """
        super(HookInfoPatch, self).__init__(**kwargs)
        self.hook_type = None  # type: Optional[str]
        self.hook_name = kwargs.get('hook_name', None)
        self.description = kwargs.get('description', None)
        self.external_link = kwargs.get('external_link', None)
        self.admins = kwargs.get('admins', None)

class HookInfoPatch(HookInfoPatchCustomization, _HookInfoPatchGenerated):
    pass


class _EmailHookInfoPatchGenerated(_HookInfoPatchGenerated):
    """EmailHookInfoPatch.

    All required parameters must be populated in order to send to Azure.

    :ivar hook_type: Required. hook type.Constant filled by server. Possible values include:
     "Webhook", "Email".
    :vartype hook_type: str or ~azure.ai.metricsadvisor.models.HookType
    :ivar hook_name: hook unique name.
    :vartype hook_name: str
    :ivar description: hook description.
    :vartype description: str
    :ivar external_link: hook external link.
    :vartype external_link: str
    :ivar admins: hook administrators.
    :vartype admins: list[str]
    :ivar hook_parameter:
    :vartype hook_parameter: ~azure.ai.metricsadvisor.models.EmailHookParameterPatch
    """

    _validation = {
        'hook_type': {'required': True},
        'admins': {'unique': True},
    }

    _attribute_map = {
        'hook_type': {'key': 'hookType', 'type': 'str'},
        'hook_name': {'key': 'hookName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'external_link': {'key': 'externalLink', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'hook_parameter': {'key': 'hookParameter', 'type': 'EmailHookParameterPatch'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword hook_name: hook unique name.
        :paramtype hook_name: str
        :keyword description: hook description.
        :paramtype description: str
        :keyword external_link: hook external link.
        :paramtype external_link: str
        :keyword admins: hook administrators.
        :paramtype admins: list[str]
        :keyword hook_parameter:
        :paramtype hook_parameter: ~azure.ai.metricsadvisor.models.EmailHookParameterPatch
        """
        super(EmailHookInfoPatch, self).__init__(**kwargs)
        self.hook_type = 'Email'  # type: str
        self.hook_parameter = kwargs.get('hook_parameter', None)

class EmailHookInfoPatch(EmailHookInfoPatchCustomization, HookInfoPatch, _EmailHookInfoPatchGenerated):
    pass


class _EmailHookParameterGenerated(msrest.serialization.Model):
    """EmailHookParameter.

    All required parameters must be populated in order to send to Azure.

    :ivar to_list: Required. Email TO: list.
    :vartype to_list: list[str]
    """

    _validation = {
        'to_list': {'required': True, 'unique': True},
    }

    _attribute_map = {
        'to_list': {'key': 'toList', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword to_list: Required. Email TO: list.
        :paramtype to_list: list[str]
        """
        super(EmailHookParameter, self).__init__(**kwargs)
        self.to_list = kwargs['to_list']

class EmailHookParameter(EmailHookParameterCustomization, _EmailHookParameterGenerated):
    pass


class _EmailHookParameterPatchGenerated(msrest.serialization.Model):
    """EmailHookParameterPatch.

    :ivar to_list: Email TO: list.
    :vartype to_list: list[str]
    """

    _validation = {
        'to_list': {'unique': True},
    }

    _attribute_map = {
        'to_list': {'key': 'toList', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword to_list: Email TO: list.
        :paramtype to_list: list[str]
        """
        super(EmailHookParameterPatch, self).__init__(**kwargs)
        self.to_list = kwargs.get('to_list', None)

class EmailHookParameterPatch(EmailHookParameterPatchCustomization, _EmailHookParameterPatchGenerated):
    pass


class _EnrichmentStatusGenerated(msrest.serialization.Model):
    """EnrichmentStatus.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar timestamp: data slice timestamp.
    :vartype timestamp: ~datetime.datetime
    :ivar status: latest enrichment status for this data slice.
    :vartype status: str
    :ivar message: the trimmed message describes details of the enrichment status.
    :vartype message: str
    """

    _validation = {
        'timestamp': {'readonly': True},
        'status': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(EnrichmentStatus, self).__init__(**kwargs)
        self.timestamp = None
        self.status = None
        self.message = None

class EnrichmentStatus(EnrichmentStatusCustomization, _EnrichmentStatusGenerated):
    pass


class _EnrichmentStatusListGenerated(msrest.serialization.Model):
    """EnrichmentStatusList.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar next_link:
    :vartype next_link: str
    :ivar value:
    :vartype value: list[~azure.ai.metricsadvisor.models.EnrichmentStatus]
    """

    _validation = {
        'next_link': {'readonly': True},
        'value': {'readonly': True},
    }

    _attribute_map = {
        'next_link': {'key': '@nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[EnrichmentStatus]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(EnrichmentStatusList, self).__init__(**kwargs)
        self.next_link = None
        self.value = None

class EnrichmentStatusList(EnrichmentStatusListCustomization, _EnrichmentStatusListGenerated):
    pass


class _EnrichmentStatusQueryOptionGenerated(msrest.serialization.Model):
    """EnrichmentStatusQueryOption.

    All required parameters must be populated in order to send to Azure.

    :ivar start_time: Required. the start point of time range to query anomaly detection status.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Required. the end point of time range to query anomaly detection status.
    :vartype end_time: ~datetime.datetime
    """

    _validation = {
        'start_time': {'required': True},
        'end_time': {'required': True},
    }

    _attribute_map = {
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword start_time: Required. the start point of time range to query anomaly detection status.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: Required. the end point of time range to query anomaly detection status.
        :paramtype end_time: ~datetime.datetime
        """
        super(EnrichmentStatusQueryOption, self).__init__(**kwargs)
        self.start_time = kwargs['start_time']
        self.end_time = kwargs['end_time']

class EnrichmentStatusQueryOption(EnrichmentStatusQueryOptionCustomization, _EnrichmentStatusQueryOptionGenerated):
    pass


class _ErrorCodeGenerated(msrest.serialization.Model):
    """ErrorCode.

    :ivar message:
    :vartype message: str
    :ivar code:
    :vartype code: str
    """

    _attribute_map = {
        'message': {'key': 'message', 'type': 'str'},
        'code': {'key': 'code', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword message:
        :paramtype message: str
        :keyword code:
        :paramtype code: str
        """
        super(ErrorCode, self).__init__(**kwargs)
        self.message = kwargs.get('message', None)
        self.code = kwargs.get('code', None)

class ErrorCode(ErrorCodeCustomization, _ErrorCodeGenerated):
    pass


class _FeedbackDimensionFilterGenerated(msrest.serialization.Model):
    """FeedbackDimensionFilter.

    All required parameters must be populated in order to send to Azure.

    :ivar dimension: Required. metric dimension filter.
    :vartype dimension: dict[str, str]
    """

    _validation = {
        'dimension': {'required': True},
    }

    _attribute_map = {
        'dimension': {'key': 'dimension', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword dimension: Required. metric dimension filter.
        :paramtype dimension: dict[str, str]
        """
        super(FeedbackDimensionFilter, self).__init__(**kwargs)
        self.dimension = kwargs['dimension']

class FeedbackDimensionFilter(FeedbackDimensionFilterCustomization, _FeedbackDimensionFilterGenerated):
    pass


class _HardThresholdConditionGenerated(msrest.serialization.Model):
    """HardThresholdCondition.

    All required parameters must be populated in order to send to Azure.

    :ivar lower_bound: lower bound
    
     should be specified when anomalyDetectorDirection is Both or Down.
    :vartype lower_bound: float
    :ivar upper_bound: upper bound
    
     should be specified when anomalyDetectorDirection is Both or Up.
    :vartype upper_bound: float
    :ivar anomaly_detector_direction: Required. detection direction. Possible values include:
     "Both", "Down", "Up".
    :vartype anomaly_detector_direction: str or
     ~azure.ai.metricsadvisor.models.AnomalyDetectorDirection
    :ivar suppress_condition: Required.
    :vartype suppress_condition: ~azure.ai.metricsadvisor.models.SuppressCondition
    """

    _validation = {
        'anomaly_detector_direction': {'required': True},
        'suppress_condition': {'required': True},
    }

    _attribute_map = {
        'lower_bound': {'key': 'lowerBound', 'type': 'float'},
        'upper_bound': {'key': 'upperBound', 'type': 'float'},
        'anomaly_detector_direction': {'key': 'anomalyDetectorDirection', 'type': 'str'},
        'suppress_condition': {'key': 'suppressCondition', 'type': 'SuppressCondition'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword lower_bound: lower bound
        
         should be specified when anomalyDetectorDirection is Both or Down.
        :paramtype lower_bound: float
        :keyword upper_bound: upper bound
        
         should be specified when anomalyDetectorDirection is Both or Up.
        :paramtype upper_bound: float
        :keyword anomaly_detector_direction: Required. detection direction. Possible values include:
         "Both", "Down", "Up".
        :paramtype anomaly_detector_direction: str or
         ~azure.ai.metricsadvisor.models.AnomalyDetectorDirection
        :keyword suppress_condition: Required.
        :paramtype suppress_condition: ~azure.ai.metricsadvisor.models.SuppressCondition
        """
        super(HardThresholdCondition, self).__init__(**kwargs)
        self.lower_bound = kwargs.get('lower_bound', None)
        self.upper_bound = kwargs.get('upper_bound', None)
        self.anomaly_detector_direction = kwargs['anomaly_detector_direction']
        self.suppress_condition = kwargs['suppress_condition']

class HardThresholdCondition(HardThresholdConditionCustomization, _HardThresholdConditionGenerated):
    pass


class _HardThresholdConditionPatchGenerated(msrest.serialization.Model):
    """HardThresholdConditionPatch.

    :ivar lower_bound: lower bound
    
     should be specified when anomalyDetectorDirection is Both or Down.
    :vartype lower_bound: float
    :ivar upper_bound: upper bound
    
     should be specified when anomalyDetectorDirection is Both or Up.
    :vartype upper_bound: float
    :ivar anomaly_detector_direction: detection direction. Possible values include: "Both", "Down",
     "Up".
    :vartype anomaly_detector_direction: str or
     ~azure.ai.metricsadvisor.models.AnomalyDetectorDirection
    :ivar suppress_condition:
    :vartype suppress_condition: ~azure.ai.metricsadvisor.models.SuppressConditionPatch
    """

    _attribute_map = {
        'lower_bound': {'key': 'lowerBound', 'type': 'float'},
        'upper_bound': {'key': 'upperBound', 'type': 'float'},
        'anomaly_detector_direction': {'key': 'anomalyDetectorDirection', 'type': 'str'},
        'suppress_condition': {'key': 'suppressCondition', 'type': 'SuppressConditionPatch'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword lower_bound: lower bound
        
         should be specified when anomalyDetectorDirection is Both or Down.
        :paramtype lower_bound: float
        :keyword upper_bound: upper bound
        
         should be specified when anomalyDetectorDirection is Both or Up.
        :paramtype upper_bound: float
        :keyword anomaly_detector_direction: detection direction. Possible values include: "Both",
         "Down", "Up".
        :paramtype anomaly_detector_direction: str or
         ~azure.ai.metricsadvisor.models.AnomalyDetectorDirection
        :keyword suppress_condition:
        :paramtype suppress_condition: ~azure.ai.metricsadvisor.models.SuppressConditionPatch
        """
        super(HardThresholdConditionPatch, self).__init__(**kwargs)
        self.lower_bound = kwargs.get('lower_bound', None)
        self.upper_bound = kwargs.get('upper_bound', None)
        self.anomaly_detector_direction = kwargs.get('anomaly_detector_direction', None)
        self.suppress_condition = kwargs.get('suppress_condition', None)

class HardThresholdConditionPatch(HardThresholdConditionPatchCustomization, _HardThresholdConditionPatchGenerated):
    pass


class _HookListGenerated(msrest.serialization.Model):
    """HookList.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar next_link:
    :vartype next_link: str
    :ivar value:
    :vartype value: list[~azure.ai.metricsadvisor.models.HookInfo]
    """

    _validation = {
        'next_link': {'readonly': True},
        'value': {'readonly': True, 'unique': True},
    }

    _attribute_map = {
        'next_link': {'key': '@nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[HookInfo]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(HookList, self).__init__(**kwargs)
        self.next_link = None
        self.value = None

class HookList(HookListCustomization, _HookListGenerated):
    pass


class _IncidentPropertyGenerated(msrest.serialization.Model):
    """IncidentProperty.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar max_severity: Required. max severity of latest anomalies in the incident. Possible values
     include: "Low", "Medium", "High".
    :vartype max_severity: str or ~azure.ai.metricsadvisor.models.Severity
    :ivar incident_status: incident status
    
     only return for alerting incident result. Possible values include: "Active", "Resolved".
    :vartype incident_status: str or ~azure.ai.metricsadvisor.models.IncidentStatus
    :ivar value_of_root_node: value of the root node.
    :vartype value_of_root_node: float
    :ivar expected_value_of_root_node: expected value of the root node given by smart detector.
    :vartype expected_value_of_root_node: float
    """

    _validation = {
        'max_severity': {'required': True},
        'incident_status': {'readonly': True},
        'value_of_root_node': {'readonly': True},
        'expected_value_of_root_node': {'readonly': True},
    }

    _attribute_map = {
        'max_severity': {'key': 'maxSeverity', 'type': 'str'},
        'incident_status': {'key': 'incidentStatus', 'type': 'str'},
        'value_of_root_node': {'key': 'valueOfRootNode', 'type': 'float'},
        'expected_value_of_root_node': {'key': 'expectedValueOfRootNode', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword max_severity: Required. max severity of latest anomalies in the incident. Possible
         values include: "Low", "Medium", "High".
        :paramtype max_severity: str or ~azure.ai.metricsadvisor.models.Severity
        """
        super(IncidentProperty, self).__init__(**kwargs)
        self.max_severity = kwargs['max_severity']
        self.incident_status = None
        self.value_of_root_node = None
        self.expected_value_of_root_node = None

class IncidentProperty(IncidentPropertyCustomization, _IncidentPropertyGenerated):
    pass


class _IncidentResultGenerated(msrest.serialization.Model):
    """IncidentResult.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar data_feed_id: data feed unique id
    
     only return for alerting anomaly result.
    :vartype data_feed_id: str
    :ivar metric_id: metric unique id
    
     only return for alerting incident result.
    :vartype metric_id: str
    :ivar anomaly_detection_configuration_id: anomaly detection configuration unique id
    
     only return for alerting incident result.
    :vartype anomaly_detection_configuration_id: str
    :ivar incident_id: Required. incident id.
    :vartype incident_id: str
    :ivar start_time: Required. incident start time.
    :vartype start_time: ~datetime.datetime
    :ivar last_time: Required. incident last time.
    :vartype last_time: ~datetime.datetime
    :ivar root_node: Required.
    :vartype root_node: ~azure.ai.metricsadvisor.models.SeriesIdentity
    :ivar property: Required.
    :vartype property: ~azure.ai.metricsadvisor.models.IncidentProperty
    """

    _validation = {
        'data_feed_id': {'readonly': True},
        'metric_id': {'readonly': True},
        'anomaly_detection_configuration_id': {'readonly': True},
        'incident_id': {'required': True},
        'start_time': {'required': True},
        'last_time': {'required': True},
        'root_node': {'required': True},
        'property': {'required': True},
    }

    _attribute_map = {
        'data_feed_id': {'key': 'dataFeedId', 'type': 'str'},
        'metric_id': {'key': 'metricId', 'type': 'str'},
        'anomaly_detection_configuration_id': {'key': 'anomalyDetectionConfigurationId', 'type': 'str'},
        'incident_id': {'key': 'incidentId', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'last_time': {'key': 'lastTime', 'type': 'iso-8601'},
        'root_node': {'key': 'rootNode', 'type': 'SeriesIdentity'},
        'property': {'key': 'property', 'type': 'IncidentProperty'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword incident_id: Required. incident id.
        :paramtype incident_id: str
        :keyword start_time: Required. incident start time.
        :paramtype start_time: ~datetime.datetime
        :keyword last_time: Required. incident last time.
        :paramtype last_time: ~datetime.datetime
        :keyword root_node: Required.
        :paramtype root_node: ~azure.ai.metricsadvisor.models.SeriesIdentity
        :keyword property: Required.
        :paramtype property: ~azure.ai.metricsadvisor.models.IncidentProperty
        """
        super(IncidentResult, self).__init__(**kwargs)
        self.data_feed_id = None
        self.metric_id = None
        self.anomaly_detection_configuration_id = None
        self.incident_id = kwargs['incident_id']
        self.start_time = kwargs['start_time']
        self.last_time = kwargs['last_time']
        self.root_node = kwargs['root_node']
        self.property = kwargs['property']

class IncidentResult(IncidentResultCustomization, _IncidentResultGenerated):
    pass


class _IncidentResultListGenerated(msrest.serialization.Model):
    """IncidentResultList.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link:
    :vartype next_link: str
    :ivar value: Required.
    :vartype value: list[~azure.ai.metricsadvisor.models.IncidentResult]
    """

    _validation = {
        'next_link': {'readonly': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': '@nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[IncidentResult]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required.
        :paramtype value: list[~azure.ai.metricsadvisor.models.IncidentResult]
        """
        super(IncidentResultList, self).__init__(**kwargs)
        self.next_link = None
        self.value = kwargs['value']

class IncidentResultList(IncidentResultListCustomization, _IncidentResultListGenerated):
    pass


class _InfluxDBDataFeedGenerated(_DataFeedDetailGenerated):
    """InfluxDBDataFeed.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_id: data feed unique id.
    :vartype data_feed_id: str
    :ivar data_feed_name: Required. data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar granularity_name: Required. granularity of the time series. Possible values include:
     "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
    :vartype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
    :ivar granularity_amount: if granularity is custom,it is required.
    :vartype granularity_amount: int
    :ivar metrics: Required. measure list.
    :vartype metrics: list[~azure.ai.metricsadvisor.models.Metric]
    :ivar dimension: dimension list.
    :vartype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: Required. ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar is_admin: the query user is one of data feed administrator or not.
    :vartype is_admin: bool
    :ivar creator: data feed creator.
    :vartype creator: str
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar created_time: data feed created time.
    :vartype created_time: ~datetime.datetime
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter: Required.
    :vartype data_source_parameter: ~azure.ai.metricsadvisor.models.InfluxDBParameter
    """

    _validation = {
        'data_source_type': {'required': True},
        'data_feed_id': {'readonly': True},
        'data_feed_name': {'required': True},
        'granularity_name': {'required': True},
        'metrics': {'required': True, 'unique': True},
        'dimension': {'unique': True},
        'data_start_from': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
        'is_admin': {'readonly': True},
        'creator': {'readonly': True},
        'status': {'readonly': True},
        'created_time': {'readonly': True},
        'data_source_parameter': {'required': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_id': {'key': 'dataFeedId', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'granularity_name': {'key': 'granularityName', 'type': 'str'},
        'granularity_amount': {'key': 'granularityAmount', 'type': 'int'},
        'metrics': {'key': 'metrics', 'type': '[Metric]'},
        'dimension': {'key': 'dimension', 'type': '[Dimension]'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'is_admin': {'key': 'isAdmin', 'type': 'bool'},
        'creator': {'key': 'creator', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'InfluxDBParameter'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: Required. data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword granularity_name: Required. granularity of the time series. Possible values include:
         "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
        :paramtype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
        :keyword granularity_amount: if granularity is custom,it is required.
        :paramtype granularity_amount: int
        :keyword metrics: Required. measure list.
        :paramtype metrics: list[~azure.ai.metricsadvisor.models.Metric]
        :keyword dimension: dimension list.
        :paramtype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: Required. ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter: Required.
        :paramtype data_source_parameter: ~azure.ai.metricsadvisor.models.InfluxDBParameter
        """
        super(InfluxDBDataFeed, self).__init__(**kwargs)
        self.data_source_type = 'InfluxDB'  # type: str
        self.data_source_parameter = kwargs['data_source_parameter']

class InfluxDBDataFeed(InfluxDBDataFeedCustomization, DataFeedDetail, _InfluxDBDataFeedGenerated):
    pass


class _InfluxDBDataFeedPatchGenerated(_DataFeedDetailPatchGenerated):
    """InfluxDBDataFeedPatch.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_name: data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter:
    :vartype data_source_parameter: ~azure.ai.metricsadvisor.models.InfluxDBParameterPatch
    """

    _validation = {
        'data_source_type': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'status': {'key': 'status', 'type': 'str'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'InfluxDBParameterPatch'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword status: data feed status. Possible values include: "Active", "Paused".
        :paramtype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter:
        :paramtype data_source_parameter: ~azure.ai.metricsadvisor.models.InfluxDBParameterPatch
        """
        super(InfluxDBDataFeedPatch, self).__init__(**kwargs)
        self.data_source_type = 'InfluxDB'  # type: str
        self.data_source_parameter = kwargs.get('data_source_parameter', None)

class InfluxDBDataFeedPatch(InfluxDBDataFeedPatchCustomization, DataFeedDetailPatch, _InfluxDBDataFeedPatchGenerated):
    pass


class _InfluxDBParameterGenerated(msrest.serialization.Model):
    """InfluxDBParameter.

    All required parameters must be populated in order to send to Azure.

    :ivar connection_string: The connection string of this InfluxDB.
    :vartype connection_string: str
    :ivar database: A database name.
    :vartype database: str
    :ivar user_name: The user name of the account that can access this database.
    :vartype user_name: str
    :ivar password: The password of the account that can access this database.
    :vartype password: str
    :ivar query: Required. The script to query this database.
    :vartype query: str
    """

    _validation = {
        'query': {'required': True},
    }

    _attribute_map = {
        'connection_string': {'key': 'connectionString', 'type': 'str'},
        'database': {'key': 'database', 'type': 'str'},
        'user_name': {'key': 'userName', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
        'query': {'key': 'query', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword connection_string: The connection string of this InfluxDB.
        :paramtype connection_string: str
        :keyword database: A database name.
        :paramtype database: str
        :keyword user_name: The user name of the account that can access this database.
        :paramtype user_name: str
        :keyword password: The password of the account that can access this database.
        :paramtype password: str
        :keyword query: Required. The script to query this database.
        :paramtype query: str
        """
        super(InfluxDBParameter, self).__init__(**kwargs)
        self.connection_string = kwargs.get('connection_string', None)
        self.database = kwargs.get('database', None)
        self.user_name = kwargs.get('user_name', None)
        self.password = kwargs.get('password', None)
        self.query = kwargs['query']

class InfluxDBParameter(InfluxDBParameterCustomization, _InfluxDBParameterGenerated):
    pass


class _InfluxDBParameterPatchGenerated(msrest.serialization.Model):
    """InfluxDBParameterPatch.

    :ivar connection_string: The connection string of this InfluxDB.
    :vartype connection_string: str
    :ivar database: A database name.
    :vartype database: str
    :ivar user_name: The user name of the account that can access this database.
    :vartype user_name: str
    :ivar password: The password of the account that can access this database.
    :vartype password: str
    :ivar query: The script to query this database.
    :vartype query: str
    """

    _attribute_map = {
        'connection_string': {'key': 'connectionString', 'type': 'str'},
        'database': {'key': 'database', 'type': 'str'},
        'user_name': {'key': 'userName', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
        'query': {'key': 'query', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword connection_string: The connection string of this InfluxDB.
        :paramtype connection_string: str
        :keyword database: A database name.
        :paramtype database: str
        :keyword user_name: The user name of the account that can access this database.
        :paramtype user_name: str
        :keyword password: The password of the account that can access this database.
        :paramtype password: str
        :keyword query: The script to query this database.
        :paramtype query: str
        """
        super(InfluxDBParameterPatch, self).__init__(**kwargs)
        self.connection_string = kwargs.get('connection_string', None)
        self.database = kwargs.get('database', None)
        self.user_name = kwargs.get('user_name', None)
        self.password = kwargs.get('password', None)
        self.query = kwargs.get('query', None)

class InfluxDBParameterPatch(InfluxDBParameterPatchCustomization, _InfluxDBParameterPatchGenerated):
    pass


class _IngestionProgressResetOptionsGenerated(msrest.serialization.Model):
    """IngestionProgressResetOptions.

    All required parameters must be populated in order to send to Azure.

    :ivar start_time: Required. the start point of time range to reset data ingestion status.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Required. the end point of time range to reset data ingestion status.
    :vartype end_time: ~datetime.datetime
    """

    _validation = {
        'start_time': {'required': True},
        'end_time': {'required': True},
    }

    _attribute_map = {
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword start_time: Required. the start point of time range to reset data ingestion status.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: Required. the end point of time range to reset data ingestion status.
        :paramtype end_time: ~datetime.datetime
        """
        super(IngestionProgressResetOptions, self).__init__(**kwargs)
        self.start_time = kwargs['start_time']
        self.end_time = kwargs['end_time']

class IngestionProgressResetOptions(IngestionProgressResetOptionsCustomization, _IngestionProgressResetOptionsGenerated):
    pass


class _IngestionStatusGenerated(msrest.serialization.Model):
    """IngestionStatus.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar timestamp: data slice timestamp.
    :vartype timestamp: ~datetime.datetime
    :ivar status: latest ingestion task status for this data slice. Possible values include:
     "NotStarted", "Scheduled", "Running", "Succeeded", "Failed", "NoData", "Error", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.IngestionStatusType
    :ivar message: the trimmed message of last ingestion job.
    :vartype message: str
    """

    _validation = {
        'timestamp': {'readonly': True},
        'status': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(IngestionStatus, self).__init__(**kwargs)
        self.timestamp = None
        self.status = None
        self.message = None

class IngestionStatus(IngestionStatusCustomization, _IngestionStatusGenerated):
    pass


class _IngestionStatusListGenerated(msrest.serialization.Model):
    """IngestionStatusList.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar next_link:
    :vartype next_link: str
    :ivar value:
    :vartype value: list[~azure.ai.metricsadvisor.models.IngestionStatus]
    """

    _validation = {
        'next_link': {'readonly': True},
        'value': {'readonly': True},
    }

    _attribute_map = {
        'next_link': {'key': '@nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[IngestionStatus]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(IngestionStatusList, self).__init__(**kwargs)
        self.next_link = None
        self.value = None

class IngestionStatusList(IngestionStatusListCustomization, _IngestionStatusListGenerated):
    pass


class _IngestionStatusQueryOptionsGenerated(msrest.serialization.Model):
    """IngestionStatusQueryOptions.

    All required parameters must be populated in order to send to Azure.

    :ivar start_time: Required. the start point of time range to query data ingestion status.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Required. the end point of time range to query data ingestion status.
    :vartype end_time: ~datetime.datetime
    """

    _validation = {
        'start_time': {'required': True},
        'end_time': {'required': True},
    }

    _attribute_map = {
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword start_time: Required. the start point of time range to query data ingestion status.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: Required. the end point of time range to query data ingestion status.
        :paramtype end_time: ~datetime.datetime
        """
        super(IngestionStatusQueryOptions, self).__init__(**kwargs)
        self.start_time = kwargs['start_time']
        self.end_time = kwargs['end_time']

class IngestionStatusQueryOptions(IngestionStatusQueryOptionsCustomization, _IngestionStatusQueryOptionsGenerated):
    pass


class _MetricGenerated(msrest.serialization.Model):
    """Metric.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar metric_id: metric id.
    :vartype metric_id: str
    :ivar metric_name: Required. metric name.
    :vartype metric_name: str
    :ivar metric_display_name: metric display name.
    :vartype metric_display_name: str
    :ivar metric_description: metric description.
    :vartype metric_description: str
    """

    _validation = {
        'metric_id': {'readonly': True},
        'metric_name': {'required': True},
        'metric_display_name': {'pattern': r'[.a-zA-Z0-9_-]+'},
    }

    _attribute_map = {
        'metric_id': {'key': 'metricId', 'type': 'str'},
        'metric_name': {'key': 'metricName', 'type': 'str'},
        'metric_display_name': {'key': 'metricDisplayName', 'type': 'str'},
        'metric_description': {'key': 'metricDescription', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword metric_name: Required. metric name.
        :paramtype metric_name: str
        :keyword metric_display_name: metric display name.
        :paramtype metric_display_name: str
        :keyword metric_description: metric description.
        :paramtype metric_description: str
        """
        super(Metric, self).__init__(**kwargs)
        self.metric_id = None
        self.metric_name = kwargs['metric_name']
        self.metric_display_name = kwargs.get('metric_display_name', None)
        self.metric_description = kwargs.get('metric_description', None)

class Metric(MetricCustomization, _MetricGenerated):
    pass


class _MetricAlertingConfigurationGenerated(msrest.serialization.Model):
    """MetricAlertingConfiguration.

    All required parameters must be populated in order to send to Azure.

    :ivar anomaly_detection_configuration_id: Required. Anomaly detection configuration unique id.
    :vartype anomaly_detection_configuration_id: str
    :ivar anomaly_scope_type: Required. Anomaly scope. Possible values include: "All", "Dimension",
     "TopN".
    :vartype anomaly_scope_type: str or ~azure.ai.metricsadvisor.models.AnomalyScope
    :ivar negation_operation: Negation operation.
    :vartype negation_operation: bool
    :ivar dimension_anomaly_scope:
    :vartype dimension_anomaly_scope: ~azure.ai.metricsadvisor.models.DimensionGroupIdentity
    :ivar top_n_anomaly_scope:
    :vartype top_n_anomaly_scope: ~azure.ai.metricsadvisor.models.TopNGroupScope
    :ivar severity_filter:
    :vartype severity_filter: ~azure.ai.metricsadvisor.models.SeverityCondition
    :ivar snooze_filter:
    :vartype snooze_filter: ~azure.ai.metricsadvisor.models.AlertSnoozeCondition
    :ivar value_filter:
    :vartype value_filter: ~azure.ai.metricsadvisor.models.ValueCondition
    """

    _validation = {
        'anomaly_detection_configuration_id': {'required': True},
        'anomaly_scope_type': {'required': True},
    }

    _attribute_map = {
        'anomaly_detection_configuration_id': {'key': 'anomalyDetectionConfigurationId', 'type': 'str'},
        'anomaly_scope_type': {'key': 'anomalyScopeType', 'type': 'str'},
        'negation_operation': {'key': 'negationOperation', 'type': 'bool'},
        'dimension_anomaly_scope': {'key': 'dimensionAnomalyScope', 'type': 'DimensionGroupIdentity'},
        'top_n_anomaly_scope': {'key': 'topNAnomalyScope', 'type': 'TopNGroupScope'},
        'severity_filter': {'key': 'severityFilter', 'type': 'SeverityCondition'},
        'snooze_filter': {'key': 'snoozeFilter', 'type': 'AlertSnoozeCondition'},
        'value_filter': {'key': 'valueFilter', 'type': 'ValueCondition'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword anomaly_detection_configuration_id: Required. Anomaly detection configuration unique
         id.
        :paramtype anomaly_detection_configuration_id: str
        :keyword anomaly_scope_type: Required. Anomaly scope. Possible values include: "All",
         "Dimension", "TopN".
        :paramtype anomaly_scope_type: str or ~azure.ai.metricsadvisor.models.AnomalyScope
        :keyword negation_operation: Negation operation.
        :paramtype negation_operation: bool
        :keyword dimension_anomaly_scope:
        :paramtype dimension_anomaly_scope: ~azure.ai.metricsadvisor.models.DimensionGroupIdentity
        :keyword top_n_anomaly_scope:
        :paramtype top_n_anomaly_scope: ~azure.ai.metricsadvisor.models.TopNGroupScope
        :keyword severity_filter:
        :paramtype severity_filter: ~azure.ai.metricsadvisor.models.SeverityCondition
        :keyword snooze_filter:
        :paramtype snooze_filter: ~azure.ai.metricsadvisor.models.AlertSnoozeCondition
        :keyword value_filter:
        :paramtype value_filter: ~azure.ai.metricsadvisor.models.ValueCondition
        """
        super(MetricAlertingConfiguration, self).__init__(**kwargs)
        self.anomaly_detection_configuration_id = kwargs['anomaly_detection_configuration_id']
        self.anomaly_scope_type = kwargs['anomaly_scope_type']
        self.negation_operation = kwargs.get('negation_operation', False)
        self.dimension_anomaly_scope = kwargs.get('dimension_anomaly_scope', None)
        self.top_n_anomaly_scope = kwargs.get('top_n_anomaly_scope', None)
        self.severity_filter = kwargs.get('severity_filter', None)
        self.snooze_filter = kwargs.get('snooze_filter', None)
        self.value_filter = kwargs.get('value_filter', None)

class MetricAlertingConfiguration(MetricAlertingConfigurationCustomization, _MetricAlertingConfigurationGenerated):
    pass


class _MetricDataItemGenerated(msrest.serialization.Model):
    """MetricDataItem.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id:
    :vartype id: ~azure.ai.metricsadvisor.models.MetricSeriesItem
    :ivar timestamp_list: timestamps of the data related to this time series.
    :vartype timestamp_list: list[~datetime.datetime]
    :ivar value_list: values of the data related to this time series.
    :vartype value_list: list[float]
    """

    _validation = {
        'timestamp_list': {'readonly': True},
        'value_list': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'MetricSeriesItem'},
        'timestamp_list': {'key': 'timestampList', 'type': '[iso-8601]'},
        'value_list': {'key': 'valueList', 'type': '[float]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id:
        :paramtype id: ~azure.ai.metricsadvisor.models.MetricSeriesItem
        """
        super(MetricDataItem, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.timestamp_list = None
        self.value_list = None

class MetricDataItem(MetricDataItemCustomization, _MetricDataItemGenerated):
    pass


class _MetricDataListGenerated(msrest.serialization.Model):
    """MetricDataList.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value:
    :vartype value: list[~azure.ai.metricsadvisor.models.MetricDataItem]
    """

    _validation = {
        'value': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MetricDataItem]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(MetricDataList, self).__init__(**kwargs)
        self.value = None

class MetricDataList(MetricDataListCustomization, _MetricDataListGenerated):
    pass


class _MetricDataQueryOptionsGenerated(msrest.serialization.Model):
    """MetricDataQueryOptions.

    All required parameters must be populated in order to send to Azure.

    :ivar start_time: Required. start time of query a time series data, and format should be
     yyyy-MM-ddThh:mm:ssZ. The maximum number of data points (series number * time range) is 10000.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Required. start time of query a time series data, and format should be
     yyyy-MM-ddThh:mm:ssZ. The maximum number of data points (series number * time range) is 10000.
    :vartype end_time: ~datetime.datetime
    :ivar series: Required. query specific series. The maximum number of series is 100.
    :vartype series: list[dict[str, str]]
    """

    _validation = {
        'start_time': {'required': True},
        'end_time': {'required': True},
        'series': {'required': True},
    }

    _attribute_map = {
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'series': {'key': 'series', 'type': '[{str}]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword start_time: Required. start time of query a time series data, and format should be
         yyyy-MM-ddThh:mm:ssZ. The maximum number of data points (series number * time range) is 10000.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: Required. start time of query a time series data, and format should be
         yyyy-MM-ddThh:mm:ssZ. The maximum number of data points (series number * time range) is 10000.
        :paramtype end_time: ~datetime.datetime
        :keyword series: Required. query specific series. The maximum number of series is 100.
        :paramtype series: list[dict[str, str]]
        """
        super(MetricDataQueryOptions, self).__init__(**kwargs)
        self.start_time = kwargs['start_time']
        self.end_time = kwargs['end_time']
        self.series = kwargs['series']

class MetricDataQueryOptions(MetricDataQueryOptionsCustomization, _MetricDataQueryOptionsGenerated):
    pass


class _MetricDimensionListGenerated(msrest.serialization.Model):
    """MetricDimensionList.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar next_link:
    :vartype next_link: str
    :ivar value:
    :vartype value: list[str]
    """

    _validation = {
        'next_link': {'readonly': True},
        'value': {'readonly': True, 'unique': True},
    }

    _attribute_map = {
        'next_link': {'key': '@nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(MetricDimensionList, self).__init__(**kwargs)
        self.next_link = None
        self.value = None

class MetricDimensionList(MetricDimensionListCustomization, _MetricDimensionListGenerated):
    pass


class _MetricDimensionQueryOptionsGenerated(msrest.serialization.Model):
    """MetricDimensionQueryOptions.

    All required parameters must be populated in order to send to Azure.

    :ivar dimension_name: Required. dimension name.
    :vartype dimension_name: str
    :ivar dimension_value_filter: dimension value to be filtered.
    :vartype dimension_value_filter: str
    """

    _validation = {
        'dimension_name': {'required': True},
    }

    _attribute_map = {
        'dimension_name': {'key': 'dimensionName', 'type': 'str'},
        'dimension_value_filter': {'key': 'dimensionValueFilter', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword dimension_name: Required. dimension name.
        :paramtype dimension_name: str
        :keyword dimension_value_filter: dimension value to be filtered.
        :paramtype dimension_value_filter: str
        """
        super(MetricDimensionQueryOptions, self).__init__(**kwargs)
        self.dimension_name = kwargs['dimension_name']
        self.dimension_value_filter = kwargs.get('dimension_value_filter', None)

class MetricDimensionQueryOptions(MetricDimensionQueryOptionsCustomization, _MetricDimensionQueryOptionsGenerated):
    pass


class _MetricFeedbackFilterGenerated(msrest.serialization.Model):
    """MetricFeedbackFilter.

    All required parameters must be populated in order to send to Azure.

    :ivar metric_id: Required. filter feedbacks by metric id.
    :vartype metric_id: str
    :ivar dimension_filter:
    :vartype dimension_filter: ~azure.ai.metricsadvisor.models.FeedbackDimensionFilter
    :ivar feedback_type: filter feedbacks by type. Possible values include: "Anomaly",
     "ChangePoint", "Period", "Comment".
    :vartype feedback_type: str or ~azure.ai.metricsadvisor.models.FeedbackType
    :ivar start_time: start time filter under chosen time mode.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: end time filter under chosen time mode.
    :vartype end_time: ~datetime.datetime
    :ivar time_mode: time mode to filter feedback. Possible values include: "MetricTimestamp",
     "FeedbackCreatedTime".
    :vartype time_mode: str or ~azure.ai.metricsadvisor.models.FeedbackQueryTimeMode
    """

    _validation = {
        'metric_id': {'required': True},
    }

    _attribute_map = {
        'metric_id': {'key': 'metricId', 'type': 'str'},
        'dimension_filter': {'key': 'dimensionFilter', 'type': 'FeedbackDimensionFilter'},
        'feedback_type': {'key': 'feedbackType', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'time_mode': {'key': 'timeMode', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword metric_id: Required. filter feedbacks by metric id.
        :paramtype metric_id: str
        :keyword dimension_filter:
        :paramtype dimension_filter: ~azure.ai.metricsadvisor.models.FeedbackDimensionFilter
        :keyword feedback_type: filter feedbacks by type. Possible values include: "Anomaly",
         "ChangePoint", "Period", "Comment".
        :paramtype feedback_type: str or ~azure.ai.metricsadvisor.models.FeedbackType
        :keyword start_time: start time filter under chosen time mode.
        :paramtype start_time: ~datetime.datetime
        :keyword end_time: end time filter under chosen time mode.
        :paramtype end_time: ~datetime.datetime
        :keyword time_mode: time mode to filter feedback. Possible values include: "MetricTimestamp",
         "FeedbackCreatedTime".
        :paramtype time_mode: str or ~azure.ai.metricsadvisor.models.FeedbackQueryTimeMode
        """
        super(MetricFeedbackFilter, self).__init__(**kwargs)
        self.metric_id = kwargs['metric_id']
        self.dimension_filter = kwargs.get('dimension_filter', None)
        self.feedback_type = kwargs.get('feedback_type', None)
        self.start_time = kwargs.get('start_time', None)
        self.end_time = kwargs.get('end_time', None)
        self.time_mode = kwargs.get('time_mode', None)

class MetricFeedbackFilter(MetricFeedbackFilterCustomization, _MetricFeedbackFilterGenerated):
    pass


class _MetricFeedbackListGenerated(msrest.serialization.Model):
    """MetricFeedbackList.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar next_link:
    :vartype next_link: str
    :ivar value:
    :vartype value: list[~azure.ai.metricsadvisor.models.MetricFeedback]
    """

    _validation = {
        'next_link': {'readonly': True},
        'value': {'readonly': True},
    }

    _attribute_map = {
        'next_link': {'key': '@nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[MetricFeedback]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(MetricFeedbackList, self).__init__(**kwargs)
        self.next_link = None
        self.value = None

class MetricFeedbackList(MetricFeedbackListCustomization, _MetricFeedbackListGenerated):
    pass


class _MetricSeriesItemGenerated(msrest.serialization.Model):
    """MetricSeriesItem.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar metric_id: metric unique id.
    :vartype metric_id: str
    :ivar dimension: dimension name and value pair.
    :vartype dimension: dict[str, str]
    """

    _validation = {
        'metric_id': {'readonly': True},
        'dimension': {'readonly': True},
    }

    _attribute_map = {
        'metric_id': {'key': 'metricId', 'type': 'str'},
        'dimension': {'key': 'dimension', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(MetricSeriesItem, self).__init__(**kwargs)
        self.metric_id = None
        self.dimension = None

class MetricSeriesItem(MetricSeriesItemCustomization, _MetricSeriesItemGenerated):
    pass


class _MetricSeriesListGenerated(msrest.serialization.Model):
    """MetricSeriesList.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar next_link:
    :vartype next_link: str
    :ivar value:
    :vartype value: list[~azure.ai.metricsadvisor.models.MetricSeriesItem]
    """

    _validation = {
        'next_link': {'readonly': True},
        'value': {'readonly': True},
    }

    _attribute_map = {
        'next_link': {'key': '@nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[MetricSeriesItem]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(MetricSeriesList, self).__init__(**kwargs)
        self.next_link = None
        self.value = None

class MetricSeriesList(MetricSeriesListCustomization, _MetricSeriesListGenerated):
    pass


class _MetricSeriesQueryOptionsGenerated(msrest.serialization.Model):
    """MetricSeriesQueryOptions.

    All required parameters must be populated in order to send to Azure.

    :ivar active_since: Required. query series ingested after this time, the format should be
     yyyy-MM-ddTHH:mm:ssZ.
    :vartype active_since: ~datetime.datetime
    :ivar dimension_filter: filter specific dimension name and values.
    :vartype dimension_filter: dict[str, list[str]]
    """

    _validation = {
        'active_since': {'required': True},
    }

    _attribute_map = {
        'active_since': {'key': 'activeSince', 'type': 'iso-8601'},
        'dimension_filter': {'key': 'dimensionFilter', 'type': '{[str]}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword active_since: Required. query series ingested after this time, the format should be
         yyyy-MM-ddTHH:mm:ssZ.
        :paramtype active_since: ~datetime.datetime
        :keyword dimension_filter: filter specific dimension name and values.
        :paramtype dimension_filter: dict[str, list[str]]
        """
        super(MetricSeriesQueryOptions, self).__init__(**kwargs)
        self.active_since = kwargs['active_since']
        self.dimension_filter = kwargs.get('dimension_filter', None)

class MetricSeriesQueryOptions(MetricSeriesQueryOptionsCustomization, _MetricSeriesQueryOptionsGenerated):
    pass


class _MongoDBDataFeedGenerated(_DataFeedDetailGenerated):
    """MongoDBDataFeed.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_id: data feed unique id.
    :vartype data_feed_id: str
    :ivar data_feed_name: Required. data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar granularity_name: Required. granularity of the time series. Possible values include:
     "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
    :vartype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
    :ivar granularity_amount: if granularity is custom,it is required.
    :vartype granularity_amount: int
    :ivar metrics: Required. measure list.
    :vartype metrics: list[~azure.ai.metricsadvisor.models.Metric]
    :ivar dimension: dimension list.
    :vartype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: Required. ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar is_admin: the query user is one of data feed administrator or not.
    :vartype is_admin: bool
    :ivar creator: data feed creator.
    :vartype creator: str
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar created_time: data feed created time.
    :vartype created_time: ~datetime.datetime
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter: Required.
    :vartype data_source_parameter: ~azure.ai.metricsadvisor.models.MongoDBParameter
    """

    _validation = {
        'data_source_type': {'required': True},
        'data_feed_id': {'readonly': True},
        'data_feed_name': {'required': True},
        'granularity_name': {'required': True},
        'metrics': {'required': True, 'unique': True},
        'dimension': {'unique': True},
        'data_start_from': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
        'is_admin': {'readonly': True},
        'creator': {'readonly': True},
        'status': {'readonly': True},
        'created_time': {'readonly': True},
        'data_source_parameter': {'required': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_id': {'key': 'dataFeedId', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'granularity_name': {'key': 'granularityName', 'type': 'str'},
        'granularity_amount': {'key': 'granularityAmount', 'type': 'int'},
        'metrics': {'key': 'metrics', 'type': '[Metric]'},
        'dimension': {'key': 'dimension', 'type': '[Dimension]'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'is_admin': {'key': 'isAdmin', 'type': 'bool'},
        'creator': {'key': 'creator', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'MongoDBParameter'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: Required. data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword granularity_name: Required. granularity of the time series. Possible values include:
         "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
        :paramtype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
        :keyword granularity_amount: if granularity is custom,it is required.
        :paramtype granularity_amount: int
        :keyword metrics: Required. measure list.
        :paramtype metrics: list[~azure.ai.metricsadvisor.models.Metric]
        :keyword dimension: dimension list.
        :paramtype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: Required. ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter: Required.
        :paramtype data_source_parameter: ~azure.ai.metricsadvisor.models.MongoDBParameter
        """
        super(MongoDBDataFeed, self).__init__(**kwargs)
        self.data_source_type = 'MongoDB'  # type: str
        self.data_source_parameter = kwargs['data_source_parameter']

class MongoDBDataFeed(MongoDBDataFeedCustomization, DataFeedDetail, _MongoDBDataFeedGenerated):
    pass


class _MongoDBDataFeedPatchGenerated(_DataFeedDetailPatchGenerated):
    """MongoDBDataFeedPatch.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_name: data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter:
    :vartype data_source_parameter: ~azure.ai.metricsadvisor.models.MongoDBParameterPatch
    """

    _validation = {
        'data_source_type': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'status': {'key': 'status', 'type': 'str'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'MongoDBParameterPatch'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword status: data feed status. Possible values include: "Active", "Paused".
        :paramtype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter:
        :paramtype data_source_parameter: ~azure.ai.metricsadvisor.models.MongoDBParameterPatch
        """
        super(MongoDBDataFeedPatch, self).__init__(**kwargs)
        self.data_source_type = 'MongoDB'  # type: str
        self.data_source_parameter = kwargs.get('data_source_parameter', None)

class MongoDBDataFeedPatch(MongoDBDataFeedPatchCustomization, DataFeedDetailPatch, _MongoDBDataFeedPatchGenerated):
    pass


class _MongoDBParameterGenerated(msrest.serialization.Model):
    """MongoDBParameter.

    All required parameters must be populated in order to send to Azure.

    :ivar connection_string: The connection string of this MongoDB.
    :vartype connection_string: str
    :ivar database: A database name in this MongoDB.
    :vartype database: str
    :ivar command: Required. The script to query this database.
    :vartype command: str
    """

    _validation = {
        'command': {'required': True},
    }

    _attribute_map = {
        'connection_string': {'key': 'connectionString', 'type': 'str'},
        'database': {'key': 'database', 'type': 'str'},
        'command': {'key': 'command', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword connection_string: The connection string of this MongoDB.
        :paramtype connection_string: str
        :keyword database: A database name in this MongoDB.
        :paramtype database: str
        :keyword command: Required. The script to query this database.
        :paramtype command: str
        """
        super(MongoDBParameter, self).__init__(**kwargs)
        self.connection_string = kwargs.get('connection_string', None)
        self.database = kwargs.get('database', None)
        self.command = kwargs['command']

class MongoDBParameter(MongoDBParameterCustomization, _MongoDBParameterGenerated):
    pass


class _MongoDBParameterPatchGenerated(msrest.serialization.Model):
    """MongoDBParameterPatch.

    :ivar connection_string: The connection string of this MongoDB.
    :vartype connection_string: str
    :ivar database: A database name in this MongoDB.
    :vartype database: str
    :ivar command: The script to query this database.
    :vartype command: str
    """

    _attribute_map = {
        'connection_string': {'key': 'connectionString', 'type': 'str'},
        'database': {'key': 'database', 'type': 'str'},
        'command': {'key': 'command', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword connection_string: The connection string of this MongoDB.
        :paramtype connection_string: str
        :keyword database: A database name in this MongoDB.
        :paramtype database: str
        :keyword command: The script to query this database.
        :paramtype command: str
        """
        super(MongoDBParameterPatch, self).__init__(**kwargs)
        self.connection_string = kwargs.get('connection_string', None)
        self.database = kwargs.get('database', None)
        self.command = kwargs.get('command', None)

class MongoDBParameterPatch(MongoDBParameterPatchCustomization, _MongoDBParameterPatchGenerated):
    pass


class _MySqlDataFeedGenerated(_DataFeedDetailGenerated):
    """MySqlDataFeed.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_id: data feed unique id.
    :vartype data_feed_id: str
    :ivar data_feed_name: Required. data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar granularity_name: Required. granularity of the time series. Possible values include:
     "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
    :vartype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
    :ivar granularity_amount: if granularity is custom,it is required.
    :vartype granularity_amount: int
    :ivar metrics: Required. measure list.
    :vartype metrics: list[~azure.ai.metricsadvisor.models.Metric]
    :ivar dimension: dimension list.
    :vartype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: Required. ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar is_admin: the query user is one of data feed administrator or not.
    :vartype is_admin: bool
    :ivar creator: data feed creator.
    :vartype creator: str
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar created_time: data feed created time.
    :vartype created_time: ~datetime.datetime
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter: Required.
    :vartype data_source_parameter: ~azure.ai.metricsadvisor.models.SqlSourceParameter
    """

    _validation = {
        'data_source_type': {'required': True},
        'data_feed_id': {'readonly': True},
        'data_feed_name': {'required': True},
        'granularity_name': {'required': True},
        'metrics': {'required': True, 'unique': True},
        'dimension': {'unique': True},
        'data_start_from': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
        'is_admin': {'readonly': True},
        'creator': {'readonly': True},
        'status': {'readonly': True},
        'created_time': {'readonly': True},
        'data_source_parameter': {'required': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_id': {'key': 'dataFeedId', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'granularity_name': {'key': 'granularityName', 'type': 'str'},
        'granularity_amount': {'key': 'granularityAmount', 'type': 'int'},
        'metrics': {'key': 'metrics', 'type': '[Metric]'},
        'dimension': {'key': 'dimension', 'type': '[Dimension]'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'is_admin': {'key': 'isAdmin', 'type': 'bool'},
        'creator': {'key': 'creator', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'SqlSourceParameter'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: Required. data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword granularity_name: Required. granularity of the time series. Possible values include:
         "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
        :paramtype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
        :keyword granularity_amount: if granularity is custom,it is required.
        :paramtype granularity_amount: int
        :keyword metrics: Required. measure list.
        :paramtype metrics: list[~azure.ai.metricsadvisor.models.Metric]
        :keyword dimension: dimension list.
        :paramtype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: Required. ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter: Required.
        :paramtype data_source_parameter: ~azure.ai.metricsadvisor.models.SqlSourceParameter
        """
        super(MySqlDataFeed, self).__init__(**kwargs)
        self.data_source_type = 'MySql'  # type: str
        self.data_source_parameter = kwargs['data_source_parameter']

class MySqlDataFeed(MySqlDataFeedCustomization, DataFeedDetail, _MySqlDataFeedGenerated):
    pass


class _MySqlDataFeedPatchGenerated(_DataFeedDetailPatchGenerated):
    """MySqlDataFeedPatch.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_name: data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter:
    :vartype data_source_parameter: ~azure.ai.metricsadvisor.models.SQLSourceParameterPatch
    """

    _validation = {
        'data_source_type': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'status': {'key': 'status', 'type': 'str'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'SQLSourceParameterPatch'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword status: data feed status. Possible values include: "Active", "Paused".
        :paramtype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter:
        :paramtype data_source_parameter: ~azure.ai.metricsadvisor.models.SQLSourceParameterPatch
        """
        super(MySqlDataFeedPatch, self).__init__(**kwargs)
        self.data_source_type = 'MySql'  # type: str
        self.data_source_parameter = kwargs.get('data_source_parameter', None)

class MySqlDataFeedPatch(MySqlDataFeedPatchCustomization, DataFeedDetailPatch, _MySqlDataFeedPatchGenerated):
    pass


class _PeriodFeedbackGenerated(_MetricFeedbackGenerated):
    """PeriodFeedback.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar feedback_type: Required. feedback type.Constant filled by server. Possible values
     include: "Anomaly", "ChangePoint", "Period", "Comment".
    :vartype feedback_type: str or ~azure.ai.metricsadvisor.models.FeedbackType
    :ivar feedback_id: feedback unique id.
    :vartype feedback_id: str
    :ivar created_time: feedback created time.
    :vartype created_time: ~datetime.datetime
    :ivar user_principal: user who gives this feedback.
    :vartype user_principal: str
    :ivar metric_id: Required. metric unique id.
    :vartype metric_id: str
    :ivar dimension_filter: Required.
    :vartype dimension_filter: ~azure.ai.metricsadvisor.models.FeedbackDimensionFilter
    :ivar value: Required.
    :vartype value: ~azure.ai.metricsadvisor.models.PeriodFeedbackValue
    """

    _validation = {
        'feedback_type': {'required': True},
        'feedback_id': {'readonly': True},
        'created_time': {'readonly': True},
        'user_principal': {'readonly': True},
        'metric_id': {'required': True},
        'dimension_filter': {'required': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'feedback_type': {'key': 'feedbackType', 'type': 'str'},
        'feedback_id': {'key': 'feedbackId', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'user_principal': {'key': 'userPrincipal', 'type': 'str'},
        'metric_id': {'key': 'metricId', 'type': 'str'},
        'dimension_filter': {'key': 'dimensionFilter', 'type': 'FeedbackDimensionFilter'},
        'value': {'key': 'value', 'type': 'PeriodFeedbackValue'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword metric_id: Required. metric unique id.
        :paramtype metric_id: str
        :keyword dimension_filter: Required.
        :paramtype dimension_filter: ~azure.ai.metricsadvisor.models.FeedbackDimensionFilter
        :keyword value: Required.
        :paramtype value: ~azure.ai.metricsadvisor.models.PeriodFeedbackValue
        """
        super(PeriodFeedback, self).__init__(**kwargs)
        self.feedback_type = 'Period'  # type: str
        self.value = kwargs['value']

class PeriodFeedback(PeriodFeedbackCustomization, MetricFeedback, _PeriodFeedbackGenerated):
    pass


class _PeriodFeedbackValueGenerated(msrest.serialization.Model):
    """PeriodFeedbackValue.

    All required parameters must be populated in order to send to Azure.

    :ivar period_type: Required. the type of setting period. Possible values include: "AutoDetect",
     "AssignValue".
    :vartype period_type: str or ~azure.ai.metricsadvisor.models.PeriodType
    :ivar period_value: Required. the number of intervals a period contains, when no period set to
     0.
    :vartype period_value: int
    """

    _validation = {
        'period_type': {'required': True},
        'period_value': {'required': True},
    }

    _attribute_map = {
        'period_type': {'key': 'periodType', 'type': 'str'},
        'period_value': {'key': 'periodValue', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword period_type: Required. the type of setting period. Possible values include:
         "AutoDetect", "AssignValue".
        :paramtype period_type: str or ~azure.ai.metricsadvisor.models.PeriodType
        :keyword period_value: Required. the number of intervals a period contains, when no period set
         to 0.
        :paramtype period_value: int
        """
        super(PeriodFeedbackValue, self).__init__(**kwargs)
        self.period_type = kwargs['period_type']
        self.period_value = kwargs['period_value']

class PeriodFeedbackValue(PeriodFeedbackValueCustomization, _PeriodFeedbackValueGenerated):
    pass


class _PostgreSqlDataFeedGenerated(_DataFeedDetailGenerated):
    """PostgreSqlDataFeed.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_id: data feed unique id.
    :vartype data_feed_id: str
    :ivar data_feed_name: Required. data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar granularity_name: Required. granularity of the time series. Possible values include:
     "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
    :vartype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
    :ivar granularity_amount: if granularity is custom,it is required.
    :vartype granularity_amount: int
    :ivar metrics: Required. measure list.
    :vartype metrics: list[~azure.ai.metricsadvisor.models.Metric]
    :ivar dimension: dimension list.
    :vartype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: Required. ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar is_admin: the query user is one of data feed administrator or not.
    :vartype is_admin: bool
    :ivar creator: data feed creator.
    :vartype creator: str
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar created_time: data feed created time.
    :vartype created_time: ~datetime.datetime
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter: Required.
    :vartype data_source_parameter: ~azure.ai.metricsadvisor.models.SqlSourceParameter
    """

    _validation = {
        'data_source_type': {'required': True},
        'data_feed_id': {'readonly': True},
        'data_feed_name': {'required': True},
        'granularity_name': {'required': True},
        'metrics': {'required': True, 'unique': True},
        'dimension': {'unique': True},
        'data_start_from': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
        'is_admin': {'readonly': True},
        'creator': {'readonly': True},
        'status': {'readonly': True},
        'created_time': {'readonly': True},
        'data_source_parameter': {'required': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_id': {'key': 'dataFeedId', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'granularity_name': {'key': 'granularityName', 'type': 'str'},
        'granularity_amount': {'key': 'granularityAmount', 'type': 'int'},
        'metrics': {'key': 'metrics', 'type': '[Metric]'},
        'dimension': {'key': 'dimension', 'type': '[Dimension]'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'is_admin': {'key': 'isAdmin', 'type': 'bool'},
        'creator': {'key': 'creator', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'SqlSourceParameter'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: Required. data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword granularity_name: Required. granularity of the time series. Possible values include:
         "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
        :paramtype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
        :keyword granularity_amount: if granularity is custom,it is required.
        :paramtype granularity_amount: int
        :keyword metrics: Required. measure list.
        :paramtype metrics: list[~azure.ai.metricsadvisor.models.Metric]
        :keyword dimension: dimension list.
        :paramtype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: Required. ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter: Required.
        :paramtype data_source_parameter: ~azure.ai.metricsadvisor.models.SqlSourceParameter
        """
        super(PostgreSqlDataFeed, self).__init__(**kwargs)
        self.data_source_type = 'PostgreSql'  # type: str
        self.data_source_parameter = kwargs['data_source_parameter']

class PostgreSqlDataFeed(PostgreSqlDataFeedCustomization, DataFeedDetail, _PostgreSqlDataFeedGenerated):
    pass


class _PostgreSqlDataFeedPatchGenerated(_DataFeedDetailPatchGenerated):
    """PostgreSqlDataFeedPatch.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_name: data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter:
    :vartype data_source_parameter: ~azure.ai.metricsadvisor.models.SQLSourceParameterPatch
    """

    _validation = {
        'data_source_type': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'status': {'key': 'status', 'type': 'str'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'SQLSourceParameterPatch'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword status: data feed status. Possible values include: "Active", "Paused".
        :paramtype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter:
        :paramtype data_source_parameter: ~azure.ai.metricsadvisor.models.SQLSourceParameterPatch
        """
        super(PostgreSqlDataFeedPatch, self).__init__(**kwargs)
        self.data_source_type = 'PostgreSql'  # type: str
        self.data_source_parameter = kwargs.get('data_source_parameter', None)

class PostgreSqlDataFeedPatch(PostgreSqlDataFeedPatchCustomization, DataFeedDetailPatch, _PostgreSqlDataFeedPatchGenerated):
    pass


class _RootCauseGenerated(msrest.serialization.Model):
    """RootCause.

    All required parameters must be populated in order to send to Azure.

    :ivar root_cause: Required.
    :vartype root_cause: ~azure.ai.metricsadvisor.models.DimensionGroupIdentity
    :ivar path: Required. drilling down path from query anomaly to root cause.
    :vartype path: list[str]
    :ivar score: Required. score of the root cause.
    :vartype score: float
    :ivar description: Required. description of the root cause.
    :vartype description: str
    """

    _validation = {
        'root_cause': {'required': True},
        'path': {'required': True},
        'score': {'required': True},
        'description': {'required': True},
    }

    _attribute_map = {
        'root_cause': {'key': 'rootCause', 'type': 'DimensionGroupIdentity'},
        'path': {'key': 'path', 'type': '[str]'},
        'score': {'key': 'score', 'type': 'float'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword root_cause: Required.
        :paramtype root_cause: ~azure.ai.metricsadvisor.models.DimensionGroupIdentity
        :keyword path: Required. drilling down path from query anomaly to root cause.
        :paramtype path: list[str]
        :keyword score: Required. score of the root cause.
        :paramtype score: float
        :keyword description: Required. description of the root cause.
        :paramtype description: str
        """
        super(RootCause, self).__init__(**kwargs)
        self.root_cause = kwargs['root_cause']
        self.path = kwargs['path']
        self.score = kwargs['score']
        self.description = kwargs['description']

class RootCause(RootCauseCustomization, _RootCauseGenerated):
    pass


class _RootCauseListGenerated(msrest.serialization.Model):
    """RootCauseList.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required.
    :vartype value: list[~azure.ai.metricsadvisor.models.RootCause]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[RootCause]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required.
        :paramtype value: list[~azure.ai.metricsadvisor.models.RootCause]
        """
        super(RootCauseList, self).__init__(**kwargs)
        self.value = kwargs['value']

class RootCauseList(RootCauseListCustomization, _RootCauseListGenerated):
    pass


class _SeriesConfigurationGenerated(msrest.serialization.Model):
    """SeriesConfiguration.

    All required parameters must be populated in order to send to Azure.

    :ivar series: Required.
    :vartype series: ~azure.ai.metricsadvisor.models.SeriesIdentity
    :ivar condition_operator: condition operator
    
     should be specified when combining multiple detection conditions. Possible values include:
     "AND", "OR".
    :vartype condition_operator: str or
     ~azure.ai.metricsadvisor.models.AnomalyDetectionConfigurationLogicType
    :ivar smart_detection_condition:
    :vartype smart_detection_condition: ~azure.ai.metricsadvisor.models.SmartDetectionCondition
    :ivar hard_threshold_condition:
    :vartype hard_threshold_condition: ~azure.ai.metricsadvisor.models.HardThresholdCondition
    :ivar change_threshold_condition:
    :vartype change_threshold_condition: ~azure.ai.metricsadvisor.models.ChangeThresholdCondition
    """

    _validation = {
        'series': {'required': True},
    }

    _attribute_map = {
        'series': {'key': 'series', 'type': 'SeriesIdentity'},
        'condition_operator': {'key': 'conditionOperator', 'type': 'str'},
        'smart_detection_condition': {'key': 'smartDetectionCondition', 'type': 'SmartDetectionCondition'},
        'hard_threshold_condition': {'key': 'hardThresholdCondition', 'type': 'HardThresholdCondition'},
        'change_threshold_condition': {'key': 'changeThresholdCondition', 'type': 'ChangeThresholdCondition'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword series: Required.
        :paramtype series: ~azure.ai.metricsadvisor.models.SeriesIdentity
        :keyword condition_operator: condition operator
        
         should be specified when combining multiple detection conditions. Possible values include:
         "AND", "OR".
        :paramtype condition_operator: str or
         ~azure.ai.metricsadvisor.models.AnomalyDetectionConfigurationLogicType
        :keyword smart_detection_condition:
        :paramtype smart_detection_condition: ~azure.ai.metricsadvisor.models.SmartDetectionCondition
        :keyword hard_threshold_condition:
        :paramtype hard_threshold_condition: ~azure.ai.metricsadvisor.models.HardThresholdCondition
        :keyword change_threshold_condition:
        :paramtype change_threshold_condition: ~azure.ai.metricsadvisor.models.ChangeThresholdCondition
        """
        super(SeriesConfiguration, self).__init__(**kwargs)
        self.series = kwargs['series']
        self.condition_operator = kwargs.get('condition_operator', None)
        self.smart_detection_condition = kwargs.get('smart_detection_condition', None)
        self.hard_threshold_condition = kwargs.get('hard_threshold_condition', None)
        self.change_threshold_condition = kwargs.get('change_threshold_condition', None)

class SeriesConfiguration(SeriesConfigurationCustomization, _SeriesConfigurationGenerated):
    pass


class _SeriesIdentityGenerated(msrest.serialization.Model):
    """SeriesIdentity.

    All required parameters must be populated in order to send to Azure.

    :ivar dimension: Required. dimension specified for series.
    :vartype dimension: dict[str, str]
    """

    _validation = {
        'dimension': {'required': True},
    }

    _attribute_map = {
        'dimension': {'key': 'dimension', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword dimension: Required. dimension specified for series.
        :paramtype dimension: dict[str, str]
        """
        super(SeriesIdentity, self).__init__(**kwargs)
        self.dimension = kwargs['dimension']

class SeriesIdentity(SeriesIdentityCustomization, _SeriesIdentityGenerated):
    pass


class _SeriesResultGenerated(msrest.serialization.Model):
    """SeriesResult.

    All required parameters must be populated in order to send to Azure.

    :ivar series: Required.
    :vartype series: ~azure.ai.metricsadvisor.models.SeriesIdentity
    :ivar timestamp_list: Required. timestamps of the series.
    :vartype timestamp_list: list[~datetime.datetime]
    :ivar value_list: Required. values of the series.
    :vartype value_list: list[float]
    :ivar is_anomaly_list: Required. whether points of the series are anomalies.
    :vartype is_anomaly_list: list[bool]
    :ivar period_list: Required. period calculated on each point of the series.
    :vartype period_list: list[int]
    :ivar expected_value_list: Required. expected values of the series given by smart detector.
    :vartype expected_value_list: list[float]
    :ivar lower_boundary_list: Required. lower boundary list of the series given by smart detector.
    :vartype lower_boundary_list: list[float]
    :ivar upper_boundary_list: Required. upper boundary list of the series given by smart detector.
    :vartype upper_boundary_list: list[float]
    """

    _validation = {
        'series': {'required': True},
        'timestamp_list': {'required': True},
        'value_list': {'required': True},
        'is_anomaly_list': {'required': True},
        'period_list': {'required': True},
        'expected_value_list': {'required': True},
        'lower_boundary_list': {'required': True},
        'upper_boundary_list': {'required': True},
    }

    _attribute_map = {
        'series': {'key': 'series', 'type': 'SeriesIdentity'},
        'timestamp_list': {'key': 'timestampList', 'type': '[iso-8601]'},
        'value_list': {'key': 'valueList', 'type': '[float]'},
        'is_anomaly_list': {'key': 'isAnomalyList', 'type': '[bool]'},
        'period_list': {'key': 'periodList', 'type': '[int]'},
        'expected_value_list': {'key': 'expectedValueList', 'type': '[float]'},
        'lower_boundary_list': {'key': 'lowerBoundaryList', 'type': '[float]'},
        'upper_boundary_list': {'key': 'upperBoundaryList', 'type': '[float]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword series: Required.
        :paramtype series: ~azure.ai.metricsadvisor.models.SeriesIdentity
        :keyword timestamp_list: Required. timestamps of the series.
        :paramtype timestamp_list: list[~datetime.datetime]
        :keyword value_list: Required. values of the series.
        :paramtype value_list: list[float]
        :keyword is_anomaly_list: Required. whether points of the series are anomalies.
        :paramtype is_anomaly_list: list[bool]
        :keyword period_list: Required. period calculated on each point of the series.
        :paramtype period_list: list[int]
        :keyword expected_value_list: Required. expected values of the series given by smart detector.
        :paramtype expected_value_list: list[float]
        :keyword lower_boundary_list: Required. lower boundary list of the series given by smart
         detector.
        :paramtype lower_boundary_list: list[float]
        :keyword upper_boundary_list: Required. upper boundary list of the series given by smart
         detector.
        :paramtype upper_boundary_list: list[float]
        """
        super(SeriesResult, self).__init__(**kwargs)
        self.series = kwargs['series']
        self.timestamp_list = kwargs['timestamp_list']
        self.value_list = kwargs['value_list']
        self.is_anomaly_list = kwargs['is_anomaly_list']
        self.period_list = kwargs['period_list']
        self.expected_value_list = kwargs['expected_value_list']
        self.lower_boundary_list = kwargs['lower_boundary_list']
        self.upper_boundary_list = kwargs['upper_boundary_list']

class SeriesResult(SeriesResultCustomization, _SeriesResultGenerated):
    pass


class _SeriesResultListGenerated(msrest.serialization.Model):
    """SeriesResultList.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required.
    :vartype value: list[~azure.ai.metricsadvisor.models.SeriesResult]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[SeriesResult]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required.
        :paramtype value: list[~azure.ai.metricsadvisor.models.SeriesResult]
        """
        super(SeriesResultList, self).__init__(**kwargs)
        self.value = kwargs['value']

class SeriesResultList(SeriesResultListCustomization, _SeriesResultListGenerated):
    pass


class _ServicePrincipalCredentialGenerated(_DataSourceCredentialGenerated):
    """ServicePrincipalCredential.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_credential_type: Required. Type of data source credential.Constant filled by
     server. Possible values include: "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype data_source_credential_type: str or
     ~azure.ai.metricsadvisor.models.DataSourceCredentialType
    :ivar data_source_credential_id: Unique id of data source credential.
    :vartype data_source_credential_id: str
    :ivar data_source_credential_name: Required. Name of data source credential.
    :vartype data_source_credential_name: str
    :ivar data_source_credential_description: Description of data source credential.
    :vartype data_source_credential_description: str
    :ivar parameters: Required.
    :vartype parameters: ~azure.ai.metricsadvisor.models.ServicePrincipalParam
    """

    _validation = {
        'data_source_credential_type': {'required': True},
        'data_source_credential_id': {'readonly': True},
        'data_source_credential_name': {'required': True},
        'parameters': {'required': True},
    }

    _attribute_map = {
        'data_source_credential_type': {'key': 'dataSourceCredentialType', 'type': 'str'},
        'data_source_credential_id': {'key': 'dataSourceCredentialId', 'type': 'str'},
        'data_source_credential_name': {'key': 'dataSourceCredentialName', 'type': 'str'},
        'data_source_credential_description': {'key': 'dataSourceCredentialDescription', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': 'ServicePrincipalParam'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_source_credential_name: Required. Name of data source credential.
        :paramtype data_source_credential_name: str
        :keyword data_source_credential_description: Description of data source credential.
        :paramtype data_source_credential_description: str
        :keyword parameters: Required.
        :paramtype parameters: ~azure.ai.metricsadvisor.models.ServicePrincipalParam
        """
        super(ServicePrincipalCredential, self).__init__(**kwargs)
        self.data_source_credential_type = 'ServicePrincipal'  # type: str
        self.parameters = kwargs['parameters']

class ServicePrincipalCredential(ServicePrincipalCredentialCustomization, DataSourceCredential, _ServicePrincipalCredentialGenerated):
    pass


class _ServicePrincipalCredentialPatchGenerated(_DataSourceCredentialPatchGenerated):
    """ServicePrincipalCredentialPatch.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_credential_type: Required. Type of data source credential.Constant filled by
     server. Possible values include: "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype data_source_credential_type: str or
     ~azure.ai.metricsadvisor.models.DataSourceCredentialType
    :ivar data_source_credential_name: Name of data source credential.
    :vartype data_source_credential_name: str
    :ivar data_source_credential_description: Description of data source credential.
    :vartype data_source_credential_description: str
    :ivar parameters:
    :vartype parameters: ~azure.ai.metricsadvisor.models.ServicePrincipalParamPatch
    """

    _validation = {
        'data_source_credential_type': {'required': True},
    }

    _attribute_map = {
        'data_source_credential_type': {'key': 'dataSourceCredentialType', 'type': 'str'},
        'data_source_credential_name': {'key': 'dataSourceCredentialName', 'type': 'str'},
        'data_source_credential_description': {'key': 'dataSourceCredentialDescription', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': 'ServicePrincipalParamPatch'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_source_credential_name: Name of data source credential.
        :paramtype data_source_credential_name: str
        :keyword data_source_credential_description: Description of data source credential.
        :paramtype data_source_credential_description: str
        :keyword parameters:
        :paramtype parameters: ~azure.ai.metricsadvisor.models.ServicePrincipalParamPatch
        """
        super(ServicePrincipalCredentialPatch, self).__init__(**kwargs)
        self.data_source_credential_type = 'ServicePrincipal'  # type: str
        self.parameters = kwargs.get('parameters', None)

class ServicePrincipalCredentialPatch(ServicePrincipalCredentialPatchCustomization, DataSourceCredentialPatch, _ServicePrincipalCredentialPatchGenerated):
    pass


class _ServicePrincipalInKVCredentialGenerated(_DataSourceCredentialGenerated):
    """ServicePrincipalInKVCredential.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_credential_type: Required. Type of data source credential.Constant filled by
     server. Possible values include: "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype data_source_credential_type: str or
     ~azure.ai.metricsadvisor.models.DataSourceCredentialType
    :ivar data_source_credential_id: Unique id of data source credential.
    :vartype data_source_credential_id: str
    :ivar data_source_credential_name: Required. Name of data source credential.
    :vartype data_source_credential_name: str
    :ivar data_source_credential_description: Description of data source credential.
    :vartype data_source_credential_description: str
    :ivar parameters: Required.
    :vartype parameters: ~azure.ai.metricsadvisor.models.ServicePrincipalInKVParam
    """

    _validation = {
        'data_source_credential_type': {'required': True},
        'data_source_credential_id': {'readonly': True},
        'data_source_credential_name': {'required': True},
        'parameters': {'required': True},
    }

    _attribute_map = {
        'data_source_credential_type': {'key': 'dataSourceCredentialType', 'type': 'str'},
        'data_source_credential_id': {'key': 'dataSourceCredentialId', 'type': 'str'},
        'data_source_credential_name': {'key': 'dataSourceCredentialName', 'type': 'str'},
        'data_source_credential_description': {'key': 'dataSourceCredentialDescription', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': 'ServicePrincipalInKVParam'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_source_credential_name: Required. Name of data source credential.
        :paramtype data_source_credential_name: str
        :keyword data_source_credential_description: Description of data source credential.
        :paramtype data_source_credential_description: str
        :keyword parameters: Required.
        :paramtype parameters: ~azure.ai.metricsadvisor.models.ServicePrincipalInKVParam
        """
        super(ServicePrincipalInKVCredential, self).__init__(**kwargs)
        self.data_source_credential_type = 'ServicePrincipalInKV'  # type: str
        self.parameters = kwargs['parameters']

class ServicePrincipalInKVCredential(ServicePrincipalInKVCredentialCustomization, DataSourceCredential, _ServicePrincipalInKVCredentialGenerated):
    pass


class _ServicePrincipalInKVCredentialPatchGenerated(_DataSourceCredentialPatchGenerated):
    """ServicePrincipalInKVCredentialPatch.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_credential_type: Required. Type of data source credential.Constant filled by
     server. Possible values include: "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype data_source_credential_type: str or
     ~azure.ai.metricsadvisor.models.DataSourceCredentialType
    :ivar data_source_credential_name: Name of data source credential.
    :vartype data_source_credential_name: str
    :ivar data_source_credential_description: Description of data source credential.
    :vartype data_source_credential_description: str
    :ivar parameters:
    :vartype parameters: ~azure.ai.metricsadvisor.models.ServicePrincipalInKVParamPatch
    """

    _validation = {
        'data_source_credential_type': {'required': True},
    }

    _attribute_map = {
        'data_source_credential_type': {'key': 'dataSourceCredentialType', 'type': 'str'},
        'data_source_credential_name': {'key': 'dataSourceCredentialName', 'type': 'str'},
        'data_source_credential_description': {'key': 'dataSourceCredentialDescription', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': 'ServicePrincipalInKVParamPatch'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_source_credential_name: Name of data source credential.
        :paramtype data_source_credential_name: str
        :keyword data_source_credential_description: Description of data source credential.
        :paramtype data_source_credential_description: str
        :keyword parameters:
        :paramtype parameters: ~azure.ai.metricsadvisor.models.ServicePrincipalInKVParamPatch
        """
        super(ServicePrincipalInKVCredentialPatch, self).__init__(**kwargs)
        self.data_source_credential_type = 'ServicePrincipalInKV'  # type: str
        self.parameters = kwargs.get('parameters', None)

class ServicePrincipalInKVCredentialPatch(ServicePrincipalInKVCredentialPatchCustomization, DataSourceCredentialPatch, _ServicePrincipalInKVCredentialPatchGenerated):
    pass


class _ServicePrincipalInKVParamGenerated(msrest.serialization.Model):
    """ServicePrincipalInKVParam.

    All required parameters must be populated in order to send to Azure.

    :ivar key_vault_endpoint: Required. The Key Vault endpoint that storing the service principal.
    :vartype key_vault_endpoint: str
    :ivar key_vault_client_id: Required. The Client Id to access the Key Vault.
    :vartype key_vault_client_id: str
    :ivar key_vault_client_secret: The Client Secret to access the Key Vault.
    :vartype key_vault_client_secret: str
    :ivar service_principal_id_name_in_kv: Required. The secret name of the service principal's
     client Id in the Key Vault.
    :vartype service_principal_id_name_in_kv: str
    :ivar service_principal_secret_name_in_kv: Required. The secret name of the service principal's
     client secret in the Key Vault.
    :vartype service_principal_secret_name_in_kv: str
    :ivar tenant_id: Required. The tenant id of your service principal.
    :vartype tenant_id: str
    """

    _validation = {
        'key_vault_endpoint': {'required': True},
        'key_vault_client_id': {'required': True},
        'service_principal_id_name_in_kv': {'required': True},
        'service_principal_secret_name_in_kv': {'required': True},
        'tenant_id': {'required': True},
    }

    _attribute_map = {
        'key_vault_endpoint': {'key': 'keyVaultEndpoint', 'type': 'str'},
        'key_vault_client_id': {'key': 'keyVaultClientId', 'type': 'str'},
        'key_vault_client_secret': {'key': 'keyVaultClientSecret', 'type': 'str'},
        'service_principal_id_name_in_kv': {'key': 'servicePrincipalIdNameInKV', 'type': 'str'},
        'service_principal_secret_name_in_kv': {'key': 'servicePrincipalSecretNameInKV', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword key_vault_endpoint: Required. The Key Vault endpoint that storing the service
         principal.
        :paramtype key_vault_endpoint: str
        :keyword key_vault_client_id: Required. The Client Id to access the Key Vault.
        :paramtype key_vault_client_id: str
        :keyword key_vault_client_secret: The Client Secret to access the Key Vault.
        :paramtype key_vault_client_secret: str
        :keyword service_principal_id_name_in_kv: Required. The secret name of the service principal's
         client Id in the Key Vault.
        :paramtype service_principal_id_name_in_kv: str
        :keyword service_principal_secret_name_in_kv: Required. The secret name of the service
         principal's client secret in the Key Vault.
        :paramtype service_principal_secret_name_in_kv: str
        :keyword tenant_id: Required. The tenant id of your service principal.
        :paramtype tenant_id: str
        """
        super(ServicePrincipalInKVParam, self).__init__(**kwargs)
        self.key_vault_endpoint = kwargs['key_vault_endpoint']
        self.key_vault_client_id = kwargs['key_vault_client_id']
        self.key_vault_client_secret = kwargs.get('key_vault_client_secret', None)
        self.service_principal_id_name_in_kv = kwargs['service_principal_id_name_in_kv']
        self.service_principal_secret_name_in_kv = kwargs['service_principal_secret_name_in_kv']
        self.tenant_id = kwargs['tenant_id']

class ServicePrincipalInKVParam(ServicePrincipalInKVParamCustomization, _ServicePrincipalInKVParamGenerated):
    pass


class _ServicePrincipalInKVParamPatchGenerated(msrest.serialization.Model):
    """ServicePrincipalInKVParamPatch.

    :ivar key_vault_endpoint: The Key Vault endpoint that storing the service principal.
    :vartype key_vault_endpoint: str
    :ivar key_vault_client_id: The Client Id to access the Key Vault.
    :vartype key_vault_client_id: str
    :ivar key_vault_client_secret: The Client Secret to access the Key Vault.
    :vartype key_vault_client_secret: str
    :ivar service_principal_id_name_in_kv: The secret name of the service principal's client Id in
     the Key Vault.
    :vartype service_principal_id_name_in_kv: str
    :ivar service_principal_secret_name_in_kv: The secret name of the service principal's client
     secret in the Key Vault.
    :vartype service_principal_secret_name_in_kv: str
    :ivar tenant_id: The tenant id of your service principal.
    :vartype tenant_id: str
    """

    _attribute_map = {
        'key_vault_endpoint': {'key': 'keyVaultEndpoint', 'type': 'str'},
        'key_vault_client_id': {'key': 'keyVaultClientId', 'type': 'str'},
        'key_vault_client_secret': {'key': 'keyVaultClientSecret', 'type': 'str'},
        'service_principal_id_name_in_kv': {'key': 'servicePrincipalIdNameInKV', 'type': 'str'},
        'service_principal_secret_name_in_kv': {'key': 'servicePrincipalSecretNameInKV', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword key_vault_endpoint: The Key Vault endpoint that storing the service principal.
        :paramtype key_vault_endpoint: str
        :keyword key_vault_client_id: The Client Id to access the Key Vault.
        :paramtype key_vault_client_id: str
        :keyword key_vault_client_secret: The Client Secret to access the Key Vault.
        :paramtype key_vault_client_secret: str
        :keyword service_principal_id_name_in_kv: The secret name of the service principal's client Id
         in the Key Vault.
        :paramtype service_principal_id_name_in_kv: str
        :keyword service_principal_secret_name_in_kv: The secret name of the service principal's client
         secret in the Key Vault.
        :paramtype service_principal_secret_name_in_kv: str
        :keyword tenant_id: The tenant id of your service principal.
        :paramtype tenant_id: str
        """
        super(ServicePrincipalInKVParamPatch, self).__init__(**kwargs)
        self.key_vault_endpoint = kwargs.get('key_vault_endpoint', None)
        self.key_vault_client_id = kwargs.get('key_vault_client_id', None)
        self.key_vault_client_secret = kwargs.get('key_vault_client_secret', None)
        self.service_principal_id_name_in_kv = kwargs.get('service_principal_id_name_in_kv', None)
        self.service_principal_secret_name_in_kv = kwargs.get('service_principal_secret_name_in_kv', None)
        self.tenant_id = kwargs.get('tenant_id', None)

class ServicePrincipalInKVParamPatch(ServicePrincipalInKVParamPatchCustomization, _ServicePrincipalInKVParamPatchGenerated):
    pass


class _ServicePrincipalParamGenerated(msrest.serialization.Model):
    """ServicePrincipalParam.

    All required parameters must be populated in order to send to Azure.

    :ivar client_id: Required. The client id of the service principal.
    :vartype client_id: str
    :ivar client_secret: The client secret of the service principal.
    :vartype client_secret: str
    :ivar tenant_id: Required. The tenant id of the service principal.
    :vartype tenant_id: str
    """

    _validation = {
        'client_id': {'required': True},
        'tenant_id': {'required': True},
    }

    _attribute_map = {
        'client_id': {'key': 'clientId', 'type': 'str'},
        'client_secret': {'key': 'clientSecret', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword client_id: Required. The client id of the service principal.
        :paramtype client_id: str
        :keyword client_secret: The client secret of the service principal.
        :paramtype client_secret: str
        :keyword tenant_id: Required. The tenant id of the service principal.
        :paramtype tenant_id: str
        """
        super(ServicePrincipalParam, self).__init__(**kwargs)
        self.client_id = kwargs['client_id']
        self.client_secret = kwargs.get('client_secret', None)
        self.tenant_id = kwargs['tenant_id']

class ServicePrincipalParam(ServicePrincipalParamCustomization, _ServicePrincipalParamGenerated):
    pass


class _ServicePrincipalParamPatchGenerated(msrest.serialization.Model):
    """ServicePrincipalParamPatch.

    :ivar client_id: The client id of the service principal.
    :vartype client_id: str
    :ivar client_secret: The client secret of the service principal.
    :vartype client_secret: str
    :ivar tenant_id: The tenant id of the service principal.
    :vartype tenant_id: str
    """

    _attribute_map = {
        'client_id': {'key': 'clientId', 'type': 'str'},
        'client_secret': {'key': 'clientSecret', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword client_id: The client id of the service principal.
        :paramtype client_id: str
        :keyword client_secret: The client secret of the service principal.
        :paramtype client_secret: str
        :keyword tenant_id: The tenant id of the service principal.
        :paramtype tenant_id: str
        """
        super(ServicePrincipalParamPatch, self).__init__(**kwargs)
        self.client_id = kwargs.get('client_id', None)
        self.client_secret = kwargs.get('client_secret', None)
        self.tenant_id = kwargs.get('tenant_id', None)

class ServicePrincipalParamPatch(ServicePrincipalParamPatchCustomization, _ServicePrincipalParamPatchGenerated):
    pass


class _SeverityConditionGenerated(msrest.serialization.Model):
    """SeverityCondition.

    All required parameters must be populated in order to send to Azure.

    :ivar min_alert_severity: Required. min alert severity. Possible values include: "Low",
     "Medium", "High".
    :vartype min_alert_severity: str or ~azure.ai.metricsadvisor.models.Severity
    :ivar max_alert_severity: Required. max alert severity. Possible values include: "Low",
     "Medium", "High".
    :vartype max_alert_severity: str or ~azure.ai.metricsadvisor.models.Severity
    """

    _validation = {
        'min_alert_severity': {'required': True},
        'max_alert_severity': {'required': True},
    }

    _attribute_map = {
        'min_alert_severity': {'key': 'minAlertSeverity', 'type': 'str'},
        'max_alert_severity': {'key': 'maxAlertSeverity', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword min_alert_severity: Required. min alert severity. Possible values include: "Low",
         "Medium", "High".
        :paramtype min_alert_severity: str or ~azure.ai.metricsadvisor.models.Severity
        :keyword max_alert_severity: Required. max alert severity. Possible values include: "Low",
         "Medium", "High".
        :paramtype max_alert_severity: str or ~azure.ai.metricsadvisor.models.Severity
        """
        super(SeverityCondition, self).__init__(**kwargs)
        self.min_alert_severity = kwargs['min_alert_severity']
        self.max_alert_severity = kwargs['max_alert_severity']

class SeverityCondition(SeverityConditionCustomization, _SeverityConditionGenerated):
    pass


class _SeverityFilterConditionGenerated(msrest.serialization.Model):
    """SeverityFilterCondition.

    All required parameters must be populated in order to send to Azure.

    :ivar min: Required. min severity. Possible values include: "Low", "Medium", "High".
    :vartype min: str or ~azure.ai.metricsadvisor.models.Severity
    :ivar max: Required. max severity. Possible values include: "Low", "Medium", "High".
    :vartype max: str or ~azure.ai.metricsadvisor.models.Severity
    """

    _validation = {
        'min': {'required': True},
        'max': {'required': True},
    }

    _attribute_map = {
        'min': {'key': 'min', 'type': 'str'},
        'max': {'key': 'max', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword min: Required. min severity. Possible values include: "Low", "Medium", "High".
        :paramtype min: str or ~azure.ai.metricsadvisor.models.Severity
        :keyword max: Required. max severity. Possible values include: "Low", "Medium", "High".
        :paramtype max: str or ~azure.ai.metricsadvisor.models.Severity
        """
        super(SeverityFilterCondition, self).__init__(**kwargs)
        self.min = kwargs['min']
        self.max = kwargs['max']

class SeverityFilterCondition(SeverityFilterConditionCustomization, _SeverityFilterConditionGenerated):
    pass


class _SmartDetectionConditionGenerated(msrest.serialization.Model):
    """SmartDetectionCondition.

    All required parameters must be populated in order to send to Azure.

    :ivar sensitivity: Required. sensitivity, value range : (0, 100].
    :vartype sensitivity: float
    :ivar anomaly_detector_direction: Required. detection direction. Possible values include:
     "Both", "Down", "Up".
    :vartype anomaly_detector_direction: str or
     ~azure.ai.metricsadvisor.models.AnomalyDetectorDirection
    :ivar suppress_condition: Required.
    :vartype suppress_condition: ~azure.ai.metricsadvisor.models.SuppressCondition
    """

    _validation = {
        'sensitivity': {'required': True},
        'anomaly_detector_direction': {'required': True},
        'suppress_condition': {'required': True},
    }

    _attribute_map = {
        'sensitivity': {'key': 'sensitivity', 'type': 'float'},
        'anomaly_detector_direction': {'key': 'anomalyDetectorDirection', 'type': 'str'},
        'suppress_condition': {'key': 'suppressCondition', 'type': 'SuppressCondition'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword sensitivity: Required. sensitivity, value range : (0, 100].
        :paramtype sensitivity: float
        :keyword anomaly_detector_direction: Required. detection direction. Possible values include:
         "Both", "Down", "Up".
        :paramtype anomaly_detector_direction: str or
         ~azure.ai.metricsadvisor.models.AnomalyDetectorDirection
        :keyword suppress_condition: Required.
        :paramtype suppress_condition: ~azure.ai.metricsadvisor.models.SuppressCondition
        """
        super(SmartDetectionCondition, self).__init__(**kwargs)
        self.sensitivity = kwargs['sensitivity']
        self.anomaly_detector_direction = kwargs['anomaly_detector_direction']
        self.suppress_condition = kwargs['suppress_condition']

class SmartDetectionCondition(SmartDetectionConditionCustomization, _SmartDetectionConditionGenerated):
    pass


class _SmartDetectionConditionPatchGenerated(msrest.serialization.Model):
    """SmartDetectionConditionPatch.

    :ivar sensitivity: sensitivity, value range : (0, 100].
    :vartype sensitivity: float
    :ivar anomaly_detector_direction: detection direction. Possible values include: "Both", "Down",
     "Up".
    :vartype anomaly_detector_direction: str or
     ~azure.ai.metricsadvisor.models.AnomalyDetectorDirection
    :ivar suppress_condition:
    :vartype suppress_condition: ~azure.ai.metricsadvisor.models.SuppressConditionPatch
    """

    _attribute_map = {
        'sensitivity': {'key': 'sensitivity', 'type': 'float'},
        'anomaly_detector_direction': {'key': 'anomalyDetectorDirection', 'type': 'str'},
        'suppress_condition': {'key': 'suppressCondition', 'type': 'SuppressConditionPatch'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword sensitivity: sensitivity, value range : (0, 100].
        :paramtype sensitivity: float
        :keyword anomaly_detector_direction: detection direction. Possible values include: "Both",
         "Down", "Up".
        :paramtype anomaly_detector_direction: str or
         ~azure.ai.metricsadvisor.models.AnomalyDetectorDirection
        :keyword suppress_condition:
        :paramtype suppress_condition: ~azure.ai.metricsadvisor.models.SuppressConditionPatch
        """
        super(SmartDetectionConditionPatch, self).__init__(**kwargs)
        self.sensitivity = kwargs.get('sensitivity', None)
        self.anomaly_detector_direction = kwargs.get('anomaly_detector_direction', None)
        self.suppress_condition = kwargs.get('suppress_condition', None)

class SmartDetectionConditionPatch(SmartDetectionConditionPatchCustomization, _SmartDetectionConditionPatchGenerated):
    pass


class _SQLServerDataFeedGenerated(_DataFeedDetailGenerated):
    """SQLServerDataFeed.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_id: data feed unique id.
    :vartype data_feed_id: str
    :ivar data_feed_name: Required. data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar granularity_name: Required. granularity of the time series. Possible values include:
     "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
    :vartype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
    :ivar granularity_amount: if granularity is custom,it is required.
    :vartype granularity_amount: int
    :ivar metrics: Required. measure list.
    :vartype metrics: list[~azure.ai.metricsadvisor.models.Metric]
    :ivar dimension: dimension list.
    :vartype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: Required. ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar is_admin: the query user is one of data feed administrator or not.
    :vartype is_admin: bool
    :ivar creator: data feed creator.
    :vartype creator: str
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar created_time: data feed created time.
    :vartype created_time: ~datetime.datetime
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter: Required.
    :vartype data_source_parameter: ~azure.ai.metricsadvisor.models.SqlSourceParameter
    """

    _validation = {
        'data_source_type': {'required': True},
        'data_feed_id': {'readonly': True},
        'data_feed_name': {'required': True},
        'granularity_name': {'required': True},
        'metrics': {'required': True, 'unique': True},
        'dimension': {'unique': True},
        'data_start_from': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
        'is_admin': {'readonly': True},
        'creator': {'readonly': True},
        'status': {'readonly': True},
        'created_time': {'readonly': True},
        'data_source_parameter': {'required': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_id': {'key': 'dataFeedId', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'granularity_name': {'key': 'granularityName', 'type': 'str'},
        'granularity_amount': {'key': 'granularityAmount', 'type': 'int'},
        'metrics': {'key': 'metrics', 'type': '[Metric]'},
        'dimension': {'key': 'dimension', 'type': '[Dimension]'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'is_admin': {'key': 'isAdmin', 'type': 'bool'},
        'creator': {'key': 'creator', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'SqlSourceParameter'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: Required. data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword granularity_name: Required. granularity of the time series. Possible values include:
         "Yearly", "Monthly", "Weekly", "Daily", "Hourly", "Minutely", "Custom".
        :paramtype granularity_name: str or ~azure.ai.metricsadvisor.models.Granularity
        :keyword granularity_amount: if granularity is custom,it is required.
        :paramtype granularity_amount: int
        :keyword metrics: Required. measure list.
        :paramtype metrics: list[~azure.ai.metricsadvisor.models.Metric]
        :keyword dimension: dimension list.
        :paramtype dimension: list[~azure.ai.metricsadvisor.models.Dimension]
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: Required. ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter: Required.
        :paramtype data_source_parameter: ~azure.ai.metricsadvisor.models.SqlSourceParameter
        """
        super(SQLServerDataFeed, self).__init__(**kwargs)
        self.data_source_type = 'SqlServer'  # type: str
        self.data_source_parameter = kwargs['data_source_parameter']

class SQLServerDataFeed(SQLServerDataFeedCustomization, DataFeedDetail, _SQLServerDataFeedGenerated):
    pass


class _SQLServerDataFeedPatchGenerated(_DataFeedDetailPatchGenerated):
    """SQLServerDataFeedPatch.

    All required parameters must be populated in order to send to Azure.

    :ivar data_source_type: Required. data source type.Constant filled by server. Possible values
     include: "AzureApplicationInsights", "AzureBlob", "AzureCosmosDB", "AzureDataExplorer",
     "AzureDataLakeStorageGen2", "AzureEventHubs", "AzureLogAnalytics", "AzureTable", "InfluxDB",
     "MongoDB", "MySql", "PostgreSql", "SqlServer".
    :vartype data_source_type: str or ~azure.ai.metricsadvisor.models.DataSourceType
    :ivar data_feed_name: data feed name.
    :vartype data_feed_name: str
    :ivar data_feed_description: data feed description.
    :vartype data_feed_description: str
    :ivar timestamp_column: user-defined timestamp column. if timestampColumn is null, start time
     of every time slice will be used as default value.
    :vartype timestamp_column: str
    :ivar data_start_from: ingestion start time.
    :vartype data_start_from: ~datetime.datetime
    :ivar start_offset_in_seconds: the time that the beginning of data ingestion task will delay
     for every data slice according to this offset.
    :vartype start_offset_in_seconds: long
    :ivar max_concurrency: the max concurrency of data ingestion queries against user data source.
     0 means no limitation.
    :vartype max_concurrency: int
    :ivar min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
    :vartype min_retry_interval_in_seconds: long
    :ivar stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
     schedule time in seconds.
    :vartype stop_retry_after_in_seconds: long
    :ivar need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
     "NeedRollup", "AlreadyRollup".
    :vartype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
    :ivar roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
     "Avg", "Count".
    :vartype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
    :ivar roll_up_columns: roll up columns.
    :vartype roll_up_columns: list[str]
    :ivar all_up_identification: the identification value for the row of calculated all-up value.
    :vartype all_up_identification: str
    :ivar fill_missing_point_type: the type of fill missing point for anomaly detection. Possible
     values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
    :vartype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
    :ivar fill_missing_point_value: the value of fill missing point for anomaly detection.
    :vartype fill_missing_point_value: float
    :ivar view_mode: data feed access mode, default is Private. Possible values include: "Private",
     "Public".
    :vartype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
    :ivar admins: data feed administrator.
    :vartype admins: list[str]
    :ivar viewers: data feed viewer.
    :vartype viewers: list[str]
    :ivar status: data feed status. Possible values include: "Active", "Paused".
    :vartype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
    :ivar action_link_template: action link for alert.
    :vartype action_link_template: str
    :ivar authentication_type: authentication type for corresponding data source. Possible values
     include: "Basic", "ManagedIdentity", "AzureSQLConnectionString", "DataLakeGen2SharedKey",
     "ServicePrincipal", "ServicePrincipalInKV".
    :vartype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
    :ivar credential_id: The credential entity id.
    :vartype credential_id: str
    :ivar data_source_parameter:
    :vartype data_source_parameter: ~azure.ai.metricsadvisor.models.SQLSourceParameterPatch
    """

    _validation = {
        'data_source_type': {'required': True},
        'roll_up_columns': {'unique': True},
        'admins': {'unique': True},
        'viewers': {'unique': True},
    }

    _attribute_map = {
        'data_source_type': {'key': 'dataSourceType', 'type': 'str'},
        'data_feed_name': {'key': 'dataFeedName', 'type': 'str'},
        'data_feed_description': {'key': 'dataFeedDescription', 'type': 'str'},
        'timestamp_column': {'key': 'timestampColumn', 'type': 'str'},
        'data_start_from': {'key': 'dataStartFrom', 'type': 'iso-8601'},
        'start_offset_in_seconds': {'key': 'startOffsetInSeconds', 'type': 'long'},
        'max_concurrency': {'key': 'maxConcurrency', 'type': 'int'},
        'min_retry_interval_in_seconds': {'key': 'minRetryIntervalInSeconds', 'type': 'long'},
        'stop_retry_after_in_seconds': {'key': 'stopRetryAfterInSeconds', 'type': 'long'},
        'need_rollup': {'key': 'needRollup', 'type': 'str'},
        'roll_up_method': {'key': 'rollUpMethod', 'type': 'str'},
        'roll_up_columns': {'key': 'rollUpColumns', 'type': '[str]'},
        'all_up_identification': {'key': 'allUpIdentification', 'type': 'str'},
        'fill_missing_point_type': {'key': 'fillMissingPointType', 'type': 'str'},
        'fill_missing_point_value': {'key': 'fillMissingPointValue', 'type': 'float'},
        'view_mode': {'key': 'viewMode', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'viewers': {'key': 'viewers', 'type': '[str]'},
        'status': {'key': 'status', 'type': 'str'},
        'action_link_template': {'key': 'actionLinkTemplate', 'type': 'str'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'credential_id': {'key': 'credentialId', 'type': 'str'},
        'data_source_parameter': {'key': 'dataSourceParameter', 'type': 'SQLSourceParameterPatch'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword data_feed_name: data feed name.
        :paramtype data_feed_name: str
        :keyword data_feed_description: data feed description.
        :paramtype data_feed_description: str
        :keyword timestamp_column: user-defined timestamp column. if timestampColumn is null, start
         time of every time slice will be used as default value.
        :paramtype timestamp_column: str
        :keyword data_start_from: ingestion start time.
        :paramtype data_start_from: ~datetime.datetime
        :keyword start_offset_in_seconds: the time that the beginning of data ingestion task will delay
         for every data slice according to this offset.
        :paramtype start_offset_in_seconds: long
        :keyword max_concurrency: the max concurrency of data ingestion queries against user data
         source. 0 means no limitation.
        :paramtype max_concurrency: int
        :keyword min_retry_interval_in_seconds: the min retry interval for failed data ingestion tasks.
        :paramtype min_retry_interval_in_seconds: long
        :keyword stop_retry_after_in_seconds: stop retry data ingestion after the data slice first
         schedule time in seconds.
        :paramtype stop_retry_after_in_seconds: long
        :keyword need_rollup: mark if the data feed need rollup. Possible values include: "NoRollup",
         "NeedRollup", "AlreadyRollup".
        :paramtype need_rollup: str or ~azure.ai.metricsadvisor.models.NeedRollupEnum
        :keyword roll_up_method: roll up method. Possible values include: "None", "Sum", "Max", "Min",
         "Avg", "Count".
        :paramtype roll_up_method: str or ~azure.ai.metricsadvisor.models.RollUpMethod
        :keyword roll_up_columns: roll up columns.
        :paramtype roll_up_columns: list[str]
        :keyword all_up_identification: the identification value for the row of calculated all-up
         value.
        :paramtype all_up_identification: str
        :keyword fill_missing_point_type: the type of fill missing point for anomaly detection.
         Possible values include: "SmartFilling", "PreviousValue", "CustomValue", "NoFilling".
        :paramtype fill_missing_point_type: str or ~azure.ai.metricsadvisor.models.FillMissingPointType
        :keyword fill_missing_point_value: the value of fill missing point for anomaly detection.
        :paramtype fill_missing_point_value: float
        :keyword view_mode: data feed access mode, default is Private. Possible values include:
         "Private", "Public".
        :paramtype view_mode: str or ~azure.ai.metricsadvisor.models.ViewMode
        :keyword admins: data feed administrator.
        :paramtype admins: list[str]
        :keyword viewers: data feed viewer.
        :paramtype viewers: list[str]
        :keyword status: data feed status. Possible values include: "Active", "Paused".
        :paramtype status: str or ~azure.ai.metricsadvisor.models.EntityStatus
        :keyword action_link_template: action link for alert.
        :paramtype action_link_template: str
        :keyword authentication_type: authentication type for corresponding data source. Possible
         values include: "Basic", "ManagedIdentity", "AzureSQLConnectionString",
         "DataLakeGen2SharedKey", "ServicePrincipal", "ServicePrincipalInKV".
        :paramtype authentication_type: str or ~azure.ai.metricsadvisor.models.AuthenticationTypeEnum
        :keyword credential_id: The credential entity id.
        :paramtype credential_id: str
        :keyword data_source_parameter:
        :paramtype data_source_parameter: ~azure.ai.metricsadvisor.models.SQLSourceParameterPatch
        """
        super(SQLServerDataFeedPatch, self).__init__(**kwargs)
        self.data_source_type = 'SqlServer'  # type: str
        self.data_source_parameter = kwargs.get('data_source_parameter', None)

class SQLServerDataFeedPatch(SQLServerDataFeedPatchCustomization, DataFeedDetailPatch, _SQLServerDataFeedPatchGenerated):
    pass


class _SqlSourceParameterGenerated(msrest.serialization.Model):
    """SqlSourceParameter.

    All required parameters must be populated in order to send to Azure.

    :ivar connection_string: The connection string of this database.
    :vartype connection_string: str
    :ivar query: Required. The script to query this database.
    :vartype query: str
    """

    _validation = {
        'query': {'required': True},
    }

    _attribute_map = {
        'connection_string': {'key': 'connectionString', 'type': 'str'},
        'query': {'key': 'query', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword connection_string: The connection string of this database.
        :paramtype connection_string: str
        :keyword query: Required. The script to query this database.
        :paramtype query: str
        """
        super(SqlSourceParameter, self).__init__(**kwargs)
        self.connection_string = kwargs.get('connection_string', None)
        self.query = kwargs['query']

class SqlSourceParameter(SqlSourceParameterCustomization, _SqlSourceParameterGenerated):
    pass


class _SQLSourceParameterPatchGenerated(msrest.serialization.Model):
    """SQLSourceParameterPatch.

    :ivar connection_string: The connection string of this database.
    :vartype connection_string: str
    :ivar query: The script to query this database.
    :vartype query: str
    """

    _attribute_map = {
        'connection_string': {'key': 'connectionString', 'type': 'str'},
        'query': {'key': 'query', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword connection_string: The connection string of this database.
        :paramtype connection_string: str
        :keyword query: The script to query this database.
        :paramtype query: str
        """
        super(SQLSourceParameterPatch, self).__init__(**kwargs)
        self.connection_string = kwargs.get('connection_string', None)
        self.query = kwargs.get('query', None)

class SQLSourceParameterPatch(SQLSourceParameterPatchCustomization, _SQLSourceParameterPatchGenerated):
    pass


class _SuppressConditionGenerated(msrest.serialization.Model):
    """SuppressCondition.

    All required parameters must be populated in order to send to Azure.

    :ivar min_number: Required. min point number, value range : [1, +∞).
    :vartype min_number: int
    :ivar min_ratio: Required. min point ratio, value range : (0, 100].
    :vartype min_ratio: float
    """

    _validation = {
        'min_number': {'required': True},
        'min_ratio': {'required': True},
    }

    _attribute_map = {
        'min_number': {'key': 'minNumber', 'type': 'int'},
        'min_ratio': {'key': 'minRatio', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword min_number: Required. min point number, value range : [1, +∞).
        :paramtype min_number: int
        :keyword min_ratio: Required. min point ratio, value range : (0, 100].
        :paramtype min_ratio: float
        """
        super(SuppressCondition, self).__init__(**kwargs)
        self.min_number = kwargs['min_number']
        self.min_ratio = kwargs['min_ratio']

class SuppressCondition(SuppressConditionCustomization, _SuppressConditionGenerated):
    pass


class _SuppressConditionPatchGenerated(msrest.serialization.Model):
    """SuppressConditionPatch.

    :ivar min_number: min point number, value range : [1, +∞).
    :vartype min_number: int
    :ivar min_ratio: min point ratio, value range : (0, 100].
    :vartype min_ratio: float
    """

    _attribute_map = {
        'min_number': {'key': 'minNumber', 'type': 'int'},
        'min_ratio': {'key': 'minRatio', 'type': 'float'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword min_number: min point number, value range : [1, +∞).
        :paramtype min_number: int
        :keyword min_ratio: min point ratio, value range : (0, 100].
        :paramtype min_ratio: float
        """
        super(SuppressConditionPatch, self).__init__(**kwargs)
        self.min_number = kwargs.get('min_number', None)
        self.min_ratio = kwargs.get('min_ratio', None)

class SuppressConditionPatch(SuppressConditionPatchCustomization, _SuppressConditionPatchGenerated):
    pass


class _TopNGroupScopeGenerated(msrest.serialization.Model):
    """TopNGroupScope.

    All required parameters must be populated in order to send to Azure.

    :ivar top: Required. top N, value range : [1, +∞).
    :vartype top: int
    :ivar period: Required. point count used to look back, value range : [1, +∞).
    :vartype period: int
    :ivar min_top_count: Required. min count should be in top N, value range : [1, +∞)
    
     should be less than or equal to period.
    :vartype min_top_count: int
    """

    _validation = {
        'top': {'required': True},
        'period': {'required': True},
        'min_top_count': {'required': True},
    }

    _attribute_map = {
        'top': {'key': 'top', 'type': 'int'},
        'period': {'key': 'period', 'type': 'int'},
        'min_top_count': {'key': 'minTopCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword top: Required. top N, value range : [1, +∞).
        :paramtype top: int
        :keyword period: Required. point count used to look back, value range : [1, +∞).
        :paramtype period: int
        :keyword min_top_count: Required. min count should be in top N, value range : [1, +∞)
        
         should be less than or equal to period.
        :paramtype min_top_count: int
        """
        super(TopNGroupScope, self).__init__(**kwargs)
        self.top = kwargs['top']
        self.period = kwargs['period']
        self.min_top_count = kwargs['min_top_count']

class TopNGroupScope(TopNGroupScopeCustomization, _TopNGroupScopeGenerated):
    pass


class _UsageStatsGenerated(msrest.serialization.Model):
    """UsageStats.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar timestamp: The timestamp of the stats.
    :vartype timestamp: ~datetime.datetime
    :ivar active_series_count: The active series count.
    :vartype active_series_count: int
    :ivar all_series_count: All series count under non deleted data feed.
    :vartype all_series_count: int
    :ivar metrics_count: The metrics count under non deleted data feed.
    :vartype metrics_count: int
    :ivar data_feed_count: The count of non deleted data feed.
    :vartype data_feed_count: int
    """

    _validation = {
        'timestamp': {'readonly': True},
        'active_series_count': {'readonly': True},
        'all_series_count': {'readonly': True},
        'metrics_count': {'readonly': True},
        'data_feed_count': {'readonly': True},
    }

    _attribute_map = {
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'active_series_count': {'key': 'activeSeriesCount', 'type': 'int'},
        'all_series_count': {'key': 'allSeriesCount', 'type': 'int'},
        'metrics_count': {'key': 'metricsCount', 'type': 'int'},
        'data_feed_count': {'key': 'dataFeedCount', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(UsageStats, self).__init__(**kwargs)
        self.timestamp = None
        self.active_series_count = None
        self.all_series_count = None
        self.metrics_count = None
        self.data_feed_count = None

class UsageStats(UsageStatsCustomization, _UsageStatsGenerated):
    pass


class _ValueConditionGenerated(msrest.serialization.Model):
    """ValueCondition.

    All required parameters must be populated in order to send to Azure.

    :ivar lower: lower bound
    
     should be specified when direction is Both or Down.
    :vartype lower: float
    :ivar upper: upper bound
    
     should be specified when direction is Both or Up.
    :vartype upper: float
    :ivar direction: Required. value filter direction. Possible values include: "Both", "Down",
     "Up".
    :vartype direction: str or ~azure.ai.metricsadvisor.models.Direction
    :ivar type: data used to implement value filter. Possible values include: "Value", "Mean".
     Default value: "Value".
    :vartype type: str or ~azure.ai.metricsadvisor.models.ValueType
    :ivar metric_id: the other metric unique id used for value filter.
    :vartype metric_id: str
    :ivar trigger_for_missing: trigger alert when the corresponding point is missing in the other
     metric
    
     should be specified only when using other metric to filter.
    :vartype trigger_for_missing: bool
    """

    _validation = {
        'direction': {'required': True},
    }

    _attribute_map = {
        'lower': {'key': 'lower', 'type': 'float'},
        'upper': {'key': 'upper', 'type': 'float'},
        'direction': {'key': 'direction', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'metric_id': {'key': 'metricId', 'type': 'str'},
        'trigger_for_missing': {'key': 'triggerForMissing', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword lower: lower bound
        
         should be specified when direction is Both or Down.
        :paramtype lower: float
        :keyword upper: upper bound
        
         should be specified when direction is Both or Up.
        :paramtype upper: float
        :keyword direction: Required. value filter direction. Possible values include: "Both", "Down",
         "Up".
        :paramtype direction: str or ~azure.ai.metricsadvisor.models.Direction
        :keyword type: data used to implement value filter. Possible values include: "Value", "Mean".
         Default value: "Value".
        :paramtype type: str or ~azure.ai.metricsadvisor.models.ValueType
        :keyword metric_id: the other metric unique id used for value filter.
        :paramtype metric_id: str
        :keyword trigger_for_missing: trigger alert when the corresponding point is missing in the
         other metric
        
         should be specified only when using other metric to filter.
        :paramtype trigger_for_missing: bool
        """
        super(ValueCondition, self).__init__(**kwargs)
        self.lower = kwargs.get('lower', None)
        self.upper = kwargs.get('upper', None)
        self.direction = kwargs['direction']
        self.type = kwargs.get('type', "Value")
        self.metric_id = kwargs.get('metric_id', None)
        self.trigger_for_missing = kwargs.get('trigger_for_missing', None)

class ValueCondition(ValueConditionCustomization, _ValueConditionGenerated):
    pass


class _WebhookHookInfoGenerated(_HookInfoGenerated):
    """WebhookHookInfo.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar hook_type: Required. hook type.Constant filled by server. Possible values include:
     "Webhook", "Email".
    :vartype hook_type: str or ~azure.ai.metricsadvisor.models.HookType
    :ivar hook_id: Hook unique id.
    :vartype hook_id: str
    :ivar hook_name: Required. hook unique name.
    :vartype hook_name: str
    :ivar description: hook description.
    :vartype description: str
    :ivar external_link: hook external link.
    :vartype external_link: str
    :ivar admins: hook administrators.
    :vartype admins: list[str]
    :ivar hook_parameter: Required.
    :vartype hook_parameter: ~azure.ai.metricsadvisor.models.WebhookHookParameter
    """

    _validation = {
        'hook_type': {'required': True},
        'hook_id': {'readonly': True},
        'hook_name': {'required': True},
        'admins': {'unique': True},
        'hook_parameter': {'required': True},
    }

    _attribute_map = {
        'hook_type': {'key': 'hookType', 'type': 'str'},
        'hook_id': {'key': 'hookId', 'type': 'str'},
        'hook_name': {'key': 'hookName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'external_link': {'key': 'externalLink', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'hook_parameter': {'key': 'hookParameter', 'type': 'WebhookHookParameter'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword hook_name: Required. hook unique name.
        :paramtype hook_name: str
        :keyword description: hook description.
        :paramtype description: str
        :keyword external_link: hook external link.
        :paramtype external_link: str
        :keyword admins: hook administrators.
        :paramtype admins: list[str]
        :keyword hook_parameter: Required.
        :paramtype hook_parameter: ~azure.ai.metricsadvisor.models.WebhookHookParameter
        """
        super(WebhookHookInfo, self).__init__(**kwargs)
        self.hook_type = 'Webhook'  # type: str
        self.hook_parameter = kwargs['hook_parameter']

class WebhookHookInfo(WebhookHookInfoCustomization, HookInfo, _WebhookHookInfoGenerated):
    pass


class _WebhookHookInfoPatchGenerated(_HookInfoPatchGenerated):
    """WebhookHookInfoPatch.

    All required parameters must be populated in order to send to Azure.

    :ivar hook_type: Required. hook type.Constant filled by server. Possible values include:
     "Webhook", "Email".
    :vartype hook_type: str or ~azure.ai.metricsadvisor.models.HookType
    :ivar hook_name: hook unique name.
    :vartype hook_name: str
    :ivar description: hook description.
    :vartype description: str
    :ivar external_link: hook external link.
    :vartype external_link: str
    :ivar admins: hook administrators.
    :vartype admins: list[str]
    :ivar hook_parameter:
    :vartype hook_parameter: ~azure.ai.metricsadvisor.models.WebhookHookParameterPatch
    """

    _validation = {
        'hook_type': {'required': True},
        'admins': {'unique': True},
    }

    _attribute_map = {
        'hook_type': {'key': 'hookType', 'type': 'str'},
        'hook_name': {'key': 'hookName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'external_link': {'key': 'externalLink', 'type': 'str'},
        'admins': {'key': 'admins', 'type': '[str]'},
        'hook_parameter': {'key': 'hookParameter', 'type': 'WebhookHookParameterPatch'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword hook_name: hook unique name.
        :paramtype hook_name: str
        :keyword description: hook description.
        :paramtype description: str
        :keyword external_link: hook external link.
        :paramtype external_link: str
        :keyword admins: hook administrators.
        :paramtype admins: list[str]
        :keyword hook_parameter:
        :paramtype hook_parameter: ~azure.ai.metricsadvisor.models.WebhookHookParameterPatch
        """
        super(WebhookHookInfoPatch, self).__init__(**kwargs)
        self.hook_type = 'Webhook'  # type: str
        self.hook_parameter = kwargs.get('hook_parameter', None)

class WebhookHookInfoPatch(WebhookHookInfoPatchCustomization, HookInfoPatch, _WebhookHookInfoPatchGenerated):
    pass


class _WebhookHookParameterGenerated(msrest.serialization.Model):
    """WebhookHookParameter.

    All required parameters must be populated in order to send to Azure.

    :ivar endpoint: Required. API address, will be called when alert is triggered, only support
     POST method via SSL.
    :vartype endpoint: str
    :ivar username: (Deprecated) The username, if using basic authentication.
    :vartype username: str
    :ivar password: (Deprecated) The password, if using basic authentication.
    :vartype password: str
    :ivar headers: custom headers in api call.
    :vartype headers: dict[str, str]
    :ivar certificate_key: The certificate key/URL, if using client certificate, please read
     documents for more informations.
    :vartype certificate_key: str
    :ivar certificate_password: The certificate password, if using client certificate, please read
     documents for more informations.
    :vartype certificate_password: str
    """

    _validation = {
        'endpoint': {'required': True},
    }

    _attribute_map = {
        'endpoint': {'key': 'endpoint', 'type': 'str'},
        'username': {'key': 'username', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
        'headers': {'key': 'headers', 'type': '{str}'},
        'certificate_key': {'key': 'certificateKey', 'type': 'str'},
        'certificate_password': {'key': 'certificatePassword', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword endpoint: Required. API address, will be called when alert is triggered, only support
         POST method via SSL.
        :paramtype endpoint: str
        :keyword username: (Deprecated) The username, if using basic authentication.
        :paramtype username: str
        :keyword password: (Deprecated) The password, if using basic authentication.
        :paramtype password: str
        :keyword headers: custom headers in api call.
        :paramtype headers: dict[str, str]
        :keyword certificate_key: The certificate key/URL, if using client certificate, please read
         documents for more informations.
        :paramtype certificate_key: str
        :keyword certificate_password: The certificate password, if using client certificate, please
         read documents for more informations.
        :paramtype certificate_password: str
        """
        super(WebhookHookParameter, self).__init__(**kwargs)
        self.endpoint = kwargs['endpoint']
        self.username = kwargs.get('username', None)
        self.password = kwargs.get('password', None)
        self.headers = kwargs.get('headers', None)
        self.certificate_key = kwargs.get('certificate_key', None)
        self.certificate_password = kwargs.get('certificate_password', None)

class WebhookHookParameter(WebhookHookParameterCustomization, _WebhookHookParameterGenerated):
    pass


class _WebhookHookParameterPatchGenerated(msrest.serialization.Model):
    """WebhookHookParameterPatch.

    :ivar endpoint: API address, will be called when alert is triggered, only support POST method
     via SSL.
    :vartype endpoint: str
    :ivar username: (Deprecated) The username, if using basic authentication.
    :vartype username: str
    :ivar password: (Deprecated) The password, if using basic authentication.
    :vartype password: str
    :ivar headers: custom headers in api call.
    :vartype headers: dict[str, str]
    :ivar certificate_key: The certificate key, if using client certificate.
    :vartype certificate_key: str
    :ivar certificate_password: The certificate password, if using client certificate.
    :vartype certificate_password: str
    """

    _attribute_map = {
        'endpoint': {'key': 'endpoint', 'type': 'str'},
        'username': {'key': 'username', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
        'headers': {'key': 'headers', 'type': '{str}'},
        'certificate_key': {'key': 'certificateKey', 'type': 'str'},
        'certificate_password': {'key': 'certificatePassword', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword endpoint: API address, will be called when alert is triggered, only support POST
         method via SSL.
        :paramtype endpoint: str
        :keyword username: (Deprecated) The username, if using basic authentication.
        :paramtype username: str
        :keyword password: (Deprecated) The password, if using basic authentication.
        :paramtype password: str
        :keyword headers: custom headers in api call.
        :paramtype headers: dict[str, str]
        :keyword certificate_key: The certificate key, if using client certificate.
        :paramtype certificate_key: str
        :keyword certificate_password: The certificate password, if using client certificate.
        :paramtype certificate_password: str
        """
        super(WebhookHookParameterPatch, self).__init__(**kwargs)
        self.endpoint = kwargs.get('endpoint', None)
        self.username = kwargs.get('username', None)
        self.password = kwargs.get('password', None)
        self.headers = kwargs.get('headers', None)
        self.certificate_key = kwargs.get('certificate_key', None)
        self.certificate_password = kwargs.get('certificate_password', None)

class WebhookHookParameterPatch(WebhookHookParameterPatchCustomization, _WebhookHookParameterPatchGenerated):
    pass


class _WholeMetricConfigurationGenerated(msrest.serialization.Model):
    """WholeMetricConfiguration.

    :ivar condition_operator: condition operator
    
     should be specified when combining multiple detection conditions. Possible values include:
     "AND", "OR".
    :vartype condition_operator: str or
     ~azure.ai.metricsadvisor.models.AnomalyDetectionConfigurationLogicType
    :ivar smart_detection_condition:
    :vartype smart_detection_condition: ~azure.ai.metricsadvisor.models.SmartDetectionCondition
    :ivar hard_threshold_condition:
    :vartype hard_threshold_condition: ~azure.ai.metricsadvisor.models.HardThresholdCondition
    :ivar change_threshold_condition:
    :vartype change_threshold_condition: ~azure.ai.metricsadvisor.models.ChangeThresholdCondition
    """

    _attribute_map = {
        'condition_operator': {'key': 'conditionOperator', 'type': 'str'},
        'smart_detection_condition': {'key': 'smartDetectionCondition', 'type': 'SmartDetectionCondition'},
        'hard_threshold_condition': {'key': 'hardThresholdCondition', 'type': 'HardThresholdCondition'},
        'change_threshold_condition': {'key': 'changeThresholdCondition', 'type': 'ChangeThresholdCondition'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword condition_operator: condition operator
        
         should be specified when combining multiple detection conditions. Possible values include:
         "AND", "OR".
        :paramtype condition_operator: str or
         ~azure.ai.metricsadvisor.models.AnomalyDetectionConfigurationLogicType
        :keyword smart_detection_condition:
        :paramtype smart_detection_condition: ~azure.ai.metricsadvisor.models.SmartDetectionCondition
        :keyword hard_threshold_condition:
        :paramtype hard_threshold_condition: ~azure.ai.metricsadvisor.models.HardThresholdCondition
        :keyword change_threshold_condition:
        :paramtype change_threshold_condition: ~azure.ai.metricsadvisor.models.ChangeThresholdCondition
        """
        super(WholeMetricConfiguration, self).__init__(**kwargs)
        self.condition_operator = kwargs.get('condition_operator', None)
        self.smart_detection_condition = kwargs.get('smart_detection_condition', None)
        self.hard_threshold_condition = kwargs.get('hard_threshold_condition', None)
        self.change_threshold_condition = kwargs.get('change_threshold_condition', None)

class WholeMetricConfiguration(WholeMetricConfigurationCustomization, _WholeMetricConfigurationGenerated):
    pass


class _WholeMetricConfigurationPatchGenerated(msrest.serialization.Model):
    """WholeMetricConfigurationPatch.

    :ivar condition_operator: condition operator
    
     should be specified when combining multiple detection conditions. Possible values include:
     "AND", "OR".
    :vartype condition_operator: str or
     ~azure.ai.metricsadvisor.models.AnomalyDetectionConfigurationLogicType
    :ivar smart_detection_condition:
    :vartype smart_detection_condition:
     ~azure.ai.metricsadvisor.models.SmartDetectionConditionPatch
    :ivar hard_threshold_condition:
    :vartype hard_threshold_condition: ~azure.ai.metricsadvisor.models.HardThresholdConditionPatch
    :ivar change_threshold_condition:
    :vartype change_threshold_condition:
     ~azure.ai.metricsadvisor.models.ChangeThresholdConditionPatch
    """

    _attribute_map = {
        'condition_operator': {'key': 'conditionOperator', 'type': 'str'},
        'smart_detection_condition': {'key': 'smartDetectionCondition', 'type': 'SmartDetectionConditionPatch'},
        'hard_threshold_condition': {'key': 'hardThresholdCondition', 'type': 'HardThresholdConditionPatch'},
        'change_threshold_condition': {'key': 'changeThresholdCondition', 'type': 'ChangeThresholdConditionPatch'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword condition_operator: condition operator
        
         should be specified when combining multiple detection conditions. Possible values include:
         "AND", "OR".
        :paramtype condition_operator: str or
         ~azure.ai.metricsadvisor.models.AnomalyDetectionConfigurationLogicType
        :keyword smart_detection_condition:
        :paramtype smart_detection_condition:
         ~azure.ai.metricsadvisor.models.SmartDetectionConditionPatch
        :keyword hard_threshold_condition:
        :paramtype hard_threshold_condition:
         ~azure.ai.metricsadvisor.models.HardThresholdConditionPatch
        :keyword change_threshold_condition:
        :paramtype change_threshold_condition:
         ~azure.ai.metricsadvisor.models.ChangeThresholdConditionPatch
        """
        super(WholeMetricConfigurationPatch, self).__init__(**kwargs)
        self.condition_operator = kwargs.get('condition_operator', None)
        self.smart_detection_condition = kwargs.get('smart_detection_condition', None)
        self.hard_threshold_condition = kwargs.get('hard_threshold_condition', None)
        self.change_threshold_condition = kwargs.get('change_threshold_condition', None)

class WholeMetricConfigurationPatch(WholeMetricConfigurationPatchCustomization, _WholeMetricConfigurationPatchGenerated):
    pass
