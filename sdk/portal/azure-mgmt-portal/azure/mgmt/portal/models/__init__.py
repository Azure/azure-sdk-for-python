# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
# pylint: disable=wrong-import-position

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ._patch import *  # pylint: disable=unused-wildcard-import


from ._models_py3 import (  # type: ignore
    Configuration,
    ConfigurationListResult,
    ConfigurationProperties,
    Dashboard,
    DashboardLens,
    DashboardListResult,
    DashboardPartMetadata,
    DashboardParts,
    DashboardPartsPosition,
    DashboardProperties,
    DashboardPropertiesWithProvisioningState,
    ErrorAdditionalInfo,
    ErrorDetail,
    ErrorResponse,
    MarkdownPartMetadata,
    MarkdownPartMetadataSettings,
    MarkdownPartMetadataSettingsContent,
    Operation,
    OperationDisplay,
    OperationListResult,
    PatchableDashboard,
    ProxyResource,
    Resource,
    SystemData,
    TrackedResource,
    Violation,
    ViolationsList,
)

from ._portal_enums import (  # type: ignore
    ActionType,
    CreatedByType,
    DashboardPartMetadataType,
    Origin,
    ResourceProvisioningState,
)
from ._patch import __all__ as _patch_all
from ._patch import *
from ._patch import patch_sdk as _patch_sdk

__all__ = [
    "Configuration",
    "ConfigurationListResult",
    "ConfigurationProperties",
    "Dashboard",
    "DashboardLens",
    "DashboardListResult",
    "DashboardPartMetadata",
    "DashboardParts",
    "DashboardPartsPosition",
    "DashboardProperties",
    "DashboardPropertiesWithProvisioningState",
    "ErrorAdditionalInfo",
    "ErrorDetail",
    "ErrorResponse",
    "MarkdownPartMetadata",
    "MarkdownPartMetadataSettings",
    "MarkdownPartMetadataSettingsContent",
    "Operation",
    "OperationDisplay",
    "OperationListResult",
    "PatchableDashboard",
    "ProxyResource",
    "Resource",
    "SystemData",
    "TrackedResource",
    "Violation",
    "ViolationsList",
    "ActionType",
    "CreatedByType",
    "DashboardPartMetadataType",
    "Origin",
    "ResourceProvisioningState",
]
__all__.extend([p for p in _patch_all if p not in __all__])  # pyright: ignore
_patch_sdk()
