# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from ._models_py3 import CheckNameAvailabilityParameter
from ._models_py3 import CheckNameAvailabilityResult
from ._models_py3 import ConsumerGroupCreateOrUpdateParameters
from ._models_py3 import ConsumerGroupListResult
from ._models_py3 import ConsumerGroupResource
from ._models_py3 import EventHubCreateOrUpdateParameters
from ._models_py3 import EventHubListResult
from ._models_py3 import EventHubResource
from ._models_py3 import NamespaceCreateOrUpdateParameters
from ._models_py3 import NamespaceListResult
from ._models_py3 import NamespaceResource
from ._models_py3 import NamespaceUpdateParameter
from ._models_py3 import Operation
from ._models_py3 import OperationDisplay
from ._models_py3 import OperationListResult
from ._models_py3 import RegenerateKeysParameters
from ._models_py3 import Resource
from ._models_py3 import ResourceListKeys
from ._models_py3 import SharedAccessAuthorizationRuleCreateOrUpdateParameters
from ._models_py3 import SharedAccessAuthorizationRuleListResult
from ._models_py3 import SharedAccessAuthorizationRuleResource
from ._models_py3 import Sku
from ._models_py3 import TrackedResource

from ._event_hub_management_client_enums import AccessRights
from ._event_hub_management_client_enums import EntityStatus
from ._event_hub_management_client_enums import NamespaceState
from ._event_hub_management_client_enums import Policykey
from ._event_hub_management_client_enums import SkuName
from ._event_hub_management_client_enums import SkuTier
from ._event_hub_management_client_enums import UnavailableReason
from ._patch import __all__ as _patch_all
from ._patch import *  # pylint: disable=unused-wildcard-import
from ._patch import patch_sdk as _patch_sdk

__all__ = [
    "CheckNameAvailabilityParameter",
    "CheckNameAvailabilityResult",
    "ConsumerGroupCreateOrUpdateParameters",
    "ConsumerGroupListResult",
    "ConsumerGroupResource",
    "EventHubCreateOrUpdateParameters",
    "EventHubListResult",
    "EventHubResource",
    "NamespaceCreateOrUpdateParameters",
    "NamespaceListResult",
    "NamespaceResource",
    "NamespaceUpdateParameter",
    "Operation",
    "OperationDisplay",
    "OperationListResult",
    "RegenerateKeysParameters",
    "Resource",
    "ResourceListKeys",
    "SharedAccessAuthorizationRuleCreateOrUpdateParameters",
    "SharedAccessAuthorizationRuleListResult",
    "SharedAccessAuthorizationRuleResource",
    "Sku",
    "TrackedResource",
    "AccessRights",
    "EntityStatus",
    "NamespaceState",
    "Policykey",
    "SkuName",
    "SkuTier",
    "UnavailableReason",
]
__all__.extend([p for p in _patch_all if p not in __all__])
_patch_sdk()
