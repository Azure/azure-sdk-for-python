{
  "Entries": [
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94?api-version=2022-05-01",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "379",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)"
      },
      "RequestBody": {
        "properties": {
          "isAnonymous": true,
          "isArchived": false,
          "condaFile": "channels:\n- defaults\ndependencies:\n- python=3.8.12\n- pip=21.2.2\n- pip:\n  - --extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\n  - mldesigner==0.0.71974906\n  - mlflow\n  - azureml-mlflow\nname: example-environment\n",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04"
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "1275",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 11 Apr 2023 18:38:08 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94?api-version=2022-05-01",
        "Pragma": "no-cache",
        "request-context": "appId=cid-v1:512cc15a-13b5-415b-bfd0-dce7accb6bb1",
        "Server-Timing": "traceparent;desc=\u002200-c8b08c4cc23937675b7cb6386e5c1b33-05e8f59772b0f629-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-test-westus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "bb1f5f13-fe99-4295-8c8b-666ab3330edd",
        "x-ms-ratelimit-remaining-subscription-writes": "1199",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "WESTUS2:20230411T183809Z:bb1f5f13-fe99-4295-8c8b-666ab3330edd",
        "x-request-time": "1.250"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94",
        "name": "7926e182b294d8644f987381c0081e94",
        "type": "Microsoft.MachineLearningServices/workspaces/environments/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {},
          "isArchived": false,
          "isAnonymous": true,
          "environmentType": "UserCreated",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04",
          "condaFile": "{\n  \u0022channels\u0022: [\n    \u0022defaults\u0022\n  ],\n  \u0022dependencies\u0022: [\n    \u0022python=3.8.12\u0022,\n    \u0022pip=21.2.2\u0022,\n    {\n      \u0022pip\u0022: [\n        \u0022--extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\u0022,\n        \u0022mldesigner==0.0.71974906\u0022,\n        \u0022mlflow\u0022,\n        \u0022azureml-mlflow\u0022\n      ]\n    }\n  ],\n  \u0022name\u0022: \u0022example-environment\u0022\n}",
          "osType": "Linux"
        },
        "systemData": {
          "createdAt": "2023-04-11T18:15:29.5967091\u002B00:00",
          "createdBy": "Diondra Peck",
          "createdByType": "User",
          "lastModifiedAt": "2023-04-11T18:15:29.5967091\u002B00:00",
          "lastModifiedBy": "Diondra Peck",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94?api-version=2022-05-01",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "379",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)"
      },
      "RequestBody": {
        "properties": {
          "isAnonymous": true,
          "isArchived": false,
          "condaFile": "channels:\n- defaults\ndependencies:\n- python=3.8.12\n- pip=21.2.2\n- pip:\n  - --extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\n  - mldesigner==0.0.71974906\n  - mlflow\n  - azureml-mlflow\nname: example-environment\n",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04"
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "1275",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 11 Apr 2023 18:38:09 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94?api-version=2022-05-01",
        "Pragma": "no-cache",
        "request-context": "appId=cid-v1:512cc15a-13b5-415b-bfd0-dce7accb6bb1",
        "Server-Timing": "traceparent;desc=\u002200-94f1e18300b18241df3a29e58180d7ef-2e8f1b356feb2dc2-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-test-westus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "85bb7c38-70e6-4c37-9cb5-d06d117cc23e",
        "x-ms-ratelimit-remaining-subscription-writes": "1198",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "WESTUS2:20230411T183810Z:85bb7c38-70e6-4c37-9cb5-d06d117cc23e",
        "x-request-time": "0.666"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94",
        "name": "7926e182b294d8644f987381c0081e94",
        "type": "Microsoft.MachineLearningServices/workspaces/environments/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {},
          "isArchived": false,
          "isAnonymous": true,
          "environmentType": "UserCreated",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04",
          "condaFile": "{\n  \u0022channels\u0022: [\n    \u0022defaults\u0022\n  ],\n  \u0022dependencies\u0022: [\n    \u0022python=3.8.12\u0022,\n    \u0022pip=21.2.2\u0022,\n    {\n      \u0022pip\u0022: [\n        \u0022--extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\u0022,\n        \u0022mldesigner==0.0.71974906\u0022,\n        \u0022mlflow\u0022,\n        \u0022azureml-mlflow\u0022\n      ]\n    }\n  ],\n  \u0022name\u0022: \u0022example-environment\u0022\n}",
          "osType": "Linux"
        },
        "systemData": {
          "createdAt": "2023-04-11T18:15:29.5967091\u002B00:00",
          "createdBy": "Diondra Peck",
          "createdByType": "User",
          "lastModifiedAt": "2023-04-11T18:15:29.5967091\u002B00:00",
          "lastModifiedBy": "Diondra Peck",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94?api-version=2022-05-01",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "379",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)"
      },
      "RequestBody": {
        "properties": {
          "isAnonymous": true,
          "isArchived": false,
          "condaFile": "channels:\n- defaults\ndependencies:\n- python=3.8.12\n- pip=21.2.2\n- pip:\n  - --extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\n  - mldesigner==0.0.71974906\n  - mlflow\n  - azureml-mlflow\nname: example-environment\n",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04"
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "1275",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 11 Apr 2023 18:38:10 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94?api-version=2022-05-01",
        "Pragma": "no-cache",
        "request-context": "appId=cid-v1:512cc15a-13b5-415b-bfd0-dce7accb6bb1",
        "Server-Timing": "traceparent;desc=\u002200-585a4e7ef2c98a817070f9d1de8ebc12-49cb8d8fa008af6f-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-test-westus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "ea4dd5ce-60ed-4e17-bb4a-4737e802f73a",
        "x-ms-ratelimit-remaining-subscription-writes": "1197",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "WESTUS2:20230411T183810Z:ea4dd5ce-60ed-4e17-bb4a-4737e802f73a",
        "x-request-time": "0.283"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94",
        "name": "7926e182b294d8644f987381c0081e94",
        "type": "Microsoft.MachineLearningServices/workspaces/environments/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {},
          "isArchived": false,
          "isAnonymous": true,
          "environmentType": "UserCreated",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04",
          "condaFile": "{\n  \u0022channels\u0022: [\n    \u0022defaults\u0022\n  ],\n  \u0022dependencies\u0022: [\n    \u0022python=3.8.12\u0022,\n    \u0022pip=21.2.2\u0022,\n    {\n      \u0022pip\u0022: [\n        \u0022--extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\u0022,\n        \u0022mldesigner==0.0.71974906\u0022,\n        \u0022mlflow\u0022,\n        \u0022azureml-mlflow\u0022\n      ]\n    }\n  ],\n  \u0022name\u0022: \u0022example-environment\u0022\n}",
          "osType": "Linux"
        },
        "systemData": {
          "createdAt": "2023-04-11T18:15:29.5967091\u002B00:00",
          "createdBy": "Diondra Peck",
          "createdByType": "User",
          "lastModifiedAt": "2023-04-11T18:15:29.5967091\u002B00:00",
          "lastModifiedBy": "Diondra Peck",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://master.api.azureml-test.ms/mferp/managementfrontend/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/000000000000000000000/versions?api-version=2023-04-01\u0026hash=a687133928d9e45e91a03f4ac1679f5033615fabd05465e18d146cb321744379\u0026hashVersion=202208",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Connection": "keep-alive",
        "Content-Encoding": "gzip",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 11 Apr 2023 18:38:13 GMT",
        "request-context": "appId=cid-v1:512cc15a-13b5-415b-bfd0-dce7accb6bb1",
        "Server-Timing": "traceparent;desc=\u002200-681b1e974edd75bf58ef5492faf53af1-8a5cc7b4a17f1ab1-00\u0022",
        "Strict-Transport-Security": "max-age=15724800; includeSubDomains; preload",
        "Transfer-Encoding": "chunked",
        "Vary": "Accept-Encoding",
        "x-aml-cluster": "vienna-test-westus2-01",
        "X-Content-Type-Options": [
          "nosniff",
          "nosniff"
        ],
        "x-ms-response-type": "standard",
        "x-request-time": "0.490"
      },
      "ResponseBody": {
        "value": [
          {
            "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/f520c491-3428-41df-ba49-db37b6cd7c76/versions/1",
            "name": "1",
            "type": "Microsoft.MachineLearningServices/workspaces/codes/versions",
            "properties": {
              "description": null,
              "tags": {},
              "properties": {
                "hash_sha256": "a687133928d9e45e91a03f4ac1679f5033615fabd05465e18d146cb321744379",
                "hash_version": "202208"
              },
              "isArchived": false,
              "isAnonymous": false,
              "codeUri": "https://sab6b272nokaeak.blob.core.windows.net:443/061273aa-2-3cc93c36-3aea-597c-8983-7bcc86d81a30/src",
              "provisioningState": "Succeeded"
            },
            "systemData": {
              "createdAt": "2023-04-11T18:15:45.1566792\u002B00:00",
              "createdBy": "Diondra Peck",
              "createdByType": "User",
              "lastModifiedAt": "2023-04-11T18:15:45.1566792\u002B00:00",
              "lastModifiedBy": "Diondra Peck",
              "lastModifiedByType": "User"
            }
          }
        ]
      }
    },
    {
      "RequestUri": "https://master.api.azureml-test.ms/mferp/managementfrontend/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/f520c491-3428-41df-ba49-db37b6cd7c76/versions/1?api-version=2023-04-01",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Connection": "keep-alive",
        "Content-Encoding": "gzip",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 11 Apr 2023 18:38:13 GMT",
        "request-context": "appId=cid-v1:512cc15a-13b5-415b-bfd0-dce7accb6bb1",
        "Server-Timing": "traceparent;desc=\u002200-799b4153ab64ce20437be8d558aa3830-52c8f388687e2c57-00\u0022",
        "Strict-Transport-Security": "max-age=15724800; includeSubDomains; preload",
        "Transfer-Encoding": "chunked",
        "Vary": "Accept-Encoding",
        "x-aml-cluster": "vienna-test-westus2-01",
        "X-Content-Type-Options": [
          "nosniff",
          "nosniff"
        ],
        "x-ms-response-type": "standard",
        "x-request-time": "0.083"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/f520c491-3428-41df-ba49-db37b6cd7c76/versions/1",
        "name": "1",
        "type": "Microsoft.MachineLearningServices/workspaces/codes/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {
            "hash_sha256": "0000000000000",
            "hash_version": "0000000000000"
          },
          "isArchived": false,
          "isAnonymous": false,
          "codeUri": "https://sab6b272nokaeak.blob.core.windows.net:443/061273aa-2-3cc93c36-3aea-597c-8983-7bcc86d81a30/src",
          "provisioningState": "Succeeded"
        },
        "systemData": {
          "createdAt": "2023-04-11T18:15:45.1566792\u002B00:00",
          "createdBy": "Diondra Peck",
          "createdByType": "User",
          "lastModifiedAt": "2023-04-11T18:15:45.1566792\u002B00:00",
          "lastModifiedBy": "Diondra Peck",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/000000000000000000000?api-version=2022-10-01",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "1419",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)"
      },
      "RequestBody": {
        "properties": {
          "properties": {},
          "tags": {},
          "isAnonymous": true,
          "isArchived": false,
          "componentSpec": {
            "command": "python basic_component.py $[[--component_in_number ${{inputs.component_in_number}}]] $[[--component_in_number_1 ${{inputs.component_in_number_1}}]] --component_in_path ${{inputs.component_in_path}} --output_in_path ${{outputs.output_in_path}}",
            "code": "azureml:/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/f520c491-3428-41df-ba49-db37b6cd7c76/versions/1",
            "environment": "azureml:/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94",
            "name": "basic_component",
            "version": "0.0.1",
            "$schema": "https://azuremlschemas.azureedge.net/latest/commandComponent.schema.json",
            "display_name": "Basic component",
            "is_deterministic": true,
            "inputs": {
              "component_in_number": {
                "type": "integer",
                "optional": true
              },
              "component_in_number_1": {
                "type": "integer",
                "optional": true
              },
              "component_in_path": {
                "type": "uri_folder"
              }
            },
            "outputs": {
              "output_in_path": {
                "type": "uri_folder"
              },
              "output_in_number": {
                "type": "integer",
                "is_control": true
              },
              "is_number_larger_than_zero": {
                "type": "boolean",
                "is_control": true
              }
            },
            "type": "command",
            "_source": "YAML.COMPONENT"
          }
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "2453",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 11 Apr 2023 18:38:15 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/000000000000000000000?api-version=2022-10-01",
        "Pragma": "no-cache",
        "request-context": "appId=cid-v1:512cc15a-13b5-415b-bfd0-dce7accb6bb1",
        "Server-Timing": "traceparent;desc=\u002200-0f034bfd0647fb0252d036564c680c51-bd468218d243edf1-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-test-westus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "fcfd69fe-2ed6-48cb-9214-317e965f6713",
        "x-ms-ratelimit-remaining-subscription-writes": "1196",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "WESTUS2:20230411T183815Z:fcfd69fe-2ed6-48cb-9214-317e965f6713",
        "x-request-time": "1.022"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/ef0b70d1-1bcc-4d6b-8d6d-47000e9bcd49",
        "name": "ef0b70d1-1bcc-4d6b-8d6d-47000e9bcd49",
        "type": "Microsoft.MachineLearningServices/workspaces/components/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {},
          "isArchived": false,
          "isAnonymous": true,
          "componentSpec": {
            "$schema": "https://azuremlschemas.azureedge.net/latest/commandComponent.schema.json",
            "name": "basic_component",
            "version": "0.0.1",
            "display_name": "Basic component",
            "is_deterministic": "True",
            "type": "command",
            "inputs": {
              "component_in_path": {
                "type": "uri_folder",
                "optional": "False"
              },
              "component_in_number": {
                "type": "integer",
                "optional": "True"
              },
              "component_in_number_1": {
                "type": "integer",
                "optional": "True"
              }
            },
            "outputs": {
              "output_in_path": {
                "type": "uri_folder"
              },
              "output_in_number": {
                "type": "integer",
                "is_control": "True"
              },
              "is_number_larger_than_zero": {
                "type": "boolean",
                "is_control": "True"
              }
            },
            "code": "azureml:/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/f520c491-3428-41df-ba49-db37b6cd7c76/versions/1",
            "environment": "azureml:/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94",
            "resources": {
              "instance_count": "1"
            },
            "command": "python basic_component.py $[[--component_in_number ${{inputs.component_in_number}}]] $[[--component_in_number_1 ${{inputs.component_in_number_1}}]] --component_in_path ${{inputs.component_in_path}} --output_in_path ${{outputs.output_in_path}}"
          }
        },
        "systemData": {
          "createdAt": "2023-04-11T18:15:49.137635\u002B00:00",
          "createdBy": "Diondra Peck",
          "createdByType": "User",
          "lastModifiedAt": "2023-04-11T18:15:49.5696129\u002B00:00",
          "lastModifiedBy": "Diondra Peck",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/000000000000000000000?api-version=2022-10-01",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "1415",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)"
      },
      "RequestBody": {
        "properties": {
          "properties": {},
          "tags": {},
          "isAnonymous": true,
          "isArchived": false,
          "componentSpec": {
            "name": "do_while_body_pipeline_component",
            "display_name": "do_while_body_pipeline_component",
            "inputs": {
              "component_in_number": {
                "type": "integer",
                "optional": true
              },
              "component_in_path": {
                "type": "uri_folder"
              }
            },
            "outputs": {
              "output_in_path": {
                "type": "uri_folder"
              },
              "output_in_number": {
                "type": "integer",
                "is_control": true
              },
              "is_number_larger_than_zero": {
                "type": "boolean",
                "is_control": true
              }
            },
            "type": "pipeline",
            "jobs": {
              "basic_component": {
                "name": "basic_component",
                "type": "command",
                "inputs": {
                  "component_in_number": {
                    "job_input_type": "literal",
                    "value": "${{parent.inputs.component_in_number}}"
                  },
                  "component_in_path": {
                    "job_input_type": "literal",
                    "value": "${{parent.inputs.component_in_path}}"
                  }
                },
                "outputs": {
                  "output_in_path": {
                    "value": "${{parent.outputs.output_in_path}}",
                    "type": "literal"
                  },
                  "output_in_number": {
                    "value": "${{parent.outputs.output_in_number}}",
                    "type": "literal"
                  },
                  "is_number_larger_than_zero": {
                    "value": "${{parent.outputs.is_number_larger_than_zero}}",
                    "type": "literal"
                  }
                },
                "_source": "YAML.COMPONENT",
                "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/ef0b70d1-1bcc-4d6b-8d6d-47000e9bcd49"
              }
            },
            "_source": "DSL",
            "sourceJobId": null
          }
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "1490",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 11 Apr 2023 18:38:17 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/000000000000000000000?api-version=2022-10-01",
        "Pragma": "no-cache",
        "request-context": "appId=cid-v1:512cc15a-13b5-415b-bfd0-dce7accb6bb1",
        "Server-Timing": "traceparent;desc=\u002200-21ea186f1d8760cc22daa63839ee9a70-538f2652e3f3f530-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-test-westus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "5c883392-7e9b-4e9d-b60e-4510ffaffa46",
        "x-ms-ratelimit-remaining-subscription-writes": "1195",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "WESTUS2:20230411T183818Z:5c883392-7e9b-4e9d-b60e-4510ffaffa46",
        "x-request-time": "2.512"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/caea97fc-3be0-453b-b662-ceee12aae3dc",
        "name": "caea97fc-3be0-453b-b662-ceee12aae3dc",
        "type": "Microsoft.MachineLearningServices/workspaces/components/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {},
          "isArchived": false,
          "isAnonymous": true,
          "componentSpec": {
            "name": "do_while_body_pipeline_component",
            "display_name": "do_while_body_pipeline_component",
            "is_deterministic": "False",
            "type": "pipeline",
            "inputs": {
              "component_in_path": {
                "type": "uri_folder",
                "optional": "False"
              },
              "component_in_number": {
                "type": "integer",
                "optional": "True"
              }
            },
            "outputs": {
              "output_in_path": {
                "type": "uri_folder"
              },
              "output_in_number": {
                "type": "integer",
                "is_control": "True"
              },
              "is_number_larger_than_zero": {
                "type": "boolean",
                "is_control": "True"
              }
            }
          }
        },
        "systemData": {
          "createdAt": "2023-04-11T18:38:17.8589824\u002B00:00",
          "createdBy": "Diondra Peck",
          "createdByType": "User",
          "lastModifiedAt": "2023-04-11T18:38:17.8589824\u002B00:00",
          "lastModifiedBy": "Diondra Peck",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/datastores/workspaceblobstore?api-version=2022-10-01",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Encoding": "gzip",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 11 Apr 2023 18:38:18 GMT",
        "Expires": "-1",
        "Pragma": "no-cache",
        "request-context": "appId=cid-v1:512cc15a-13b5-415b-bfd0-dce7accb6bb1",
        "Server-Timing": "traceparent;desc=\u002200-664a60073f343d29ed30798ec59163bf-d3ef078d81c285dc-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "Transfer-Encoding": "chunked",
        "Vary": [
          "Accept-Encoding",
          "Accept-Encoding"
        ],
        "x-aml-cluster": "vienna-test-westus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "68de257c-89e0-4d9a-9223-1cb6a6e1d2d9",
        "x-ms-ratelimit-remaining-subscription-reads": "11999",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "WESTUS2:20230411T183819Z:68de257c-89e0-4d9a-9223-1cb6a6e1d2d9",
        "x-request-time": "0.144"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/datastores/workspaceblobstore",
        "name": "workspaceblobstore",
        "type": "Microsoft.MachineLearningServices/workspaces/datastores",
        "properties": {
          "description": null,
          "tags": null,
          "properties": null,
          "isDefault": true,
          "credentials": {
            "credentialsType": "AccountKey"
          },
          "datastoreType": "AzureBlob",
          "accountName": "sab6b272nokaeak",
          "containerName": "azureml-blobstore-061273aa-2956-4aff-8628-0fad8c820f9e",
          "endpoint": "core.windows.net",
          "protocol": "https",
          "serviceDataAccessAuthIdentity": "WorkspaceSystemAssignedIdentity"
        },
        "systemData": {
          "createdAt": "2023-04-07T22:03:48.498579\u002B00:00",
          "createdBy": "779301c0-18b2-4cdc-801b-a0a3368fee0a",
          "createdByType": "Application",
          "lastModifiedAt": "2023-04-07T22:03:49.2565567\u002B00:00",
          "lastModifiedBy": "779301c0-18b2-4cdc-801b-a0a3368fee0a",
          "lastModifiedByType": "Application"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/datastores/workspaceblobstore/listSecrets?api-version=2022-10-01",
      "RequestMethod": "POST",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "0",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Encoding": "gzip",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 11 Apr 2023 18:38:18 GMT",
        "Expires": "-1",
        "Pragma": "no-cache",
        "request-context": "appId=cid-v1:512cc15a-13b5-415b-bfd0-dce7accb6bb1",
        "Server-Timing": "traceparent;desc=\u002200-63d67b4c142281d5c1d53c70d11005bc-c188887474333b20-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "Transfer-Encoding": "chunked",
        "Vary": "Accept-Encoding",
        "x-aml-cluster": "vienna-test-westus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "da054783-7195-4ce9-922d-046a55d65896",
        "x-ms-ratelimit-remaining-subscription-writes": "1199",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "WESTUS2:20230411T183819Z:da054783-7195-4ce9-922d-046a55d65896",
        "x-request-time": "0.178"
      },
      "ResponseBody": {
        "secretsType": "AccountKey",
        "key": "dGhpcyBpcyBmYWtlIGtleQ=="
      }
    },
    {
      "RequestUri": "https://sab6b272nokaeak.blob.core.windows.net/azureml-blobstore-061273aa-2956-4aff-8628-0fad8c820f9e/LocalUpload/00000000000000000000000000000000/e2etests/__init__.py",
      "RequestMethod": "HEAD",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azsdk-python-storage-blob/12.15.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)",
        "x-ms-date": "Tue, 11 Apr 2023 18:38:20 GMT",
        "x-ms-version": "2021-12-02"
      },
      "RequestBody": null,
      "StatusCode": 404,
      "ResponseHeaders": {
        "Date": "Tue, 11 Apr 2023 18:38:21 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "Transfer-Encoding": "chunked",
        "Vary": "Origin",
        "x-ms-error-code": "BlobNotFound",
        "x-ms-version": "2021-12-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://sab6b272nokaeak.blob.core.windows.net/azureml-blobstore-061273aa-2956-4aff-8628-0fad8c820f9e/LocalUpload/00000000000000000000000000000000/e2etests/__pycache__/__init__.cpython-310.pyc",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "212",
        "Content-MD5": "XzCbKGLru9NdoxkypUHTSw==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.15.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 11 Apr 2023 18:38:22 GMT",
        "x-ms-version": "2021-12-02"
      },
      "RequestBody": "bw0NCgAAAAD8nC1kAAAAAOMAAAAAAAAAAAAAAAAAAAAAAQAAAEAAAABzBAAAAGQAUwApAU6pAHIBAAAAcgEAAAByAQAAAPp3QzpcVXNlcnNcZGlwZWNrLlJFRE1PTkRcc291cmNlXHJlcG9zXGRpb25kcmFwZWNrXGF6dXJlLXNkay1mb3ItcHl0aG9uXHNka1xtbFxhenVyZS1haS1tbFx0ZXN0c1xkc2xcZTJldGVzdHNcX19pbml0X18ucHnaCDxtb2R1bGU\u002BAQAAAHMCAAAABAA=",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "XzCbKGLru9NdoxkypUHTSw==",
        "Date": "Tue, 11 Apr 2023 18:38:21 GMT",
        "ETag": "\u00220x8DB3ABBED394BB0\u0022",
        "Last-Modified": "Tue, 11 Apr 2023 18:38:21 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "wUYV7CrnGFs=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2021-12-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://sab6b272nokaeak.blob.core.windows.net/azureml-blobstore-061273aa-2956-4aff-8628-0fad8c820f9e/LocalUpload/00000000000000000000000000000000/e2etests/__init__.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "0",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.15.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 11 Apr 2023 18:38:22 GMT",
        "x-ms-version": "2021-12-02"
      },
      "RequestBody": null,
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "1B2M2Y8AsgTpgAmY7PhCfg==",
        "Date": "Tue, 11 Apr 2023 18:38:21 GMT",
        "ETag": "\u00220x8DB3ABBED446D9E\u0022",
        "Last-Modified": "Tue, 11 Apr 2023 18:38:21 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "AAAAAAAAAAA=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2021-12-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://sab6b272nokaeak.blob.core.windows.net/azureml-blobstore-061273aa-2956-4aff-8628-0fad8c820f9e/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_pipeline_on_registry.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "4536",
        "Content-MD5": "d1TaRP31HP1J\u002BHb81i1/OQ==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.15.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 11 Apr 2023 18:38:22 GMT",
        "x-ms-version": "2021-12-02"
      },
      "RequestBody": "ZnJvbSBwYXRobGliIGltcG9ydCBQYXRoDQoNCmltcG9ydCBweXRlc3QNCmZyb20gYXp1cmUuY29yZS5leGNlcHRpb25zIGltcG9ydCBSZXNvdXJjZU5vdEZvdW5kRXJyb3INCg0KZnJvbSBhenVyZS5haS5tbCBpbXBvcnQgSW5wdXQsIE1MQ2xpZW50LCBsb2FkX2NvbXBvbmVudCwgbG9hZF9tb2RlbA0KZnJvbSBhenVyZS5haS5tbC5jb25zdGFudHMgaW1wb3J0IEFzc2V0VHlwZXMNCmZyb20gYXp1cmUuYWkubWwuZHNsIGltcG9ydCBwaXBlbGluZQ0KZnJvbSBkZXZ0b29sc190ZXN0dXRpbHMgaW1wb3J0IEF6dXJlUmVjb3JkZWRUZXN0Q2FzZSwgaXNfbGl2ZQ0KZnJvbSB0ZXN0X3V0aWxpdGllcy51dGlscyBpbXBvcnQgX1BZVEVTVF9USU1FT1VUX01FVEhPRCwgYXNzZXJ0X2pvYl9jYW5jZWwNCmZyb20gLi5fdXRpbCBpbXBvcnQgX0RTTF9USU1FT1VUX1NFQ09ORA0KDQoNCmRlZiBhc3NlcnRfcGlwZWxpbmVfam9iX2NhbmNlbChjbGllbnQ6IE1MQ2xpZW50LCBzY29yZV9mdW5jLCBwaXBlbGluZV9tb2RlbF9pbnB1dCwgcGlwZWxpbmVfdGVzdF9kYXRhKToNCiAgICBAcGlwZWxpbmUNCiAgICBkZWYgc2NvcmVfcGlwZWxpbmUobW9kZWxfaW5wdXQsIHRlc3RfZGF0YSk6DQogICAgICAgIHNjb3JlID0gc2NvcmVfZnVuYyhtb2RlbF9pbnB1dD1tb2RlbF9pbnB1dCwgdGVzdF9kYXRhPXRlc3RfZGF0YSkgICMgbm9xYTogRjg0MQ0KICAgICAgICBzY29yZV9kdXBsaWNhdGUgPSBzY29yZV9mdW5jKG1vZGVsX2lucHV0PW1vZGVsX2lucHV0LCB0ZXN0X2RhdGE9dGVzdF9kYXRhKSAgIyBub3FhOiBGODQxDQoNCiAgICBwaXBlbGluZV9qb2IgPSBzY29yZV9waXBlbGluZShtb2RlbF9pbnB1dD1waXBlbGluZV9tb2RlbF9pbnB1dCwgdGVzdF9kYXRhPXBpcGVsaW5lX3Rlc3RfZGF0YSkNCiAgICBwaXBlbGluZV9qb2Iuc2V0dGluZ3MuZGVmYXVsdF9jb21wdXRlID0gImNwdS1jbHVzdGVyIg0KICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lX2pvYiwgY2xpZW50KQ0KDQoNCkBweXRlc3QubWFyay5za2lwaWYoY29uZGl0aW9uPW5vdCBpc19saXZlKCksIHJlYXNvbj0icmVnaXN0cnkgdGVzdCwgbWF5IGZhaWwgaW4gcGxheWJhY2sgbW9kZSIpDQpAcHl0ZXN0Lm1hcmsudXNlZml4dHVyZXMoImVuYWJsZV9waXBlbGluZV9wcml2YXRlX3ByZXZpZXdfZmVhdHVyZXMiLCAicmVjb3JkZWRfdGVzdCIpDQpAcHl0ZXN0Lm1hcmsudGltZW91dCh0aW1lb3V0PV9EU0xfVElNRU9VVF9TRUNPTkQsIG1ldGhvZD1fUFlURVNUX1RJTUVPVVRfTUVUSE9EKQ0KQHB5dGVzdC5tYXJrLmUyZXRlc3QNCkBweXRlc3QubWFyay5waXBlbGluZV90ZXN0DQpjbGFzcyBUZXN0RFNMUGlwZWxpbmVPblJlZ2lzdHJ5KEF6dXJlUmVjb3JkZWRUZXN0Q2FzZSk6DQogICAgdGVzdF9kYXRhID0gSW5wdXQoDQogICAgICAgIHR5cGU9QXNzZXRUeXBlcy5VUklfRklMRSwNCiAgICAgICAgcGF0aD0iLi90ZXN0cy90ZXN0X2NvbmZpZ3MvcGlwZWxpbmVfam9icy9qb2Jfd2l0aF9yZWdpc3RyeV9tb2RlbF9hc19pbnB1dC9kYXRhL3NhbXBsZTEuY3N2IiwNCiAgICApDQoNCiAgICBkZWYgdGVzdF9waXBlbGluZV9qb2JfY3JlYXRlX3dpdGhfcmVnaXN0ZXJlZF9jb21wb25lbnRfb25fcmVnaXN0cnkoc2VsZiwgcGlwZWxpbmVzX3JlZ2lzdHJ5X2NsaWVudDogTUxDbGllbnQpOg0KICAgICAgICBsb2NhbF9jb21wb25lbnQgPSBsb2FkX2NvbXBvbmVudCgiLi90ZXN0cy90ZXN0X2NvbmZpZ3MvY29tcG9uZW50cy9iYXNpY19jb21wb25lbnRfY29kZV9sb2NhbF9wYXRoLnltbCIpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIGNyZWF0ZWRfY29tcG9uZW50ID0gcGlwZWxpbmVzX3JlZ2lzdHJ5X2NsaWVudC5jb21wb25lbnRzLmdldCgNCiAgICAgICAgICAgICAgICBsb2NhbF9jb21wb25lbnQubmFtZSwgdmVyc2lvbj1sb2NhbF9jb21wb25lbnQudmVyc2lvbg0KICAgICAgICAgICAgKQ0KICAgICAgICBleGNlcHQgUmVzb3VyY2VOb3RGb3VuZEVycm9yOg0KICAgICAgICAgICAgY3JlYXRlZF9jb21wb25lbnQgPSBwaXBlbGluZXNfcmVnaXN0cnlfY2xpZW50LmNvbXBvbmVudHMuY3JlYXRlX29yX3VwZGF0ZShsb2NhbF9jb21wb25lbnQpDQoNCiAgICAgICAgQHBpcGVsaW5lDQogICAgICAgIGRlZiBzYW1wbGVfcGlwZWxpbmUoKToNCiAgICAgICAgICAgIGNyZWF0ZWRfY29tcG9uZW50KCkNCg0KICAgICAgICBwaXBlbGluZV9qb2IgPSBzYW1wbGVfcGlwZWxpbmUoKQ0KICAgICAgICBwaXBlbGluZV9qb2Iuc2V0dGluZ3MuZGVmYXVsdF9jb21wdXRlID0gImNwdS1jbHVzdGVyIg0KICAgICAgICBhc3NlcnQgcGlwZWxpbmVzX3JlZ2lzdHJ5X2NsaWVudC5qb2JzLnZhbGlkYXRlKHBpcGVsaW5lX2pvYikucGFzc2VkDQoNCiAgICAjIHRoaXMgdGVzdCB3aWxsIGJyZWFrIGluIHBsYXliYWNrIG1vZGUsIHNvIGluY2x1ZGUgaXQgaW4gbGl2ZSB0ZXN0IG9ubHkNCiAgICBkZWYgdGVzdF9waXBlbGluZV93aXRoX2xvY2FsX2NvbXBvbmVudF9hbmRfcmVnaXN0cnlfbW9kZWxfYXNfaW5wdXQoc2VsZiwgY2xpZW50OiBNTENsaWVudCk6DQogICAgICAgICMgbG9hZF9jb21wb25lbnQNCiAgICAgICAgc2NvcmVfZnVuYyA9IGxvYWRfY29tcG9uZW50KCIuL3Rlc3RzL3Rlc3RfY29uZmlncy9waXBlbGluZV9qb2JzL2pvYl93aXRoX3JlZ2lzdHJ5X21vZGVsX2FzX2lucHV0L3Njb3JlLnltbCIpDQoNCiAgICAgICAgcGlwZWxpbmVfc2NvcmVfbW9kZWwgPSBJbnB1dCgNCiAgICAgICAgICAgIHR5cGU9ImN1c3RvbV9tb2RlbCIsIHBhdGg9ImF6dXJlbWw6Ly9yZWdpc3RyaWVzL3Nkay10ZXN0L21vZGVscy9pcmlzX21vZGVsL3ZlcnNpb25zLzEiDQogICAgICAgICkNCg0KICAgICAgICBhc3NlcnRfcGlwZWxpbmVfam9iX2NhbmNlbChjbGllbnQsIHNjb3JlX2Z1bmMsIHBpcGVsaW5lX3Njb3JlX21vZGVsLCBzZWxmLnRlc3RfZGF0YSkNCg0KICAgIGRlZiB0ZXN0X3BpcGVsaW5lX3dpdGhfbG9jYWxfY29tcG9uZW50X2FuZF9yZWdpc3RyeV9tb2RlbF9hc19pbnB1dF93aXRoX21vZGVsX2lucHV0KA0KICAgICAgICBzZWxmLCBjbGllbnQ6IE1MQ2xpZW50LCBwaXBlbGluZXNfcmVnaXN0cnlfY2xpZW50OiBNTENsaWVudA0KICAgICk6DQogICAgICAgICMgbG9hZF9jb21wb25lbnQNCiAgICAgICAgc2NvcmVfZnVuYyA9IGxvYWRfY29tcG9uZW50KCIuL3Rlc3RzL3Rlc3RfY29uZmlncy9waXBlbGluZV9qb2JzL2pvYl93aXRoX3JlZ2lzdHJ5X21vZGVsX2FzX2lucHV0L3Njb3JlLnltbCIpDQoNCiAgICAgICAgbW9kZWxfcGF0aCA9IFBhdGgoIi4vdGVzdHMvdGVzdF9jb25maWdzL21vZGVsL21vZGVsX2lyaXMueW1sIikNCiAgICAgICAgbW9kZWxfZW50aXR5ID0gbG9hZF9tb2RlbChtb2RlbF9wYXRoKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICBwaXBlbGluZV9zY29yZV9tb2RlbCA9IHBpcGVsaW5lc19yZWdpc3RyeV9jbGllbnQubW9kZWxzLmdldCgNCiAgICAgICAgICAgICAgICBuYW1lPW1vZGVsX2VudGl0eS5uYW1lLCB2ZXJzaW9uPW1vZGVsX2VudGl0eS52ZXJzaW9uDQogICAgICAgICAgICApDQogICAgICAgIGV4Y2VwdCBSZXNvdXJjZU5vdEZvdW5kRXJyb3I6DQogICAgICAgICAgICBtb2RlbF9lbnRpdHkgPSBwaXBlbGluZXNfcmVnaXN0cnlfY2xpZW50Lm1vZGVscy5jcmVhdGVfb3JfdXBkYXRlKG1vZGVsX2VudGl0eSkNCiAgICAgICAgICAgIHBpcGVsaW5lX3Njb3JlX21vZGVsID0gcGlwZWxpbmVzX3JlZ2lzdHJ5X2NsaWVudC5tb2RlbHMuZ2V0KA0KICAgICAgICAgICAgICAgIG5hbWU9bW9kZWxfZW50aXR5Lm5hbWUsIHZlcnNpb249bW9kZWxfZW50aXR5LnZlcnNpb24NCiAgICAgICAgICAgICkNCg0KICAgICAgICBhc3NlcnRfcGlwZWxpbmVfam9iX2NhbmNlbChjbGllbnQsIHNjb3JlX2Z1bmMsIHBpcGVsaW5lX3Njb3JlX21vZGVsLCBzZWxmLnRlc3RfZGF0YSkNCg0KICAgIGRlZiB0ZXN0X3BpcGVsaW5lX3dpdGhfcmVnaXN0cnlfY29tcG9uZW50X2FuZF9tb2RlbF9hc19pbnB1dCgNCiAgICAgICAgc2VsZiwgY2xpZW50OiBNTENsaWVudCwgcGlwZWxpbmVzX3JlZ2lzdHJ5X2NsaWVudDogTUxDbGllbnQNCiAgICApOg0KICAgICAgICAjIGxvYWRfY29tcG9uZW50DQogICAgICAgIHNjb3JlX2NvbXBvbmVudF9uYW1lLCBjb21wb25lbnRfdmVyc2lvbiA9ICJzY29yZV9jb21wb25lbnQiLCAiMiINCiAgICAgICAgc2NvcmVfZnVuYyA9IHBpcGVsaW5lc19yZWdpc3RyeV9jbGllbnQuY29tcG9uZW50cy5nZXQobmFtZT1zY29yZV9jb21wb25lbnRfbmFtZSwgdmVyc2lvbj1jb21wb25lbnRfdmVyc2lvbikNCg0KICAgICAgICBwaXBlbGluZV9zY29yZV9tb2RlbCA9IElucHV0KA0KICAgICAgICAgICAgdHlwZT0ibWxmbG93X21vZGVsIiwgcGF0aD0iYXp1cmVtbDovL3JlZ2lzdHJpZXMvc2RrLXRlc3QvbW9kZWxzL2lyaXNfbW9kZWwvdmVyc2lvbnMvMSINCiAgICAgICAgKQ0KDQogICAgICAgIGFzc2VydF9waXBlbGluZV9qb2JfY2FuY2VsKGNsaWVudCwgc2NvcmVfZnVuYywgcGlwZWxpbmVfc2NvcmVfbW9kZWwsIHNlbGYudGVzdF9kYXRhKQ0K",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "d1TaRP31HP1J\u002BHb81i1/OQ==",
        "Date": "Tue, 11 Apr 2023 18:38:21 GMT",
        "ETag": "\u00220x8DB3ABBED535F9B\u0022",
        "Last-Modified": "Tue, 11 Apr 2023 18:38:21 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "0cWl0GL\u002BlYU=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2021-12-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://sab6b272nokaeak.blob.core.windows.net/azureml-blobstore-061273aa-2956-4aff-8628-0fad8c820f9e/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_fl.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "10689",
        "Content-MD5": "inmxw/YWaah2Xwl6ksU/EQ==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.15.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 11 Apr 2023 18:38:22 GMT",
        "x-ms-version": "2021-12-02"
      },
      "RequestBody": "aW1wb3J0IHB5dGVzdA0KZnJvbSBwYXRobGliIGltcG9ydCBQYXRoDQpmcm9tIGRldnRvb2xzX3Rlc3R1dGlscyBpbXBvcnQgQXp1cmVSZWNvcmRlZFRlc3RDYXNlLCBpc19saXZlDQpmcm9tIGF6dXJlLmNvcmUuZXhjZXB0aW9ucyBpbXBvcnQgUmVzb3VyY2VOb3RGb3VuZEVycm9yDQpmcm9tIC4uX3V0aWwgaW1wb3J0IF9EU0xfVElNRU9VVF9TRUNPTkQNCmZyb20gdGVzdF91dGlsaXRpZXMudXRpbHMgaW1wb3J0IF9QWVRFU1RfVElNRU9VVF9NRVRIT0QNCmZyb20gYXp1cmUuYWkubWwgaW1wb3J0IElucHV0LCBsb2FkX2NvbXBvbmVudA0KZnJvbSB0eXBpbmcgaW1wb3J0IENhbGxhYmxlDQpmcm9tIGF6dXJlLmFpLm1sLmRzbC5fZmxfc2NhdHRlcl9nYXRoZXJfbm9kZSBpbXBvcnQgZmxfc2NhdHRlcl9nYXRoZXINCmZyb20gYXp1cmUuYWkubWwuZW50aXRpZXMuX2Fzc2V0cy5mZWRlcmF0ZWRfbGVhcm5pbmdfc2lsbyBpbXBvcnQgRmVkZXJhdGVkTGVhcm5pbmdTaWxvDQpmcm9tIGF6dXJlLmFpLm1sLmNvbnN0YW50cyBpbXBvcnQgQXNzZXRUeXBlcw0KZnJvbSBhenVyZS5haS5tbC5lbnRpdGllcy5fY3JlZGVudGlhbHMgaW1wb3J0ICgNCiAgICBJZGVudGl0eUNvbmZpZ3VyYXRpb24sDQogICAgSWRlbnRpdHlDb25maWd1cmF0aW9uVHlwZSwNCiAgICBNYW5hZ2VkSWRlbnRpdHlDb25maWd1cmF0aW9uLA0KKQ0KZnJvbSBhenVyZS5haS5tbC5kc2wgaW1wb3J0IHBpcGVsaW5lDQppbXBvcnQgb3MNCmZyb20gYXp1cmUuYWkubWwgaW1wb3J0ICgNCiAgICBNTENsaWVudCwNCikNCg0KDQojIFJFU09VUkNFIE5PVEVTIC0gQXMgYW4gZTJlIHRlc3QgZmlsZSwgdGhpcyBmaWxlIG1ha2VzIGFuZCByZWZlcmVuY2VzIHJlYWwgQU1MIHJlc291cmNlcy4NCiMgQWxsIHJlc291cmNlcyByZWZlcmVuY2VzIGJ5IHRoaXMgZmlsZSBhcmUgY29udGFpbmVkIHdpdGhpbiB0aGUgZm9sbG93aW5nOg0KIyBzdWJzY3JpcHRpb246IGRhdGEgc2NpZW5jZSBWTSBUZWFtIChEU1ZNKQ0KIyByZXNvdXJjZSBncm91cDogZmwtZTJlLXRlc3RpbmctcmcNCiMgd29ya3NwYWNlOiBmbC1lMmUtdGVzdGluZy13cw0KIyBJZiB5b3UncmUgcnVubmluZyB0aGlzIHRlc3QgbG9jYWxseSBpbiBsaXZlIG1vZGUsIG1ha2Ugc3VyZSB5b3UndmUgc2V0IHRoZSBhYm92ZSB2YWx1ZXMgaW4NCiMgeW91ciAuZW52IGZpbGUuDQojIHJlc291cmNlcyBvZiBub3RlOg0KIyAtIG11bHRpcGxlIHN0b3JhZ2UgY29udGFpbmVycw0KIyAtIG11bHRpcGxlIGNvbXB1dGVzIHdpdGggdmFyeWluZyBtYW5hZ2VkIGlkZW50aXRpZXMgdG8gYWxsb3cgYWNjZXNzIHRvIGRpZmZlcmVudCBzdG9yYWdlIGNvbnRhaW5lcnMNCkBweXRlc3QubWFyay50aW1lb3V0KHRpbWVvdXQ9X0RTTF9USU1FT1VUX1NFQ09ORCwgbWV0aG9kPV9QWVRFU1RfVElNRU9VVF9NRVRIT0QpDQpAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KQHB5dGVzdC5tYXJrLmNvcmVfc2RrX3Rlc3QNCmNsYXNzIFRlc3REU0xQaXBlbGluZShBenVyZVJlY29yZGVkVGVzdENhc2UpOg0KICAgICMgREVWIE5PVEU6IFRoaXMgdGVzdCBleHBlY3RzIGEgbG90IG9mIHJlc291cmNlcyB0byBhbHJlYWR5IGV4aXN0IGluIEFNTC4gVGhlIGluaXRpYWwgaW1wbGVtZW50YXRpb24NCiAgICAjIG9mIHRoaXMgdGVzdCBpbXBsZW1lbnRlZCBhbGwgb2YgdGhlc2UgdGhpZ25zIHVuZGVyIHRoZSAnZmwtZTJlLXRlc3RpbmctcmcnIHJlc291cmNlIGdyb3VwIGFuZA0KICAgICMgdGhlICdmbC1lMmUtdGVzdGluZy13cycgd29ya3NwYWNlIGluc2lkZSB0aGF0IFJHLg0KICAgICMgVGhlIG5lZWRlZCByZXNvdXJjZXMgYXJlOg0KICAgICMgLSBJbiB0aGUgd29ya3NwYWNlJ3Mgc3RvcmFnZSBhY2NvdW50LCAzIGNvbnRhaW5lcnMgbmFtZWQgJ3NpbG8tY29udGFpbmVyMScsICdzaWxvLWNvbnRhaW5lcjIzJywNCiAgICAjICAgICAgIGFuZCAnYWdnLWNvbnRhaW5lcicuIEVhY2ggY29udGFpbmVyIG5lZWRzIHRvIGhhdmUgYXNzaWduZWQgdGhlIGJsb2Igb3duZXIgcGVybWlzc2lvbg0KICAgICMgICAgICAgdG8gdGhlICd0ZXN0LW1zaS1pZCcgbWFuYWdlZCBpZGVudGl0eQ0KICAgICMgLSA0IGNvbXB1dGUgY2x1c3RlcnMgaW4gdGhlIHdvcmtzcGFjZSBuYW1lZCBzaWxvQ29tcHV0ZTEvMi8zIGFuZCBhZ2dDb21wdXRlLiBFYWNoIG9mIHdoaWNoDQogICAgIyAgICAgICBoYXMgYmVlbiBhc3NpZ25lZCB0aGUgJ3Rlc3QtbXNpLWlkJyBJRA0KICAgICMgLSA0IGRhdGFzdG9yZXMgY29ubmVjdGVkIHRvIHRoZSBhZm9yZW1lbnRpb25lZCBzdG9yYWdlIGNvbnRhaW5lcnMgbmFtZWQgc2lsb19kYXRhc3RvcmUxLzIvMyBhbmQNCiAgICAjICAgICAgIGFnZ19kYXRhc3RvcmUuDQogICAgQHB5dGVzdC5tYXJrLnNraXBpZigNCiAgICAgICAgY29uZGl0aW9uPW5vdCBpc19saXZlKCksDQogICAgICAgIHJlYXNvbj0oDQogICAgICAgICAgICAiVE9ETyAoMjIzNTAzNCkgVGhlIGNyaXRpY2FsIGNhbGwgdG8gYGNsaWVudC5qb2JzLmNyZWF0ZV9vcl91cGRhdGVgIHNlZW1zIHRvIG1ha2UgZGlmZmVyZW50Ig0KICAgICAgICAgICAgKyAiQVBJIGNhbGxzIGluIHBsYXliYWNrIG1vZGUgY29tcGFyZWQgdG8gcmVjb3JkaW5nIG1vZGUiDQogICAgICAgICksDQogICAgKQ0KICAgIGRlZiB0ZXN0X2ZsX3BpcGVsaW5lKA0KICAgICAgICBzZWxmLA0KICAgICAgICBjbGllbnQ6IE1MQ2xpZW50LA0KICAgICAgICBmZWRlcmF0ZWRfbGVhcm5pbmdfY29tcG9uZW50c19mb2xkZXI6IFBhdGgsDQogICAgICAgIGZlZGVyYXRlZF9sZWFybmluZ19sb2NhbF9kYXRhX2ZvbGRlcjogUGF0aCwNCiAgICApIC0\",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "inmxw/YWaah2Xwl6ksU/EQ==",
        "Date": "Tue, 11 Apr 2023 18:38:21 GMT",
        "ETag": "\u00220x8DB3ABBED522742\u0022",
        "Last-Modified": "Tue, 11 Apr 2023 18:38:21 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "d3pe6wBZ/xY=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2021-12-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://sab6b272nokaeak.blob.core.windows.net/azureml-blobstore-061273aa-2956-4aff-8628-0fad8c820f9e/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_pipeline_with_specific_nodes.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "13161",
        "Content-MD5": "abQ5Cno4tBTZSUpkYp4kKA==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.15.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 11 Apr 2023 18:38:22 GMT",
        "x-ms-version": "2021-12-02"
      },
      "RequestBody": "",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Connection": "close",
        "Content-Length": "0",
        "Content-MD5": "abQ5Cno4tBTZSUpkYp4kKA==",
        "Date": "Tue, 11 Apr 2023 18:38:21 GMT",
        "ETag": "\u00220x8DB3ABBED550D07\u0022",
        "Last-Modified": "Tue, 11 Apr 2023 18:38:21 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "LAlnIcLWREA=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2021-12-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://sab6b272nokaeak.blob.core.windows.net/azureml-blobstore-061273aa-2956-4aff-8628-0fad8c820f9e/LocalUpload/00000000000000000000000000000000/e2etests/test_automl_dsl_pipeline.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "34982",
        "Content-MD5": "ks8nobB7LyPUqWoqq4tIFg==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.15.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 11 Apr 2023 18:38:22 GMT",
        "x-ms-version": "2021-12-02"
      },
      "RequestBody": "ZnJvbSBwYXRobGliIGltcG9ydCBQYXRoDQoNCmltcG9ydCBweWRhc2gNCmltcG9ydCBweXRlc3QNCmZyb20gZGV2dG9vbHNfdGVzdHV0aWxzIGltcG9ydCBBenVyZVJlY29yZGVkVGVzdENhc2UNCmZyb20gdGVzdF91dGlsaXRpZXMudXRpbHMgaW1wb3J0IGNhbmNlbF9qb2INCg0KZnJvbSBhenVyZS5haS5tbCBpbXBvcnQgSW5wdXQsIE1MQ2xpZW50LCBhdXRvbWwsIGRzbCwgT3V0cHV0DQpmcm9tIGF6dXJlLmFpLm1sLmF1dG9tbCBpbXBvcnQgKA0KICAgIGNsYXNzaWZpY2F0aW9uLA0KICAgIGZvcmVjYXN0aW5nLA0KICAgIHJlZ3Jlc3Npb24sDQogICAgdGV4dF9jbGFzc2lmaWNhdGlvbiwNCiAgICB0ZXh0X2NsYXNzaWZpY2F0aW9uX211bHRpbGFiZWwsDQogICAgdGV4dF9uZXIsDQopDQpmcm9tIGF6dXJlLmFpLm1sLmNvbnN0YW50cy5fY29tbW9uIGltcG9ydCBBc3NldFR5cGVzDQpmcm9tIGF6dXJlLmFpLm1sLmVudGl0aWVzIGltcG9ydCBQaXBlbGluZUpvYg0KZnJvbSBhenVyZS5haS5tbC5lbnRpdGllcy5fam9iLmF1dG9tbCBpbXBvcnQgU2VhcmNoU3BhY2UNCmZyb20gYXp1cmUuYWkubWwuZW50aXRpZXMuX2pvYi5hdXRvbWwubmxwIGltcG9ydCBObHBGZWF0dXJpemF0aW9uU2V0dGluZ3MNCmZyb20gYXp1cmUuYWkubWwuZW50aXRpZXMuX2pvYi5hdXRvbWwudGFidWxhciBpbXBvcnQgVGFidWxhckZlYXR1cml6YXRpb25TZXR0aW5ncw0KZnJvbSBhenVyZS5haS5tbC5lbnRpdGllcy5fam9iLmF1dG9tbC50YWJ1bGFyLmZvcmVjYXN0aW5nX3NldHRpbmdzIGltcG9ydCBGb3JlY2FzdGluZ1NldHRpbmdzDQpmcm9tIGF6dXJlLmFpLm1sLnN3ZWVwIGltcG9ydCBCYW5kaXRQb2xpY3ksIENob2ljZSwgVW5pZm9ybQ0KDQp0ZXN0c19yb290X2RpciA9IFBhdGgoX19maWxlX18pLnBhcmVudC5wYXJlbnQucGFyZW50DQoNCiMgZGVjbGFyZSB2YXJpYWJsZXMgZm9yIGNvbXB1dGUsIHNvIHRoYXQgd2UgY2FuIGVhc2lseSBjaGFuZ2UgdGhlbSBsYXRlcg0KQ1BVX0NMVVNURVIgPSAiY3B1LWNsdXN0ZXIiDQpHUFVfQ0xVU1RFUiA9ICJncHUtY2x1c3RlciINCg0KDQpAcHl0ZXN0Lm1hcmsudXNlZml4dHVyZXMoDQogICAgImVuYWJsZV9lbnZpcm9ubWVudF9pZF9hcm1fZXhwYW5zaW9uIiwNCiAgICAiZW5hYmxlX3BpcGVsaW5lX3ByaXZhdGVfcHJldmlld19mZWF0dXJlcyIsDQogICAgIm1vY2tfY29kZV9oYXNoIiwNCiAgICAibW9ja19jb21wb25lbnRfaGFzaCIsDQogICAgIm1vY2tfc2V0X2hlYWRlcnNfd2l0aF91c2VyX2FtbF90b2tlbiIsDQogICAgInJlY29yZGVkX3Rlc3QiLA0KKQ0KQHB5dGVzdC5tYXJrLmF1dG9tbGUyZXRlc3QNCkBweXRlc3QubWFyay5waXBlbGluZV90ZXN0DQpjbGFzcyBUZXN0QXV0b21sRFNMUGlwZWxpbmUoQXp1cmVSZWNvcmRlZFRlc3RDYXNlKToNCiAgICBkZWYgdGVzdF9hdXRvbWxfY2xhc3NpZmljYXRpb25faW5fcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCk6DQogICAgICAgIEBkc2wucGlwZWxpbmUobmFtZT0idHJhaW5fYXV0b21sX2NsYXNzaWZpY2F0aW9uX2luX3BpcGVsaW5lIikNCiAgICAgICAgZGVmIHRyYWluX2F1dG9tbF9jbGFzc2lmaWNhdGlvbl9pbl9waXBlbGluZSgNCiAgICAgICAgICAgIGNsYXNzX3RyYWluX2RhdGEsDQogICAgICAgICAgICBjbGFzc192YWxpZF9kYXRhLA0KICAgICAgICApOg0KICAgICAgICAgICAgY2xhc3NpZmljYXRpb25fbm9kZSA9IGNsYXNzaWZpY2F0aW9uKA0KICAgICAgICAgICAgICAgIHRyYWluaW5nX2RhdGE9Y2xhc3NfdHJhaW5fZGF0YSwNCiAgICAgICAgICAgICAgICB2YWxpZGF0aW9uX2RhdGE9Y2xhc3NfdmFsaWRfZGF0YSwNCiAgICAgICAgICAgICAgICB0ZXN0X2RhdGE9Y2xhc3NfdmFsaWRfZGF0YSwNCiAgICAgICAgICAgICAgICB0YXJnZXRfY29sdW1uX25hbWU9InkiLA0KICAgICAgICAgICAgICAgIHByaW1hcnlfbWV0cmljPSJhY2N1cmFjeSIsDQogICAgICAgICAgICAgICAgZmVhdHVyaXphdGlvbj1UYWJ1bGFyRmVhdHVyaXphdGlvblNldHRpbmdzKG1vZGU9IkF1dG8iKSwNCiAgICAgICAgICAgICkNCiAgICAgICAgICAgIGNsYXNzaWZpY2F0aW9uX25vZGUuc2V0X2xpbWl0cyhtYXhfdHJpYWxzPTEpDQogICAgICAgICAgICBjbGFzc2lmaWNhdGlvbl9ub2RlLnNldF90cmFpbmluZyhlbmFibGVfc3RhY2tfZW5zZW1ibGU9RmFsc2UsIGVuYWJsZV92b3RlX2Vuc2VtYmxlPUZhbHNlKQ0KDQogICAgICAgIGNsYXNzX3RyYWluID0gSW5wdXQoDQogICAgICAgICAgICB0eXBlPUFzc2V0VHlwZXMuTUxUQUJMRSwNCiAgICAgICAgICAgIHBhdGg9dGVzdHNfcm9vdF9kaXIgLyAidGVzdF9jb25maWdzL2F1dG9tbF9qb2IvdGVzdF9kYXRhc2V0cy9iYW5rX21hcmtldGluZy90cmFpbiIsDQogICAgICAgICkNCiAgICAgICAgY2xhc3NfdmFsaWQgPSBJbnB1dCgNCiAgICAgICAgICAgIHR5cGU9QXNzZXRUeXBlcy5NTFRBQkxFLA0KICAgICAgICAgICAgcGF0aD10ZXN0c19yb290X2RpciAvICJ0ZXN0X2NvbmZpZ3MvYXV0b21sX2pvYi90ZXN0X2RhdGFzZXRzL2JhbmtfbWFya2V0aW5nL3ZhbGlkIiwNCiAgICAgICAgKQ0KDQogICAgICAgIHBpcGVsaW5lX2pvYjogUGlwZWxpbmVKb2IgPSB0cmFpbl9hdXRvbWxfY2xhc3NpZmljYXRpb25faW5fcGlwZWxpbmUoY2xhc3NfdHJhaW4sIGNsYXNzX3ZhbGlkKQ0KICAgICAgICBwaXBlbGluZV9qb2Iuc2V0dGluZ3MuZGVmYXVsdF9jb21wdXRlID0gQ1BVX0NMVVNURVINCg0KICAgICAgICBmcm9tX3Jlc3RfcGlwZWxpbmVfam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZV9qb2IpDQogICAgICAgIGNhbmNlbF9qb2IoY2xpZW50LCBmcm9tX3Jlc3RfcGlwZWxpbmVfam9iKQ0KDQogICAgICAgIGFjdHVhbF9kaWN0ID0gZnJvbV9yZXN0X3BpcGVsaW5lX2pvYi5fdG9fcmVzdF9vYmplY3QoKS5hc19kaWN0KCkNCiAgICAgICAgZmllbGRzX3RvX29taXQgPSBbIm5hbWUiLCAiZGlzcGxheV9uYW1lIiwgImV4cGVyaW1lbnRfbmFtZSIsICJwcm9wZXJ0aWVzIl0NCg0KICAgICAgICBjbGFzc2lmaWNhdGlvbl9kaWN0ID0gcHlkYXNoLm9taXQoYWN0dWFsX2RpY3RbInByb3BlcnRpZXMiXVsiam9icyJdWyJjbGFzc2lmaWNhdGlvbl9ub2RlIl0sIGZpZWxkc190b19vbWl0KQ0KICAgICAgICBhc3NlcnQgY2xhc3NpZmljYXRpb25fZGljdCA9PSB7DQogICAgICAgICAgICAidGVzdF9kYXRhIjogIiR7e3BhcmVudC5pbnB1dHMuY2xhc3NfdmFsaWRfZGF0YX19IiwNCiAgICAgICAgICAgICJ2YWxpZGF0aW9uX2RhdGEiOiAiJHt7cGFyZW50LmlucHV0cy5jbGFzc192YWxpZF9kYXRhfX0iLA0KICAgICAgICAgICAgInRyYWluaW5nX2RhdGEiOiAiJHt7cGFyZW50LmlucHV0cy5jbGFzc190cmFpbl9kYXRhfX0iLA0KICAgICAgICAgICAgInRhcmdldF9jb2x1bW5fbmFtZSI6ICJ5IiwNCiAgICAgICAgICAgICJ0YWdzIjoge30sDQogICAgICAgICAgICAidHlwZSI6ICJhdXRvbWwiLA0KICAgICAgICAgICAgIm91dHB1dHMiOiB7fSwNCiAgICAgICAgICAgICJsb2dfdmVyYm9zaXR5IjogImluZm8iLA0KICAgICAgICAgICAgImxpbWl0cyI6IHsibWF4X3RyaWFscyI6IDF9LA0KICAgICAgICAgICAgImZlYXR1cml6YXRpb24iOiB7Im1vZGUiOiAiYXV0byJ9LA0KICAgICAgICAgICAgInRyYWluaW5nIjogeyJlbmFibGVfc3RhY2tfZW5zZW1ibGUiOiBGYWxzZSwgImVuYWJsZV92b3RlX2Vuc2VtYmxlIjogRmFsc2V9LA0KICAgICAgICAgICAgInRhc2siOiAiY2xhc3NpZmljYXRpb24iLA0KICAgICAgICAgICAgInByaW1hcnlfbWV0cmljIjogImFjY3VyYWN5IiwNCiAgICAgICAgfQ0KDQogICAgZGVmIHRlc3RfcmVnaXN0ZXJfb3V0cHV0X2Zvcl9hdXRvbWxfY2xhc3NpZmljYXRpb24oc2VsZiwgY2xpZW50OiBNTENsaWVudCk6DQogICAgICAgIEBkc2wucGlwZWxpbmUobmFtZT0idHJhaW5fYXV0b21sX2NsYXNzaWZpY2F0aW9uX2luX3BpcGVsaW5lIikNCiAgICAgICAgZGVmIHRyYWluX2F1dG9tbF9jbGFzc2lmaWNhdGlvbl9pbl9waXBlbGluZSgNCiAgICAgICAgICAgIGNsYXNzX3RyYWluX2RhdGEsDQogICAgICAgICAgICBjbGFzc192YWxpZF9kYXRhLA0KICAgICAgICApOg0KICAgICAgICAgICAgY2xhc3NpZmljYXRpb25fbm9kZSA9IGNsYXNzaWZpY2F0aW9uKA0KICAgICAgICAgICAgICAgIHRyYWluaW5nX2RhdGE9Y2xhc3NfdHJhaW5fZGF0YSwNCiAgICAgICAgICAgICAgICB2YWxpZGF0aW9uX2RhdGE9Y2xhc3NfdmFsaWRfZGF0YSwNCiAgICAgICAgICAgICAgICB0ZXN0X2RhdGE9Y2xhc3NfdmFsaWRfZGF0YSwNCiAgICAgICAgICAgICAgICB0YXJnZXRfY29sdW1uX25hbWU9InkiLA0KICAgICAgICAgICAgICAgIHByaW1hcnlfbWV0cmljPSJhY2N1cmFjeSIsDQogICAgICAgICAgICAgICAgZmVhdHVyaXphdGlvbj1UYWJ1bGFyRmVhdHVyaXphdGlvblNldHRpbmdzKG1vZGU9IkF1dG8iKSwNCiAgICAgICAgICAgICAgICBvdXRwdXRzPXsiYmVzdF9tb2RlbCI6IE91dHB1dCh0eXBlPSJtbGZsb3dfbW9kZWwiKX0sDQogICAgICAgICAgICApDQogICAgICAgICAgICBjbGFzc2lmaWNhdGlvbl9ub2RlLnNldF9saW1pdHMobWF4X3RyaWFscz0xKQ0KICAgICAgICAgICAgY2xhc3NpZmljYXRpb25fbm9kZS5zZXRfdHJhaW5pbmcoZW5hYmxlX3N0YWNrX2Vuc2VtYmxlPUZhbHNlLCBlbmFibGVfdm90ZV9lbnNlbWJsZT1GYWxzZSkNCiAgICAgICAgICAgIGNsYXNzaWZpY2F0aW9uX25vZGUub3V0cHV0c1siYmVzdF9tb2RlbCJdLm5hbWUgPSAiY2xhc3NpZmljYXRpb25fb3V0cHV0X25hbWUiDQogICAgICAgICAgICBjbGFzc2lmaWNhdGlvbl9ub2RlLm91dHB1dHNbImJlc3RfbW9kZWwiXS52ZXJzaW9uID0gIjEiDQoNCiAgICAgICAgICAgIGNsYXNzaWZpY2F0aW9uX25vZGVfMiA9IGNsYXNzaWZpY2F0aW9uKCAgIyBiaW5kaW5nIHRvIHBpcGVsaW5lIG91dHB1dA0KICAgICAgICAgICAgICAgIHRyYWluaW5nX2RhdGE9Y2xhc3NfdHJhaW5fZGF0YSwNCiAgICAgICAgICAgICAgICB2YWxpZGF0aW9uX2RhdGE9Y2xhc3NfdmFsaWRfZGF0YSwNCiAgICAgICAgICAgICAgICB0ZXN0X2RhdGE9Y2xhc3NfdmFsaWRfZGF0YSwNCiAgICAgICAgICAgICAgICB0YXJnZXRfY29sdW1uX25hbWU9InkiLA0KICAgICAgICAgICAgICAgIHByaW1hcnlfbWV0cmljPSJhY2N1cmFjeSIsDQogICAgICAgICAgICAgICAgZmVhdHVyaXphdGlvbj1UYWJ1bGFyRmVhdHVyaXphdGlvblNldHRpbmdzKG1vZGU9IkF1dG8iKSwNCiAgICAgICAgICAgICAgICBvdXRwdXRzPXsiYmVzdF9tb2RlbCI6IE91dHB1dCh0eXBlPSJtbGZsb3dfbW9kZWwiKX0sDQogICAgICAgICAgICApDQogICAgICAgICAgICBjbGFzc2lmaWNhdGlvbl9ub2RlXzIuc2V0X2xpbWl0cyhtYXhfdHJpYWxzPTEpDQogICAgICAgICAgICBjbGFzc2lmaWNhdGlvbl9ub2RlXzIuc2V0X3RyYWluaW5nKGVuYWJsZV9zdGFja19lbnNlbWJsZT1GYWxzZSwgZW5hYmxlX3ZvdGVfZW5zZW1ibGU9RmFsc2UpDQogICAgICAgICAgICBjbGFzc2lmaWNhdGlvbl9ub2RlXzIub3V0cHV0c1siYmVzdF9tb2RlbCJdLm5hbWUgPSAiY2xhc3NpZmljYXRpb25fb3V0cHV0X25hbWUiDQogICAgICAgICAgICBjbGFzc2lmaWNhdGlvbl9ub2RlXzIub3V0cHV0c1siYmVzdF9tb2RlbCJdLnZlcnNpb24gPSAiMiINCg0KICAgICAgICAgICAgcmV0dXJuIHsiY2xhc3NpZmljYXRpb25fMl9vdXRwdXQiOiBjbGFzc2lmaWNhdGlvbl9ub2RlXzIub3V0cHV0cy5iZXN0X21vZGVsfQ0KDQogICAgICAgIGNsYXNzX3RyYWluID0gSW5wdXQoDQogICAgICAgICAgICB0eXBlPUFzc2V0VHlwZXMuTUxUQUJMRSwNCiAgICAgICAgICAgIHBhdGg9dGVzdHNfcm9vdF9kaXIgLyAidGVzdF9jb25maWdzL2F1dG9tbF9qb2IvdGVzdF9kYXRhc2V0cy9iYW5rX21hcmtldGluZy90cmFpbiIsDQogICAgICAgICkNCiAgICAgICAgY2xhc3NfdmFsaWQgPSBJbnB1dCgNCiAgICAgICAgICAgIHR5cGU9QXNzZXRUeXBlcy5NTFRBQkxFLA0KICAgICAgICAgICAgcGF0aD10ZXN0c19yb290X2RpciAvICJ0ZXN0X2NvbmZpZ3MvYXV0b21sX2pvYi90ZXN0X2RhdGFzZXRzL2JhbmtfbWFya2V0aW5nL3ZhbGlkIiwNCiAgICAgICAgKQ0KDQogICAgICAgIHBpcGVsaW5lX2pvYjogUGlwZWxpbmVKb2IgPSB0cmFpbl9hdXRvbWxfY2xhc3NpZmljYXRpb25faW5fcGlwZWxpbmUoY2xhc3NfdHJhaW4sIGNsYXNzX3ZhbGlkKQ0KICAgICAgICBwaXBlbGluZV9qb2Iuc2V0dGluZ3MuZGVmYXVsdF9jb21wdXRlID0gQ1BVX0NMVVNURVINCg0KICAgICAgICBmcm9tX3Jlc3RfcGlwZWxpbmVfam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZV9qb2IpDQogICAgICAgIGNhbmNlbF9qb2IoY2xpZW50LCBmcm9tX3Jlc3RfcGlwZWxpbmVfam9iKQ0KDQogICAgICAgIGFjdHVhbF9kaWN0ID0gZnJvbV9yZXN0X3BpcGVsaW5lX2pvYi5fdG9fcmVzdF9vYmplY3QoKS5hc19kaWN0KCkNCiAgICAgICAgZmllbGRzX3RvX29taXQgPSBbIm5hbWUiLCAiZGlzcGxheV9uYW1lIiwgImV4cGVyaW1lbnRfbmFtZSIsICJwcm9wZXJ0aWVzIl0NCg0KICAgICAgICBjbGFzc2lmaWNhdGlvbl9kaWN0ID0gcHlkYXNoLm9taXQoYWN0dWFsX2RpY3RbInByb3BlcnRpZXMiXVsiam9icyJdWyJjbGFzc2lmaWNhdGlvbl9ub2RlIl0sIGZpZWxkc190b19vbWl0KQ0KICAgICAgICBhc3NlcnQgY2xhc3NpZmljYXRpb25fZGljdCA9PSB7DQogICAgICAgICAgICAidGVzdF9kYXRhIjogIiR7e3BhcmVudC5pbnB1dHMuY2xhc3NfdmFsaWRfZGF0YX19IiwNCiAgICAgICAgICAgICJ2YWxpZGF0aW9uX2RhdGEiOiAiJHt7cGFyZW50LmlucHV0cy5jbGFzc192YWxpZF9kYXRhfX0iLA0KICAgICAgICAgICAgInRyYWluaW5nX2RhdGEiOiAiJHt7cGFyZW50LmlucHV0cy5jbGFzc190cmFpbl9kYXRhfX0iLA0KICAgICAgICAgICAgInRhcmdldF9jb2x1bW5fbmFtZSI6ICJ5IiwNCiAgICAgICAgICAgICJ0YWdzIjoge30sDQogICAgICAgICAgICAidHlwZSI6ICJhdXRvbWwiLA0KICAgICAgICAgICAgIm91dHB1dHMiOiB7DQogICAgICAgICAgICAgICAgImJlc3RfbW9kZWwiOiB7ImpvYl9vdXRwdXRfdHlwZSI6ICJtbGZsb3dfbW9kZWwiLCAibmFtZSI6ICJjbGFzc2lmaWNhdGlvbl9vdXRwdXRfbmFtZSIsICJ2ZXJzaW9uIjogIjEifQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICJsb2dfdmVyYm9zaXR5IjogImluZm8iLA0KICAgICAgICAgICAgImxpbWl0cyI6IHsibWF4X3RyaWFscyI6IDF9LA0KICAgICAgICAgICAgImZlYXR1cml6YXRpb24iOiB7Im1vZGUiOiAiYXV0byJ9LA0KICAgICAgICAgICAgInRyYWluaW5nIjogeyJlbmFibGVfc3RhY2tfZW5zZW1ibGUiOiBGYWxzZSwgImVuYWJsZV92b3RlX2Vuc2VtYmxlIjogRmFsc2V9LA0KICAgICAgICAgICAgInRhc2siOiAiY2xhc3NpZmljYXRpb24iLA0KICAgICAgICAgICAgInByaW1hcnlfbWV0cmljIjogImFjY3VyYWN5IiwNCiAgICAgICAgfQ0KDQogICAgICAgIGNsYXNzaWZpY2F0aW9uX2RpY3QgPSBweWRhc2gub21pdCgNCiAgICAgICAgICAgIGFjdHVhbF9kaWN0WyJwcm9wZXJ0aWVzIl1bIm91dHB1dHMiXVsiY2xhc3NpZmljYXRpb25fMl9vdXRwdXQiXSwgZmllbGRzX3RvX29taXQNCiAgICAgICAgKQ0KICAgICAgICBhc3NlcnQgY2xhc3NpZmljYXRpb25fZGljdCA9PSB7DQogICAgICAgICAgICAiYXNzZXRfbmFtZSI6ICJjbGFzc2lmaWNhdGlvbl9vdXRwdXRfbmFtZSIsDQogICAgICAgICAgICAiYXNzZXRfdmVyc2lvbiI6ICIyIiwNCiAgICAgICAgICAgICJqb2Jfb3V0cHV0X3R5cGUiOiAibWxmbG93X21vZGVsIiwNCiAgICAgICAgICAgICJtb2RlIjogIlJlYWRXcml0ZU1vdW50IiwNCiAgICAgICAgfQ0KDQogICAgZGVmIHRlc3RfYXV0b21sX3JlZ3Jlc3Npb25faW5fcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCk6DQogICAgICAgIEBkc2wucGlwZWxpbmUobmFtZT0idHJhaW5fYXV0b21sX3JlZ3Jlc3Npb25faW5fcGlwZWxpbmUiKQ0KICAgICAgICBkZWYgdHJhaW5fYXV0b21sX3JlZ3Jlc3Npb25faW5fcGlwZWxpbmUocmVncmVzc2lvbl90cmFpbl9kYXRhKToNCiAgICAgICAgICAgIHJlZ3Jlc3Npb25fbm9kZSA9IHJlZ3Jlc3Npb24oDQogICAgICAgICAgICAgICAgcHJpbWFyeV9tZXRyaWM9InIyX3Njb3JlIiwNCiAgICAgICAgICAgICAgICB0YXJnZXRfY29sdW1uX25hbWU9IkVSUCIsDQogICAgICAgICAgICAgICAgdHJhaW5pbmdfZGF0YT1yZWdyZXNzaW9uX3RyYWluX2RhdGEsDQogICAgICAgICAgICApDQogICAgICAgICAgICByZWdyZXNzaW9uX25vZGUuc2V0X2xpbWl0cyhtYXhfdHJpYWxzPTEpDQogICAgICAgICAgICByZWdyZXNzaW9uX25vZGUuc2V0X3RyYWluaW5nKGVuYWJsZV9zdGFja19lbnNlbWJsZT1GYWxzZSwgZW5hYmxlX3ZvdGVfZW5zZW1ibGU9RmFsc2UpDQogICAgICAgICAgICByZWdyZXNzaW9uX25vZGUuc2V0X2ZlYXR1cml6YXRpb24obW9kZT0iYXV0byIpDQoNCiAgICAgICAgcmVncmVzc2lvbl90cmFpbiA9IElucHV0KA0KICAgICAgICAgICAgdHlwZT1Bc3NldFR5cGVzLk1MVEFCTEUsDQogICAgICAgICAgICBwYXRoPXRlc3RzX3Jvb3RfZGlyIC8gInRlc3RfY29uZmlncy9hdXRvbWxfam9iL3Rlc3RfZGF0YXNldHMvbWFjaGluZV9kYXRhL3RyYWluIiwNCiAgICAgICAgKQ0KDQogICAgICAgIHBpcGVsaW5lX2pvYjogUGlwZWxpbmVKb2IgPSB0cmFpbl9hdXRvbWxfcmVncmVzc2lvbl9pbl9waXBlbGluZShyZWdyZXNzaW9uX3RyYWluKQ0KICAgICAgICBwaXBlbGluZV9qb2Iuc2V0dGluZ3MuZGVmYXVsdF9jb21wdXRlID0gQ1BVX0NMVVNURVINCg0KICAgICAgICBmcm9tX3Jlc3RfcGlwZWxpbmVfam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZV9qb2IpDQogICAgICAgIGNhbmNlbF9qb2IoY2xpZW50LCBmcm9tX3Jlc3RfcGlwZWxpbmVfam9iKQ0KDQogICAgICAgIGFjdHVhbF9kaWN0ID0gZnJvbV9yZXN0X3BpcGVsaW5lX2pvYi5fdG9fcmVzdF9vYmplY3QoKS5hc19kaWN0KCkNCiAgICAgICAgZmllbGRzX3RvX29taXQgPSBbIm5hbWUiLCAiZGlzcGxheV9uYW1lIiwgImV4cGVyaW1lbnRfbmFtZSIsICJwcm9wZXJ0aWVzIl0NCg0KICAgICAgICByZWdyZXNzaW9uX2RpY3QgPSBweWRhc2gub21pdChhY3R1YWxfZGljdFsicHJvcGVydGllcyJdWyJqb2JzIl1bInJlZ3Jlc3Npb25fbm9kZSJdLCBmaWVsZHNfdG9fb21pdCkNCiAgICAgICAgYXNzZXJ0IHJlZ3Jlc3Npb25fZGljdCA9PSB7DQogICAgICAgICAgICAidHJhaW5pbmdfZGF0YSI6ICIke3twYXJlbnQuaW5wdXRzLnJlZ3Jlc3Npb25fdHJhaW5fZGF0YX19IiwNCiAgICAgICAgICAgICJ0YXJnZXRfY29sdW1uX25hbWUiOiAiRVJQIiwNCiAgICAgICAgICAgICJ0YWdzIjoge30sDQogICAgICAgICAgICAidHlwZSI6ICJhdXRvbWwiLA0KICAgICAgICAgICAgIm91dHB1dHMiOiB7fSwNCiAgICAgICAgICAgICJsb2dfdmVyYm9zaXR5IjogImluZm8iLA0KICAgICAgICAgICAgImxpbWl0cyI6IHsibWF4X3RyaWFscyI6IDF9LA0KICAgICAgICAgICAgImZlYXR1cml6YXRpb24iOiB7Im1vZGUiOiAiYXV0byJ9LA0KICAgICAgICAgICAgInRyYWluaW5nIjogeyJlbmFibGVfc3RhY2tfZW5zZW1ibGUiOiBGYWxzZSwgImVuYWJsZV92b3RlX2Vuc2VtYmxlIjogRmFsc2V9LA0KICAgICAgICAgICAgInRhc2siOiAicmVncmVzc2lvbiIsDQogICAgICAgICAgICAicHJpbWFyeV9tZXRyaWMiOiAicjJfc2NvcmUiLA0KICAgICAgICB9DQoNCiAgICBkZWYgdGVzdF9hdXRvbWxfZm9yZWNhc3RpbmdfaW5fcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCk6DQogICAgICAgIEBkc2wucGlwZWxpbmUobmFtZT0idHJhaW5fd2l0aF9hdXRvbWxfaW5fcGlwZWxpbmUiKQ0KICAgICAgICBkZWYgdHJhaW5fYXV0b21sX2ZvcmVjYXN0aW5nX2luX3BpcGVsaW5lKA0KICAgICAgICAgICAgZm9yZWNhc3RpbmdfdHJhaW5fZGF0YSwNCiAgICAgICAgKToNCiAgICAgICAgICAgIGZvcmVjYXN0aW5nX3NldHRpbmdzID0gRm9yZWNhc3RpbmdTZXR0aW5ncyh0aW1lX2NvbHVtbl9uYW1lPSJEQVRFIiwgZm9yZWNhc3RfaG9yaXpvbj0xMiwgZnJlcXVlbmN5PSJNUyIpDQoNCiAgICAgICAgICAgIGZvcmVjYXN0aW5nX25vZGUgPSBmb3JlY2FzdGluZygNCiAgICAgICAgICAgICAgICBwcmltYXJ5X21ldHJpYz0ibm9ybWFsaXplZF9yb290X21lYW5fc3F1YXJlZF9lcnJvciIsDQogICAgICAgICAgICAgICAgdGFyZ2V0X2NvbHVtbl9uYW1lPSJCZWVyUHJvZHVjdGlvbiIsDQogICAgICAgICAgICAgICAgdHJhaW5pbmdfZGF0YT1mb3JlY2FzdGluZ190cmFpbl9kYXRhLA0KICAgICAgICAgICAgICAgIG5fY3Jvc3NfdmFsaWRhdGlvbnM9MiwNCiAgICAgICAgICAgICAgICBmb3JlY2FzdGluZ19zZXR0aW5ncz1mb3JlY2FzdGluZ19zZXR0aW5ncywNCiAgICAgICAgICAgICkNCiAgICAgICAgICAgIGZvcmVjYXN0aW5nX25vZGUuc2V0X2xpbWl0cyhtYXhfdHJpYWxzPTEpDQogICAgICAgICAgICBmb3JlY2FzdGluZ19ub2RlLnNldF90cmFpbmluZyhlbmFibGVfc3RhY2tfZW5zZW1ibGU9RmFsc2UsIGVuYWJsZV92b3RlX2Vuc2VtYmxlPUZhbHNlKQ0KICAgICAgICAgICAgZm9yZWNhc3Rpbmdfbm9kZS5zZXRfZmVhdHVyaXphdGlvbihtb2RlPSJhdXRvIikNCg0KICAgICAgICBmb3JlY2FzdGluZ190cmFpbiA9IElucHV0KA0KICAgICAgICAgICAgdHlwZT1Bc3NldFR5cGVzLk1MVEFCTEUsDQogICAgICAgICAgICBwYXRoPXRlc3RzX3Jvb3RfZGlyIC8gInRlc3RfY29uZmlncy9hdXRvbWxfam9iL3Rlc3RfZGF0YXNldHMvYmVlcl9mb3JlY2FzdGluZy90cmFpbiIsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZV9qb2I6IFBpcGVsaW5lSm9iID0gdHJhaW5fYXV0b21sX2ZvcmVjYXN0aW5nX2luX3BpcGVsaW5lKGZvcmVjYXN0aW5nX3RyYWluX2RhdGE9Zm9yZWNhc3RpbmdfdHJhaW4pDQogICAgICAgIHBpcGVsaW5lX2pvYi5zZXR0aW5ncy5kZWZhdWx0X2NvbXB1dGUgPSBDUFVfQ0xVU1RFUg0KDQogICAgICAgIGZyb21fcmVzdF9waXBlbGluZV9qb2IgPSBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKHBpcGVsaW5lX2pvYikNCiAgICAgICAgY2FuY2VsX2pvYihjbGllbnQsIGZyb21fcmVzdF9waXBlbGluZV9qb2IpDQoNCiAgICAgICAgYWN0dWFsX2RpY3QgPSBmcm9tX3Jlc3RfcGlwZWxpbmVfam9iLl90b19yZXN0X29iamVjdCgpLmFzX2RpY3QoKQ0KICAgICAgICBmaWVsZHNfdG9fb21pdCA9IFsibmFtZSIsICJkaXNwbGF5X25hbWUiLCAiZXhwZXJpbWVudF9uYW1lIiwgInByb3BlcnRpZXMiXQ0KDQogICAgICAgIGZvcmVjYXN0aW5nX2RpY3QgPSBweWRhc2gub21pdChhY3R1YWxfZGljdFsicHJvcGVydGllcyJdWyJqb2JzIl1bImZvcmVjYXN0aW5nX25vZGUiXSwgZmllbGRzX3RvX29taXQpDQogICAgICAgIGFzc2VydCBmb3JlY2FzdGluZ19kaWN0ID09IHsNCiAgICAgICAgICAgICJ0cmFpbmluZ19kYXRhIjogIiR7e3BhcmVudC5pbnB1dHMuZm9yZWNhc3RpbmdfdHJhaW5fZGF0YX19IiwNCiAgICAgICAgICAgICJuX2Nyb3NzX3ZhbGlkYXRpb25zIjogMiwNCiAgICAgICAgICAgICJ0YXJnZXRfY29sdW1uX25hbWUiOiAiQmVlclByb2R1Y3Rpb24iLA0KICAgICAgICAgICAgInRhZ3MiOiB7fSwNCiAgICAgICAgICAgICJ0eXBlIjogImF1dG9tbCIsDQogICAgICAgICAgICAib3V0cHV0cyI6IHt9LA0KICAgICAgICAgICAgImxvZ192ZXJib3NpdHkiOiAiaW5mbyIsDQogICAgICAgICAgICAibGltaXRzIjogeyJtYXhfdHJpYWxzIjogMX0sDQogICAgICAgICAgICAiZmVhdHVyaXphdGlvbiI6IHsibW9kZSI6ICJhdXRvIn0sDQogICAgICAgICAgICAidHJhaW5pbmciOiB7ImVuYWJsZV9zdGFja19lbnNlbWJsZSI6IEZhbHNlLCAiZW5hYmxlX3ZvdGVfZW5zZW1ibGUiOiBGYWxzZX0sDQogICAgICAgICAgICAidGFzayI6ICJmb3JlY2FzdGluZyIsDQogICAgICAgICAgICAiZm9yZWNhc3RpbmciOiB7ImZvcmVjYXN0X2hvcml6b24iOiAxMiwgInRpbWVfY29sdW1uX25hbWUiOiAiREFURSIsICJmcmVxdWVuY3kiOiAiTVMifSwNCiAgICAgICAgICAgICJwcmltYXJ5X21ldHJpYyI6ICJub3JtYWxpemVkX3Jvb3RfbWVhbl9zcXVhcmVkX2Vycm9yIiwNCiAgICAgICAgfQ0KDQogICAgZGVmIHRlc3RfYXV0b21sX3RleHRfY2xhc3NpZmljYXRpb25faW5fcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCk6DQogICAgICAgIEBkc2wucGlwZWxpbmUobmFtZT0idHJhaW5fYXV0b21sX3RleHRfY2xhc3NfaW5fcGlwZWxpbmUiKQ0KICAgICAgICBkZWYgdHJhaW5fYXV0b21sX3RleHRfY2xhc3NfaW5fcGlwZWxpbmUoDQogICAgICAgICAgICB0ZXh0X2NsYXNzaWZpY2F0aW9uX3RyYWluLA0KICAgICAgICAgICAgdGV4dF9jbGFzc2lmaWNhdGlvbl92YWxpZCwNCiAgICAgICAgKToNCiAgICAgICAgICAgIHRleHRfY2xhc3NpZmljYXRpb25fbm9kZSA9IHRleHRfY2xhc3NpZmljYXRpb24oDQogICAgICAgICAgICAgICAgdHJhaW5pbmdfZGF0YT10ZXh0X2NsYXNzaWZpY2F0aW9uX3RyYWluLA0KICAgICAgICAgICAgICAgIHZhbGlkYXRpb25fZGF0YT10ZXh0X2NsYXNzaWZpY2F0aW9uX3ZhbGlkLA0KICAgICAgICAgICAgICAgIHRhcmdldF9jb2x1bW5fbmFtZT0ieSIsDQogICAgICAgICAgICAgICAgcHJpbWFyeV9tZXRyaWM9ImFjY3VyYWN5IiwNCiAgICAgICAgICAgICAgICBmZWF0dXJpemF0aW9uPU5scEZlYXR1cml6YXRpb25TZXR0aW5ncyhkYXRhc2V0X2xhbmd1YWdlPSJlbmciKSwNCiAgICAgICAgICAgICkNCiAgICAgICAgICAgIHRleHRfY2xhc3NpZmljYXRpb25fbm9kZS5zZXRfbGltaXRzKG1heF9jb25jdXJyZW50X3RyaWFscz0xKQ0KDQogICAgICAgIHRleHRfY2xhc3NpZmljYXRpb25fdHJhaW4gPSBJbnB1dCgNCiAgICAgICAgICAgIHR5cGU9QXNzZXRUeXBlcy5NTFRBQkxFLA0KICAgICAgICAgICAgcGF0aD10ZXN0c19yb290X2RpciAvICJ0ZXN0X2NvbmZpZ3MvYXV0b21sX2pvYi90ZXN0X2RhdGFzZXRzL25ld3Nncm91cC90cmFpbiIsDQogICAgICAgICkNCiAgICAgICAgdGV4dF9jbGFzc2lmaWNhdGlvbl92YWxpZCA9IElucHV0KA0KICAgICAgICAgICAgdHlwZT1Bc3NldFR5cGVzLk1MVEFCTEUsDQogICAgICAgICAgICBwYXRoPXRlc3RzX3Jvb3RfZGlyIC8gInRlc3RfY29uZmlncy9hdXRvbWxfam9iL3Rlc3RfZGF0YXNldHMvbmV3c2dyb3VwL3ZhbGlkIiwNCiAgICAgICAgKQ0KDQogICAgICAgIHBpcGVsaW5lX2pvYjogUGlwZWxpbmVKb2IgPSB0cmFpbl9hdXRvbWxfdGV4dF9jbGFzc19pbl9waXBlbGluZSgNCiAgICAgICAgICAgIHRleHRfY2xhc3NpZmljYXRpb25fdHJhaW4sIHRleHRfY2xhc3NpZmljYXRpb25fdmFsaWQNCiAgICAgICAgKQ0KICAgICAgICBwaXBlbGluZV9qb2Iuc2V0dGluZ3MuZGVmYXVsdF9jb21wdXRlID0gR1BVX0NMVVNURVINCiAgICAgICAgZnJvbV9yZXN0X3BpcGVsaW5lX2pvYiA9IGNsaWVudC5qb2JzLmNyZWF0ZV9vcl91cGRhdGUocGlwZWxpbmVfam9iKQ0KICAgICAgICBjYW5jZWxfam9iKGNsaWVudCwgZnJvbV9yZXN0X3BpcGVsaW5lX2pvYikNCg0KICAgICAgICBhY3R1YWxfZGljdCA9IGZyb21fcmVzdF9waXBlbGluZV9qb2IuX3RvX3Jlc3Rfb2JqZWN0KCkuYXNfZGljdCgpDQogICAgICAgIGZpZWxkc190b19vbWl0ID0gWyJuYW1lIiwgImRpc3BsYXlfbmFtZSIsICJleHBlcmltZW50X25hbWUiLCAicHJvcGVydGllcyJdDQoNCiAgICAgICAgam9iX2RpY3QgPSBweWRhc2gub21pdChhY3R1YWxfZGljdFsicHJvcGVydGllcyJdWyJqb2JzIl1bInRleHRfY2xhc3NpZmljYXRpb25fbm9kZSJdLCBmaWVsZHNfdG9fb21pdCkNCiAgICAgICAgYXNzZXJ0IGpvYl9kaWN0ID09IHsNCiAgICAgICAgICAgICJ0cmFpbmluZ19kYXRhIjogIiR7e3BhcmVudC5pbnB1dHMudGV4dF9jbGFzc2lmaWNhdGlvbl90cmFpbn19IiwNCiAgICAgICAgICAgICJ2YWxpZGF0aW9uX2RhdGEiOiAiJHt7cGFyZW50LmlucHV0cy50ZXh0X2NsYXNzaWZpY2F0aW9uX3ZhbGlkfX0iLA0KICAgICAgICAgICAgInRhcmdldF9jb2x1bW5fbmFtZSI6ICJ5IiwNCiAgICAgICAgICAgICJ0YWdzIjoge30sDQogICAgICAgICAgICAidHlwZSI6ICJhdXRvbWwiLA0KICAgICAgICAgICAgIm91dHB1dHMiOiB7fSwNCiAgICAgICAgICAgICJsaW1pdHMiOiB7Im1heF90cmlhbHMiOiAxLCAibWF4X25vZGVzIjogMSwgIm1heF9jb25jdXJyZW50X3RyaWFscyI6IDF9LA0KICAgICAgICAgICAgImZlYXR1cml6YXRpb24iOiB7ImRhdGFzZXRfbGFuZ3VhZ2UiOiAiZW5nIn0sDQogICAgICAgICAgICAidGFzayI6ICJ0ZXh0X2NsYXNzaWZpY2F0aW9uIiwNCiAgICAgICAgICAgICJwcmltYXJ5X21ldHJpYyI6ICJhY2N1cmFjeSIsDQogICAgICAgIH0NCg0KICAgIGRlZiB0ZXN0X2F1dG9tbF90ZXh0X2NsYXNzaWZpY2F0aW9uX211bHRpbGFiZWxfaW5fcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCk6DQogICAgICAgIEBkc2wucGlwZWxpbmUobmFtZT0idHJhaW5fYXV0b21sX3RleHRfY2xhc3NfbXVsdGlsYWJlbF9pbl9waXBlbGluZSIpDQogICAgICAgIGRlZiB0cmFpbl9hdXRvbWxfdGV4dF9jbGFzc19tdWx0aWxhYmVsX2luX3BpcGVsaW5lKA0KICAgICAgICAgICAgdGV4dF9jbGFzc2lmaWNhdGlvbl9tdWx0aWxhYmVsX3RyYWluLA0KICAgICAgICAgICAgdGV4dF9jbGFzc2lmaWNhdGlvbl9tdWx0aWxhYmVsX3ZhbGlkLA0KICAgICAgICApOg0KICAgICAgICAgICAgdGV4dF9jbGFzc2lmaWNhdGlvbl9tdWx0aWxhYmVsX25vZGUgPSB0ZXh0X2NsYXNzaWZpY2F0aW9uX211bHRpbGFiZWwoDQogICAgICAgICAgICAgICAgdHJhaW5pbmdfZGF0YT10ZXh0X2NsYXNzaWZpY2F0aW9uX211bHRpbGFiZWxfdHJhaW4sDQogICAgICAgICAgICAgICAgdmFsaWRhdGlvbl9kYXRhPXRleHRfY2xhc3NpZmljYXRpb25fbXVsdGlsYWJlbF92YWxpZCwNCiAgICAgICAgICAgICAgICB0YXJnZXRfY29sdW1uX25hbWU9InRlcm1zIiwNCiAgICAgICAgICAgICAgICBwcmltYXJ5X21ldHJpYz0iYWNjdXJhY3kiLA0KICAgICAgICAgICAgKQ0KICAgICAgICAgICAgdGV4dF9jbGFzc2lmaWNhdGlvbl9tdWx0aWxhYmVsX25vZGUuc2V0X2xpbWl0cyhtYXhfY29uY3VycmVudF90cmlhbHM9MSkNCg0KICAgICAgICB0ZXh0X2NsYXNzaWZpY2F0aW9uX211bHRpbGFiZWxfdHJhaW4gPSBJbnB1dCgNCiAgICAgICAgICAgIHR5cGU9QXNzZXRUeXBlcy5NTFRBQkxFLA0KICAgICAgICAgICAgcGF0aD10ZXN0c19yb290X2RpciAvICJ0ZXN0X2NvbmZpZ3MvYXV0b21sX2pvYi90ZXN0X2RhdGFzZXRzL3BhcGVyX2NhdGVnb3JpemF0aW9uL3RyYWluIiwNCiAgICAgICAgKQ0KDQogICAgICAgIHRleHRfY2xhc3NpZmljYXRpb25fbXVsdGlsYWJlbF92YWxpZCA9IElucHV0KA0KICAgICAgICAgICAgdHlwZT1Bc3NldFR5cGVzLk1MVEFCTEUsDQogICAgICAgICAgICBwYXRoPXRlc3RzX3Jvb3RfZGlyIC8gInRlc3RfY29uZmlncy9hdXRvbWxfam9iL3Rlc3RfZGF0YXNldHMvcGFwZXJfY2F0ZWdvcml6YXRpb24vdmFsaWQiLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmVfam9iOiBQaXBlbGluZUpvYiA9IHRyYWluX2F1dG9tbF90ZXh0X2NsYXNzX211bHRpbGFiZWxfaW5fcGlwZWxpbmUoDQogICAgICAgICAgICB0ZXh0X2NsYXNzaWZpY2F0aW9uX211bHRpbGFiZWxfdHJhaW4sIHRleHRfY2xhc3NpZmljYXRpb25fbXVsdGlsYWJlbF92YWxpZA0KICAgICAgICApDQogICAgICAgIHBpcGVsaW5lX2pvYi5zZXR0aW5ncy5kZWZhdWx0X2NvbXB1dGUgPSBHUFVfQ0xVU1RFUg0KICAgICAgICBmcm9tX3Jlc3RfcGlwZWxpbmVfam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZV9qb2IpDQogICAgICAgIGNhbmNlbF9qb2IoY2xpZW50LCBmcm9tX3Jlc3RfcGlwZWxpbmVfam9iKQ0KDQogICAgICAgIGFjdHVhbF9kaWN0ID0gZnJvbV9yZXN0X3BpcGVsaW5lX2pvYi5fdG9fcmVzdF9vYmplY3QoKS5hc19kaWN0KCkNCiAgICAgICAgZmllbGRzX3RvX29taXQgPSBbIm5hbWUiLCAiZGlzcGxheV9uYW1lIiwgImV4cGVyaW1lbnRfbmFtZSIsICJwcm9wZXJ0aWVzIl0NCg0KICAgICAgICBqb2JfZGljdCA9IHB5ZGFzaC5vbWl0KGFjdHVhbF9kaWN0WyJwcm9wZXJ0aWVzIl1bImpvYnMiXVsidGV4dF9jbGFzc2lmaWNhdGlvbl9tdWx0aWxhYmVsX25vZGUiXSwgZmllbGRzX3RvX29taXQpDQogICAgICAgIGFzc2VydCBqb2JfZGljdCA9PSB7DQogICAgICAgICAgICAidHJhaW5pbmdfZGF0YSI6ICIke3twYXJlbnQuaW5wdXRzLnRleHRfY2xhc3NpZmljYXRpb25fbXVsdGlsYWJlbF90cmFpbn19IiwNCiAgICAgICAgICAgICJ2YWxpZGF0aW9uX2RhdGEiOiAiJHt7cGFyZW50LmlucHV0cy50ZXh0X2NsYXNzaWZpY2F0aW9uX211bHRpbGFiZWxfdmFsaWR9fSIsDQogICAgICAgICAgICAidGFyZ2V0X2NvbHVtbl9uYW1lIjogInRlcm1zIiwNCiAgICAgICAgICAgICJ0YWdzIjoge30sDQogICAgICAgICAgICAidHlwZSI6ICJhdXRvbWwiLA0KICAgICAgICAgICAgIm91dHB1dHMiOiB7fSwNCiAgICAgICAgICAgICJsaW1pdHMiOiB7Im1heF90cmlhbHMiOiAxLCAibWF4X25vZGVzIjogMSwgIm1heF9jb25jdXJyZW50X3RyaWFscyI6IDF9LA0KICAgICAgICAgICAgInRhc2siOiAidGV4dF9jbGFzc2lmaWNhdGlvbl9tdWx0aWxhYmVsIiwNCiAgICAgICAgICAgICJwcmltYXJ5X21ldHJpYyI6ICJhY2N1cmFjeSIsDQogICAgICAgIH0NCg0KICAgIGRlZiB0ZXN0X2F1dG9tbF90ZXh0X25lcl9pbl9waXBlbGluZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KToNCiAgICAgICAgQGRzbC5waXBlbGluZShuYW1lPSJ0cmFpbl9hdXRvbWxfdGV4dF9uZXJfaW5fcGlwZWxpbmUiKQ0KICAgICAgICBkZWYgdHJhaW5fYXV0b21sX3RleHRfbmVyX2luX3BpcGVsaW5lKA0KICAgICAgICAgICAgdGV4dF9uZXJfdHJhaW4sDQogICAgICAgICAgICB0ZXh0X25lcl92YWxpZCwNCiAgICAgICAgKToNCiAgICAgICAgICAgIHRleHRfbmVyX25vZGUgPSB0ZXh0X25lcigNCiAgICAgICAgICAgICAgICB0cmFpbmluZ19kYXRhPXRleHRfbmVyX3RyYWluLA0KICAgICAgICAgICAgICAgIHZhbGlkYXRpb25fZGF0YT10ZXh0X25lcl92YWxpZCwNCiAgICAgICAgICAgICAgICB0YXJnZXRfY29sdW1uX25hbWU9ImxhYmVsIiwNCiAgICAgICAgICAgICAgICBwcmltYXJ5X21ldHJpYz0iYWNjdXJhY3kiLA0KICAgICAgICAgICAgKQ0KICAgICAgICAgICAgdGV4dF9uZXJfbm9kZS5zZXRfbGltaXRzKG1heF9jb25jdXJyZW50X3RyaWFscz0xKQ0KDQogICAgICAgIHRleHRfbmVyX3RyYWluID0gSW5wdXQoDQogICAgICAgICAgICB0eXBlPUFzc2V0VHlwZXMuTUxUQUJMRSwNCiAgICAgICAgICAgIHBhdGg9dGVzdHNfcm9vdF9kaXIgLyAidGVzdF9jb25maWdzL2F1dG9tbF9qb2IvdGVzdF9kYXRhc2V0cy9jb25sbDIwMDMvdHJhaW4iLA0KICAgICAgICApDQogICAgICAgIHRleHRfbmVyX3ZhbGlkID0gSW5wdXQoDQogICAgICAgICAgICB0eXBlPUFzc2V0VHlwZXMuTUxUQUJMRSwNCiAgICAgICAgICAgIHBhdGg9dGVzdHNfcm9vdF9kaXIgLyAidGVzdF9jb25maWdzL2F1dG9tbF9qb2IvdGVzdF9kYXRhc2V0cy9jb25sbDIwMDMvdmFsaWQiLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmVfam9iOiBQaXBlbGluZUpvYiA9IHRyYWluX2F1dG9tbF90ZXh0X25lcl9pbl9waXBlbGluZSh0ZXh0X25lcl90cmFpbiwgdGV4dF9uZXJfdmFsaWQpDQogICAgICAgIHBpcGVsaW5lX2pvYi5zZXR0aW5ncy5kZWZhdWx0X2NvbXB1dGUgPSBHUFVfQ0xVU1RFUg0KICAgICAgICBmcm9tX3Jlc3RfcGlwZWxpbmVfam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZV9qb2IpDQogICAgICAgIGNhbmNlbF9qb2IoY2xpZW50LCBmcm9tX3Jlc3RfcGlwZWxpbmVfam9iKQ0KDQogICAgICAgIGFjdHVhbF9kaWN0ID0gZnJvbV9yZXN0X3BpcGVsaW5lX2pvYi5fdG9fcmVzdF9vYmplY3QoKS5hc19kaWN0KCkNCiAgICAgICAgZmllbGRzX3RvX29taXQgPSBbIm5hbWUiLCAiZGlzcGxheV9uYW1lIiwgImV4cGVyaW1lbnRfbmFtZSIsICJwcm9wZXJ0aWVzIl0NCg0KICAgICAgICBqb2JfZGljdCA9IHB5ZGFzaC5vbWl0KGFjdHVhbF9kaWN0WyJwcm9wZXJ0aWVzIl1bImpvYnMiXVsidGV4dF9uZXJfbm9kZSJdLCBmaWVsZHNfdG9fb21pdCkNCiAgICAgICAgYXNzZXJ0IGpvYl9kaWN0ID09IHsNCiAgICAgICAgICAgICJ0cmFpbmluZ19kYXRhIjogIiR7e3BhcmVudC5pbnB1dHMudGV4dF9uZXJfdHJhaW59fSIsDQogICAgICAgICAgICAidmFsaWRhdGlvbl9kYXRhIjogIiR7e3BhcmVudC5pbnB1dHMudGV4dF9uZXJfdmFsaWR9fSIsDQogICAgICAgICAgICAidGFyZ2V0X2NvbHVtbl9uYW1lIjogImxhYmVsIiwNCiAgICAgICAgICAgICJ0YWdzIjoge30sDQogICAgICAgICAgICAidHlwZSI6ICJhdXRvbWwiLA0KICAgICAgICAgICAgIm91dHB1dHMiOiB7fSwNCiAgICAgICAgICAgICJsaW1pdHMiOiB7Im1heF90cmlhbHMiOiAxLCAibWF4X25vZGVzIjogMSwgIm1heF9jb25jdXJyZW50X3RyaWFscyI6IDF9LA0KICAgICAgICAgICAgInRhc2siOiAidGV4dF9uZXIiLA0KICAgICAgICAgICAgInByaW1hcnlfbWV0cmljIjogImFjY3VyYWN5IiwNCiAgICAgICAgfQ0KDQogICAgZGVmIHRlc3RfYXV0b21sX3Zpc2lvbl9tdWx0aWNsYXNzX25vZGVfaW5fcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCk6DQogICAgICAgIEBkc2wucGlwZWxpbmUobmFtZT0idHJhaW5fbXVsdGljbGFzc193aXRoX2F1dG9tbF9pbl9waXBlbGluZSIpDQogICAgICAgIGRlZiB0cmFpbl9tdWx0aWNsYXNzX3dpdGhfYXV0b21sX2luX3BpcGVsaW5lKA0KICAgICAgICAgICAgaW1hZ2VfbXVsdGljbGFzc190cmFpbl9kYXRhLA0KICAgICAgICAgICAgaW1hZ2VfbXVsdGljbGFzc192YWxpZF9kYXRhLA0KICAgICAgICApOg0KICAgICAgICAgICAgaW1hZ2VfbXVsdGljbGFzc19ub2RlID0gYXV0b21sLmltYWdlX2NsYXNzaWZpY2F0aW9uKA0KICAgICAgICAgICAgICAgIHRyYWluaW5nX2RhdGE9aW1hZ2VfbXVsdGljbGFzc190cmFpbl9kYXRhLA0KICAgICAgICAgICAgICAgIHZhbGlkYXRpb25fZGF0YT1pbWFnZV9tdWx0aWNsYXNzX3ZhbGlkX2RhdGEsDQogICAgICAgICAgICAgICAgdGFyZ2V0X2NvbHVtbl9uYW1lPSJsYWJlbCIsDQogICAgICAgICAgICAgICAgcHJpbWFyeV9tZXRyaWM9IkFjY3VyYWN5IiwNCiAgICAgICAgICAgICkNCiAgICAgICAgICAgIGltYWdlX211bHRpY2xhc3Nfbm9kZS5zZXRfbGltaXRzKA0KICAgICAgICAgICAgICAgIHRpbWVvdXRfbWludXRlcz02MCwNCiAgICAgICAgICAgICkNCiAgICAgICAgICAgIGltYWdlX211bHRpY2xhc3Nfbm9kZS5leHRlbmRfc2VhcmNoX3NwYWNlKA0KICAgICAgICAgICAgICAgIFsNCiAgICAgICAgICAgICAgICAgICAgU2VhcmNoU3BhY2UoDQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbF9uYW1lPUNob2ljZShbInZpdHMxNnIyMjQiXSksDQogICAgICAgICAgICAgICAgICAgICAgICBsZWFybmluZ19yYXRlPVVuaWZvcm0oMC4wMDEsIDAuMDEpLA0KICAgICAgICAgICAgICAgICAgICApLA0KICAgICAgICAgICAgICAgICAgICBTZWFyY2hTcGFjZSgNCiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsX25hbWU9Q2hvaWNlKFsic2VyZXNuZXh0Il0pLA0KICAgICAgICAgICAgICAgICAgICAgICAgbGVhcm5pbmdfcmF0ZT1Vbmlmb3JtKDAuMDAxLCAwLjAxKSwNCiAgICAgICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICBdDQogICAgICAgICAgICApDQogICAgICAgICAgICBpbWFnZV9tdWx0aWNsYXNzX25vZGUuc2V0X3N3ZWVwKA0KICAgICAgICAgICAgICAgIHNhbXBsaW5nX2FsZ29yaXRobT0iUmFuZG9tIiwNCiAgICAgICAgICAgICAgICBlYXJseV90ZXJtaW5hdGlvbj1CYW5kaXRQb2xpY3koZXZhbHVhdGlvbl9pbnRlcnZhbD0yLCBzbGFja19mYWN0b3I9MC4yLCBkZWxheV9ldmFsdWF0aW9uPTYpLA0KICAgICAgICAgICAgKQ0KICAgICAgICAgICAgaW1hZ2VfbXVsdGljbGFzc19ub2RlLnNldF9saW1pdHMoDQogICAgICAgICAgICAgICAgbWF4X3RyaWFscz0xLA0KICAgICAgICAgICAgICAgIG1heF9jb25jdXJyZW50X3RyaWFscz0xLA0KICAgICAgICAgICAgKQ0KDQogICAgICAgIG11bHRpY2xhc3NfdHJhaW4gPSBJbnB1dCgNCiAgICAgICAgICAgIHR5cGU9QXNzZXRUeXBlcy5NTFRBQkxFLA0KICAgICAgICAgICAgcGF0aD10ZXN0c19yb290X2RpciAvICJ0ZXN0X2NvbmZpZ3MvYXV0b21sX2pvYi90ZXN0X2RhdGFzZXRzL2ltYWdlX2NsYXNzaWZpY2F0aW9uL3RyYWluIiwNCiAgICAgICAgKQ0KICAgICAgICBtdWx0aWNsYXNzX3ZhbGlkID0gSW5wdXQoDQogICAgICAgICAgICB0eXBlPUFzc2V0VHlwZXMuTUxUQUJMRSwNCiAgICAgICAgICAgIHBhdGg9dGVzdHNfcm9vdF9kaXIgLyAidGVzdF9jb25maWdzL2F1dG9tbF9qb2IvdGVzdF9kYXRhc2V0cy9pbWFnZV9jbGFzc2lmaWNhdGlvbi92YWxpZCIsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZV9qb2I6IFBpcGVsaW5lSm9iID0gdHJhaW5fbXVsdGljbGFzc193aXRoX2F1dG9tbF9pbl9waXBlbGluZShtdWx0aWNsYXNzX3RyYWluLCBtdWx0aWNsYXNzX3ZhbGlkKQ0KICAgICAgICBwaXBlbGluZV9qb2Iuc2V0dGluZ3MuZGVmYXVsdF9jb21wdXRlID0gR1BVX0NMVVNURVINCg0KICAgICAgICBmcm9tX3Jlc3RfcGlwZWxpbmVfam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZV9qb2IpDQogICAgICAgIGNhbmNlbF9qb2IoY2xpZW50LCBmcm9tX3Jlc3RfcGlwZWxpbmVfam9iKQ0KDQogICAgICAgIGFjdHVhbF9kaWN0ID0gZnJvbV9yZXN0X3BpcGVsaW5lX2pvYi5fdG9fcmVzdF9vYmplY3QoKS5hc19kaWN0KCkNCiAgICAgICAgZmllbGRzX3RvX29taXQgPSBbIm5hbWUiLCAiZGlzcGxheV9uYW1lIiwgImV4cGVyaW1lbnRfbmFtZSIsICJwcm9wZXJ0aWVzIl0NCg0KICAgICAgICBpbWFnZV9tdWx0aWNsYXNzX2RpY3QgPSBweWRhc2gub21pdChhY3R1YWxfZGljdFsicHJvcGVydGllcyJdWyJqb2JzIl1bImltYWdlX211bHRpY2xhc3Nfbm9kZSJdLCBmaWVsZHNfdG9fb21pdCkNCiAgICAgICAgYXNzZXJ0IGltYWdlX211bHRpY2xhc3NfZGljdCA9PSB7DQogICAgICAgICAgICAibGltaXRzIjogeyJtYXhfY29uY3VycmVudF90cmlhbHMiOiAxLCAibWF4X3RyaWFscyI6IDEsICJ0aW1lb3V0X21pbnV0ZXMiOiA2MH0sDQogICAgICAgICAgICAibG9nX3ZlcmJvc2l0eSI6ICJpbmZvIiwNCiAgICAgICAgICAgICJvdXRwdXRzIjoge30sDQogICAgICAgICAgICAicHJpbWFyeV9tZXRyaWMiOiAiYWNjdXJhY3kiLA0KICAgICAgICAgICAgInRhZ3MiOiB7fSwNCiAgICAgICAgICAgICJ0YXJnZXRfY29sdW1uX25hbWUiOiAibGFiZWwiLA0KICAgICAgICAgICAgInRhc2siOiAiaW1hZ2VfY2xhc3NpZmljYXRpb24iLA0KICAgICAgICAgICAgInRyYWluaW5nX2RhdGEiOiAiJHt7cGFyZW50LmlucHV0cy5pbWFnZV9tdWx0aWNsYXNzX3RyYWluX2RhdGF9fSIsDQogICAgICAgICAgICAidHlwZSI6ICJhdXRvbWwiLA0KICAgICAgICAgICAgInZhbGlkYXRpb25fZGF0YSI6ICIke3twYXJlbnQuaW5wdXRzLmltYWdlX211bHRpY2xhc3NfdmFsaWRfZGF0YX19IiwNCiAgICAgICAgICAgICJzd2VlcCI6IHsNCiAgICAgICAgICAgICAgICAic2FtcGxpbmdfYWxnb3JpdGhtIjogInJhbmRvbSIsDQogICAgICAgICAgICAgICAgImVhcmx5X3Rlcm1pbmF0aW9uIjogew0KICAgICAgICAgICAgICAgICAgICAiZXZhbHVhdGlvbl9pbnRlcnZhbCI6IDIsDQogICAgICAgICAgICAgICAgICAgICJkZWxheV9ldmFsdWF0aW9uIjogNiwNCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYmFuZGl0IiwNCiAgICAgICAgICAgICAgICAgICAgInNsYWNrX2ZhY3RvciI6IDAuMiwNCiAgICAgICAgICAgICAgICAgICAgInNsYWNrX2Ftb3VudCI6IDAuMCwNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICJzZWFyY2hfc3BhY2UiOiBbDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAibGVhcm5pbmdfcmF0ZSI6ICJ1bmlmb3JtKDAuMDAxLDAuMDEpIiwNCiAgICAgICAgICAgICAgICAgICAgIm1vZGVsX25hbWUiOiAiY2hvaWNlKCd2aXRzMTZyMjI0JykiLA0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAibGVhcm5pbmdfcmF0ZSI6ICJ1bmlmb3JtKDAuMDAxLDAuMDEpIiwNCiAgICAgICAgICAgICAgICAgICAgIm1vZGVsX25hbWUiOiAiY2hvaWNlKCdzZXJlc25leHQnKSIsDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIF0sDQogICAgICAgIH0NCg0KICAgIGRlZiB0ZXN0X2F1dG9tbF92aXNpb25fbXVsdGlsYWJlbF9ub2RlX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpOg0KICAgICAgICBAZHNsLnBpcGVsaW5lKG5hbWU9InRyYWluX211bHRpbGFiZWxfd2l0aF9hdXRvbWxfaW5fcGlwZWxpbmUiKQ0KICAgICAgICBkZWYgdHJhaW5fbXVsdGlsYWJlbF93aXRoX2F1dG9tbF9pbl9waXBlbGluZSgNCiAgICAgICAgICAgIGltYWdlX211bHRpbGFiZWxfdHJhaW5fZGF0YSwNCiAgICAgICAgICAgIGltYWdlX211bHRpbGFiZWxfdmFsaWRfZGF0YSwNCiAgICAgICAgKToNCiAgICAgICAgICAgIGltYWdlX211bHRpbGFiZWxfbm9kZSA9IGF1dG9tbC5pbWFnZV9jbGFzc2lmaWNhdGlvbl9tdWx0aWxhYmVsKA0KICAgICAgICAgICAgICAgIHRyYWluaW5nX2RhdGE9aW1hZ2VfbXVsdGlsYWJlbF90cmFpbl9kYXRhLA0KICAgICAgICAgICAgICAgIHZhbGlkYXRpb25fZGF0YT1pbWFnZV9tdWx0aWxhYmVsX3ZhbGlkX2RhdGEsDQogICAgICAgICAgICAgICAgdGFyZ2V0X2NvbHVtbl9uYW1lPSJsYWJlbCIsDQogICAgICAgICAgICAgICAgcHJpbWFyeV9tZXRyaWM9ImlvdSIsDQogICAgICAgICAgICApDQogICAgICAgICAgICBpbWFnZV9tdWx0aWxhYmVsX25vZGUuc2V0X2xpbWl0cygNCiAgICAgICAgICAgICAgICB0aW1lb3V0X21pbnV0ZXM9NjAsDQogICAgICAgICAgICApDQogICAgICAgICAgICBpbWFnZV9tdWx0aWxhYmVsX25vZGUuZXh0ZW5kX3NlYXJjaF9zcGFjZSgNCiAgICAgICAgICAgICAgICBbDQogICAgICAgICAgICAgICAgICAgIFNlYXJjaFNwYWNlKA0KICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxfbmFtZT1DaG9pY2UoWyJ2aXRiMTZyMjI0Il0pLA0KICAgICAgICAgICAgICAgICAgICAgICAgbGVhcm5pbmdfcmF0ZT1Vbmlmb3JtKDAuMDAxLCAwLjAxKSwNCiAgICAgICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICAgICAgICAgU2VhcmNoU3BhY2UoDQogICAgICAgICAgICAgICAgICAgICAgICBtb2RlbF9uYW1lPUNob2ljZShbInNlcmVzbmV4dCJdKSwNCiAgICAgICAgICAgICAgICAgICAgICAgIGxlYXJuaW5nX3JhdGU9VW5pZm9ybSgwLjAwMSwgMC4wMSksDQogICAgICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgXQ0KICAgICAgICAgICAgKQ0KICAgICAgICAgICAgaW1hZ2VfbXVsdGlsYWJlbF9ub2RlLnNldF9zd2VlcCgNCiAgICAgICAgICAgICAgICBzYW1wbGluZ19hbGdvcml0aG09IlJhbmRvbSIsDQogICAgICAgICAgICAgICAgZWFybHlfdGVybWluYXRpb249QmFuZGl0UG9saWN5KGV2YWx1YXRpb25faW50ZXJ2YWw9Miwgc2xhY2tfZmFjdG9yPTAuMiwgZGVsYXlfZXZhbHVhdGlvbj02KSwNCiAgICAgICAgICAgICkNCiAgICAgICAgICAgIGltYWdlX211bHRpbGFiZWxfbm9kZS5zZXRfbGltaXRzKA0KICAgICAgICAgICAgICAgIG1heF90cmlhbHM9MSwNCiAgICAgICAgICAgICAgICBtYXhfY29uY3VycmVudF90cmlhbHM9MSwNCiAgICAgICAgICAgICkNCg0KICAgICAgICBtdWx0aWxhYmVsX3RyYWluID0gSW5wdXQoDQogICAgICAgICAgICB0eXBlPUFzc2V0VHlwZXMuTUxUQUJMRSwNCiAgICAgICAgICAgIHBhdGg9dGVzdHNfcm9vdF9kaXIgLyAidGVzdF9jb25maWdzL2F1dG9tbF9qb2IvdGVzdF9kYXRhc2V0cy9pbWFnZV9jbGFzc2lmaWNhdGlvbl9tdWx0aWxhYmVsL3RyYWluIiwNCiAgICAgICAgKQ0KICAgICAgICBtdWx0aWxhYmVsX3ZhbGlkID0gSW5wdXQoDQogICAgICAgICAgICB0eXBlPUFzc2V0VHlwZXMuTUxUQUJMRSwNCiAgICAgICAgICAgIHBhdGg9dGVzdHNfcm9vdF9kaXIgLyAidGVzdF9jb25maWdzL2F1dG9tbF9qb2IvdGVzdF9kYXRhc2V0cy9pbWFnZV9jbGFzc2lmaWNhdGlvbl9tdWx0aWxhYmVsL3ZhbGlkIiwNCiAgICAgICAgKQ0KDQogICAgICAgIHBpcGVsaW5lX2pvYjogUGlwZWxpbmVKb2IgPSB0cmFpbl9tdWx0aWxhYmVsX3dpdGhfYXV0b21sX2luX3BpcGVsaW5lKG11bHRpbGFiZWxfdHJhaW4sIG11bHRpbGFiZWxfdmFsaWQpDQogICAgICAgIHBpcGVsaW5lX2pvYi5zZXR0aW5ncy5kZWZhdWx0X2NvbXB1dGUgPSBHUFVfQ0xVU1RFUg0KDQogICAgICAgIGZyb21fcmVzdF9waXBlbGluZV9qb2IgPSBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKHBpcGVsaW5lX2pvYikNCiAgICAgICAgY2FuY2VsX2pvYihjbGllbnQsIGZyb21fcmVzdF9waXBlbGluZV9qb2IpDQoNCiAgICAgICAgYWN0dWFsX2RpY3QgPSBmcm9tX3Jlc3RfcGlwZWxpbmVfam9iLl90b19yZXN0X29iamVjdCgpLmFzX2RpY3QoKQ0KICAgICAgICBmaWVsZHNfdG9fb21pdCA9IFsibmFtZSIsICJkaXNwbGF5X25hbWUiLCAiZXhwZXJpbWVudF9uYW1lIiwgInByb3BlcnRpZXMiXQ0KDQogICAgICAgIGltYWdlX211bHRpbGFiZWxfZGljdCA9IHB5ZGFzaC5vbWl0KGFjdHVhbF9kaWN0WyJwcm9wZXJ0aWVzIl1bImpvYnMiXVsiaW1hZ2VfbXVsdGlsYWJlbF9ub2RlIl0sIGZpZWxkc190b19vbWl0KQ0KICAgICAgICBhc3NlcnQgaW1hZ2VfbXVsdGlsYWJlbF9kaWN0ID09IHsNCiAgICAgICAgICAgICJsaW1pdHMiOiB7Im1heF9jb25jdXJyZW50X3RyaWFscyI6IDEsICJtYXhfdHJpYWxzIjogMSwgInRpbWVvdXRfbWludXRlcyI6IDYwfSwNCiAgICAgICAgICAgICJsb2dfdmVyYm9zaXR5IjogImluZm8iLA0KICAgICAgICAgICAgIm91dHB1dHMiOiB7fSwNCiAgICAgICAgICAgICJwcmltYXJ5X21ldHJpYyI6ICJpb3UiLA0KICAgICAgICAgICAgInRhZ3MiOiB7fSwNCiAgICAgICAgICAgICJ0YXJnZXRfY29sdW1uX25hbWUiOiAibGFiZWwiLA0KICAgICAgICAgICAgInRhc2siOiAiaW1hZ2VfY2xhc3NpZmljYXRpb25fbXVsdGlsYWJlbCIsDQogICAgICAgICAgICAidHJhaW5pbmdfZGF0YSI6ICIke3twYXJlbnQuaW5wdXRzLmltYWdlX211bHRpbGFiZWxfdHJhaW5fZGF0YX19IiwNCiAgICAgICAgICAgICJ0eXBlIjogImF1dG9tbCIsDQogICAgICAgICAgICAidmFsaWRhdGlvbl9kYXRhIjogIiR7e3BhcmVudC5pbnB1dHMuaW1hZ2VfbXVsdGlsYWJlbF92YWxpZF9kYXRhfX0iLA0KICAgICAgICAgICAgInN3ZWVwIjogew0KICAgICAgICAgICAgICAgICJzYW1wbGluZ19hbGdvcml0aG0iOiAicmFuZG9tIiwNCiAgICAgICAgICAgICAgICAiZWFybHlfdGVybWluYXRpb24iOiB7DQogICAgICAgICAgICAgICAgICAgICJldmFsdWF0aW9uX2ludGVydmFsIjogMiwNCiAgICAgICAgICAgICAgICAgICAgImRlbGF5X2V2YWx1YXRpb24iOiA2LA0KICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJiYW5kaXQiLA0KICAgICAgICAgICAgICAgICAgICAic2xhY2tfZmFjdG9yIjogMC4yLA0KICAgICAgICAgICAgICAgICAgICAic2xhY2tfYW1vdW50IjogMC4wLA0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgInNlYXJjaF9zcGFjZSI6IFsNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICJtb2RlbF9uYW1lIjogImNob2ljZSgndml0YjE2cjIyNCcpIiwNCiAgICAgICAgICAgICAgICAgICAgImxlYXJuaW5nX3JhdGUiOiAidW5pZm9ybSgwLjAwMSwwLjAxKSIsDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICJtb2RlbF9uYW1lIjogImNob2ljZSgnc2VyZXNuZXh0JykiLA0KICAgICAgICAgICAgICAgICAgICAibGVhcm5pbmdfcmF0ZSI6ICJ1bmlmb3JtKDAuMDAxLDAuMDEpIiwNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgXSwNCiAgICAgICAgfQ0KDQogICAgZGVmIHRlc3RfYXV0b21sX3Zpc2lvbl9vZF9ub2RlX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpOg0KICAgICAgICBAZHNsLnBpcGVsaW5lKG5hbWU9InRyYWluX29kX3dpdGhfYXV0b21sX2luX3BpcGVsaW5lIikNCiAgICAgICAgZGVmIHRyYWluX29kX3dpdGhfYXV0b21sX2luX3BpcGVsaW5lKA0KICAgICAgICAgICAgaW1hZ2Vfb2JqZWN0X2RldGVjdGlvbl90cmFpbl9kYXRhLA0KICAgICAgICAgICAgaW1hZ2Vfb2JqZWN0X2RldGVjdGlvbl92YWxpZF9kYXRhLA0KICAgICAgICApOg0KICAgICAgICAgICAgaW1hZ2Vfb2JqZWN0X2RldGVjdGlvbl9ub2RlID0gYXV0b21sLmltYWdlX29iamVjdF9kZXRlY3Rpb24oDQogICAgICAgICAgICAgICAgdHJhaW5pbmdfZGF0YT1pbWFnZV9vYmplY3RfZGV0ZWN0aW9uX3RyYWluX2RhdGEsDQogICAgICAgICAgICAgICAgdmFsaWRhdGlvbl9kYXRhPWltYWdlX29iamVjdF9kZXRlY3Rpb25fdmFsaWRfZGF0YSwNCiAgICAgICAgICAgICAgICB0YXJnZXRfY29sdW1uX25hbWU9ImxhYmVsIiwNCiAgICAgICAgICAgICAgICBwcmltYXJ5X21ldHJpYz0iTWVhbkF2ZXJhZ2VQcmVjaXNpb24iLA0KICAgICAgICAgICAgKQ0KDQogICAgICAgICAgICBpbWFnZV9vYmplY3RfZGV0ZWN0aW9uX25vZGUuZXh0ZW5kX3NlYXJjaF9zcGFjZSgNCiAgICAgICAgICAgICAgICBbDQogICAgICAgICAgICAgICAgICAgIFNlYXJjaFNwYWNlKA0KICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxfbmFtZT1DaG9pY2UoWyJ5b2xvdjUiXSksDQogICAgICAgICAgICAgICAgICAgICAgICBsZWFybmluZ19yYXRlPVVuaWZvcm0oMC4wMDAxLCAwLjAxKSwNCiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsX3NpemU9Q2hvaWNlKFsic21hbGwiLCAibWVkaXVtIl0pLCAgIyBtb2RlbC1zcGVjaWZpYw0KICAgICAgICAgICAgICAgICAgICApLA0KICAgICAgICAgICAgICAgICAgICBTZWFyY2hTcGFjZSgNCiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsX25hbWU9Q2hvaWNlKFsiZmFzdGVycmNubl9yZXNuZXQ1MF9mcG4iXSksDQogICAgICAgICAgICAgICAgICAgICAgICBsZWFybmluZ19yYXRlPVVuaWZvcm0oMC4wMDAxLCAwLjAwMSksDQogICAgICAgICAgICAgICAgICAgICAgICBvcHRpbWl6ZXI9Q2hvaWNlKFsic2dkIiwgImFkYW0iLCAiYWRhbXciXSksDQogICAgICAgICAgICAgICAgICAgICAgICBtaW5fc2l6ZT1DaG9pY2UoWzYwMCwgODAwXSksICAjIG1vZGVsLXNwZWNpZmljDQogICAgICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgXQ0KICAgICAgICAgICAgKQ0KICAgICAgICAgICAgaW1hZ2Vfb2JqZWN0X2RldGVjdGlvbl9ub2RlLnNldF90cmFpbmluZ19wYXJhbWV0ZXJzKG5tc19pb3VfdGhyZXNob2xkPTAuNykNCiAgICAgICAgICAgIGltYWdlX29iamVjdF9kZXRlY3Rpb25fbm9kZS5zZXRfbGltaXRzKA0KICAgICAgICAgICAgICAgIHRpbWVvdXRfbWludXRlcz02MCwNCiAgICAgICAgICAgICkNCiAgICAgICAgICAgIGltYWdlX29iamVjdF9kZXRlY3Rpb25fbm9kZS5zZXRfc3dlZXAoDQogICAgICAgICAgICAgICAgc2FtcGxpbmdfYWxnb3JpdGhtPSJSYW5kb20iLA0KICAgICAgICAgICAgICAgIGVhcmx5X3Rlcm1pbmF0aW9uPUJhbmRpdFBvbGljeShldmFsdWF0aW9uX2ludGVydmFsPTIsIHNsYWNrX2ZhY3Rvcj0wLjIsIGRlbGF5X2V2YWx1YXRpb249NiksDQogICAgICAgICAgICApDQogICAgICAgICAgICBpbWFnZV9vYmplY3RfZGV0ZWN0aW9uX25vZGUuc2V0X2xpbWl0cygNCiAgICAgICAgICAgICAgICBtYXhfdHJpYWxzPTEsDQogICAgICAgICAgICAgICAgbWF4X2NvbmN1cnJlbnRfdHJpYWxzPTEsDQogICAgICAgICAgICApDQoNCiAgICAgICAgb2JqZWN0X2RldGVjdGlvbl90cmFpbiA9IElucHV0KA0KICAgICAgICAgICAgdHlwZT1Bc3NldFR5cGVzLk1MVEFCTEUsDQogICAgICAgICAgICBwYXRoPXRlc3RzX3Jvb3RfZGlyIC8gInRlc3RfY29uZmlncy9hdXRvbWxfam9iL3Rlc3RfZGF0YXNldHMvaW1hZ2Vfb2JqZWN0X2RldGVjdGlvbi90cmFpbiIsDQogICAgICAgICkNCiAgICAgICAgb2JqZWN0X2RldGVjdGlvbl92YWxpZCA9IElucHV0KA0KICAgICAgICAgICAgdHlwZT1Bc3NldFR5cGVzLk1MVEFCTEUsDQogICAgICAgICAgICBwYXRoPXRlc3RzX3Jvb3RfZGlyIC8gInRlc3RfY29uZmlncy9hdXRvbWxfam9iL3Rlc3RfZGF0YXNldHMvaW1hZ2Vfb2JqZWN0X2RldGVjdGlvbi92YWxpZCIsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZV9qb2I6IFBpcGVsaW5lSm9iID0gdHJhaW5fb2Rfd2l0aF9hdXRvbWxfaW5fcGlwZWxpbmUob2JqZWN0X2RldGVjdGlvbl90cmFpbiwgb2JqZWN0X2RldGVjdGlvbl92YWxpZCkNCiAgICAgICAgcGlwZWxpbmVfam9iLnNldHRpbmdzLmRlZmF1bHRfY29tcHV0ZSA9IEdQVV9DTFVTVEVSDQoNCiAgICAgICAgZnJvbV9yZXN0X3BpcGVsaW5lX2pvYiA9IGNsaWVudC5qb2JzLmNyZWF0ZV9vcl91cGRhdGUocGlwZWxpbmVfam9iKQ0KICAgICAgICBjYW5jZWxfam9iKGNsaWVudCwgZnJvbV9yZXN0X3BpcGVsaW5lX2pvYikNCg0KICAgICAgICBhY3R1YWxfZGljdCA9IGZyb21fcmVzdF9waXBlbGluZV9qb2IuX3RvX3Jlc3Rfb2JqZWN0KCkuYXNfZGljdCgpDQogICAgICAgIGZpZWxkc190b19vbWl0ID0gWyJuYW1lIiwgImRpc3BsYXlfbmFtZSIsICJleHBlcmltZW50X25hbWUiLCAicHJvcGVydGllcyJdDQoNCiAgICAgICAgaW1hZ2Vfb2JqZWN0X2RldGVjdGlvbl9kaWN0ID0gcHlkYXNoLm9taXQoDQogICAgICAgICAgICBhY3R1YWxfZGljdFsicHJvcGVydGllcyJdWyJqb2JzIl1bImltYWdlX29iamVjdF9kZXRlY3Rpb25fbm9kZSJdLCBmaWVsZHNfdG9fb21pdA0KICAgICAgICApDQogICAgICAgIGFzc2VydCBpbWFnZV9vYmplY3RfZGV0ZWN0aW9uX2RpY3QgPT0gew0KICAgICAgICAgICAgImxpbWl0cyI6IHsibWF4X2NvbmN1cnJlbnRfdHJpYWxzIjogMSwgIm1heF90cmlhbHMiOiAxLCAidGltZW91dF9taW51dGVzIjogNjB9LA0KICAgICAgICAgICAgImxvZ192ZXJib3NpdHkiOiAiaW5mbyIsDQogICAgICAgICAgICAib3V0cHV0cyI6IHt9LA0KICAgICAgICAgICAgInByaW1hcnlfbWV0cmljIjogIm1lYW5fYXZlcmFnZV9wcmVjaXNpb24iLA0KICAgICAgICAgICAgInRhZ3MiOiB7fSwNCiAgICAgICAgICAgICJ0YXJnZXRfY29sdW1uX25hbWUiOiAibGFiZWwiLA0KICAgICAgICAgICAgInRhc2siOiAiaW1hZ2Vfb2JqZWN0X2RldGVjdGlvbiIsDQogICAgICAgICAgICAidHJhaW5pbmdfZGF0YSI6ICIke3twYXJlbnQuaW5wdXRzLmltYWdlX29iamVjdF9kZXRlY3Rpb25fdHJhaW5fZGF0YX19IiwNCiAgICAgICAgICAgICJ0eXBlIjogImF1dG9tbCIsDQogICAgICAgICAgICAidmFsaWRhdGlvbl9kYXRhIjogIiR7e3BhcmVudC5pbnB1dHMuaW1hZ2Vfb2JqZWN0X2RldGVjdGlvbl92YWxpZF9kYXRhfX0iLA0KICAgICAgICAgICAgInRyYWluaW5nX3BhcmFtZXRlcnMiOiB7Im5tc19pb3VfdGhyZXNob2xkIjogMC43fSwNCiAgICAgICAgICAgICJzd2VlcCI6IHsNCiAgICAgICAgICAgICAgICAic2FtcGxpbmdfYWxnb3JpdGhtIjogInJhbmRvbSIsDQogICAgICAgICAgICAgICAgImVhcmx5X3Rlcm1pbmF0aW9uIjogew0KICAgICAgICAgICAgICAgICAgICAiZXZhbHVhdGlvbl9pbnRlcnZhbCI6IDIsDQogICAgICAgICAgICAgICAgICAgICJkZWxheV9ldmFsdWF0aW9uIjogNiwNCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYmFuZGl0IiwNCiAgICAgICAgICAgICAgICAgICAgInNsYWNrX2ZhY3RvciI6IDAuMiwNCiAgICAgICAgICAgICAgICAgICAgInNsYWNrX2Ftb3VudCI6IDAuMCwNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICJzZWFyY2hfc3BhY2UiOiBbDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAibGVhcm5pbmdfcmF0ZSI6ICJ1bmlmb3JtKDAuMDAwMSwwLjAxKSIsDQogICAgICAgICAgICAgICAgICAgICJtb2RlbF9uYW1lIjogImNob2ljZSgneW9sb3Y1JykiLA0KICAgICAgICAgICAgICAgICAgICAibW9kZWxfc2l6ZSI6ICJjaG9pY2UoJ3NtYWxsJywnbWVkaXVtJykiLA0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAibGVhcm5pbmdfcmF0ZSI6ICJ1bmlmb3JtKDAuMDAwMSwwLjAwMSkiLA0KICAgICAgICAgICAgICAgICAgICAibWluX3NpemUiOiAiY2hvaWNlKDYwMCw4MDApIiwNCiAgICAgICAgICAgICAgICAgICAgIm1vZGVsX25hbWUiOiAiY2hvaWNlKCdmYXN0ZXJyY25uX3Jlc25ldDUwX2ZwbicpIiwNCiAgICAgICAgICAgICAgICAgICAgIm9wdGltaXplciI6ICJjaG9pY2UoJ3NnZCcsJ2FkYW0nLCdhZGFtdycpIiwNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgXSwNCiAgICAgICAgfQ0KDQogICAgZGVmIHRlc3RfYXV0b21sX3Zpc2lvbl9zZWdtZW50YXRpb25fbm9kZV9pbl9waXBlbGluZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KToNCiAgICAgICAgQGRzbC5waXBlbGluZShuYW1lPSJ0cmFpbl93aXRoX2F1dG9tbF9pbl9waXBlbGluZSIpDQogICAgICAgIGRlZiB0cmFpbl9zZWdtZW50YXRpb25fd2l0aF9hdXRvbWxfaW5fcGlwZWxpbmUoDQogICAgICAgICAgICBpbWFnZV9pbnN0YW5jZV9zZWdtZW50YXRpb25fdHJhaW5fZGF0YSwNCiAgICAgICAgICAgIGltYWdlX2luc3RhbmNlX3NlZ21lbnRhdGlvbl92YWxpZF9kYXRhLA0KICAgICAgICApOg0KDQogICAgICAgICAgICBpbWFnZV9pbnN0YW5jZV9zZWdtZW50YXRpb25fbm9kZSA9IGF1dG9tbC5pbWFnZV9pbnN0YW5jZV9zZWdtZW50YXRpb24oDQogICAgICAgICAgICAgICAgcHJpbWFyeV9tZXRyaWM9Ik1lYW5BdmVyYWdlUHJlY2lzaW9uIiwNCiAgICAgICAgICAgICAgICB0YXJnZXRfY29sdW1uX25hbWU9ImxhYmVsIiwNCiAgICAgICAgICAgICAgICB0cmFpbmluZ19kYXRhPWltYWdlX2luc3RhbmNlX3NlZ21lbnRhdGlvbl90cmFpbl9kYXRhLA0KICAgICAgICAgICAgICAgIHZhbGlkYXRpb25fZGF0YT1pbWFnZV9pbnN0YW5jZV9zZWdtZW50YXRpb25fdmFsaWRfZGF0YSwNCiAgICAgICAgICAgICkNCiAgICAgICAgICAgIGltYWdlX2luc3RhbmNlX3NlZ21lbnRhdGlvbl9ub2RlLnNldF9saW1pdHMoDQogICAgICAgICAgICAgICAgdGltZW91dF9taW51dGVzPTYwLA0KICAgICAgICAgICAgKQ0KICAgICAgICAgICAgaW1hZ2VfaW5zdGFuY2Vfc2VnbWVudGF0aW9uX25vZGUuc2V0X3RyYWluaW5nX3BhcmFtZXRlcnMobm1zX2lvdV90aHJlc2hvbGQ9MC43KQ0KICAgICAgICAgICAgaW1hZ2VfaW5zdGFuY2Vfc2VnbWVudGF0aW9uX25vZGUuZXh0ZW5kX3NlYXJjaF9zcGFjZSgNCiAgICAgICAgICAgICAgICBbDQogICAgICAgICAgICAgICAgICAgIFNlYXJjaFNwYWNlKA0KICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxfbmFtZT1DaG9pY2UoWyJtYXNrcmNubl9yZXNuZXQ1MF9mcG4iXSksDQogICAgICAgICAgICAgICAgICAgICAgICBsZWFybmluZ19yYXRlPVVuaWZvcm0oMC4wMDAxLCAwLjAwMSksDQogICAgICAgICAgICAgICAgICAgICAgICBvcHRpbWl6ZXI9Q2hvaWNlKFsic2dkIiwgImFkYW0iLCAiYWRhbXciXSksDQogICAgICAgICAgICAgICAgICAgICAgICBtaW5fc2l6ZT1DaG9pY2UoWzYwMCwgODAwXSksDQogICAgICAgICAgICAgICAgICAgICksDQogICAgICAgICAgICAgICAgXQ0KICAgICAgICAgICAgKQ0KDQogICAgICAgICAgICBpbWFnZV9pbnN0YW5jZV9zZWdtZW50YXRpb25fbm9kZS5zZXRfc3dlZXAoDQogICAgICAgICAgICAgICAgc2FtcGxpbmdfYWxnb3JpdGhtPSJSYW5kb20iLA0KICAgICAgICAgICAgICAgIGVhcmx5X3Rlcm1pbmF0aW9uPUJhbmRpdFBvbGljeShldmFsdWF0aW9uX2ludGVydmFsPTIsIHNsYWNrX2ZhY3Rvcj0wLjIsIGRlbGF5X2V2YWx1YXRpb249NiksDQogICAgICAgICAgICApDQogICAgICAgICAgICBpbWFnZV9pbnN0YW5jZV9zZWdtZW50YXRpb25fbm9kZS5zZXRfbGltaXRzKA0KICAgICAgICAgICAgICAgIG1heF90cmlhbHM9MTAsDQogICAgICAgICAgICAgICAgbWF4X2NvbmN1cnJlbnRfdHJpYWxzPTIsDQogICAgICAgICAgICApDQoNCiAgICAgICAgaW5zdGFuY2Vfc2VnbWVudGF0aW9uX3RyYWluID0gSW5wdXQoDQogICAgICAgICAgICB0eXBlPUFzc2V0VHlwZXMuTUxUQUJMRSwNCiAgICAgICAgICAgIHBhdGg9dGVzdHNfcm9vdF9kaXIgLyAidGVzdF9jb25maWdzL2F1dG9tbF9qb2IvdGVzdF9kYXRhc2V0cy9pbWFnZV9pbnN0YW5jZV9zZWdtZW50YXRpb24vdHJhaW4iLA0KICAgICAgICApDQogICAgICAgIGluc3RhbmNlX3NlZ21lbnRhdGlvbl92YWxpZCA9IElucHV0KA0KICAgICAgICAgICAgdHlwZT1Bc3NldFR5cGVzLk1MVEFCTEUsDQogICAgICAgICAgICBwYXRoPXRlc3RzX3Jvb3RfZGlyIC8gInRlc3RfY29uZmlncy9hdXRvbWxfam9iL3Rlc3RfZGF0YXNldHMvaW1hZ2VfaW5zdGFuY2Vfc2VnbWVudGF0aW9uL3ZhbGlkIiwNCiAgICAgICAgKQ0KDQogICAgICAgIHBpcGVsaW5lX2pvYjogUGlwZWxpbmVKb2IgPSB0cmFpbl9zZWdtZW50YXRpb25fd2l0aF9hdXRvbWxfaW5fcGlwZWxpbmUoDQogICAgICAgICAgICBpbnN0YW5jZV9zZWdtZW50YXRpb25fdHJhaW4sIGluc3RhbmNlX3NlZ21lbnRhdGlvbl92YWxpZA0KICAgICAgICApDQogICAgICAgIHBpcGVsaW5lX2pvYi5zZXR0aW5ncy5kZWZhdWx0X2NvbXB1dGUgPSBHUFVfQ0xVU1RFUg0KDQogICAgICAgIGZyb21fcmVzdF9waXBlbGluZV9qb2IgPSBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKHBpcGVsaW5lX2pvYikNCiAgICAgICAgY2FuY2VsX2pvYihjbGllbnQsIGZyb21fcmVzdF9waXBlbGluZV9qb2IpDQoNCiAgICAgICAgYWN0dWFsX2RpY3QgPSBmcm9tX3Jlc3RfcGlwZWxpbmVfam9iLl90b19yZXN0X29iamVjdCgpLmFzX2RpY3QoKQ0KICAgICAgICBmaWVsZHNfdG9fb21pdCA9IFsibmFtZSIsICJkaXNwbGF5X25hbWUiLCAiZXhwZXJpbWVudF9uYW1lIiwgInByb3BlcnRpZXMiXQ0KDQogICAgICAgIGltYWdlX2luc3RhbmNlX3NlZ21lbnRhdGlvbl9kaWN0ID0gcHlkYXNoLm9taXQoDQogICAgICAgICAgICBhY3R1YWxfZGljdFsicHJvcGVydGllcyJdWyJqb2JzIl1bImltYWdlX2luc3RhbmNlX3NlZ21lbnRhdGlvbl9ub2RlIl0sIGZpZWxkc190b19vbWl0DQogICAgICAgICkNCiAgICAgICAgYXNzZXJ0IGltYWdlX2luc3RhbmNlX3NlZ21lbnRhdGlvbl9kaWN0ID09IHsNCiAgICAgICAgICAgICJsaW1pdHMiOiB7Im1heF9jb25jdXJyZW50X3RyaWFscyI6IDIsICJtYXhfdHJpYWxzIjogMTAsICJ0aW1lb3V0X21pbnV0ZXMiOiA2MH0sDQogICAgICAgICAgICAibG9nX3ZlcmJvc2l0eSI6ICJpbmZvIiwNCiAgICAgICAgICAgICJvdXRwdXRzIjoge30sDQogICAgICAgICAgICAicHJpbWFyeV9tZXRyaWMiOiAibWVhbl9hdmVyYWdlX3ByZWNpc2lvbiIsDQogICAgICAgICAgICAidGFncyI6IHt9LA0KICAgICAgICAgICAgInRhcmdldF9jb2x1bW5fbmFtZSI6ICJsYWJlbCIsDQogICAgICAgICAgICAidGFzayI6ICJpbWFnZV9pbnN0YW5jZV9zZWdtZW50YXRpb24iLA0KICAgICAgICAgICAgInRyYWluaW5nX2RhdGEiOiAiJHt7cGFyZW50LmlucHV0cy5pbWFnZV9pbnN0YW5jZV9zZWdtZW50YXRpb25fdHJhaW5fZGF0YX19IiwNCiAgICAgICAgICAgICJ0eXBlIjogImF1dG9tbCIsDQogICAgICAgICAgICAidmFsaWRhdGlvbl9kYXRhIjogIiR7e3BhcmVudC5pbnB1dHMuaW1hZ2VfaW5zdGFuY2Vfc2VnbWVudGF0aW9uX3ZhbGlkX2RhdGF9fSIsDQogICAgICAgICAgICAidHJhaW5pbmdfcGFyYW1ldGVycyI6IHsibm1zX2lvdV90aHJlc2hvbGQiOiAwLjd9LA0KICAgICAgICAgICAgInN3ZWVwIjogew0KICAgICAgICAgICAgICAgICJzYW1wbGluZ19hbGdvcml0aG0iOiAicmFuZG9tIiwNCiAgICAgICAgICAgICAgICAiZWFybHlfdGVybWluYXRpb24iOiB7DQogICAgICAgICAgICAgICAgICAgICJldmFsdWF0aW9uX2ludGVydmFsIjogMiwNCiAgICAgICAgICAgICAgICAgICAgImRlbGF5X2V2YWx1YXRpb24iOiA2LA0KICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJiYW5kaXQiLA0KICAgICAgICAgICAgICAgICAgICAic2xhY2tfZmFjdG9yIjogMC4yLA0KICAgICAgICAgICAgICAgICAgICAic2xhY2tfYW1vdW50IjogMC4wLA0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgInNlYXJjaF9zcGFjZSI6IFsNCiAgICAgICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgICAgICJsZWFybmluZ19yYXRlIjogInVuaWZvcm0oMC4wMDAxLDAuMDAxKSIsDQogICAgICAgICAgICAgICAgICAgICJtb2RlbF9uYW1lIjogImNob2ljZSgnbWFza3Jjbm5fcmVzbmV0NTBfZnBuJykiLA0KICAgICAgICAgICAgICAgICAgICAib3B0aW1pemVyIjogImNob2ljZSgnc2dkJywnYWRhbScsJ2FkYW13JykiLA0KICAgICAgICAgICAgICAgICAgICAibWluX3NpemUiOiAiY2hvaWNlKDYwMCw4MDApIiwNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICBdLA0KICAgICAgICB9DQo=",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "ks8nobB7LyPUqWoqq4tIFg==",
        "Date": "Tue, 11 Apr 2023 18:38:21 GMT",
        "ETag": "\u00220x8DB3ABBED5C5EF9\u0022",
        "Last-Modified": "Tue, 11 Apr 2023 18:38:21 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "Cn\u002BV1M4x1JI=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2021-12-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://sab6b272nokaeak.blob.core.windows.net/azureml-blobstore-061273aa-2956-4aff-8628-0fad8c820f9e/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_pipeline_samples.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "20015",
        "Content-MD5": "no8mzEEWnrW\u002B1pKo05\u002BSVg==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.15.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 11 Apr 2023 18:38:22 GMT",
        "x-ms-version": "2021-12-02"
      },
      "RequestBody": "IiIiDQpUaGlzIGZpbGUgY292ZXJzIGFsbCBzYW1wbGUgcGlwZWxpbmUgaW4gaHR0cHM6Ly9naXRodWIuY29tL0F6dXJlL2F6dXJlbWwtcHJldmlld3MvdHJlZS9tYWluL3ByZXZpZXdzL3BpcGVsaW5lcy9zYW1wbGVzDQppbiBkc2wucGlwZWxpbmUuDQpUaGUgc2FtcGxlcyBhcmUgY29waWVkIHRvIHRlc3RfY29uZmlncy9kc2xfcGlwZWxpbmVfc2FtcGxlcw0KIiIiDQppbXBvcnQganNvbg0KaW1wb3J0IHN5cw0KZnJvbSBwYXRobGliIGltcG9ydCBQYXRoDQoNCmltcG9ydCBweWRhc2gNCmltcG9ydCBweXRlc3QNCmZyb20gZGV2dG9vbHNfdGVzdHV0aWxzIGltcG9ydCBBenVyZVJlY29yZGVkVGVzdENhc2UsIGlzX2xpdmUNCmZyb20gdGVzdF91dGlsaXRpZXMudXRpbHMgaW1wb3J0IF9QWVRFU1RfVElNRU9VVF9NRVRIT0QsIGFzc2VydF9qb2JfY2FuY2VsDQoNCmZyb20gYXp1cmUuYWkubWwgaW1wb3J0IE1MQ2xpZW50LCBsb2FkX2pvYg0KZnJvbSBhenVyZS5haS5tbC5lbnRpdGllcyBpbXBvcnQgQ29tcG9uZW50IGFzIENvbXBvbmVudEVudGl0eQ0KZnJvbSBhenVyZS5haS5tbC5lbnRpdGllcyBpbXBvcnQgUGlwZWxpbmVKb2INCmZyb20gYXp1cmUuYWkubWwub3BlcmF0aW9ucy5fcnVuX2hpc3RvcnlfY29uc3RhbnRzIGltcG9ydCBKb2JTdGF0dXMNCg0KZnJvbSAuLl91dGlsIGltcG9ydCBfRFNMX1RJTUVPVVRfU0VDT05EDQoNCnRlc3RzX3Jvb3RfZGlyID0gUGF0aChfX2ZpbGVfXykucGFyZW50LnBhcmVudC5wYXJlbnQNCnN5cy5wYXRoLmluc2VydCgwLCBzdHIodGVzdHNfcm9vdF9kaXIgLyAidGVzdF9jb25maWdzIikpDQpzYW1wbGVzX2RpciA9IHRlc3RzX3Jvb3RfZGlyIC8gInRlc3RfY29uZmlncy9kc2xfcGlwZWxpbmUvIg0KDQoNCmRlZiBhc3NlcnRfam9iX2NvbXBsZXRlZChwaXBlbGluZSwgY2xpZW50OiBNTENsaWVudCk6DQogICAgam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSkNCiAgICBjbGllbnQuam9icy5zdHJlYW0oam9iLm5hbWUpDQogICAgYXNzZXJ0IGNsaWVudC5qb2JzLmdldChqb2IubmFtZSkuc3RhdHVzID09IEpvYlN0YXR1cy5DT01QTEVURUQNCg0KDQpkZWYgYXNzZXJ0X2RzbF9jdXJhdGVkKHBpcGVsaW5lOiBQaXBlbGluZUpvYiwgam9iX3lhbWwsIG9taXRfZmllbGRzKToNCiAgICBkc2xfcGlwZWxpbmVfam9iX2RpY3QgPSBwaXBlbGluZS5fdG9fcmVzdF9vYmplY3QoKS5hc19kaWN0KCkNCiAgICBwaXBlbGluZV9qb2JfZGljdCA9IGxvYWRfam9iKHNvdXJjZT1qb2JfeWFtbCkuX3RvX3Jlc3Rfb2JqZWN0KCkuYXNfZGljdCgpDQoNCiAgICBkc2xfcGlwZWxpbmVfam9iX2RpY3QgPSBweWRhc2gub21pdChkc2xfcGlwZWxpbmVfam9iX2RpY3QsIG9taXRfZmllbGRzKQ0KICAgIHBpcGVsaW5lX2pvYl9kaWN0ID0gcHlkYXNoLm9taXQocGlwZWxpbmVfam9iX2RpY3QsIG9taXRfZmllbGRzKQ0KICAgIHByaW50KGpzb24uZHVtcHMoZHNsX3BpcGVsaW5lX2pvYl9kaWN0LCBpbmRlbnQ9MikpDQogICAgcHJpbnQoanNvbi5kdW1wcyhwaXBlbGluZV9qb2JfZGljdCwgaW5kZW50PTIpKQ0KICAgIGFzc2VydCBkc2xfcGlwZWxpbmVfam9iX2RpY3QgPT0gcGlwZWxpbmVfam9iX2RpY3QNCg0KDQpAcHl0ZXN0Lm1hcmsudXNlZml4dHVyZXMoDQogICAgImVuYWJsZV9lbnZpcm9ubWVudF9pZF9hcm1fZXhwYW5zaW9uIiwNCiAgICAiZW5hYmxlX3BpcGVsaW5lX3ByaXZhdGVfcHJldmlld19mZWF0dXJlcyIsDQogICAgIm1vY2tfY29kZV9oYXNoIiwNCiAgICAibW9ja19jb21wb25lbnRfaGFzaCIsDQogICAgIm1vY2tfc2V0X2hlYWRlcnNfd2l0aF91c2VyX2FtbF90b2tlbiIsDQogICAgInJlY29yZGVkX3Rlc3QiLA0KKQ0KQHB5dGVzdC5tYXJrLnRpbWVvdXQodGltZW91dD1fRFNMX1RJTUVPVVRfU0VDT05ELCBtZXRob2Q9X1BZVEVTVF9USU1FT1VUX01FVEhPRCkNCkBweXRlc3QubWFyay5lMmV0ZXN0DQpAcHl0ZXN0Lm1hcmsucGlwZWxpbmVfdGVzdA0KY2xhc3MgVGVzdERTTFBpcGVsaW5lU2FtcGxlcyhBenVyZVJlY29yZGVkVGVzdENhc2UpOg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfZTJlX2xvY2FsX2NvbXBvbmVudHMoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmUyZV9sb2NhbF9jb21wb25lbnRzLnBpcGVsaW5lIGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgZTJlX2xvY2FsX2NvbXBvbmVudHMsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IGUyZV9sb2NhbF9jb21wb25lbnRzKCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfZTJlX3JlZ2lzdGVyZWRfY29tcG9uZW50cygNCiAgICAgICAgc2VsZiwNCiAgICAgICAgY2xpZW50OiBNTENsaWVudCwNCiAgICAgICAgcGlwZWxpbmVfc2FtcGxlc19lMmVfcmVnaXN0ZXJlZF90cmFpbl9jb21wb25lbnRzOiBDb21wb25lbnRFbnRpdHksDQogICAgICAgIHBpcGVsaW5lX3NhbXBsZXNfZTJlX3JlZ2lzdGVyZWRfc2NvcmVfY29tcG9uZW50czogQ29tcG9uZW50RW50aXR5LA0KICAgICAgICBwaXBlbGluZV9zYW1wbGVzX2UyZV9yZWdpc3RlcmVkX2V2YWxfY29tcG9uZW50czogQ29tcG9uZW50RW50aXR5LA0KICAgICkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmUyZV9yZWdpc3RlcmVkX2NvbXBvbmVudHMucGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBlMmVfcmVnaXN0ZXJlZF9jb21wb25lbnRzLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBlMmVfcmVnaXN0ZXJlZF9jb21wb25lbnRzKA0KICAgICAgICAgICAgY2xpZW50PWNsaWVudCwNCiAgICAgICAgICAgIHBpcGVsaW5lX3NhbXBsZXNfZTJlX3JlZ2lzdGVyZWRfdHJhaW5fY29tcG9uZW50cz1waXBlbGluZV9zYW1wbGVzX2UyZV9yZWdpc3RlcmVkX3RyYWluX2NvbXBvbmVudHMsDQogICAgICAgICAgICBwaXBlbGluZV9zYW1wbGVzX2UyZV9yZWdpc3RlcmVkX3Njb3JlX2NvbXBvbmVudHM9cGlwZWxpbmVfc2FtcGxlc19lMmVfcmVnaXN0ZXJlZF9zY29yZV9jb21wb25lbnRzLA0KICAgICAgICAgICAgcGlwZWxpbmVfc2FtcGxlc19lMmVfcmVnaXN0ZXJlZF9ldmFsX2NvbXBvbmVudHM9cGlwZWxpbmVfc2FtcGxlc19lMmVfcmVnaXN0ZXJlZF9ldmFsX2NvbXBvbmVudHMsDQogICAgICAgICkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCiAgICAgICAgIyBtb3ZlIHVuaXQgdGVzdCBoZXJlIGR1ZSB0byBwZXJtaXNzaW9uIHByb2JsZW0NCiAgICAgICAgam9iX3lhbWwgPSBzdHIoc2FtcGxlc19kaXIgLyAiZTJlX3JlZ2lzdGVyZWRfY29tcG9uZW50cy9waXBlbGluZS55bWwiKQ0KICAgICAgICBvbWl0X2ZpZWxkcyA9IFsNCiAgICAgICAgICAgICJwcm9wZXJ0aWVzLmV4cGVyaW1lbnRfbmFtZSIsDQogICAgICAgICAgICAibmFtZSIsDQogICAgICAgICAgICAicHJvcGVydGllcy5qb2JzLnRyYWluX2pvYi5jb21wb25lbnRJZCIsDQogICAgICAgICAgICAicHJvcGVydGllcy5qb2JzLnNjb3JlX2pvYi5jb21wb25lbnRJZCIsDQogICAgICAgICAgICAicHJvcGVydGllcy5qb2JzLmV2YWx1YXRlX2pvYi5jb21wb25lbnRJZCIsDQogICAgICAgICAgICAicHJvcGVydGllcy5qb2JzLnRyYWluX2pvYi5yZXNvdXJjZXMiLCAgIyBqb2IgeWFtbCB3b24ndCBoYXZlIHJlc291cmNlcyBidXQgd2Ugd2lsbCBwYXNzIHRoZW0NCiAgICAgICAgICAgICJwcm9wZXJ0aWVzLmpvYnMuc2NvcmVfam9iLnJlc291cmNlcyIsDQogICAgICAgICAgICAicHJvcGVydGllcy5qb2JzLmV2YWx1YXRlX2pvYi5yZXNvdXJjZXMiLA0KICAgICAgICAgICAgInByb3BlcnRpZXMuaW5wdXRzLnBpcGVsaW5lX2pvYl90cmFpbmluZ19pbnB1dC51cmkiLA0KICAgICAgICAgICAgInByb3BlcnRpZXMuaW5wdXRzLnBpcGVsaW5lX2pvYl90ZXN0X2lucHV0LnVyaSIsDQogICAgICAgICAgICAicHJvcGVydGllcy5wcm9wZXJ0aWVzIiwNCiAgICAgICAgICAgICJwcm9wZXJ0aWVzLmNvbXB1dGVfaWQiLA0KICAgICAgICAgICAgInByb3BlcnRpZXMuc2V0dGluZ3MiLA0KICAgICAgICBdDQogICAgICAgIGFzc2VydF9kc2xfY3VyYXRlZChwaXBlbGluZSwgam9iX3lhbWwsIG9taXRfZmllbGRzKQ0KDQogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QNCiAgICBkZWYgdGVzdF9iYXNpY19jb21wb25lbnQoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmJhc2ljX2NvbXBvbmVudC5waXBlbGluZSBpbXBvcnQgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIGJhc2ljX2NvbXBvbmVudA0KDQogICAgICAgIHBpcGVsaW5lID0gYmFzaWNfY29tcG9uZW50KCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfY29tcG9uZW50X3dpdGhfaW5wdXRfb3V0cHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5jb21wb25lbnRfd2l0aF9pbnB1dF9vdXRwdXQucGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBjb21wb25lbnRfd2l0aF9pbnB1dF9vdXRwdXQsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IGNvbXBvbmVudF93aXRoX2lucHV0X291dHB1dCgpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X2Jhc2ljX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5iYXNpY19waXBlbGluZS5waXBlbGluZSBpbXBvcnQgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIGJhc2ljX3BpcGVsaW5lDQoNCiAgICAgICAgcGlwZWxpbmUgPSBiYXNpY19waXBlbGluZSgpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X3BpcGVsaW5lX3dpdGhfZGF0YShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUucGlwbGluZV93aXRoX2RhdGEucGlwZWxpbmUgaW1wb3J0IGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBwaXBsaW5lX3dpdGhfZGF0YQ0KDQogICAgICAgIHBpcGVsaW5lID0gcGlwbGluZV93aXRoX2RhdGEoKQ0KICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQ0KDQogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QNCiAgICBkZWYgdGVzdF9sb2NhbF9kYXRhX2lucHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5sb2NhbF9kYXRhX2lucHV0LnBpcGVsaW5lIGltcG9ydCBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgbG9jYWxfZGF0YV9pbnB1dA0KDQogICAgICAgIHBpcGVsaW5lID0gbG9jYWxfZGF0YV9pbnB1dCgpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X2RhdGFzdG9yZV9kYXRhcGF0aF91cmlfZm9sZGVyKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5kYXRhc3RvcmVfZGF0YXBhdGhfdXJpX2ZvbGRlci5waXBlbGluZSBpbXBvcnQgKA0KICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIGRhdGFzdG9yZV9kYXRhcGF0aF91cmlfZm9sZGVyLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhc3RvcmVfZGF0YXBhdGhfdXJpX2ZvbGRlcigpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X2RhdGFzdG9yZV9kYXRhcGF0aF91cmlfZmlsZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZGF0YXN0b3JlX2RhdGFwYXRoX3VyaV9maWxlLnBpcGVsaW5lIGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgZGF0YXN0b3JlX2RhdGFwYXRoX3VyaV9maWxlLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhc3RvcmVfZGF0YXBhdGhfdXJpX2ZpbGUoKQ0KICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQ0KDQogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QNCiAgICBkZWYgdGVzdF9kYXRhc2V0X2lucHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5kYXRhc2V0X2lucHV0LnBpcGVsaW5lIGltcG9ydCBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgZGF0YXNldF9pbnB1dA0KDQogICAgICAgIHBpcGVsaW5lID0gZGF0YXNldF9pbnB1dChjbGllbnQpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X3dlYl91cmxfaW5wdXQoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLndlYl91cmxfaW5wdXQucGlwZWxpbmUgaW1wb3J0IGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyB3ZWJfdXJsX2lucHV0DQoNCiAgICAgICAgcGlwZWxpbmUgPSB3ZWJfdXJsX2lucHV0KCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfZW52X3B1YmxpY19kb2NrZXJfaW1hZ2Uoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmVudl9wdWJsaWNfZG9ja2VyX2ltYWdlLnBpcGVsaW5lIGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgZW52X3B1YmxpY19kb2NrZXJfaW1hZ2UsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IGVudl9wdWJsaWNfZG9ja2VyX2ltYWdlKCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfZW52X3JlZ2lzdGVyZWQoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmVudl9yZWdpc3RlcmVkLnBpcGVsaW5lIGltcG9ydCBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgZW52X3JlZ2lzdGVyZWQNCg0KICAgICAgICBwaXBlbGluZSA9IGVudl9yZWdpc3RlcmVkKCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfZW52X2NvbmRhX2ZpbGUoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmVudl9jb25kYV9maWxlLnBpcGVsaW5lIGltcG9ydCBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgZW52X2NvbmRhX2ZpbGUNCg0KICAgICAgICBwaXBlbGluZSA9IGVudl9jb25kYV9maWxlKCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfdGZfaGVsbG9fd29ybGQoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLnRmX2hlbGxvX3dvcmxkLnBpcGVsaW5lIGltcG9ydCBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgdGZfaGVsbG9fd29ybGQNCg0KICAgICAgICBwaXBlbGluZSA9IHRmX2hlbGxvX3dvcmxkKCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfbXBpX2hlbGxvX3dvcmxkKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5tcGlfaGVsbG9fd29ybGQucGlwZWxpbmUgaW1wb3J0IGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBtcGlfaGVsbG9fd29ybGQNCg0KICAgICAgICBwaXBlbGluZSA9IG1waV9oZWxsb193b3JsZCgpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X3B5dG9yY2hfaGVsbG9fd29ybGQoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLnB5dG9yY2hfaGVsbG9fd29ybGQucGlwZWxpbmUgaW1wb3J0IGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBweXRvcmNoX2hlbGxvX3dvcmxkDQoNCiAgICAgICAgcGlwZWxpbmUgPSBweXRvcmNoX2hlbGxvX3dvcmxkKCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfbnljX3RheGlfZGF0YV9yZWdyZXNzaW9uKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5ueWNfdGF4aV9kYXRhX3JlZ3Jlc3Npb24ucGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBueWNfdGF4aV9kYXRhX3JlZ3Jlc3Npb24sDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IG55Y190YXhpX2RhdGFfcmVncmVzc2lvbigpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X3RmX21uaXN0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS50Zl9tbmlzdC5waXBlbGluZSBpbXBvcnQgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIHRmX21uaXN0DQoNCiAgICAgICAgcGlwZWxpbmUgPSB0Zl9tbmlzdCgpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X2UyZV9pbmxpbmVfY29tcG9uZW50cyhzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZTJlX2lubGluZV9jb21wb25lbnRzLnBpcGVsaW5lIGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgZTJlX2lubGluZV9jb21wb25lbnRzLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBlMmVfaW5saW5lX2NvbXBvbmVudHMoKQ0KICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQ0KDQogICAgQHB5dGVzdC5tYXJrLnVzZWZpeHR1cmVzKCJtb2NrX2Fzc2V0X25hbWUiKQ0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfY29tbWFuZF9qb2JfaW5fcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmNvbW1hbmRfam9iX2luX3BpcGVsaW5lLnBpcGVsaW5lIGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgY29tbWFuZF9qb2JfaW5fcGlwZWxpbmUsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IGNvbW1hbmRfam9iX2luX3BpcGVsaW5lKCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfbXVsdGlfcGFyYWxsZWxfY29tcG9uZW50c193aXRoX2ZpbGVfaW5wdXRfcGlwZWxpbmVfb3V0cHV0KA0KICAgICAgICBzZWxmLA0KICAgICAgICBjbGllbnQ6IE1MQ2xpZW50LA0KICAgICkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLnBhcmFsbGVsX2NvbXBvbmVudF93aXRoX2ZpbGVfaW5wdXQucGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBwaXBlbGluZV93aXRoX3BhcmFsbGVsX2NvbXBvbmVudHMsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IHBpcGVsaW5lX3dpdGhfcGFyYWxsZWxfY29tcG9uZW50cygpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X3BhcmFsbGVsX2NvbXBvbmVudHNfd2l0aF90YWJ1bGFyX2lucHV0X3BpcGVsaW5lX291dHB1dChzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUucGFyYWxsZWxfY29tcG9uZW50X3dpdGhfdGFidWxhcl9pbnB1dC5waXBlbGluZSBpbXBvcnQgKA0KICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIHBpcGVsaW5lX3dpdGhfcGFyYWxsZWxfY29tcG9uZW50cywNCiAgICAgICAgKQ0KDQogICAgICAgIHBpcGVsaW5lID0gcGlwZWxpbmVfd2l0aF9wYXJhbGxlbF9jb21wb25lbnRzKCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfcGFyYWxsZWxfY29tcG9uZW50cyhzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUucGFyYWxsZWxfY29tcG9uZW50LnBpcGVsaW5lIGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgcGlwZWxpbmVfd2l0aF9wYXJhbGxlbF9jb21wb25lbnRzLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBwaXBlbGluZV93aXRoX3BhcmFsbGVsX2NvbXBvbmVudHMoKQ0KICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQ0KDQogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QNCiAgICBkZWYgdGVzdF9hdXRvbWxfam9iX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5hdXRvbWxfam9iX2luX3BpcGVsaW5lLnBpcGVsaW5lIGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgYXV0b21sX2pvYl9pbl9waXBlbGluZSwNCiAgICAgICAgKQ0KDQogICAgICAgIHBpcGVsaW5lID0gYXV0b21sX2pvYl9pbl9waXBlbGluZSgpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X3BpcGVsaW5lX3dpdGhfcGlwZWxpbmVfY29tcG9uZW50KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5waXBlbGluZV93aXRoX3BpcGVsaW5lX2NvbXBvbmVudC5waXBlbGluZSBpbXBvcnQgKA0KICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIHBpcGVsaW5lX3dpdGhfcGlwZWxpbmVfY29tcG9uZW50LA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBwaXBlbGluZV93aXRoX3BpcGVsaW5lX2NvbXBvbmVudCgpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X3BpcGVsaW5lX3dpdGhfZGF0YV9hc19pbnB1dHNfZm9yX3BpcGVsaW5lX2NvbXBvbmVudChzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUucGlwZWxpbmVfd2l0aF9waXBlbGluZV9jb21wb25lbnQucGlwZWxpbmVfd2l0aF9kYXRhX2FzX2lucHV0IGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgcGlwZWxpbmVfd2l0aF9waXBlbGluZV9jb21wb25lbnQsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IHBpcGVsaW5lX3dpdGhfcGlwZWxpbmVfY29tcG9uZW50KGNsaWVudCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3Rfc3Bhcmtfam9iX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5zcGFya19qb2JfaW5fcGlwZWxpbmUucGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZV9mcm9tX3lhbWwgYXMgc3Bhcmtfam9iX2luX3BpcGVsaW5lLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBzcGFya19qb2JfaW5fcGlwZWxpbmUoKQ0KICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQ0KDQogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QNCiAgICBkZWYgdGVzdF9zcGFya19qb2Jfd2l0aF9idWlsZGVyX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5zcGFya19qb2JfaW5fcGlwZWxpbmUucGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZV9mcm9tX2J1aWxkZXIgYXMgc3Bhcmtfam9iX2luX3BpcGVsaW5lLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBzcGFya19qb2JfaW5fcGlwZWxpbmUoKQ0KICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQ0KDQogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QNCiAgICBkZWYgdGVzdF9zcGFya19qb2Jfd2l0aF9tdWx0aXBsZV9ub2RlX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5zcGFya19qb2JfaW5fcGlwZWxpbmUua21lYW5zX3NhbXBsZS5waXBlbGluZSBpbXBvcnQgKA0KICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lX2Zyb21feWFtbCBhcyBzcGFya19qb2JfaW5fcGlwZWxpbmUsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IHNwYXJrX2pvYl9pbl9waXBlbGluZSgpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X3NwYXJrX2pvYl93aXRoX2J1aWxkZXJfaW5fcGlwZWxpbmVfd2l0aG91dF9lbnRyeSgNCiAgICAgICAgc2VsZiwNCiAgICAgICAgY2xpZW50OiBNTENsaWVudCwNCiAgICApIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5zcGFya19qb2JfaW5fcGlwZWxpbmUuaW52YWxpZF9waXBlbGluZSBpbXBvcnQgKA0KICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lX2Zyb21fYnVpbGRlcl93aXRob3V0X2VudHJ5IGFzIHNwYXJrX2pvYl9pbl9waXBlbGluZSwNCiAgICAgICAgKQ0KDQogICAgICAgIHBpcGVsaW5lID0gc3Bhcmtfam9iX2luX3BpcGVsaW5lKCkNCiAgICAgICAgd2l0aCBweXRlc3QucmFpc2VzKEV4Y2VwdGlvbikgYXMgZXg6DQogICAgICAgICAgICBjcmVhdGVkX2pvYiA9IGNsaWVudC5qb2JzLmNyZWF0ZV9vcl91cGRhdGUocGlwZWxpbmUpDQoNCiAgICAgICAgYXNzZXJ0ICgNCiAgICAgICAgICAgICd7XG4gICJyZXN1bHQiOiAiRmFpbGVkIixcbiAgImVycm9ycyI6IFtcbiAgICB7XG4gICAgICAibWVzc2FnZSI6ICJNaXNzaW5nIGRhdGEgZm9yIHJlcXVpcmVkIGZpZWxkLiIsJw0KICAgICAgICAgICAgJ1xuICAgICAgInBhdGgiOiAiam9icy5hZGRfZ3JlZXRpbmdfY29sdW1uLmNvbXBvbmVudC5lbnRyeSIsXG4gICAgICAidmFsdWUiOiBudWxsXG4gICAgfVxuICBdXG59Jw0KICAgICAgICAgICAgPT0gc3RyKGV4LnZhbHVlKQ0KICAgICAgICApDQoNCiAgICAgICAgdmFsaWRhdGlvbl9yZXN1bHQgPSBjbGllbnQuam9icy52YWxpZGF0ZShwaXBlbGluZSkNCiAgICAgICAgYXNzZXJ0IHZhbGlkYXRpb25fcmVzdWx0LnBhc3NlZCBpcyBGYWxzZQ0KICAgICAgICBhc3NlcnQgdmFsaWRhdGlvbl9yZXN1bHQuZXJyb3JfbWVzc2FnZXMgPT0gew0KICAgICAgICAgICAgImpvYnMuYWRkX2dyZWV0aW5nX2NvbHVtbi5jb21wb25lbnQuZW50cnkiOiAiTWlzc2luZyBkYXRhIGZvciByZXF1aXJlZCBmaWVsZC4iLA0KICAgICAgICB9DQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X3NwYXJrX2pvYl93aXRoX2J1aWxkZXJfaW5fcGlwZWxpbmVfd2l0aF9keW5hbWljX2FsbG9jYXRpb25fZGlzYWJsZWQoDQogICAgICAgIHNlbGYsDQogICAgICAgIGNsaWVudDogTUxDbGllbnQsDQogICAgKSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuc3Bhcmtfam9iX2luX3BpcGVsaW5lLmludmFsaWRfcGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZV9mcm9tX2J1aWxkZXJfd2l0aF9keW5hbWljX2FsbG9jYXRpb25fZGlzYWJsZWQgYXMgc3Bhcmtfam9iX2luX3BpcGVsaW5lLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBzcGFya19qb2JfaW5fcGlwZWxpbmUoKQ0KICAgICAgICB3aXRoIHB5dGVzdC5yYWlzZXMoRXhjZXB0aW9uKSBhcyBleDoNCiAgICAgICAgICAgIGNyZWF0ZWRfam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSkNCg0KICAgICAgICBhc3NlcnQgKA0KICAgICAgICAgICAgJ3tcbiAgInJlc3VsdCI6ICJGYWlsZWQiLFxuICAiZXJyb3JzIjogW1xuICAgIHtcbiAgICAgICJtZXNzYWdlIjogIlNob3VsZCBub3Qgc3BlY2lmeSBtaW4gb3IgbWF4ICcNCiAgICAgICAgICAgICdleGVjdXRvcnMgd2hlbiBkeW5hbWljIGFsbG9jYXRpb24gaXMgZGlzYWJsZWQuIixcbicgaW4gc3RyKGV4LnZhbHVlKQ0KICAgICAgICApDQoNCiAgICAgICAgdmFsaWRhdGlvbl9yZXN1bHQgPSBjbGllbnQuam9icy52YWxpZGF0ZShwaXBlbGluZSkNCiAgICAgICAgYXNzZXJ0IHZhbGlkYXRpb25fcmVzdWx0LnBhc3NlZCBpcyBGYWxzZQ0KICAgICAgICBhc3NlcnQgdmFsaWRhdGlvbl9yZXN1bHQuZXJyb3JfbWVzc2FnZXMgPT0gew0KICAgICAgICAgICAgImpvYnMuYWRkX2dyZWV0aW5nX2NvbHVtbiI6ICJTaG91bGQgbm90IHNwZWNpZnkgbWluIG9yIG1heCBleGVjdXRvcnMgd2hlbiBkeW5hbWljIGFsbG9jYXRpb24gaXMgZGlzYWJsZWQuIiwNCiAgICAgICAgfQ0KDQogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QNCiAgICBkZWYgdGVzdF9kYXRhX3RyYW5zZmVyX2NvcHlfMnVyaWZvbGRlcl9qb2JfaW5fcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lLmNvcHlfZGF0YS5waXBlbGluZSBpbXBvcnQgKA0KICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lX2Zyb21feWFtbCBhcyBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSwNCiAgICAgICAgKQ0KDQogICAgICAgIHBpcGVsaW5lID0gZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUoKQ0KICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50LCBza2lwX2NhbmNlbD1UcnVlKQ0KDQogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QNCiAgICBkZWYgdGVzdF9kYXRhX3RyYW5zZmVyX2NvcHlfMnVyaWZvbGRlcl9qb2Jfd2l0aF9idWlsZGVyX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5kYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZS5jb3B5X2RhdGEucGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZV9mcm9tX2J1aWxkZXIgYXMgZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lKCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfZGF0YV90cmFuc2Zlcl9jb3B5X21peHR5cGVfam9iX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5kYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZS5jb3B5X2RhdGEucGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZV9jb3B5X21peHR5cGVfZnJvbV95YW1sIGFzIGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSgpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X2RhdGFfdHJhbnNmZXJfY29weV91cmlmaWxlX2pvYl9pbl9waXBlbGluZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUuY29weV9kYXRhLnBpcGVsaW5lIGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmVfY29weV91cmlmaWxlX2Zyb21feWFtbCBhcyBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSwNCiAgICAgICAgKQ0KDQogICAgICAgIHBpcGVsaW5lID0gZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUoKQ0KICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQ0KDQogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QNCiAgICBkZWYgdGVzdF9kYXRhX3RyYW5zZmVyX2NvcHlfdXJpZm9sZGVyX2pvYl9pbl9waXBlbGluZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUuY29weV9kYXRhLnBpcGVsaW5lIGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmVfY29weV91cmlmb2xkZXJfZnJvbV95YW1sIGFzIGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSgpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X2RhdGFfdHJhbnNmZXJfaW1wb3J0X2ZpbGVzeXN0ZW1fam9iX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5kYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZS5pbXBvcnRfZmlsZV9zeXN0ZW0ucGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZV9mcm9tX2J1aWxkZXIgYXMgZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lKCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfZGF0YV90cmFuc2Zlcl9pbXBvcnRfc3FsX2RhdGFiYXNlX2pvYl9pbl9waXBlbGluZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUuaW1wb3J0X2RhdGFiYXNlLnBpcGVsaW5lIGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmVfZnJvbV9idWlsZGVyX3NxbCBhcyBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSwNCiAgICAgICAgKQ0KDQogICAgICAgIHBpcGVsaW5lID0gZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUoKQ0KICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQ0KDQogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QNCiAgICBkZWYgdGVzdF9kYXRhX3RyYW5zZmVyX2ltcG9ydF9zbm93Zmxha2VfZGF0YWJhc2Vfam9iX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5kYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZS5pbXBvcnRfZGF0YWJhc2UucGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZV9mcm9tX2J1aWxkZXIgYXMgZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lKCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfZGF0YV90cmFuc2Zlcl9leHBvcnRfc3FsX2RhdGFiYXNlX2pvYl9pbl9waXBlbGluZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUuZXhwb3J0X2RhdGFiYXNlLnBpcGVsaW5lIGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmVfZnJvbV9idWlsZGVyIGFzIGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSgpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X2RhdGFfdHJhbnNmZXJfbXVsdGlfam9iX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5kYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZS5waXBlbGluZSBpbXBvcnQgKA0KICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSgpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQo=",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "no8mzEEWnrW\u002B1pKo05\u002BSVg==",
        "Date": "Tue, 11 Apr 2023 18:38:21 GMT",
        "ETag": "\u00220x8DB3ABBED629F9C\u0022",
        "Last-Modified": "Tue, 11 Apr 2023 18:38:21 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "c\u002BpsBVcdGYQ=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2021-12-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://sab6b272nokaeak.blob.core.windows.net/azureml-blobstore-061273aa-2956-4aff-8628-0fad8c820f9e/LocalUpload/00000000000000000000000000000000/e2etests/__pycache__/test_controlflow_pipeline.cpython-310-pytest-7.2.2.pyc",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "26895",
        "Content-MD5": "UNMEx5GbR7peUfQOoMlfzw==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.15.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 11 Apr 2023 18:38:22 GMT",
        "x-ms-version": "2021-12-02"
      },
      "RequestBody": "bw0NCgAAAADRpzVkWLEAAOMAAAAAAAAAAAAAAAAAAAAACgAAAEAAAABzWgEAAGQAZAFsAFoBZABkAWwCbQMCAAEAbQRaBQEAZABkAmwGbQdaBwEAZABkAWwIWghkAGQDbAltCloKAQBkAGQEbAttDFoMbQ1aDQEAZABkBWwObQ9aD20QWhBtEVoRAQBkAGQGbBJtE1oTbRRaFG0VWhVtFloWAQBkAGQHbBdtGFoYAQBkAGQIbBltGloaAQBkAGQJbBttHFocAQBkAGQKbB1tHloeAQBkC2QMbB9tIFogbSFaIQEAZRNkDWQOZA\u002BNAloiZwBkEKIBWiNlCGokoCVkEWQSZBNkFGQVZBZkF2QYoQhlCGokaiZlIGUPZBmNAmUIaiRqJ2UIaiRqKEcAZBpkG4QAZBtlDIMDgwGDAYMBgwFaKUcAZBxkHYQAZB1lKYMDWipHAGQeZB\u002BEAGQfZSmDA1orZQhqJGosZQ2DAGQgZCGNAkcAZCJkI4QAZCNlKYMDgwFaLWQBUwApJOkAAAAATikB2gRQYXRoKQHaBWdyb3VwKQLaFUF6dXJlUmVjb3JkZWRUZXN0Q2FzZdoHaXNfbGl2ZSkD2hZfUFlURVNUX1RJTUVPVVRfTUVUSE9E2hFhc3NlcnRfam9iX2NhbmNlbNoSb21pdF93aXRoX3dpbGRjYXJkKQTaBUlucHV02ghNTENsaWVudNoObG9hZF9jb21wb25lbnTaBk91dHB1dCkB2ghwaXBlbGluZakB2gljb25kaXRpb24pAdoIZG9fd2hpbGUpAdoMcGFyYWxsZWxfZm9y6QIAAAApAtoTX0RTTF9USU1FT1VUX1NFQ09ORNopaW5jbHVkZV9wcml2YXRlX3ByZXZpZXdfbm9kZXNfaW5fcGlwZWxpbmXaCHVyaV9maWxl\u002BjhodHRwczovL2RwcmVwZGF0YS5ibG9iLmNvcmUud2luZG93cy5uZXQvZGVtby9UaXRhbmljLmNzdqkC2gR0eXBl2gRwYXRoKQTaBG5hbWV6F3Byb3BlcnRpZXMuZGlzcGxheV9uYW1leh1wcm9wZXJ0aWVzLmpvYnMuKi5jb21wb25lbnRJZHoTcHJvcGVydGllcy5zZXR0aW5nc9omZW5hYmxlX3ByaXZhdGVfcHJldmlld19zY2hlbWFfZmVhdHVyZXPaI2VuYWJsZV9lbnZpcm9ubWVudF9pZF9hcm1fZXhwYW5zaW9u2ihlbmFibGVfcGlwZWxpbmVfcHJpdmF0ZV9wcmV2aWV3X2ZlYXR1cmVz2g5tb2NrX2NvZGVfaGFzaNoPbW9ja19hc3NldF9uYW1l2hNtb2NrX2NvbXBvbmVudF9oYXNo2iRtb2NrX3NldF9oZWFkZXJzX3dpdGhfdXNlcl9hbWxfdG9rZW7aDXJlY29yZGVkX3Rlc3QpAtoHdGltZW91dNoGbWV0aG9kYwAAAAAAAAAAAAAAAAAAAAABAAAAQAAAAHMMAAAAZQBaAWQAWgJkAVMAKQLaF1Rlc3RDb250cm9sRmxvd1BpcGVsaW5lTikD2ghfX25hbWVfX9oKX19tb2R1bGVfX9oMX19xdWFsbmFtZV9fqQByKQAAAHIpAAAA\u002BohDOlxVc2Vyc1xkaXBlY2suUkVETU9ORFxzb3VyY2VccmVwb3NcZGlvbmRyYXBlY2tcYXp1cmUtc2RrLWZvci1weXRob25cc2RrXG1sXGF6dXJlLWFpLW1sXHRlc3RzXGRzbFxlMmV0ZXN0c1x0ZXN0X2NvbnRyb2xmbG93X3BpcGVsaW5lLnB5ciUAAAAdAAAAcwQAAAAIAAQOciUAAABjAAAAAAAAAAAAAAAAAAAAAAQAAABAAAAAc4IAAABlAFoBZABaAmQBZQNmAmQCZAOEBFoEZAFlA2YCZARkBYQEWgVkAWUDZgJkBmQHhARaBmQBZQNmAmQIZAmEBFoHZAFlA2YCZApkC4QEWghkAWUDZgJkDGQNhARaCWUKagtqDGUNgwAMAGQOZA\u002BNAmQBZQNmAmQQZBGEBIMBWg5kElMAKRPaClRlc3RJZkVsc2XaBmNsaWVudGMCAAAAAAAAAAAAAAAKAAAACAAAAAMAAABzNAEAAHQAZAFkAo0BiQF0AGQDZAKNAYkAdAFkBGQFZAaNAocAhwFmAmQHZAiECIMBfQJ8AoMAfQN0AoMAjw0BAHQDfAN8AYMCfQNXAGQABAAEAIMDAQBuCDEAcy13AQEAAQABAFkAAQB0BHwDoAWhAKAGoQBnAXQHogFSAI4AfQR8BGQJGQBkChkAfQVkC2QMZA1kDmQPZBCcBWQRZBJkE2QUZBWcAmkBZBZkF2QYnARkEWQSZBNkGWQVnAJpAWQaZBdkGJwEZBFkG2QXZBycA2QdnAR9BnwFfAZrAn0HfAdzknQIoAlkHnwHZgFkH3wFfAZmAqEEdAigCnwFoQF0CKAKfAahAWQgnAIWAH0IZCFkInwIaQEWAH0JdAt0CKAMfAmhAYMBggFkAAQAfQUEAH0HfQZkAFMAKSNO\u002BkEuL3Rlc3RzL3Rlc3RfY29uZmlncy9jb21wb25lbnRzL2hlbGxvd29ybGRfY29tcG9uZW50X25vX3BhdGhzLnltbKkB2gZzb3VyY2X6Sy4vdGVzdHMvdGVzdF9jb25maWdzL2NvbXBvbmVudHMvY29tcG9uZW50X3dpdGhfY29uZGl0aW9uYWxfb3V0cHV0L3NwZWMueWFtbNoxdGVzdF9tbGRlc2lnbmVyX2NvbXBvbmVudF93aXRoX2NvbmRpdGlvbmFsX291dHB1dPoLY3B1LWNsdXN0ZXKpAnIaAAAA2gdjb21wdXRlYwAAAAAAAAAAAAAAAAMAAAAFAAAAEwAAAHMwAAAAiACDAH0AiAFkAWQCjQF9AYgBZANkAo0BfQJ0AHwAagFqAnwBfAJkBI0DAQBkAFMAKQVO6QEAAACpAdoTY29tcG9uZW50X2luX251bWJlcnISAAAAqQNyDwAAANoLZmFsc2VfYmxvY2vaCnRydWVfYmxvY2upA3IPAAAA2gdvdXRwdXRz2gZvdXRwdXSpA9oGcmVzdWx02gVub2RlMdoFbm9kZTKpAtoPYmFzaWNfY29tcG9uZW502h5oZWxsb193b3JsZF9jb21wb25lbnRfbm9fcGF0aHNyKQAAAHIqAAAA2hJjb25kaXRpb25fcGlwZWxpbmU5AAAAcwgAAAAGBQoCCgEWAXpCVGVzdElmRWxzZS50ZXN0X2RzbF9jb25kaXRpb25fcGlwZWxpbmUuPGxvY2Fscz4uY29uZGl0aW9uX3BpcGVsaW5l2gpwcm9wZXJ0aWVz2gRqb2Jz2gNEU0z6JiR7e3BhcmVudC5qb2JzLnJlc3VsdC5vdXRwdXRzLm91dHB1dH19\u002BhYke3twYXJlbnQuam9icy5ub2RlMX19\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DBAAAAcwwAAAAKAA4CEAEQARABFAFyjwAAANoGcmV0dXJuYwAAAAAAAAAAAAAAAAEAAAAHAAAAEwAAAHMYAAAAiAB0AGQBZAJkA2QEZAWNBX0AfABqAVMAKQZOVHISAAAAZ5qZmZmZmQFA2gR0ZXN0qQXaCmlucHV0X2RhdGHaCXBhcmFtYm9vbNoIcGFyYW1pbnTaCnBhcmFtZmxvYXTaCHBhcmFtc3RyKQLaCnRlc3RfaW5wdXRyPAAAACkB2gRub2RlqQHaL3ByaW1pdGl2ZV9jb21wb25lbnRfd2l0aF9ub3JtYWxfaW5wdXRfb3V0cHV0X3YycikAAAByKgAAANomdGVzdF9waXBlbGluZV9jb21wb25lbnRfY29udHJvbF9vdXRwdXTJAAAAcwgAAAACAgoBBv8GA3pfVGVzdElmRWxzZS50ZXN0X3JlZ2lzdGVyZWRfY29tcG9uZW50X2lzX2NvbnRyb2wuPGxvY2Fscz4udGVzdF9waXBlbGluZV9jb21wb25lbnRfY29udHJvbF9vdXRwdXQpEHILAAAAcjwAAABygQAAANoKY29tcG9uZW50c9oQY3JlYXRlX29yX3VwZGF0ZdoIX3RvX2RpY3RyZwAAAHJoAAAAcmkAAADaDEBweV9idWlsdGluc9oGbG9jYWxz2hhfc2hvdWxkX3JlcHJfZ2xvYmFsX25hbWVyagAAAHJrAAAAcgMAAAByDQAAACkMcm0AAAByLAAAAFoUcmVnaXN0ZXJlZF9jb21wb25lbnTaCXJlc3RfZGljdHKKAAAAcnAAAABycgAAANoLQHB5X2Zvcm1hdDTaC0BweV9mb3JtYXQ2co8AAABynAAAAFodcmVnaXN0ZXJlZF9waXBlbGluZV9jb21wb25lbnRyKQAAAHKaAAAAcioAAADaJHRlc3RfcmVnaXN0ZXJlZF9jb21wb25lbnRfaXNfY29udHJvbK8AAABzKAAAAAIBAgEG/wwDDAEIAQYDCgEIAQgBCAEG\u002B3wHAgMQAQQHFAEMBggBgAF6L1Rlc3RJZkVsc2UudGVzdF9yZWdpc3RlcmVkX2NvbXBvbmVudF9pc19jb250cm9sYwIAAAAAAAAAAAAAAAsAAAANAAAAAwAAAHOqAQAAdABkAWQCjQGJAHQAZANkAo0BiQF0AWQEZAVkBo0ChwCHAWYCZAdkCIQIgwF9AnwCdAJkCWQFZApkC2QMjQV9A3QDgwCPDQEAdAR8A3wBgwJ9BFcAZAAEAAQAgwMBAG4IMQBzM3cBAQABAAEAWQABAHQFfASgBqEAoAehAGcBdAiiAVIAjgB9BXwFZA0ZAGQOGQB9BmQPZBBkEWQSZBOcBGQUZBVkFmQXnAJkFWQYZBecAmQVZBlkF5wCZBVkGWQXnAJkFWQaZBecAmQVZBtkF5wCZBycBmQdZB5kH5wEZA9kIGQhZCJkI2kBZCRnAWQlZwFkJmcBZCdnAWQoZwFkKWcBZCqcBmQrZCycBmQUZBVkLWQXnAJkFWQuZBecAmQVZC9kF5wCZBVkMGQXnAJkFWQxZBecAmQynAVkM2QeZB\u002BcBGQ0nAR9B3wGfAdrAn0IfAhzzXQJoApkNXwIZgFkNnwGfAdmAqEEdAmgC3wGoQF0CaALfAehAWQ3nAIWAH0JZDhkOXwJaQEWAH0KdAx0CaANfAqhAYMBggFkAAQAfQYEAH0IfQdkAFMAKTpOekouL3Rlc3RzL3Rlc3RfY29uZmlncy9jb21wb25lbnRzL2RvX3doaWxlX3Rlc3QvZG9fd2hpbGVfYm9keV9jb21wb25lbnQueWFtbHIuAAAAcnwAAAByMgAAAFQpAloWZGVmYXVsdF9jb21wdXRlX3RhcmdldNoYY29udGludWVfb25fc3RlcF9mYWlsdXJlYwUAAAAAAAAAAAAAAAcAAAAPAAAAEwAAAHOqAAAAiAB8AHwAfAF8AnwDfARkAY0GfQV0AHwFfAVqAWoCfAVqAWoDfAVqBGoFfAVqAWoGfAVqBGoHfAVqAWoIfAVqBGoJfAVqAWoKfAVqBGoLfAVqAWoMfAVqBGoNfAVqAWoOfAVqBGoPaQZkAmQDjQQBAIgBfAVqAWoDfAVqAWoKfAVqAWoIfAVqAWoMfAVqAWoOZASNBX0GdAJ8BWoBagJ8BmQFjQIBAGQAUwApBk4pBtoHaW5wdXRfMdoHaW5wdXRfMtoJaW50X3BhcmFt2gpib29sX3BhcmFt2gtmbG9hdF9wYXJhbdoJc3RyX3BhcmFt6QMAAACpBNoEYm9keXIPAAAA2gdtYXBwaW5n2hNtYXhfaXRlcmF0aW9uX2NvdW50cpIAAACpAnIPAAAAcjoAAAApEHIQAAAAcjwAAAByDwAAANoIb3V0cHV0XzFyVwAAAHKoAAAA2ghvdXRwdXRfMnKpAAAAcocAAAByqgAAAHJ9AAAAcqsAAAByiAAAAHKsAAAAcokAAAByrQAAACkHcpMAAAByqgAAAHKrAAAAcqwAAAByrQAAANoSZG9fd2hpbGVfYm9keV9mdW5j2h9wcmltaXRpdmVfb3V0cHV0X2NvbXBvbmVudF90cnVlqQJaF2RvX3doaWxlX2JvZHlfY29tcG9uZW50cpsAAAByKQAAAHIqAAAA2g10ZXN0X3BpcGVsaW5l3AAAAHM4AAAAAgICAQIBAgECAQIBAgEG\u002BgIJAgEGAQwCDAEMAQwBDAEMAQL6AggG9QIOBgEGAQYBBgEGAQb7FAh6QFRlc3RJZkVsc2UudGVzdF9kb193aGlsZV9jb21iaW5lZF9pZl9lbHNlLjxsb2NhbHM\u002BLnRlc3RfcGlwZWxpbmXpBAAAAGcAAAAAAAA2QFoVc3RyaW5nX3BhcmFtX25vX3NwYWNlKQVykwAAAHKqAAAAcqsAAAByrAAAAHKtAAAAckYAAAByRwAAAHJIAAAAejUke3twYXJlbnQuam9icy5kb193aGlsZV9ib2R5X2Z1bmMub3V0cHV0cy5jb25kaXRpb259fXowJHt7cGFyZW50LmpvYnMucHJpbWl0aXZlX291dHB1dF9jb21wb25lbnRfdHJ1ZX19ckwAAACpBHJOAAAAcg8AAAByOgAAAHIYAAAAck8AAAByUAAAAHodJHt7cGFyZW50LmlucHV0cy5ib29sX3BhcmFtfX1yUgAAAHoeJHt7cGFyZW50LmlucHV0cy5mbG9hdF9wYXJhbX19eh0ke3twYXJlbnQuaW5wdXRzLmlucHV0X2RhdGF9fXocJHt7cGFyZW50LmlucHV0cy5pbnRfcGFyYW19fXocJHt7cGFyZW50LmlucHV0cy5zdHJfcGFyYW19fSkGcqsAAAByrAAAAHKoAAAAcqkAAAByqgAAAHKtAAAAcrYAAAByVQAAAHJWAAAAeiMke3twYXJlbnQuam9icy5kb193aGlsZV9ib2R5X2Z1bmN9fXIPAAAAcrIAAAByrgAAAHKrAAAAcqwAAAByqgAAAHKoAAAAcqkAAAByrQAAACkGcn0AAAByiAAAAHKHAAAAcrQAAABytQAAAHKJAAAAchAAAAApBnJOAAAAcrAAAAByDwAAANoGbGltaXRzcrEAAAByGAAAAHo0JHt7cGFyZW50LmpvYnMuZG9fd2hpbGVfYm9keV9mdW5jLm91dHB1dHMub3V0cHV0XzF9fXo9JHt7cGFyZW50LmpvYnMuZG9fd2hpbGVfYm9keV9mdW5jLm91dHB1dHMuYm9vbF9wYXJhbV9vdXRwdXR9fXo\u002BJHt7cGFyZW50LmpvYnMuZG9fd2hpbGVfYm9keV9mdW5jLm91dHB1dHMuZmxvYXRfcGFyYW1fb3V0cHV0fX16PCR7e3BhcmVudC5qb2JzLmRvX3doaWxlX2JvZHlfZnVuYy5vdXRwdXRzLmludF9wYXJhbV9vdXRwdXR9fXo8JHt7cGFyZW50LmpvYnMuZG9fd2hpbGVfYm9keV9mdW5jLm91dHB1dHMuc3RyX3BhcmFtX291dHB1dH19KQVykwAAAHKUAAAAcpYAAABylQAAAHKXAAAAcrcAAAApBHJaAAAAcrYAAABaB2Rvd2hpbGVytwAAAHJbAAAAcl0AAAByXgAAAHJhAAAAcmIAAAApDnILAAAAcg0AAABymAAAAHIUAAAAcgcAAAByCAAAAHJkAAAAcmUAAAByZgAAAHJnAAAAcmgAAAByaQAAAHJqAAAAcmsAAAApC3JtAAAAciwAAAByuQAAAHJuAAAAcngAAABybwAAAHJwAAAAcnEAAABycgAAAHJzAAAAcnQAAAByKQAAAHK4AAAAcioAAADaHnRlc3RfZG9fd2hpbGVfY29tYmluZWRfaWZfZWxzZdQAAABzQAAAAAIBAgEG/wIDAgEG/woEEAECIgoBBv8IBAwBHP8YA84BAj4OwgI\u002BAsICPgLCAj4CwgI\u002BAsICPhjCAj4CwgI\u002BFMJ6KVRlc3RJZkVsc2UudGVzdF9kb193aGlsZV9jb21iaW5lZF9pZl9lbHNlYwIAAAAAAAAAAAAAAAoAAAAIAAAAAwAAAHMQAQAAdABkAWQCjQGJAnQAZANkAo0BiQF0AGQEZAKNAYkAdAFkBWQGjQGHAIcBhwJmA2QHZAiECIMBfQJ8AoMAfQN0AoMAjw0BAHQDfAN8AYMCfQNXAGQABAAEAIMDAQBuCDEAczJ3AQEAAQABAFkAAQB0BHwDoAWhAKAGoQBnAXQHogFSAI4AfQR8BGQJGQBkChkAZAsZAH0FZAxkDWQOZA9nAmQQZBFnAmQSZBOcBX0GfAV8BmsCfQd8B3OAdAigCWQUfAdmAWQVfAV8BmYCoQR0CKAKfAWhAXQIoAp8BqEBZBacAhYAfQhkF2QYfAhpARYAfQl0C3QIoAx8CaEBgwGCAWQABAB9BQQAfQd9BmQAUwApGU5yLQAAAHIuAAAA\u002BjguL3Rlc3RzL3Rlc3RfY29uZmlncy9jb21wb25lbnRzL2hlbGxvd29ybGRfY29tcG9uZW50LnltbHIwAAAAcjIAAAByegAAAGMAAAAAAAAAAAAAAAAFAAAABQAAABMAAABzUAAAAIgAgwB9AIgCZAFkAo0BfQGIAmQDZAKNAX0CiAFkBHQAZAWNAn0DiAFkBnQAZAWNAn0EdAF8AGoCagN8AXwDZwJ8AnwEZwJkB40DAQBkAFMAKQhOcjUAAAByNgAAAHISAAAAcq4AAACpAnI3AAAA2hFjb21wb25lbnRfaW5fcGF0aHK6AAAAcjgAAAApBHKYAAAAcg8AAAByPAAAAHI9AAAAKQVyPwAAAHJAAAAAckEAAABaBW5vZGUzWgVub2RlNKkDckMAAADaFWhlbGxvX3dvcmxkX2NvbXBvbmVudHJEAAAAcikAAAByKgAAAHJFAAAAUAEAAHMMAAAABgQKAgoCDAEMAR4BekNUZXN0SWZFbHNlLnRlc3RfaWZfZWxzZV9tdWx0aXBsZV9ibG9ja3MuPGxvY2Fscz4uY29uZGl0aW9uX3BpcGVsaW5lckYAAAByRwAAAHJaAAAAckgAAABySQAAAHJKAAAAehYke3twYXJlbnQuam9icy5ub2RlM319cksAAAB6FiR7e3BhcmVudC5qb2JzLm5vZGU0fX1yTAAAAHJNAAAAclsAAAByXQAAAHJeAAAAcmEAAAByYgAAAHJjAAAAcmwAAAByKQAAAHLBAAAAcioAAADaHHRlc3RfaWZfZWxzZV9tdWx0aXBsZV9ibG9ja3NHAQAAc0IAAAACAQIBBv8KAwIBAgEG/wIEAgEE/xIDBgoIAQwBHP8YAzYBAgYO\u002BgIGAvoCBgL6AgYC\u002BgIGAvoCBhj6AgYC\u002BgIGFPp6J1Rlc3RJZkVsc2UudGVzdF9pZl9lbHNlX211bHRpcGxlX2Jsb2Nrc3owVE9ETygyMTc3MzUzKTogY2hlY2sgd2h5IHJlY29yZGVkIHRlc3RzIGZhaWx1cmUuqQJyDwAAANoGcmVhc29uYwIAAAAAAAAAAAAAAAoAAAAIAAAAAwAAAHMSAQAAdABkAWQCjQGJAXQAZANkAo0BiQB0AYMAhwFmAWQEZAWECIMBiQJ0AWQGZAeNAYcAhwGHAmYDZAhkCYQIgwF9AnwCgwB9A3QCgwCPDQEAdAN8A3wBgwJ9A1cAZAAEAAQAgwMBAG4IMQBzNncBAQABAAEAWQABAHQEfAOgBaEAoAahAGcBdAeiAVIAjgB9BHwEZAoZAGQLGQBkDBkAfQVkDWQOZA9kEGcCZBFkEpwEfQZ8BXwGawJ9B3wHc4F0CKAJZBN8B2YBZBR8BXwGZgKhBHQIoAp8BaEBdAigCnwGoQFkFZwCFgB9CGQWZBd8CGkBFgB9CXQLdAigDHwJoQGDAYIBZAAEAH0FBAB9B30GZABTACkYTnItAAAAci4AAAByMAAAAGMAAAAAAAAAAAAAAAAAAAAAAwAAABMAAABzDgAAAIgAZAFkAo0BAQBkAFMAKQNOchIAAAByNgAAAHIpAAAAcikAAABydgAAAHIpAAAAcioAAADaCHN1YmdyYXBocwEAAHMCAAAADgJ6QlRlc3RJZkVsc2UudGVzdF9pZl9lbHNlX211bHRpcGxlX2Jsb2Nrc19zdWJncmFwaC48bG9jYWxzPi5zdWJncmFwaHIyAAAAcnoAAABjAAAAAAAAAAAAAAAAAwAAAAQAAAATAAAAcy4AAACIAIMAfQCIAWQBZAKNAX0BiAKDAH0CdAB8AGoBagJ8AXwCZwJkA40CAQBkAFMAKQROcjUAAAByNgAAAHKzAAAAcjsAAAByPgAAAKkDckMAAAByRAAAAHLGAAAAcikAAAByKgAAAHJFAAAAdwEAAHMIAAAABgQKAgYCGAJ6TFRlc3RJZkVsc2UudGVzdF9pZl9lbHNlX211bHRpcGxlX2Jsb2Nrc19zdWJncmFwaC48bG9jYWxzPi5jb25kaXRpb25fcGlwZWxpbmVyRgAAAHJHAAAAcloAAABySAAAAHJJAAAAckoAAABySwAAAHJMAAAAcrsAAAByWwAAAHJdAAAAcl4AAAByYQAAAHJiAAAAcmMAAABybAAAAHIpAAAAcscAAAByKgAAANoldGVzdF9pZl9lbHNlX211bHRpcGxlX2Jsb2Nrc19zdWJncmFwaGoBAABzRAAAAAICAgEG/wIDAgEG/wQEDgECAwIBBP8SAwYJCAEMARz/GAMwAQIFDvsCBQL7AgUC\u002BwIFAvsCBQL7AgUY\u002BwIFAvsCBRT7ejBUZXN0SWZFbHNlLnRlc3RfaWZfZWxzZV9tdWx0aXBsZV9ibG9ja3Nfc3ViZ3JhcGhOKQ9yJgAAAHInAAAAcigAAAByCgAAAHJ1AAAAcnkAAAByewAAAHKmAAAAcr0AAABywwAAANoGcHl0ZXN02gRtYXJr2gZza2lwaWZyBQAAAHLIAAAAcikAAAByKQAAAHIpAAAAcioAAAByKwAAAC4AAABzEgAAAAgADgEONw4pDiAOJQ5zEiMUAXIrAAAAYwAAAAAAAAAAAAAAAAAAAAAEAAAAQAAAAHNAAAAAZQBaAWQAWgJlA2QBZAKEAIMBWgRlBWoGoAdkA6EBZARlCGYCZAVkBoQEgwFaCWQEZQhmAmQHZAiEBFoKZAlTACkK2hNUZXN0RG9XaGlsZVBpcGVsaW5lYwEAAAAAAAAAAAAAAAEAAAACAAAAQwAAAHMIAAAAdABkAYMBUwApAk56SC4vdGVzdHMvdGVzdF9jb25maWdzL2RzbF9waXBlbGluZS9kb193aGlsZS9iYXNpY19jb21wb25lbnQvY29tcG9uZW50LnltbCkBcgsAAACpAXJtAAAAcikAAAByKQAAAHIqAAAA2hVfYmFzaWNfY29tcG9uZW50X2Z1bmORAQAAcwIAAAAIAnopVGVzdERvV2hpbGVQaXBlbGluZS5fYmFzaWNfY29tcG9uZW50X2Z1bmPaG21vY2tfYW5vbl9jb21wb25lbnRfdmVyc2lvbnIsAAAAYwIAAAAAAAAAAAAAAAQAAAAHAAAAAwAAAHOEAAAAdABkAXQBZAJkA2QEjQJkBXQBZAZkB40BZgSHAWYBZAhkCYQMgwGJAHQAZAF0AWQCZAeNAWQFdAFkBmQHjQFmBIcAhwFmAmQKZAuEDIMBfQJ8AmQMdAFkBnQCdAN0BIMBagWDAWQNjQJkDo0CfQNkD3wDagZfB3QIfAN8AYMCAQBkAFMAKRBOcjcAAAByggAAAFQpAnIYAAAA2ghvcHRpb25hbHLAAAAAcn4AAAByjQAAAGMCAAAAAAAAAAAAAAADAAAABAAAABMAAABzFAAAAIgAagB8AHwBZAGNAn0CfAJqAVMAKQJOcr8AAACpAnLOAAAAcjwAAAApA3I3AAAAcsAAAAByQwAAAHLNAAAAcikAAAByKgAAANogZG9fd2hpbGVfYm9keV9waXBlbGluZV9jb21wb25lbnSXAQAAcwoAAAAEBgIBAgEG/gYEelRUZXN0RG9XaGlsZVBpcGVsaW5lLnRlc3RfZG9fd2hpbGVfcGlwZWxpbmUuPGxvY2Fscz4uZG9fd2hpbGVfYm9keV9waXBlbGluZV9jb21wb25lbnRjAgAAAAAAAAAAAAAABwAAAAcAAAATAAAAc34AAACIAHwAfAFkAY0CfQJ0AHwCfAJqAWoCfAJqAWoDfAJqBGoFaQFkAmQDjQR9A4gBagZ8AHwBZAGNAn0EdAB8BHwEagFqAmQEfARqBGoHfARqAWoDfARqBGoFaQJkAmQDjQR9BYgAZAB8BGoBagNkAY0CfQZkBXwGagFqA2kBUwApBk5yvwAAAOkFAAAAcq8AAADaEG91dHB1dF9pbl9udW1iZXLaDm91dHB1dF9pbl9wYXRoKQhyEAAAAHI8AAAA2hppc19udW1iZXJfbGFyZ2VyX3RoYW5femVyb3LVAAAAclcAAABywAAAAHLOAAAAcjcAAACpB3I3AAAAcsAAAABaFmRvX3doaWxlX2JvZHlfcGlwZWxpbmVaFmRvX3doaWxlX3dpdGhfcGlwZWxpbmXaEWNvbW1hbmRfY29tcG9uZW50Wh9kb193aGlsZV93aXRoX2NvbW1hbmRfY29tcG9uZW50ckMAAACpAnLSAAAAcm0AAAByKQAAAHIqAAAA2hZwaXBlbGluZV93aXRoX2RvX3doaWxlowEAAHM4AAAAAgYCAQIBBv4CBAIBBgEMAgL/AgMG\u002BgQJAgECAQb\u002BAgQCAQYBCAIMAQL\u002BAgQG\u002BQILAgEGAQb\u002BDAR6SlRlc3REb1doaWxlUGlwZWxpbmUudGVzdF9kb193aGlsZV9waXBlbGluZS48bG9jYWxzPi5waXBlbGluZV93aXRoX2RvX3doaWxlchIAAAByFwAAAHK/AAAAcjIAAACpCXINAAAAcgkAAADaA3N0cnICAAAA2ghfX2ZpbGVfX9oGcGFyZW502ghzZXR0aW5nc9oPZGVmYXVsdF9jb21wdXRlcgcAAACpBHJtAAAAciwAAABy2gAAAHJuAAAAcikAAABy2QAAAHIqAAAA2hZ0ZXN0X2RvX3doaWxlX3BpcGVsaW5llQEAAHMkAAAAAgICAQoBAv8IAhD\u002BAgsCAQgBAv8IAhL\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\u002BcAhYAfQhkIGQhfAhpARYAfQl0DXQKoA58CaEBgwGCAWQABAB9BQQAfQd9BmQAUwApIk56PS4vdGVzdHMvdGVzdF9jb25maWdzL2NvbXBvbmVudHMvaGVsbG93b3JsZF9jb21wb25lbnRfYWx0MS55bWxyLgAAAGMAAAAAAAAAAAAAAAADAAAABQAAABMAAABzPAAAAIgAdABkAY0BfQB0AXwAZAJkA2kBZAJkBGkBZwJkBY0CfQGIAHwBagJqA2QDZAaNAn0CZAd8Al8EZABTACkITnLpAAAAcjcAAAByNQAAAHISAAAAcuoAAACpAnLAAAAAcjcAAAByMgAAAHLsAAAAcu4AAABy8gAAAHIpAAAAcioAAABy8wAAAGICAABzFgAAAAoCAgECAQYCBgEC/gb\u002BAgcIAQb/CgN6ZlRlc3RQYXJhbGxlbEZvclBpcGVsaW5lLnRlc3RfZHNsX3BhcmFsbGVsX2Zvcl9waXBlbGluZV91bnByb3ZpZGVkX2lucHV0Ljxsb2NhbHM\u002BLnBhcmFsbGVsX2Zvcl9waXBlbGluZXIyAAAAckYAAAByRwAAAHJPAAAAclAAAAByUQAAAHJSAAAAcvQAAAByvwAAAHLxAAAAclUAAABy9QAAAHLAAAAAchUAAAByFgAAAHL3AAAAcu8AAAByVgAAAHJIAAAAcvkAAABy\u002BgAAAHIRAAAAcvsAAABy/AAAAHJbAAAAcl0AAAByXgAAAHJhAAAAcmIAAABy/QAAAHL\u002BAAAAcikAAABy8gAAAHIqAAAA2i90ZXN0X2RzbF9wYXJhbGxlbF9mb3JfcGlwZWxpbmVfdW5wcm92aWRlZF9pbnB1dF8CAABzNAAAAAoBAgIOAQYOCAEIAgwBHP8YAmIBAh8O4QIfAuECHwLhAh8C4QIfAuECHxjhAh8C4QIfFOF6R1Rlc3RQYXJhbGxlbEZvclBpcGVsaW5lLnRlc3RfZHNsX3BhcmFsbGVsX2Zvcl9waXBlbGluZV91bnByb3ZpZGVkX2lucHV0YwIAAAAAAAAAAAAAAAoAAAAIAAAAAwAAAHMsAQAAdABkAWQCjQGJAHQBZCJkBHQCZgKHAGYBZAVkBoQNgwGJAXQBhwCHAWYCZAdkCIQIgwF9AnwCgwB9A2QJfANqA18EdAWDAI8NAQB0BnwDfAGDAn0DVwBkAAQABACDAwEAbggxAHM0dwEBAAEAAQBZAAEAdAd8A6AIoQCgCaEAZwF0CqIBUgCOAH0EfARkChkAZAsZAH0FZAxkCWQNZA5kD2QQnAJpAWQRZBJkE5wFZAxkFGQVZBacA2QXZBhkGWQaZBucBGQcnAN9BnwFfAZrAn0HfAdzjnQLoAxkHXwHZgFkHnwFfAZmAqEEdAugDXwFoQF0C6ANfAahAWQfnAIWAH0IZCBkIXwIaQEWAH0JdA50C6APfAmhAYMBggFkAAQAfQUEAH0HfQZkAFMAKSNOcr4AAAByLgAAAOkKAAAAcjcAAABjAQAAAAAAAAAAAAAAAgAAAAQAAAATAAAA8xgAAACIAHQAfABkAY0CfQFkAnwBagFqAmkBUwCpA05yAAEAAHLtAAAAqQNymAAAAHI8AAAAcu0AAACpAnI3AAAAcpkAAABy8gAAAHIpAAAAcioAAADaCXN1Yl9ncmFwaJsCAADzBAAAAAwCDAF6U1Rlc3RQYXJhbGxlbEZvclBpcGVsaW5lLnRlc3RfcGFyYWxsZWxfZm9yX3BpcGVsaW5lX3dpdGhfc3ViZ3JhcGguPGxvY2Fscz4uc3ViX2dyYXBoYwAAAAAAAAAAAAAAAAMAAAAFAAAAEwAAAPM2AAAAiAGDAH0AdAB8AGQBZAJpAWQBZANpAWcCZASNAn0BiAB8AWoBagJkBY0BfQJkBnwCXwNkAFMAqQdOcjcAAAByNQAAAHISAAAAcuoAAABy6QAAAHIyAAAAqQRyEQAAAHI8AAAAcu0AAAByNAAAAHLuAAAAqQJywgAAAHIHAQAAcikAAAByKgAAAHLzAAAAoAIAAPMWAAAABgICAQIBBgIGAQL\u002BBv4CBwYBBv8KA3pfVGVzdFBhcmFsbGVsRm9yUGlwZWxpbmUudGVzdF9wYXJhbGxlbF9mb3JfcGlwZWxpbmVfd2l0aF9zdWJncmFwaC48bG9jYWxzPi5wYXJhbGxlbF9mb3JfcGlwZWxpbmVyMgAAAHJGAAAAckcAAAByTwAAAHLAAAAAclAAAABy9AAAAHJSAAAAcvEAAAByVQAAAHL1AAAAcu8AAAByDQAAAHJZAAAAckgAAABy\u002BQAAAHL6AAAAchEAAABy\u002BwAAAHL8AAAAclsAAAByXQAAAHJeAAAAcmEAAAByYgAAACkBcgIBAACpEHILAAAAcg0AAADaA2ludHLfAAAAcuAAAAByFAAAAHIHAAAAcggAAAByZAAAAHJlAAAAcmYAAAByZwAAAHJoAAAAcmkAAAByagAAAHJrAAAAcv4AAAByKQAAAHIMAQAAcioAAADaKHRlc3RfcGFyYWxsZWxfZm9yX3BpcGVsaW5lX3dpdGhfc3ViZ3JhcGiYAgAAczgAAAAKAQICFgECBBABBg4IAQgCDAEc/xgDTgECFA7sAhQC7AIUAuwCFALsAhQC7AIUGOwCFALsAhQU7HpAVGVzdFBhcmFsbGVsRm9yUGlwZWxpbmUudGVzdF9wYXJhbGxlbF9mb3JfcGlwZWxpbmVfd2l0aF9zdWJncmFwaGMCAAAAAAAAAAAAAAAKAAAACAAAAAMAAABzKgEAAHQAZAFkAo0BiQB0AWQDdAJmAocAZgFkBGQFhAyDAYkBdAGHAIcBZgJkBmQHhAiDAX0CfAKDAH0DZAh8A2oDXwR0BYMAjw0BAHQGfAN8AYMCfQNXAGQABAAEAIMDAQBuCDEAczN3AQEAAQABAFkAAQB0B3wDoAihAKAJoQBnAXQKogFSAI4AfQR8BGQJGQBkChkAfQVkC2QIZAxkDWQOZA\u002BcAmkBZBBkEWQSnAVkC2QTZBRkFZwDZBZkF2QYZBlkGpwEZBucA30GfAV8BmsCfQd8B3ONdAugDGQcfAdmAWQdfAV8BmYCoQR0C6ANfAWhAXQLoA18BqEBZB6cAhYAfQhkH2QgfAhpARYAfQl0DnQLoA98CaEBgwGCAWQABAB9BQQAfQd9BmQAUwApIU5yvgAAAHIuAAAAcjcAAABjAQAAAAAAAAAAAAAAAgAAAAQAAAATAAAAcgMBAAByBAEAAHIFAQAAcgYBAABy8gAAAHIpAAAAcioAAAByBwEAAM8CAAByCAEAAHpfVGVzdFBhcmFsbGVsRm9yUGlwZWxpbmUudGVzdF9wYXJhbGxlbF9mb3JfcGlwZWxpbmVfc3ViZ3JhcGhfdW5wcm92aWRlZF9pbnB1dC48bG9jYWxzPi5zdWJfZ3JhcGhjAAAAAAAAAAAAAAAAAwAAAAUAAAATAAAAcgkBAAByCgEAAHILAQAAcu4AAAByDAEAAHIpAAAAcioAAABy8wAAANQCAAByDQEAAHprVGVzdFBhcmFsbGVsRm9yUGlwZWxpbmUudGVzdF9wYXJhbGxlbF9mb3JfcGlwZWxpbmVfc3ViZ3JhcGhfdW5wcm92aWRlZF9pbnB1dC48bG9jYWxzPi5wYXJhbGxlbF9mb3JfcGlwZWxpbmVyMgAAAHJGAAAAckcAAAByTwAAAHLAAAAAclAAAABy9AAAAHJSAAAAcvEAAAByVQAAAHL1AAAAcu8AAAByDQAAAHJZAAAAckgAAABy\u002BQAAAHL6AAAAchEAAABy\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y7QAAAHIsAQAAci0BAAByGQEAAHLyAAAAcikAAAByKgAAAHLzAAAAbgMAAHIaAQAAemhUZXN0UGFyYWxsZWxGb3JQaXBlbGluZS50ZXN0X3BhcmFsbGVsX2Zvcl9waXBlbGluZV93aXRoX3ByaW1pdGl2ZV9vdXRwdXRzLjxsb2NhbHM\u002BLnBhcmFsbGVsX2Zvcl9waXBlbGluZWMAAAAAAAAAAAAAAAAAAAAAAQAAABMAAAByIAEAAHIhAQAAcikAAAByKQAAAHIiAQAAcikAAAByKgAAAHIjAQAAfgMAAHIkAQAAemJUZXN0UGFyYWxsZWxGb3JQaXBlbGluZS50ZXN0X3BhcmFsbGVsX2Zvcl9waXBlbGluZV93aXRoX3ByaW1pdGl2ZV9vdXRwdXRzLjxsb2NhbHM\u002BLnBhcmVudF9waXBlbGluZXIyAAAAcvMAAAByRgAAAHIlAQAAcoUAAAApAnKAAAAAchgAAAByEgEAACkDci0BAAByLAEAAHLtAAAAclsAAAByXQAAAHJeAAAAcmEAAAByYgAAAHJHAAAAcvAAAABy\u002BQAAAHL6AAAAclAAAAB6KSR7e3BhcmVudC5vdXRwdXRzLmNvbXBvbmVudF9vdXRfYm9vbGVhbn19chsBAAB6KCR7e3BhcmVudC5vdXRwdXRzLmNvbXBvbmVudF9vdXRfbnVtYmVyfX1yHAEAAHIRAAAAckgAAAByJgEAACkPcgsAAAByDQAAAHLfAAAAcuAAAAByRwAAAHInAQAAcmQAAAByZQAAAHJnAAAAcmgAAAByaQAAAHJqAAAAcmsAAAByFAAAAHIHAAAAKQpybQAAAHIsAAAAciMBAABybgAAAHIoAQAAcnAAAABycQAAAHJyAAAAcnMAAABydAAAAHIpAAAAcikBAAByKgAAANoxdGVzdF9wYXJhbGxlbF9mb3JfcGlwZWxpbmVfd2l0aF9wcmltaXRpdmVfb3V0cHV0c2ADAABzbAAAAAIBAgECAwYBBgEIAQT9Av8C/wb\u002BAg0OAQIPDgEGAwgBFAI4AQIEDvwCBAL8AgQC/AIEAvwCBAL8AgQY/AIEAvwCBBD8TAYCCg72AgoC9gIKAvYCCgL2AgoC9gIKGPYCCgL2AgoQ9ggNDAEi/3pJVGVzdFBhcmFsbGVsRm9yUGlwZWxpbmUudGVzdF9wYXJhbGxlbF9mb3JfcGlwZWxpbmVfd2l0aF9wcmltaXRpdmVfb3V0cHV0c2MCAAAAAAAAAAAAAAAKAAAACAAAAAMAAABzBgEAAHQAZAFkAo0BiQB0AYcAZgFkA2QEhAiDAX0CfAKDAH0DZAV8A2oCXwN0BIMAjw0BAHQFfAN8AYMCAQBXAGQABAAEAIMDAQBuCDEAcyd3AQEAAQABAFkAAQB0BnwDoAehAKAIoQBnAXQJogFSAI4AfQR8BGQGGQBkBxkAfQVkCGQJZApkC5wDZAxkDWQOZA9kEGQRZBKcAmkBZBNkFJwFZBWcAn0GfAV8BmsCfQd8B3N7dAqgC2QWfAdmAWQXfAV8BmYCoQR0CqAMfAWhAXQKoAx8BqEBZBicAhYAfQhkGWQafAhpARYAfQl0DXQKoA58CaEBgwGCAWQABAB9BQQAfQd9BmQAUwApG056Qi4vdGVzdHMvdGVzdF9jb25maWdzL2NvbXBvbmVudHMvaGVsbG93b3JsZF9jb21wb25lbnRfbm9faW5wdXRzLnltbHIuAAAAYwAAAAAAAAAAAAAAAAQAAAAFAAAAEwAAAHM\u002BAAAAiACDAH0AaQB9AXQAZAGDAUQAXQl9AmkAfAFkAnwCmwCdAjwAcQl0AXwAfAFkA40CfQNkBHwDagJqA2kBUwApBU5yAgEAAFoFc2lsb19y6gAAAHLtAAAAKQTaBXJhbmdlchEAAAByPAAAAHLtAAAAKQRy7wAAAFoOZm9yZWFjaF9jb25maWfaAWly8AAAAHLyAAAAcikAAAByKgAAAHLzAAAAoQMAAHMOAAAABgIEAQwBEAEMAQgCBP96Y1Rlc3RQYXJhbGxlbEZvclBpcGVsaW5lLnRlc3RfcGFyYWxsZWxfZm9yX3BpcGVsaW5lX3dpdGhfZW1wdHlfaW5wdXRzLjxsb2NhbHM\u002BLnBhcmFsbGVsX2Zvcl9waXBlbGluZXIyAAAAckYAAAByRwAAAHoOWUFNTC5DT01QT05FTlRy7wAAAHJVAAAAclkAAABySAAAAHL5AAAAeox7InNpbG9fMCI6IHt9LCAic2lsb18xIjoge30sICJzaWxvXzIiOiB7fSwgInNpbG9fMyI6IHt9LCAic2lsb180Ijoge30sICJzaWxvXzUiOiB7fSwgInNpbG9fNiI6IHt9LCAic2lsb183Ijoge30sICJzaWxvXzgiOiB7fSwgInNpbG9fOSI6IHt9fXLtAAAAclAAAAByHAEAAHIbAQAAchEAAAApBXJOAAAAcrAAAABy6wAAAHI8AAAAchgAAAByGQEAAHJbAAAAcl0AAAByXgAAAHJhAAAAcmIAAABy/QAAAHL\u002BAAAAcikAAABy8gAAAHIqAAAA2ix0ZXN0X3BhcmFsbGVsX2Zvcl9waXBlbGluZV93aXRoX2VtcHR5X2lucHV0c5wDAABzOAAAAAIBAgEG/wIEDgEGCggBCAIMARz/GANCAQIODvICDgLyAg4C8gIOAvICDgLyAg4Y8gIOAvICDhTyekRUZXN0UGFyYWxsZWxGb3JQaXBlbGluZS50ZXN0X3BhcmFsbGVsX2Zvcl9waXBlbGluZV93aXRoX2VtcHR5X2lucHV0c2MCAAAAAAAAAAAAAAAKAAAACAAAAAMAAABz8AAAAHQAZAFkAo0BiQB0AYcAZgFkA2QEhAiDAX0CfAKDAH0DZAV8A2oCXwN0BIMAjw0BAHQFfAN8AYMCfQNXAGQABAAEAIMDAQBuCDEAcyd3AQEAAQABAFkAAQB0BnwDoAehAKAIoQBnAXQJogFSAI4AfQR8BGQGGQBkBxkAZAgZAH0FZAlkCmQLZAxkDZwEfQZ8BXwGawJ9B3wHc3B0CqALZA58B2YBZA98BXwGZgKhBHQKoAx8BaEBdAqgDHwGoQFkEJwCFgB9CGQRZBJ8CGkBFgB9CXQNdAqgDnwJoQGDAYIBZAAEAH0FBAB9B30GZABTACkTTnK\u002BAAAAci4AAABjAAAAAAAAAAAAAAAAAwAAAAYAAAATAAAAczQAAACIAIMAfQB0AHwAZAF0AWQCnAJkA3QBZAKcAmcCZASNAn0BiAB8AWoCagNkBY0BfQJkAFMAKQZOcjUAAAByvwAAAHISAAAAcuoAAABy6QAAACkEchEAAABymAAAAHI8AAAAcu0AAABy7gAAAHLyAAAAcikAAAByKgAAAHLzAAAAxgMAAHMUAAAABgICAQIBCAIIAQL\u002BBv4CBwYBCv96YlRlc3RQYXJhbGxlbEZvclBpcGVsaW5lLnRlc3RfcGFyYWxsZWxfZm9yX3BpcGVsaW5lX3dpdGhfYXNzZXRfaXRlbXMuPGxvY2Fscz4ucGFyYWxsZWxfZm9yX3BpcGVsaW5lcjIAAAByRgAAAHJHAAAAcvAAAABy\u002BQAAAGEoAQAAW3siY29tcG9uZW50X2luX3BhdGgiOiB7InVyaSI6ICJodHRwczovL2RwcmVwZGF0YS5ibG9iLmNvcmUud2luZG93cy5uZXQvZGVtby9UaXRhbmljLmNzdiIsICJqb2JfaW5wdXRfdHlwZSI6ICJ1cmlfZmlsZSJ9LCAiY29tcG9uZW50X2luX251bWJlciI6IDF9LCB7ImNvbXBvbmVudF9pbl9wYXRoIjogeyJ1cmkiOiAiaHR0cHM6Ly9kcHJlcGRhdGEuYmxvYi5jb3JlLndpbmRvd3MubmV0L2RlbW8vVGl0YW5pYy5jc3YiLCAiam9iX2lucHV0X3R5cGUiOiAidXJpX2ZpbGUifSwgImNvbXBvbmVudF9pbl9udW1iZXIiOiAyfV1yEQAAAHJIAAAAKQRysAAAAHLrAAAAchgAAAByTgAAAHJbAAAAcl0AAAByXgAAAHJhAAAAcmIAAABy/QAAAHL\u002BAAAAcikAAABy8gAAAHIqAAAA2it0ZXN0X3BhcmFsbGVsX2Zvcl9waXBlbGluZV93aXRoX2Fzc2V0X2l0ZW1zwwMAAHM0AAAACgECAg4BBg0IAQgCDAEc/xgDLAECDA70AgwC9AIMAvQCDAL0AgwC9AIMGPQCDAL0AgwU9HpDVGVzdFBhcmFsbGVsRm9yUGlwZWxpbmUudGVzdF9wYXJhbGxlbF9mb3JfcGlwZWxpbmVfd2l0aF9hc3NldF9pdGVtc04pDHImAAAAcicAAAByKAAAAHIKAAAAcv8AAAByAQEAAHIQAQAAchEBAAByKgEAAHIuAQAAcjEBAAByMgEAAHIpAAAAcikAAAByKQAAAHIqAAAAcugAAAAgAgAAcxIAAAAIAA4GDjkOOQ40DjQOYA48Eidy6AAAACku2ghidWlsdGluc3KgAAAA2hlfcHl0ZXN0LmFzc2VydGlvbi5yZXdyaXRl2glhc3NlcnRpb27aB3Jld3JpdGVyZwAAANoHcGF0aGxpYnICAAAAcskAAABaIGF6dXJlLmFpLm1sLmRzbC5fZ3JvdXBfZGVjb3JhdG9ycgMAAADaEmRldnRvb2xzX3Rlc3R1dGlsc3IEAAAAcgUAAADaFHRlc3RfdXRpbGl0aWVzLnV0aWxzcgYAAAByBwAAAHIIAAAA2gthenVyZS5haS5tbHIJAAAAcgoAAAByCwAAAHIMAAAAWg9henVyZS5haS5tbC5kc2xyDQAAAFoaYXp1cmUuYWkubWwuZHNsLl9jb25kaXRpb25yDwAAAFoZYXp1cmUuYWkubWwuZHNsLl9kb193aGlsZXIQAAAAWh1henVyZS5haS5tbC5kc2wuX3BhcmFsbGVsX2ZvcnIRAAAA2gVfdXRpbHITAAAAchQAAABymAAAAHJmAAAAcsoAAABy5wAAAHIjAAAA2gdlMmV0ZXN02g1waXBlbGluZV90ZXN0ciUAAAByKwAAAHLMAAAAcssAAABy6AAAAHIpAAAAcikAAAByKQAAAHIqAAAA2gg8bW9kdWxlPgEAAABzUAAAACYACAIMARABFAEYAgwBDAEMAQwBEAICAgIBAgEG/ggFBggCAQIBAgECAQIBAgECAQIBAvgOCgYBBgEYARAEAH8AfxBkAH8GEQQBAgIE/RYF",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "UNMEx5GbR7peUfQOoMlfzw==",
        "Date": "Tue, 11 Apr 2023 18:38:21 GMT",
        "ETag": "\u00220x8DB3ABBED69A379\u0022",
        "Last-Modified": "Tue, 11 Apr 2023 18:38:21 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "9aak195fUAE=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2021-12-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://sab6b272nokaeak.blob.core.windows.net/azureml-blobstore-061273aa-2956-4aff-8628-0fad8c820f9e/LocalUpload/00000000000000000000000000000000/e2etests/test_controlflow_pipeline.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "45400",
        "Content-MD5": "AB68Qt0J6I2Tl29cLLtkDQ==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.15.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 11 Apr 2023 18:38:22 GMT",
        "x-ms-version": "2021-12-02"
      },
      "RequestBody": "",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "AB68Qt0J6I2Tl29cLLtkDQ==",
        "Date": "Tue, 11 Apr 2023 18:38:21 GMT",
        "ETag": "\u00220x8DB3ABBED69F191\u0022",
        "Last-Modified": "Tue, 11 Apr 2023 18:38:21 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "AFIC1EaOc2M=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2021-12-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://sab6b272nokaeak.blob.core.windows.net/azureml-blobstore-061273aa-2956-4aff-8628-0fad8c820f9e/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_pipeline.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "149230",
        "Content-MD5": "J\u002B6bv2ZgF6Q27Jb2pzkdxw==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.15.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 11 Apr 2023 18:38:22 GMT",
        "x-ms-version": "2021-12-02"
      },
      "RequestBody": "\u002BIE5vbmU6DQogICAgICAgIGNvbXBvbmVudF9mdW5jID0gbG9hZF9jb21wb25lbnQoDQogICAgICAgICAgICBjbGllbnQ9Y2xpZW50LA0KICAgICAgICAgICAgbmFtZT1oZWxsb193b3JsZF9jb21wb25lbnQubmFtZSwNCiAgICAgICAgICAgIHZlcnNpb249aGVsbG9fd29ybGRfY29tcG9uZW50LnZlcnNpb24sDQogICAgICAgICkNCg0KICAgICAgICBjb21wb25lbnRfbm9kZSA9IGNvbXBvbmVudF9mdW5jKGNvbXBvbmVudF9pbl9udW1iZXI9MTAsIGNvbXBvbmVudF9pbl9wYXRoPWpvYl9pbnB1dCkNCg0KICAgICAgICBjb21wb25lbnRfam9iX2RpY3QgPSBjb21wb25lbnRfbm9kZS5fdG9fcmVzdF9vYmplY3QoKQ0KICAgICAgICBhc3NlcnQgaXNfQVJNX2lkX2Zvcl9yZXNvdXJjZShjb21wb25lbnRfam9iX2RpY3RbImNvbXBvbmVudElkIl0pDQogICAgICAgIG9taXRfZmllbGRzID0gWyJjb21wb25lbnRJZCIsICJfc291cmNlIiwgInByb3BlcnRpZXMiXQ0KICAgICAgICBjb21wb25lbnRfam9iX2RpY3QgPSBweWRhc2gub21pdChjb21wb25lbnRfam9iX2RpY3QsICpvbWl0X2ZpZWxkcykNCiAgICAgICAgYXNzZXJ0IGNvbXBvbmVudF9qb2JfZGljdCA9PSB7DQogICAgICAgICAgICAiaW5wdXRzIjogew0KICAgICAgICAgICAgICAgICJjb21wb25lbnRfaW5fbnVtYmVyIjogeyJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwgInZhbHVlIjogIjEwIn0sDQogICAgICAgICAgICAgICAgImNvbXBvbmVudF9pbl9wYXRoIjogew0KICAgICAgICAgICAgICAgICAgICAiam9iX2lucHV0X3R5cGUiOiAidXJpX2ZpbGUiLA0KICAgICAgICAgICAgICAgICAgICAidXJpIjogImh0dHBzOi8vZHByZXBkYXRhLmJsb2IuY29yZS53aW5kb3dzLm5ldC9kZW1vL1RpdGFuaWMuY3N2IiwNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICJyZXNvdXJjZXMiOiB7Imluc3RhbmNlX2NvdW50IjogMX0sDQogICAgICAgICAgICAidHlwZSI6ICJjb21tYW5kIiwNCiAgICAgICAgfQ0KDQogICAgZGVmIHRlc3RfZGlzdHJpYnV0aW9uX2NvbXBvbmVudHMoc2VsZiwgY2xpZW50OiBNTENsaWVudCwgcmFuZHN0cjogQ2FsbGFibGVbW3N0cl0sIHN0cl0pIC0\u002BIE5vbmU6DQogICAgICAgIG1waV9mdW5jID0gbG9hZF9jb21wb25lbnQoc291cmNlPXN0cihjb21wb25lbnRzX2RpciAvICJoZWxsb3dvcmxkX2NvbXBvbmVudF9tcGkueW1sIikpDQogICAgICAgIHB5dG9yY2hfZnVuYyA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1zdHIoY29tcG9uZW50c19kaXIgLyAiaGVsbG93b3JsZF9jb21wb25lbnRfcHl0b3JjaC55bWwiKSkNCiAgICAgICAgdGVuc29yZmxvd19mdW5jID0gbG9hZF9jb21wb25lbnQoc291cmNlPXN0cihjb21wb25lbnRzX2RpciAvICJoZWxsb3dvcmxkX2NvbXBvbmVudF90ZW5zb3JmbG93LnltbCIpKQ0KDQogICAgICAgIEBkc2wucGlwZWxpbmUoDQogICAgICAgICAgICBuYW1lPXJhbmRzdHIoInBpcGVsaW5lX25hbWUiKSwNCiAgICAgICAgICAgIGRlc2NyaXB0aW9uPSJUaGUgaGVsbG8gd29ybGQgcGlwZWxpbmUgam9iIiwNCiAgICAgICAgICAgIHRhZ3M9eyJvd25lciI6ICJzZGt0ZWFtIiwgInRhZyI6ICJ0YWd2YWx1ZSJ9LA0KICAgICAgICAgICAgY29tcHV0ZT0iZ3B1LWNsdXN0ZXIiLA0KICAgICAgICAgICAgZXhwZXJpbWVudF9uYW1lPWV4cGVyaW1lbnRfbmFtZSwNCiAgICAgICAgKQ0KICAgICAgICBkZWYgcGlwZWxpbmVfZGlzdHJpYnV0aW9uX2NvbXBvbmVudHMoam9iX2luX251bWJlciwgam9iX2luX3BhdGgpOg0KICAgICAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X21waSA9IG1waV9mdW5jKGNvbXBvbmVudF9pbl9udW1iZXI9am9iX2luX251bWJlciwgY29tcG9uZW50X2luX3BhdGg9am9iX2luX3BhdGgpDQogICAgICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfbXBpLmRpc3RyaWJ1dGlvbiA9IE1waURpc3RyaWJ1dGlvbigpDQogICAgICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfbXBpLmRpc3RyaWJ1dGlvbi5wcm9jZXNzX2NvdW50X3Blcl9pbnN0YW5jZSA9IDINCg0KICAgICAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X3B5dG9yY2ggPSBweXRvcmNoX2Z1bmMoDQogICAgICAgICAgICAgICAgY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5fcGF0aA0KICAgICAgICAgICAgKQ0KICAgICAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X3B5dG9yY2guZGlzdHJpYnV0aW9uID0gUHlUb3JjaERpc3RyaWJ1dGlvbigpDQogICAgICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfcHl0b3JjaC5kaXN0cmlidXRpb24ucHJvY2Vzc19jb3VudF9wZXJfaW5zdGFuY2UgPSAyDQoNCiAgICAgICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudF90ZW5zb3JmbG93ID0gdGVuc29yZmxvd19mdW5jKA0KICAgICAgICAgICAgICAgIGNvbXBvbmVudF9pbl9udW1iZXI9am9iX2luX251bWJlciwgY29tcG9uZW50X2luX3BhdGg9am9iX2luX3BhdGgNCiAgICAgICAgICAgICkNCiAgICAgICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudF90ZW5zb3JmbG93LmRpc3RyaWJ1dGlvbiA9IFRlbnNvckZsb3dEaXN0cmlidXRpb24oKQ0KICAgICAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X3RlbnNvcmZsb3cuZGlzdHJpYnV0aW9uLndvcmtlcl9jb3VudCA9IDINCg0KICAgICAgICBwaXBlbGluZSA9IHBpcGVsaW5lX2Rpc3RyaWJ1dGlvbl9jb21wb25lbnRzKDEwLCBqb2JfaW5wdXQpDQogICAgICAgIGNsaWVudC5qb2JzLmNyZWF0ZV9vcl91cGRhdGUocGlwZWxpbmUsIGV4cGVyaW1lbnRfbmFtZT1leHBlcmltZW50X25hbWUpDQoNCiAgICBkZWYgdGVzdF9jb21wb25lbnRfd2l0aF9iaW5kaW5nKHNlbGYsIGNsaWVudDogTUxDbGllbnQsIHJhbmRzdHI6IENhbGxhYmxlW1tzdHJdLCBzdHJdKToNCiAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X3lhbWwgPSBzdHIoY29tcG9uZW50c19kaXIgLyAiaGVsbG93b3JsZF9jb21wb25lbnQueW1sIikNCiAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X2Z1bmMgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9aGVsbG9fd29ybGRfY29tcG9uZW50X3lhbWwpDQoNCiAgICAgICAgbWVyZ2Vfb3V0cHV0c19jb21wb25lbnRfeWFtbCA9IHN0cihjb21wb25lbnRzX2RpciAvICJtZXJnZV9vdXRwdXRzX2NvbXBvbmVudC55bWwiKQ0KICAgICAgICBtZXJnZV9vdXRwdXRzX2NvbXBvbmVudF9mdW5jID0gbG9hZF9jb21wb25lbnQoc291cmNlPW1lcmdlX291dHB1dHNfY29tcG9uZW50X3lhbWwpDQoNCiAgICAgICAgQGRzbC5waXBlbGluZSgNCiAgICAgICAgICAgIG5hbWU9cmFuZHN0cigicGlwZWxpbmVfbmFtZSIpLA0KICAgICAgICAgICAgZGVzY3JpcHRpb249IlRoZSBoZWxsbyB3b3JsZCBwaXBlbGluZSBqb2IiLA0KICAgICAgICAgICAgdGFncz17Im93bmVyIjogInNka3RlYW0iLCAidGFnIjogInRhZ3ZhbHVlIn0sDQogICAgICAgICAgICBjb21wdXRlPSJjcHUtY2x1c3RlciIsDQogICAgICAgICkNCiAgICAgICAgZGVmIHBpcGVsaW5lX3dpdGhfYmluZGluZyhqb2JfaW5fbnVtYmVyLCBqb2JfaW5fb3RoZXJfbnVtYmVyLCBqb2JfaW5fcGF0aCk6DQogICAgICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfMSA9IGhlbGxvX3dvcmxkX2NvbXBvbmVudF9mdW5jKA0KICAgICAgICAgICAgICAgIGNvbXBvbmVudF9pbl9udW1iZXI9am9iX2luX251bWJlciwgY29tcG9uZW50X2luX3BhdGg9am9iX2luX3BhdGgNCiAgICAgICAgICAgICkNCiAgICAgICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudF8yID0gaGVsbG9fd29ybGRfY29tcG9uZW50X2Z1bmMoDQogICAgICAgICAgICAgICAgY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5fcGF0aA0KICAgICAgICAgICAgKQ0KDQogICAgICAgICAgICAjIGNvbmZpZ3VyZSBjb21wb25lbnQgb3ZlcnJpZGVzLCBjdXJhdGVkIFNESyBub3Qgc3VwcG9ydGVkIHlldA0KICAgICAgICAgICAgIyBoZWxsb193b3JsZF9jb21wb25lbnRfMi5yZXNvdXJjZXMuaW5zdGFuY2VfY291bnQgPSAyDQoNCiAgICAgICAgICAgICMgY29uZmlndXJlIGNvbXBvbmVudCBvdXRwdXRzDQogICAgICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfMS5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aC5tb2RlID0gIlVwbG9hZCINCiAgICAgICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudF8yLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRoLm1vZGUgPSAiVXBsb2FkIg0KDQogICAgICAgICAgICBtZXJnZV9jb21wb25lbnRfb3V0cHV0cyA9IG1lcmdlX291dHB1dHNfY29tcG9uZW50X2Z1bmMoDQogICAgICAgICAgICAgICAgY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fb3RoZXJfbnVtYmVyLA0KICAgICAgICAgICAgICAgIGNvbXBvbmVudF9pbl9wYXRoXzE9aGVsbG9fd29ybGRfY29tcG9uZW50XzEub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgsDQogICAgICAgICAgICAgICAgY29tcG9uZW50X2luX3BhdGhfMj1oZWxsb193b3JsZF9jb21wb25lbnRfMi5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aCwNCiAgICAgICAgICAgICkNCiAgICAgICAgICAgIHJldHVybiB7DQogICAgICAgICAgICAgICAgImpvYl9vdXRfZGF0YV8xIjogbWVyZ2VfY29tcG9uZW50X291dHB1dHMub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGhfMSwNCiAgICAgICAgICAgICAgICAiam9iX291dF9kYXRhXzIiOiBtZXJnZV9jb21wb25lbnRfb3V0cHV0cy5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aF8yLA0KICAgICAgICAgICAgfQ0KDQogICAgICAgIHBpcGVsaW5lID0gcGlwZWxpbmVfd2l0aF9iaW5kaW5nKDEwLCAxNiwgam9iX2lucHV0KQ0KICAgICAgICBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKA0KICAgICAgICAgICAgcGlwZWxpbmUsDQogICAgICAgICAgICBleHBlcmltZW50X25hbWU9ImRzbF9waXBlbGluZV9lMmUiLA0KICAgICAgICApDQoNCiAgICBkZWYgdGVzdF9kYXRhX2lucHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\\\u002BIE5vbmU6DQogICAgICAgIGRlZmF1bHRfb3B0aW9uYWxfZnVuYyA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1zdHIoY29tcG9uZW50c19kaXIgLyAiZGVmYXVsdF9vcHRpb25hbF9jb21wb25lbnQueW1sIikpDQoNCiAgICAgICAgIyBOb25lIHBpcGVsaW5lIHBhcmFtZXRlciBpcyBiaW5kaW5nIHRvIHR3byBvcHRpb25hbCBjb21wb25lbnQgaW5wdXQsIHJlbW92ZWQgTm9uZSBpbnB1dA0KDQogICAgICAgIEBkc2wucGlwZWxpbmUoDQogICAgICAgICAgICBkZWZhdWx0X2NvbXB1dGU9ImNwdS1jbHVzdGVyIiwNCiAgICAgICAgKQ0KICAgICAgICBkZWYgcGlwZWxpbmVfd2l0aF9kZWZhdWx0X29wdGlvbmFsX3BhcmFtZXRlcnMoDQogICAgICAgICAgICByZXF1aXJlZF9pbnB1dCwNCiAgICAgICAgICAgIHJlcXVpcmVkX3BhcmFtLA0KICAgICAgICAgICAgcmVxdWlyZWRfcGFyYW1fd2l0aF9kZWZhdWx0LA0KICAgICAgICAgICAgb3B0aW9uYWxfcGFyYW0sDQogICAgICAgICAgICBvcHRpb25hbF9wYXJhbV93aXRoX2RlZmF1bHQsDQogICAgICAgICk6DQogICAgICAgICAgICBkZWZhdWx0X29wdGlvbmFsX2Z1bmMoDQogICAgICAgICAgICAgICAgcmVxdWlyZWRfaW5wdXQ9cmVxdWlyZWRfaW5wdXQsDQogICAgICAgICAgICAgICAgcmVxdWlyZWRfcGFyYW09cmVxdWlyZWRfcGFyYW0sDQogICAgICAgICAgICAgICAgcmVxdWlyZWRfcGFyYW1fd2l0aF9kZWZhdWx0PXJlcXVpcmVkX3BhcmFtX3dpdGhfZGVmYXVsdCwNCiAgICAgICAgICAgICAgICBvcHRpb25hbF9wYXJhbT1vcHRpb25hbF9wYXJhbSwNCiAgICAgICAgICAgICAgICBvcHRpb25hbF9wYXJhbV93aXRoX2RlZmF1bHQ9b3B0aW9uYWxfcGFyYW1fd2l0aF9kZWZhdWx0LA0KICAgICAgICAgICAgKQ0KICAgICAgICAgICAgZGVmYXVsdF9vcHRpb25hbF9mdW5jKA0KICAgICAgICAgICAgICAgIHJlcXVpcmVkX2lucHV0PXJlcXVpcmVkX2lucHV0LA0KICAgICAgICAgICAgICAgIHJlcXVpcmVkX3BhcmFtPXJlcXVpcmVkX3BhcmFtLA0KICAgICAgICAgICAgICAgIHJlcXVpcmVkX3BhcmFtX3dpdGhfZGVmYXVsdD1yZXF1aXJlZF9wYXJhbV93aXRoX2RlZmF1bHQsDQogICAgICAgICAgICAgICAgb3B0aW9uYWxfcGFyYW09b3B0aW9uYWxfcGFyYW1fd2l0aF9kZWZhdWx0LA0KICAgICAgICAgICAgICAgIG9wdGlvbmFsX3BhcmFtX3dpdGhfZGVmYXVsdD1vcHRpb25hbF9wYXJhbV93aXRoX2RlZmF1bHQsDQogICAgICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBwaXBlbGluZV93aXRoX2RlZmF1bHRfb3B0aW9uYWxfcGFyYW1ldGVycygNCiAgICAgICAgICAgIHJlcXVpcmVkX2lucHV0PUlucHV0KHR5cGU9InVyaV9maWxlIiwgcGF0aD0iaHR0cHM6Ly9kcHJlcGRhdGEuYmxvYi5jb3JlLndpbmRvd3MubmV0L2RlbW8vVGl0YW5pYy5jc3YiKSwNCiAgICAgICAgICAgIHJlcXVpcmVkX3BhcmFtPSJoZWxsbyIsDQogICAgICAgICAgICByZXF1aXJlZF9wYXJhbV93aXRoX2RlZmF1bHQ9InJlcXVpcmVkX3BhcmFtX3dpdGhfZGVmYXVsdCIsDQogICAgICAgICAgICBvcHRpb25hbF9wYXJhbT0ib3B0aW9uYWxfcGFyYW0iLA0KICAgICAgICAgICAgb3B0aW9uYWxfcGFyYW1fd2l0aF9kZWZhdWx0PU5vbmUsDQogICAgICAgICkNCiAgICAgICAgIyB0b2RvOiB1bmNvbW1lbnQgdGhpcyB3aGVuIGJhY2tlbmQgcmVtb3ZlIGNvbXBvbmVudCBqb2Igb3B0aW9uYWwgaW5wdXQgd2hpY2ggaXMgYmluZGluZyB0byBhIE5vbmUgcGlwZWxpbmUNCiAgICAgICAgIyAgaW5wdXQNCiAgICAgICAgIyBwaXBlbGluZV9qb2IgPSBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKHBpcGVsaW5lLCBleHBlcmltZW50X25hbWU9ImRlZmF1bHRfb3B0aW9uYWxfcGlwZWxpbmUiKQ0KICAgICAgICBhc3NlcnQgIm9wdGlvbmFsX3BhcmFtX3dpdGhfZGVmYXVsdCIgbm90IGluIHBpcGVsaW5lLmlucHV0cw0KICAgICAgICAjIGFzc2VydCAib3B0aW9uYWxfcGFyYW1fd2l0aF9kZWZhdWx0IiBub3QgaW4gcGlwZWxpbmVfam9iLmlucHV0cw0KICAgICAgICAjIGFzc2VydCAib3B0aW9uYWxfcGFyYW1fd2l0aF9kZWZhdWx0IiBub3QgaW4gbmV4dChwaXBlbGluZV9qb2Iuam9icy52YWx1ZXMoKS5fX2l0ZXJfXygpKS5pbnB1dHMNCg0KICAgIEBweXRlc3QubWFyay5kaXNhYmxlX21vY2tfY29kZV9oYXNoDQogICAgQHB5dGVzdC5tYXJrLnNraXBpZihjb25kaXRpb249bm90IGlzX2xpdmUoKSwgcmVhc29uPSJyZXVzZSB0ZXN0LCB0YXJnZXQgdG8gdmVyaWZ5IHNlcnZpY2Utc2lkZSBiZWhhdmlvciIpDQogICAgZGVmIHRlc3RfY29tcG9uZW50X3JldXNlKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\\u002BIE5vbmU6DQogICAgICAgIGNvbXBvbmVudF95YW1sID0gY29tcG9uZW50c19kaXIgLyAiaGVsbG93b3JsZF9jb21wb25lbnQueW1sIg0KICAgICAgICBjb21wb25lbnRfZnVuYzEgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9Y29tcG9uZW50X3lhbWwsIHBhcmFtc19vdmVycmlkZT1beyJuYW1lIjogcmFuZHN0cigiY29tcG9uZW50X25hbWUiKX1dKQ0KICAgICAgICBjb21wb25lbnRfZnVuYzIgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9Y29tcG9uZW50X3lhbWwsIHBhcmFtc19vdmVycmlkZT1beyJuYW1lIjogcmFuZHN0cigiY29tcG9uZW50X25hbWUiKX1dKQ0KDQogICAgICAgIEBkc2wucGlwZWxpbmUoDQogICAgICAgICAgICBuYW1lPXJhbmRzdHIoInBpcGVsaW5lX25hbWUiKSwNCiAgICAgICAgICAgIGRlc2NyaXB0aW9uPSJUaGUgaGVsbG8gd29ybGQgcGlwZWxpbmUgam9iIiwNCiAgICAgICAgICAgIHRhZ3M9eyJvd25lciI6ICJzZGt0ZWFtIiwgInRhZyI6ICJ0YWd2YWx1ZSJ9LA0KICAgICAgICAgICAgY29tcHV0ZT0iY3B1LWNsdXN0ZXIiLA0KICAgICAgICAgICAgZXhwZXJpbWVudF9uYW1lPWV4cGVyaW1lbnRfbmFtZSwNCiAgICAgICAgICAgIGNvbnRpbnVlX29uX3N0ZXBfZmFpbHVyZT1UcnVlLA0KICAgICAgICApDQogICAgICAgIGRlZiBwaXBlbGluZShqb2JfaW5fbnVtYmVyLCBqb2JfaW5fb3RoZXJfbnVtYmVyLCBqb2JfaW5fcGF0aCk6DQogICAgICAgICAgICBjb21wb25lbnRfZnVuYzEoY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5fcGF0aCkNCiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMihjb21wb25lbnRfaW5fbnVtYmVyPWpvYl9pbl9vdGhlcl9udW1iZXIsIGNvbXBvbmVudF9pbl9wYXRoPWpvYl9pbl9wYXRoKQ0KDQogICAgICAgIHBpcGVsaW5lID0gcGlwZWxpbmUoMTAsIDE1LCBqb2JfaW5wdXQpDQogICAgICAgIGpvYiA9IGNsaWVudC5qb2JzLmNyZWF0ZV9vcl91cGRhdGUocGlwZWxpbmUpDQogICAgICAgIGFzc2VydCBqb2Iuc2V0dGluZ3MuZm9yY2VfcmVydW4gaXMgTm9uZQ0KDQogICAgICAgIEBkc2wucGlwZWxpbmUoDQogICAgICAgICAgICBuYW1lPXJhbmRzdHIoInBpcGVsaW5lX25hbWUiKSwNCiAgICAgICAgICAgIGRlc2NyaXB0aW9uPSJUaGUgaGVsbG8gd29ybGQgcGlwZWxpbmUgam9iIiwNCiAgICAgICAgICAgIHRhZ3M9eyJvd25lciI6ICJzZGt0ZWFtIiwgInRhZyI6ICJ0YWd2YWx1ZSJ9LA0KICAgICAgICAgICAgY29tcHV0ZT0iY3B1LWNsdXN0ZXIiLA0KICAgICAgICAgICAgZXhwZXJpbWVudF9uYW1lPWV4cGVyaW1lbnRfbmFtZSwNCiAgICAgICAgICAgIGNvbnRpbnVlX29uX3N0ZXBfZmFpbHVyZT1UcnVlLA0KICAgICAgICAgICAgZm9yY2VfcmVydW49VHJ1ZSwNCiAgICAgICAgKQ0KICAgICAgICBkZWYgcGlwZWxpbmUoam9iX2luX251bWJlciwgam9iX2luX290aGVyX251bWJlciwgam9iX2luX3BhdGgpOg0KICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMxKGNvbXBvbmVudF9pbl9udW1iZXI9am9iX2luX251bWJlciwgY29tcG9uZW50X2luX3BhdGg9am9iX2luX3BhdGgpDQogICAgICAgICAgICBjb21wb25lbnRfZnVuYzIoY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fb3RoZXJfbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5fcGF0aCkNCg0KICAgICAgICBwaXBlbGluZSA9IHBpcGVsaW5lKDEwLCAxNSwgam9iX2lucHV0KQ0KICAgICAgICBqb2IgPSBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKHBpcGVsaW5lLCBmb3JjZV9yZXJ1bj1UcnVlKQ0KICAgICAgICBhc3NlcnQgam9iLnNldHRpbmdzLmZvcmNlX3JlcnVuIGlzIFRydWUNCg0KICAgIGRlZiB0ZXN0X3BhcmFsbGVsX2NvbXBvbmVudHNfd2l0aF90YWJ1bGFyX2lucHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGNvbXBvbmVudHNfZGlyID0gdGVzdHNfcm9vdF9kaXIgLyAidGVzdF9jb25maWdzL2RzbF9waXBlbGluZS9wYXJhbGxlbF9jb21wb25lbnRfd2l0aF90YWJ1bGFyX2lucHV0Ig0KDQogICAgICAgIGJhdGNoX2luZmVyZW5jZSA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1zdHIoY29tcG9uZW50c19kaXIgLyAidGFidWxhcl9pbnB1dF9lMmUueW1sIikpDQoNCiAgICAgICAgIyBDb25zdHJ1Y3QgcGlwZWxpbmUNCiAgICAgICAgQGRzbC5waXBlbGluZShkZWZhdWx0X2NvbXB1dGU9ImNwdS1jbHVzdGVyIikNCiAgICAgICAgZGVmIHBhcmFsbGVsX2luX3BpcGVsaW5lKGpvYl9kYXRhX3BhdGgsIHNjb3JlX21vZGVsKToNCiAgICAgICAgICAgIGJhdGNoX2luZmVyZW5jZV9ub2RlID0gYmF0Y2hfaW5mZXJlbmNlKGpvYl9kYXRhX3BhdGg9am9iX2RhdGFfcGF0aCwgc2NvcmVfbW9kZWw9c2NvcmVfbW9kZWwpDQogICAgICAgICAgICBiYXRjaF9pbmZlcmVuY2Vfbm9kZS5taW5pX2JhdGNoX3NpemUgPSA1DQoNCiAgICAgICAgcGlwZWxpbmUgPSBwYXJhbGxlbF9pbl9waXBlbGluZSgNCiAgICAgICAgICAgIGpvYl9kYXRhX3BhdGg9SW5wdXQoDQogICAgICAgICAgICAgICAgdHlwZT1Bc3NldFR5cGVzLk1MVEFCTEUsDQogICAgICAgICAgICAgICAgcGF0aD0iLi90ZXN0cy90ZXN0X2NvbmZpZ3MvZGF0YXNldC9uZXVyYWwtaXJpcy1tbHRhYmxlIiwNCiAgICAgICAgICAgICAgICBtb2RlPUlucHV0T3V0cHV0TW9kZXMuRElSRUNULA0KICAgICAgICAgICAgKSwNCiAgICAgICAgICAgIHNjb3JlX21vZGVsPUlucHV0KA0KICAgICAgICAgICAgICAgIHBhdGg9Ii4vdGVzdHMvdGVzdF9jb25maWdzL21vZGVsIiwgdHlwZT1Bc3NldFR5cGVzLlVSSV9GT0xERVIsIG1vZGU9SW5wdXRPdXRwdXRNb2Rlcy5ET1dOTE9BRA0KICAgICAgICAgICAgKSwNCiAgICAgICAgKQ0KICAgICAgICAjIHN1Ym1pdCBwaXBlbGluZSBqb2INCiAgICAgICAgcGlwZWxpbmVfam9iID0gYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCwgZXhwZXJpbWVudF9uYW1lPSJwYXJhbGxlbF9pbl9waXBlbGluZSIpDQoNCiAgICAgICAgIyBjaGVjayByZXF1aXJlZCBmaWVsZHMgaW4gam9iIGRpY3QNCiAgICAgICAgam9iX2RpY3QgPSBwaXBlbGluZV9qb2IuX3RvX2RpY3QoKQ0KICAgICAgICBleHBlY3RlZF9rZXlzID0gWyJzdGF0dXMiLCAicHJvcGVydGllcyIsICJjcmVhdGlvbl9jb250ZXh0Il0NCiAgICAgICAgZm9yIGsgaW4gZXhwZWN0ZWRfa2V5czoNCiAgICAgICAgICAgIGFzc2VydCBrIGluIGpvYl9kaWN0LmtleXMoKSwgZiJmYWlsZWQgdG8gZ2V0IHtrfSBpbiB7am9iX2RpY3R9Ig0KDQogICAgICAgICMgb3JpZ2luYWwgam9iIGRpZCBub3QgY2hhbmdlDQogICAgICAgIGFzc2VydF9qb2JfaW5wdXRfb3V0cHV0X3R5cGVzKHBpcGVsaW5lX2pvYikNCiAgICAgICAgYXNzZXJ0IHBpcGVsaW5lX2pvYi5zZXR0aW5ncy5kZWZhdWx0X2NvbXB1dGUgPT0gImNwdS1jbHVzdGVyIg0KDQogICAgZGVmIHRlc3RfcGFyYWxsZWxfY29tcG9uZW50c193aXRoX3RhYnVsYXJfaW5wdXRfYmluZF90b19saXRlcmFsX2lucHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGNvbXBvbmVudHNfZGlyID0gdGVzdHNfcm9vdF9kaXIgLyAidGVzdF9jb25maWdzL2RzbF9waXBlbGluZS9wYXJhbGxlbF9jb21wb25lbnRfd2l0aF90YWJ1bGFyX2lucHV0Ig0KDQogICAgICAgIGJhdGNoX2luZmVyZW5jZSA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1zdHIoY29tcG9uZW50c19kaXIgLyAidGFidWxhcl9pbnB1dF9lMmUueW1sIikpDQoNCiAgICAgICAgIyBDb25zdHJ1Y3QgcGlwZWxpbmUNCiAgICAgICAgQGRzbC5waXBlbGluZShkZWZhdWx0X2NvbXB1dGU9ImNwdS1jbHVzdGVyIikNCiAgICAgICAgZGVmIHBhcmFsbGVsX2luX3BpcGVsaW5lKGpvYl9kYXRhX3BhdGgsIHNjb3JlX21vZGVsLCBsaXRlcmFsX2lucHV0KToNCiAgICAgICAgICAgIGJhdGNoX2luZmVyZW5jZV9ub2RlID0gYmF0Y2hfaW5mZXJlbmNlKGpvYl9kYXRhX3BhdGg9am9iX2RhdGFfcGF0aCwgc2NvcmVfbW9kZWw9c2NvcmVfbW9kZWwpDQogICAgICAgICAgICBiYXRjaF9pbmZlcmVuY2Vfbm9kZS5taW5pX2JhdGNoX3NpemUgPSA1DQogICAgICAgICAgICBiYXRjaF9pbmZlcmVuY2Vfbm9kZS5tYXhfY29uY3VycmVuY3lfcGVyX2luc3RhbmNlID0gbGl0ZXJhbF9pbnB1dA0KICAgICAgICAgICAgYmF0Y2hfaW5mZXJlbmNlX25vZGUuZXJyb3JfdGhyZXNob2xkID0gbGl0ZXJhbF9pbnB1dA0KICAgICAgICAgICAgYmF0Y2hfaW5mZXJlbmNlX25vZGUubWluaV9iYXRjaF9lcnJvcl90aHJlc2hvbGQgPSBsaXRlcmFsX2lucHV0DQoNCiAgICAgICAgcGlwZWxpbmUgPSBwYXJhbGxlbF9pbl9waXBlbGluZSgNCiAgICAgICAgICAgIGpvYl9kYXRhX3BhdGg9SW5wdXQoDQogICAgICAgICAgICAgICAgdHlwZT1Bc3NldFR5cGVzLk1MVEFCTEUsDQogICAgICAgICAgICAgICAgcGF0aD0iLi90ZXN0cy90ZXN0X2NvbmZpZ3MvZGF0YXNldC9uZXVyYWwtaXJpcy1tbHRhYmxlIiwNCiAgICAgICAgICAgICAgICBtb2RlPUlucHV0T3V0cHV0TW9kZXMuRElSRUNULA0KICAgICAgICAgICAgKSwNCiAgICAgICAgICAgIHNjb3JlX21vZGVsPUlucHV0KA0KICAgICAgICAgICAgICAgIHBhdGg9Ii4vdGVzdHMvdGVzdF9jb25maWdzL21vZGVsIiwgdHlwZT1Bc3NldFR5cGVzLlVSSV9GT0xERVIsIG1vZGU9SW5wdXRPdXRwdXRNb2Rlcy5ET1dOTE9BRA0KICAgICAgICAgICAgKSwNCiAgICAgICAgICAgIGxpdGVyYWxfaW5wdXQ9MiwNCiAgICAgICAgKQ0KICAgICAgICAjIHN1Ym1pdCBwaXBlbGluZSBqb2INCiAgICAgICAgcGlwZWxpbmVfam9iID0gYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCwgZXhwZXJpbWVudF9uYW1lPSJwYXJhbGxlbF9pbl9waXBlbGluZSIpDQoNCiAgICAgICAgIyBjaGVjayByZXF1aXJlZCBmaWVsZHMgaW4gam9iIGRpY3QNCiAgICAgICAgam9iX2RpY3QgPSBwaXBlbGluZV9qb2IuX3RvX2RpY3QoKQ0KICAgICAgICBleHBlY3RlZF9rZXlzID0gWyJzdGF0dXMiLCAicHJvcGVydGllcyIsICJjcmVhdGlvbl9jb250ZXh0Il0NCiAgICAgICAgZm9yIGsgaW4gZXhwZWN0ZWRfa2V5czoNCiAgICAgICAgICAgIGFzc2VydCBrIGluIGpvYl9kaWN0LmtleXMoKSwgZiJmYWlsZWQgdG8gZ2V0IHtrfSBpbiB7am9iX2RpY3R9Ig0KDQogICAgICAgICMgb3JpZ2luYWwgam9iIGRpZCBub3QgY2hhbmdlDQogICAgICAgIGFzc2VydF9qb2JfaW5wdXRfb3V0cHV0X3R5cGVzKHBpcGVsaW5lX2pvYikNCiAgICAgICAgYXNzZXJ0IHBpcGVsaW5lX2pvYi5zZXR0aW5ncy5kZWZhdWx0X2NvbXB1dGUgPT0gImNwdS1jbHVzdGVyIg0KDQogICAgZGVmIHRlc3RfcGFyYWxsZWxfY29tcG9uZW50c193aXRoX2ZpbGVfaW5wdXQoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToNCiAgICAgICAgY29tcG9uZW50c19kaXIgPSB0ZXN0c19yb290X2RpciAvICJ0ZXN0X2NvbmZpZ3MvZHNsX3BpcGVsaW5lL3BhcmFsbGVsX2NvbXBvbmVudF93aXRoX2ZpbGVfaW5wdXQiDQoNCiAgICAgICAgYmF0Y2hfaW5mZXJlbmNlID0gbG9hZF9jb21wb25lbnQoc291cmNlPXN0cihjb21wb25lbnRzX2RpciAvICJzY29yZS55bWwiKSkNCg0KICAgICAgICAjIENvbnN0cnVjdCBwaXBlbGluZQ0KICAgICAgICBAZHNsLnBpcGVsaW5lKGRlZmF1bHRfY29tcHV0ZT0iY3B1LWNsdXN0ZXIiKQ0KICAgICAgICBkZWYgcGFyYWxsZWxfaW5fcGlwZWxpbmUoam9iX2RhdGFfcGF0aCk6DQogICAgICAgICAgICBiYXRjaF9pbmZlcmVuY2Vfbm9kZSA9IGJhdGNoX2luZmVyZW5jZShqb2JfZGF0YV9wYXRoPWpvYl9kYXRhX3BhdGgpDQogICAgICAgICAgICBiYXRjaF9pbmZlcmVuY2Vfbm9kZS5taW5pX2JhdGNoX3NpemUgPSA1DQoNCiAgICAgICAgcGlwZWxpbmUgPSBwYXJhbGxlbF9pbl9waXBlbGluZSgNCiAgICAgICAgICAgIGpvYl9kYXRhX3BhdGg9SW5wdXQoDQogICAgICAgICAgICAgICAgdHlwZT1Bc3NldFR5cGVzLk1MVEFCTEUsDQogICAgICAgICAgICAgICAgcGF0aD0iLi90ZXN0cy90ZXN0X2NvbmZpZ3MvZGF0YXNldC9tbmlzdC1kYXRhIiwNCiAgICAgICAgICAgICAgICBtb2RlPUlucHV0T3V0cHV0TW9kZXMuRVZBTF9NT1VOVCwNCiAgICAgICAgICAgICksDQogICAgICAgICkNCiAgICAgICAgIyBzdWJtaXQgcGlwZWxpbmUgam9iDQogICAgICAgIHBpcGVsaW5lX2pvYiA9IGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQsIGV4cGVyaW1lbnRfbmFtZT0icGFyYWxsZWxfaW5fcGlwZWxpbmUiKQ0KICAgICAgICAjIGNoZWNrIHJlcXVpcmVkIGZpZWxkcyBpbiBqb2IgZGljdA0KICAgICAgICBqb2JfZGljdCA9IHBpcGVsaW5lX2pvYi5fdG9fZGljdCgpDQogICAgICAgIGV4cGVjdGVkX2tleXMgPSBbInN0YXR1cyIsICJwcm9wZXJ0aWVzIiwgImNyZWF0aW9uX2NvbnRleHQiXQ0KICAgICAgICBmb3IgayBpbiBleHBlY3RlZF9rZXlzOg0KICAgICAgICAgICAgYXNzZXJ0IGsgaW4gam9iX2RpY3Qua2V5cygpLCBmImZhaWxlZCB0byBnZXQge2t9IGluIHtqb2JfZGljdH0iDQoNCiAgICAgICAgIyBvcmlnaW5hbCBqb2IgZGlkIG5vdCBjaGFuZ2UNCiAgICAgICAgYXNzZXJ0X2pvYl9pbnB1dF9vdXRwdXRfdHlwZXMocGlwZWxpbmVfam9iKQ0KICAgICAgICBhc3NlcnQgcGlwZWxpbmVfam9iLnNldHRpbmdzLmRlZmF1bHRfY29tcHV0ZSA9PSAiY3B1LWNsdXN0ZXIiDQoNCiAgICBkZWYgdGVzdF9wYXJhbGxlbF9ydW5fZnVuY3Rpb24oc2VsZiwgY2xpZW50OiBNTENsaWVudCk6DQogICAgICAgIGRhdGEgPSBJbnB1dCgNCiAgICAgICAgICAgIHR5cGU9QXNzZXRUeXBlcy5NTFRBQkxFLA0KICAgICAgICAgICAgcGF0aD0iLi90ZXN0cy90ZXN0X2NvbmZpZ3MvZGF0YXNldC9tbmlzdC1kYXRhIiwNCiAgICAgICAgICAgIG1vZGU9SW5wdXRPdXRwdXRNb2Rlcy5FVkFMX01PVU5ULA0KICAgICAgICApDQogICAgICAgIHBpcGVsaW5lID0gYnVpbGRfcGlwZWxpbmVfd2l0aF9wYXJhbGxlbF9ydW5fZnVuY3Rpb24oZGF0YSkNCg0KICAgICAgICBwaXBlbGluZV9qb2IgPSBjbGllbnQuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSkgICMgc3VibWl0IHBpcGVsaW5lIGpvYg0KDQogICAgICAgIGFjdHVhbF9qb2IgPSBvbWl0X3dpdGhfd2lsZGNhcmQocGlwZWxpbmVfam9iLl90b19yZXN0X29iamVjdCgpLnByb3BlcnRpZXMuYXNfZGljdCgpLCAqY29tbW9uX29taXRfZmllbGRzKQ0KICAgICAgICBleHBlY3RlZF9qb2IgPSB7DQogICAgICAgICAgICAidGFncyI6IHt9LA0KICAgICAgICAgICAgImlzX2FyY2hpdmVkIjogRmFsc2UsDQogICAgICAgICAgICAiam9iX3R5cGUiOiAiUGlwZWxpbmUiLA0KICAgICAgICAgICAgImlucHV0cyI6IHsNCiAgICAgICAgICAgICAgICAiam9iX2RhdGFfcGF0aCI6IHsiam9iX2lucHV0X3R5cGUiOiAibWx0YWJsZSIsICJtb2RlIjogIkV2YWxNb3VudCJ9LA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICJqb2JzIjogew0KICAgICAgICAgICAgICAgICJub2RlMSI6IHsNCiAgICAgICAgICAgICAgICAgICAgImlucHV0X2RhdGEiOiAiJHt7aW5wdXRzLmpvYl9kYXRhX3BhdGh9fSIsDQogICAgICAgICAgICAgICAgICAgICJkaXNwbGF5X25hbWUiOiAibXktZXZhbHVhdGUtam9iIiwNCiAgICAgICAgICAgICAgICAgICAgImlucHV0cyI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICJqb2JfZGF0YV9wYXRoIjogew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiJHt7cGFyZW50LmlucHV0cy5qb2JfZGF0YV9wYXRofX0iLA0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJub2RlMSIsDQogICAgICAgICAgICAgICAgICAgICJtaW5pX2JhdGNoX3NpemUiOiA1LA0KICAgICAgICAgICAgICAgICAgICAibG9nZ2luZ19sZXZlbCI6ICJERUJVRyIsDQogICAgICAgICAgICAgICAgICAgICJtYXhfY29uY3VycmVuY3lfcGVyX2luc3RhbmNlIjogMSwNCiAgICAgICAgICAgICAgICAgICAgImVycm9yX3RocmVzaG9sZCI6IDEsDQogICAgICAgICAgICAgICAgICAgICJtaW5pX2JhdGNoX2Vycm9yX3RocmVzaG9sZCI6IDEsDQogICAgICAgICAgICAgICAgICAgICJvdXRwdXRzIjogeyJqb2Jfb3V0cHV0X3BhdGgiOiB7InR5cGUiOiAibGl0ZXJhbCIsICJ2YWx1ZSI6ICIke3twYXJlbnQub3V0cHV0cy5waXBlbGluZV9vdXRwdXR9fSJ9fSwNCiAgICAgICAgICAgICAgICAgICAgInJlc291cmNlcyI6IHsiaW5zdGFuY2VfY291bnQiOiAyfSwNCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWxsZWwiLA0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgIm91dHB1dHMiOiB7DQogICAgICAgICAgICAgICAgInBpcGVsaW5lX291dHB1dCI6IHsNCiAgICAgICAgICAgICAgICAgICAgIm1vZGUiOiAiUmVhZFdyaXRlTW91bnQiLA0KICAgICAgICAgICAgICAgICAgICAiam9iX291dHB1dF90eXBlIjogInVyaV9mb2xkZXIiLA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAic2V0dGluZ3MiOiB7ImRlZmF1bHRfY29tcHV0ZSI6ICJjcHUtY2x1c3RlciJ9LA0KICAgICAgICB9DQogICAgICAgIGFzc2VydCBleHBlY3RlZF9qb2IgPT0gYWN0dWFsX2pvYg0KDQogICAgICAgICMgY2hlY2sgcmVxdWlyZWQgZmllbGRzIGluIGpvYiBkaWN0DQogICAgICAgIGpvYl9kaWN0ID0gcGlwZWxpbmVfam9iLl90b19kaWN0KCkNCiAgICAgICAgZXhwZWN0ZWRfa2V5cyA9IFsic3RhdHVzIiwgInByb3BlcnRpZXMiLCAiY3JlYXRpb25fY29udGV4dCJdDQogICAgICAgIGZvciBrIGluIGV4cGVjdGVkX2tleXM6DQogICAgICAgICAgICBhc3NlcnQgayBpbiBqb2JfZGljdC5rZXlzKCksIGYiZmFpbGVkIHRvIGdldCB7a30gaW4ge2pvYl9kaWN0fSINCg0KICAgICAgICAjIG9yaWdpbmFsIGpvYiBkaWQgbm90IGNoYW5nZQ0KICAgICAgICBhc3NlcnRfam9iX2lucHV0X291dHB1dF90eXBlcyhwaXBlbGluZV9qb2IpDQogICAgICAgIGFzc2VydCBwaXBlbGluZV9qb2Iuc2V0dGluZ3MuZGVmYXVsdF9jb21wdXRlID09ICJjcHUtY2x1c3RlciINCg0KICAgIGRlZiB0ZXN0X3BhcmFsbGVsX3J1bl9mdW5jdGlvbl9ydW5fc2V0dGluZ3NfYmluZF90b19saXRlcmFsX2lucHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpOg0KICAgICAgICBkYXRhID0gSW5wdXQoDQogICAgICAgICAgICB0eXBlPUFzc2V0VHlwZXMuTUxUQUJMRSwNCiAgICAgICAgICAgIHBhdGg9Ii4vdGVzdHMvdGVzdF9jb25maWdzL2RhdGFzZXQvbW5pc3QtZGF0YSIsDQogICAgICAgICAgICBtb2RlPUlucHV0T3V0cHV0TW9kZXMuRVZBTF9NT1VOVCwNCiAgICAgICAgKQ0KICAgICAgICBwaXBlbGluZSA9IGJ1aWxkX3BpcGVsaW5lX3dpdGhfcGFyYWxsZWxfcnVuX2Z1bmN0aW9uKGRhdGEsIDIpDQoNCiAgICAgICAgcGlwZWxpbmVfam9iID0gY2xpZW50LmNyZWF0ZV9vcl91cGRhdGUocGlwZWxpbmUpICAjIHN1Ym1pdCBwaXBlbGluZSBqb2INCg0KICAgICAgICBhY3R1YWxfam9iID0gb21pdF93aXRoX3dpbGRjYXJkKHBpcGVsaW5lX2pvYi5fdG9fcmVzdF9vYmplY3QoKS5wcm9wZXJ0aWVzLmFzX2RpY3QoKSwgKmNvbW1vbl9vbWl0X2ZpZWxkcykNCiAgICAgICAgZXhwZWN0ZWRfam9iID0gew0KICAgICAgICAgICAgInRhZ3MiOiB7fSwNCiAgICAgICAgICAgICJpc19hcmNoaXZlZCI6IEZhbHNlLA0KICAgICAgICAgICAgImpvYl90eXBlIjogIlBpcGVsaW5lIiwNCiAgICAgICAgICAgICJpbnB1dHMiOiB7DQogICAgICAgICAgICAgICAgImpvYl9kYXRhX3BhdGgiOiB7ImpvYl9pbnB1dF90eXBlIjogIm1sdGFibGUiLCAibW9kZSI6ICJFdmFsTW91bnQifSwNCiAgICAgICAgICAgICAgICAibGl0ZXJhbF9pbnB1dCI6IHsiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsICJ2YWx1ZSI6ICIyIn0sDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgImpvYnMiOiB7DQogICAgICAgICAgICAgICAgIm5vZGUxIjogew0KICAgICAgICAgICAgICAgICAgICAiaW5wdXRfZGF0YSI6ICIke3tpbnB1dHMuam9iX2RhdGFfcGF0aH19IiwNCiAgICAgICAgICAgICAgICAgICAgImRpc3BsYXlfbmFtZSI6ICJteS1ldmFsdWF0ZS1qb2IiLA0KICAgICAgICAgICAgICAgICAgICAiaW5wdXRzIjogew0KICAgICAgICAgICAgICAgICAgICAgICAgImpvYl9kYXRhX3BhdGgiOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIke3twYXJlbnQuaW5wdXRzLmpvYl9kYXRhX3BhdGh9fSIsDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICJuYW1lIjogIm5vZGUxIiwNCiAgICAgICAgICAgICAgICAgICAgIm1pbmlfYmF0Y2hfc2l6ZSI6IDUsDQogICAgICAgICAgICAgICAgICAgICJsb2dnaW5nX2xldmVsIjogIkRFQlVHIiwNCiAgICAgICAgICAgICAgICAgICAgIm1heF9jb25jdXJyZW5jeV9wZXJfaW5zdGFuY2UiOiAiJHt7cGFyZW50LmlucHV0cy5saXRlcmFsX2lucHV0fX0iLA0KICAgICAgICAgICAgICAgICAgICAiZXJyb3JfdGhyZXNob2xkIjogIiR7e3BhcmVudC5pbnB1dHMubGl0ZXJhbF9pbnB1dH19IiwNCiAgICAgICAgICAgICAgICAgICAgIm1pbmlfYmF0Y2hfZXJyb3JfdGhyZXNob2xkIjogIiR7e3BhcmVudC5pbnB1dHMubGl0ZXJhbF9pbnB1dH19IiwNCiAgICAgICAgICAgICAgICAgICAgIm91dHB1dHMiOiB7ImpvYl9vdXRwdXRfcGF0aCI6IHsidHlwZSI6ICJsaXRlcmFsIiwgInZhbHVlIjogIiR7e3BhcmVudC5vdXRwdXRzLnBpcGVsaW5lX291dHB1dH19In19LA0KICAgICAgICAgICAgICAgICAgICAicmVzb3VyY2VzIjogeyJpbnN0YW5jZV9jb3VudCI6ICIke3twYXJlbnQuaW5wdXRzLmxpdGVyYWxfaW5wdXR9fSJ9LA0KICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYXJhbGxlbCIsDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAib3V0cHV0cyI6IHsNCiAgICAgICAgICAgICAgICAicGlwZWxpbmVfb3V0cHV0Ijogew0KICAgICAgICAgICAgICAgICAgICAibW9kZSI6ICJSZWFkV3JpdGVNb3VudCIsDQogICAgICAgICAgICAgICAgICAgICJqb2Jfb3V0cHV0X3R5cGUiOiAidXJpX2ZvbGRlciIsDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICJzZXR0aW5ncyI6IHsiZGVmYXVsdF9jb21wdXRlIjogImNwdS1jbHVzdGVyIn0sDQogICAgICAgIH0NCiAgICAgICAgYXNzZXJ0IGV4cGVjdGVkX2pvYiA9PSBhY3R1YWxfam9iDQogICAgICAgICMgY2hlY2sgcmVxdWlyZWQgZmllbGRzIGluIGpvYiBkaWN0DQogICAgICAgIGpvYl9kaWN0ID0gcGlwZWxpbmVfam9iLl90b19kaWN0KCkNCiAgICAgICAgZXhwZWN0ZWRfa2V5cyA9IFsic3RhdHVzIiwgInByb3BlcnRpZXMiLCAiY3JlYXRpb25fY29udGV4dCJdDQogICAgICAgIGZvciBrIGluIGV4cGVjdGVkX2tleXM6DQogICAgICAgICAgICBhc3NlcnQgayBpbiBqb2JfZGljdC5rZXlzKCksIGYiZmFpbGVkIHRvIGdldCB7a30gaW4ge2pvYl9kaWN0fSINCg0KICAgICAgICAjIG9yaWdpbmFsIGpvYiBkaWQgbm90IGNoYW5nZQ0KICAgICAgICBhc3NlcnRfam9iX2lucHV0X291dHB1dF90eXBlcyhwaXBlbGluZV9qb2IpDQogICAgICAgIGFzc2VydCBwaXBlbGluZV9qb2Iuc2V0dGluZ3MuZGVmYXVsdF9jb21wdXRlID09ICJjcHUtY2x1c3RlciINCg0KICAgIGRlZiB0ZXN0X3BhcmFsbGVsX2pvYihzZWxmLCByYW5kc3RyOiBDYWxsYWJsZVtbc3RyXSwgc3RyXSwgY2xpZW50OiBNTENsaWVudCk6DQogICAgICAgIGVudmlyb25tZW50ID0gIkF6dXJlTUwtc2tsZWFybi0xLjAtdWJ1bnR1MjAuMDQtcHkzOC1jcHU6MzMiDQogICAgICAgIGlucHV0cyA9IHsNCiAgICAgICAgICAgICJqb2JfZGF0YV9wYXRoIjogSW5wdXQoDQogICAgICAgICAgICAgICAgdHlwZT1Bc3NldFR5cGVzLk1MVEFCTEUsDQogICAgICAgICAgICAgICAgcGF0aD0iLi90ZXN0cy90ZXN0X2NvbmZpZ3MvZGF0YXNldC9tbmlzdC1kYXRhIiwNCiAgICAgICAgICAgICAgICBtb2RlPUlucHV0T3V0cHV0TW9kZXMuRVZBTF9NT1VOVCwNCiAgICAgICAgICAgICksDQogICAgICAgIH0NCiAgICAgICAgaW5wdXRfZGF0YSA9ICIke3tpbnB1dHMuam9iX2RhdGFfcGF0aH19Ig0KICAgICAgICBvdXRwdXRzID0geyJqb2Jfb3V0cHV0X3BhdGgiOiBPdXRwdXQodHlwZT1Bc3NldFR5cGVzLlVSSV9GT0xERVIsIG1vZGU9InJ3X21vdW50Iil9DQogICAgICAgIHJlc291cmNlcyA9IHsiaW5zdGFuY2VfY291bnQiOiAyfQ0KICAgICAgICB0YXNrID0gUnVuRnVuY3Rpb24oDQogICAgICAgICAgICBjb2RlPSIuL3Rlc3RzL3Rlc3RfY29uZmlncy9kc2xfcGlwZWxpbmUvcGFyYWxsZWxfY29tcG9uZW50X3dpdGhfZmlsZV9pbnB1dC9zcmMvIiwNCiAgICAgICAgICAgIGVudHJ5X3NjcmlwdD0ic2NvcmUucHkiLA0KICAgICAgICAgICAgcHJvZ3JhbV9hcmd1bWVudHM9Ii0tam9iX291dHB1dF9wYXRoICR7e291dHB1dHMuam9iX291dHB1dF9wYXRofX0iLA0KICAgICAgICAgICAgZW52aXJvbm1lbnQ9ZW52aXJvbm1lbnQsDQogICAgICAgICkNCiAgICAgICAgbG9nZ2luZ19sZXZlbCA9ICJERUJVRyINCiAgICAgICAgbWF4X2NvbmN1cnJlbmN5X3Blcl9pbnN0YW5jZSA9IDENCiAgICAgICAgZXJyb3JfdGhyZXNob2xkID0gMQ0KICAgICAgICBtaW5pX2JhdGNoX2Vycm9yX3RocmVzaG9sZCA9IDENCiAgICAgICAgbWluaV9iYXRjaF9zaXplID0gIjUiDQogICAgICAgIGVudmlyb25tZW50X3ZhcmlhYmxlcyA9IHsiZW52aXJvbm1lbnQiOiAidmFsIn0NCg0KICAgICAgICBAZHNsLnBpcGVsaW5lKA0KICAgICAgICAgICAgbmFtZT1yYW5kc3RyKCJwaXBlbGluZV9uYW1lIiksDQogICAgICAgICAgICBkZXNjcmlwdGlvbj0iVGhlIHBpcGVsaW5lIGpvYiB3aXRoIHBhcmFsbGVsIGZ1bmN0aW9uIiwNCiAgICAgICAgICAgIHRhZ3M9eyJvd25lciI6ICJzZGt0ZWFtIiwgInRhZyI6ICJ0YWd2YWx1ZSJ9LA0KICAgICAgICApDQogICAgICAgIGRlZiBwYXJhbGxlbF9pbl9waXBlbGluZShqb2JfZGF0YV9wYXRoKToNCiAgICAgICAgICAgIHBhcmFsbGVsX2pvYiA9IFBhcmFsbGVsSm9iKA0KICAgICAgICAgICAgICAgIGRpc3BsYXlfbmFtZT0ibXktZXZhbHVhdGUtam9iIiwNCiAgICAgICAgICAgICAgICByZXNvdXJjZXM9cmVzb3VyY2VzLA0KICAgICAgICAgICAgICAgIG1pbmlfYmF0Y2hfc2l6ZT1taW5pX2JhdGNoX3NpemUsDQogICAgICAgICAgICAgICAgdGFzaz10YXNrLA0KICAgICAgICAgICAgICAgIGlucHV0X2RhdGE9aW5wdXRfZGF0YSwNCiAgICAgICAgICAgICAgICBsb2dnaW5nX2xldmVsPWxvZ2dpbmdfbGV2ZWwsDQogICAgICAgICAgICAgICAgbWF4X2NvbmN1cnJlbmN5X3Blcl9pbnN0YW5jZT1tYXhfY29uY3VycmVuY3lfcGVyX2luc3RhbmNlLA0KICAgICAgICAgICAgICAgIGVycm9yX3RocmVzaG9sZD1lcnJvcl90aHJlc2hvbGQsDQogICAgICAgICAgICAgICAgbWluaV9iYXRjaF9lcnJvcl90aHJlc2hvbGQ9bWluaV9iYXRjaF9lcnJvcl90aHJlc2hvbGQsDQogICAgICAgICAgICAgICAgZW52aXJvbm1lbnRfdmFyaWFibGVzPWVudmlyb25tZW50X3ZhcmlhYmxlcywNCiAgICAgICAgICAgICAgICBpbnB1dHM9aW5wdXRzLA0KICAgICAgICAgICAgICAgIG91dHB1dHM9b3V0cHV0cywNCiAgICAgICAgICAgICkNCiAgICAgICAgICAgIHBhcmFsbGVsX2pvYl9mdW5jID0gdG9fY29tcG9uZW50KGpvYj1wYXJhbGxlbF9qb2IpDQogICAgICAgICAgICBwYXJhbGxlbF9ub2RlID0gcGFyYWxsZWxfam9iX2Z1bmMoam9iX2RhdGFfcGF0aD1qb2JfZGF0YV9wYXRoKQ0KDQogICAgICAgICAgICByZXR1cm4gew0KICAgICAgICAgICAgICAgICJwaXBlbGluZV9qb2Jfb3V0IjogcGFyYWxsZWxfbm9kZS5vdXRwdXRzLmpvYl9vdXRwdXRfcGF0aCwNCiAgICAgICAgICAgIH0NCg0KICAgICAgICBwaXBlbGluZSA9IHBhcmFsbGVsX2luX3BpcGVsaW5lKA0KICAgICAgICAgICAgSW5wdXQoDQogICAgICAgICAgICAgICAgdHlwZT1Bc3NldFR5cGVzLk1MVEFCTEUsDQogICAgICAgICAgICAgICAgcGF0aD0iLi90ZXN0cy90ZXN0X2NvbmZpZ3MvZGF0YXNldC9tbmlzdC1kYXRhIiwNCiAgICAgICAgICAgICAgICBtb2RlPUlucHV0T3V0cHV0TW9kZXMuRVZBTF9NT1VOVCwNCiAgICAgICAgICAgICksDQogICAgICAgICkNCiAgICAgICAgcGlwZWxpbmUuc2V0dGluZ3MuZGVmYXVsdF9jb21wdXRlID0gImNwdS1jbHVzdGVyIg0KICAgICAgICAjIHN1Ym1pdCBqb2IgdG8gd29ya3NwYWNlDQogICAgICAgIHBpcGVsaW5lX2pvYiA9IGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQsIGV4cGVyaW1lbnRfbmFtZT0icGFyYWxsZWxfaW5fcGlwZWxpbmUiKQ0KICAgICAgICBvbWl0X2ZpZWxkcyA9IFsNCiAgICAgICAgICAgICJqb2JzLnBhcmFsbGVsX25vZGUudGFzay5jb2RlIiwNCiAgICAgICAgICAgICJqb2JzLnBhcmFsbGVsX25vZGUudGFzay5lbnZpcm9ubWVudCIsDQogICAgICAgIF0gKyBjb21tb25fb21pdF9maWVsZHMNCiAgICAgICAgYWN0dWFsX2pvYiA9IG9taXRfd2l0aF93aWxkY2FyZChwaXBlbGluZV9qb2IuX3RvX3Jlc3Rfb2JqZWN0KCkucHJvcGVydGllcy5hc19kaWN0KCksICpvbWl0X2ZpZWxkcykNCiAgICAgICAgZXhwZWN0ZWRfam9iID0gew0KICAgICAgICAgICAgInRhZ3MiOiB7Im93bmVyIjogInNka3RlYW0iLCAidGFnIjogInRhZ3ZhbHVlIn0sDQogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHBpcGVsaW5lIGpvYiB3aXRoIHBhcmFsbGVsIGZ1bmN0aW9uIiwNCiAgICAgICAgICAgICJpc19hcmNoaXZlZCI6IEZhbHNlLA0KICAgICAgICAgICAgImpvYl90eXBlIjogIlBpcGVsaW5lIiwNCiAgICAgICAgICAgICJpbnB1dHMiOiB7DQogICAgICAgICAgICAgICAgImpvYl9kYXRhX3BhdGgiOiB7ImpvYl9pbnB1dF90eXBlIjogIm1sdGFibGUiLCAibW9kZSI6ICJFdmFsTW91bnQifSwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAiam9icyI6IHsNCiAgICAgICAgICAgICAgICAicGFyYWxsZWxfbm9kZSI6IHsNCiAgICAgICAgICAgICAgICAgICAgImlucHV0X2RhdGEiOiAiJHt7aW5wdXRzLmpvYl9kYXRhX3BhdGh9fSIsDQogICAgICAgICAgICAgICAgICAgICJpbnB1dHMiOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAiam9iX2RhdGFfcGF0aCI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIiR7e3BhcmVudC5pbnB1dHMuam9iX2RhdGFfcGF0aH19IiwNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgIm1pbmlfYmF0Y2hfc2l6ZSI6IDUsDQogICAgICAgICAgICAgICAgICAgICJtYXhfY29uY3VycmVuY3lfcGVyX2luc3RhbmNlIjogMSwNCiAgICAgICAgICAgICAgICAgICAgIm1pbmlfYmF0Y2hfZXJyb3JfdGhyZXNob2xkIjogMSwNCiAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAicGFyYWxsZWxfbm9kZSIsDQogICAgICAgICAgICAgICAgICAgICJvdXRwdXRzIjogew0KICAgICAgICAgICAgICAgICAgICAgICAgImpvYl9vdXRwdXRfcGF0aCI6IHsidmFsdWUiOiAiJHt7cGFyZW50Lm91dHB1dHMucGlwZWxpbmVfam9iX291dH19IiwgInR5cGUiOiAibGl0ZXJhbCJ9DQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICJyZXNvdXJjZXMiOiB7Imluc3RhbmNlX2NvdW50IjogMn0sDQogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInBhcmFsbGVsIiwNCiAgICAgICAgICAgICAgICAgICAgInRhc2siOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJydW5fZnVuY3Rpb24iLA0KICAgICAgICAgICAgICAgICAgICAgICAgImVudHJ5X3NjcmlwdCI6ICJzY29yZS5weSIsDQogICAgICAgICAgICAgICAgICAgICAgICAicHJvZ3JhbV9hcmd1bWVudHMiOiAiLS1qb2Jfb3V0cHV0X3BhdGggJHt7b3V0cHV0cy5qb2Jfb3V0cHV0X3BhdGh9fSIsDQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAib3V0cHV0cyI6IHsNCiAgICAgICAgICAgICAgICAicGlwZWxpbmVfam9iX291dCI6IHsNCiAgICAgICAgICAgICAgICAgICAgIm1vZGUiOiAiUmVhZFdyaXRlTW91bnQiLA0KICAgICAgICAgICAgICAgICAgICAiam9iX291dHB1dF90eXBlIjogInVyaV9mb2xkZXIiLA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAic2V0dGluZ3MiOiB7ImRlZmF1bHRfY29tcHV0ZSI6ICJjcHUtY2x1c3RlciJ9LA0KICAgICAgICB9DQogICAgICAgIGFzc2VydCBleHBlY3RlZF9qb2IgPT0gYWN0dWFsX2pvYg0KDQogICAgZGVmIHRlc3RfbXVsdGlfcGFyYWxsZWxfY29tcG9uZW50c193aXRoX2ZpbGVfaW5wdXRfcGlwZWxpbmVfb3V0cHV0KA0KICAgICAgICBzZWxmLCBjbGllbnQ6IE1MQ2xpZW50LCByYW5kc3RyOiBDYWxsYWJsZVtbc3RyXSwgc3RyXQ0KICAgICkgLT4gTm9uZToNCiAgICAgICAgY29tcG9uZW50c19kaXIgPSB0ZXN0c19yb290X2RpciAvICJ0ZXN0X2NvbmZpZ3MvZHNsX3BpcGVsaW5lL3BhcmFsbGVsX2NvbXBvbmVudF93aXRoX2ZpbGVfaW5wdXQiDQogICAgICAgIGJhdGNoX2luZmVyZW5jZTEgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9c3RyKGNvbXBvbmVudHNfZGlyIC8gInNjb3JlLnltbCIpKQ0KICAgICAgICBiYXRjaF9pbmZlcmVuY2UyID0gbG9hZF9jb21wb25lbnQoc291cmNlPXN0cihjb21wb25lbnRzX2RpciAvICJzY29yZS55bWwiKSkNCiAgICAgICAgY29udmVydF9kYXRhID0gbG9hZF9jb21wb25lbnQoc291cmNlPXN0cihjb21wb25lbnRzX2RpciAvICJjb252ZXJ0X2RhdGEueW1sIikpDQoNCiAgICAgICAgIyBDb25zdHJ1Y3QgcGlwZWxpbmUNCiAgICAgICAgQGRzbC5waXBlbGluZShkZWZhdWx0X2NvbXB1dGU9ImNwdS1jbHVzdGVyIikNCiAgICAgICAgZGVmIHBhcmFsbGVsX2luX3BpcGVsaW5lKGpvYl9kYXRhX3BhdGgpOg0KICAgICAgICAgICAgYmF0Y2hfaW5mZXJlbmNlX25vZGUxID0gYmF0Y2hfaW5mZXJlbmNlMShqb2JfZGF0YV9wYXRoPWpvYl9kYXRhX3BhdGgpDQogICAgICAgICAgICBjb252ZXJ0X2RhdGFfbm9kZSA9IGNvbnZlcnRfZGF0YShpbnB1dF9kYXRhPWJhdGNoX2luZmVyZW5jZV9ub2RlMS5vdXRwdXRzLmpvYl9vdXRwdXRfcGF0aCkNCiAgICAgICAgICAgIGNvbnZlcnRfZGF0YV9ub2RlLm91dHB1dHMuZmlsZV9vdXRwdXRfZGF0YS50eXBlID0gQXNzZXRUeXBlcy5NTFRBQkxFDQogICAgICAgICAgICBiYXRjaF9pbmZlcmVuY2Vfbm9kZTIgPSBiYXRjaF9pbmZlcmVuY2UyKGpvYl9kYXRhX3BhdGg9Y29udmVydF9kYXRhX25vZGUub3V0cHV0cy5maWxlX291dHB1dF9kYXRhKQ0KICAgICAgICAgICAgYmF0Y2hfaW5mZXJlbmNlX25vZGUyLmlucHV0cy5qb2JfZGF0YV9wYXRoLm1vZGUgPSBJbnB1dE91dHB1dE1vZGVzLkVWQUxfTU9VTlQNCg0KICAgICAgICAgICAgcmV0dXJuIHsiam9iX291dF9kYXRhIjogYmF0Y2hfaW5mZXJlbmNlX25vZGUyLm91dHB1dHMuam9iX291dHB1dF9wYXRofQ0KDQogICAgICAgIHBpcGVsaW5lID0gcGFyYWxsZWxfaW5fcGlwZWxpbmUoDQogICAgICAgICAgICBqb2JfZGF0YV9wYXRoPUlucHV0KA0KICAgICAgICAgICAgICAgIHR5cGU9QXNzZXRUeXBlcy5NTFRBQkxFLA0KICAgICAgICAgICAgICAgIHBhdGg9Ii4vdGVzdHMvdGVzdF9jb25maWdzL2RhdGFzZXQvbW5pc3QtZGF0YS8iLA0KICAgICAgICAgICAgICAgIG1vZGU9SW5wdXRPdXRwdXRNb2Rlcy5FVkFMX01PVU5ULA0KICAgICAgICAgICAgKSwNCiAgICAgICAgKQ0KICAgICAgICBwaXBlbGluZS5vdXRwdXRzLmpvYl9vdXRfZGF0YS5tb2RlID0gInVwbG9hZCINCg0KICAgICAgICAjIHN1Ym1pdCBwaXBlbGluZSBqb2INCiAgICAgICAgcGlwZWxpbmVfam9iID0gYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCwgZXhwZXJpbWVudF9uYW1lPSJwYXJhbGxlbF9pbl9waXBlbGluZSIpDQoNCiAgICAgICAgb21pdF9maWVsZHMgPSBbDQogICAgICAgICAgICAiam9icy4qLnRhc2suY29kZSIsDQogICAgICAgICAgICAiam9icy4qLnRhc2suZW52aXJvbm1lbnQiLA0KICAgICAgICBdICsgY29tbW9uX29taXRfZmllbGRzDQogICAgICAgIGFjdHVhbF9qb2IgPSBvbWl0X3dpdGhfd2lsZGNhcmQocGlwZWxpbmVfam9iLl90b19yZXN0X29iamVjdCgpLnByb3BlcnRpZXMuYXNfZGljdCgpLCAqb21pdF9maWVsZHMpDQogICAgICAgIGV4cGVjdGVkX2pvYiA9IHsNCiAgICAgICAgICAgICJ0YWdzIjoge30sDQogICAgICAgICAgICAiaXNfYXJjaGl2ZWQiOiBGYWxzZSwNCiAgICAgICAgICAgICJqb2JfdHlwZSI6ICJQaXBlbGluZSIsDQogICAgICAgICAgICAiaW5wdXRzIjogeyJqb2JfZGF0YV9wYXRoIjogeyJtb2RlIjogIkV2YWxNb3VudCIsICJqb2JfaW5wdXRfdHlwZSI6ICJtbHRhYmxlIn19LA0KICAgICAgICAgICAgImpvYnMiOiB7DQogICAgICAgICAgICAgICAgImJhdGNoX2luZmVyZW5jZV9ub2RlMSI6IHsNCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWxsZWwiLA0KICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJiYXRjaF9pbmZlcmVuY2Vfbm9kZTEiLA0KICAgICAgICAgICAgICAgICAgICAiaW5wdXRzIjogew0KICAgICAgICAgICAgICAgICAgICAgICAgImpvYl9kYXRhX3BhdGgiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAiJHt7cGFyZW50LmlucHV0cy5qb2JfZGF0YV9wYXRofX0ifQ0KICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAibWluaV9iYXRjaF9zaXplIjogMSwNCiAgICAgICAgICAgICAgICAgICAgInRhc2siOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJydW5fZnVuY3Rpb24iLA0KICAgICAgICAgICAgICAgICAgICAgICAgImVudHJ5X3NjcmlwdCI6ICJzY29yZS5weSIsDQogICAgICAgICAgICAgICAgICAgICAgICAicHJvZ3JhbV9hcmd1bWVudHMiOiAiLS1qb2Jfb3V0cHV0X3BhdGggJHt7b3V0cHV0cy5qb2Jfb3V0cHV0X3BhdGh9fSIsDQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICJpbnB1dF9kYXRhIjogIiR7e2lucHV0cy5qb2JfZGF0YV9wYXRofX0iLA0KICAgICAgICAgICAgICAgICAgICAicmVzb3VyY2VzIjogeyJpbnN0YW5jZV9jb3VudCI6IDJ9LA0KICAgICAgICAgICAgICAgICAgICAibWF4X2NvbmN1cnJlbmN5X3Blcl9pbnN0YW5jZSI6IDEsDQogICAgICAgICAgICAgICAgICAgICJtaW5pX2JhdGNoX2Vycm9yX3RocmVzaG9sZCI6IDEsDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAiY29udmVydF9kYXRhX25vZGUiOiB7DQogICAgICAgICAgICAgICAgICAgICJuYW1lIjogImNvbnZlcnRfZGF0YV9ub2RlIiwNCiAgICAgICAgICAgICAgICAgICAgImlucHV0cyI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICJpbnB1dF9kYXRhIjogew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiJHt7cGFyZW50LmpvYnMuYmF0Y2hfaW5mZXJlbmNlX25vZGUxLm91dHB1dHMuam9iX291dHB1dF9wYXRofX0iLA0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAib3V0cHV0cyI6IHsiZmlsZV9vdXRwdXRfZGF0YSI6IHsiam9iX291dHB1dF90eXBlIjogIm1sdGFibGUifX0sDQogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImNvbW1hbmQiLA0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgImJhdGNoX2luZmVyZW5jZV9ub2RlMiI6IHsNCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAicGFyYWxsZWwiLA0KICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJiYXRjaF9pbmZlcmVuY2Vfbm9kZTIiLA0KICAgICAgICAgICAgICAgICAgICAiaW5wdXRzIjogew0KICAgICAgICAgICAgICAgICAgICAgICAgImpvYl9kYXRhX3BhdGgiOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIke3twYXJlbnQuam9icy5jb252ZXJ0X2RhdGFfbm9kZS5vdXRwdXRzLmZpbGVfb3V0cHV0X2RhdGF9fSIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIm1vZGUiOiAiRXZhbE1vdW50IiwNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgIm91dHB1dHMiOiB7ImpvYl9vdXRwdXRfcGF0aCI6IHsidmFsdWUiOiAiJHt7cGFyZW50Lm91dHB1dHMuam9iX291dF9kYXRhfX0iLCAidHlwZSI6ICJsaXRlcmFsIn19LA0KICAgICAgICAgICAgICAgICAgICAibWluaV9iYXRjaF9zaXplIjogMSwNCiAgICAgICAgICAgICAgICAgICAgInRhc2siOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJydW5fZnVuY3Rpb24iLA0KICAgICAgICAgICAgICAgICAgICAgICAgImVudHJ5X3NjcmlwdCI6ICJzY29yZS5weSIsDQogICAgICAgICAgICAgICAgICAgICAgICAicHJvZ3JhbV9hcmd1bWVudHMiOiAiLS1qb2Jfb3V0cHV0X3BhdGggJHt7b3V0cHV0cy5qb2Jfb3V0cHV0X3BhdGh9fSIsDQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICJpbnB1dF9kYXRhIjogIiR7e2lucHV0cy5qb2JfZGF0YV9wYXRofX0iLA0KICAgICAgICAgICAgICAgICAgICAicmVzb3VyY2VzIjogeyJpbnN0YW5jZV9jb3VudCI6IDJ9LA0KICAgICAgICAgICAgICAgICAgICAibWF4X2NvbmN1cnJlbmN5X3Blcl9pbnN0YW5jZSI6IDEsDQogICAgICAgICAgICAgICAgICAgICJtaW5pX2JhdGNoX2Vycm9yX3RocmVzaG9sZCI6IDEsDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAib3V0cHV0cyI6IHsiam9iX291dF9kYXRhIjogeyJtb2RlIjogIlVwbG9hZCIsICJqb2Jfb3V0cHV0X3R5cGUiOiAidXJpX2ZvbGRlciJ9fSwNCiAgICAgICAgICAgICJzZXR0aW5ncyI6IHsiZGVmYXVsdF9jb21wdXRlIjogImNwdS1jbHVzdGVyIn0sDQogICAgICAgIH0NCiAgICAgICAgYXNzZXJ0IGV4cGVjdGVkX2pvYiA9PSBhY3R1YWxfam9iDQoNCiAgICBkZWYgdGVzdF9nZXRfY2hpbGRfam9iKHNlbGYsIGNsaWVudDogTUxDbGllbnQsIHJhbmRzdHI6IENhbGxhYmxlW1tzdHJdLCBzdHJdKSAtPiBOb25lOg0KICAgICAgICBjb21wb25lbnRfeWFtbCA9IGNvbXBvbmVudHNfZGlyIC8gImhlbGxvd29ybGRfY29tcG9uZW50LnltbCINCiAgICAgICAgY29tcG9uZW50X2Z1bmMxID0gbG9hZF9jb21wb25lbnQoc291cmNlPWNvbXBvbmVudF95YW1sLCBwYXJhbXNfb3ZlcnJpZGU9W3sibmFtZSI6IHJhbmRzdHIoImNvbXBvbmVudF9uYW1lIil9XSkNCiAgICAgICAgY29tcG9uZW50X2Z1bmMyID0gbG9hZF9jb21wb25lbnQoc291cmNlPWNvbXBvbmVudF95YW1sLCBwYXJhbXNfb3ZlcnJpZGU9W3sibmFtZSI6IHJhbmRzdHIoImNvbXBvbmVudF9uYW1lIil9XSkNCg0KICAgICAgICBAZHNsLnBpcGVsaW5lKA0KICAgICAgICAgICAgbmFtZT1yYW5kc3RyKCJwaXBlbGluZV9uYW1lIiksDQogICAgICAgICAgICBkZXNjcmlwdGlvbj0iVGhlIGhlbGxvIHdvcmxkIHBpcGVsaW5lIGpvYiIsDQogICAgICAgICAgICB0YWdzPXsib3duZXIiOiAic2RrdGVhbSIsICJ0YWciOiAidGFndmFsdWUifSwNCiAgICAgICAgICAgIGNvbXB1dGU9ImNwdS1jbHVzdGVyIiwNCiAgICAgICAgICAgIGV4cGVyaW1lbnRfbmFtZT1leHBlcmltZW50X25hbWUsDQogICAgICAgICAgICBjb250aW51ZV9vbl9zdGVwX2ZhaWx1cmU9VHJ1ZSwNCiAgICAgICAgKQ0KICAgICAgICBkZWYgcGlwZWxpbmUoam9iX2luX251bWJlciwgam9iX2luX290aGVyX251bWJlciwgam9iX2luX3BhdGgpOg0KICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMxKGNvbXBvbmVudF9pbl9udW1iZXI9am9iX2luX251bWJlciwgY29tcG9uZW50X2luX3BhdGg9am9iX2luX3BhdGgpDQogICAgICAgICAgICBjb21wb25lbnRfZnVuYzIoY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fb3RoZXJfbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5fcGF0aCkNCg0KICAgICAgICBwaXBlbGluZSA9IHBpcGVsaW5lKDEwLCAxNSwgam9iX2lucHV0KQ0KICAgICAgICBqb2IgPSBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKHBpcGVsaW5lKQ0KICAgICAgICBjbGllbnQuam9icy5nZXQoam9iLm5hbWUpDQogICAgICAgIGNsaWVudC5qb2JzLmdldChqb2IubmFtZSkuX3JlcHJfaHRtbF8oKSAgIyB0byB0ZXN0IGNsaWVudC5qb2JzLmdldCgpIHdvcmtzIGluIG5vdGVib29rDQoNCiAgICAgICAgY2hpbGRyZW4gPSBsaXN0KGNsaWVudC5qb2JzLmxpc3QocGFyZW50X2pvYl9uYW1lPWpvYi5uYW1lKSkNCiAgICAgICAgZm9yIGNoaWxkIGluIGNoaWxkcmVuOg0KICAgICAgICAgICAgY2xpZW50LmpvYnMuZ2V0KGNoaWxkLm5hbWUpDQogICAgICAgICAgICBjbGllbnQuam9icy5nZXQoY2hpbGQubmFtZSkuX3JlcHJfaHRtbF8oKQ0KDQogICAgZGVmIHRlc3RfZHNsX3BpcGVsaW5lX3dpdGhvdXRfc2V0dGluZ19iaW5kaW5nX25vZGUoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLnBpcGVsaW5lX3dpdGhfc2V0X2JpbmRpbmdfb3V0cHV0X2lucHV0LnBpcGVsaW5lIGltcG9ydCAoDQogICAgICAgICAgICBwaXBlbGluZV93aXRob3V0X3NldHRpbmdfYmluZGluZ19ub2RlLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBwaXBlbGluZV93aXRob3V0X3NldHRpbmdfYmluZGluZ19ub2RlKCkNCiAgICAgICAgcGlwZWxpbmVfam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSkNCg0KICAgICAgICBhY3R1YWxfam9iID0gb21pdF93aXRoX3dpbGRjYXJkKHBpcGVsaW5lX2pvYi5fdG9fcmVzdF9vYmplY3QoKS5wcm9wZXJ0aWVzLmFzX2RpY3QoKSwgKmNvbW1vbl9vbWl0X2ZpZWxkcykNCiAgICAgICAgZXhwZWN0ZWRfam9iID0gew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkUyRSBkdW1teSBwaXBlbGluZSB3aXRoIGNvbXBvbmVudHMgZGVmaW5lZCB2aWEgeWFtbC4iLA0KICAgICAgICAgICAgInRhZ3MiOiB7fSwNCiAgICAgICAgICAgICJjb21wdXRlX2lkIjogImNwdS1jbHVzdGVyIiwNCiAgICAgICAgICAgICJpc19hcmNoaXZlZCI6IEZhbHNlLA0KICAgICAgICAgICAgImpvYl90eXBlIjogIlBpcGVsaW5lIiwNCiAgICAgICAgICAgICJpbnB1dHMiOiB7DQogICAgICAgICAgICAgICAgInRyYWluaW5nX2lucHV0IjogeyJtb2RlIjogIlJlYWRPbmx5TW91bnQiLCAiam9iX2lucHV0X3R5cGUiOiAidXJpX2ZvbGRlciJ9LA0KICAgICAgICAgICAgICAgICJ0cmFpbmluZ19tYXhfZXBvY2hzIjogeyJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwgInZhbHVlIjogIjIwIn0sDQogICAgICAgICAgICAgICAgInRyYWluaW5nX2xlYXJuaW5nX3JhdGUiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAiMS44In0sDQogICAgICAgICAgICAgICAgImxlYXJuaW5nX3JhdGVfc2NoZWR1bGUiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAidGltZS1iYXNlZCJ9LA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICJqb2JzIjogew0KICAgICAgICAgICAgICAgICJ0cmFpbl93aXRoX3NhbXBsZV9kYXRhIjogew0KICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJjb21tYW5kIiwNCiAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAidHJhaW5fd2l0aF9zYW1wbGVfZGF0YSIsDQogICAgICAgICAgICAgICAgICAgICJpbnB1dHMiOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAidHJhaW5pbmdfZGF0YSI6IHsiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsICJ2YWx1ZSI6ICIke3twYXJlbnQuaW5wdXRzLnRyYWluaW5nX2lucHV0fX0ifSwNCiAgICAgICAgICAgICAgICAgICAgICAgICJtYXhfZXBvY2hzIjogeyJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwgInZhbHVlIjogIiR7e3BhcmVudC5pbnB1dHMudHJhaW5pbmdfbWF4X2Vwb2Noc319In0sDQogICAgICAgICAgICAgICAgICAgICAgICAibGVhcm5pbmdfcmF0ZSI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIiR7e3BhcmVudC5pbnB1dHMudHJhaW5pbmdfbGVhcm5pbmdfcmF0ZX19IiwNCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICAibGVhcm5pbmdfcmF0ZV9zY2hlZHVsZSI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIiR7e3BhcmVudC5pbnB1dHMubGVhcm5pbmdfcmF0ZV9zY2hlZHVsZX19IiwNCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICJvdXRwdXRzIjogeyJtb2RlbF9vdXRwdXQiOiB7InZhbHVlIjogIiR7e3BhcmVudC5vdXRwdXRzLnRyYWluZWRfbW9kZWx9fSIsICJ0eXBlIjogImxpdGVyYWwifX0sDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICJvdXRwdXRzIjogeyJ0cmFpbmVkX21vZGVsIjogeyJtb2RlIjogIlJlYWRXcml0ZU1vdW50IiwgImpvYl9vdXRwdXRfdHlwZSI6ICJ1cmlfZm9sZGVyIn19LA0KICAgICAgICAgICAgInNldHRpbmdzIjoge30sDQogICAgICAgIH0NCiAgICAgICAgYXNzZXJ0IGV4cGVjdGVkX2pvYiA9PSBhY3R1YWxfam9iDQoNCiAgICBkZWYgdGVzdF9kc2xfcGlwZWxpbmVfd2l0aF9vbmx5X3NldHRpbmdfcGlwZWxpbmVfbGV2ZWwoc2VsZiwgY2xpZW50OiBNTENsaWVudCk6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5waXBlbGluZV93aXRoX3NldF9iaW5kaW5nX291dHB1dF9pbnB1dC5waXBlbGluZSBpbXBvcnQgKA0KICAgICAgICAgICAgcGlwZWxpbmVfd2l0aF9vbmx5X3NldHRpbmdfcGlwZWxpbmVfbGV2ZWwsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IHBpcGVsaW5lX3dpdGhfb25seV9zZXR0aW5nX3BpcGVsaW5lX2xldmVsKCkNCiAgICAgICAgcGlwZWxpbmVfam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSkNCg0KICAgICAgICBhY3R1YWxfam9iID0gb21pdF93aXRoX3dpbGRjYXJkKHBpcGVsaW5lX2pvYi5fdG9fcmVzdF9vYmplY3QoKS5wcm9wZXJ0aWVzLmFzX2RpY3QoKSwgKmNvbW1vbl9vbWl0X2ZpZWxkcykNCiAgICAgICAgZXhwZWN0ZWRfam9iID0gew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkUyRSBkdW1teSBwaXBlbGluZSB3aXRoIGNvbXBvbmVudHMgZGVmaW5lZCB2aWEgeWFtbC4iLA0KICAgICAgICAgICAgInRhZ3MiOiB7fSwNCiAgICAgICAgICAgICJjb21wdXRlX2lkIjogImNwdS1jbHVzdGVyIiwNCiAgICAgICAgICAgICJpc19hcmNoaXZlZCI6IEZhbHNlLA0KICAgICAgICAgICAgImpvYl90eXBlIjogIlBpcGVsaW5lIiwNCiAgICAgICAgICAgICJpbnB1dHMiOiB7DQogICAgICAgICAgICAgICAgInRyYWluaW5nX2lucHV0IjogeyJtb2RlIjogIlJlYWRPbmx5TW91bnQiLCAiam9iX2lucHV0X3R5cGUiOiAidXJpX2ZvbGRlciJ9LA0KICAgICAgICAgICAgICAgICJ0cmFpbmluZ19tYXhfZXBvY2hzIjogeyJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwgInZhbHVlIjogIjIwIn0sDQogICAgICAgICAgICAgICAgInRyYWluaW5nX2xlYXJuaW5nX3JhdGUiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAiMS44In0sDQogICAgICAgICAgICAgICAgImxlYXJuaW5nX3JhdGVfc2NoZWR1bGUiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAidGltZS1iYXNlZCJ9LA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICJqb2JzIjogew0KICAgICAgICAgICAgICAgICJ0cmFpbl93aXRoX3NhbXBsZV9kYXRhIjogew0KICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJjb21tYW5kIiwNCiAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAidHJhaW5fd2l0aF9zYW1wbGVfZGF0YSIsDQogICAgICAgICAgICAgICAgICAgICJpbnB1dHMiOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAidHJhaW5pbmdfZGF0YSI6IHsiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsICJ2YWx1ZSI6ICIke3twYXJlbnQuaW5wdXRzLnRyYWluaW5nX2lucHV0fX0ifSwNCiAgICAgICAgICAgICAgICAgICAgICAgICJtYXhfZXBvY2hzIjogeyJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwgInZhbHVlIjogIiR7e3BhcmVudC5pbnB1dHMudHJhaW5pbmdfbWF4X2Vwb2Noc319In0sDQogICAgICAgICAgICAgICAgICAgICAgICAibGVhcm5pbmdfcmF0ZSI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIiR7e3BhcmVudC5pbnB1dHMudHJhaW5pbmdfbGVhcm5pbmdfcmF0ZX19IiwNCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICAibGVhcm5pbmdfcmF0ZV9zY2hlZHVsZSI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIiR7e3BhcmVudC5pbnB1dHMubGVhcm5pbmdfcmF0ZV9zY2hlZHVsZX19IiwNCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICJvdXRwdXRzIjogeyJtb2RlbF9vdXRwdXQiOiB7InZhbHVlIjogIiR7e3BhcmVudC5vdXRwdXRzLnRyYWluZWRfbW9kZWx9fSIsICJ0eXBlIjogImxpdGVyYWwifX0sDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICJvdXRwdXRzIjogeyJ0cmFpbmVkX21vZGVsIjogeyJtb2RlIjogIlVwbG9hZCIsICJqb2Jfb3V0cHV0X3R5cGUiOiAidXJpX2ZvbGRlciJ9fSwNCiAgICAgICAgICAgICJzZXR0aW5ncyI6IHt9LA0KICAgICAgICB9DQogICAgICAgIGFzc2VydCBleHBlY3RlZF9qb2IgPT0gYWN0dWFsX2pvYg0KDQogICAgQHB5dGVzdC5tYXJrLnNraXBpZihjb25kaXRpb249bm90IGlzX2xpdmUoKSwgcmVhc29uPSJUT0RPKDIxNzczNTMpOiBpbnZlc3RpZ2F0ZSB3aHkgdGhpcyB0ZXN0IGZhaWxzLiIpDQogICAgZGVmIHRlc3RfZHNsX3BpcGVsaW5lX3dpdGhfb25seV9zZXR0aW5nX2JpbmRpbmdfbm9kZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KToNCiAgICAgICAgIyBUb2RvOiBjaGVja291dCBydW4gcHJpb3JpdHkgd2hlbiBiYWNrZW5kIGlzIHJlYWR5DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5waXBlbGluZV93aXRoX3NldF9iaW5kaW5nX291dHB1dF9pbnB1dC5waXBlbGluZSBpbXBvcnQgKA0KICAgICAgICAgICAgcGlwZWxpbmVfd2l0aF9vbmx5X3NldHRpbmdfYmluZGluZ19ub2RlLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBwaXBlbGluZV93aXRoX29ubHlfc2V0dGluZ19iaW5kaW5nX25vZGUoKQ0KICAgICAgICBwaXBlbGluZV9qb2IgPSBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKHBpcGVsaW5lKQ0KDQogICAgICAgIGFjdHVhbF9qb2IgPSBvbWl0X3dpdGhfd2lsZGNhcmQocGlwZWxpbmVfam9iLl90b19yZXN0X29iamVjdCgpLnByb3BlcnRpZXMuYXNfZGljdCgpLCAqY29tbW9uX29taXRfZmllbGRzKQ0KICAgICAgICBleHBlY3RlZF9qb2IgPSB7DQogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRTJFIGR1bW15IHBpcGVsaW5lIHdpdGggY29tcG9uZW50cyBkZWZpbmVkIHZpYSB5YW1sLiIsDQogICAgICAgICAgICAidGFncyI6IHt9LA0KICAgICAgICAgICAgImNvbXB1dGVfaWQiOiAiY3B1LWNsdXN0ZXIiLA0KICAgICAgICAgICAgImlzX2FyY2hpdmVkIjogRmFsc2UsDQogICAgICAgICAgICAiam9iX3R5cGUiOiAiUGlwZWxpbmUiLA0KICAgICAgICAgICAgImlucHV0cyI6IHsNCiAgICAgICAgICAgICAgICAidHJhaW5pbmdfaW5wdXQiOiB7Im1vZGUiOiAiUmVhZE9ubHlNb3VudCIsICJqb2JfaW5wdXRfdHlwZSI6ICJ1cmlfZm9sZGVyIn0sDQogICAgICAgICAgICAgICAgInRyYWluaW5nX21heF9lcG9jaHMiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAiMjAifSwNCiAgICAgICAgICAgICAgICAidHJhaW5pbmdfbGVhcm5pbmdfcmF0ZSI6IHsiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsICJ2YWx1ZSI6ICIxLjgifSwNCiAgICAgICAgICAgICAgICAibGVhcm5pbmdfcmF0ZV9zY2hlZHVsZSI6IHsiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsICJ2YWx1ZSI6ICJ0aW1lLWJhc2VkIn0sDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgImpvYnMiOiB7DQogICAgICAgICAgICAgICAgInRyYWluX3dpdGhfc2FtcGxlX2RhdGEiOiB7DQogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImNvbW1hbmQiLA0KICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJ0cmFpbl93aXRoX3NhbXBsZV9kYXRhIiwNCiAgICAgICAgICAgICAgICAgICAgImlucHV0cyI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICJ0cmFpbmluZ19kYXRhIjogew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJtb2RlIjogIlJlYWRPbmx5TW91bnQiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiJHt7cGFyZW50LmlucHV0cy50cmFpbmluZ19pbnB1dH19IiwNCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICAibWF4X2Vwb2NocyI6IHsiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsICJ2YWx1ZSI6ICIke3twYXJlbnQuaW5wdXRzLnRyYWluaW5nX21heF9lcG9jaHN9fSJ9LA0KICAgICAgICAgICAgICAgICAgICAgICAgImxlYXJuaW5nX3JhdGUiOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIke3twYXJlbnQuaW5wdXRzLnRyYWluaW5nX2xlYXJuaW5nX3JhdGV9fSIsDQogICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgImxlYXJuaW5nX3JhdGVfc2NoZWR1bGUiOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIke3twYXJlbnQuaW5wdXRzLmxlYXJuaW5nX3JhdGVfc2NoZWR1bGV9fSIsDQogICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAib3V0cHV0cyI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICJtb2RlbF9vdXRwdXQiOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIm1vZGUiOiAiVXBsb2FkIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiJHt7cGFyZW50Lm91dHB1dHMudHJhaW5lZF9tb2RlbH19IiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXRlcmFsIiwNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgIyBtb2RlIHdpbGwgYmUgY29waWVkIHRvIHBpcGVsaW5lIGxldmVsDQogICAgICAgICAgICAib3V0cHV0cyI6IHsidHJhaW5lZF9tb2RlbCI6IHsibW9kZSI6ICJVcGxvYWQiLCAiam9iX291dHB1dF90eXBlIjogInVyaV9mb2xkZXIifX0sDQogICAgICAgICAgICAic2V0dGluZ3MiOiB7fSwNCiAgICAgICAgfQ0KICAgICAgICBhc3NlcnQgZXhwZWN0ZWRfam9iID09IGFjdHVhbF9qb2INCg0KICAgIEBweXRlc3QubWFyay5za2lwaWYoY29uZGl0aW9uPW5vdCBpc19saXZlKCksIHJlYXNvbj0iVE9ETygyMTc3MzUzKTogaW52ZXN0aWdhdGUgd2h5IHRoaXMgdGVzdCBmYWlscy4iKQ0KICAgIGRlZiB0ZXN0X2RzbF9waXBlbGluZV93aXRoX3NldHRpbmdfYmluZGluZ19ub2RlX2FuZF9waXBlbGluZV9sZXZlbChzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUucGlwZWxpbmVfd2l0aF9zZXRfYmluZGluZ19vdXRwdXRfaW5wdXQucGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIHBpcGVsaW5lX3dpdGhfc2V0dGluZ19iaW5kaW5nX25vZGVfYW5kX3BpcGVsaW5lX2xldmVsLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBwaXBlbGluZV93aXRoX3NldHRpbmdfYmluZGluZ19ub2RlX2FuZF9waXBlbGluZV9sZXZlbCgpDQogICAgICAgIHBpcGVsaW5lX2pvYiA9IGNsaWVudC5qb2JzLmNyZWF0ZV9vcl91cGRhdGUocGlwZWxpbmUpDQoNCiAgICAgICAgYWN0dWFsX2pvYiA9IG9taXRfd2l0aF93aWxkY2FyZChwaXBlbGluZV9qb2IuX3RvX3Jlc3Rfb2JqZWN0KCkucHJvcGVydGllcy5hc19kaWN0KCksICpjb21tb25fb21pdF9maWVsZHMpDQogICAgICAgIGV4cGVjdGVkX2pvYiA9IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJFMkUgZHVtbXkgcGlwZWxpbmUgd2l0aCBjb21wb25lbnRzIGRlZmluZWQgdmlhIHlhbWwuIiwNCiAgICAgICAgICAgICJ0YWdzIjoge30sDQogICAgICAgICAgICAiY29tcHV0ZV9pZCI6ICJjcHUtY2x1c3RlciIsDQogICAgICAgICAgICAiaXNfYXJjaGl2ZWQiOiBGYWxzZSwNCiAgICAgICAgICAgICJqb2JfdHlwZSI6ICJQaXBlbGluZSIsDQogICAgICAgICAgICAiaW5wdXRzIjogew0KICAgICAgICAgICAgICAgICJ0cmFpbmluZ19pbnB1dCI6IHsibW9kZSI6ICJEb3dubG9hZCIsICJqb2JfaW5wdXRfdHlwZSI6ICJ1cmlfZm9sZGVyIn0sDQogICAgICAgICAgICAgICAgInRyYWluaW5nX21heF9lcG9jaHMiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAiMjAifSwNCiAgICAgICAgICAgICAgICAidHJhaW5pbmdfbGVhcm5pbmdfcmF0ZSI6IHsiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsICJ2YWx1ZSI6ICIxLjgifSwNCiAgICAgICAgICAgICAgICAibGVhcm5pbmdfcmF0ZV9zY2hlZHVsZSI6IHsiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsICJ2YWx1ZSI6ICJ0aW1lLWJhc2VkIn0sDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgImpvYnMiOiB7DQogICAgICAgICAgICAgICAgInRyYWluX3dpdGhfc2FtcGxlX2RhdGEiOiB7DQogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImNvbW1hbmQiLA0KICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJ0cmFpbl93aXRoX3NhbXBsZV9kYXRhIiwNCiAgICAgICAgICAgICAgICAgICAgImlucHV0cyI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICJ0cmFpbmluZ19kYXRhIjogew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJtb2RlIjogIlJlYWRPbmx5TW91bnQiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiJHt7cGFyZW50LmlucHV0cy50cmFpbmluZ19pbnB1dH19IiwNCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICAibWF4X2Vwb2NocyI6IHsiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsICJ2YWx1ZSI6ICIke3twYXJlbnQuaW5wdXRzLnRyYWluaW5nX21heF9lcG9jaHN9fSJ9LA0KICAgICAgICAgICAgICAgICAgICAgICAgImxlYXJuaW5nX3JhdGUiOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIke3twYXJlbnQuaW5wdXRzLnRyYWluaW5nX2xlYXJuaW5nX3JhdGV9fSIsDQogICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgImxlYXJuaW5nX3JhdGVfc2NoZWR1bGUiOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIke3twYXJlbnQuaW5wdXRzLmxlYXJuaW5nX3JhdGVfc2NoZWR1bGV9fSIsDQogICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAib3V0cHV0cyI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICJtb2RlbF9vdXRwdXQiOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIm1vZGUiOiAiVXBsb2FkIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiJHt7cGFyZW50Lm91dHB1dHMudHJhaW5lZF9tb2RlbH19IiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXRlcmFsIiwNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgIyBwaXBlbGluZSBsZXZlbCBvdXRwdXQgc2V0dGluZyB0YWtpbmcgZWZmZWN0DQogICAgICAgICAgICAib3V0cHV0cyI6IHsidHJhaW5lZF9tb2RlbCI6IHsibW9kZSI6ICJSZWFkV3JpdGVNb3VudCIsICJqb2Jfb3V0cHV0X3R5cGUiOiAidXJpX2ZvbGRlciJ9fSwNCiAgICAgICAgICAgICJzZXR0aW5ncyI6IHt9LA0KICAgICAgICB9DQogICAgICAgIGFzc2VydCBleHBlY3RlZF9qb2IgPT0gYWN0dWFsX2pvYg0KDQogICAgZGVmIHRlc3RfZHNsX3BpcGVsaW5lX3dpdGhfY29tbWFuZF9idWlsZGVyX3NldHRpbmdfYmluZGluZ19ub2RlX2FuZF9waXBlbGluZV9sZXZlbChzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUucGlwZWxpbmVfd2l0aF9zZXRfYmluZGluZ19vdXRwdXRfaW5wdXQucGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIHBpcGVsaW5lX3dpdGhfY29tbWFuZF9idWlsZGVyX3NldHRpbmdfYmluZGluZ19ub2RlX2FuZF9waXBlbGluZV9sZXZlbCwNCiAgICAgICAgKQ0KDQogICAgICAgIHBpcGVsaW5lID0gcGlwZWxpbmVfd2l0aF9jb21tYW5kX2J1aWxkZXJfc2V0dGluZ19iaW5kaW5nX25vZGVfYW5kX3BpcGVsaW5lX2xldmVsKCkNCiAgICAgICAgcGlwZWxpbmVfam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSkNCg0KICAgICAgICBhY3R1YWxfam9iID0gb21pdF93aXRoX3dpbGRjYXJkKHBpcGVsaW5lX2pvYi5fdG9fcmVzdF9vYmplY3QoKS5wcm9wZXJ0aWVzLmFzX2RpY3QoKSwgKmNvbW1vbl9vbWl0X2ZpZWxkcykNCg0KICAgICAgICBleHBlY3RlZF9qb2IgPSB7DQogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRTJFIGR1bW15IHBpcGVsaW5lIHdpdGggY29tcG9uZW50cyBkZWZpbmVkIHZpYSB5YW1sLiIsDQogICAgICAgICAgICAidGFncyI6IHt9LA0KICAgICAgICAgICAgImNvbXB1dGVfaWQiOiAiY3B1LWNsdXN0ZXIiLA0KICAgICAgICAgICAgImlzX2FyY2hpdmVkIjogRmFsc2UsDQogICAgICAgICAgICAiam9iX3R5cGUiOiAiUGlwZWxpbmUiLA0KICAgICAgICAgICAgImlucHV0cyI6IHsNCiAgICAgICAgICAgICAgICAidHJhaW5pbmdfaW5wdXQiOiB7Im1vZGUiOiAiRG93bmxvYWQiLCAiam9iX2lucHV0X3R5cGUiOiAidXJpX2ZvbGRlciJ9LA0KICAgICAgICAgICAgICAgICJ0cmFpbmluZ19tYXhfZXBvY2hzIjogeyJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwgInZhbHVlIjogIjIwIn0sDQogICAgICAgICAgICAgICAgInRyYWluaW5nX2xlYXJuaW5nX3JhdGUiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAiMS44In0sDQogICAgICAgICAgICAgICAgImxlYXJuaW5nX3JhdGVfc2NoZWR1bGUiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAidGltZS1iYXNlZCJ9LA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICJqb2JzIjogew0KICAgICAgICAgICAgICAgICJ0cmFpbl93aXRoX3NhbXBsZV9kYXRhIjogew0KICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJjb21tYW5kIiwNCiAgICAgICAgICAgICAgICAgICAgImRpc3RyaWJ1dGlvbiI6IHsiZGlzdHJpYnV0aW9uX3R5cGUiOiAiUHlUb3JjaCIsICJwcm9jZXNzX2NvdW50X3Blcl9pbnN0YW5jZSI6IDJ9LA0KICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJ0cmFpbl93aXRoX3NhbXBsZV9kYXRhIiwNCiAgICAgICAgICAgICAgICAgICAgImlucHV0cyI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICJ0cmFpbmluZ19kYXRhIjogew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJtb2RlIjogIlJlYWRPbmx5TW91bnQiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiJHt7cGFyZW50LmlucHV0cy50cmFpbmluZ19pbnB1dH19IiwNCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICAibWF4X2Vwb2NocyI6IHsiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsICJ2YWx1ZSI6ICIke3twYXJlbnQuaW5wdXRzLnRyYWluaW5nX21heF9lcG9jaHN9fSJ9LA0KICAgICAgICAgICAgICAgICAgICAgICAgImxlYXJuaW5nX3JhdGUiOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIke3twYXJlbnQuaW5wdXRzLnRyYWluaW5nX2xlYXJuaW5nX3JhdGV9fSIsDQogICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAgICAgImxlYXJuaW5nX3JhdGVfc2NoZWR1bGUiOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIke3twYXJlbnQuaW5wdXRzLmxlYXJuaW5nX3JhdGVfc2NoZWR1bGV9fSIsDQogICAgICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAib3V0cHV0cyI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICJtb2RlbF9vdXRwdXQiOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIm1vZGUiOiAiVXBsb2FkIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiJHt7cGFyZW50Lm91dHB1dHMudHJhaW5lZF9tb2RlbH19IiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJsaXRlcmFsIiwNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgIm91dHB1dHMiOiB7InRyYWluZWRfbW9kZWwiOiB7Im1vZGUiOiAiUmVhZFdyaXRlTW91bnQiLCAiam9iX291dHB1dF90eXBlIjogInVyaV9mb2xkZXIifX0sDQogICAgICAgICAgICAic2V0dGluZ3MiOiB7fSwNCiAgICAgICAgfQ0KICAgICAgICBhc3NlcnQgZXhwZWN0ZWRfam9iID09IGFjdHVhbF9qb2INCg0KICAgIGRlZiB0ZXN0X3NwYXJrX2NvbXBvbmVudHMoc2VsZiwgY2xpZW50OiBNTENsaWVudCwgcmFuZHN0cjogQ2FsbGFibGVbW3N0cl0sIHN0cl0pIC0\\u002BIE5vbmU6DQogICAgICAgIHlhbWxfcGF0aDogc3RyID0gIi4vdGVzdHMvdGVzdF9jb25maWdzL2NvbXBvbmVudHMvaGVsbG93b3JsZF9jb21wb25lbnQueW1sIg0KICAgICAgICBjb21wb25lbnRfbmFtZSA9IHJhbmRzdHIoImNvbXBvbmVudF9uYW1lIikNCiAgICAgICAgY29tcG9uZW50OiBDb21wb25lbnQgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9eWFtbF9wYXRoLCBwYXJhbXNfb3ZlcnJpZGU9W3sibmFtZSI6IGNvbXBvbmVudF9uYW1lfV0pDQogICAgICAgIGNsaWVudC5jb21wb25lbnRzLmNyZWF0ZV9vcl91cGRhdGUoY29tcG9uZW50KQ0KDQogICAgICAgIGRlZmF1bHRfY29tcG9uZW50X2Z1bmMgPSBjbGllbnQuY29tcG9uZW50cy5nZXQoY29tcG9uZW50X25hbWUpDQoNCiAgICAgICAgQGRzbC5waXBlbGluZSgpDQogICAgICAgIGRlZiBwaXBlbGluZV93aXRoX2RlZmF1bHRfY29tcG9uZW50KCk6DQogICAgICAgICAgICBub2RlMSA9IGRlZmF1bHRfY29tcG9uZW50X2Z1bmMoY29tcG9uZW50X2luX3BhdGg9am9iX2lucHV0KQ0KICAgICAgICAgICAgbm9kZTEuY29tcHV0ZSA9ICJjcHUtY2x1c3RlciINCg0KICAgICAgICAjIGNvbXBvbmVudCBmcm9tIGNsaWVudC5jb21wb25lbnRzLmdldA0KICAgICAgICBwaXBlbGluZV9qb2IgPSBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKHBpcGVsaW5lX3dpdGhfZGVmYXVsdF9jb21wb25lbnQoKSkNCiAgICAgICAgY3JlYXRlZF9waXBlbGluZV9qb2I6IFBpcGVsaW5lSm9iID0gY2xpZW50LmpvYnMuZ2V0KHBpcGVsaW5lX2pvYi5uYW1lKQ0KICAgICAgICBhc3NlcnQgY3JlYXRlZF9waXBlbGluZV9qb2Iuam9ic1sibm9kZTEiXS5jb21wb25lbnQgPT0gZiJ7Y29tcG9uZW50X25hbWV9QGRlZmF1bHQiDQoNCiAgICBkZWYgdGVzdF9waXBlbGluZV9ub2RlX2lkZW50aXR5X3dpdGhfY29tcG9uZW50KHNlbGYsIGNsaWVudDogTUxDbGllbnQpOg0KICAgICAgICBwYXRoID0gIi4vdGVzdHMvdGVzdF9jb25maWdzL2NvbXBvbmVudHMvaGVsbG93b3JsZF9jb21wb25lbnQueW1sIg0KICAgICAgICBjb21wb25lbnRfZnVuYyA9IGxvYWRfY29tcG9uZW50KHBhdGgpDQoNCiAgICAgICAgQGRzbC5waXBlbGluZQ0KICAgICAgICBkZWYgcGlwZWxpbmVfZnVuYyhjb21wb25lbnRfaW5fcGF0aCk6DQogICAgICAgICAgICBub2RlMSA9IGNvbXBvbmVudF9mdW5jKGNvbXBvbmVudF9pbl9udW1iZXI9MSwgY29tcG9uZW50X2luX3BhdGg9Y29tcG9uZW50X2luX3BhdGgpDQogICAgICAgICAgICBub2RlMS5pZGVudGl0eSA9IEFtbFRva2VuQ29uZmlndXJhdGlvbigpDQoNCiAgICAgICAgICAgIG5vZGUyID0gY29tcG9uZW50X2Z1bmMoY29tcG9uZW50X2luX251bWJlcj0xLCBjb21wb25lbnRfaW5fcGF0aD1jb21wb25lbnRfaW5fcGF0aCkNCiAgICAgICAgICAgIG5vZGUyLmlkZW50aXR5ID0gVXNlcklkZW50aXR5Q29uZmlndXJhdGlvbigpDQoNCiAgICAgICAgICAgIG5vZGUzID0gY29tcG9uZW50X2Z1bmMoY29tcG9uZW50X2luX251bWJlcj0xLCBjb21wb25lbnRfaW5fcGF0aD1jb21wb25lbnRfaW5fcGF0aCkNCiAgICAgICAgICAgIG5vZGUzLmlkZW50aXR5ID0gTWFuYWdlZElkZW50aXR5Q29uZmlndXJhdGlvbigpDQoNCiAgICAgICAgcGlwZWxpbmUgPSBwaXBlbGluZV9mdW5jKGNvbXBvbmVudF9pbl9wYXRoPWpvYl9pbnB1dCkNCiAgICAgICAgcGlwZWxpbmVfam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSwgY29tcHV0ZT0iY3B1LWNsdXN0ZXIiKQ0KICAgICAgICBvbWl0X2ZpZWxkcyA9IFsiam9icy4qLmNvbXBvbmVudElkIiwgImpvYnMuKi5fc291cmNlIl0NCiAgICAgICAgYWN0dWFsX2RpY3QgPSBvbWl0X3dpdGhfd2lsZGNhcmQocGlwZWxpbmVfam9iLl90b19yZXN0X29iamVjdCgpLmFzX2RpY3QoKVsicHJvcGVydGllcyJdLCAqb21pdF9maWVsZHMpDQogICAgICAgIGFzc2VydCBhY3R1YWxfZGljdFsiam9icyJdID09IHsNCiAgICAgICAgICAgICJub2RlMSI6IHsNCiAgICAgICAgICAgICAgICAiaWRlbnRpdHkiOiB7InR5cGUiOiAiYW1sX3Rva2VuIn0sDQogICAgICAgICAgICAgICAgImlucHV0cyI6IHsNCiAgICAgICAgICAgICAgICAgICAgImNvbXBvbmVudF9pbl9udW1iZXIiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAiMSJ9LA0KICAgICAgICAgICAgICAgICAgICAiY29tcG9uZW50X2luX3BhdGgiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAiJHt7cGFyZW50LmlucHV0cy5jb21wb25lbnRfaW5fcGF0aH19In0sDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAibmFtZSI6ICJub2RlMSIsDQogICAgICAgICAgICAgICAgInR5cGUiOiAiY29tbWFuZCIsDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgIm5vZGUyIjogew0KICAgICAgICAgICAgICAgICJpZGVudGl0eSI6IHsidHlwZSI6ICJ1c2VyX2lkZW50aXR5In0sDQogICAgICAgICAgICAgICAgImlucHV0cyI6IHsNCiAgICAgICAgICAgICAgICAgICAgImNvbXBvbmVudF9pbl9udW1iZXIiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAiMSJ9LA0KICAgICAgICAgICAgICAgICAgICAiY29tcG9uZW50X2luX3BhdGgiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAiJHt7cGFyZW50LmlucHV0cy5jb21wb25lbnRfaW5fcGF0aH19In0sDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAibmFtZSI6ICJub2RlMiIsDQogICAgICAgICAgICAgICAgInR5cGUiOiAiY29tbWFuZCIsDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgIm5vZGUzIjogew0KICAgICAgICAgICAgICAgICJpZGVudGl0eSI6IHsidHlwZSI6ICJtYW5hZ2VkX2lkZW50aXR5In0sDQogICAgICAgICAgICAgICAgImlucHV0cyI6IHsNCiAgICAgICAgICAgICAgICAgICAgImNvbXBvbmVudF9pbl9udW1iZXIiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAiMSJ9LA0KICAgICAgICAgICAgICAgICAgICAiY29tcG9uZW50X2luX3BhdGgiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAiJHt7cGFyZW50LmlucHV0cy5jb21wb25lbnRfaW5fcGF0aH19In0sDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAibmFtZSI6ICJub2RlMyIsDQogICAgICAgICAgICAgICAgInR5cGUiOiAiY29tbWFuZCIsDQogICAgICAgICAgICB9LA0KICAgICAgICB9DQoNCiAgICBkZWYgdGVzdF9kZWZhdWx0X3BpcGVsaW5lX2pvYl9zZXJ2aWNlcyhzZWxmLCBjbGllbnQ6IE1MQ2xpZW50LCByYW5kc3RyOiBDYWxsYWJsZVtbc3RyXSwgc3RyXSkgLT4gTm9uZToNCiAgICAgICAgY29tcG9uZW50X3lhbWwgPSBjb21wb25lbnRzX2RpciAvICJoZWxsb3dvcmxkX2NvbXBvbmVudC55bWwiDQogICAgICAgIGNvbXBvbmVudF9mdW5jMSA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1jb21wb25lbnRfeWFtbCwgcGFyYW1zX292ZXJyaWRlPVt7Im5hbWUiOiByYW5kc3RyKCJjb21wb25lbnRfbmFtZSIpfV0pDQogICAgICAgIGNvbXBvbmVudF9mdW5jMiA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1jb21wb25lbnRfeWFtbCwgcGFyYW1zX292ZXJyaWRlPVt7Im5hbWUiOiByYW5kc3RyKCJjb21wb25lbnRfbmFtZSIpfV0pDQoNCiAgICAgICAgQGRzbC5waXBlbGluZSgNCiAgICAgICAgICAgIG5hbWU9cmFuZHN0cigicGlwZWxpbmVfbmFtZSIpLA0KICAgICAgICAgICAgZGVzY3JpcHRpb249IlRoZSBoZWxsbyB3b3JsZCBwaXBlbGluZSBqb2IiLA0KICAgICAgICAgICAgdGFncz17Im93bmVyIjogInNka3RlYW0iLCAidGFnIjogInRhZ3ZhbHVlIn0sDQogICAgICAgICAgICBjb21wdXRlPSJjcHUtY2x1c3RlciIsDQogICAgICAgICAgICBleHBlcmltZW50X25hbWU9ZXhwZXJpbWVudF9uYW1lLA0KICAgICAgICAgICAgY29udGludWVfb25fc3RlcF9mYWlsdXJlPVRydWUsDQogICAgICAgICkNCiAgICAgICAgZGVmIHBpcGVsaW5lKGpvYl9pbl9udW1iZXIsIGpvYl9pbl9vdGhlcl9udW1iZXIsIGpvYl9pbl9wYXRoKToNCiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMShjb21wb25lbnRfaW5fbnVtYmVyPWpvYl9pbl9udW1iZXIsIGNvbXBvbmVudF9pbl9wYXRoPWpvYl9pbl9wYXRoKQ0KICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMyKGNvbXBvbmVudF9pbl9udW1iZXI9am9iX2luX290aGVyX251bWJlciwgY29tcG9uZW50X2luX3BhdGg9am9iX2luX3BhdGgpDQoNCiAgICAgICAgcGlwZWxpbmUgPSBwaXBlbGluZSgxMCwgMTUsIGpvYl9pbnB1dCkNCiAgICAgICAgam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSkNCiAgICAgICAgIyBjaGVjayByZXF1aXJlZCBmaWVsZHMgaW4gam9iIGRpY3QNCiAgICAgICAgZGVmYXVsdF9zZXJ2aWNlcyA9IGpvYi5fdG9fZGljdCgpWyJzZXJ2aWNlcyJdDQogICAgICAgIGFzc2VydCAiU3R1ZGlvIiBpbiBkZWZhdWx0X3NlcnZpY2VzDQogICAgICAgIGFzc2VydCAiVHJhY2tpbmciIGluIGRlZmF1bHRfc2VydmljZXMNCiAgICAgICAgYXNzZXJ0IGRlZmF1bHRfc2VydmljZXNbIlN0dWRpbyJdWyJlbmRwb2ludCJdLnN0YXJ0c3dpdGgoImh0dHBzOi8vbWwuYXp1cmUuY29tL3J1bnMvIikNCiAgICAgICAgYXNzZXJ0IGRlZmF1bHRfc2VydmljZXNbIlN0dWRpbyJdWyJ0eXBlIl0gPT0gIlN0dWRpbyINCiAgICAgICAgYXNzZXJ0IGRlZmF1bHRfc2VydmljZXNbIlRyYWNraW5nIl1bImVuZHBvaW50Il0uc3RhcnRzd2l0aCgiYXp1cmVtbDovLyIpDQogICAgICAgIGFzc2VydCBkZWZhdWx0X3NlcnZpY2VzWyJUcmFja2luZyJdWyJ0eXBlIl0gPT0gIlRyYWNraW5nIg0KDQogICAgZGVmIHRlc3RfZ3JvdXBfb3V0cHV0c19kZXNjcmlwdGlvbl9vdmVyd3JpdGUoc2VsZiwgY2xpZW50KToNCiAgICAgICAgIyB0ZXN0IGdyb3VwIG91dHB1dHMgZGVzY3JpcHRpb24gb3ZlcndyaXRlDQogICAgICAgIEBncm91cA0KICAgICAgICBjbGFzcyBPdXRwdXRzOg0KICAgICAgICAgICAgb3V0cHV0MTogT3V0cHV0KHR5cGU9InVyaV9mb2xkZXIiLCBkZXNjcmlwdGlvbj0ibmV3IGRlc2NyaXB0aW9uIikNCg0KICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfeWFtbCA9ICIuL3Rlc3RzL3Rlc3RfY29uZmlncy9jb21wb25lbnRzL2hlbGxvd29ybGRfY29tcG9uZW50LnltbCINCiAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X2Z1bmMgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9aGVsbG9fd29ybGRfY29tcG9uZW50X3lhbWwpDQoNCiAgICAgICAgQGRzbC5waXBlbGluZShkZWZhdWx0X2NvbXB1dGVfdGFyZ2V0PSJjcHUtY2x1c3RlciIpDQogICAgICAgIGRlZiBteV9waXBlbGluZSgpIC0\u002BIE91dHB1dHM6DQogICAgICAgICAgICBub2RlMSA9IGhlbGxvX3dvcmxkX2NvbXBvbmVudF9mdW5jKGNvbXBvbmVudF9pbl9udW1iZXI9MSwgY29tcG9uZW50X2luX3BhdGg9am9iX2lucHV0KQ0KICAgICAgICAgICAgcmV0dXJuIE91dHB1dHMoDQogICAgICAgICAgICAgICAgb3V0cHV0MT1ub2RlMS5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aCwNCiAgICAgICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZV9qb2IgPSBteV9waXBlbGluZSgpDQogICAgICAgICMgb3ZlcndyaXRlIGdyb3VwIG91dHB1dHMgbW9kZSB3aWxsIGFwcGVhciBpbiBwaXBlbGluZSBqb2ImY29tcG9uZW50IGxldmVsDQogICAgICAgIGV4cGVjdGVkX291dHB1dHMgPSB7Im91dHB1dDEiOiB7ImRlc2NyaXB0aW9uIjogIm5ldyBkZXNjcmlwdGlvbiIsICJ0eXBlIjogInVyaV9mb2xkZXIifX0NCiAgICAgICAgZXhwZWN0ZWRfam9iX291dHB1dHMgPSB7Im91dHB1dDEiOiB7ImRlc2NyaXB0aW9uIjogIm5ldyBkZXNjcmlwdGlvbiIsICJqb2Jfb3V0cHV0X3R5cGUiOiAidXJpX2ZvbGRlciJ9fQ0KICAgICAgICByZXN0X2pvYl9kaWN0ID0gcGlwZWxpbmVfam9iLl90b19yZXN0X29iamVjdCgpLmFzX2RpY3QoKQ0KDQogICAgICAgICMgYXNzZXJ0IHBpcGVsaW5lIGpvYiBsZXZlbCBtb2RlIG92ZXJ3cml0ZQ0KICAgICAgICBhc3NlcnQgcmVzdF9qb2JfZGljdFsicHJvcGVydGllcyJdWyJvdXRwdXRzIl0gPT0gZXhwZWN0ZWRfam9iX291dHB1dHMNCiAgICAgICAgIyBhc3NlcnQgcGlwZWxpbmUgY29tcG9uZW50IGxldmVsIG1vZGUgb3ZlcndyaXRlDQogICAgICAgIGFzc2VydCBwaXBlbGluZV9qb2IuY29tcG9uZW50Ll90b19kaWN0KClbIm91dHB1dHMiXSA9PSBleHBlY3RlZF9vdXRwdXRzDQoNCiAgICAgICAgcmVzdF9qb2IgPSBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZV9qb2IsIGNsaWVudCkNCiAgICAgICAgcmVzdF9qb2JfZGljdCA9IHJlc3Rfam9iLl90b19yZXN0X29iamVjdCgpLmFzX2RpY3QoKQ0KICAgICAgICBhc3NlcnQgcmVzdF9qb2JfZGljdFsicHJvcGVydGllcyJdWyJvdXRwdXRzIl1bIm91dHB1dDEiXVsiZGVzY3JpcHRpb24iXSA9PSAibmV3IGRlc2NyaXB0aW9uIg0KDQogICAgICAgIGNvbXBvbmVudCA9IGNsaWVudC5jb21wb25lbnRzLmNyZWF0ZV9vcl91cGRhdGUocGlwZWxpbmVfam9iLmNvbXBvbmVudCwgX2lzX2Fub255bW91cz1UcnVlKQ0KICAgICAgICBhc3NlcnQgY29tcG9uZW50Ll90b19yZXN0X29iamVjdCgpLmFzX2RpY3QoKVsicHJvcGVydGllcyJdWyJjb21wb25lbnRfc3BlYyJdWyJvdXRwdXRzIl0gPT0gZXhwZWN0ZWRfb3V0cHV0cw0KDQogICAgZGVmIHRlc3RfZ3JvdXBfb3V0cHV0c19tb2RlX292ZXJ3cml0ZShzZWxmLCBjbGllbnQpOg0KICAgICAgICAjIHRlc3QgZ3JvdXAgb3V0cHV0cyBtb2RlIG92ZXJ3cml0ZQ0KICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfeWFtbCA9ICIuL3Rlc3RzL3Rlc3RfY29uZmlncy9jb21wb25lbnRzL2hlbGxvd29ybGRfY29tcG9uZW50LnltbCINCiAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X2Z1bmMgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9aGVsbG9fd29ybGRfY29tcG9uZW50X3lhbWwpDQoNCiAgICAgICAgQGdyb3VwDQogICAgICAgIGNsYXNzIE91dHB1dHM6DQogICAgICAgICAgICBvdXRwdXQxOiBPdXRwdXQodHlwZT0idXJpX2ZvbGRlciIsIG1vZGU9InVwbG9hZCIpDQoNCiAgICAgICAgQGRzbC5waXBlbGluZShkZWZhdWx0X2NvbXB1dGVfdGFyZ2V0PSJjcHUtY2x1c3RlciIpDQogICAgICAgIGRlZiBteV9waXBlbGluZSgpIC0\\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5kYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZS5jb3B5X2RhdGEucGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZV9mcm9tX3lhbWwgYXMgZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lKCkNCg0KICAgICAgICBwaXBlbGluZV9qb2IgPSBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKHBpcGVsaW5lKQ0KDQogICAgICAgIGFjdHVhbF9qb2IgPSBvbWl0X3dpdGhfd2lsZGNhcmQocGlwZWxpbmVfam9iLl90b19yZXN0X29iamVjdCgpLnByb3BlcnRpZXMuYXNfZGljdCgpLCAqY29tbW9uX29taXRfZmllbGRzKQ0KDQogICAgICAgIGV4cGVjdGVkX2pvYiA9IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJzdWJtaXQgYSBwaXBlbGluZSB3aXRoIGRhdGEgdHJhbnNmZXIgY29weSBqb2IiLA0KICAgICAgICAgICAgImlucHV0cyI6IHsNCiAgICAgICAgICAgICAgICAiY29zbW9zX2ZvbGRlciI6IHsiam9iX2lucHV0X3R5cGUiOiAidXJpX2ZvbGRlciIsICJtb2RlIjogIlJlYWRPbmx5TW91bnQifSwNCiAgICAgICAgICAgICAgICAiY29zbW9zX2ZvbGRlcl9kdXAiOiB7ImpvYl9pbnB1dF90eXBlIjogInVyaV9mb2xkZXIiLCAibW9kZSI6ICJSZWFkT25seU1vdW50In0sDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgImlzX2FyY2hpdmVkIjogRmFsc2UsDQogICAgICAgICAgICAiam9iX3R5cGUiOiAiUGlwZWxpbmUiLA0KICAgICAgICAgICAgImpvYnMiOiB7DQogICAgICAgICAgICAgICAgIm1lcmdlX2ZpbGVzIjogew0KICAgICAgICAgICAgICAgICAgICAiZGF0YV9jb3B5X21vZGUiOiAibWVyZ2Vfd2l0aF9vdmVyd3JpdGUiLA0KICAgICAgICAgICAgICAgICAgICAiaW5wdXRzIjogew0KICAgICAgICAgICAgICAgICAgICAgICAgImZvbGRlcjEiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAiJHt7cGFyZW50LmlucHV0cy5jb3Ntb3NfZm9sZGVyfX0ifSwNCiAgICAgICAgICAgICAgICAgICAgICAgICJmb2xkZXIyIjogeyJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwgInZhbHVlIjogIiR7e3BhcmVudC5pbnB1dHMuY29zbW9zX2ZvbGRlcl9kdXB9fSJ9LA0KICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJtZXJnZV9maWxlcyIsDQogICAgICAgICAgICAgICAgICAgICJvdXRwdXRzIjogeyJvdXRwdXRfZm9sZGVyIjogeyJ0eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAiJHt7cGFyZW50Lm91dHB1dHMubWVyZ2VkX2Jsb2J9fSJ9fSwNCiAgICAgICAgICAgICAgICAgICAgInRhc2siOiAiY29weV9kYXRhIiwNCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiZGF0YV90cmFuc2ZlciIsDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICJvdXRwdXRzIjogeyJtZXJnZWRfYmxvYiI6IHsiam9iX291dHB1dF90eXBlIjogInVyaV9mb2xkZXIiLCAibW9kZSI6ICJSZWFkV3JpdGVNb3VudCJ9fSwNCiAgICAgICAgICAgICJzZXR0aW5ncyI6IHsiZGVmYXVsdF9jb21wdXRlIjogInNlcnZlcmxlc3MifSwNCiAgICAgICAgICAgICJ0YWdzIjoge30sDQogICAgICAgIH0NCiAgICAgICAgYXNzZXJ0IGV4cGVjdGVkX2pvYiA9PSBhY3R1YWxfam9iDQoNCiAgICBkZWYgdGVzdF9vdXRwdXRfc2V0dGluZ19wYXRoKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "J\u002B6bv2ZgF6Q27Jb2pzkdxw==",
        "Date": "Tue, 11 Apr 2023 18:38:22 GMT",
        "ETag": "\u00220x8DB3ABBEDA40BF6\u0022",
        "Last-Modified": "Tue, 11 Apr 2023 18:38:22 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "XT\u002Bruvo6T8U=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2021-12-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://sab6b272nokaeak.blob.core.windows.net/azureml-blobstore-061273aa-2956-4aff-8628-0fad8c820f9e/LocalUpload/00000000000000000000000000000000/e2etests/__init__.py?comp=metadata",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "0",
        "User-Agent": "azsdk-python-storage-blob/12.15.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)",
        "x-ms-date": "Tue, 11 Apr 2023 18:38:23 GMT",
        "x-ms-meta-name": "b5e658e2-08cf-4147-8d97-bd47cee0246c",
        "x-ms-meta-upload_status": "completed",
        "x-ms-meta-version": "8ee8839e-22f1-47dc-b73d-d35076e9ca75",
        "x-ms-version": "2021-12-02"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Date": "Tue, 11 Apr 2023 18:38:22 GMT",
        "ETag": "\u00220x8DB3ABBEDBD5CB2\u0022",
        "Last-Modified": "Tue, 11 Apr 2023 18:38:22 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2021-12-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/jobs/000000000000000000000?api-version=2023-02-01-preview",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "2957",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)"
      },
      "RequestBody": {
        "properties": {
          "properties": {},
          "tags": {},
          "displayName": "pipeline_with_do_while",
          "experimentName": "azure-ai-ml",
          "isArchived": false,
          "jobType": "Pipeline",
          "inputs": {
            "component_in_number": {
              "jobInputType": "literal",
              "value": "2"
            },
            "component_in_path": {
              "uri": "azureml://datastores/workspaceblobstore/paths/LocalUpload/00000000000000000000000000000000/e2etests/",
              "jobInputType": "uri_folder"
            }
          },
          "jobs": {
            "do_while_body_pipeline": {
              "name": "do_while_body_pipeline",
              "type": "pipeline",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_path}}"
                }
              },
              "_source": "DSL",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/caea97fc-3be0-453b-b662-ceee12aae3dc"
            },
            "do_while_with_pipeline": {
              "body": "${{parent.jobs.do_while_body_pipeline}}",
              "type": "do_while",
              "condition": "is_number_larger_than_zero",
              "mapping": {
                "${{parent.jobs.do_while_body_pipeline.outputs.output_in_path}}": [
                  "component_in_path"
                ]
              },
              "limits": {
                "max_iteration_count": 5
              },
              "_source": "DSL"
            },
            "command_component": {
              "name": "command_component",
              "type": "command",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_path}}"
                }
              },
              "_source": "YAML.COMPONENT",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/ef0b70d1-1bcc-4d6b-8d6d-47000e9bcd49"
            },
            "do_while_with_command_component": {
              "body": "${{parent.jobs.command_component}}",
              "type": "do_while",
              "condition": "is_number_larger_than_zero",
              "mapping": {
                "output_in_number": [
                  "component_in_number"
                ],
                "${{parent.jobs.command_component.outputs.output_in_path}}": [
                  "component_in_path"
                ]
              },
              "limits": {
                "max_iteration_count": 5
              },
              "_source": "DSL"
            },
            "basic_component": {
              "name": "basic_component",
              "type": "pipeline",
              "inputs": {
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.jobs.command_component.outputs.output_in_path}}"
                }
              },
              "outputs": {
                "output_in_path": {
                  "value": "${{parent.outputs.output_in_path}}",
                  "type": "literal"
                }
              },
              "_source": "DSL",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/caea97fc-3be0-453b-b662-ceee12aae3dc"
            }
          },
          "outputs": {
            "output_in_path": {
              "jobOutputType": "uri_folder"
            }
          },
          "settings": {
            "default_compute": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/computes/cpu-cluster",
            "_source": "DSL"
          }
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "6040",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 11 Apr 2023 18:38:28 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/jobs/000000000000000000000?api-version=2023-02-01-preview",
        "Pragma": "no-cache",
        "request-context": "appId=cid-v1:512cc15a-13b5-415b-bfd0-dce7accb6bb1",
        "Server-Timing": "traceparent;desc=\u002200-c510dfe592c98139169ed32f838ab5ce-100d7536b252a786-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-test-westus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "6dcca60a-ea6b-4274-a2a6-31160376eebc",
        "x-ms-ratelimit-remaining-subscription-writes": "1194",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "WESTUS2:20230411T183828Z:6dcca60a-ea6b-4274-a2a6-31160376eebc",
        "x-request-time": "4.974"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/jobs/000000000000000000000",
        "name": "000000000000000000000",
        "type": "Microsoft.MachineLearningServices/workspaces/jobs",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {
            "azureml.DevPlatv2": "true",
            "azureml.DatasetAccessMode": "Asset",
            "azureml.runsource": "azureml.PipelineRun",
            "runSource": "MFE",
            "runType": "HTTP",
            "azureml.parameters": "{\u0022component_in_number\u0022:\u00222\u0022}",
            "azureml.continue_on_step_failure": "True",
            "azureml.continue_on_failed_optional_input": "True",
            "azureml.enforceRerun": "False",
            "azureml.defaultComputeName": "cpu-cluster",
            "azureml.defaultDataStoreName": "workspaceblobstore",
            "azureml.pipelineComponent": "pipelinerun"
          },
          "displayName": "pipeline_with_do_while",
          "status": "Preparing",
          "experimentName": "azure-ai-ml",
          "services": {
            "Tracking": {
              "jobServiceType": "Tracking",
              "port": null,
              "endpoint": "azureml://master.api.azureml-test.ms/mlflow/v1.0/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000?",
              "status": null,
              "errorMessage": null,
              "properties": null,
              "nodes": null
            },
            "Studio": {
              "jobServiceType": "Studio",
              "port": null,
              "endpoint": "https://ml.azure.com/runs/000000000000000000000?wsid=/subscriptions/00000000-0000-0000-0000-000000000/resourcegroups/00000/workspaces/00000",
              "status": null,
              "errorMessage": null,
              "properties": null,
              "nodes": null
            }
          },
          "computeId": null,
          "isArchived": false,
          "identity": null,
          "componentId": null,
          "notificationSetting": null,
          "jobType": "Pipeline",
          "settings": {
            "default_compute": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/computes/cpu-cluster",
            "_source": "DSL"
          },
          "jobs": {
            "do_while_body_pipeline": {
              "name": "do_while_body_pipeline",
              "type": "pipeline",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_path}}"
                }
              },
              "_source": "DSL",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/caea97fc-3be0-453b-b662-ceee12aae3dc"
            },
            "do_while_with_pipeline": {
              "body": "${{parent.jobs.do_while_body_pipeline}}",
              "type": "do_while",
              "condition": "is_number_larger_than_zero",
              "mapping": {
                "${{parent.jobs.do_while_body_pipeline.outputs.output_in_path}}": [
                  "component_in_path"
                ]
              },
              "limits": {
                "max_iteration_count": 5
              },
              "_source": "DSL"
            },
            "command_component": {
              "name": "command_component",
              "type": "command",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_path}}"
                }
              },
              "_source": "YAML.COMPONENT",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/ef0b70d1-1bcc-4d6b-8d6d-47000e9bcd49"
            },
            "do_while_with_command_component": {
              "body": "${{parent.jobs.command_component}}",
              "type": "do_while",
              "condition": "is_number_larger_than_zero",
              "mapping": {
                "output_in_number": [
                  "component_in_number"
                ],
                "${{parent.jobs.command_component.outputs.output_in_path}}": [
                  "component_in_path"
                ]
              },
              "limits": {
                "max_iteration_count": 5
              },
              "_source": "DSL"
            },
            "basic_component": {
              "name": "basic_component",
              "type": "pipeline",
              "inputs": {
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.jobs.command_component.outputs.output_in_path}}"
                }
              },
              "outputs": {
                "output_in_path": {
                  "value": "${{parent.outputs.output_in_path}}",
                  "type": "literal"
                }
              },
              "_source": "DSL",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/caea97fc-3be0-453b-b662-ceee12aae3dc"
            }
          },
          "inputs": {
            "component_in_number": {
              "description": null,
              "jobInputType": "literal",
              "value": "2"
            },
            "component_in_path": {
              "description": null,
              "uri": "azureml://datastores/workspaceblobstore/paths/LocalUpload/00000000000000000000000000000000/e2etests/",
              "mode": "ReadOnlyMount",
              "jobInputType": "uri_folder"
            }
          },
          "outputs": {
            "output_in_path": {
              "description": null,
              "uri": null,
              "assetName": null,
              "assetVersion": null,
              "mode": "ReadWriteMount",
              "jobOutputType": "uri_folder"
            }
          },
          "sourceJobId": null
        },
        "systemData": {
          "createdAt": "2023-04-11T18:38:27.4495227\u002B00:00",
          "createdBy": "Diondra Peck",
          "createdByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/jobs/000000000000000000000/cancel?api-version=2023-02-01-preview",
      "RequestMethod": "POST",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "0",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 202,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "4",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 11 Apr 2023 18:38:30 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/centraluseuap/mfeOperationResults/jc:061273aa-2956-4aff-8628-0fad8c820f9e:000000000000000000000?api-version=2023-02-01-preview",
        "Pragma": "no-cache",
        "request-context": "appId=cid-v1:512cc15a-13b5-415b-bfd0-dce7accb6bb1",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-test-westus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-async-operation-timeout": "PT1H",
        "x-ms-correlation-request-id": "d80d8719-ea7d-474f-a046-3eef4a95316b",
        "x-ms-ratelimit-remaining-subscription-writes": "1198",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "WESTUS2:20230411T183831Z:d80d8719-ea7d-474f-a046-3eef4a95316b",
        "x-request-time": "0.983"
      },
      "ResponseBody": "null"
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/centraluseuap/mfeOperationResults/jc:061273aa-2956-4aff-8628-0fad8c820f9e:000000000000000000000?api-version=2023-02-01-preview",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "*/*",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 202,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "2",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 11 Apr 2023 18:38:30 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/centraluseuap/mfeOperationResults/jc:061273aa-2956-4aff-8628-0fad8c820f9e:000000000000000000000?api-version=2023-02-01-preview",
        "Pragma": "no-cache",
        "request-context": "appId=cid-v1:512cc15a-13b5-415b-bfd0-dce7accb6bb1",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-test-westus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "0a30951d-ad48-42cd-8f08-b71ac77d1893",
        "x-ms-ratelimit-remaining-subscription-reads": "11998",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "WESTUS2:20230411T183831Z:0a30951d-ad48-42cd-8f08-b71ac77d1893",
        "x-request-time": "0.051"
      },
      "ResponseBody": {}
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/centraluseuap/mfeOperationResults/jc:061273aa-2956-4aff-8628-0fad8c820f9e:000000000000000000000?api-version=2023-02-01-preview",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "*/*",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.10.11 (Windows-10-10.0.19045-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "0",
        "Date": "Tue, 11 Apr 2023 18:39:01 GMT",
        "Expires": "-1",
        "Pragma": "no-cache",
        "request-context": "appId=cid-v1:512cc15a-13b5-415b-bfd0-dce7accb6bb1",
        "Server-Timing": "traceparent;desc=\u002200-81acccf32e70d3afa2429b97c11d0573-cd113fe77ccf23ae-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-test-westus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "d52198b9-83ef-49cf-951b-3265ea6fa8c4",
        "x-ms-ratelimit-remaining-subscription-reads": "11997",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "WESTUS2:20230411T183901Z:d52198b9-83ef-49cf-951b-3265ea6fa8c4",
        "x-request-time": "0.031"
      },
      "ResponseBody": null
    }
  ],
  "Variables": {}
}
