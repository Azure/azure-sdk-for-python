{
  "Entries": [
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94?api-version=2022-05-01",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "379",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.7.13 (Linux-5.15.90.1-microsoft-standard-WSL2-x86_64-with-debian-bookworm-sid)"
      },
      "RequestBody": {
        "properties": {
          "isAnonymous": true,
          "isArchived": false,
          "condaFile": "channels:\n- defaults\ndependencies:\n- python=3.8.12\n- pip=21.2.2\n- pip:\n  - --extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\n  - mldesigner==0.0.71974906\n  - mlflow\n  - azureml-mlflow\nname: example-environment\n",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04"
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "1170",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Mon, 24 Apr 2023 03:22:07 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94?api-version=2022-05-01",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-580be169d30419a50ac65a78d6a7fcb8-d6455a6c50c1bc73-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "fb43cced-a419-4a20-b083-d7376f82cda7",
        "x-ms-ratelimit-remaining-subscription-writes": "1197",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "CANADACENTRAL:20230424T032208Z:fb43cced-a419-4a20-b083-d7376f82cda7",
        "x-request-time": "0.626"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94",
        "name": "7926e182b294d8644f987381c0081e94",
        "type": "Microsoft.MachineLearningServices/workspaces/environments/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {},
          "isArchived": false,
          "isAnonymous": true,
          "environmentType": "UserCreated",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04",
          "condaFile": "{\n  \u0022channels\u0022: [\n    \u0022defaults\u0022\n  ],\n  \u0022dependencies\u0022: [\n    \u0022python=3.8.12\u0022,\n    \u0022pip=21.2.2\u0022,\n    {\n      \u0022pip\u0022: [\n        \u0022--extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\u0022,\n        \u0022mldesigner==0.0.71974906\u0022,\n        \u0022mlflow\u0022,\n        \u0022azureml-mlflow\u0022\n      ]\n    }\n  ],\n  \u0022name\u0022: \u0022example-environment\u0022\n}",
          "osType": "Linux"
        },
        "systemData": {
          "createdAt": "2023-04-22T06:51:47.9654855\u002B00:00",
          "createdBy": "Firstname Lastname",
          "createdByType": "User",
          "lastModifiedAt": "2023-04-22T06:51:47.9654855\u002B00:00",
          "lastModifiedBy": "Firstname Lastname",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94?api-version=2022-05-01",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "379",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.7.13 (Linux-5.15.90.1-microsoft-standard-WSL2-x86_64-with-debian-bookworm-sid)"
      },
      "RequestBody": {
        "properties": {
          "isAnonymous": true,
          "isArchived": false,
          "condaFile": "channels:\n- defaults\ndependencies:\n- python=3.8.12\n- pip=21.2.2\n- pip:\n  - --extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\n  - mldesigner==0.0.71974906\n  - mlflow\n  - azureml-mlflow\nname: example-environment\n",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04"
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "1170",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Mon, 24 Apr 2023 03:22:07 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94?api-version=2022-05-01",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-8511e5f0dcb546eea7f44233ee52da67-40e46b6ac5f1aef1-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "d859d2ff-aa5e-4be1-a537-739e7a31d5c1",
        "x-ms-ratelimit-remaining-subscription-writes": "1196",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "CANADACENTRAL:20230424T032208Z:d859d2ff-aa5e-4be1-a537-739e7a31d5c1",
        "x-request-time": "0.215"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94",
        "name": "7926e182b294d8644f987381c0081e94",
        "type": "Microsoft.MachineLearningServices/workspaces/environments/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {},
          "isArchived": false,
          "isAnonymous": true,
          "environmentType": "UserCreated",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04",
          "condaFile": "{\n  \u0022channels\u0022: [\n    \u0022defaults\u0022\n  ],\n  \u0022dependencies\u0022: [\n    \u0022python=3.8.12\u0022,\n    \u0022pip=21.2.2\u0022,\n    {\n      \u0022pip\u0022: [\n        \u0022--extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\u0022,\n        \u0022mldesigner==0.0.71974906\u0022,\n        \u0022mlflow\u0022,\n        \u0022azureml-mlflow\u0022\n      ]\n    }\n  ],\n  \u0022name\u0022: \u0022example-environment\u0022\n}",
          "osType": "Linux"
        },
        "systemData": {
          "createdAt": "2023-04-22T06:51:47.9654855\u002B00:00",
          "createdBy": "Firstname Lastname",
          "createdByType": "User",
          "lastModifiedAt": "2023-04-22T06:51:47.9654855\u002B00:00",
          "lastModifiedBy": "Firstname Lastname",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94?api-version=2022-05-01",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "379",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.7.13 (Linux-5.15.90.1-microsoft-standard-WSL2-x86_64-with-debian-bookworm-sid)"
      },
      "RequestBody": {
        "properties": {
          "isAnonymous": true,
          "isArchived": false,
          "condaFile": "channels:\n- defaults\ndependencies:\n- python=3.8.12\n- pip=21.2.2\n- pip:\n  - --extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\n  - mldesigner==0.0.71974906\n  - mlflow\n  - azureml-mlflow\nname: example-environment\n",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04"
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "1170",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Mon, 24 Apr 2023 03:22:08 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94?api-version=2022-05-01",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-35455600829c7c7ef397abeee591737b-360016fcd323e152-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "cdfebb1c-163e-4cdb-ad08-349b61632cb3",
        "x-ms-ratelimit-remaining-subscription-writes": "1195",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "CANADACENTRAL:20230424T032209Z:cdfebb1c-163e-4cdb-ad08-349b61632cb3",
        "x-request-time": "0.175"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94",
        "name": "7926e182b294d8644f987381c0081e94",
        "type": "Microsoft.MachineLearningServices/workspaces/environments/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {},
          "isArchived": false,
          "isAnonymous": true,
          "environmentType": "UserCreated",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04",
          "condaFile": "{\n  \u0022channels\u0022: [\n    \u0022defaults\u0022\n  ],\n  \u0022dependencies\u0022: [\n    \u0022python=3.8.12\u0022,\n    \u0022pip=21.2.2\u0022,\n    {\n      \u0022pip\u0022: [\n        \u0022--extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\u0022,\n        \u0022mldesigner==0.0.71974906\u0022,\n        \u0022mlflow\u0022,\n        \u0022azureml-mlflow\u0022\n      ]\n    }\n  ],\n  \u0022name\u0022: \u0022example-environment\u0022\n}",
          "osType": "Linux"
        },
        "systemData": {
          "createdAt": "2023-04-22T06:51:47.9654855\u002B00:00",
          "createdBy": "Firstname Lastname",
          "createdByType": "User",
          "lastModifiedAt": "2023-04-22T06:51:47.9654855\u002B00:00",
          "lastModifiedBy": "Firstname Lastname",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/000000000000000000000/versions?api-version=2023-04-01\u0026hash=634b294c48adbaa95bcf5efb308a0fcad4c9a1e4a5e7dcf6a44403430acd7a9a\u0026hashVersion=202208",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.7.13 (Linux-5.15.90.1-microsoft-standard-WSL2-x86_64-with-debian-bookworm-sid)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Encoding": "gzip",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Mon, 24 Apr 2023 03:22:16 GMT",
        "Expires": "-1",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-9a8947c86a75e6fcd10bd572bcbb23e8-6e26cbb1347804e1-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "Transfer-Encoding": "chunked",
        "Vary": [
          "Accept-Encoding",
          "Accept-Encoding"
        ],
        "x-aml-cluster": "vienna-eastus-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "2f89f770-1784-4048-9a50-5d829a03afd2",
        "x-ms-ratelimit-remaining-subscription-reads": "11998",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "CANADACENTRAL:20230424T032216Z:2f89f770-1784-4048-9a50-5d829a03afd2",
        "x-request-time": "0.164"
      },
      "ResponseBody": {
        "value": [
          {
            "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/08dc9b7a-d960-4b54-a48f-bca2e7bb841b/versions/1",
            "name": "1",
            "type": "Microsoft.MachineLearningServices/workspaces/codes/versions",
            "properties": {
              "description": null,
              "tags": {},
              "properties": {
                "hash_sha256": "634b294c48adbaa95bcf5efb308a0fcad4c9a1e4a5e7dcf6a44403430acd7a9a",
                "hash_version": "202208"
              },
              "isArchived": false,
              "isAnonymous": false,
              "codeUri": "https://samcw32zcnpjldw.blob.core.windows.net:443/72e8eff8-1-b5247b5a-62b7-5ea7-98f8-9212788d5c24/src",
              "provisioningState": "Succeeded"
            },
            "systemData": {
              "createdAt": "2023-04-22T06:52:09.0385486\u002B00:00",
              "createdBy": "Firstname Lastname",
              "createdByType": "User",
              "lastModifiedAt": "2023-04-22T06:52:09.0385486\u002B00:00",
              "lastModifiedBy": "Firstname Lastname",
              "lastModifiedByType": "User"
            }
          }
        ]
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/08dc9b7a-d960-4b54-a48f-bca2e7bb841b/versions/1?api-version=2023-04-01",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.7.13 (Linux-5.15.90.1-microsoft-standard-WSL2-x86_64-with-debian-bookworm-sid)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Encoding": "gzip",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Mon, 24 Apr 2023 03:22:16 GMT",
        "Expires": "-1",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-0d5d508867edfc4958c64b27367e140a-9175fd3d6453ef4d-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "Transfer-Encoding": "chunked",
        "Vary": [
          "Accept-Encoding",
          "Accept-Encoding"
        ],
        "x-aml-cluster": "vienna-eastus-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "af4db490-63d7-449e-a2b4-c219f417b196",
        "x-ms-ratelimit-remaining-subscription-reads": "11997",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "CANADACENTRAL:20230424T032216Z:af4db490-63d7-449e-a2b4-c219f417b196",
        "x-request-time": "0.043"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/08dc9b7a-d960-4b54-a48f-bca2e7bb841b/versions/1",
        "name": "1",
        "type": "Microsoft.MachineLearningServices/workspaces/codes/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {
            "hash_sha256": "0000000000000",
            "hash_version": "0000000000000"
          },
          "isArchived": false,
          "isAnonymous": false,
          "codeUri": "https://samcw32zcnpjldw.blob.core.windows.net:443/72e8eff8-1-b5247b5a-62b7-5ea7-98f8-9212788d5c24/src",
          "provisioningState": "Succeeded"
        },
        "systemData": {
          "createdAt": "2023-04-22T06:52:09.0385486\u002B00:00",
          "createdBy": "Firstname Lastname",
          "createdByType": "User",
          "lastModifiedAt": "2023-04-22T06:52:09.0385486\u002B00:00",
          "lastModifiedBy": "Firstname Lastname",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/000000000000000000000?api-version=2022-10-01",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "1419",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.7.13 (Linux-5.15.90.1-microsoft-standard-WSL2-x86_64-with-debian-bookworm-sid)"
      },
      "RequestBody": {
        "properties": {
          "properties": {},
          "tags": {},
          "isAnonymous": true,
          "isArchived": false,
          "componentSpec": {
            "command": "python basic_component.py $[[--component_in_number ${{inputs.component_in_number}}]] $[[--component_in_number_1 ${{inputs.component_in_number_1}}]] --component_in_path ${{inputs.component_in_path}} --output_in_path ${{outputs.output_in_path}}",
            "code": "azureml:/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/08dc9b7a-d960-4b54-a48f-bca2e7bb841b/versions/1",
            "environment": "azureml:/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94",
            "name": "basic_component",
            "version": "0.0.1",
            "$schema": "https://azuremlschemas.azureedge.net/latest/commandComponent.schema.json",
            "display_name": "Basic component",
            "is_deterministic": true,
            "inputs": {
              "component_in_number": {
                "type": "integer",
                "optional": true
              },
              "component_in_number_1": {
                "type": "integer",
                "optional": true
              },
              "component_in_path": {
                "type": "uri_folder"
              }
            },
            "outputs": {
              "output_in_path": {
                "type": "uri_folder"
              },
              "output_in_number": {
                "type": "integer",
                "is_control": true
              },
              "is_number_larger_than_zero": {
                "type": "boolean",
                "is_control": true
              }
            },
            "type": "command",
            "_source": "YAML.COMPONENT"
          }
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "1989",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Mon, 24 Apr 2023 03:22:24 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/000000000000000000000?api-version=2022-10-01",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-b1a3ccb8be4b610cadd21e1a3acbde77-86b4ac77fbda8385-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "dec8891c-0cd6-490b-9431-50c9a516bc6f",
        "x-ms-ratelimit-remaining-subscription-writes": "1194",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "CANADACENTRAL:20230424T032224Z:dec8891c-0cd6-490b-9431-50c9a516bc6f",
        "x-request-time": "0.283"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/cf16a3af-2aa5-4dfc-955d-350566f92393",
        "name": "cf16a3af-2aa5-4dfc-955d-350566f92393",
        "type": "Microsoft.MachineLearningServices/workspaces/components/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {},
          "isArchived": false,
          "isAnonymous": true,
          "componentSpec": {
            "$schema": "https://azuremlschemas.azureedge.net/latest/commandComponent.schema.json",
            "name": "basic_component",
            "version": "0.0.1",
            "display_name": "Basic component",
            "is_deterministic": "True",
            "type": "command",
            "inputs": {
              "component_in_path": {
                "type": "uri_folder",
                "optional": "False"
              },
              "component_in_number": {
                "type": "integer",
                "optional": "True"
              },
              "component_in_number_1": {
                "type": "integer",
                "optional": "True"
              }
            },
            "outputs": {
              "output_in_path": {
                "type": "uri_folder"
              },
              "output_in_number": {
                "type": "integer",
                "is_control": "True"
              },
              "is_number_larger_than_zero": {
                "type": "boolean",
                "is_control": "True"
              }
            },
            "code": "azureml:/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/08dc9b7a-d960-4b54-a48f-bca2e7bb841b/versions/1",
            "environment": "azureml:/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94",
            "resources": {
              "instance_count": "1"
            },
            "command": "python basic_component.py $[[--component_in_number ${{inputs.component_in_number}}]] $[[--component_in_number_1 ${{inputs.component_in_number_1}}]] --component_in_path ${{inputs.component_in_path}} --output_in_path ${{outputs.output_in_path}}"
          }
        },
        "systemData": {
          "createdAt": "2023-04-22T06:52:17.5765013\u002B00:00",
          "createdBy": "Firstname Lastname",
          "createdByType": "User",
          "lastModifiedAt": "2023-04-22T06:52:17.6354956\u002B00:00",
          "lastModifiedBy": "Firstname Lastname",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/000000000000000000000?api-version=2022-10-01",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "1415",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.7.13 (Linux-5.15.90.1-microsoft-standard-WSL2-x86_64-with-debian-bookworm-sid)"
      },
      "RequestBody": {
        "properties": {
          "properties": {},
          "tags": {},
          "isAnonymous": true,
          "isArchived": false,
          "componentSpec": {
            "name": "do_while_body_pipeline_component",
            "display_name": "do_while_body_pipeline_component",
            "inputs": {
              "component_in_number": {
                "type": "integer",
                "optional": true
              },
              "component_in_path": {
                "type": "uri_folder"
              }
            },
            "outputs": {
              "output_in_path": {
                "type": "uri_folder"
              },
              "output_in_number": {
                "type": "integer",
                "is_control": true
              },
              "is_number_larger_than_zero": {
                "type": "boolean",
                "is_control": true
              }
            },
            "type": "pipeline",
            "jobs": {
              "basic_component": {
                "name": "basic_component",
                "type": "command",
                "inputs": {
                  "component_in_number": {
                    "job_input_type": "literal",
                    "value": "${{parent.inputs.component_in_number}}"
                  },
                  "component_in_path": {
                    "job_input_type": "literal",
                    "value": "${{parent.inputs.component_in_path}}"
                  }
                },
                "outputs": {
                  "output_in_path": {
                    "value": "${{parent.outputs.output_in_path}}",
                    "type": "literal"
                  },
                  "output_in_number": {
                    "value": "${{parent.outputs.output_in_number}}",
                    "type": "literal"
                  },
                  "is_number_larger_than_zero": {
                    "value": "${{parent.outputs.is_number_larger_than_zero}}",
                    "type": "literal"
                  }
                },
                "_source": "YAML.COMPONENT",
                "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/cf16a3af-2aa5-4dfc-955d-350566f92393"
              }
            },
            "_source": "DSL",
            "sourceJobId": null
          }
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "1133",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Mon, 24 Apr 2023 03:22:26 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/000000000000000000000?api-version=2022-10-01",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-c48fc104a5a898c12c7adf91c3ba6919-f7a31244ac8ed5d6-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "44fe6c48-8efe-457c-be9d-d6f2624461bb",
        "x-ms-ratelimit-remaining-subscription-writes": "1193",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "CANADACENTRAL:20230424T032226Z:44fe6c48-8efe-457c-be9d-d6f2624461bb",
        "x-request-time": "0.663"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/6840d832-11ef-4d1a-97b1-5f55acfaf9e7",
        "name": "6840d832-11ef-4d1a-97b1-5f55acfaf9e7",
        "type": "Microsoft.MachineLearningServices/workspaces/components/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {},
          "isArchived": false,
          "isAnonymous": true,
          "componentSpec": {
            "name": "do_while_body_pipeline_component",
            "display_name": "do_while_body_pipeline_component",
            "is_deterministic": "False",
            "type": "pipeline",
            "inputs": {
              "component_in_path": {
                "type": "uri_folder",
                "optional": "False"
              },
              "component_in_number": {
                "type": "integer",
                "optional": "True"
              }
            },
            "outputs": {
              "output_in_path": {
                "type": "uri_folder"
              },
              "output_in_number": {
                "type": "integer",
                "is_control": "True"
              },
              "is_number_larger_than_zero": {
                "type": "boolean",
                "is_control": "True"
              }
            }
          }
        },
        "systemData": {
          "createdAt": "2023-04-24T03:22:26.1461023\u002B00:00",
          "createdBy": "Firstname Lastname",
          "createdByType": "User",
          "lastModifiedAt": "2023-04-24T03:22:26.1461023\u002B00:00",
          "lastModifiedBy": "Firstname Lastname",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/datastores/workspaceblobstore?api-version=2022-10-01",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.7.13 (Linux-5.15.90.1-microsoft-standard-WSL2-x86_64-with-debian-bookworm-sid)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Encoding": "gzip",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Mon, 24 Apr 2023 03:22:26 GMT",
        "Expires": "-1",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-969bd12c668abd0df7665a573bdf50be-7b4b4e67b763e6e8-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "Transfer-Encoding": "chunked",
        "Vary": [
          "Accept-Encoding",
          "Accept-Encoding"
        ],
        "x-aml-cluster": "vienna-eastus-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "18592455-9337-40b1-8382-0dd343797b11",
        "x-ms-ratelimit-remaining-subscription-reads": "11996",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "CANADACENTRAL:20230424T032226Z:18592455-9337-40b1-8382-0dd343797b11",
        "x-request-time": "0.112"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/datastores/workspaceblobstore",
        "name": "workspaceblobstore",
        "type": "Microsoft.MachineLearningServices/workspaces/datastores",
        "properties": {
          "description": null,
          "tags": null,
          "properties": null,
          "isDefault": true,
          "credentials": {
            "credentialsType": "AccountKey"
          },
          "datastoreType": "AzureBlob",
          "accountName": "samcw32zcnpjldw",
          "containerName": "azureml-blobstore-72e8eff8-148b-4582-a07d-efc79559f19f",
          "endpoint": "core.windows.net",
          "protocol": "https",
          "serviceDataAccessAuthIdentity": "WorkspaceSystemAssignedIdentity"
        },
        "systemData": {
          "createdAt": "2023-04-22T04:25:24.8100138\u002B00:00",
          "createdBy": "779301c0-18b2-4cdc-801b-a0a3368fee0a",
          "createdByType": "Application",
          "lastModifiedAt": "2023-04-22T04:25:25.4215298\u002B00:00",
          "lastModifiedBy": "779301c0-18b2-4cdc-801b-a0a3368fee0a",
          "lastModifiedByType": "Application"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/datastores/workspaceblobstore/listSecrets?api-version=2022-10-01",
      "RequestMethod": "POST",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "0",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.7.13 (Linux-5.15.90.1-microsoft-standard-WSL2-x86_64-with-debian-bookworm-sid)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Encoding": "gzip",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Mon, 24 Apr 2023 03:22:26 GMT",
        "Expires": "-1",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-63a23cd094f0652fe3ad39e79d677c89-466248a777fc56ff-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "Transfer-Encoding": "chunked",
        "Vary": "Accept-Encoding",
        "x-aml-cluster": "vienna-eastus-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "a572ff0f-baec-483e-92e8-318f6c2b7be6",
        "x-ms-ratelimit-remaining-subscription-writes": "1198",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "CANADACENTRAL:20230424T032226Z:a572ff0f-baec-483e-92e8-318f6c2b7be6",
        "x-request-time": "0.116"
      },
      "ResponseBody": {
        "secretsType": "AccountKey",
        "key": "dGhpcyBpcyBmYWtlIGtleQ=="
      }
    },
    {
      "RequestUri": "https://samcw32zcnpjldw.blob.core.windows.net/azureml-blobstore-72e8eff8-148b-4582-a07d-efc79559f19f/LocalUpload/00000000000000000000000000000000/e2etests/__init__.py",
      "RequestMethod": "HEAD",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.7.13 (Linux-5.15.90.1-microsoft-standard-WSL2-x86_64-with-debian-bookworm-sid)",
        "x-ms-date": "Mon, 24 Apr 2023 03:22:25 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": null,
      "StatusCode": 404,
      "ResponseHeaders": {
        "Date": "Mon, 24 Apr 2023 03:22:26 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "Transfer-Encoding": "chunked",
        "x-ms-error-code": "BlobNotFound",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://samcw32zcnpjldw.blob.core.windows.net/azureml-blobstore-72e8eff8-148b-4582-a07d-efc79559f19f/LocalUpload/00000000000000000000000000000000/e2etests/__init__.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "0",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.7.13 (Linux-5.15.90.1-microsoft-standard-WSL2-x86_64-with-debian-bookworm-sid)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Mon, 24 Apr 2023 03:22:25 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": null,
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "1B2M2Y8AsgTpgAmY7PhCfg==",
        "Date": "Mon, 24 Apr 2023 03:22:27 GMT",
        "ETag": "\u00220x8DB4473216E5FB1\u0022",
        "Last-Modified": "Mon, 24 Apr 2023 03:22:27 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "AAAAAAAAAAA=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://samcw32zcnpjldw.blob.core.windows.net/azureml-blobstore-72e8eff8-148b-4582-a07d-efc79559f19f/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_pipeline_on_registry.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "4441",
        "Content-MD5": "w4/WwgQjAnQ92uQlPcU6MQ==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.7.13 (Linux-5.15.90.1-microsoft-standard-WSL2-x86_64-with-debian-bookworm-sid)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Mon, 24 Apr 2023 03:22:25 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": "ZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCgppbXBvcnQgcHl0ZXN0CmZyb20gYXp1cmUuY29yZS5leGNlcHRpb25zIGltcG9ydCBSZXNvdXJjZU5vdEZvdW5kRXJyb3IKCmZyb20gYXp1cmUuYWkubWwgaW1wb3J0IElucHV0LCBNTENsaWVudCwgbG9hZF9jb21wb25lbnQsIGxvYWRfbW9kZWwKZnJvbSBhenVyZS5haS5tbC5jb25zdGFudHMgaW1wb3J0IEFzc2V0VHlwZXMKZnJvbSBhenVyZS5haS5tbC5kc2wgaW1wb3J0IHBpcGVsaW5lCmZyb20gZGV2dG9vbHNfdGVzdHV0aWxzIGltcG9ydCBBenVyZVJlY29yZGVkVGVzdENhc2UsIGlzX2xpdmUKZnJvbSB0ZXN0X3V0aWxpdGllcy51dGlscyBpbXBvcnQgX1BZVEVTVF9USU1FT1VUX01FVEhPRCwgYXNzZXJ0X2pvYl9jYW5jZWwKZnJvbSAuLl91dGlsIGltcG9ydCBfRFNMX1RJTUVPVVRfU0VDT05ECgoKZGVmIGFzc2VydF9waXBlbGluZV9qb2JfY2FuY2VsKGNsaWVudDogTUxDbGllbnQsIHNjb3JlX2Z1bmMsIHBpcGVsaW5lX21vZGVsX2lucHV0LCBwaXBlbGluZV90ZXN0X2RhdGEpOgogICAgQHBpcGVsaW5lCiAgICBkZWYgc2NvcmVfcGlwZWxpbmUobW9kZWxfaW5wdXQsIHRlc3RfZGF0YSk6CiAgICAgICAgc2NvcmUgPSBzY29yZV9mdW5jKG1vZGVsX2lucHV0PW1vZGVsX2lucHV0LCB0ZXN0X2RhdGE9dGVzdF9kYXRhKSAgIyBub3FhOiBGODQxCiAgICAgICAgc2NvcmVfZHVwbGljYXRlID0gc2NvcmVfZnVuYyhtb2RlbF9pbnB1dD1tb2RlbF9pbnB1dCwgdGVzdF9kYXRhPXRlc3RfZGF0YSkgICMgbm9xYTogRjg0MQoKICAgIHBpcGVsaW5lX2pvYiA9IHNjb3JlX3BpcGVsaW5lKG1vZGVsX2lucHV0PXBpcGVsaW5lX21vZGVsX2lucHV0LCB0ZXN0X2RhdGE9cGlwZWxpbmVfdGVzdF9kYXRhKQogICAgcGlwZWxpbmVfam9iLnNldHRpbmdzLmRlZmF1bHRfY29tcHV0ZSA9ICJjcHUtY2x1c3RlciIKICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lX2pvYiwgY2xpZW50KQoKCkBweXRlc3QubWFyay5za2lwaWYoY29uZGl0aW9uPW5vdCBpc19saXZlKCksIHJlYXNvbj0icmVnaXN0cnkgdGVzdCwgbWF5IGZhaWwgaW4gcGxheWJhY2sgbW9kZSIpCkBweXRlc3QubWFyay51c2VmaXh0dXJlcygiZW5hYmxlX3BpcGVsaW5lX3ByaXZhdGVfcHJldmlld19mZWF0dXJlcyIsICJyZWNvcmRlZF90ZXN0IikKQHB5dGVzdC5tYXJrLnRpbWVvdXQodGltZW91dD1fRFNMX1RJTUVPVVRfU0VDT05ELCBtZXRob2Q9X1BZVEVTVF9USU1FT1VUX01FVEhPRCkKQHB5dGVzdC5tYXJrLmUyZXRlc3QKQHB5dGVzdC5tYXJrLnBpcGVsaW5lX3Rlc3QKY2xhc3MgVGVzdERTTFBpcGVsaW5lT25SZWdpc3RyeShBenVyZVJlY29yZGVkVGVzdENhc2UpOgogICAgdGVzdF9kYXRhID0gSW5wdXQoCiAgICAgICAgdHlwZT1Bc3NldFR5cGVzLlVSSV9GSUxFLAogICAgICAgIHBhdGg9Ii4vdGVzdHMvdGVzdF9jb25maWdzL3BpcGVsaW5lX2pvYnMvam9iX3dpdGhfcmVnaXN0cnlfbW9kZWxfYXNfaW5wdXQvZGF0YS9zYW1wbGUxLmNzdiIsCiAgICApCgogICAgZGVmIHRlc3RfcGlwZWxpbmVfam9iX2NyZWF0ZV93aXRoX3JlZ2lzdGVyZWRfY29tcG9uZW50X29uX3JlZ2lzdHJ5KHNlbGYsIHBpcGVsaW5lc19yZWdpc3RyeV9jbGllbnQ6IE1MQ2xpZW50KToKICAgICAgICBsb2NhbF9jb21wb25lbnQgPSBsb2FkX2NvbXBvbmVudCgiLi90ZXN0cy90ZXN0X2NvbmZpZ3MvY29tcG9uZW50cy9iYXNpY19jb21wb25lbnRfY29kZV9sb2NhbF9wYXRoLnltbCIpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBjcmVhdGVkX2NvbXBvbmVudCA9IHBpcGVsaW5lc19yZWdpc3RyeV9jbGllbnQuY29tcG9uZW50cy5nZXQoCiAgICAgICAgICAgICAgICBsb2NhbF9jb21wb25lbnQubmFtZSwgdmVyc2lvbj1sb2NhbF9jb21wb25lbnQudmVyc2lvbgogICAgICAgICAgICApCiAgICAgICAgZXhjZXB0IFJlc291cmNlTm90Rm91bmRFcnJvcjoKICAgICAgICAgICAgY3JlYXRlZF9jb21wb25lbnQgPSBwaXBlbGluZXNfcmVnaXN0cnlfY2xpZW50LmNvbXBvbmVudHMuY3JlYXRlX29yX3VwZGF0ZShsb2NhbF9jb21wb25lbnQpCgogICAgICAgIEBwaXBlbGluZQogICAgICAgIGRlZiBzYW1wbGVfcGlwZWxpbmUoKToKICAgICAgICAgICAgY3JlYXRlZF9jb21wb25lbnQoKQoKICAgICAgICBwaXBlbGluZV9qb2IgPSBzYW1wbGVfcGlwZWxpbmUoKQogICAgICAgIHBpcGVsaW5lX2pvYi5zZXR0aW5ncy5kZWZhdWx0X2NvbXB1dGUgPSAiY3B1LWNsdXN0ZXIiCiAgICAgICAgYXNzZXJ0IHBpcGVsaW5lc19yZWdpc3RyeV9jbGllbnQuam9icy52YWxpZGF0ZShwaXBlbGluZV9qb2IpLnBhc3NlZAoKICAgICMgdGhpcyB0ZXN0IHdpbGwgYnJlYWsgaW4gcGxheWJhY2sgbW9kZSwgc28gaW5jbHVkZSBpdCBpbiBsaXZlIHRlc3Qgb25seQogICAgZGVmIHRlc3RfcGlwZWxpbmVfd2l0aF9sb2NhbF9jb21wb25lbnRfYW5kX3JlZ2lzdHJ5X21vZGVsX2FzX2lucHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpOgogICAgICAgICMgbG9hZF9jb21wb25lbnQKICAgICAgICBzY29yZV9mdW5jID0gbG9hZF9jb21wb25lbnQoIi4vdGVzdHMvdGVzdF9jb25maWdzL3BpcGVsaW5lX2pvYnMvam9iX3dpdGhfcmVnaXN0cnlfbW9kZWxfYXNfaW5wdXQvc2NvcmUueW1sIikKCiAgICAgICAgcGlwZWxpbmVfc2NvcmVfbW9kZWwgPSBJbnB1dCgKICAgICAgICAgICAgdHlwZT0iY3VzdG9tX21vZGVsIiwgcGF0aD0iYXp1cmVtbDovL3JlZ2lzdHJpZXMvc2RrLXRlc3QvbW9kZWxzL2lyaXNfbW9kZWwvdmVyc2lvbnMvMSIKICAgICAgICApCgogICAgICAgIGFzc2VydF9waXBlbGluZV9qb2JfY2FuY2VsKGNsaWVudCwgc2NvcmVfZnVuYywgcGlwZWxpbmVfc2NvcmVfbW9kZWwsIHNlbGYudGVzdF9kYXRhKQoKICAgIGRlZiB0ZXN0X3BpcGVsaW5lX3dpdGhfbG9jYWxfY29tcG9uZW50X2FuZF9yZWdpc3RyeV9tb2RlbF9hc19pbnB1dF93aXRoX21vZGVsX2lucHV0KAogICAgICAgIHNlbGYsIGNsaWVudDogTUxDbGllbnQsIHBpcGVsaW5lc19yZWdpc3RyeV9jbGllbnQ6IE1MQ2xpZW50CiAgICApOgogICAgICAgICMgbG9hZF9jb21wb25lbnQKICAgICAgICBzY29yZV9mdW5jID0gbG9hZF9jb21wb25lbnQoIi4vdGVzdHMvdGVzdF9jb25maWdzL3BpcGVsaW5lX2pvYnMvam9iX3dpdGhfcmVnaXN0cnlfbW9kZWxfYXNfaW5wdXQvc2NvcmUueW1sIikKCiAgICAgICAgbW9kZWxfcGF0aCA9IFBhdGgoIi4vdGVzdHMvdGVzdF9jb25maWdzL21vZGVsL21vZGVsX2lyaXMueW1sIikKICAgICAgICBtb2RlbF9lbnRpdHkgPSBsb2FkX21vZGVsKG1vZGVsX3BhdGgpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBwaXBlbGluZV9zY29yZV9tb2RlbCA9IHBpcGVsaW5lc19yZWdpc3RyeV9jbGllbnQubW9kZWxzLmdldCgKICAgICAgICAgICAgICAgIG5hbWU9bW9kZWxfZW50aXR5Lm5hbWUsIHZlcnNpb249bW9kZWxfZW50aXR5LnZlcnNpb24KICAgICAgICAgICAgKQogICAgICAgIGV4Y2VwdCBSZXNvdXJjZU5vdEZvdW5kRXJyb3I6CiAgICAgICAgICAgIG1vZGVsX2VudGl0eSA9IHBpcGVsaW5lc19yZWdpc3RyeV9jbGllbnQubW9kZWxzLmNyZWF0ZV9vcl91cGRhdGUobW9kZWxfZW50aXR5KQogICAgICAgICAgICBwaXBlbGluZV9zY29yZV9tb2RlbCA9IHBpcGVsaW5lc19yZWdpc3RyeV9jbGllbnQubW9kZWxzLmdldCgKICAgICAgICAgICAgICAgIG5hbWU9bW9kZWxfZW50aXR5Lm5hbWUsIHZlcnNpb249bW9kZWxfZW50aXR5LnZlcnNpb24KICAgICAgICAgICAgKQoKICAgICAgICBhc3NlcnRfcGlwZWxpbmVfam9iX2NhbmNlbChjbGllbnQsIHNjb3JlX2Z1bmMsIHBpcGVsaW5lX3Njb3JlX21vZGVsLCBzZWxmLnRlc3RfZGF0YSkKCiAgICBkZWYgdGVzdF9waXBlbGluZV93aXRoX3JlZ2lzdHJ5X2NvbXBvbmVudF9hbmRfbW9kZWxfYXNfaW5wdXQoCiAgICAgICAgc2VsZiwgY2xpZW50OiBNTENsaWVudCwgcGlwZWxpbmVzX3JlZ2lzdHJ5X2NsaWVudDogTUxDbGllbnQKICAgICk6CiAgICAgICAgIyBsb2FkX2NvbXBvbmVudAogICAgICAgIHNjb3JlX2NvbXBvbmVudF9uYW1lLCBjb21wb25lbnRfdmVyc2lvbiA9ICJzY29yZV9jb21wb25lbnQiLCAiMiIKICAgICAgICBzY29yZV9mdW5jID0gcGlwZWxpbmVzX3JlZ2lzdHJ5X2NsaWVudC5jb21wb25lbnRzLmdldChuYW1lPXNjb3JlX2NvbXBvbmVudF9uYW1lLCB2ZXJzaW9uPWNvbXBvbmVudF92ZXJzaW9uKQoKICAgICAgICBwaXBlbGluZV9zY29yZV9tb2RlbCA9IElucHV0KAogICAgICAgICAgICB0eXBlPSJtbGZsb3dfbW9kZWwiLCBwYXRoPSJhenVyZW1sOi8vcmVnaXN0cmllcy9zZGstdGVzdC9tb2RlbHMvaXJpc19tb2RlbC92ZXJzaW9ucy8xIgogICAgICAgICkKCiAgICAgICAgYXNzZXJ0X3BpcGVsaW5lX2pvYl9jYW5jZWwoY2xpZW50LCBzY29yZV9mdW5jLCBwaXBlbGluZV9zY29yZV9tb2RlbCwgc2VsZi50ZXN0X2RhdGEpCg==",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "w4/WwgQjAnQ92uQlPcU6MQ==",
        "Date": "Mon, 24 Apr 2023 03:22:27 GMT",
        "ETag": "\u00220x8DB44732179F6C6\u0022",
        "Last-Modified": "Mon, 24 Apr 2023 03:22:27 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "5gxaAnUt0/8=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://samcw32zcnpjldw.blob.core.windows.net/azureml-blobstore-72e8eff8-148b-4582-a07d-efc79559f19f/LocalUpload/00000000000000000000000000000000/e2etests/test_controlflow_pipeline.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "44555",
        "Content-MD5": "M\u002BAluAj0SxPdZWYt7IbNyA==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.7.13 (Linux-5.15.90.1-microsoft-standard-WSL2-x86_64-with-debian-bookworm-sid)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Mon, 24 Apr 2023 03:22:25 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": "\",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "M\u002BAluAj0SxPdZWYt7IbNyA==",
        "Date": "Mon, 24 Apr 2023 03:22:27 GMT",
        "ETag": "\u00220x8DB44732187D770\u0022",
        "Last-Modified": "Mon, 24 Apr 2023 03:22:27 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "IyW1\u002BmdBJcM=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://samcw32zcnpjldw.blob.core.windows.net/azureml-blobstore-72e8eff8-148b-4582-a07d-efc79559f19f/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_pipeline_samples.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "19601",
        "Content-MD5": "ePxWxi0sjiP7ZwTSwCeNbQ==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.7.13 (Linux-5.15.90.1-microsoft-standard-WSL2-x86_64-with-debian-bookworm-sid)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Mon, 24 Apr 2023 03:22:25 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": "IiIiClRoaXMgZmlsZSBjb3ZlcnMgYWxsIHNhbXBsZSBwaXBlbGluZSBpbiBodHRwczovL2dpdGh1Yi5jb20vQXp1cmUvYXp1cmVtbC1wcmV2aWV3cy90cmVlL21haW4vcHJldmlld3MvcGlwZWxpbmVzL3NhbXBsZXMKaW4gZHNsLnBpcGVsaW5lLgpUaGUgc2FtcGxlcyBhcmUgY29waWVkIHRvIHRlc3RfY29uZmlncy9kc2xfcGlwZWxpbmVfc2FtcGxlcwoiIiIKaW1wb3J0IGpzb24KaW1wb3J0IHN5cwpmcm9tIHBhdGhsaWIgaW1wb3J0IFBhdGgKCmltcG9ydCBweWRhc2gKaW1wb3J0IHB5dGVzdApmcm9tIGRldnRvb2xzX3Rlc3R1dGlscyBpbXBvcnQgQXp1cmVSZWNvcmRlZFRlc3RDYXNlLCBpc19saXZlCmZyb20gdGVzdF91dGlsaXRpZXMudXRpbHMgaW1wb3J0IF9QWVRFU1RfVElNRU9VVF9NRVRIT0QsIGFzc2VydF9qb2JfY2FuY2VsCgpmcm9tIGF6dXJlLmFpLm1sIGltcG9ydCBNTENsaWVudCwgbG9hZF9qb2IKZnJvbSBhenVyZS5haS5tbC5lbnRpdGllcyBpbXBvcnQgQ29tcG9uZW50IGFzIENvbXBvbmVudEVudGl0eQpmcm9tIGF6dXJlLmFpLm1sLmVudGl0aWVzIGltcG9ydCBQaXBlbGluZUpvYgpmcm9tIGF6dXJlLmFpLm1sLm9wZXJhdGlvbnMuX3J1bl9oaXN0b3J5X2NvbnN0YW50cyBpbXBvcnQgSm9iU3RhdHVzCgpmcm9tIC4uX3V0aWwgaW1wb3J0IF9EU0xfVElNRU9VVF9TRUNPTkQKCnRlc3RzX3Jvb3RfZGlyID0gUGF0aChfX2ZpbGVfXykucGFyZW50LnBhcmVudC5wYXJlbnQKc3lzLnBhdGguaW5zZXJ0KDAsIHN0cih0ZXN0c19yb290X2RpciAvICJ0ZXN0X2NvbmZpZ3MiKSkKc2FtcGxlc19kaXIgPSB0ZXN0c19yb290X2RpciAvICJ0ZXN0X2NvbmZpZ3MvZHNsX3BpcGVsaW5lLyIKCgpkZWYgYXNzZXJ0X2pvYl9jb21wbGV0ZWQocGlwZWxpbmUsIGNsaWVudDogTUxDbGllbnQpOgogICAgam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSkKICAgIGNsaWVudC5qb2JzLnN0cmVhbShqb2IubmFtZSkKICAgIGFzc2VydCBjbGllbnQuam9icy5nZXQoam9iLm5hbWUpLnN0YXR1cyA9PSBKb2JTdGF0dXMuQ09NUExFVEVECgoKZGVmIGFzc2VydF9kc2xfY3VyYXRlZChwaXBlbGluZTogUGlwZWxpbmVKb2IsIGpvYl95YW1sLCBvbWl0X2ZpZWxkcyk6CiAgICBkc2xfcGlwZWxpbmVfam9iX2RpY3QgPSBwaXBlbGluZS5fdG9fcmVzdF9vYmplY3QoKS5hc19kaWN0KCkKICAgIHBpcGVsaW5lX2pvYl9kaWN0ID0gbG9hZF9qb2Ioc291cmNlPWpvYl95YW1sKS5fdG9fcmVzdF9vYmplY3QoKS5hc19kaWN0KCkKCiAgICBkc2xfcGlwZWxpbmVfam9iX2RpY3QgPSBweWRhc2gub21pdChkc2xfcGlwZWxpbmVfam9iX2RpY3QsIG9taXRfZmllbGRzKQogICAgcGlwZWxpbmVfam9iX2RpY3QgPSBweWRhc2gub21pdChwaXBlbGluZV9qb2JfZGljdCwgb21pdF9maWVsZHMpCiAgICBwcmludChqc29uLmR1bXBzKGRzbF9waXBlbGluZV9qb2JfZGljdCwgaW5kZW50PTIpKQogICAgcHJpbnQoanNvbi5kdW1wcyhwaXBlbGluZV9qb2JfZGljdCwgaW5kZW50PTIpKQogICAgYXNzZXJ0IGRzbF9waXBlbGluZV9qb2JfZGljdCA9PSBwaXBlbGluZV9qb2JfZGljdAoKCkBweXRlc3QubWFyay51c2VmaXh0dXJlcygKICAgICJlbmFibGVfZW52aXJvbm1lbnRfaWRfYXJtX2V4cGFuc2lvbiIsCiAgICAiZW5hYmxlX3BpcGVsaW5lX3ByaXZhdGVfcHJldmlld19mZWF0dXJlcyIsCiAgICAibW9ja19jb2RlX2hhc2giLAogICAgIm1vY2tfY29tcG9uZW50X2hhc2giLAogICAgIm1vY2tfc2V0X2hlYWRlcnNfd2l0aF91c2VyX2FtbF90b2tlbiIsCiAgICAicmVjb3JkZWRfdGVzdCIsCiAgICAibW9ja19hc3NldF9uYW1lIiwKICAgICJtb2NrX2Fub25fY29tcG9uZW50X3ZlcnNpb24iLAopCkBweXRlc3QubWFyay50aW1lb3V0KHRpbWVvdXQ9X0RTTF9USU1FT1VUX1NFQ09ORCwgbWV0aG9kPV9QWVRFU1RfVElNRU9VVF9NRVRIT0QpCkBweXRlc3QubWFyay5lMmV0ZXN0CkBweXRlc3QubWFyay5waXBlbGluZV90ZXN0CmNsYXNzIFRlc3REU0xQaXBlbGluZVNhbXBsZXMoQXp1cmVSZWNvcmRlZFRlc3RDYXNlKToKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9lMmVfbG9jYWxfY29tcG9uZW50cyhzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5lMmVfbG9jYWxfY29tcG9uZW50cy5waXBlbGluZSBpbXBvcnQgKAogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgZTJlX2xvY2FsX2NvbXBvbmVudHMsCiAgICAgICAgKQoKICAgICAgICBwaXBlbGluZSA9IGUyZV9sb2NhbF9jb21wb25lbnRzKCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9lMmVfcmVnaXN0ZXJlZF9jb21wb25lbnRzKAogICAgICAgIHNlbGYsCiAgICAgICAgY2xpZW50OiBNTENsaWVudCwKICAgICAgICBwaXBlbGluZV9zYW1wbGVzX2UyZV9yZWdpc3RlcmVkX3RyYWluX2NvbXBvbmVudHM6IENvbXBvbmVudEVudGl0eSwKICAgICAgICBwaXBlbGluZV9zYW1wbGVzX2UyZV9yZWdpc3RlcmVkX3Njb3JlX2NvbXBvbmVudHM6IENvbXBvbmVudEVudGl0eSwKICAgICAgICBwaXBlbGluZV9zYW1wbGVzX2UyZV9yZWdpc3RlcmVkX2V2YWxfY29tcG9uZW50czogQ29tcG9uZW50RW50aXR5LAogICAgKSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5lMmVfcmVnaXN0ZXJlZF9jb21wb25lbnRzLnBpcGVsaW5lIGltcG9ydCAoCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBlMmVfcmVnaXN0ZXJlZF9jb21wb25lbnRzLAogICAgICAgICkKCiAgICAgICAgcGlwZWxpbmUgPSBlMmVfcmVnaXN0ZXJlZF9jb21wb25lbnRzKAogICAgICAgICAgICBjbGllbnQ9Y2xpZW50LAogICAgICAgICAgICBwaXBlbGluZV9zYW1wbGVzX2UyZV9yZWdpc3RlcmVkX3RyYWluX2NvbXBvbmVudHM9cGlwZWxpbmVfc2FtcGxlc19lMmVfcmVnaXN0ZXJlZF90cmFpbl9jb21wb25lbnRzLAogICAgICAgICAgICBwaXBlbGluZV9zYW1wbGVzX2UyZV9yZWdpc3RlcmVkX3Njb3JlX2NvbXBvbmVudHM9cGlwZWxpbmVfc2FtcGxlc19lMmVfcmVnaXN0ZXJlZF9zY29yZV9jb21wb25lbnRzLAogICAgICAgICAgICBwaXBlbGluZV9zYW1wbGVzX2UyZV9yZWdpc3RlcmVkX2V2YWxfY29tcG9uZW50cz1waXBlbGluZV9zYW1wbGVzX2UyZV9yZWdpc3RlcmVkX2V2YWxfY29tcG9uZW50cywKICAgICAgICApCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKICAgICAgICAjIG1vdmUgdW5pdCB0ZXN0IGhlcmUgZHVlIHRvIHBlcm1pc3Npb24gcHJvYmxlbQogICAgICAgIGpvYl95YW1sID0gc3RyKHNhbXBsZXNfZGlyIC8gImUyZV9yZWdpc3RlcmVkX2NvbXBvbmVudHMvcGlwZWxpbmUueW1sIikKICAgICAgICBvbWl0X2ZpZWxkcyA9IFsKICAgICAgICAgICAgInByb3BlcnRpZXMuZXhwZXJpbWVudF9uYW1lIiwKICAgICAgICAgICAgIm5hbWUiLAogICAgICAgICAgICAicHJvcGVydGllcy5qb2JzLnRyYWluX2pvYi5jb21wb25lbnRJZCIsCiAgICAgICAgICAgICJwcm9wZXJ0aWVzLmpvYnMuc2NvcmVfam9iLmNvbXBvbmVudElkIiwKICAgICAgICAgICAgInByb3BlcnRpZXMuam9icy5ldmFsdWF0ZV9qb2IuY29tcG9uZW50SWQiLAogICAgICAgICAgICAicHJvcGVydGllcy5qb2JzLnRyYWluX2pvYi5yZXNvdXJjZXMiLCAgIyBqb2IgeWFtbCB3b24ndCBoYXZlIHJlc291cmNlcyBidXQgd2Ugd2lsbCBwYXNzIHRoZW0KICAgICAgICAgICAgInByb3BlcnRpZXMuam9icy5zY29yZV9qb2IucmVzb3VyY2VzIiwKICAgICAgICAgICAgInByb3BlcnRpZXMuam9icy5ldmFsdWF0ZV9qb2IucmVzb3VyY2VzIiwKICAgICAgICAgICAgInByb3BlcnRpZXMuaW5wdXRzLnBpcGVsaW5lX2pvYl90cmFpbmluZ19pbnB1dC51cmkiLAogICAgICAgICAgICAicHJvcGVydGllcy5pbnB1dHMucGlwZWxpbmVfam9iX3Rlc3RfaW5wdXQudXJpIiwKICAgICAgICAgICAgInByb3BlcnRpZXMucHJvcGVydGllcyIsCiAgICAgICAgICAgICJwcm9wZXJ0aWVzLmNvbXB1dGVfaWQiLAogICAgICAgICAgICAicHJvcGVydGllcy5zZXR0aW5ncyIsCiAgICAgICAgXQogICAgICAgIGFzc2VydF9kc2xfY3VyYXRlZChwaXBlbGluZSwgam9iX3lhbWwsIG9taXRfZmllbGRzKQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9iYXNpY19jb21wb25lbnQoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuYmFzaWNfY29tcG9uZW50LnBpcGVsaW5lIGltcG9ydCBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgYmFzaWNfY29tcG9uZW50CgogICAgICAgIHBpcGVsaW5lID0gYmFzaWNfY29tcG9uZW50KCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9jb21wb25lbnRfd2l0aF9pbnB1dF9vdXRwdXQoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuY29tcG9uZW50X3dpdGhfaW5wdXRfb3V0cHV0LnBpcGVsaW5lIGltcG9ydCAoCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBjb21wb25lbnRfd2l0aF9pbnB1dF9vdXRwdXQsCiAgICAgICAgKQoKICAgICAgICBwaXBlbGluZSA9IGNvbXBvbmVudF93aXRoX2lucHV0X291dHB1dCgpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfYmFzaWNfcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuYmFzaWNfcGlwZWxpbmUucGlwZWxpbmUgaW1wb3J0IGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBiYXNpY19waXBlbGluZQoKICAgICAgICBwaXBlbGluZSA9IGJhc2ljX3BpcGVsaW5lKCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9waXBlbGluZV93aXRoX2RhdGEoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUucGlwbGluZV93aXRoX2RhdGEucGlwZWxpbmUgaW1wb3J0IGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBwaXBsaW5lX3dpdGhfZGF0YQoKICAgICAgICBwaXBlbGluZSA9IHBpcGxpbmVfd2l0aF9kYXRhKCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9sb2NhbF9kYXRhX2lucHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmxvY2FsX2RhdGFfaW5wdXQucGlwZWxpbmUgaW1wb3J0IGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBsb2NhbF9kYXRhX2lucHV0CgogICAgICAgIHBpcGVsaW5lID0gbG9jYWxfZGF0YV9pbnB1dCgpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfZGF0YXN0b3JlX2RhdGFwYXRoX3VyaV9mb2xkZXIoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZGF0YXN0b3JlX2RhdGFwYXRoX3VyaV9mb2xkZXIucGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIGRhdGFzdG9yZV9kYXRhcGF0aF91cmlfZm9sZGVyLAogICAgICAgICkKCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhc3RvcmVfZGF0YXBhdGhfdXJpX2ZvbGRlcigpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfZGF0YXN0b3JlX2RhdGFwYXRoX3VyaV9maWxlKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmRhdGFzdG9yZV9kYXRhcGF0aF91cmlfZmlsZS5waXBlbGluZSBpbXBvcnQgKAogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgZGF0YXN0b3JlX2RhdGFwYXRoX3VyaV9maWxlLAogICAgICAgICkKCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhc3RvcmVfZGF0YXBhdGhfdXJpX2ZpbGUoKQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpCgogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QKICAgIGRlZiB0ZXN0X2RhdGFzZXRfaW5wdXQoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZGF0YXNldF9pbnB1dC5waXBlbGluZSBpbXBvcnQgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIGRhdGFzZXRfaW5wdXQKCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhc2V0X2lucHV0KGNsaWVudCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF93ZWJfdXJsX2lucHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLndlYl91cmxfaW5wdXQucGlwZWxpbmUgaW1wb3J0IGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyB3ZWJfdXJsX2lucHV0CgogICAgICAgIHBpcGVsaW5lID0gd2ViX3VybF9pbnB1dCgpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfZW52X3B1YmxpY19kb2NrZXJfaW1hZ2Uoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZW52X3B1YmxpY19kb2NrZXJfaW1hZ2UucGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIGVudl9wdWJsaWNfZG9ja2VyX2ltYWdlLAogICAgICAgICkKCiAgICAgICAgcGlwZWxpbmUgPSBlbnZfcHVibGljX2RvY2tlcl9pbWFnZSgpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfZW52X3JlZ2lzdGVyZWQoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZW52X3JlZ2lzdGVyZWQucGlwZWxpbmUgaW1wb3J0IGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBlbnZfcmVnaXN0ZXJlZAoKICAgICAgICBwaXBlbGluZSA9IGVudl9yZWdpc3RlcmVkKCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9lbnZfY29uZGFfZmlsZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5lbnZfY29uZGFfZmlsZS5waXBlbGluZSBpbXBvcnQgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIGVudl9jb25kYV9maWxlCgogICAgICAgIHBpcGVsaW5lID0gZW52X2NvbmRhX2ZpbGUoKQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpCgogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QKICAgIGRlZiB0ZXN0X3RmX2hlbGxvX3dvcmxkKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLnRmX2hlbGxvX3dvcmxkLnBpcGVsaW5lIGltcG9ydCBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgdGZfaGVsbG9fd29ybGQKCiAgICAgICAgcGlwZWxpbmUgPSB0Zl9oZWxsb193b3JsZCgpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfbXBpX2hlbGxvX3dvcmxkKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLm1waV9oZWxsb193b3JsZC5waXBlbGluZSBpbXBvcnQgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIG1waV9oZWxsb193b3JsZAoKICAgICAgICBwaXBlbGluZSA9IG1waV9oZWxsb193b3JsZCgpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfcHl0b3JjaF9oZWxsb193b3JsZChzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5weXRvcmNoX2hlbGxvX3dvcmxkLnBpcGVsaW5lIGltcG9ydCBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgcHl0b3JjaF9oZWxsb193b3JsZAoKICAgICAgICBwaXBlbGluZSA9IHB5dG9yY2hfaGVsbG9fd29ybGQoKQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpCgogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QKICAgIGRlZiB0ZXN0X255Y190YXhpX2RhdGFfcmVncmVzc2lvbihzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5ueWNfdGF4aV9kYXRhX3JlZ3Jlc3Npb24ucGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIG55Y190YXhpX2RhdGFfcmVncmVzc2lvbiwKICAgICAgICApCgogICAgICAgIHBpcGVsaW5lID0gbnljX3RheGlfZGF0YV9yZWdyZXNzaW9uKCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF90Zl9tbmlzdChzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS50Zl9tbmlzdC5waXBlbGluZSBpbXBvcnQgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIHRmX21uaXN0CgogICAgICAgIHBpcGVsaW5lID0gdGZfbW5pc3QoKQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpCgogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QKICAgIGRlZiB0ZXN0X2UyZV9pbmxpbmVfY29tcG9uZW50cyhzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5lMmVfaW5saW5lX2NvbXBvbmVudHMucGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIGUyZV9pbmxpbmVfY29tcG9uZW50cywKICAgICAgICApCgogICAgICAgIHBpcGVsaW5lID0gZTJlX2lubGluZV9jb21wb25lbnRzKCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay51c2VmaXh0dXJlcygibW9ja19hc3NldF9uYW1lIikKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9jb21tYW5kX2pvYl9pbl9waXBlbGluZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5jb21tYW5kX2pvYl9pbl9waXBlbGluZS5waXBlbGluZSBpbXBvcnQgKAogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgY29tbWFuZF9qb2JfaW5fcGlwZWxpbmUsCiAgICAgICAgKQoKICAgICAgICBwaXBlbGluZSA9IGNvbW1hbmRfam9iX2luX3BpcGVsaW5lKCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9tdWx0aV9wYXJhbGxlbF9jb21wb25lbnRzX3dpdGhfZmlsZV9pbnB1dF9waXBlbGluZV9vdXRwdXQoCiAgICAgICAgc2VsZiwKICAgICAgICBjbGllbnQ6IE1MQ2xpZW50LAogICAgKSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5wYXJhbGxlbF9jb21wb25lbnRfd2l0aF9maWxlX2lucHV0LnBpcGVsaW5lIGltcG9ydCAoCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBwaXBlbGluZV93aXRoX3BhcmFsbGVsX2NvbXBvbmVudHMsCiAgICAgICAgKQoKICAgICAgICBwaXBlbGluZSA9IHBpcGVsaW5lX3dpdGhfcGFyYWxsZWxfY29tcG9uZW50cygpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfcGFyYWxsZWxfY29tcG9uZW50c193aXRoX3RhYnVsYXJfaW5wdXRfcGlwZWxpbmVfb3V0cHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLnBhcmFsbGVsX2NvbXBvbmVudF93aXRoX3RhYnVsYXJfaW5wdXQucGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIHBpcGVsaW5lX3dpdGhfcGFyYWxsZWxfY29tcG9uZW50cywKICAgICAgICApCgogICAgICAgIHBpcGVsaW5lID0gcGlwZWxpbmVfd2l0aF9wYXJhbGxlbF9jb21wb25lbnRzKCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9wYXJhbGxlbF9jb21wb25lbnRzKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLnBhcmFsbGVsX2NvbXBvbmVudC5waXBlbGluZSBpbXBvcnQgKAogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgcGlwZWxpbmVfd2l0aF9wYXJhbGxlbF9jb21wb25lbnRzLAogICAgICAgICkKCiAgICAgICAgcGlwZWxpbmUgPSBwaXBlbGluZV93aXRoX3BhcmFsbGVsX2NvbXBvbmVudHMoKQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpCgogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QKICAgIGRlZiB0ZXN0X2F1dG9tbF9qb2JfaW5fcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuYXV0b21sX2pvYl9pbl9waXBlbGluZS5waXBlbGluZSBpbXBvcnQgKAogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgYXV0b21sX2pvYl9pbl9waXBlbGluZSwKICAgICAgICApCgogICAgICAgIHBpcGVsaW5lID0gYXV0b21sX2pvYl9pbl9waXBlbGluZSgpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfcGlwZWxpbmVfd2l0aF9waXBlbGluZV9jb21wb25lbnQoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUucGlwZWxpbmVfd2l0aF9waXBlbGluZV9jb21wb25lbnQucGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIHBpcGVsaW5lX3dpdGhfcGlwZWxpbmVfY29tcG9uZW50LAogICAgICAgICkKCiAgICAgICAgcGlwZWxpbmUgPSBwaXBlbGluZV93aXRoX3BpcGVsaW5lX2NvbXBvbmVudCgpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfcGlwZWxpbmVfd2l0aF9kYXRhX2FzX2lucHV0c19mb3JfcGlwZWxpbmVfY29tcG9uZW50KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLnBpcGVsaW5lX3dpdGhfcGlwZWxpbmVfY29tcG9uZW50LnBpcGVsaW5lX3dpdGhfZGF0YV9hc19pbnB1dCBpbXBvcnQgKAogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgcGlwZWxpbmVfd2l0aF9waXBlbGluZV9jb21wb25lbnQsCiAgICAgICAgKQoKICAgICAgICBwaXBlbGluZSA9IHBpcGVsaW5lX3dpdGhfcGlwZWxpbmVfY29tcG9uZW50KGNsaWVudCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9zcGFya19qb2JfaW5fcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuc3Bhcmtfam9iX2luX3BpcGVsaW5lLnBpcGVsaW5lIGltcG9ydCAoCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZV9mcm9tX3lhbWwgYXMgc3Bhcmtfam9iX2luX3BpcGVsaW5lLAogICAgICAgICkKCiAgICAgICAgcGlwZWxpbmUgPSBzcGFya19qb2JfaW5fcGlwZWxpbmUoKQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpCgogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QKICAgIGRlZiB0ZXN0X3NwYXJrX2pvYl93aXRoX2J1aWxkZXJfaW5fcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuc3Bhcmtfam9iX2luX3BpcGVsaW5lLnBpcGVsaW5lIGltcG9ydCAoCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZV9mcm9tX2J1aWxkZXIgYXMgc3Bhcmtfam9iX2luX3BpcGVsaW5lLAogICAgICAgICkKCiAgICAgICAgcGlwZWxpbmUgPSBzcGFya19qb2JfaW5fcGlwZWxpbmUoKQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpCgogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QKICAgIGRlZiB0ZXN0X3NwYXJrX2pvYl93aXRoX211bHRpcGxlX25vZGVfaW5fcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuc3Bhcmtfam9iX2luX3BpcGVsaW5lLmttZWFuc19zYW1wbGUucGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lX2Zyb21feWFtbCBhcyBzcGFya19qb2JfaW5fcGlwZWxpbmUsCiAgICAgICAgKQoKICAgICAgICBwaXBlbGluZSA9IHNwYXJrX2pvYl9pbl9waXBlbGluZSgpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3Rfc3Bhcmtfam9iX3dpdGhfYnVpbGRlcl9pbl9waXBlbGluZV93aXRob3V0X2VudHJ5KAogICAgICAgIHNlbGYsCiAgICAgICAgY2xpZW50OiBNTENsaWVudCwKICAgICkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuc3Bhcmtfam9iX2luX3BpcGVsaW5lLmludmFsaWRfcGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lX2Zyb21fYnVpbGRlcl93aXRob3V0X2VudHJ5IGFzIHNwYXJrX2pvYl9pbl9waXBlbGluZSwKICAgICAgICApCgogICAgICAgIHBpcGVsaW5lID0gc3Bhcmtfam9iX2luX3BpcGVsaW5lKCkKICAgICAgICB3aXRoIHB5dGVzdC5yYWlzZXMoRXhjZXB0aW9uKSBhcyBleDoKICAgICAgICAgICAgY3JlYXRlZF9qb2IgPSBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKHBpcGVsaW5lKQoKICAgICAgICBhc3NlcnQgKAogICAgICAgICAgICAne1xuICAicmVzdWx0IjogIkZhaWxlZCIsXG4gICJlcnJvcnMiOiBbXG4gICAge1xuICAgICAgIm1lc3NhZ2UiOiAiTWlzc2luZyBkYXRhIGZvciByZXF1aXJlZCBmaWVsZC4iLCcKICAgICAgICAgICAgJ1xuICAgICAgInBhdGgiOiAiam9icy5hZGRfZ3JlZXRpbmdfY29sdW1uLmNvbXBvbmVudC5lbnRyeSIsXG4gICAgICAidmFsdWUiOiBudWxsXG4gICAgfVxuICBdXG59JwogICAgICAgICAgICA9PSBzdHIoZXgudmFsdWUpCiAgICAgICAgKQoKICAgICAgICB2YWxpZGF0aW9uX3Jlc3VsdCA9IGNsaWVudC5qb2JzLnZhbGlkYXRlKHBpcGVsaW5lKQogICAgICAgIGFzc2VydCB2YWxpZGF0aW9uX3Jlc3VsdC5wYXNzZWQgaXMgRmFsc2UKICAgICAgICBhc3NlcnQgdmFsaWRhdGlvbl9yZXN1bHQuZXJyb3JfbWVzc2FnZXMgPT0gewogICAgICAgICAgICAiam9icy5hZGRfZ3JlZXRpbmdfY29sdW1uLmNvbXBvbmVudC5lbnRyeSI6ICJNaXNzaW5nIGRhdGEgZm9yIHJlcXVpcmVkIGZpZWxkLiIsCiAgICAgICAgfQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9zcGFya19qb2Jfd2l0aF9idWlsZGVyX2luX3BpcGVsaW5lX3dpdGhfZHluYW1pY19hbGxvY2F0aW9uX2Rpc2FibGVkKAogICAgICAgIHNlbGYsCiAgICAgICAgY2xpZW50OiBNTENsaWVudCwKICAgICkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuc3Bhcmtfam9iX2luX3BpcGVsaW5lLmludmFsaWRfcGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lX2Zyb21fYnVpbGRlcl93aXRoX2R5bmFtaWNfYWxsb2NhdGlvbl9kaXNhYmxlZCBhcyBzcGFya19qb2JfaW5fcGlwZWxpbmUsCiAgICAgICAgKQoKICAgICAgICBwaXBlbGluZSA9IHNwYXJrX2pvYl9pbl9waXBlbGluZSgpCiAgICAgICAgd2l0aCBweXRlc3QucmFpc2VzKEV4Y2VwdGlvbikgYXMgZXg6CiAgICAgICAgICAgIGNyZWF0ZWRfam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSkKCiAgICAgICAgYXNzZXJ0ICgKICAgICAgICAgICAgJ3tcbiAgInJlc3VsdCI6ICJGYWlsZWQiLFxuICAiZXJyb3JzIjogW1xuICAgIHtcbiAgICAgICJtZXNzYWdlIjogIlNob3VsZCBub3Qgc3BlY2lmeSBtaW4gb3IgbWF4ICcKICAgICAgICAgICAgJ2V4ZWN1dG9ycyB3aGVuIGR5bmFtaWMgYWxsb2NhdGlvbiBpcyBkaXNhYmxlZC4iLFxuJyBpbiBzdHIoZXgudmFsdWUpCiAgICAgICAgKQoKICAgICAgICB2YWxpZGF0aW9uX3Jlc3VsdCA9IGNsaWVudC5qb2JzLnZhbGlkYXRlKHBpcGVsaW5lKQogICAgICAgIGFzc2VydCB2YWxpZGF0aW9uX3Jlc3VsdC5wYXNzZWQgaXMgRmFsc2UKICAgICAgICBhc3NlcnQgdmFsaWRhdGlvbl9yZXN1bHQuZXJyb3JfbWVzc2FnZXMgPT0gewogICAgICAgICAgICAiam9icy5hZGRfZ3JlZXRpbmdfY29sdW1uIjogIlNob3VsZCBub3Qgc3BlY2lmeSBtaW4gb3IgbWF4IGV4ZWN1dG9ycyB3aGVuIGR5bmFtaWMgYWxsb2NhdGlvbiBpcyBkaXNhYmxlZC4iLAogICAgICAgIH0KCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfZGF0YV90cmFuc2Zlcl9jb3B5XzJ1cmlmb2xkZXJfam9iX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lLmNvcHlfZGF0YS5waXBlbGluZSBpbXBvcnQgKAogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmVfZnJvbV95YW1sIGFzIGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lLAogICAgICAgICkKCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSgpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCwgc2tpcF9jYW5jZWw9VHJ1ZSkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfZGF0YV90cmFuc2Zlcl9jb3B5XzJ1cmlmb2xkZXJfam9iX3dpdGhfYnVpbGRlcl9pbl9waXBlbGluZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5kYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZS5jb3B5X2RhdGEucGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lX2Zyb21fYnVpbGRlciBhcyBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSwKICAgICAgICApCgogICAgICAgIHBpcGVsaW5lID0gZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUoKQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpCgogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QKICAgIGRlZiB0ZXN0X2RhdGFfdHJhbnNmZXJfY29weV9taXh0eXBlX2pvYl9pbl9waXBlbGluZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5kYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZS5jb3B5X2RhdGEucGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lX2NvcHlfbWl4dHlwZV9mcm9tX3lhbWwgYXMgZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUsCiAgICAgICAgKQoKICAgICAgICBwaXBlbGluZSA9IGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lKCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9kYXRhX3RyYW5zZmVyX2NvcHlfdXJpZmlsZV9qb2JfaW5fcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUuY29weV9kYXRhLnBpcGVsaW5lIGltcG9ydCAoCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZV9jb3B5X3VyaWZpbGVfZnJvbV95YW1sIGFzIGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lLAogICAgICAgICkKCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSgpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfZGF0YV90cmFuc2Zlcl9jb3B5X3VyaWZvbGRlcl9qb2JfaW5fcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUuY29weV9kYXRhLnBpcGVsaW5lIGltcG9ydCAoCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZV9jb3B5X3VyaWZvbGRlcl9mcm9tX3lhbWwgYXMgZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUsCiAgICAgICAgKQoKICAgICAgICBwaXBlbGluZSA9IGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lKCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9kYXRhX3RyYW5zZmVyX2ltcG9ydF9maWxlc3lzdGVtX2pvYl9pbl9waXBlbGluZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5kYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZS5pbXBvcnRfZmlsZV9zeXN0ZW0ucGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lX2Zyb21fYnVpbGRlciBhcyBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSwKICAgICAgICApCgogICAgICAgIHBpcGVsaW5lID0gZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUoKQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpCgogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QKICAgIGRlZiB0ZXN0X2RhdGFfdHJhbnNmZXJfaW1wb3J0X3NxbF9kYXRhYmFzZV9qb2JfaW5fcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUuaW1wb3J0X2RhdGFiYXNlLnBpcGVsaW5lIGltcG9ydCAoCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZV9mcm9tX2J1aWxkZXJfc3FsIGFzIGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lLAogICAgICAgICkKCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSgpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfZGF0YV90cmFuc2Zlcl9pbXBvcnRfc25vd2ZsYWtlX2RhdGFiYXNlX2pvYl9pbl9waXBlbGluZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5kYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZS5pbXBvcnRfZGF0YWJhc2UucGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lX2Zyb21fYnVpbGRlciBhcyBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSwKICAgICAgICApCgogICAgICAgIHBpcGVsaW5lID0gZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUoKQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpCgogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QKICAgIGRlZiB0ZXN0X2RhdGFfdHJhbnNmZXJfZXhwb3J0X3NxbF9kYXRhYmFzZV9qb2JfaW5fcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUuZXhwb3J0X2RhdGFiYXNlLnBpcGVsaW5lIGltcG9ydCAoCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZV9mcm9tX2J1aWxkZXIgYXMgZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUsCiAgICAgICAgKQoKICAgICAgICBwaXBlbGluZSA9IGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lKCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9kYXRhX3RyYW5zZmVyX211bHRpX2pvYl9pbl9waXBlbGluZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5kYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZS5waXBlbGluZSBpbXBvcnQgKAogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUsCiAgICAgICAgKQoKICAgICAgICBwaXBlbGluZSA9IGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lKCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQo=",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "ePxWxi0sjiP7ZwTSwCeNbQ==",
        "Date": "Mon, 24 Apr 2023 03:22:27 GMT",
        "ETag": "\u00220x8DB4473218DF111\u0022",
        "Last-Modified": "Mon, 24 Apr 2023 03:22:27 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "ZdjLM36mwI4=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://samcw32zcnpjldw.blob.core.windows.net/azureml-blobstore-72e8eff8-148b-4582-a07d-efc79559f19f/LocalUpload/00000000000000000000000000000000/e2etests/test_automl_dsl_pipeline.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "34209",
        "Content-MD5": "7KSIc2nEWBWtt/xkdXjRWw==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.7.13 (Linux-5.15.90.1-microsoft-standard-WSL2-x86_64-with-debian-bookworm-sid)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Mon, 24 Apr 2023 03:22:25 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": "",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "7KSIc2nEWBWtt/xkdXjRWw==",
        "Date": "Mon, 24 Apr 2023 03:22:27 GMT",
        "ETag": "\u00220x8DB447321954307\u0022",
        "Last-Modified": "Mon, 24 Apr 2023 03:22:27 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "cwNop4tXhvc=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://samcw32zcnpjldw.blob.core.windows.net/azureml-blobstore-72e8eff8-148b-4582-a07d-efc79559f19f/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_fl.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "10442",
        "Content-MD5": "Bf2zKM/VFLU1K2yMYkGmbw==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.7.13 (Linux-5.15.90.1-microsoft-standard-WSL2-x86_64-with-debian-bookworm-sid)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Mon, 24 Apr 2023 03:22:25 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": "aW1wb3J0IHB5dGVzdApmcm9tIHBhdGhsaWIgaW1wb3J0IFBhdGgKZnJvbSBkZXZ0b29sc190ZXN0dXRpbHMgaW1wb3J0IEF6dXJlUmVjb3JkZWRUZXN0Q2FzZSwgaXNfbGl2ZQpmcm9tIGF6dXJlLmNvcmUuZXhjZXB0aW9ucyBpbXBvcnQgUmVzb3VyY2VOb3RGb3VuZEVycm9yCmZyb20gLi5fdXRpbCBpbXBvcnQgX0RTTF9USU1FT1VUX1NFQ09ORApmcm9tIHRlc3RfdXRpbGl0aWVzLnV0aWxzIGltcG9ydCBfUFlURVNUX1RJTUVPVVRfTUVUSE9ECmZyb20gYXp1cmUuYWkubWwgaW1wb3J0IElucHV0LCBsb2FkX2NvbXBvbmVudApmcm9tIHR5cGluZyBpbXBvcnQgQ2FsbGFibGUKZnJvbSBhenVyZS5haS5tbC5kc2wuX2ZsX3NjYXR0ZXJfZ2F0aGVyX25vZGUgaW1wb3J0IGZsX3NjYXR0ZXJfZ2F0aGVyCmZyb20gYXp1cmUuYWkubWwuZW50aXRpZXMuX2Fzc2V0cy5mZWRlcmF0ZWRfbGVhcm5pbmdfc2lsbyBpbXBvcnQgRmVkZXJhdGVkTGVhcm5pbmdTaWxvCmZyb20gYXp1cmUuYWkubWwuY29uc3RhbnRzIGltcG9ydCBBc3NldFR5cGVzCmZyb20gYXp1cmUuYWkubWwuZW50aXRpZXMuX2NyZWRlbnRpYWxzIGltcG9ydCAoCiAgICBJZGVudGl0eUNvbmZpZ3VyYXRpb24sCiAgICBJZGVudGl0eUNvbmZpZ3VyYXRpb25UeXBlLAogICAgTWFuYWdlZElkZW50aXR5Q29uZmlndXJhdGlvbiwKKQpmcm9tIGF6dXJlLmFpLm1sLmRzbCBpbXBvcnQgcGlwZWxpbmUKaW1wb3J0IG9zCmZyb20gYXp1cmUuYWkubWwgaW1wb3J0ICgKICAgIE1MQ2xpZW50LAopCgoKIyBSRVNPVVJDRSBOT1RFUyAtIEFzIGFuIGUyZSB0ZXN0IGZpbGUsIHRoaXMgZmlsZSBtYWtlcyBhbmQgcmVmZXJlbmNlcyByZWFsIEFNTCByZXNvdXJjZXMuCiMgQWxsIHJlc291cmNlcyByZWZlcmVuY2VzIGJ5IHRoaXMgZmlsZSBhcmUgY29udGFpbmVkIHdpdGhpbiB0aGUgZm9sbG93aW5nOgojIHN1YnNjcmlwdGlvbjogZGF0YSBzY2llbmNlIFZNIFRlYW0gKERTVk0pCiMgcmVzb3VyY2UgZ3JvdXA6IGZsLWUyZS10ZXN0aW5nLXJnCiMgd29ya3NwYWNlOiBmbC1lMmUtdGVzdGluZy13cwojIElmIHlvdSdyZSBydW5uaW5nIHRoaXMgdGVzdCBsb2NhbGx5IGluIGxpdmUgbW9kZSwgbWFrZSBzdXJlIHlvdSd2ZSBzZXQgdGhlIGFib3ZlIHZhbHVlcyBpbgojIHlvdXIgLmVudiBmaWxlLgojIHJlc291cmNlcyBvZiBub3RlOgojIC0gbXVsdGlwbGUgc3RvcmFnZSBjb250YWluZXJzCiMgLSBtdWx0aXBsZSBjb21wdXRlcyB3aXRoIHZhcnlpbmcgbWFuYWdlZCBpZGVudGl0aWVzIHRvIGFsbG93IGFjY2VzcyB0byBkaWZmZXJlbnQgc3RvcmFnZSBjb250YWluZXJzCkBweXRlc3QubWFyay50aW1lb3V0KHRpbWVvdXQ9X0RTTF9USU1FT1VUX1NFQ09ORCwgbWV0aG9kPV9QWVRFU1RfVElNRU9VVF9NRVRIT0QpCkBweXRlc3QubWFyay5lMmV0ZXN0CkBweXRlc3QubWFyay5jb3JlX3Nka190ZXN0CmNsYXNzIFRlc3REU0xQaXBlbGluZShBenVyZVJlY29yZGVkVGVzdENhc2UpOgogICAgIyBERVYgTk9URTogVGhpcyB0ZXN0IGV4cGVjdHMgYSBsb3Qgb2YgcmVzb3VyY2VzIHRvIGFscmVhZHkgZXhpc3QgaW4gQU1MLiBUaGUgaW5pdGlhbCBpbXBsZW1lbnRhdGlvbgogICAgIyBvZiB0aGlzIHRlc3QgaW1wbGVtZW50ZWQgYWxsIG9mIHRoZXNlIHRoaWducyB1bmRlciB0aGUgJ2ZsLWUyZS10ZXN0aW5nLXJnJyByZXNvdXJjZSBncm91cCBhbmQKICAgICMgdGhlICdmbC1lMmUtdGVzdGluZy13cycgd29ya3NwYWNlIGluc2lkZSB0aGF0IFJHLgogICAgIyBUaGUgbmVlZGVkIHJlc291cmNlcyBhcmU6CiAgICAjIC0gSW4gdGhlIHdvcmtzcGFjZSdzIHN0b3JhZ2UgYWNjb3VudCwgMyBjb250YWluZXJzIG5hbWVkICdzaWxvLWNvbnRhaW5lcjEnLCAnc2lsby1jb250YWluZXIyMycsCiAgICAjICAgICAgIGFuZCAnYWdnLWNvbnRhaW5lcicuIEVhY2ggY29udGFpbmVyIG5lZWRzIHRvIGhhdmUgYXNzaWduZWQgdGhlIGJsb2Igb3duZXIgcGVybWlzc2lvbgogICAgIyAgICAgICB0byB0aGUgJ3Rlc3QtbXNpLWlkJyBtYW5hZ2VkIGlkZW50aXR5CiAgICAjIC0gNCBjb21wdXRlIGNsdXN0ZXJzIGluIHRoZSB3b3Jrc3BhY2UgbmFtZWQgc2lsb0NvbXB1dGUxLzIvMyBhbmQgYWdnQ29tcHV0ZS4gRWFjaCBvZiB3aGljaAogICAgIyAgICAgICBoYXMgYmVlbiBhc3NpZ25lZCB0aGUgJ3Rlc3QtbXNpLWlkJyBJRAogICAgIyAtIDQgZGF0YXN0b3JlcyBjb25uZWN0ZWQgdG8gdGhlIGFmb3JlbWVudGlvbmVkIHN0b3JhZ2UgY29udGFpbmVycyBuYW1lZCBzaWxvX2RhdGFzdG9yZTEvMi8zIGFuZAogICAgIyAgICAgICBhZ2dfZGF0YXN0b3JlLgogICAgQHB5dGVzdC5tYXJrLnNraXBpZigKICAgICAgICBjb25kaXRpb249bm90IGlzX2xpdmUoKSwKICAgICAgICByZWFzb249KAogICAgICAgICAgICAiVE9ETyAoMjIzNTAzNCkgVGhlIGNyaXRpY2FsIGNhbGwgdG8gYGNsaWVudC5qb2JzLmNyZWF0ZV9vcl91cGRhdGVgIHNlZW1zIHRvIG1ha2UgZGlmZmVyZW50IgogICAgICAgICAgICArICJBUEkgY2FsbHMgaW4gcGxheWJhY2sgbW9kZSBjb21wYXJlZCB0byByZWNvcmRpbmcgbW9kZSIKICAgICAgICApLAogICAgKQogICAgZGVmIHRlc3RfZmxfcGlwZWxpbmUoCiAgICAgICAgc2VsZiwKICAgICAgICBjbGllbnQ6IE1MQ2xpZW50LAogICAgICAgIGZlZGVyYXRlZF9sZWFybmluZ19jb21wb25lbnRzX2ZvbGRlcjogUGF0aCwKICAgICAgICBmZWRlcmF0ZWRfbGVhcm5pbmdfbG9jYWxfZGF0YV9mb2xkZXI6IFBhdGgsCiAgICApIC0\",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "Bf2zKM/VFLU1K2yMYkGmbw==",
        "Date": "Mon, 24 Apr 2023 03:22:27 GMT",
        "ETag": "\u00220x8DB447321A19D4E\u0022",
        "Last-Modified": "Mon, 24 Apr 2023 03:22:27 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "nvRzTOL/DNw=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://samcw32zcnpjldw.blob.core.windows.net/azureml-blobstore-72e8eff8-148b-4582-a07d-efc79559f19f/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_pipeline_with_specific_nodes.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "12855",
        "Content-MD5": "1Eejn94qxLQlrgO40sYwwA==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.7.13 (Linux-5.15.90.1-microsoft-standard-WSL2-x86_64-with-debian-bookworm-sid)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Mon, 24 Apr 2023 03:22:25 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": "aW1wb3J0IG11bHRpcHJvY2Vzc2luZwppbXBvcnQgdXVpZApmcm9tIGZ1bmN0b29scyBpbXBvcnQgcGFydGlhbApmcm9tIHBhdGhsaWIgaW1wb3J0IFBhdGgKZnJvbSB0eXBpbmcgaW1wb3J0IENhbGxhYmxlLCBVbmlvbgoKaW1wb3J0IHB5dGVzdApmcm9tIGRldnRvb2xzX3Rlc3R1dGlscyBpbXBvcnQgQXp1cmVSZWNvcmRlZFRlc3RDYXNlCmZyb20gbW9jayBpbXBvcnQgbW9jawpmcm9tIHB5dGVzdF9tb2NrIGltcG9ydCBNb2NrRml4dHVyZQoKZnJvbSBhenVyZS5haS5tbC5vcGVyYXRpb25zLl9vcGVyYXRpb25fb3JjaGVzdHJhdG9yIGltcG9ydCBPcGVyYXRpb25PcmNoZXN0cmF0b3IKZnJvbSB0ZXN0X3V0aWxpdGllcy51dGlscyBpbXBvcnQgKAogICAgX1BZVEVTVF9USU1FT1VUX01FVEhPRCwKICAgIGFzc2VydF9qb2JfY2FuY2VsLAogICAgc3VibWl0X2FuZF9jYW5jZWxfbmV3X2RzbF9waXBlbGluZSwKICAgIG9taXRfd2l0aF93aWxkY2FyZCwKKQoKZnJvbSBhenVyZS5haS5tbCBpbXBvcnQgKAogICAgSW5wdXQsCiAgICBNTENsaWVudCwKICAgIGRzbCwKICAgIGxvYWRfY29tcG9uZW50LAopCmZyb20gYXp1cmUuYWkubWwuY29uc3RhbnRzLl9jb21tb24gaW1wb3J0IEFzc2V0VHlwZXMKZnJvbSBhenVyZS5haS5tbC5lbnRpdGllcyBpbXBvcnQgQ29tbWFuZENvbXBvbmVudCwgQ29tbWFuZCwgQ2hvaWNlLCBTd2VlcCwgQ29tcG9uZW50LCBFbnZpcm9ubWVudCwgUGlwZWxpbmVDb21wb25lbnQKZnJvbSBhenVyZS5haS5tbC5lbnRpdGllcyBpbXBvcnQgUGlwZWxpbmVKb2IKCmZyb20gLi5fdXRpbCBpbXBvcnQgX0RTTF9USU1FT1VUX1NFQ09ORAoKdGVzdHNfcm9vdF9kaXIgPSBQYXRoKF9fZmlsZV9fKS5wYXJlbnQucGFyZW50LnBhcmVudApjb21wb25lbnRzX2RpciA9IHRlc3RzX3Jvb3RfZGlyIC8gInRlc3RfY29uZmlncy9jb21wb25lbnRzLyIKam9iX2lucHV0ID0gSW5wdXQoCiAgICB0eXBlPUFzc2V0VHlwZXMuVVJJX0ZJTEUsCiAgICBwYXRoPSJodHRwczovL2RwcmVwZGF0YS5ibG9iLmNvcmUud2luZG93cy5uZXQvZGVtby9UaXRhbmljLmNzdiIsCikKZXhwZXJpbWVudF9uYW1lID0gImRzbF9waXBlbGluZV9lMmUiCmNvbW1vbl9vbWl0X2ZpZWxkcyA9IFsKICAgICJwcm9wZXJ0aWVzIiwKICAgICJkaXNwbGF5X25hbWUiLAogICAgImV4cGVyaW1lbnRfbmFtZSIsCiAgICAiam9icy4qLmNvbXBvbmVudElkIiwKICAgICJpbnB1dHMuKi51cmkiLAogICAgImpvYnMuKi5fc291cmNlIiwKICAgICJqb2JzLioucHJvcGVydGllcyIsCiAgICAic2V0dGluZ3MuX3NvdXJjZSIsCiAgICAic291cmNlX2pvYl9pZCIsCiAgICAic2VydmljZXMiLApdCgoKZGVmIF9nZXRfY29tcG9uZW50X2luX2ZpcnN0X2NoaWxkKF93aXRoX2pvYnM6IFVuaW9uW1BpcGVsaW5lSm9iLCBQaXBlbGluZUNvbXBvbmVudF0sIGNsaWVudDogTUxDbGllbnQpIC0\u002BIENvbXBvbmVudDoKICAgIGlmIG5vdCBfd2l0aF9qb2JzLmpvYnM6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiTm8gam9icyBmb3VuZCBpbiB0aGUgcGlwZWxpbmUiKQogICAgX3Jlc3VsdCA9IG5leHQoaXRlcihfd2l0aF9qb2JzLmpvYnMudmFsdWVzKCkpKS5jb21wb25lbnQuc3BsaXQoIjoiKQogICAgaWYgbGVuKF9yZXN1bHQpID09IDI6CiAgICAgICAgX25hbWUsIF92ZXJzaW9uID0gX3Jlc3VsdAogICAgZWxpZiBsZW4oX3Jlc3VsdCkgPT0gMzoKICAgICAgICBfLCBfbmFtZSwgX3ZlcnNpb24gPSBfcmVzdWx0CiAgICBlbHNlOgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIkludmFsaWQgY29tcG9uZW50IGFybSBzdHJpbmc6IHt9Ii5mb3JtYXQoX3Jlc3VsdCkpCiAgICByZXR1cm4gY2xpZW50LmNvbXBvbmVudHMuZ2V0KF9uYW1lLCBfdmVyc2lvbikKCgpAcHl0ZXN0Lm1hcmsudXNlZml4dHVyZXMoCiAgICAiZW5hYmxlX2Vudmlyb25tZW50X2lkX2FybV9leHBhbnNpb24iLAogICAgImVuYWJsZV9waXBlbGluZV9wcml2YXRlX3ByZXZpZXdfZmVhdHVyZXMiLAogICAgIm1vY2tfY29kZV9oYXNoIiwKICAgICJtb2NrX2NvbXBvbmVudF9oYXNoIiwKICAgICJtb2NrX3NldF9oZWFkZXJzX3dpdGhfdXNlcl9hbWxfdG9rZW4iLAogICAgInJlY29yZGVkX3Rlc3QiLAopCkBweXRlc3QubWFyay50aW1lb3V0KHRpbWVvdXQ9X0RTTF9USU1FT1VUX1NFQ09ORCwgbWV0aG9kPV9QWVRFU1RfVElNRU9VVF9NRVRIT0QpCkBweXRlc3QubWFyay5lMmV0ZXN0CkBweXRlc3QubWFyay5waXBlbGluZV90ZXN0CmNsYXNzIFRlc3REU0xQaXBlbGluZVdpdGhTcGVjaWZpY05vZGVzKEF6dXJlUmVjb3JkZWRUZXN0Q2FzZSk6CiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgX2dlbmVyYXRlX211bHRpX2xheWVyX3BpcGVsaW5lX2Z1bmMoKToKICAgICAgICBwYXRoID0gIi4vdGVzdHMvdGVzdF9jb25maWdzL2NvbXBvbmVudHMvaGVsbG93b3JsZF9jb21wb25lbnQueW1sIgoKICAgICAgICBAZHNsLnBpcGVsaW5lCiAgICAgICAgZGVmIHBpcGVsaW5lX2xlYWYoY29tcG9uZW50X2luX3BhdGg6IElucHV0KToKICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMxID0gbG9hZF9jb21wb25lbnQoc291cmNlPXBhdGgpCiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMShjb21wb25lbnRfaW5fcGF0aD1jb21wb25lbnRfaW5fcGF0aCwgY29tcG9uZW50X2luX251bWJlcj0xKQoKICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMyID0gbG9hZF9jb21wb25lbnQoCiAgICAgICAgICAgICAgICBzb3VyY2U9cGF0aCwKICAgICAgICAgICAgICAgIHBhcmFtc19vdmVycmlkZT1bCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJhbm90aGVyX2NvbXBvbmVudF9uYW1lIiwKICAgICAgICAgICAgICAgICAgICAgICAgInZlcnNpb24iOiAiYW5vdGhlcl9jb21wb25lbnRfdmVyc2lvbiIsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgKQogICAgICAgICAgICBjb21wb25lbnRfZnVuYzIoY29tcG9uZW50X2luX3BhdGg9Y29tcG9uZW50X2luX3BhdGgsIGNvbXBvbmVudF9pbl9udW1iZXI9MSkKCiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMyA9IGxvYWRfY29tcG9uZW50KAogICAgICAgICAgICAgICAgc291cmNlPXBhdGgsIHBhcmFtc19vdmVycmlkZT1beyJlbnZpcm9ubWVudCI6ICJhenVyZW1sOkF6dXJlTUwtc2tsZWFybi0xLjAtdWJ1bnR1MjAuMDQtcHkzOC1jcHU6MzIifV0KICAgICAgICAgICAgKQogICAgICAgICAgICBjb21wb25lbnRfZnVuYzMoY29tcG9uZW50X2luX3BhdGg9Y29tcG9uZW50X2luX3BhdGgsIGNvbXBvbmVudF9pbl9udW1iZXI9MSkKCiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jNCA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1wYXRoKQogICAgICAgICAgICBjb21wb25lbnRfZnVuYzQuY29tbWFuZCArPSAiICYgZWNobyB1cGRhdGVkMSIKICAgICAgICAgICAgY29tcG9uZW50X2Z1bmM0KGNvbXBvbmVudF9pbl9wYXRoPWNvbXBvbmVudF9pbl9wYXRoLCBjb21wb25lbnRfaW5fbnVtYmVyPTEpCgogICAgICAgIEBkc2wucGlwZWxpbmUKICAgICAgICBkZWYgcGlwZWxpbmVfbWlkKGpvYl9pbl9wYXRoOiBJbnB1dCk6CiAgICAgICAgICAgIHBpcGVsaW5lX2xlYWYoam9iX2luX3BhdGgpCiAgICAgICAgICAgIHBpcGVsaW5lX2xlYWYoam9iX2luX3BhdGgpCgogICAgICAgIEBkc2wucGlwZWxpbmUKICAgICAgICBkZWYgcGlwZWxpbmVfcm9vdChqb2JfaW5fcGF0aDogSW5wdXQpOgogICAgICAgICAgICBwaXBlbGluZV9taWQoam9iX2luX3BhdGgpCiAgICAgICAgICAgIHBpcGVsaW5lX21pZChqb2JfaW5fcGF0aCkKCiAgICAgICAgcmV0dXJuIHBpcGVsaW5lX3Jvb3QKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgX2dlbmVyYXRlX3BpcGVsaW5lX2Z1bmNfZm9yX2NvbmN1cnJlbnRfY29tcG9uZW50X3JlZ2lzdHJhdGlvbl90ZXN0KHNoYXJlZF9pbnB1dCk6CiAgICAgICAgcGF0aCA9ICIuL3Rlc3RzL3Rlc3RfY29uZmlncy9jb21wb25lbnRzL2hlbGxvd29ybGRfY29tcG9uZW50LnltbCIKICAgICAgICBjb25kYV9maWxlX3BhdGggPSAiLi90ZXN0cy90ZXN0X2NvbmZpZ3MvZW52aXJvbm1lbnQvZW52aXJvbm1lbnRfZmlsZXMvZW52aXJvbm1lbnQueW1sIgoKICAgICAgICBlbnZpcm9ubWVudCA9IEVudmlyb25tZW50KAogICAgICAgICAgICBuYW1lPSJ0ZXN0LWVudmlyb25tZW50IiwKICAgICAgICAgICAgY29uZGFfZmlsZT1jb25kYV9maWxlX3BhdGgsCiAgICAgICAgICAgIGltYWdlPSJtY3IubWljcm9zb2Z0LmNvbS9henVyZW1sL29wZW5tcGk0LjEuMC11YnVudHUyMC4wNCIsCiAgICAgICAgICAgIHZlcnNpb249IjIiLCAgIyBUT0RPOiBhbm9ueW1vdXMgZW52aXJvbm1lbnQgaGFzIHBvdGVudGlhbCB2ZXJzaW9uIGNvbmZsaWN0PwogICAgICAgICAgICBkZXNjcmlwdGlvbj0iVGhpcyBpcyBhbiBhbm9ueW1vdXMgZW52aXJvbm1lbnQiLAogICAgICAgICkKCiAgICAgICAgQGRzbC5waXBlbGluZQogICAgICAgIGRlZiBwaXBlbGluZV9sZWFmKCk6CiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMWEgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9cGF0aCkKICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMxYS5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50CiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMWEuY29tbWFuZCArPSAiICYgZWNobyB1cGRhdGVkMSIKICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMxYShjb21wb25lbnRfaW5fcGF0aD1zaGFyZWRfaW5wdXQsIGNvbXBvbmVudF9pbl9udW1iZXI9MSkKCiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMWIgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9cGF0aCkKICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMxYi5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50CiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMWIuY29tbWFuZCArPSAiICYgZWNobyB1cGRhdGVkMSIKICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMxYihjb21wb25lbnRfaW5fcGF0aD1zaGFyZWRfaW5wdXQsIGNvbXBvbmVudF9pbl9udW1iZXI9MSkKCiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMiA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1wYXRoKQogICAgICAgICAgICBjb21wb25lbnRfZnVuYzIuY29tbWFuZCArPSAiICYgZWNobyB1cGRhdGVkMiIKICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMyLmVudmlyb25tZW50ID0gZW52aXJvbm1lbnQKICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMyKGNvbXBvbmVudF9pbl9wYXRoPXNoYXJlZF9pbnB1dCwgY29tcG9uZW50X2luX251bWJlcj0xKQoKICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMzID0gbG9hZF9jb21wb25lbnQoc291cmNlPXBhdGgpCiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMy5jb21tYW5kICs9ICIgJiBlY2hvIHVwZGF0ZWQzIgogICAgICAgICAgICBjb21wb25lbnRfZnVuYzMuZW52aXJvbm1lbnQgPSBlbnZpcm9ubWVudAogICAgICAgICAgICBjb21wb25lbnRfZnVuYzMoY29tcG9uZW50X2luX3BhdGg9c2hhcmVkX2lucHV0LCBjb21wb25lbnRfaW5fbnVtYmVyPTEpCgogICAgICAgICMgVE9ETzogdGVzdCB3aXRoIG11bHRpcGxlIHBpcGVsaW5lcyBhZnRlciBzZXJ2ZXItc2lkZSByZXR1cm4gam9icyBmb3IgcGlwZWxpbmUgY29tcG9uZW50CiAgICAgICAgIyBAZHNsLnBpcGVsaW5lCiAgICAgICAgIyBkZWYgcGlwZWxpbmVfbWlkKCk6CiAgICAgICAgIyAgICAgcGlwZWxpbmVfbGVhZigpCiAgICAgICAgIyAgICAgcGlwZWxpbmVfbGVhZigpCiAgICAgICAgIwogICAgICAgICMgQGRzbC5waXBlbGluZQogICAgICAgICMgZGVmIHBpcGVsaW5lX3Jvb3QoKToKICAgICAgICAjICAgICBwaXBlbGluZV9taWQoKQogICAgICAgICMgICAgIHBpcGVsaW5lX21pZCgpCgogICAgICAgIHJldHVybiBwaXBlbGluZV9sZWFmCgogICAgZGVmIHRlc3RfZHNsX3BpcGVsaW5lX3N3ZWVwX25vZGUoc2VsZiwgY2xpZW50OiBNTENsaWVudCwgcmFuZHN0cjogQ2FsbGFibGVbW3N0cl0sIHN0cl0pIC0\u002BIE5vbmU6CiAgICAgICAgeWFtbF9maWxlID0gIi4vdGVzdHMvdGVzdF9jb25maWdzL2NvbXBvbmVudHMvaGVsbG93b3JsZF9jb21wb25lbnQueW1sIgoKICAgICAgICBAZHNsLnBpcGVsaW5lCiAgICAgICAgZGVmIHRyYWluX3dpdGhfc3dlZXBfaW5fcGlwZWxpbmUocmF3X2RhdGEsIHByaW1hcnlfbWV0cmljOiBzdHIgPSAiQVVDIiwgbWF4X3RvdGFsX3RyaWFsczogaW50ID0gMTApOgogICAgICAgICAgICBjb21wb25lbnRfdG9fc3dlZXA6IENvbW1hbmRDb21wb25lbnQgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9eWFtbF9maWxlKQogICAgICAgICAgICAjIHRvIGNoZWNrIHRoZSBsb2dpYyB0byBzZXQgZGVmYXVsdCBkaXNwbGF5IG5hbWUgZm9yIGNvbXBvbmVudHMKICAgICAgICAgICAgY29tcG9uZW50X3RvX3N3ZWVwLmRpc3BsYXlfbmFtZSA9IE5vbmUKCiAgICAgICAgICAgIGNtZF9ub2RlMTogQ29tbWFuZCA9IGNvbXBvbmVudF90b19zd2VlcCgKICAgICAgICAgICAgICAgIGNvbXBvbmVudF9pbl9udW1iZXI9Q2hvaWNlKFsyLCAzLCA0LCA1XSksIGNvbXBvbmVudF9pbl9wYXRoPXJhd19kYXRhCiAgICAgICAgICAgICkKCiAgICAgICAgICAgIHN3ZWVwX2pvYjE6IFN3ZWVwID0gY21kX25vZGUxLnN3ZWVwKAogICAgICAgICAgICAgICAgcHJpbWFyeV9tZXRyaWM9IkFVQyIsICAjIHByaW1hcnlfbWV0cmljLAogICAgICAgICAgICAgICAgZ29hbD0ibWF4aW1pemUiLAogICAgICAgICAgICAgICAgc2FtcGxpbmdfYWxnb3JpdGhtPSJyYW5kb20iLAogICAgICAgICAgICApCiAgICAgICAgICAgIHN3ZWVwX2pvYjEuY29tcHV0ZSA9ICJncHUtY2x1c3RlciIKICAgICAgICAgICAgc3dlZXBfam9iMS5zZXRfbGltaXRzKG1heF90b3RhbF90cmlhbHM9MTApICAjIG1heF90b3RhbF90cmlhbHMKCiAgICAgICAgICAgIGNtZF9ub2RlMjogQ29tbWFuZCA9IGNvbXBvbmVudF90b19zd2VlcCgKICAgICAgICAgICAgICAgIGNvbXBvbmVudF9pbl9udW1iZXI9Q2hvaWNlKFsyLCAzLCA0LCA1XSksIGNvbXBvbmVudF9pbl9wYXRoPXJhd19kYXRhCiAgICAgICAgICAgICkKICAgICAgICAgICAgc3dlZXBfam9iMjogU3dlZXAgPSBjbWRfbm9kZTIuc3dlZXAoCiAgICAgICAgICAgICAgICBwcmltYXJ5X21ldHJpYz0iQVVDIiwKICAgICAgICAgICAgICAgIGdvYWw9Im1pbmltaXplIiwKICAgICAgICAgICAgICAgIHNhbXBsaW5nX2FsZ29yaXRobT0icmFuZG9tIiwKICAgICAgICAgICAgICAgIG1heF90b3RhbF90cmlhbHM9MTAsCiAgICAgICAgICAgICkKICAgICAgICAgICAgc3dlZXBfam9iMi5jb21wdXRlID0gImdwdS1jbHVzdGVyIgoKICAgICAgICAgICAgc3dlZXBfam9iMzogU3dlZXAgPSBjb21wb25lbnRfdG9fc3dlZXAoCiAgICAgICAgICAgICAgICBjb21wb25lbnRfaW5fbnVtYmVyPUNob2ljZShbMiwgMywgNCwgNV0pLCBjb21wb25lbnRfaW5fcGF0aD1yYXdfZGF0YQogICAgICAgICAgICApLnN3ZWVwKAogICAgICAgICAgICAgICAgcHJpbWFyeV9tZXRyaWM9ImFjY3VyYWN5IiwKICAgICAgICAgICAgICAgIGdvYWw9Im1heGltaXplIiwKICAgICAgICAgICAgICAgIHNhbXBsaW5nX2FsZ29yaXRobT0icmFuZG9tIiwKICAgICAgICAgICAgICAgIG1heF90b3RhbF90cmlhbHM9MTAsCiAgICAgICAgICAgICkKCiAgICAgICAgICAgIGNvbXBvbmVudF90b19saW5rID0gbG9hZF9jb21wb25lbnQoc291cmNlPXlhbWxfZmlsZSwgcGFyYW1zX292ZXJyaWRlPVt7Im5hbWUiOiAibm9kZV90b19saW5rIn1dKQogICAgICAgICAgICBsaW5rX25vZGUgPSBjb21wb25lbnRfdG9fbGluaygKICAgICAgICAgICAgICAgIGNvbXBvbmVudF9pbl9udW1iZXI9MiwgY29tcG9uZW50X2luX3BhdGg9c3dlZXBfam9iMS5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aAogICAgICAgICAgICApCgogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgInBpcGVsaW5lX2pvYl9iZXN0X21vZGVsMSI6IHN3ZWVwX2pvYjEub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgsCiAgICAgICAgICAgICAgICAicGlwZWxpbmVfam9iX2Jlc3RfbW9kZWwyIjogc3dlZXBfam9iMi5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aCwKICAgICAgICAgICAgICAgICJwaXBlbGluZV9qb2JfYmVzdF9tb2RlbDMiOiBzd2VlcF9qb2IzLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRoLAogICAgICAgICAgICAgICAgInBpcGVsaW5lX21vZGVsX3Rlc3RfcmVzdWx0IjogbGlua19ub2RlLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRoLAogICAgICAgICAgICB9CgogICAgICAgIHBpcGVsaW5lOiBQaXBlbGluZUpvYiA9IHRyYWluX3dpdGhfc3dlZXBfaW5fcGlwZWxpbmUoCiAgICAgICAgICAgIHJhd19kYXRhPWpvYl9pbnB1dCwgbWF4X3RvdGFsX3RyaWFscz0xMDAsIHByaW1hcnlfbWV0cmljPSJhY2N1cmFjeSIKICAgICAgICApCiAgICAgICAgcGlwZWxpbmUuc2V0dGluZ3MuZGVmYXVsdF9jb21wdXRlID0gImNwdS1jbHVzdGVyIgogICAgICAgIGNyZWF0ZWRfcGlwZWxpbmUgPSBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQogICAgICAgIG5hbWUsIHZlcnNpb24gPSBjcmVhdGVkX3BpcGVsaW5lLmpvYnNbInN3ZWVwX2pvYjEiXS50cmlhbC5zcGxpdCgiOiIpCiAgICAgICAgY3JlYXRlZF9jb21wb25lbnQgPSBjbGllbnQuY29tcG9uZW50cy5nZXQobmFtZSwgdmVyc2lvbikKICAgICAgICAjIGtlZXAgb3JpZ2luYWwgY29tcG9uZW50IGRpc3BsYXkgbmFtZSB0byBndWFyYW50ZWUgcmV1c2UKICAgICAgICBhc3NlcnQgY3JlYXRlZF9jb21wb25lbnQuZGlzcGxheV9uYW1lIGlzIE5vbmUKCiAgICBkZWYgdGVzdF9kc2xfcGlwZWxpbmVfY29tcG9uZW50X2NhY2hlX2luX3Jlc29sdmVyKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgaW5wdXRfZGF0YV9wYXRoID0gIi4vdGVzdHMvdGVzdF9jb25maWdzL2RhdGEvIgogICAgICAgIHBpcGVsaW5lX3Jvb3QgPSBzZWxmLl9nZW5lcmF0ZV9tdWx0aV9sYXllcl9waXBlbGluZV9mdW5jKCkKCiAgICAgICAgX3N1Ym1pdF9hbmRfY2FuY2VsID0gcGFydGlhbCgKICAgICAgICAgICAgc3VibWl0X2FuZF9jYW5jZWxfbmV3X2RzbF9waXBlbGluZSwgY2xpZW50PWNsaWVudCwgam9iX2luX3BhdGg9SW5wdXQocGF0aD1pbnB1dF9kYXRhX3BhdGgpCiAgICAgICAgKQoKICAgICAgICBkZWYgX21vY2tfZ2V0X2NvbXBvbmVudF9hcm1faWQoX2NvbXBvbmVudDogQ29tcG9uZW50KSAtPiBzdHI6CiAgICAgICAgICAgICMgdGhlIGxvZ2ljIGhhcyBubyBkaWZmIGNvbXBhcmluZyB0byBvcmlnaW5hbCBmdW5jdGlvbiBvdGhlciB0aGFuIGFsd2F5cyB1c2luZyBzaG93X3Byb2dyZXNzPUZhbHNlCiAgICAgICAgICAgICMganVzdCB0byBtb2NrIHRoZSBmdW5jdGlvbiBhbmQgY2hlY2sgY2FsbCBpbmZvcm1hdGlvbgogICAgICAgICAgICBpZiBub3QgX2NvbXBvbmVudC5pZDoKICAgICAgICAgICAgICAgIF9jb21wb25lbnQuX2lkID0gY2xpZW50LmNvbXBvbmVudHMuY3JlYXRlX29yX3VwZGF0ZSgKICAgICAgICAgICAgICAgICAgICBfY29tcG9uZW50LCBpc19hbm9ueW1vdXM9VHJ1ZSwgc2hvd19wcm9ncmVzcz1GYWxzZQogICAgICAgICAgICAgICAgKS5pZAogICAgICAgICAgICByZXR1cm4gX2NvbXBvbmVudC5pZAoKICAgICAgICB3aXRoIG1vY2sucGF0Y2gub2JqZWN0KAogICAgICAgICAgICBPcGVyYXRpb25PcmNoZXN0cmF0b3IsICJfZ2V0X2NvbXBvbmVudF9hcm1faWQiLCBzaWRlX2VmZmVjdD1fbW9ja19nZXRfY29tcG9uZW50X2FybV9pZAogICAgICAgICkgYXMgbW9ja19yZXNvbHZlOgogICAgICAgICAgICBfc3VibWl0X2FuZF9jYW5jZWwocGlwZWxpbmVfcm9vdCkKICAgICAgICAgICAgIyBwaXBlbGluZV9sZWFmLCBwaXBlbGluZV9taWQgYW5kIDMgY29tbWFuZCBjb21wb25lbnRzIHdpbGwgYmUgcmVzb2x2ZWQKICAgICAgICAgICAgYXNzZXJ0IG1vY2tfcmVzb2x2ZS5jYWxsX2NvdW50ID09IDUKCiAgICAgICAgd2l0aCBtb2NrLnBhdGNoLm9iamVjdCgKICAgICAgICAgICAgT3BlcmF0aW9uT3JjaGVzdHJhdG9yLCAiX2dldF9jb21wb25lbnRfYXJtX2lkIiwgc2lkZV9lZmZlY3Q9X21vY2tfZ2V0X2NvbXBvbmVudF9hcm1faWQKICAgICAgICApIGFzIG1vY2tfcmVzb2x2ZToKICAgICAgICAgICAgX3N1Ym1pdF9hbmRfY2FuY2VsKHBpcGVsaW5lX3Jvb3QpCiAgICAgICAgICAgICMgbm8gbW9yZSByZXF1ZXN0cyB0byByZXNvbHZlIGNvbXBvbmVudHMgYXMgbG9jYWwgY2FjaGUgaXMgaGl0CiAgICAgICAgICAgIGFzc2VydCBtb2NrX3Jlc29sdmUuY2FsbF9jb3VudCA9PSAwCgogICAgICAgIHBpcGVsaW5lX2pvYiA9IHBpcGVsaW5lX3Jvb3Qoam9iX2luX3BhdGg9SW5wdXQocGF0aD1pbnB1dF9kYXRhX3BhdGgpKQogICAgICAgIHBpcGVsaW5lX2pvYi5zZXR0aW5ncy5kZWZhdWx0X2NvbXB1dGUgPSAiY3B1LWNsdXN0ZXIiCiAgICAgICAgbGVhZl9zdWJncmFwaCA9IHBpcGVsaW5lX2pvYi5qb2JzWyJwaXBlbGluZV9taWQiXS5jb21wb25lbnQuam9ic1sicGlwZWxpbmVfbGVhZiJdLmNvbXBvbmVudAogICAgICAgIGxlYWZfc3ViZ3JhcGguam9ic1siYW5vdGhlcl9jb21wb25lbnRfbmFtZSJdLmNvbXBvbmVudC5jb21tYW5kICs9ICIgJiBlY2hvIHVwZGF0ZWQyIgogICAgICAgIHdpdGggbW9jay5wYXRjaC5vYmplY3QoCiAgICAgICAgICAgIE9wZXJhdGlvbk9yY2hlc3RyYXRvciwgIl9nZXRfY29tcG9uZW50X2FybV9pZCIsIHNpZGVfZWZmZWN0PV9tb2NrX2dldF9jb21wb25lbnRfYXJtX2lkCiAgICAgICAgKSBhcyBtb2NrX3Jlc29sdmU6CiAgICAgICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lX2pvYiwgY2xpZW50KQogICAgICAgICAgICAjIHVwZGF0ZWQgY29tbWFuZCBjb21wb25lbnQgYW5kIGl0cyBwYXJlbnRzIChwaXBlbGluZV9sZWFmIGFuZCBwaXBlbGluZV9taWQpIHdpbGwgYmUgcmVzb2x2ZWQKICAgICAgICAgICAgYXNzZXJ0IG1vY2tfcmVzb2x2ZS5jYWxsX2NvdW50ID09IDMKCiAgICBkZWYgdGVzdF9kc2xfcGlwZWxpbmVfY29uY3VycmVudF9jb21wb25lbnRfcmVnaXN0cmF0aW9uKHNlbGYsIGNsaWVudDogTUxDbGllbnQsIG1vY2tlcjogTW9ja0ZpeHR1cmUpIC0\u002BIE5vbmU6CiAgICAgICAgIyBkaXNhYmxlIG9uLWRpc2sgY2FjaGUgdG8gdGVzdCBjb25jdXJyZW50IGNvbXBvbmVudCByZWdpc3RyYXRpb24KICAgICAgICBtb2NrZXIucGF0Y2goImF6dXJlLmFpLm1sLl91dGlscy51dGlscy5pc19vbl9kaXNrX2NhY2hlX2VuYWJsZWQiLCByZXR1cm5fdmFsdWU9RmFsc2UpCgogICAgICAgIGlucHV0X2RhdGFfcGF0aCA9ICIuL3Rlc3RzL3Rlc3RfY29uZmlncy9kYXRhLyIKICAgICAgICBwaXBlbGluZV9yb290ID0gc2VsZi5fZ2VuZXJhdGVfcGlwZWxpbmVfZnVuY19mb3JfY29uY3VycmVudF9jb21wb25lbnRfcmVnaXN0cmF0aW9uX3Rlc3QoCiAgICAgICAgICAgIHNoYXJlZF9pbnB1dD1JbnB1dChwYXRoPWlucHV0X2RhdGFfcGF0aCkKICAgICAgICApCgogICAgICAgIF9zdWJtaXRfYW5kX2NhbmNlbCA9IHBhcnRpYWwoCiAgICAgICAgICAgIHN1Ym1pdF9hbmRfY2FuY2VsX25ld19kc2xfcGlwZWxpbmUsCiAgICAgICAgICAgIGNsaWVudD1jbGllbnQsCiAgICAgICAgKQoKICAgICAgICB0cmVhdG1lbnRfcGlwZWxpbmVfam9iID0gX3N1Ym1pdF9hbmRfY2FuY2VsKHBpcGVsaW5lX3Jvb3QpCgogICAgICAgIHdpdGggbW9jay5wYXRjaCgiYXp1cmUuYWkubWwuX3V0aWxzLnV0aWxzLmlzX2NvbmN1cnJlbnRfY29tcG9uZW50X3JlZ2lzdHJhdGlvbl9lbmFibGVkIiwgcmV0dXJuX3ZhbHVlPUZhbHNlKToKICAgICAgICAgICAgYmFzZV9waXBlbGluZV9qb2IgPSBfc3VibWl0X2FuZF9jYW5jZWwocGlwZWxpbmVfcm9vdCkKCiAgICAgICAgIyBTZXJ2ZXItc2lkZSBkb2VzIG5vdCBndWFyYW50ZWUgdGhlIHNhbWUgYW5vbnltb3VzIHBpcGVsaW5lIGNvbXBvbmVudCBzaGFyZSB0aGUgc2FtZSB2ZXJzaW9uCiAgICAgICAgIyBTbyBvbWl0IG5hbWUgYW5kIHZlcnNpb24gYW5kIGRvIGNvbXBhcmlzb24gbGF5ZXIgYnkgbGF5ZXIKICAgICAgICBvbWl0X2ZpZWxkcyA9IFsiaWQiLCAibmFtZSIsICJ2ZXJzaW9uIiwgImNyZWF0aW9uX2NvbnRleHQiLCAic2VydmljZXMiLCAiam9icy4qLmNvbXBvbmVudCJdCgogICAgICAgIGJhc2UsIHRyZWF0ID0gYmFzZV9waXBlbGluZV9qb2IsIHRyZWF0bWVudF9waXBlbGluZV9qb2IKICAgICAgICAjIFRPRE86IHRlc3Qgd2l0aCBtdWx0aXBsZSBwaXBlbGluZXMgYWZ0ZXIgc2VydmVyLXNpZGUgcmV0dXJuIGpvYnMgZm9yIHBpcGVsaW5lIGNvbXBvbmVudAogICAgICAgIGZvciBfIGluIHJhbmdlKDAsIDApOgogICAgICAgICAgICBhc3NlcnQgb21pdF93aXRoX3dpbGRjYXJkKGJhc2UuX3RvX2RpY3QoKSwgKm9taXRfZmllbGRzKSA9PSBvbWl0X3dpdGhfd2lsZGNhcmQoCiAgICAgICAgICAgICAgICB0cmVhdC5fdG9fZGljdCgpLCAqb21pdF9maWVsZHMKICAgICAgICAgICAgKQogICAgICAgICAgICBiYXNlID0gX2dldF9jb21wb25lbnRfaW5fZmlyc3RfY2hpbGQoYmFzZSwgY2xpZW50KQogICAgICAgICAgICB0cmVhdCA9IF9nZXRfY29tcG9uZW50X2luX2ZpcnN0X2NoaWxkKHRyZWF0LCBjbGllbnQpCgogICAgICAgICMgVGhlIGxhc3QgbGF5ZXIgY29udGFpbnMgdGhlIGNvbW1hbmQgY29tcG9uZW50cwogICAgICAgIG9taXRfZmllbGRzLnBvcCgpCiAgICAgICAgYXNzZXJ0IG9taXRfd2l0aF93aWxkY2FyZChiYXNlLl90b19kaWN0KCksICpvbWl0X2ZpZWxkcykgPT0gb21pdF93aXRoX3dpbGRjYXJkKHRyZWF0Ll90b19kaWN0KCksICpvbWl0X2ZpZWxkcykK",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "1Eejn94qxLQlrgO40sYwwA==",
        "Date": "Mon, 24 Apr 2023 03:22:27 GMT",
        "ETag": "\u00220x8DB447321B45F41\u0022",
        "Last-Modified": "Mon, 24 Apr 2023 03:22:28 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "JlZ2Rw/sEnA=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://samcw32zcnpjldw.blob.core.windows.net/azureml-blobstore-72e8eff8-148b-4582-a07d-efc79559f19f/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_pipeline.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "156103",
        "Content-MD5": "I4y4Qh7esHSfKFgWjfBTwA==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.7.13 (Linux-5.15.90.1-microsoft-standard-WSL2-x86_64-with-debian-bookworm-sid)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Mon, 24 Apr 2023 03:22:25 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": "\u002BIE5vbmU6CiAgICAgICAgbXBpX2Z1bmMgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9c3RyKGNvbXBvbmVudHNfZGlyIC8gImhlbGxvd29ybGRfY29tcG9uZW50X21waS55bWwiKSkKICAgICAgICBweXRvcmNoX2Z1bmMgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9c3RyKGNvbXBvbmVudHNfZGlyIC8gImhlbGxvd29ybGRfY29tcG9uZW50X3B5dG9yY2gueW1sIikpCiAgICAgICAgdGVuc29yZmxvd19mdW5jID0gbG9hZF9jb21wb25lbnQoc291cmNlPXN0cihjb21wb25lbnRzX2RpciAvICJoZWxsb3dvcmxkX2NvbXBvbmVudF90ZW5zb3JmbG93LnltbCIpKQoKICAgICAgICBAZHNsLnBpcGVsaW5lKAogICAgICAgICAgICBuYW1lPXJhbmRzdHIoInBpcGVsaW5lX25hbWUiKSwKICAgICAgICAgICAgZGVzY3JpcHRpb249IlRoZSBoZWxsbyB3b3JsZCBwaXBlbGluZSBqb2IiLAogICAgICAgICAgICB0YWdzPXsib3duZXIiOiAic2RrdGVhbSIsICJ0YWciOiAidGFndmFsdWUifSwKICAgICAgICAgICAgY29tcHV0ZT0iZ3B1LWNsdXN0ZXIiLAogICAgICAgICAgICBleHBlcmltZW50X25hbWU9ZXhwZXJpbWVudF9uYW1lLAogICAgICAgICkKICAgICAgICBkZWYgcGlwZWxpbmVfZGlzdHJpYnV0aW9uX2NvbXBvbmVudHMoam9iX2luX251bWJlciwgam9iX2luX3BhdGgpOgogICAgICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfbXBpID0gbXBpX2Z1bmMoY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5fcGF0aCkKICAgICAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X21waS5kaXN0cmlidXRpb24gPSBNcGlEaXN0cmlidXRpb24oKQogICAgICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfbXBpLmRpc3RyaWJ1dGlvbi5wcm9jZXNzX2NvdW50X3Blcl9pbnN0YW5jZSA9IDIKCiAgICAgICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudF9weXRvcmNoID0gcHl0b3JjaF9mdW5jKAogICAgICAgICAgICAgICAgY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5fcGF0aAogICAgICAgICAgICApCiAgICAgICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudF9weXRvcmNoLmRpc3RyaWJ1dGlvbiA9IFB5VG9yY2hEaXN0cmlidXRpb24oKQogICAgICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfcHl0b3JjaC5kaXN0cmlidXRpb24ucHJvY2Vzc19jb3VudF9wZXJfaW5zdGFuY2UgPSAyCgogICAgICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfdGVuc29yZmxvdyA9IHRlbnNvcmZsb3dfZnVuYygKICAgICAgICAgICAgICAgIGNvbXBvbmVudF9pbl9udW1iZXI9am9iX2luX251bWJlciwgY29tcG9uZW50X2luX3BhdGg9am9iX2luX3BhdGgKICAgICAgICAgICAgKQogICAgICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfdGVuc29yZmxvdy5kaXN0cmlidXRpb24gPSBUZW5zb3JGbG93RGlzdHJpYnV0aW9uKCkKICAgICAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X3RlbnNvcmZsb3cuZGlzdHJpYnV0aW9uLndvcmtlcl9jb3VudCA9IDIKCiAgICAgICAgcGlwZWxpbmUgPSBwaXBlbGluZV9kaXN0cmlidXRpb25fY29tcG9uZW50cygxMCwgam9iX2lucHV0KQogICAgICAgIGNsaWVudC5qb2JzLmNyZWF0ZV9vcl91cGRhdGUocGlwZWxpbmUsIGV4cGVyaW1lbnRfbmFtZT1leHBlcmltZW50X25hbWUpCgogICAgZGVmIHRlc3RfY29tcG9uZW50X3dpdGhfYmluZGluZyhzZWxmLCBjbGllbnQ6IE1MQ2xpZW50LCByYW5kc3RyOiBDYWxsYWJsZVtbc3RyXSwgc3RyXSk6CiAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X3lhbWwgPSBzdHIoY29tcG9uZW50c19kaXIgLyAiaGVsbG93b3JsZF9jb21wb25lbnQueW1sIikKICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfZnVuYyA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1oZWxsb193b3JsZF9jb21wb25lbnRfeWFtbCkKCiAgICAgICAgbWVyZ2Vfb3V0cHV0c19jb21wb25lbnRfeWFtbCA9IHN0cihjb21wb25lbnRzX2RpciAvICJtZXJnZV9vdXRwdXRzX2NvbXBvbmVudC55bWwiKQogICAgICAgIG1lcmdlX291dHB1dHNfY29tcG9uZW50X2Z1bmMgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9bWVyZ2Vfb3V0cHV0c19jb21wb25lbnRfeWFtbCkKCiAgICAgICAgQGRzbC5waXBlbGluZSgKICAgICAgICAgICAgbmFtZT1yYW5kc3RyKCJwaXBlbGluZV9uYW1lIiksCiAgICAgICAgICAgIGRlc2NyaXB0aW9uPSJUaGUgaGVsbG8gd29ybGQgcGlwZWxpbmUgam9iIiwKICAgICAgICAgICAgdGFncz17Im93bmVyIjogInNka3RlYW0iLCAidGFnIjogInRhZ3ZhbHVlIn0sCiAgICAgICAgICAgIGNvbXB1dGU9ImNwdS1jbHVzdGVyIiwKICAgICAgICApCiAgICAgICAgZGVmIHBpcGVsaW5lX3dpdGhfYmluZGluZyhqb2JfaW5fbnVtYmVyLCBqb2JfaW5fb3RoZXJfbnVtYmVyLCBqb2JfaW5fcGF0aCk6CiAgICAgICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudF8xID0gaGVsbG9fd29ybGRfY29tcG9uZW50X2Z1bmMoCiAgICAgICAgICAgICAgICBjb21wb25lbnRfaW5fbnVtYmVyPWpvYl9pbl9udW1iZXIsIGNvbXBvbmVudF9pbl9wYXRoPWpvYl9pbl9wYXRoCiAgICAgICAgICAgICkKICAgICAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50XzIgPSBoZWxsb193b3JsZF9jb21wb25lbnRfZnVuYygKICAgICAgICAgICAgICAgIGNvbXBvbmVudF9pbl9udW1iZXI9am9iX2luX251bWJlciwgY29tcG9uZW50X2luX3BhdGg9am9iX2luX3BhdGgKICAgICAgICAgICAgKQoKICAgICAgICAgICAgIyBjb25maWd1cmUgY29tcG9uZW50IG92ZXJyaWRlcywgY3VyYXRlZCBTREsgbm90IHN1cHBvcnRlZCB5ZXQKICAgICAgICAgICAgIyBoZWxsb193b3JsZF9jb21wb25lbnRfMi5yZXNvdXJjZXMuaW5zdGFuY2VfY291bnQgPSAyCgogICAgICAgICAgICAjIGNvbmZpZ3VyZSBjb21wb25lbnQgb3V0cHV0cwogICAgICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfMS5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aC5tb2RlID0gIlVwbG9hZCIKICAgICAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50XzIub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgubW9kZSA9ICJVcGxvYWQiCgogICAgICAgICAgICBtZXJnZV9jb21wb25lbnRfb3V0cHV0cyA9IG1lcmdlX291dHB1dHNfY29tcG9uZW50X2Z1bmMoCiAgICAgICAgICAgICAgICBjb21wb25lbnRfaW5fbnVtYmVyPWpvYl9pbl9vdGhlcl9udW1iZXIsCiAgICAgICAgICAgICAgICBjb21wb25lbnRfaW5fcGF0aF8xPWhlbGxvX3dvcmxkX2NvbXBvbmVudF8xLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRoLAogICAgICAgICAgICAgICAgY29tcG9uZW50X2luX3BhdGhfMj1oZWxsb193b3JsZF9jb21wb25lbnRfMi5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aCwKICAgICAgICAgICAgKQogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgImpvYl9vdXRfZGF0YV8xIjogbWVyZ2VfY29tcG9uZW50X291dHB1dHMub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGhfMSwKICAgICAgICAgICAgICAgICJqb2Jfb3V0X2RhdGFfMiI6IG1lcmdlX2NvbXBvbmVudF9vdXRwdXRzLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRoXzIsCiAgICAgICAgICAgIH0KCiAgICAgICAgcGlwZWxpbmUgPSBwaXBlbGluZV93aXRoX2JpbmRpbmcoMTAsIDE2LCBqb2JfaW5wdXQpCiAgICAgICAgY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZSgKICAgICAgICAgICAgcGlwZWxpbmUsCiAgICAgICAgICAgIGV4cGVyaW1lbnRfbmFtZT0iZHNsX3BpcGVsaW5lX2UyZSIsCiAgICAgICAgKQoKICAgIGRlZiB0ZXN0X2RhdGFfaW5wdXQoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBwYXJlbnRfZGlyID0gc3RyKHRlc3RzX3Jvb3RfZGlyIC8gInRlc3RfY29uZmlncy9kc2xfcGlwZWxpbmUvbnljX3RheGlfZGF0YV9yZWdyZXNzaW9uIikKCiAgICAgICAgZGVmIGdlbmVyYXRlX2RzbF9waXBlbGluZSgpOgogICAgICAgICAgICAjIDEuIExvYWQgY29tcG9uZW50IGZ1bmNzCiAgICAgICAgICAgIHByZXBfZnVuYyA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1wYXJlbnRfZGlyICsgIi9wcmVwLnltbCIpCiAgICAgICAgICAgIHRyYW5zZm9ybV9mdW5jID0gbG9hZF9jb21wb25lbnQoc291cmNlPXBhcmVudF9kaXIgKyAiL3RyYW5zZm9ybS55bWwiKQogICAgICAgICAgICB0cmFpbl9mdW5jID0gbG9hZF9jb21wb25lbnQoc291cmNlPXBhcmVudF9kaXIgKyAiL3RyYWluLnltbCIpCiAgICAgICAgICAgIHByZWRpY3RfZnVuYyA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1wYXJlbnRfZGlyICsgIi9wcmVkaWN0LnltbCIpCiAgICAgICAgICAgIHNjb3JlX2Z1bmMgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9cGFyZW50X2RpciArICIvc2NvcmUueW1sIikKCiAgICAgICAgICAgICMgMi4gQ29uc3RydWN0IHBpcGVsaW5lCiAgICAgICAgICAgIEBkc2wucGlwZWxpbmUoY29tcHV0ZT0iY3B1LWNsdXN0ZXIiLCBkZWZhdWx0X2RhdGFzdG9yZT0id29ya3NwYWNlYmxvYnN0b3JlIikKICAgICAgICAgICAgZGVmIHNhbXBsZV9waXBlbGluZShwaXBlbGluZV9qb2JfaW5wdXQpOgogICAgICAgICAgICAgICAgcHJlcF9qb2IgPSBwcmVwX2Z1bmMocmF3X2RhdGE9cGlwZWxpbmVfam9iX2lucHV0KQogICAgICAgICAgICAgICAgdHJhbnNmb3JtX2pvYiA9IHRyYW5zZm9ybV9mdW5jKGNsZWFuX2RhdGE9cHJlcF9qb2Iub3V0cHV0cy5wcmVwX2RhdGEpCiAgICAgICAgICAgICAgICB0cmFpbl9qb2IgPSB0cmFpbl9mdW5jKHRyYWluaW5nX2RhdGE9dHJhbnNmb3JtX2pvYi5vdXRwdXRzLnRyYW5zZm9ybWVkX2RhdGEpCiAgICAgICAgICAgICAgICBwcmVkaWN0X2pvYiA9IHByZWRpY3RfZnVuYygKICAgICAgICAgICAgICAgICAgICBtb2RlbF9pbnB1dD10cmFpbl9qb2Iub3V0cHV0cy5tb2RlbF9vdXRwdXQsCiAgICAgICAgICAgICAgICAgICAgdGVzdF9kYXRhPXRyYWluX2pvYi5vdXRwdXRzLnRlc3RfZGF0YSwKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIHNjb3JlX2pvYiA9IHNjb3JlX2Z1bmMoCiAgICAgICAgICAgICAgICAgICAgcHJlZGljdGlvbnM9cHJlZGljdF9qb2Iub3V0cHV0cy5wcmVkaWN0aW9ucywKICAgICAgICAgICAgICAgICAgICBtb2RlbD10cmFpbl9qb2Iub3V0cHV0cy5tb2RlbF9vdXRwdXQsCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICJwaXBlbGluZV9qb2JfcHJlcHBlZF9kYXRhIjogcHJlcF9qb2Iub3V0cHV0cy5wcmVwX2RhdGEsCiAgICAgICAgICAgICAgICAgICAgInBpcGVsaW5lX2pvYl90cmFuc2Zvcm1lZF9kYXRhIjogdHJhbnNmb3JtX2pvYi5vdXRwdXRzLnRyYW5zZm9ybWVkX2RhdGEsCiAgICAgICAgICAgICAgICAgICAgInBpcGVsaW5lX2pvYl90cmFpbmVkX21vZGVsIjogdHJhaW5fam9iLm91dHB1dHMubW9kZWxfb3V0cHV0LAogICAgICAgICAgICAgICAgICAgICJwaXBlbGluZV9qb2JfdGVzdF9kYXRhIjogdHJhaW5fam9iLm91dHB1dHMudGVzdF9kYXRhLAogICAgICAgICAgICAgICAgICAgICJwaXBlbGluZV9qb2JfcHJlZGljdGlvbnMiOiBwcmVkaWN0X2pvYi5vdXRwdXRzLnByZWRpY3Rpb25zLAogICAgICAgICAgICAgICAgICAgICJwaXBlbGluZV9qb2Jfc2NvcmVfcmVwb3J0Ijogc2NvcmVfam9iLm91dHB1dHMuc2NvcmVfcmVwb3J0LAogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgcGlwZWxpbmUgPSBzYW1wbGVfcGlwZWxpbmUoSW5wdXQodHlwZT1Bc3NldFR5cGVzLlVSSV9GT0xERVIsIHBhdGg9cGFyZW50X2RpciArICIvZGF0YS8iKSkKICAgICAgICAgICAgcGlwZWxpbmUub3V0cHV0cy5waXBlbGluZV9qb2JfcHJlcHBlZF9kYXRhLmRhdGEgPSAiL3ByZXBwZWRfZGF0YSIKICAgICAgICAgICAgcGlwZWxpbmUub3V0cHV0cy5waXBlbGluZV9qb2JfcHJlcHBlZF9kYXRhLm1vZGUgPSAicndfbW91bnQiCiAgICAgICAgICAgIHBpcGVsaW5lLm91dHB1dHMucGlwZWxpbmVfam9iX3RyYW5zZm9ybWVkX2RhdGEuZGF0YSA9ICIvdHJhbnNmb3JtZWRfZGF0YSIKICAgICAgICAgICAgcGlwZWxpbmUub3V0cHV0cy5waXBlbGluZV9qb2JfdHJhbnNmb3JtZWRfZGF0YS5tb2RlID0gInJ3X21vdW50IgogICAgICAgICAgICBwaXBlbGluZS5vdXRwdXRzLnBpcGVsaW5lX2pvYl90cmFpbmVkX21vZGVsLmRhdGEgPSAiL3RyYWluZWQtbW9kZWwiCiAgICAgICAgICAgIHBpcGVsaW5lLm91dHB1dHMucGlwZWxpbmVfam9iX3RyYWluZWRfbW9kZWwubW9kZSA9ICJyd19tb3VudCIKICAgICAgICAgICAgcGlwZWxpbmUub3V0cHV0cy5waXBlbGluZV9qb2JfdGVzdF9kYXRhLmRhdGEgPSAiL3Rlc3RfZGF0YSIKICAgICAgICAgICAgcGlwZWxpbmUub3V0cHV0cy5waXBlbGluZV9qb2JfdGVzdF9kYXRhLm1vZGUgPSAicndfbW91bnQiCiAgICAgICAgICAgIHBpcGVsaW5lLm91dHB1dHMucGlwZWxpbmVfam9iX3ByZWRpY3Rpb25zLmRhdGEgPSAiL3ByZWRpY3Rpb25zIgogICAgICAgICAgICBwaXBlbGluZS5vdXRwdXRzLnBpcGVsaW5lX2pvYl9wcmVkaWN0aW9ucy5tb2RlID0gInJ3X21vdW50IgogICAgICAgICAgICBwaXBlbGluZS5vdXRwdXRzLnBpcGVsaW5lX2pvYl9zY29yZV9yZXBvcnQuZGF0YSA9ICIvcmVwb3J0IgogICAgICAgICAgICBwaXBlbGluZS5vdXRwdXRzLnBpcGVsaW5lX2pvYl9zY29yZV9yZXBvcnQubW9kZSA9ICJyd19tb3VudCIKICAgICAgICAgICAgcmV0dXJuIHBpcGVsaW5lCgogICAgICAgICMgY3JlYXRlIHBpcGVsaW5lIGluc3RhbmNlCiAgICAgICAgcGlwZWxpbmUgPSBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUoKQogICAgICAgICMgc3VibWl0IGpvYiB0byB3b3Jrc3BhY2UKICAgICAgICBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKAogICAgICAgICAgICBwaXBlbGluZSwKICAgICAgICAgICAgZXhwZXJpbWVudF9uYW1lPSJueWNfdGF4aV9kYXRhX3JlZ3Jlc3Npb24iLAogICAgICAgICkKCiAgICBkZWYgdGVzdF9jb21tYW5kX2Z1bmN0aW9uKHNlbGYsIHJhbmRzdHI6IENhbGxhYmxlW1tzdHJdLCBzdHJdLCBjbGllbnQ6IE1MQ2xpZW50KToKICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfeWFtbCA9IHN0cihjb21wb25lbnRzX2RpciAvICJoZWxsb3dvcmxkX2NvbXBvbmVudC55bWwiKQogICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudF9mdW5jID0gbG9hZF9jb21wb25lbnQoc291cmNlPWhlbGxvX3dvcmxkX2NvbXBvbmVudF95YW1sKQogICAgICAgICMgdXBkYXRlIGNvbXBvbmVudCBkaXNwbGF5IG5hbWUgdG8gd29yayBhcm91bmQgc2FtZSBjb21wb25lbnQgcmVnaXN0ZXIgbXVsdGlwbGUgdGltZSBpc3N1ZQogICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudF9mdW5jLmRpc3BsYXlfbmFtZSA9ICJ0ZXN0X2NvbW1hbmRfZnVuY3Rpb25fbm9kZSIKCiAgICAgICAgZW52aXJvbm1lbnQgPSAiQXp1cmVNTC1za2xlYXJuLTEuMC11YnVudHUyMC4wNC1weTM4LWNwdTozMyIKICAgICAgICBkaXN0cmlidXRpb24gPSB7InR5cGUiOiAiUHl0b3JjaCIsICJwcm9jZXNzX2NvdW50X3Blcl9pbnN0YW5jZSI6IDJ9CiAgICAgICAgcmVzb3VyY2VzID0geyJpbnN0YW5jZV9jb3VudCI6IDJ9CiAgICAgICAgZW52aXJvbm1lbnRfdmFyaWFibGVzID0geyJlbnZpcm9uIjogInZhbCJ9CiAgICAgICAgaW5wdXRzID0gewogICAgICAgICAgICAiY29tcG9uZW50X2luX3BhdGgiOiBJbnB1dCh0eXBlPSJ1cmlfZm9sZGVyIiwgcGF0aD0iaHR0cHM6Ly9teS1ibG9iL3BhdGgvdG8vZGF0YSIsIG1vZGU9InJvX21vdW50IiksCiAgICAgICAgICAgICJjb21wb25lbnRfaW5fbnVtYmVyIjogMC4wMSwKICAgICAgICB9CiAgICAgICAgb3V0cHV0cyA9IHsiY29tcG9uZW50X291dF9wYXRoIjogT3V0cHV0KHR5cGU9Im1sZmxvd19tb2RlbCIsIG1vZGU9InJ3X21vdW50Iil9CgogICAgICAgIEBkc2wucGlwZWxpbmUoCiAgICAgICAgICAgIG5hbWU9cmFuZHN0cigicGlwZWxpbmVfbmFtZSIpLAogICAgICAgICAgICBkZXNjcmlwdGlvbj0iVGhlIGhlbGxvIHdvcmxkIHBpcGVsaW5lIGpvYiIsCiAgICAgICAgICAgIHRhZ3M9eyJvd25lciI6ICJzZGt0ZWFtIiwgInRhZyI6ICJ0YWd2YWx1ZSJ9LAogICAgICAgICAgICBjb21wdXRlPSJjcHUtY2x1c3RlciIsCiAgICAgICAgKQogICAgICAgIGRlZiBtaXhlZF9waXBlbGluZShqb2JfaW5fbnVtYmVyLCBqb2JfaW5fcGF0aCk6CiAgICAgICAgICAgIGNvbW1hbmRfam9iID0gQ29tbWFuZEpvYigKICAgICAgICAgICAgICAgIGRpc3BsYXlfbmFtZT0iY29tbWFuZC1qb2IiLAogICAgICAgICAgICAgICAgZW52aXJvbm1lbnQ9ZW52aXJvbm1lbnQsCiAgICAgICAgICAgICAgICBjb21tYW5kPSdlY2hvICJoZWxsbyB3b3JsZCInLAogICAgICAgICAgICAgICAgZGlzdHJpYnV0aW9uPWRpc3RyaWJ1dGlvbiwKICAgICAgICAgICAgICAgIHJlc291cmNlcz1yZXNvdXJjZXMsCiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudF92YXJpYWJsZXM9ZW52aXJvbm1lbnRfdmFyaWFibGVzLAogICAgICAgICAgICAgICAgaW5wdXRzPWlucHV0cywKICAgICAgICAgICAgICAgIG91dHB1dHM9b3V0cHV0cywKICAgICAgICAgICAgKQogICAgICAgICAgICBjb21tYW5kX2pvYl9mdW5jID0gdG9fY29tcG9uZW50KGpvYj1jb21tYW5kX2pvYikKCiAgICAgICAgICAgICMgQ29tbWFuZCBmcm9tIGNvbW1hbmQoKSBmdW5jdGlvbgogICAgICAgICAgICBjb21tYW5kX2Z1bmN0aW9uID0gY29tbWFuZCgKICAgICAgICAgICAgICAgIGRpc3BsYXlfbmFtZT0iY29tbWFuZC1mdW5jdGlvbi1qb2IiLAogICAgICAgICAgICAgICAgZW52aXJvbm1lbnQ9ZW52aXJvbm1lbnQsCiAgICAgICAgICAgICAgICBjb21tYW5kPSdlY2hvICJoZWxsbyB3b3JsZCInLAogICAgICAgICAgICAgICAgZGlzdHJpYnV0aW9uPWRpc3RyaWJ1dGlvbiwKICAgICAgICAgICAgICAgIHJlc291cmNlcz1yZXNvdXJjZXMsCiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudF92YXJpYWJsZXM9ZW52aXJvbm1lbnRfdmFyaWFibGVzLAogICAgICAgICAgICAgICAgaW5wdXRzPWlucHV0cywKICAgICAgICAgICAgICAgIG91dHB1dHM9b3V0cHV0cywKICAgICAgICAgICAgKQoKICAgICAgICAgICAgbm9kZTEgPSBoZWxsb193b3JsZF9jb21wb25lbnRfZnVuYyhjb21wb25lbnRfaW5fbnVtYmVyPWpvYl9pbl9udW1iZXIsIGNvbXBvbmVudF9pbl9wYXRoPWpvYl9pbl9wYXRoKQogICAgICAgICAgICBub2RlMiA9IGNvbW1hbmRfam9iX2Z1bmMoCiAgICAgICAgICAgICAgICBjb21wb25lbnRfaW5fcGF0aD1ub2RlMS5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aCwKICAgICAgICAgICAgICAgIGNvbXBvbmVudF9pbl9udW1iZXI9MiwKICAgICAgICAgICAgKQogICAgICAgICAgICBub2RlMyA9IGNvbW1hbmRfZnVuY3Rpb24oCiAgICAgICAgICAgICAgICBjb21wb25lbnRfaW5fcGF0aD1ub2RlMi5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aCwKICAgICAgICAgICAgICAgIGNvbXBvbmVudF9pbl9udW1iZXI9MywKICAgICAgICAgICAgKQoKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICJwaXBlbGluZV9qb2Jfb3V0Ijogbm9kZTMub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgsCiAgICAgICAgICAgIH0KCiAgICAgICAgcGlwZWxpbmUgPSBtaXhlZF9waXBlbGluZSgxNiwgam9iX2lucHV0KQogICAgICAgICMgc3VibWl0IGpvYiB0byB3b3Jrc3BhY2UKICAgICAgICBwaXBlbGluZV9qb2IgPSBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKAogICAgICAgICAgICBwaXBlbGluZSwKICAgICAgICAgICAgZXhwZXJpbWVudF9uYW1lPSJtaXhlZF9waXBlbGluZSIsCiAgICAgICAgKQogICAgICAgIGFjdHVhbF9qb2IgPSBvbWl0X3dpdGhfd2lsZGNhcmQocGlwZWxpbmVfam9iLl90b19yZXN0X29iamVjdCgpLnByb3BlcnRpZXMuYXNfZGljdCgpLCAqY29tbW9uX29taXRfZmllbGRzKQogICAgICAgIGV4cGVjdGVkX2pvYiA9IHsKICAgICAgICAgICAgInRhZ3MiOiB7Im93bmVyIjogInNka3RlYW0iLCAidGFnIjogInRhZ3ZhbHVlIn0sCiAgICAgICAgICAgICJjb21wdXRlX2lkIjogImNwdS1jbHVzdGVyIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBoZWxsbyB3b3JsZCBwaXBlbGluZSBqb2IiLAogICAgICAgICAgICAiaXNfYXJjaGl2ZWQiOiBGYWxzZSwKICAgICAgICAgICAgImpvYl90eXBlIjogIlBpcGVsaW5lIiwKICAgICAgICAgICAgImlucHV0cyI6IHsKICAgICAgICAgICAgICAgICJqb2JfaW5fbnVtYmVyIjogeyJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwgInZhbHVlIjogIjE2In0sCiAgICAgICAgICAgICAgICAiam9iX2luX3BhdGgiOiB7CiAgICAgICAgICAgICAgICAgICAgIm1vZGUiOiAiUmVhZE9ubHlNb3VudCIsCiAgICAgICAgICAgICAgICAgICAgImpvYl9pbnB1dF90eXBlIjogInVyaV9maWxlIiwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJqb2JzIjogewogICAgICAgICAgICAgICAgIm5vZGUxIjogewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImNvbW1hbmQiLAogICAgICAgICAgICAgICAgICAgICJpbnB1dHMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJjb21wb25lbnRfaW5fbnVtYmVyIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIiR7e3BhcmVudC5pbnB1dHMuam9iX2luX251bWJlcn19IiwKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgImNvbXBvbmVudF9pbl9wYXRoIjogeyJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwgInZhbHVlIjogIiR7e3BhcmVudC5pbnB1dHMuam9iX2luX3BhdGh9fSJ9LAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAibm9kZTEiLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJub2RlMiI6IHsKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJjb21tYW5kIiwKICAgICAgICAgICAgICAgICAgICAiZGlzdHJpYnV0aW9uIjogeyJkaXN0cmlidXRpb25fdHlwZSI6ICJQeVRvcmNoIiwgInByb2Nlc3NfY291bnRfcGVyX2luc3RhbmNlIjogMn0sCiAgICAgICAgICAgICAgICAgICAgImlucHV0cyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImNvbXBvbmVudF9pbl9udW1iZXIiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAiMiJ9LAogICAgICAgICAgICAgICAgICAgICAgICAiY29tcG9uZW50X2luX3BhdGgiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiJHt7cGFyZW50LmpvYnMubm9kZTEub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGh9fSIsCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJub2RlMiIsCiAgICAgICAgICAgICAgICAgICAgInJlc291cmNlcyI6IHsiaW5zdGFuY2VfY291bnQiOiAyfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAibm9kZTMiOiB7CiAgICAgICAgICAgICAgICAgICAgImRpc3BsYXlfbmFtZSI6ICJjb21tYW5kLWZ1bmN0aW9uLWpvYiIsCiAgICAgICAgICAgICAgICAgICAgImRpc3RyaWJ1dGlvbiI6IHsiZGlzdHJpYnV0aW9uX3R5cGUiOiAiUHlUb3JjaCIsICJwcm9jZXNzX2NvdW50X3Blcl9pbnN0YW5jZSI6IDJ9LAogICAgICAgICAgICAgICAgICAgICJlbnZpcm9ubWVudF92YXJpYWJsZXMiOiB7ImVudmlyb24iOiAidmFsIn0sCiAgICAgICAgICAgICAgICAgICAgImlucHV0cyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImNvbXBvbmVudF9pbl9udW1iZXIiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAiMyJ9LAogICAgICAgICAgICAgICAgICAgICAgICAiY29tcG9uZW50X2luX3BhdGgiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiJHt7cGFyZW50LmpvYnMubm9kZTIub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGh9fSIsCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJub2RlMyIsCiAgICAgICAgICAgICAgICAgICAgIm91dHB1dHMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJjb21wb25lbnRfb3V0X3BhdGgiOiB7InR5cGUiOiAibGl0ZXJhbCIsICJ2YWx1ZSI6ICIke3twYXJlbnQub3V0cHV0cy5waXBlbGluZV9qb2Jfb3V0fX0ifQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInJlc291cmNlcyI6IHsiaW5zdGFuY2VfY291bnQiOiAyfSwKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJjb21tYW5kIiwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJvdXRwdXRzIjogewogICAgICAgICAgICAgICAgInBpcGVsaW5lX2pvYl9vdXQiOiB7CiAgICAgICAgICAgICAgICAgICAgIm1vZGUiOiAiUmVhZFdyaXRlTW91bnQiLAogICAgICAgICAgICAgICAgICAgICJqb2Jfb3V0cHV0X3R5cGUiOiAibWxmbG93X21vZGVsIiwKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNldHRpbmdzIjoge30sCiAgICAgICAgfQogICAgICAgIGFzc2VydCBleHBlY3RlZF9qb2IgPT0gYWN0dWFsX2pvYgoKICAgIGRlZiB0ZXN0X2NvbW1hbmRfd2l0aF9vcHRpb25hbF9pbnB1dHMoc2VsZiwgcmFuZHN0cjogQ2FsbGFibGVbW3N0cl0sIHN0cl0sIGNsaWVudDogTUxDbGllbnQpOgogICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudF95YW1sID0gc3RyKGNvbXBvbmVudHNfZGlyIC8gImhlbGxvd29ybGRfY29tcG9uZW50X3dpdGhfb3B0aW9uYWxfaW5wdXRzLnltbCIpCiAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X2Z1bmMgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9aGVsbG9fd29ybGRfY29tcG9uZW50X3lhbWwpCiAgICAgICAgY29tbWFuZF9mdW5jID0gY29tbWFuZCgKICAgICAgICAgICAgbmFtZT1mInRlc3Rfb3B0aW9uYWxfaW5wdXRfY29tcG9uZW50XyIgKyByYW5kc3RyKCJjb21wb25lbnRfbmFtZSIpLAogICAgICAgICAgICBkaXNwbGF5X25hbWU9ImNvbW1hbmRfd2l0aF9vcHRpb25hbF9pbnB1dHMiLAogICAgICAgICAgICBlbnZpcm9ubWVudD0iQXp1cmVNTC1za2xlYXJuLTEuMC11YnVudHUyMC4wNC1weTM4LWNwdTozMyIsCiAgICAgICAgICAgIGNvbW1hbmQ9KAogICAgICAgICAgICAgICAgJ2VjaG8gImhlbGxvIHdvcmxkIiAnCiAgICAgICAgICAgICAgICAiJiBlY2hvICRbWyR7e2lucHV0cy5mbG9hdH19XV0gIgogICAgICAgICAgICAgICAgIiYgZWNobyAkW1ske3tpbnB1dHMuaW50ZWdlcn19XV0gIgogICAgICAgICAgICAgICAgIiYgZWNobyAkW1ske3tpbnB1dHMuc3RyaW5nfX1dXSAiCiAgICAgICAgICAgICAgICAiJiBlY2hvICRbWyR7e2lucHV0cy5ib29sZWFufX1dXSAiCiAgICAgICAgICAgICAgICAiJiBlY2hvICR7e2lucHV0cy51cmlfZm9sZGVyfX0gIgogICAgICAgICAgICAgICAgIiYgZWNobyAkW1ske3tpbnB1dHMub3B0aW9uYWxfMH19XV0gIgogICAgICAgICAgICAgICAgIiYgZWNobyAkW1ske3tpbnB1dHMub3B0aW9uYWxfMX19XV0iCiAgICAgICAgICAgICAgICAiJiBlY2hvICRbWyR7e2lucHV0cy5vcHRpb25hbF8yfX1dXSIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgZGlzdHJpYnV0aW9uPXsidHlwZSI6ICJQeXRvcmNoIiwgInByb2Nlc3NfY291bnRfcGVyX2luc3RhbmNlIjogMn0sCiAgICAgICAgICAgIHJlc291cmNlcz17Imluc3RhbmNlX2NvdW50IjogMn0sCiAgICAgICAgICAgIGVudmlyb25tZW50X3ZhcmlhYmxlcz17ImVudmlyb24iOiAidmFsIn0sCiAgICAgICAgICAgIGlucHV0cz17CiAgICAgICAgICAgICAgICAiZmxvYXQiOiBJbnB1dCh0eXBlPSJudW1iZXIiLCBkZWZhdWx0PTEuMSwgbWluPTAsIG1heD01LCBvcHRpb25hbD1UcnVlKSwKICAgICAgICAgICAgICAgICJpbnRlZ2VyIjogSW5wdXQodHlwZT0iaW50ZWdlciIsIGRlZmF1bHQ9MiwgbWluPS0xLCBtYXg9NCwgb3B0aW9uYWw9VHJ1ZSksCiAgICAgICAgICAgICAgICAic3RyaW5nIjogSW5wdXQodHlwZT0ic3RyaW5nIiwgZGVmYXVsdD0iZGVmYXVsdF9zdHIiLCBvcHRpb25hbD1UcnVlKSwKICAgICAgICAgICAgICAgICJib29sZWFuIjogSW5wdXQodHlwZT0iYm9vbGVhbiIsIGRlZmF1bHQ9RmFsc2UsIG9wdGlvbmFsPVRydWUpLAogICAgICAgICAgICAgICAgInVyaV9mb2xkZXIiOiBJbnB1dCh0eXBlPSJ1cmlfZm9sZGVyIiksCiAgICAgICAgICAgICAgICAib3B0aW9uYWxfMCI6IElucHV0KHR5cGU9InVyaV9maWxlIiwgb3B0aW9uYWw9VHJ1ZSksCiAgICAgICAgICAgICAgICAib3B0aW9uYWxfMSI6IElucHV0KHR5cGU9Im51bWJlciIsIG9wdGlvbmFsPVRydWUpLAogICAgICAgICAgICAgICAgIm9wdGlvbmFsXzIiOiBJbnB1dCh0eXBlPSJudW1iZXIiLCBvcHRpb25hbD1UcnVlLCBkZWZhdWx0PTEuMiksCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG91dHB1dHM9eyJjb21wb25lbnRfb3V0X3BhdGgiOiBPdXRwdXQodHlwZT0idXJpX2ZvbGRlciIpfSwKICAgICAgICApCgogICAgICAgIGNvbXBvbmVudCA9IGNsaWVudC5jb21wb25lbnRzLmNyZWF0ZV9vcl91cGRhdGUoY29tbWFuZF9mdW5jLmNvbXBvbmVudCkKICAgICAgICBhc3NlcnQgY29tcG9uZW50IGFuZCBjb21wb25lbnQudmVyc2lvbiA9PSAiMSIKCiAgICAgICAgQGRzbC5waXBlbGluZSgKICAgICAgICAgICAgbmFtZT1mInRlc3Rfb3B0aW9uYWxfaW5wdXRfY29tcG9uZW50X3BpcGVsaW5lXyIgKyByYW5kc3RyKCJwaXBlbGluZV9uYW1lIiksCiAgICAgICAgICAgIGRlc2NyaXB0aW9uPSJUaGUgY29tbWFuZCBub2RlIHdpdGggb3B0aW9uYWwgaW5wdXRzIiwKICAgICAgICAgICAgdGFncz17Im93bmVyIjogInNka3RlYW0iLCAidGFnIjogInRhZ3ZhbHVlIn0sCiAgICAgICAgICAgIGNvbXB1dGU9ImNwdS1jbHVzdGVyIiwKICAgICAgICApCiAgICAgICAgZGVmIHNhbXBsZV9waXBlbGluZShqb2JfaW5fZmlsZSk6CiAgICAgICAgICAgIG5vZGUxID0gaGVsbG9fd29ybGRfY29tcG9uZW50X2Z1bmMoY29tcG9uZW50X2luX3BhdGg9am9iX2luX2ZpbGUpCiAgICAgICAgICAgIG5vZGUyID0gY29tbWFuZF9mdW5jKHVyaV9mb2xkZXI9bm9kZTEub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgpCgogICAgICAgICAgICByZXR1cm4geyJwaXBlbGluZV9vdXRwdXQiOiBub2RlMi5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aH0KCiAgICAgICAgcGlwZWxpbmUgPSBzYW1wbGVfcGlwZWxpbmUoCiAgICAgICAgICAgIElucHV0KHR5cGU9InVyaV9maWxlIiwgcGF0aD0iaHR0cHM6Ly9kcHJlcGRhdGEuYmxvYi5jb3JlLndpbmRvd3MubmV0L2RlbW8vVGl0YW5pYy5jc3YiKQogICAgICAgICkKICAgICAgICBwaXBlbGluZV9qb2IgPSBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKHBpcGVsaW5lKQoKICAgICAgICBhY3R1YWxfam9iID0gb21pdF93aXRoX3dpbGRjYXJkKHBpcGVsaW5lX2pvYi5fdG9fcmVzdF9vYmplY3QoKS5wcm9wZXJ0aWVzLmFzX2RpY3QoKSwgKmNvbW1vbl9vbWl0X2ZpZWxkcykKICAgICAgICBleHBlY3RlZF9qb2IgPSB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgY29tbWFuZCBub2RlIHdpdGggb3B0aW9uYWwgaW5wdXRzIiwKICAgICAgICAgICAgInRhZ3MiOiB7Im93bmVyIjogInNka3RlYW0iLCAidGFnIjogInRhZ3ZhbHVlIn0sCiAgICAgICAgICAgICJjb21wdXRlX2lkIjogImNwdS1jbHVzdGVyIiwKICAgICAgICAgICAgImlzX2FyY2hpdmVkIjogRmFsc2UsCiAgICAgICAgICAgICJqb2JfdHlwZSI6ICJQaXBlbGluZSIsCiAgICAgICAgICAgICJpbnB1dHMiOiB7CiAgICAgICAgICAgICAgICAiam9iX2luX2ZpbGUiOiB7CiAgICAgICAgICAgICAgICAgICAgIm1vZGUiOiAiUmVhZE9ubHlNb3VudCIsCiAgICAgICAgICAgICAgICAgICAgImpvYl9pbnB1dF90eXBlIjogInVyaV9maWxlIiwKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImpvYnMiOiB7CiAgICAgICAgICAgICAgICAibm9kZTEiOiB7CiAgICAgICAgICAgICAgICAgICAgImlucHV0cyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImNvbXBvbmVudF9pbl9wYXRoIjogeyJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwgInZhbHVlIjogIiR7e3BhcmVudC5pbnB1dHMuam9iX2luX2ZpbGV9fSJ9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJub2RlMSIsCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiY29tbWFuZCIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgIm5vZGUyIjogewogICAgICAgICAgICAgICAgICAgICJkaXNwbGF5X25hbWUiOiAiY29tbWFuZF93aXRoX29wdGlvbmFsX2lucHV0cyIsCiAgICAgICAgICAgICAgICAgICAgImRpc3RyaWJ1dGlvbiI6IHsiZGlzdHJpYnV0aW9uX3R5cGUiOiAiUHlUb3JjaCIsICJwcm9jZXNzX2NvdW50X3Blcl9pbnN0YW5jZSI6IDJ9LAogICAgICAgICAgICAgICAgICAgICJlbnZpcm9ubWVudF92YXJpYWJsZXMiOiB7ImVudmlyb24iOiAidmFsIn0sCiAgICAgICAgICAgICAgICAgICAgImlucHV0cyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgInVyaV9mb2xkZXIiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiJHt7cGFyZW50LmpvYnMubm9kZTEub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGh9fSIsCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJuYW1lIjogIm5vZGUyIiwKICAgICAgICAgICAgICAgICAgICAib3V0cHV0cyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImNvbXBvbmVudF9vdXRfcGF0aCI6IHsidHlwZSI6ICJsaXRlcmFsIiwgInZhbHVlIjogIiR7e3BhcmVudC5vdXRwdXRzLnBpcGVsaW5lX291dHB1dH19In0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJyZXNvdXJjZXMiOiB7Imluc3RhbmNlX2NvdW50IjogMn0sCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiY29tbWFuZCIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICB9LAogICAgICAgICAgICAib3V0cHV0cyI6IHsicGlwZWxpbmVfb3V0cHV0IjogeyJtb2RlIjogIlJlYWRXcml0ZU1vdW50IiwgImpvYl9vdXRwdXRfdHlwZSI6ICJ1cmlfZm9sZGVyIn19LAogICAgICAgICAgICAic2V0dGluZ3MiOiB7fSwKICAgICAgICB9CiAgICAgICAgYXNzZXJ0IGV4cGVjdGVkX2pvYiA9PSBhY3R1YWxfam9iCgogICAgZGVmIHRlc3Rfc3Bhcmtfd2l0aF9vcHRpb25hbF9pbnB1dHMoc2VsZiwgcmFuZHN0cjogQ2FsbGFibGVbW3N0cl0sIHN0cl0sIGNsaWVudDogTUxDbGllbnQpOgogICAgICAgIGNvbXBvbmVudF95YW1sID0gIi4vdGVzdHMvdGVzdF9jb25maWdzL2RzbF9waXBlbGluZS9zcGFya19qb2JfaW5fcGlwZWxpbmUvY29tcG9uZW50X3dpdGhfb3B0aW9uYWxfaW5wdXRzLnltbCIKICAgICAgICBzcGFya193aXRoX29wdGlvbmFsX2lucHV0c19jb21wb25lbnRfZnVuYyA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1jb21wb25lbnRfeWFtbCkKCiAgICAgICAgQGRzbC5waXBlbGluZSgKICAgICAgICAgICAgbmFtZT1mInRlc3Rfb3B0aW9uYWxfaW5wdXRfY29tcG9uZW50X3BpcGVsaW5lXyIgKyByYW5kc3RyKCJwaXBlbGluZV9uYW1lIiksCiAgICAgICAgICAgIGRlc2NyaXB0aW9uPSJUaGUgc3Bhcmsgbm9kZSB3aXRoIG9wdGlvbmFsIGlucHV0cyIsCiAgICAgICAgICAgIHRhZ3M9eyJvd25lciI6ICJzZGt0ZWFtIiwgInRhZyI6ICJ0YWd2YWx1ZSJ9LAogICAgICAgICkKICAgICAgICBkZWYgc2FtcGxlX3BpcGVsaW5lKGpvYl9pbl9maWxlLCBzYW1wbGVfcmF0ZSk6CiAgICAgICAgICAgIG5vZGUxID0gc3Bhcmtfd2l0aF9vcHRpb25hbF9pbnB1dHNfY29tcG9uZW50X2Z1bmMoaW5wdXQxPWpvYl9pbl9maWxlLCBzYW1wbGVfcmF0ZT1zYW1wbGVfcmF0ZSkKICAgICAgICAgICAgbm9kZTEucmVzb3VyY2VzID0geyJpbnN0YW5jZV90eXBlIjogInN0YW5kYXJkX2U0c192MyIsICJydW50aW1lX3ZlcnNpb24iOiAiMy4yLjAifQogICAgICAgICAgICByZXR1cm4geyJwaXBlbGluZV9vdXRwdXQiOiBub2RlMS5vdXRwdXRzLm91dHB1dDF9CgogICAgICAgIHBpcGVsaW5lID0gc2FtcGxlX3BpcGVsaW5lKAogICAgICAgICAgICBqb2JfaW5fZmlsZT1JbnB1dCgKICAgICAgICAgICAgICAgIHBhdGg9Ii4vdGVzdHMvdGVzdF9jb25maWdzL2RzbF9waXBlbGluZS9zcGFya19qb2JfaW5fcGlwZWxpbmUvZGF0YXNldC9zaGFrZXNwZWFyZS50eHQiLAogICAgICAgICAgICAgICAgdHlwZT1Bc3NldFR5cGVzLlVSSV9GSUxFLAogICAgICAgICAgICAgICAgbW9kZT1JbnB1dE91dHB1dE1vZGVzLkRJUkVDVCwKICAgICAgICAgICAgKSwKICAgICAgICAgICAgc2FtcGxlX3JhdGU9MC4wMSwKICAgICAgICApCiAgICAgICAgcGlwZWxpbmUub3V0cHV0cy5waXBlbGluZV9vdXRwdXQubW9kZSA9IElucHV0T3V0cHV0TW9kZXMuRElSRUNUCiAgICAgICAgcGlwZWxpbmVfam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSkKCiAgICAgICAgYWN0dWFsX2pvYiA9IG9taXRfd2l0aF93aWxkY2FyZChwaXBlbGluZV9qb2IuX3RvX3Jlc3Rfb2JqZWN0KCkucHJvcGVydGllcy5hc19kaWN0KCksICpjb21tb25fb21pdF9maWVsZHMpCiAgICAgICAgZXhwZWN0ZWRfam9iID0gewogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHNwYXJrIG5vZGUgd2l0aCBvcHRpb25hbCBpbnB1dHMiLAogICAgICAgICAgICAidGFncyI6IHsib3duZXIiOiAic2RrdGVhbSIsICJ0YWciOiAidGFndmFsdWUifSwKICAgICAgICAgICAgImlzX2FyY2hpdmVkIjogRmFsc2UsCiAgICAgICAgICAgICJqb2JfdHlwZSI6ICJQaXBlbGluZSIsCiAgICAgICAgICAgICJpbnB1dHMiOiB7CiAgICAgICAgICAgICAgICAiam9iX2luX2ZpbGUiOiB7ImpvYl9pbnB1dF90eXBlIjogInVyaV9maWxlIiwgIm1vZGUiOiAiRGlyZWN0In0sCiAgICAgICAgICAgICAgICAic2FtcGxlX3JhdGUiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAiMC4wMSJ9LAogICAgICAgICAgICB9LAogICAgICAgICAgICAiam9icyI6IHsKICAgICAgICAgICAgICAgICJub2RlMSI6IHsKICAgICAgICAgICAgICAgICAgICAiYXJncyI6ICItLWlucHV0MSAke3tpbnB1dHMuaW5wdXQxfX0gLS1vdXRwdXQyICIKICAgICAgICAgICAgICAgICAgICAiJHt7b3V0cHV0cy5vdXRwdXQxfX0gLS1teV9zYW1wbGVfcmF0ZSAiCiAgICAgICAgICAgICAgICAgICAgIiR7e2lucHV0cy5zYW1wbGVfcmF0ZX19ICRbWy0taW5wdXRfb3B0aW9uYWwgIgogICAgICAgICAgICAgICAgICAgICIke3tpbnB1dHMuaW5wdXRfb3B0aW9uYWx9fV1dIiwKICAgICAgICAgICAgICAgICAgICAiY29uZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgInNwYXJrLmRyaXZlci5jb3JlcyI6IDEsCiAgICAgICAgICAgICAgICAgICAgICAgICJzcGFyay5kcml2ZXIubWVtb3J5IjogIjJnIiwKICAgICAgICAgICAgICAgICAgICAgICAgInNwYXJrLmR5bmFtaWNBbGxvY2F0aW9uLmVuYWJsZWQiOiBUcnVlLAogICAgICAgICAgICAgICAgICAgICAgICAic3BhcmsuZHluYW1pY0FsbG9jYXRpb24ubWF4RXhlY3V0b3JzIjogNCwKICAgICAgICAgICAgICAgICAgICAgICAgInNwYXJrLmR5bmFtaWNBbGxvY2F0aW9uLm1pbkV4ZWN1dG9ycyI6IDEsCiAgICAgICAgICAgICAgICAgICAgICAgICJzcGFyay5leGVjdXRvci5jb3JlcyI6IDIsCiAgICAgICAgICAgICAgICAgICAgICAgICJzcGFyay5leGVjdXRvci5pbnN0YW5jZXMiOiAxLAogICAgICAgICAgICAgICAgICAgICAgICAic3BhcmsuZXhlY3V0b3IubWVtb3J5IjogIjJnIiwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJlbnRyeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImZpbGUiOiAic2FtcGxld29yZF93aXRoX29wdGlvbmFsX2lucHV0LnB5IiwKICAgICAgICAgICAgICAgICAgICAgICAgInNwYXJrX2pvYl9lbnRyeV90eXBlIjogIlNwYXJrSm9iUHl0aG9uRW50cnkiLAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImlkZW50aXR5IjogeyJpZGVudGl0eV90eXBlIjogIlVzZXJJZGVudGl0eSJ9LAogICAgICAgICAgICAgICAgICAgICJpbnB1dHMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJpbnB1dDEiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAiJHt7cGFyZW50LmlucHV0cy5qb2JfaW5fZmlsZX19In0sCiAgICAgICAgICAgICAgICAgICAgICAgICJzYW1wbGVfcmF0ZSI6IHsiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsICJ2YWx1ZSI6ICIke3twYXJlbnQuaW5wdXRzLnNhbXBsZV9yYXRlfX0ifSwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJuYW1lIjogIm5vZGUxIiwKICAgICAgICAgICAgICAgICAgICAib3V0cHV0cyI6IHsib3V0cHV0MSI6IHsidHlwZSI6ICJsaXRlcmFsIiwgInZhbHVlIjogIiR7e3BhcmVudC5vdXRwdXRzLnBpcGVsaW5lX291dHB1dH19In19LAogICAgICAgICAgICAgICAgICAgICJyZXNvdXJjZXMiOiB7Imluc3RhbmNlX3R5cGUiOiAic3RhbmRhcmRfZTRzX3YzIiwgInJ1bnRpbWVfdmVyc2lvbiI6ICIzLjIuMCJ9LAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInNwYXJrIiwKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgIm91dHB1dHMiOiB7InBpcGVsaW5lX291dHB1dCI6IHsibW9kZSI6ICJEaXJlY3QiLCAiam9iX291dHB1dF90eXBlIjogInVyaV9maWxlIn19LAogICAgICAgICAgICAic2V0dGluZ3MiOiB7fSwKICAgICAgICB9CiAgICAgICAgYXNzZXJ0IGV4cGVjdGVkX2pvYiA9PSBhY3R1YWxfam9iCgogICAgZGVmIHRlc3RfY29tbWFuZF9ieV9wYXNzKHNlbGYsIHJhbmRzdHI6IENhbGxhYmxlW1tzdHJdLCBzdHJdLCBjbGllbnQ6IE1MQ2xpZW50KToKICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfeWFtbCA9IHN0cihjb21wb25lbnRzX2RpciAvICJoZWxsb3dvcmxkX2NvbXBvbmVudC55bWwiKQogICAgICAgIGNvbXBvbmVudF9mdW5jID0gbG9hZF9jb21wb25lbnQoc291cmNlPWhlbGxvX3dvcmxkX2NvbXBvbmVudF95YW1sKQogICAgICAgICMgdXBkYXRlIGNvbXBvbmVudCBkaXNwbGF5IG5hbWUgdG8gd29yayBhcm91bmQgc2FtZSBjb21wb25lbnQgcmVnaXN0ZXIgbXVsdGlwbGUgdGltZSBpc3N1ZQogICAgICAgIGNvbXBvbmVudF9mdW5jLmRpc3BsYXlfbmFtZSA9ICJ0ZXN0X2NvbW1hbmRfYnlfcGFzcyIKCiAgICAgICAgQGRzbC5waXBlbGluZSgKICAgICAgICAgICAgbmFtZT1yYW5kc3RyKCJwaXBlbGluZV9uYW1lIiksCiAgICAgICAgICAgIGRlc2NyaXB0aW9uPSJUaGUgaGVsbG8gd29ybGQgcGlwZWxpbmUgam9iIiwKICAgICAgICAgICAgdGFncz17Im93bmVyIjogInNka3RlYW0iLCAidGFnIjogInRhZ3ZhbHVlIn0sCiAgICAgICAgICAgIGRlZmF1bHRfY29tcHV0ZT0iY3B1LWNsdXN0ZXIiLAogICAgICAgICAgICBleHBlcmltZW50X25hbWU9ZXhwZXJpbWVudF9uYW1lLAogICAgICAgICAgICBjb250aW51ZV9vbl9zdGVwX2ZhaWx1cmU9VHJ1ZSwKICAgICAgICApCiAgICAgICAgZGVmIHBpcGVsaW5lKGpvYl9pbl9udW1iZXIsIGpvYl9pbl9vdGhlcl9udW1iZXIsIGpvYl9pbl9wYXRoKToKICAgICAgICAgICAgIyBkeW5hbWljIGZpZWxkcyB3aWxsIHBhc3MgdGhyb3VnaCB0byBiYWNrZW5kCiAgICAgICAgICAgIG5vZGUxID0gY29tcG9uZW50X2Z1bmMoY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5fcGF0aCkKICAgICAgICAgICAgbm9kZTEubmV3X2ZpZWxkID0gInZhbCIKICAgICAgICAgICAgbm9kZTIgPSBjb21wb25lbnRfZnVuYyhjb21wb25lbnRfaW5fbnVtYmVyPWpvYl9pbl9vdGhlcl9udW1iZXIsIGNvbXBvbmVudF9pbl9wYXRoPWpvYl9pbl9wYXRoKQogICAgICAgICAgICBub2RlMi5uZXdfZmllbGQgPSB7fQoKICAgICAgICBwaXBlbGluZSA9IHBpcGVsaW5lKDEwLCAyMCwgam9iX2lucHV0KQogICAgICAgIHBpcGVsaW5lX2pvYiA9IGNsaWVudC5qb2JzLmNyZWF0ZV9vcl91cGRhdGUoCiAgICAgICAgICAgIHBpcGVsaW5lLAogICAgICAgICAgICBleHBlcmltZW50X25hbWU9ImRzbF9leHAiLAogICAgICAgICkKICAgICAgICBwaXBlbGluZV9qb2Iuc2V0dGluZ3MuZm9yY2VfcmVydW4gPSBGYWxzZQogICAgICAgIGFjdHVhbF9qb2IgPSBvbWl0X3dpdGhfd2lsZGNhcmQocGlwZWxpbmVfam9iLl90b19yZXN0X29iamVjdCgpLnByb3BlcnRpZXMuYXNfZGljdCgpLCAqY29tbW9uX29taXRfZmllbGRzKQogICAgICAgIGV4cGVjdGVkX2pvYiA9IHsKICAgICAgICAgICAgInRhZ3MiOiB7Im93bmVyIjogInNka3RlYW0iLCAidGFnIjogInRhZ3ZhbHVlIn0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgaGVsbG8gd29ybGQgcGlwZWxpbmUgam9iIiwKICAgICAgICAgICAgImlzX2FyY2hpdmVkIjogRmFsc2UsCiAgICAgICAgICAgICJqb2JfdHlwZSI6ICJQaXBlbGluZSIsCiAgICAgICAgICAgICJpbnB1dHMiOiB7CiAgICAgICAgICAgICAgICAiam9iX2luX251bWJlciI6IHsiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsICJ2YWx1ZSI6ICIxMCJ9LAogICAgICAgICAgICAgICAgImpvYl9pbl9vdGhlcl9udW1iZXIiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAiMjAifSwKICAgICAgICAgICAgICAgICJqb2JfaW5fcGF0aCI6IHsKICAgICAgICAgICAgICAgICAgICAibW9kZSI6ICJSZWFkT25seU1vdW50IiwKICAgICAgICAgICAgICAgICAgICAiam9iX2lucHV0X3R5cGUiOiAidXJpX2ZpbGUiLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImpvYnMiOiB7CiAgICAgICAgICAgICAgICAibm9kZTEiOiB7CiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiY29tbWFuZCIsCiAgICAgICAgICAgICAgICAgICAgImlucHV0cyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImNvbXBvbmVudF9pbl9udW1iZXIiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiJHt7cGFyZW50LmlucHV0cy5qb2JfaW5fbnVtYmVyfX0iLAogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAiY29tcG9uZW50X2luX3BhdGgiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAiJHt7cGFyZW50LmlucHV0cy5qb2JfaW5fcGF0aH19In0sCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJub2RlMSIsCiAgICAgICAgICAgICAgICAgICAgIm5ld19maWVsZCI6ICJ2YWwiLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJub2RlMiI6IHsKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJjb21tYW5kIiwKICAgICAgICAgICAgICAgICAgICAiaW5wdXRzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiY29tcG9uZW50X2luX251bWJlciI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIke3twYXJlbnQuaW5wdXRzLmpvYl9pbl9vdGhlcl9udW1iZXJ9fSIsCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJjb21wb25lbnRfaW5fcGF0aCI6IHsiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsICJ2YWx1ZSI6ICIke3twYXJlbnQuaW5wdXRzLmpvYl9pbl9wYXRofX0ifSwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJuYW1lIjogIm5vZGUyIiwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJvdXRwdXRzIjoge30sCiAgICAgICAgICAgICJzZXR0aW5ncyI6IHsKICAgICAgICAgICAgICAgICJjb250aW51ZV9vbl9zdGVwX2ZhaWx1cmUiOiBUcnVlLAogICAgICAgICAgICAgICAgImZvcmNlX3JlcnVuIjogRmFsc2UsCiAgICAgICAgICAgICAgICAiZGVmYXVsdF9jb21wdXRlIjogImNwdS1jbHVzdGVyIiwKICAgICAgICAgICAgfSwKICAgICAgICB9CiAgICAgICAgYXNzZXJ0IGV4cGVjdGVkX2pvYiA9PSBhY3R1YWxfam9iCgogICAgZGVmIHRlc3RfcGlwZWxpbmVfcGFyYW1ldGVyX3dpdGhfZGVmYXVsdF92YWx1ZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGlucHV0X3R5cGVzX2Z1bmMgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9c3RyKGNvbXBvbmVudHNfZGlyIC8gImlucHV0X3R5cGVzX2NvbXBvbmVudC55bWwiKSkKCiAgICAgICAgIyBDb25zdHJ1Y3QgcGlwZWxpbmUKICAgICAgICBAZHNsLnBpcGVsaW5lKAogICAgICAgICAgICBkZWZhdWx0X2NvbXB1dGU9ImNwdS1jbHVzdGVyIiwKICAgICAgICAgICAgZGVzY3JpcHRpb249IlRoaXMgaXMgdGhlIGJhc2ljIHBpcGVsaW5lIHdpdGggc2V2ZXJhbCBpbnB1dCB0eXBlcyIsCiAgICAgICAgKQogICAgICAgIGRlZiBpbnB1dF90eXBlc19waXBlbGluZSgKICAgICAgICAgICAgY29tcG9uZW50X2luX3N0cmluZz0iY29tcG9uZW50X2luX3N0cmluZyIsCiAgICAgICAgICAgIGNvbXBvbmVudF9pbl9yYW5nZWRfaW50ZWdlcj0xMCwKICAgICAgICAgICAgY29tcG9uZW50X2luX2VudW09IndvcmxkIiwKICAgICAgICAgICAgY29tcG9uZW50X2luX2Jvb2xlYW49VHJ1ZSwKICAgICAgICAgICAgY29tcG9uZW50X2luX3JhbmdlZF9udW1iZXI9OCwKICAgICAgICApOgogICAgICAgICAgICBpbnB1dF90eXBlc19mdW5jKAogICAgICAgICAgICAgICAgY29tcG9uZW50X2luX3N0cmluZz1jb21wb25lbnRfaW5fc3RyaW5nLAogICAgICAgICAgICAgICAgY29tcG9uZW50X2luX3JhbmdlZF9pbnRlZ2VyPWNvbXBvbmVudF9pbl9yYW5nZWRfaW50ZWdlciwKICAgICAgICAgICAgICAgIGNvbXBvbmVudF9pbl9lbnVtPWNvbXBvbmVudF9pbl9lbnVtLAogICAgICAgICAgICAgICAgY29tcG9uZW50X2luX2Jvb2xlYW49Y29tcG9uZW50X2luX2Jvb2xlYW4sCiAgICAgICAgICAgICAgICBjb21wb25lbnRfaW5fcmFuZ2VkX251bWJlcj1jb21wb25lbnRfaW5fcmFuZ2VkX251bWJlciwKICAgICAgICAgICAgKQoKICAgICAgICBwaXBlbGluZSA9IGlucHV0X3R5cGVzX3BpcGVsaW5lKCkgICMgdXNlIGRlZmF1bHQgcGlwZWxpbmUgcGFyYW1ldGVyCiAgICAgICAgcGlwZWxpbmVfam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSwgZXhwZXJpbWVudF9uYW1lPSJpbnB1dF90eXBlc19waXBlbGluZSIpCgogICAgICAgIGFzc2VydCBwaXBlbGluZV9qb2IuaW5wdXRzLmNvbXBvbmVudF9pbl9zdHJpbmcuX2RhdGEgPT0gImNvbXBvbmVudF9pbl9zdHJpbmciCiAgICAgICAgYXNzZXJ0IHBpcGVsaW5lX2pvYi5pbnB1dHMuY29tcG9uZW50X2luX3JhbmdlZF9pbnRlZ2VyLl9kYXRhID09ICIxMCIKICAgICAgICBhc3NlcnQgcGlwZWxpbmVfam9iLmlucHV0cy5jb21wb25lbnRfaW5fZW51bS5fZGF0YSA9PSAid29ybGQiCiAgICAgICAgYXNzZXJ0IHBpcGVsaW5lX2pvYi5pbnB1dHMuY29tcG9uZW50X2luX2Jvb2xlYW4uX2RhdGEgPT0gIlRydWUiCiAgICAgICAgYXNzZXJ0IHBpcGVsaW5lX2pvYi5pbnB1dHMuY29tcG9uZW50X2luX3JhbmdlZF9udW1iZXIuX2RhdGEgPT0gIjgiCgogICAgZGVmIHRlc3RfY29tcG9uZW50X3dpdGhfZGVmYXVsdF9vcHRpb25hbF9pbnB1dChzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGRlZmF1bHRfb3B0aW9uYWxfZnVuYyA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1zdHIoY29tcG9uZW50c19kaXIgLyAiZGVmYXVsdF9vcHRpb25hbF9jb21wb25lbnQueW1sIikpCgogICAgICAgICMgQ29uc3RydWN0IHBpcGVsaW5lCiAgICAgICAgQGRzbC5waXBlbGluZSgKICAgICAgICAgICAgZGVmYXVsdF9jb21wdXRlPSJjcHUtY2x1c3RlciIsCiAgICAgICAgICAgIGRlc2NyaXB0aW9uPSJUaGlzIGlzIHRoZSBiYXNpYyBwaXBlbGluZSB3aXRoIHNldmVyYWwgaW5wdXQgdHlwZXMiLAogICAgICAgICkKICAgICAgICBkZWYgZGVmYXVsdF9vcHRpb25hbF9waXBlbGluZSgpOgogICAgICAgICAgICBkZWZhdWx0X29wdGlvbmFsX2Z1bmMoCiAgICAgICAgICAgICAgICByZXF1aXJlZF9wYXJhbT0iZGVmIiwKICAgICAgICAgICAgICAgIHJlcXVpcmVkX2lucHV0PUlucHV0KHR5cGU9InVyaV9maWxlIiwgcGF0aD0iaHR0cHM6Ly9kcHJlcGRhdGEuYmxvYi5jb3JlLndpbmRvd3MubmV0L2RlbW8vVGl0YW5pYy5jc3YiKSwKICAgICAgICAgICAgKQogICAgICAgICAgICBkZWZhdWx0X29wdGlvbmFsX2Z1bmMoCiAgICAgICAgICAgICAgICByZXF1aXJlZF9wYXJhbT0iZGVmIiwKICAgICAgICAgICAgICAgIHJlcXVpcmVkX2lucHV0PUlucHV0KHR5cGU9InVyaV9maWxlIiwgcGF0aD0iaHR0cHM6Ly9kcHJlcGRhdGEuYmxvYi5jb3JlLndpbmRvd3MubmV0L2RlbW8vVGl0YW5pYy5jc3YiKSwKICAgICAgICAgICAgICAgIG9wdGlvbmFsX2lucHV0PU5vbmUsCiAgICAgICAgICAgICAgICByZXF1aXJlZF9wYXJhbV93aXRoX2RlZmF1bHQ9Tm9uZSwKICAgICAgICAgICAgICAgIG9wdGlvbmFsX3BhcmFtPU5vbmUsCiAgICAgICAgICAgICAgICBvcHRpb25hbF9wYXJhbV93aXRoX2RlZmF1bHQ9Tm9uZSwKICAgICAgICAgICAgKQoKICAgICAgICBwaXBlbGluZSA9IGRlZmF1bHRfb3B0aW9uYWxfcGlwZWxpbmUoKSAgIyB1c2UgZGVmYXVsdCBwaXBlbGluZSBwYXJhbWV0ZXIKICAgICAgICBwaXBlbGluZV9qb2IgPSBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKHBpcGVsaW5lLCBleHBlcmltZW50X25hbWU9ImRlZmF1bHRfb3B0aW9uYWxfcGlwZWxpbmUiKQoKICAgICAgICAjIG9ubHkgdGhlIHR3byByZXF1aXJlZCBpbnB1dCBleGlzdHMKICAgICAgICBhc3NlcnQgbGVuKHBpcGVsaW5lX2pvYi5qb2JzWyJkZWZhdWx0X29wdGlvbmFsX2NvbXBvbmVudCJdLmlucHV0cykgPT0gMgogICAgICAgICMgVE9ETzogb3B0aW9uYWxfcGFyYW1fd2l0aF9kZWZhdWx0IHNob3VsZCBhbHNvIGV4aXN0cwogICAgICAgIGFzc2VydCBsZW4ocGlwZWxpbmVfam9iLmpvYnNbImRlZmF1bHRfb3B0aW9uYWxfY29tcG9uZW50XzEiXS5pbnB1dHMpID09IDIKCiAgICBkZWYgdGVzdF9waXBlbGluZV93aXRoX25vbmVfcGFyYW1ldGVyX2hhc19kZWZhdWx0X29wdGlvbmFsX2ZhbHNlKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgZGVmYXVsdF9vcHRpb25hbF9mdW5jID0gbG9hZF9jb21wb25lbnQoc291cmNlPXN0cihjb21wb25lbnRzX2RpciAvICJkZWZhdWx0X29wdGlvbmFsX2NvbXBvbmVudC55bWwiKSkKCiAgICAgICAgIyBOb25lIGlucHV0IGlzIGJpbmRpbmcgdG8gYSByZXF1aXJlZCBpbnB1dAogICAgICAgIEBkc2wucGlwZWxpbmUoCiAgICAgICAgICAgIGRlZmF1bHRfY29tcHV0ZT0iY3B1LWNsdXN0ZXIiLAogICAgICAgICkKICAgICAgICBkZWYgcGlwZWxpbmVfd2l0aF9kZWZhdWx0X29wdGlvbmFsX3BhcmFtZXRlcnMoCiAgICAgICAgICAgIHJlcXVpcmVkX2lucHV0LAogICAgICAgICAgICByZXF1aXJlZF9wYXJhbSwKICAgICAgICAgICAgcmVxdWlyZWRfcGFyYW1fd2l0aF9kZWZhdWx0LAogICAgICAgICk6CiAgICAgICAgICAgIGRlZmF1bHRfb3B0aW9uYWxfZnVuYygKICAgICAgICAgICAgICAgIHJlcXVpcmVkX2lucHV0PXJlcXVpcmVkX2lucHV0LAogICAgICAgICAgICAgICAgcmVxdWlyZWRfcGFyYW09cmVxdWlyZWRfcGFyYW0sCiAgICAgICAgICAgICAgICByZXF1aXJlZF9wYXJhbV93aXRoX2RlZmF1bHQ9cmVxdWlyZWRfcGFyYW1fd2l0aF9kZWZhdWx0LAogICAgICAgICAgICApCgogICAgICAgIHBpcGVsaW5lID0gcGlwZWxpbmVfd2l0aF9kZWZhdWx0X29wdGlvbmFsX3BhcmFtZXRlcnMoCiAgICAgICAgICAgIHJlcXVpcmVkX2lucHV0PUlucHV0KHR5cGU9InVyaV9maWxlIiwgcGF0aD0iaHR0cHM6Ly9kcHJlcGRhdGEuYmxvYi5jb3JlLndpbmRvd3MubmV0L2RlbW8vVGl0YW5pYy5jc3YiKSwKICAgICAgICAgICAgcmVxdWlyZWRfcGFyYW09ImhlbGxvIiwKICAgICAgICAgICAgcmVxdWlyZWRfcGFyYW1fd2l0aF9kZWZhdWx0PU5vbmUsCiAgICAgICAgKQogICAgICAgIHZhbGlkYXRlX3Jlc3VsdCA9IHBpcGVsaW5lLl92YWxpZGF0ZSgpCiAgICAgICAgYXNzZXJ0IHZhbGlkYXRlX3Jlc3VsdC5lcnJvcl9tZXNzYWdlcyA9PSB7CiAgICAgICAgICAgICJpbnB1dHMucmVxdWlyZWRfcGFyYW1fd2l0aF9kZWZhdWx0IjogIlJlcXVpcmVkIGlucHV0ICdyZXF1aXJlZF9wYXJhbV93aXRoX2RlZmF1bHQnIGZvciBwaXBlbGluZSAncGlwZWxpbmVfd2l0aF9kZWZhdWx0X29wdGlvbmFsX3BhcmFtZXRlcnMnIG5vdCBwcm92aWRlZC4iCiAgICAgICAgfQoKICAgICAgICAjIE5vbmUgaW5wdXQgaXMgbm90IGJpbmRpbmcgdG8gYSByZXF1aXJlZCBpbnB1dAogICAgICAgIEBkc2wucGlwZWxpbmUoCiAgICAgICAgICAgIGRlZmF1bHRfY29tcHV0ZT0iY3B1LWNsdXN0ZXIiLAogICAgICAgICkKICAgICAgICBkZWYgcGlwZWxpbmVfd2l0aF9kZWZhdWx0X29wdGlvbmFsX3BhcmFtZXRlcnMoCiAgICAgICAgICAgIHJlcXVpcmVkX2lucHV0LAogICAgICAgICAgICByZXF1aXJlZF9wYXJhbSwKICAgICAgICApOgogICAgICAgICAgICBkZWZhdWx0X29wdGlvbmFsX2Z1bmMoCiAgICAgICAgICAgICAgICByZXF1aXJlZF9pbnB1dD1yZXF1aXJlZF9pbnB1dCwKICAgICAgICAgICAgICAgIHJlcXVpcmVkX3BhcmFtPXJlcXVpcmVkX3BhcmFtLAogICAgICAgICAgICAgICAgcmVxdWlyZWRfcGFyYW1fd2l0aF9kZWZhdWx0PU5vbmUsCiAgICAgICAgICAgICkKCiAgICAgICAgcGlwZWxpbmUgPSBwaXBlbGluZV93aXRoX2RlZmF1bHRfb3B0aW9uYWxfcGFyYW1ldGVycygKICAgICAgICAgICAgcmVxdWlyZWRfaW5wdXQ9SW5wdXQodHlwZT0idXJpX2ZpbGUiLCBwYXRoPSJodHRwczovL2RwcmVwZGF0YS5ibG9iLmNvcmUud2luZG93cy5uZXQvZGVtby9UaXRhbmljLmNzdiIpLAogICAgICAgICAgICByZXF1aXJlZF9wYXJhbT0iaGVsbG8iLAogICAgICAgICkKICAgICAgICBwaXBlbGluZV9qb2IgPSBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKHBpcGVsaW5lLCBleHBlcmltZW50X25hbWU9ImRlZmF1bHRfb3B0aW9uYWxfcGlwZWxpbmUiKQoKICAgICAgICAjIG9ubHkgdGhlIHR3byByZXF1aXJlZCBpbnB1dHMgZXhpc3RzCiAgICAgICAgYXNzZXJ0IGxlbihuZXh0KHBpcGVsaW5lX2pvYi5qb2JzLnZhbHVlcygpLl9faXRlcl9fKCkpLmlucHV0cykgPT0gMgogICAgICAgIHZhbGlkYXRlX3Jlc3VsdCA9IHBpcGVsaW5lLl92YWxpZGF0ZSgpCiAgICAgICAgYXNzZXJ0IHZhbGlkYXRlX3Jlc3VsdC5wYXNzZWQgaXMgVHJ1ZQoKICAgICAgICAjIE5vdCBwYXNzIHJlcXVpcmVkIHBhcmFtZXRlciB3aXRoIGRlZmF1bHQgdmFsdWUKICAgICAgICBAZHNsLnBpcGVsaW5lKAogICAgICAgICAgICBkZWZhdWx0X2NvbXB1dGU9ImNwdS1jbHVzdGVyIiwKICAgICAgICApCiAgICAgICAgZGVmIHBpcGVsaW5lX3dpdGhfZGVmYXVsdF9vcHRpb25hbF9wYXJhbWV0ZXJzKAogICAgICAgICAgICByZXF1aXJlZF9pbnB1dCwKICAgICAgICAgICAgcmVxdWlyZWRfcGFyYW0sCiAgICAgICAgKToKICAgICAgICAgICAgZGVmYXVsdF9vcHRpb25hbF9mdW5jKAogICAgICAgICAgICAgICAgcmVxdWlyZWRfaW5wdXQ9cmVxdWlyZWRfaW5wdXQsCiAgICAgICAgICAgICAgICByZXF1aXJlZF9wYXJhbT1yZXF1aXJlZF9wYXJhbSwKICAgICAgICAgICAgKQoKICAgICAgICBwaXBlbGluZSA9IHBpcGVsaW5lX3dpdGhfZGVmYXVsdF9vcHRpb25hbF9wYXJhbWV0ZXJzKAogICAgICAgICAgICByZXF1aXJlZF9pbnB1dD1JbnB1dCh0eXBlPSJ1cmlfZmlsZSIsIHBhdGg9Imh0dHBzOi8vZHByZXBkYXRhLmJsb2IuY29yZS53aW5kb3dzLm5ldC9kZW1vL1RpdGFuaWMuY3N2IiksCiAgICAgICAgICAgIHJlcXVpcmVkX3BhcmFtPSJoZWxsbyIsCiAgICAgICAgKQogICAgICAgIHBpcGVsaW5lX2pvYiA9IGNsaWVudC5qb2JzLmNyZWF0ZV9vcl91cGRhdGUocGlwZWxpbmUsIGV4cGVyaW1lbnRfbmFtZT0iZGVmYXVsdF9vcHRpb25hbF9waXBlbGluZSIpCiAgICAgICAgIyBvbmx5IHRoZSB0d28gcmVxdWlyZWQgaW5wdXQgZXhpc3RzCiAgICAgICAgYXNzZXJ0IGxlbihuZXh0KHBpcGVsaW5lX2pvYi5qb2JzLnZhbHVlcygpLl9faXRlcl9fKCkpLmlucHV0cykgPT0gMgogICAgICAgIHZhbGlkYXRlX3Jlc3VsdCA9IHBpcGVsaW5lLl92YWxpZGF0ZSgpCiAgICAgICAgYXNzZXJ0IHZhbGlkYXRlX3Jlc3VsdC5wYXNzZWQgaXMgVHJ1ZQoKICAgIGRlZiB0ZXN0X3BpcGVsaW5lX3dpdGhfbm9uZV9wYXJhbWV0ZXJfbm9fZGVmYXVsdF9vcHRpb25hbF90cnVlKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\\u002BIE5vbmU6CiAgICAgICAgcGF0aCA9ICIuL3Rlc3RzL3Rlc3RfY29uZmlncy9jb21wb25lbnRzL2hlbGxvd29ybGRfY29tcG9uZW50LnltbCIKICAgICAgICBjb21wb25lbnRfZnVuYzEgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9cGF0aCkKCiAgICAgICAgQGRzbC5waXBlbGluZSgpCiAgICAgICAgZGVmIHBpcGVsaW5lKGNvbXBvbmVudF9pbl9udW1iZXIsIGNvbXBvbmVudF9pbl9wYXRoKToKICAgICAgICAgICAgbm9kZTEgPSBjb21wb25lbnRfZnVuYzEoY29tcG9uZW50X2luX251bWJlcj1jb21wb25lbnRfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1jb21wb25lbnRfaW5fcGF0aCkKICAgICAgICAgICAgbm9kZTIgPSBjb21wb25lbnRfZnVuYzEoY29tcG9uZW50X2luX251bWJlcj1jb21wb25lbnRfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1jb21wb25lbnRfaW5fcGF0aCkKCiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMiA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1wYXRoKQogICAgICAgICAgICBub2RlMyA9IGNvbXBvbmVudF9mdW5jMihjb21wb25lbnRfaW5fbnVtYmVyPWNvbXBvbmVudF9pbl9udW1iZXIsIGNvbXBvbmVudF9pbl9wYXRoPWNvbXBvbmVudF9pbl9wYXRoKQoKICAgICAgICAgICAgbm9kZTEuY29tcHV0ZSA9ICJjcHUtY2x1c3RlciIKICAgICAgICAgICAgbm9kZTIuY29tcHV0ZSA9ICJjcHUtY2x1c3RlciIKICAgICAgICAgICAgbm9kZTMuY29tcHV0ZSA9ICJjcHUtY2x1c3RlciIKCiAgICAgICAgcGlwZWxpbmUxID0gcGlwZWxpbmUoMTAsIGpvYl9pbnB1dCkKCiAgICAgICAgcGlwZWxpbmUxID0gY2xpZW50LmNyZWF0ZV9vcl91cGRhdGUocGlwZWxpbmUxKQoKICAgICAgICBjb21wb25lbnRfaWRzID0gc2V0KCkKICAgICAgICBmb3IgXywgam9iIGluIHBpcGVsaW5lMS5qb2JzLml0ZW1zKCk6CiAgICAgICAgICAgIGNvbXBvbmVudF9pZCA9IGpvYi5jb21wb25lbnQKICAgICAgICAgICAgY29tcG9uZW50X2lkcy5hZGQoY29tcG9uZW50X2lkKQoKICAgICAgICBhc3NlcnQgbGVuKGNvbXBvbmVudF9pZHMpID09IDEsIGYiR290IG11bHRpcGxlIGNvbXBvbmVudCBpZDoge2NvbXBvbmVudF9pZHN9IGZvciBzYW1lIGFub24gY29tcG9uZW50LiIKCiAgICBAcHl0ZXN0Lm1hcmsuZGlzYWJsZV9tb2NrX2NvZGVfaGFzaAogICAgQHB5dGVzdC5tYXJrLnNraXBpZihjb25kaXRpb249bm90IGlzX2xpdmUoKSwgcmVhc29uPSJyZXVzZSB0ZXN0LCB0YXJnZXQgdG8gdmVyaWZ5IHNlcnZpY2Utc2lkZSBiZWhhdmlvciIpCiAgICBkZWYgdGVzdF9waXBlbGluZV9yZXVzZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50LCByYW5kc3RyOiBDYWxsYWJsZVtbc3RyXSwgc3RyXSwgcmFuZGludDogQ2FsbGFibGUpIC0\u002BIE5vbmU6CiAgICAgICAgY29tcG9uZW50X3lhbWwgPSBjb21wb25lbnRzX2RpciAvICJoZWxsb3dvcmxkX2NvbXBvbmVudC55bWwiCiAgICAgICAgY29tcG9uZW50X2Z1bmMxID0gbG9hZF9jb21wb25lbnQoc291cmNlPWNvbXBvbmVudF95YW1sLCBwYXJhbXNfb3ZlcnJpZGU9W3sibmFtZSI6IHJhbmRzdHIoImNvbXBvbmVudF9uYW1lIil9XSkKICAgICAgICBjb21wb25lbnRfZnVuYzIgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9Y29tcG9uZW50X3lhbWwsIHBhcmFtc19vdmVycmlkZT1beyJuYW1lIjogcmFuZHN0cigiY29tcG9uZW50X25hbWUiKX1dKQoKICAgICAgICBAZHNsLnBpcGVsaW5lKAogICAgICAgICAgICBuYW1lPXJhbmRzdHIoInBpcGVsaW5lX25hbWUiKSwKICAgICAgICAgICAgZGVzY3JpcHRpb249IlRoZSBoZWxsbyB3b3JsZCBwaXBlbGluZSBqb2IiLAogICAgICAgICAgICB0YWdzPXsib3duZXIiOiAic2RrdGVhbSIsICJ0YWciOiAidGFndmFsdWUifSwKICAgICAgICAgICAgY29tcHV0ZT0iY3B1LWNsdXN0ZXIiLAogICAgICAgICAgICBleHBlcmltZW50X25hbWU9ZXhwZXJpbWVudF9uYW1lLAogICAgICAgICAgICBjb250aW51ZV9ydW5fb25fc3RlcF9mYWlsdXJlPVRydWUsCiAgICAgICAgKQogICAgICAgIGRlZiBwaXBlbGluZShqb2JfaW5fbnVtYmVyLCBqb2JfaW5fb3RoZXJfbnVtYmVyLCBqb2JfaW5fcGF0aCk6CiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMShjb21wb25lbnRfaW5fbnVtYmVyPWpvYl9pbl9udW1iZXIsIGNvbXBvbmVudF9pbl9wYXRoPWpvYl9pbl9wYXRoKQogICAgICAgICAgICBjb21wb25lbnRfZnVuYzIoY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fb3RoZXJfbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5fcGF0aCkKCiAgICAgICAgaW5wdXRfbnVtYmVyID0gcmFuZGludCgpCiAgICAgICAgcGlwZWxpbmUgPSBwaXBlbGluZShpbnB1dF9udW1iZXIsIGlucHV0X251bWJlciwgam9iX2lucHV0KQogICAgICAgIGpvYiA9IGNsaWVudC5qb2JzLmNyZWF0ZV9vcl91cGRhdGUocGlwZWxpbmUpCiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgc2xlZXBfaWZfbGl2ZSgzMCkKICAgICAgICAgICAgY2hpbGRyZW4gPSBjbGllbnQuam9icy5saXN0KHBhcmVudF9qb2JfbmFtZT1qb2IubmFtZSkKICAgICAgICAgICAgY2hpbGRyZW4gPSBsaXN0KGNoaWxkcmVuKQogICAgICAgICAgICBpZiBsZW4oY2hpbGRyZW4pID09IDI6CiAgICAgICAgICAgICAgICBicmVhawoKICAgICAgICBhc3NlcnQgbGVuKGNoaWxkcmVuKSA9PSAyCiAgICAgICAgY2hpbGQwLCBjaGlsZDEgPSBjaGlsZHJlbgogICAgICAgICMgY2hpbGRyZW4gc2VxdWVuY2UgaXMgbm90IGd1YXJhbnRlZWQsIHNvIHdlIG5lZWQgdG8gY2hlY2sgYm90aAogICAgICAgIGlmIFBpcGVsaW5lQ29uc3RhbnRzLlJFVVNFRF9GTEFHX0ZJRUxEIGluIGNoaWxkMC5wcm9wZXJ0aWVzLmtleXMoKToKICAgICAgICAgICAgYXNzZXJ0IGNoaWxkMC5wcm9wZXJ0aWVzW1BpcGVsaW5lQ29uc3RhbnRzLlJFVVNFRF9GTEFHX0ZJRUxEXSA9PSBQaXBlbGluZUNvbnN0YW50cy5SRVVTRURfRkxBR19UUlVFCiAgICAgICAgZWxpZiBQaXBlbGluZUNvbnN0YW50cy5SRVVTRURfRkxBR19GSUVMRCBpbiBjaGlsZDEucHJvcGVydGllcy5rZXlzKCk6CiAgICAgICAgICAgIGFzc2VydCBjaGlsZDEucHJvcGVydGllc1tQaXBlbGluZUNvbnN0YW50cy5SRVVTRURfRkxBR19GSUVMRF0gPT0gUGlwZWxpbmVDb25zdGFudHMuUkVVU0VEX0ZMQUdfVFJVRQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGFzc2VydCBGYWxzZSwgIk5laXRoZXIgY2hpbGQgcmV1c2VzLiIKCiAgICBkZWYgdGVzdF9waXBlbGluZV93aXRoX2NvbXBvbmVudF9pbnB1dF9uYW1lX2Nhc2Uoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfZnVuYyA9IGxvYWRfY29tcG9uZW50KAogICAgICAgICAgICBzb3VyY2U9c3RyKGNvbXBvbmVudHNfZGlyIC8gImhlbGxvd29ybGRfY29tcG9uZW50X3dpdGhfdXBwZXJjYXNlX2lucHV0LnltbCIpCiAgICAgICAgKQoKICAgICAgICAjIGlucHV0IG5hbWUgaXMgdGhlIHNhbWUgd2l0aCB5YW1sIGRlZmluaXRpb24KICAgICAgICBAZHNsLnBpcGVsaW5lKGRlZmF1bHRfY29tcHV0ZT0iY3B1LWNsdXN0ZXIiKQogICAgICAgIGRlZiBoZWxsb193b3JsZF9waXBlbGluZShjb21wb25lbnRfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aCk6CiAgICAgICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudF9mdW5jKGNvbXBvbmVudF9Jbl9udW1iZXI9Y29tcG9uZW50X2luX251bWJlciwgY29tcG9uZW50X2luX3BhdGg9Y29tcG9uZW50X2luX3BhdGgpCgogICAgICAgIHBpcGVsaW5lID0gaGVsbG9fd29ybGRfcGlwZWxpbmUoY29tcG9uZW50X2luX251bWJlcj0xMCwgY29tcG9uZW50X2luX3BhdGg9am9iX2lucHV0KQogICAgICAgIHBpcGVsaW5lX2pvYiA9IGNsaWVudC5qb2JzLmNyZWF0ZV9vcl91cGRhdGUocGlwZWxpbmUsIGV4cGVyaW1lbnRfbmFtZT1leHBlcmltZW50X25hbWUpCiAgICAgICAgYXNzZXJ0ICJjb21wb25lbnRfSW5fbnVtYmVyIiBpbiBuZXh0KHBpcGVsaW5lX2pvYi5qb2JzLnZhbHVlcygpLl9faXRlcl9fKCkpLmlucHV0cwoKICAgICAgICAjIGlucHV0IG5hbWUgaXMgbG93ZXIgY2FzZQogICAgICAgIEBkc2wucGlwZWxpbmUoZGVmYXVsdF9jb21wdXRlPSJjcHUtY2x1c3RlciIpCiAgICAgICAgZGVmIGhlbGxvX3dvcmxkX3BpcGVsaW5lKGNvbXBvbmVudF9pbl9udW1iZXIsIGNvbXBvbmVudF9pbl9wYXRoKToKICAgICAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X2Z1bmMoY29tcG9uZW50X2luX251bWJlcj1jb21wb25lbnRfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1jb21wb25lbnRfaW5fcGF0aCkKCiAgICAgICAgcGlwZWxpbmUgPSBoZWxsb193b3JsZF9waXBlbGluZShjb21wb25lbnRfaW5fbnVtYmVyPTEwLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5wdXQpCiAgICAgICAgcGlwZWxpbmVfam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSwgZXhwZXJpbWVudF9uYW1lPWV4cGVyaW1lbnRfbmFtZSkKICAgICAgICBhc3NlcnQgImNvbXBvbmVudF9Jbl9udW1iZXIiIGluIG5leHQocGlwZWxpbmVfam9iLmpvYnMudmFsdWVzKCkuX19pdGVyX18oKSkuaW5wdXRzCgogICAgICAgICMgaW5wdXQgbmFtZSBpcyBlcXVhbCB0byB5YW1sIGRlZmluaXRpb24gaW5wdXQgaWYgYm90aCBjaGFuZ2UgdG8gbG93ZXIgY2FzZQogICAgICAgIEBkc2wucGlwZWxpbmUoZGVmYXVsdF9jb21wdXRlPSJjcHUtY2x1c3RlciIpCiAgICAgICAgZGVmIGhlbGxvX3dvcmxkX3BpcGVsaW5lKGNvbXBvbmVudF9pbl9udW1iZXIsIGNvbXBvbmVudF9pbl9wYXRoKToKICAgICAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X2Z1bmMoY29tcG9uZW50X0luX051bWJlcj1jb21wb25lbnRfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1jb21wb25lbnRfaW5fcGF0aCkKCiAgICAgICAgcGlwZWxpbmUgPSBoZWxsb193b3JsZF9waXBlbGluZShjb21wb25lbnRfaW5fbnVtYmVyPTEwLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5wdXQpCiAgICAgICAgcGlwZWxpbmVfam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSwgZXhwZXJpbWVudF9uYW1lPWV4cGVyaW1lbnRfbmFtZSkKICAgICAgICBhc3NlcnQgImNvbXBvbmVudF9Jbl9udW1iZXIiIGluIG5leHQocGlwZWxpbmVfam9iLmpvYnMudmFsdWVzKCkuX19pdGVyX18oKSkuaW5wdXRzCgogICAgICAgICMgdHdvIGlkZW50aWNhbCBpbnB1dCBhcmUgZ2l2ZW4gaWYgaWdub3JlIGNhc2UKICAgICAgICBAZHNsLnBpcGVsaW5lKGRlZmF1bHRfY29tcHV0ZT0iY3B1LWNsdXN0ZXIiKQogICAgICAgIGRlZiBoZWxsb193b3JsZF9waXBlbGluZShjb21wb25lbnRfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aCk6CiAgICAgICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudF9mdW5jKGNvbXBvbmVudF9Jbl9udW1iZXI9Y29tcG9uZW50X2luX251bWJlciwgY29tcG9uZW50X2luX251bWJlcj1jb21wb25lbnRfaW5fcGF0aCkKCiAgICAgICAgd2l0aCBweXRlc3QucmFpc2VzKFZhbGlkYXRpb25FeGNlcHRpb24pIGFzIGV4OgogICAgICAgICAgICBoZWxsb193b3JsZF9waXBlbGluZShjb21wb25lbnRfaW5fbnVtYmVyPTEwLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5wdXQpCiAgICAgICAgYXNzZXJ0ICgKICAgICAgICAgICAgIkludmFsaWQgY29tcG9uZW50IGlucHV0IG5hbWVzICdjb21wb25lbnRfaW5fbnVtYmVyJyBhbmQgJ2NvbXBvbmVudF9Jbl9udW1iZXInLCB3aGljaCBhcmUgZXF1YWwiCiAgICAgICAgICAgIGluIGV4LnZhbHVlLm1lc3NhZ2UKICAgICAgICApCgogICAgZGVmIHRlc3RfcGlwZWxpbmVfam9iX2hlbHBfZnVuY3Rpb24oc2VsZiwgY2xpZW50OiBNTENsaWVudCk6CiAgICAgICAgeWFtbF9maWxlID0gIi4vdGVzdHMvdGVzdF9jb25maWdzL2NvbXBvbmVudHMvaGVsbG93b3JsZF9jb21wb25lbnQueW1sIgoKICAgICAgICBAZHNsLnBpcGVsaW5lKGRlZmF1bHRfY29tcHV0ZT0iY3B1LWNsdXN0ZXIiKQogICAgICAgIGRlZiBwaXBlbGluZShudW1iZXIsIHBhdGgpOgogICAgICAgICAgICBjb21wb25lbnRfZnVuYyA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT15YW1sX2ZpbGUpCiAgICAgICAgICAgIG5vZGUxID0gY29tcG9uZW50X2Z1bmMoY29tcG9uZW50X2luX251bWJlcj1udW1iZXIsIGNvbXBvbmVudF9pbl9wYXRoPXBhdGgpCiAgICAgICAgICAgIHJldHVybiB7InBpcGVsaW5lX291dHB1dCI6IG5vZGUxLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRofQoKICAgICAgICBwaXBlbGluZTEgPSBwaXBlbGluZSgxMCwgam9iX2lucHV0KQogICAgICAgIHBpcGVsaW5lMSA9IGNsaWVudC5jcmVhdGVfb3JfdXBkYXRlKHBpcGVsaW5lMSkKICAgICAgICB3aXRoIHBhdGNoKCJzeXMuc3Rkb3V0IiwgbmV3PVN0cmluZ0lPKCkpIGFzIHN0ZF9vdXQ6CiAgICAgICAgICAgIHByaW50KHBpcGVsaW5lMSkKICAgICAgICAgICAgYXNzZXJ0ICgKICAgICAgICAgICAgICAgICJkaXNwbGF5X25hbWU6IHBpcGVsaW5lXG50eXBlOiBwaXBlbGluZVxuaW5wdXRzOlxuICBudW1iZXI6ICcxMCdcbiAgcGF0aDpcbiAgICBtb2RlOiByb19tb3VudFxuICAgIHR5cGU6IHVyaV9maWxlXG4gICAgcGF0aDoiCiAgICAgICAgICAgICAgICBpbiBzdGRfb3V0LmdldHZhbHVlKCkKICAgICAgICAgICAgKQoKICAgIGRlZiB0ZXN0X25vZGVfcHJvcGVydHlfc2V0dGluZ192YWxpZGF0aW9uKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgcGF0aCA9ICIuL3Rlc3RzL3Rlc3RfY29uZmlncy9jb21wb25lbnRzL2hlbGxvd29ybGRfY29tcG9uZW50LnltbCIKICAgICAgICBjb21wb25lbnRfZnVuYzEgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9cGF0aCkKCiAgICAgICAgQGRzbC5waXBlbGluZSgpCiAgICAgICAgZGVmIHBpcGVsaW5lKGNvbXBvbmVudF9pbl9udW1iZXIsIGNvbXBvbmVudF9pbl9wYXRoKToKICAgICAgICAgICAgbm9kZTEgPSBjb21wb25lbnRfZnVuYzEoY29tcG9uZW50X2luX251bWJlcj1jb21wb25lbnRfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1jb21wb25lbnRfaW5fcGF0aCkKICAgICAgICAgICAgbm9kZTEuamVmZl9zcGVjaWFsX29wdGlvbi5mb28gPSAiYmFyIgogICAgICAgICAgICBub2RlMS5jb21wdXRlID0gImNwdS1jbHVzdGVyIgoKICAgICAgICBkc2xfcGlwZWxpbmU6IFBpcGVsaW5lSm9iID0gcGlwZWxpbmUoMTAsIGpvYl9pbnB1dCkKICAgICAgICB3aXRoIHBhdGNoKCJhenVyZS5haS5tbC5lbnRpdGllcy5fdmFsaWRhdGlvbi5tb2R1bGVfbG9nZ2VyLmluZm8iKSBhcyBtb2NrX2xvZ2dpbmc6CiAgICAgICAgICAgIF8gPSBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKGRzbF9waXBlbGluZSkKICAgICAgICAgICAgbW9ja19sb2dnaW5nLmFzc2VydF9jYWxsZWRfd2l0aCgiV2FybmluZ3M6IFtqb2JzLm5vZGUxLmplZmZfc3BlY2lhbF9vcHRpb246IFVua25vd24gZmllbGQuXSIpCgogICAgZGVmIHRlc3RfYW5vbl9jb21wb25lbnRfaW5fcGlwZWxpbmUoCiAgICAgICAgc2VsZiwgY2xpZW50OiBNTENsaWVudCwgcmFuZHN0cjogQ2FsbGFibGVbW3N0cl0sIHN0cl0sIGhlbGxvX3dvcmxkX2NvbXBvbmVudDogQ29tcG9uZW50CiAgICApIC0\u002BIE5vbmU6CiAgICAgICAgaGVsbG9fd29ybGRfZnVuYyA9IGxvYWRfY29tcG9uZW50KAogICAgICAgICAgICBjbGllbnQ9Y2xpZW50LCBuYW1lPWhlbGxvX3dvcmxkX2NvbXBvbmVudC5uYW1lLCB2ZXJzaW9uPWhlbGxvX3dvcmxkX2NvbXBvbmVudC52ZXJzaW9uCiAgICAgICAgKQogICAgICAgIG9yaWdpbl9pZCA9IGhlbGxvX3dvcmxkX2Z1bmMuaWQKICAgICAgICBtcGlfZnVuYyA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1zdHIoY29tcG9uZW50c19kaXIgLyAiaGVsbG93b3JsZF9jb21wb25lbnRfbXBpLnltbCIpKQogICAgICAgIGFzc2VydCBtcGlfZnVuYy5fdmFsaWRhdGUoKS5wYXNzZWQKCiAgICAgICAgaW52YWxpZF9jb21wb25lbnRfbmFtZSA9ICJfaW52YWxpZCIKCiAgICAgICAgIyBuYW1lIG9mIGFub255bW91cyBjb21wb25lbnQgaW4gcGlwZWxpbmUgam9iIHNob3VsZCBiZSBvdmVyd3JpdHRlbgogICAgICAgIG1waV9mdW5jLm5hbWUgPSBpbnZhbGlkX2NvbXBvbmVudF9uYW1lCiAgICAgICAgYXNzZXJ0IG5vdCBtcGlfZnVuYy5fdmFsaWRhdGUoKS5wYXNzZWQKCiAgICAgICAgQGRzbC5waXBlbGluZSgKICAgICAgICAgICAgbmFtZT1yYW5kc3RyKCJwaXBlbGluZV9uYW1lIiksCiAgICAgICAgICAgIGRlc2NyaXB0aW9uPSJUaGUgaGVsbG8gd29ybGQgcGlwZWxpbmUgam9iIiwKICAgICAgICAgICAgdGFncz17Im93bmVyIjogInNka3RlYW0iLCAidGFnIjogInRhZ3ZhbHVlIn0sCiAgICAgICAgICAgIGNvbXB1dGU9ImdwdS1jbHVzdGVyIiwKICAgICAgICAgICAgZXhwZXJpbWVudF9uYW1lPWV4cGVyaW1lbnRfbmFtZSwKICAgICAgICAgICAgY29udGludWVfb25fc3RlcF9mYWlsdXJlPUZhbHNlLAogICAgICAgICkKICAgICAgICBkZWYgcGlwZWxpbmVfZGlzdHJpYnV0aW9uX2NvbXBvbmVudHMoam9iX2luX251bWJlciwgam9iX2luX3BhdGgpOgogICAgICAgICAgICBoZWxsb3dvcmxkX2NvbXBvbmVudCA9IGhlbGxvX3dvcmxkX2Z1bmMoY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5fcGF0aCkKICAgICAgICAgICAgaGVsbG93b3JsZF9jb21wb25lbnQub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGggPSBPdXRwdXQoZGF0YXNldD1EYXRhKG5hbWU9Im1sZGVzaWduZXJfY29tcG9uZW50X291dHB1dCIpKQogICAgICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfbXBpID0gbXBpX2Z1bmMoY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5fcGF0aCkKICAgICAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X21waS5kaXN0cmlidXRpb24gPSBNcGlEaXN0cmlidXRpb24oKQogICAgICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfbXBpLmRpc3RyaWJ1dGlvbi5wcm9jZXNzX2NvdW50X3Blcl9pbnN0YW5jZSA9IDIKCiAgICAgICAgcGlwZWxpbmU6IFBpcGVsaW5lSm9iID0gcGlwZWxpbmVfZGlzdHJpYnV0aW9uX2NvbXBvbmVudHMoMTAsIGpvYl9pbnB1dCkKICAgICAgICBhc3NlcnQgbXBpX2Z1bmMuX2lzX2Fub255bW91cyBpcyBGYWxzZQogICAgICAgIGFzc2VydCBwaXBlbGluZS5zZXR0aW5ncy5jb250aW51ZV9vbl9zdGVwX2ZhaWx1cmUgaXMgRmFsc2UKICAgICAgICBjcmVhdGVkX2pvYjogUGlwZWxpbmVKb2IgPSBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKAogICAgICAgICAgICBwaXBlbGluZSwgZXhwZXJpbWVudF9uYW1lPWV4cGVyaW1lbnRfbmFtZSwgY29udGludWVfb25fc3RlcF9mYWlsdXJlPVRydWUKICAgICAgICApCiAgICAgICAgIyBUaGVvcmV0aWNhbGx5LCB3ZSBzaG91bGQga2VlcCB0aGUgaW52YWxpZCBuYW1lIGluIHJlcXVlc3QgYm9keSwKICAgICAgICAjIGFzIGNvbXBvbmVudCBuYW1lIHZhbGlkIGluIGF6dXJlbWwtY29tcG9uZW50cyBtYXliZSBpbnZhbGlkIGluIGF6dXJlLWFpLW1sLgogICAgICAgICMgU28gd2UgbGVhdmUgdGhpcyB2YWxpZGF0aW9uIHRvIHNlcnZlci1zaWRlIGZvciBub3cuCiAgICAgICAgYXNzZXJ0IG1waV9mdW5jLl90b19yZXN0X29iamVjdCgpLnByb3BlcnRpZXMuY29tcG9uZW50X3NwZWNbIm5hbWUiXSA9PSBpbnZhbGlkX2NvbXBvbmVudF9uYW1lCgogICAgICAgICMgY29udGludWVfb25fc3RlcF9mYWlsdXJlIGNhbid0IGJlIHNldCBpbiBjcmVhdGVfb3JfdXBkYXRlCiAgICAgICAgYXNzZXJ0IGNyZWF0ZWRfam9iLnNldHRpbmdzLmNvbnRpbnVlX29uX3N0ZXBfZmFpbHVyZSBpcyBGYWxzZQogICAgICAgIGFzc2VydCBjcmVhdGVkX2pvYi5qb2JzWyJoZWxsb193b3JsZF9jb21wb25lbnRfbXBpIl0uY29tcG9uZW50LnN0YXJ0c3dpdGgoQU5PTllNT1VTX0NPTVBPTkVOVF9OQU1FKQogICAgICAgIGFzc2VydCBjcmVhdGVkX2pvYi5qb2JzWyJoZWxsb3dvcmxkX2NvbXBvbmVudCJdLmNvbXBvbmVudCA9PSAibWljcm9zb2Z0c2FtcGxlc19jb21tYW5kX2NvbXBvbmVudF9iYXNpYzowLjAuMSIKICAgICAgICBhc3NlcnQgaGVsbG9fd29ybGRfZnVuYy5faXNfYW5vbnltb3VzIGlzIEZhbHNlCiAgICAgICAgYXNzZXJ0IG9yaWdpbl9pZCA9PSBoZWxsb193b3JsZF9mdW5jLmlkCgogICAgZGVmIHRlc3RfcGlwZWxpbmVfZm9yY2VfcmVydW4oc2VsZiwgY2xpZW50OiBNTENsaWVudCwgcmFuZHN0cjogQ2FsbGFibGVbW3N0cl0sIHN0cl0pIC0\u002BIE5vbmU6CiAgICAgICAgY29tcG9uZW50X3lhbWwgPSBjb21wb25lbnRzX2RpciAvICJoZWxsb3dvcmxkX2NvbXBvbmVudC55bWwiCiAgICAgICAgY29tcG9uZW50X2Z1bmMxID0gbG9hZF9jb21wb25lbnQoc291cmNlPWNvbXBvbmVudF95YW1sLCBwYXJhbXNfb3ZlcnJpZGU9W3sibmFtZSI6IHJhbmRzdHIoImNvbXBvbmVudF9uYW1lIil9XSkKICAgICAgICBjb21wb25lbnRfZnVuYzIgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9Y29tcG9uZW50X3lhbWwsIHBhcmFtc19vdmVycmlkZT1beyJuYW1lIjogcmFuZHN0cigiY29tcG9uZW50X25hbWUiKX1dKQoKICAgICAgICBAZHNsLnBpcGVsaW5lKAogICAgICAgICAgICBuYW1lPXJhbmRzdHIoInBpcGVsaW5lX25hbWUiKSwKICAgICAgICAgICAgZGVzY3JpcHRpb249IlRoZSBoZWxsbyB3b3JsZCBwaXBlbGluZSBqb2IiLAogICAgICAgICAgICB0YWdzPXsib3duZXIiOiAic2RrdGVhbSIsICJ0YWciOiAidGFndmFsdWUifSwKICAgICAgICAgICAgY29tcHV0ZT0iY3B1LWNsdXN0ZXIiLAogICAgICAgICAgICBleHBlcmltZW50X25hbWU9ZXhwZXJpbWVudF9uYW1lLAogICAgICAgICAgICBjb250aW51ZV9vbl9zdGVwX2ZhaWx1cmU9VHJ1ZSwKICAgICAgICApCiAgICAgICAgZGVmIHBpcGVsaW5lKGpvYl9pbl9udW1iZXIsIGpvYl9pbl9vdGhlcl9udW1iZXIsIGpvYl9pbl9wYXRoKToKICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMxKGNvbXBvbmVudF9pbl9udW1iZXI9am9iX2luX251bWJlciwgY29tcG9uZW50X2luX3BhdGg9am9iX2luX3BhdGgpCiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMihjb21wb25lbnRfaW5fbnVtYmVyPWpvYl9pbl9vdGhlcl9udW1iZXIsIGNvbXBvbmVudF9pbl9wYXRoPWpvYl9pbl9wYXRoKQoKICAgICAgICBwaXBlbGluZSA9IHBpcGVsaW5lKDEwLCAxNSwgam9iX2lucHV0KQogICAgICAgIGpvYiA9IGNsaWVudC5qb2JzLmNyZWF0ZV9vcl91cGRhdGUocGlwZWxpbmUpCiAgICAgICAgYXNzZXJ0IGpvYi5zZXR0aW5ncy5mb3JjZV9yZXJ1biBpcyBOb25lCgogICAgICAgIEBkc2wucGlwZWxpbmUoCiAgICAgICAgICAgIG5hbWU9cmFuZHN0cigicGlwZWxpbmVfbmFtZSIpLAogICAgICAgICAgICBkZXNjcmlwdGlvbj0iVGhlIGhlbGxvIHdvcmxkIHBpcGVsaW5lIGpvYiIsCiAgICAgICAgICAgIHRhZ3M9eyJvd25lciI6ICJzZGt0ZWFtIiwgInRhZyI6ICJ0YWd2YWx1ZSJ9LAogICAgICAgICAgICBjb21wdXRlPSJjcHUtY2x1c3RlciIsCiAgICAgICAgICAgIGV4cGVyaW1lbnRfbmFtZT1leHBlcmltZW50X25hbWUsCiAgICAgICAgICAgIGNvbnRpbnVlX29uX3N0ZXBfZmFpbHVyZT1UcnVlLAogICAgICAgICAgICBmb3JjZV9yZXJ1bj1UcnVlLAogICAgICAgICkKICAgICAgICBkZWYgcGlwZWxpbmUoam9iX2luX251bWJlciwgam9iX2luX290aGVyX251bWJlciwgam9iX2luX3BhdGgpOgogICAgICAgICAgICBjb21wb25lbnRfZnVuYzEoY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5fcGF0aCkKICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMyKGNvbXBvbmVudF9pbl9udW1iZXI9am9iX2luX290aGVyX251bWJlciwgY29tcG9uZW50X2luX3BhdGg9am9iX2luX3BhdGgpCgogICAgICAgIHBpcGVsaW5lID0gcGlwZWxpbmUoMTAsIDE1LCBqb2JfaW5wdXQpCiAgICAgICAgam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSwgZm9yY2VfcmVydW49VHJ1ZSkKICAgICAgICBhc3NlcnQgam9iLnNldHRpbmdzLmZvcmNlX3JlcnVuIGlzIFRydWUKCiAgICBkZWYgdGVzdF9wYXJhbGxlbF9jb21wb25lbnRzX3dpdGhfdGFidWxhcl9pbnB1dChzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGNvbXBvbmVudHNfZGlyID0gdGVzdHNfcm9vdF9kaXIgLyAidGVzdF9jb25maWdzL2RzbF9waXBlbGluZS9wYXJhbGxlbF9jb21wb25lbnRfd2l0aF90YWJ1bGFyX2lucHV0IgoKICAgICAgICBiYXRjaF9pbmZlcmVuY2UgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9c3RyKGNvbXBvbmVudHNfZGlyIC8gInRhYnVsYXJfaW5wdXRfZTJlLnltbCIpKQoKICAgICAgICAjIENvbnN0cnVjdCBwaXBlbGluZQogICAgICAgIEBkc2wucGlwZWxpbmUoZGVmYXVsdF9jb21wdXRlPSJjcHUtY2x1c3RlciIpCiAgICAgICAgZGVmIHBhcmFsbGVsX2luX3BpcGVsaW5lKGpvYl9kYXRhX3BhdGgsIHNjb3JlX21vZGVsKToKICAgICAgICAgICAgYmF0Y2hfaW5mZXJlbmNlX25vZGUgPSBiYXRjaF9pbmZlcmVuY2Uoam9iX2RhdGFfcGF0aD1qb2JfZGF0YV9wYXRoLCBzY29yZV9tb2RlbD1zY29yZV9tb2RlbCkKICAgICAgICAgICAgYmF0Y2hfaW5mZXJlbmNlX25vZGUubWluaV9iYXRjaF9zaXplID0gNQoKICAgICAgICBwaXBlbGluZSA9IHBhcmFsbGVsX2luX3BpcGVsaW5lKAogICAgICAgICAgICBqb2JfZGF0YV9wYXRoPUlucHV0KAogICAgICAgICAgICAgICAgdHlwZT1Bc3NldFR5cGVzLk1MVEFCTEUsCiAgICAgICAgICAgICAgICBwYXRoPSIuL3Rlc3RzL3Rlc3RfY29uZmlncy9kYXRhc2V0L25ldXJhbC1pcmlzLW1sdGFibGUiLAogICAgICAgICAgICAgICAgbW9kZT1JbnB1dE91dHB1dE1vZGVzLkRJUkVDVCwKICAgICAgICAgICAgKSwKICAgICAgICAgICAgc2NvcmVfbW9kZWw9SW5wdXQoCiAgICAgICAgICAgICAgICBwYXRoPSIuL3Rlc3RzL3Rlc3RfY29uZmlncy9tb2RlbCIsIHR5cGU9QXNzZXRUeXBlcy5VUklfRk9MREVSLCBtb2RlPUlucHV0T3V0cHV0TW9kZXMuRE9XTkxPQUQKICAgICAgICAgICAgKSwKICAgICAgICApCiAgICAgICAgIyBzdWJtaXQgcGlwZWxpbmUgam9iCiAgICAgICAgcGlwZWxpbmVfam9iID0gYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCwgZXhwZXJpbWVudF9uYW1lPSJwYXJhbGxlbF9pbl9waXBlbGluZSIpCgogICAgICAgICMgY2hlY2sgcmVxdWlyZWQgZmllbGRzIGluIGpvYiBkaWN0CiAgICAgICAgam9iX2RpY3QgPSBwaXBlbGluZV9qb2IuX3RvX2RpY3QoKQogICAgICAgIGV4cGVjdGVkX2tleXMgPSBbInN0YXR1cyIsICJwcm9wZXJ0aWVzIiwgImNyZWF0aW9uX2NvbnRleHQiXQogICAgICAgIGZvciBrIGluIGV4cGVjdGVkX2tleXM6CiAgICAgICAgICAgIGFzc2VydCBrIGluIGpvYl9kaWN0LmtleXMoKSwgZiJmYWlsZWQgdG8gZ2V0IHtrfSBpbiB7am9iX2RpY3R9IgoKICAgICAgICAjIG9yaWdpbmFsIGpvYiBkaWQgbm90IGNoYW5nZQogICAgICAgIGFzc2VydF9qb2JfaW5wdXRfb3V0cHV0X3R5cGVzKHBpcGVsaW5lX2pvYikKICAgICAgICBhc3NlcnQgcGlwZWxpbmVfam9iLnNldHRpbmdzLmRlZmF1bHRfY29tcHV0ZSA9PSAiY3B1LWNsdXN0ZXIiCgogICAgZGVmIHRlc3RfcGFyYWxsZWxfY29tcG9uZW50c193aXRoX3RhYnVsYXJfaW5wdXRfYmluZF90b19saXRlcmFsX2lucHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgY29tcG9uZW50c19kaXIgPSB0ZXN0c19yb290X2RpciAvICJ0ZXN0X2NvbmZpZ3MvZHNsX3BpcGVsaW5lL3BhcmFsbGVsX2NvbXBvbmVudF93aXRoX3RhYnVsYXJfaW5wdXQiCgogICAgICAgIGJhdGNoX2luZmVyZW5jZSA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1zdHIoY29tcG9uZW50c19kaXIgLyAidGFidWxhcl9pbnB1dF9lMmUueW1sIikpCgogICAgICAgICMgQ29uc3RydWN0IHBpcGVsaW5lCiAgICAgICAgQGRzbC5waXBlbGluZShkZWZhdWx0X2NvbXB1dGU9ImNwdS1jbHVzdGVyIikKICAgICAgICBkZWYgcGFyYWxsZWxfaW5fcGlwZWxpbmUoam9iX2RhdGFfcGF0aCwgc2NvcmVfbW9kZWwsIGxpdGVyYWxfaW5wdXQpOgogICAgICAgICAgICBiYXRjaF9pbmZlcmVuY2Vfbm9kZSA9IGJhdGNoX2luZmVyZW5jZShqb2JfZGF0YV9wYXRoPWpvYl9kYXRhX3BhdGgsIHNjb3JlX21vZGVsPXNjb3JlX21vZGVsKQogICAgICAgICAgICBiYXRjaF9pbmZlcmVuY2Vfbm9kZS5taW5pX2JhdGNoX3NpemUgPSA1CiAgICAgICAgICAgIGJhdGNoX2luZmVyZW5jZV9ub2RlLm1heF9jb25jdXJyZW5jeV9wZXJfaW5zdGFuY2UgPSBsaXRlcmFsX2lucHV0CiAgICAgICAgICAgIGJhdGNoX2luZmVyZW5jZV9ub2RlLmVycm9yX3RocmVzaG9sZCA9IGxpdGVyYWxfaW5wdXQKICAgICAgICAgICAgYmF0Y2hfaW5mZXJlbmNlX25vZGUubWluaV9iYXRjaF9lcnJvcl90aHJlc2hvbGQgPSBsaXRlcmFsX2lucHV0CgogICAgICAgIHBpcGVsaW5lID0gcGFyYWxsZWxfaW5fcGlwZWxpbmUoCiAgICAgICAgICAgIGpvYl9kYXRhX3BhdGg9SW5wdXQoCiAgICAgICAgICAgICAgICB0eXBlPUFzc2V0VHlwZXMuTUxUQUJMRSwKICAgICAgICAgICAgICAgIHBhdGg9Ii4vdGVzdHMvdGVzdF9jb25maWdzL2RhdGFzZXQvbmV1cmFsLWlyaXMtbWx0YWJsZSIsCiAgICAgICAgICAgICAgICBtb2RlPUlucHV0T3V0cHV0TW9kZXMuRElSRUNULAogICAgICAgICAgICApLAogICAgICAgICAgICBzY29yZV9tb2RlbD1JbnB1dCgKICAgICAgICAgICAgICAgIHBhdGg9Ii4vdGVzdHMvdGVzdF9jb25maWdzL21vZGVsIiwgdHlwZT1Bc3NldFR5cGVzLlVSSV9GT0xERVIsIG1vZGU9SW5wdXRPdXRwdXRNb2Rlcy5ET1dOTE9BRAogICAgICAgICAgICApLAogICAgICAgICAgICBsaXRlcmFsX2lucHV0PTIsCiAgICAgICAgKQogICAgICAgICMgc3VibWl0IHBpcGVsaW5lIGpvYgogICAgICAgIHBpcGVsaW5lX2pvYiA9IGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQsIGV4cGVyaW1lbnRfbmFtZT0icGFyYWxsZWxfaW5fcGlwZWxpbmUiKQoKICAgICAgICAjIGNoZWNrIHJlcXVpcmVkIGZpZWxkcyBpbiBqb2IgZGljdAogICAgICAgIGpvYl9kaWN0ID0gcGlwZWxpbmVfam9iLl90b19kaWN0KCkKICAgICAgICBleHBlY3RlZF9rZXlzID0gWyJzdGF0dXMiLCAicHJvcGVydGllcyIsICJjcmVhdGlvbl9jb250ZXh0Il0KICAgICAgICBmb3IgayBpbiBleHBlY3RlZF9rZXlzOgogICAgICAgICAgICBhc3NlcnQgayBpbiBqb2JfZGljdC5rZXlzKCksIGYiZmFpbGVkIHRvIGdldCB7a30gaW4ge2pvYl9kaWN0fSIKCiAgICAgICAgIyBvcmlnaW5hbCBqb2IgZGlkIG5vdCBjaGFuZ2UKICAgICAgICBhc3NlcnRfam9iX2lucHV0X291dHB1dF90eXBlcyhwaXBlbGluZV9qb2IpCiAgICAgICAgYXNzZXJ0IHBpcGVsaW5lX2pvYi5zZXR0aW5ncy5kZWZhdWx0X2NvbXB1dGUgPT0gImNwdS1jbHVzdGVyIgoKICAgIGRlZiB0ZXN0X3BhcmFsbGVsX2NvbXBvbmVudHNfd2l0aF9maWxlX2lucHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\\\\\",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "I4y4Qh7esHSfKFgWjfBTwA==",
        "Date": "Mon, 24 Apr 2023 03:22:27 GMT",
        "ETag": "\u00220x8DB447321BBFF42\u0022",
        "Last-Modified": "Mon, 24 Apr 2023 03:22:28 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "HBVdcxlkiWE=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://samcw32zcnpjldw.blob.core.windows.net/azureml-blobstore-72e8eff8-148b-4582-a07d-efc79559f19f/LocalUpload/00000000000000000000000000000000/e2etests/__init__.py?comp=metadata",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "0",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.7.13 (Linux-5.15.90.1-microsoft-standard-WSL2-x86_64-with-debian-bookworm-sid)",
        "x-ms-date": "Mon, 24 Apr 2023 03:22:26 GMT",
        "x-ms-meta-name": "fe1b43db-ac61-4d47-8853-9899a880a7d5",
        "x-ms-meta-upload_status": "completed",
        "x-ms-meta-version": "35d467be-ec7d-4a69-ac90-0e6abb08cb30",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Date": "Mon, 24 Apr 2023 03:22:27 GMT",
        "ETag": "\u00220x8DB447321C59AD3\u0022",
        "Last-Modified": "Mon, 24 Apr 2023 03:22:28 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/jobs/000000000000000000000?api-version=2023-04-01-preview",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "2957",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.7.13 (Linux-5.15.90.1-microsoft-standard-WSL2-x86_64-with-debian-bookworm-sid)"
      },
      "RequestBody": {
        "properties": {
          "properties": {},
          "tags": {},
          "displayName": "pipeline_with_do_while",
          "experimentName": "azure-ai-ml",
          "isArchived": false,
          "jobType": "Pipeline",
          "inputs": {
            "component_in_number": {
              "jobInputType": "literal",
              "value": "2"
            },
            "component_in_path": {
              "uri": "azureml://datastores/workspaceblobstore/paths/LocalUpload/00000000000000000000000000000000/e2etests/",
              "jobInputType": "uri_folder"
            }
          },
          "jobs": {
            "do_while_body_pipeline": {
              "name": "do_while_body_pipeline",
              "type": "pipeline",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_path}}"
                }
              },
              "_source": "DSL",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/6840d832-11ef-4d1a-97b1-5f55acfaf9e7"
            },
            "do_while_with_pipeline": {
              "body": "${{parent.jobs.do_while_body_pipeline}}",
              "type": "do_while",
              "condition": "is_number_larger_than_zero",
              "mapping": {
                "${{parent.jobs.do_while_body_pipeline.outputs.output_in_path}}": [
                  "component_in_path"
                ]
              },
              "limits": {
                "max_iteration_count": 5
              },
              "_source": "DSL"
            },
            "command_component": {
              "name": "command_component",
              "type": "command",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_path}}"
                }
              },
              "_source": "YAML.COMPONENT",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/cf16a3af-2aa5-4dfc-955d-350566f92393"
            },
            "do_while_with_command_component": {
              "body": "${{parent.jobs.command_component}}",
              "type": "do_while",
              "condition": "is_number_larger_than_zero",
              "mapping": {
                "output_in_number": [
                  "component_in_number"
                ],
                "${{parent.jobs.command_component.outputs.output_in_path}}": [
                  "component_in_path"
                ]
              },
              "limits": {
                "max_iteration_count": 5
              },
              "_source": "DSL"
            },
            "basic_component": {
              "name": "basic_component",
              "type": "pipeline",
              "inputs": {
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.jobs.command_component.outputs.output_in_path}}"
                }
              },
              "outputs": {
                "output_in_path": {
                  "value": "${{parent.outputs.output_in_path}}",
                  "type": "literal"
                }
              },
              "_source": "DSL",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/6840d832-11ef-4d1a-97b1-5f55acfaf9e7"
            }
          },
          "outputs": {
            "output_in_path": {
              "jobOutputType": "uri_folder"
            }
          },
          "settings": {
            "default_compute": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/computes/cpu-cluster",
            "_source": "DSL"
          }
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "4135",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Mon, 24 Apr 2023 03:22:35 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/jobs/000000000000000000000?api-version=2023-04-01-preview",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-5dc49d82ec0781b15ccf2c9d3f97e065-48777249f884603e-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "3bb19bec-9e46-4a63-99d0-9bfd2d201200",
        "x-ms-ratelimit-remaining-subscription-writes": "1192",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "CANADACENTRAL:20230424T032235Z:3bb19bec-9e46-4a63-99d0-9bfd2d201200",
        "x-request-time": "0.371"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/jobs/000000000000000000000",
        "name": "000000000000000000000",
        "type": "Microsoft.MachineLearningServices/workspaces/jobs",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {},
          "displayName": "pipeline_with_do_while",
          "status": "NotStarted",
          "experimentName": "azure-ai-ml",
          "services": {
            "Tracking": {
              "jobServiceType": "Tracking",
              "port": null,
              "endpoint": "azureml://eastus.api.azureml.ms/mlflow/v1.0/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000?",
              "status": null,
              "errorMessage": null,
              "properties": null,
              "nodes": null
            },
            "Studio": {
              "jobServiceType": "Studio",
              "port": null,
              "endpoint": "https://ml.azure.com/runs/000000000000000000000?wsid=/subscriptions/00000000-0000-0000-0000-000000000/resourcegroups/00000/workspaces/00000",
              "status": null,
              "errorMessage": null,
              "properties": null,
              "nodes": null
            }
          },
          "computeId": null,
          "isArchived": false,
          "identity": null,
          "componentId": null,
          "notificationSetting": null,
          "secretsConfiguration": null,
          "jobType": "Pipeline",
          "settings": {
            "default_compute": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/computes/cpu-cluster",
            "_source": "DSL"
          },
          "jobs": {
            "do_while_body_pipeline": {
              "name": "do_while_body_pipeline",
              "type": "pipeline",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_path}}"
                }
              },
              "_source": "DSL",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/6840d832-11ef-4d1a-97b1-5f55acfaf9e7"
            },
            "do_while_with_pipeline": {
              "body": "${{parent.jobs.do_while_body_pipeline}}",
              "type": "do_while",
              "condition": "is_number_larger_than_zero",
              "mapping": {
                "${{parent.jobs.do_while_body_pipeline.outputs.output_in_path}}": [
                  "component_in_path"
                ]
              },
              "limits": {
                "max_iteration_count": 5
              },
              "_source": "DSL"
            },
            "command_component": {
              "name": "command_component",
              "type": "command",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_path}}"
                }
              },
              "_source": "YAML.COMPONENT",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/cf16a3af-2aa5-4dfc-955d-350566f92393"
            },
            "do_while_with_command_component": {
              "body": "${{parent.jobs.command_component}}",
              "type": "do_while",
              "condition": "is_number_larger_than_zero",
              "mapping": {
                "output_in_number": [
                  "component_in_number"
                ],
                "${{parent.jobs.command_component.outputs.output_in_path}}": [
                  "component_in_path"
                ]
              },
              "limits": {
                "max_iteration_count": 5
              },
              "_source": "DSL"
            },
            "basic_component": {
              "name": "basic_component",
              "type": "pipeline",
              "inputs": {
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.jobs.command_component.outputs.output_in_path}}"
                }
              },
              "outputs": {
                "output_in_path": {
                  "value": "${{parent.outputs.output_in_path}}",
                  "type": "literal"
                }
              },
              "_source": "DSL",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/6840d832-11ef-4d1a-97b1-5f55acfaf9e7"
            }
          },
          "inputs": {
            "component_in_number": {
              "description": null,
              "jobInputType": "literal",
              "value": "2"
            },
            "component_in_path": {
              "description": null,
              "uri": "azureml://datastores/workspaceblobstore/paths/LocalUpload/00000000000000000000000000000000/e2etests/",
              "mode": "ReadOnlyMount",
              "jobInputType": "uri_folder"
            }
          },
          "outputs": {
            "output_in_path": {
              "description": null,
              "uri": null,
              "assetName": null,
              "assetVersion": null,
              "mode": "ReadWriteMount",
              "autoDeleteSetting": null,
              "jobOutputType": "uri_folder"
            }
          },
          "sourceJobId": null
        },
        "systemData": {
          "createdAt": "2023-04-24T03:22:35.7033346\u002B00:00",
          "createdBy": "Firstname Lastname",
          "createdByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/jobs/000000000000000000000/cancel?api-version=2023-04-01-preview",
      "RequestMethod": "POST",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "0",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.7.13 (Linux-5.15.90.1-microsoft-standard-WSL2-x86_64-with-debian-bookworm-sid)"
      },
      "RequestBody": null,
      "StatusCode": 202,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "4",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Mon, 24 Apr 2023 03:22:43 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/eastus/mfeOperationResults/jc:72e8eff8-148b-4582-a07d-efc79559f19f:000000000000000000000?api-version=2023-04-01-preview",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-async-operation-timeout": "PT1H",
        "x-ms-correlation-request-id": "05bb94c5-7099-44f3-8267-a95d835ae064",
        "x-ms-ratelimit-remaining-subscription-writes": "1197",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "CANADACENTRAL:20230424T032244Z:05bb94c5-7099-44f3-8267-a95d835ae064",
        "x-request-time": "0.597"
      },
      "ResponseBody": "null"
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/eastus/mfeOperationResults/jc:72e8eff8-148b-4582-a07d-efc79559f19f:000000000000000000000?api-version=2023-04-01-preview",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "*/*",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.7.13 (Linux-5.15.90.1-microsoft-standard-WSL2-x86_64-with-debian-bookworm-sid)"
      },
      "RequestBody": null,
      "StatusCode": 202,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "2",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Mon, 24 Apr 2023 03:22:44 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/eastus/mfeOperationResults/jc:72e8eff8-148b-4582-a07d-efc79559f19f:000000000000000000000?api-version=2023-04-01-preview",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "97d09528-4dc7-4c78-a0a4-c677ccef3bec",
        "x-ms-ratelimit-remaining-subscription-reads": "11995",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "CANADACENTRAL:20230424T032244Z:97d09528-4dc7-4c78-a0a4-c677ccef3bec",
        "x-request-time": "0.055"
      },
      "ResponseBody": {}
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/eastus/mfeOperationResults/jc:72e8eff8-148b-4582-a07d-efc79559f19f:000000000000000000000?api-version=2023-04-01-preview",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "*/*",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.6.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.7.13 (Linux-5.15.90.1-microsoft-standard-WSL2-x86_64-with-debian-bookworm-sid)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "0",
        "Date": "Mon, 24 Apr 2023 03:23:13 GMT",
        "Expires": "-1",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-c978e74b2adf6a053bd3e69dbad60f1a-8ac5590cfacd3c49-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "ecc022be-0230-4539-87ec-045f9845cdf1",
        "x-ms-ratelimit-remaining-subscription-reads": "11994",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "CANADACENTRAL:20230424T032314Z:ecc022be-0230-4539-87ec-045f9845cdf1",
        "x-request-time": "0.042"
      },
      "ResponseBody": null
    }
  ],
  "Variables": {}
}
