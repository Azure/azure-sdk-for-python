{
  "Entries": [
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94?api-version=2023-04-01-preview",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "379",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": {
        "properties": {
          "isAnonymous": true,
          "isArchived": false,
          "condaFile": "channels:\n- defaults\ndependencies:\n- python=3.8.12\n- pip=21.2.2\n- pip:\n  - --extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\n  - mldesigner==0.0.71974906\n  - mlflow\n  - azureml-mlflow\nname: example-environment\n",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04"
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Build-ID": "ch7",
        "Cache-Control": "no-cache",
        "Content-Length": "1436",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Wed, 24 May 2023 03:02:37 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94?api-version=2023-04-01-preview",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-939a5a65ffc57e189f1a259de2260698-863489d1d4b6c719-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "2c5da76d-f2db-4678-b635-6ce5dbf44e1a",
        "x-ms-ratelimit-remaining-subscription-writes": "1199",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230524T030237Z:2c5da76d-f2db-4678-b635-6ce5dbf44e1a",
        "x-request-time": "10.580"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94",
        "name": "7926e182b294d8644f987381c0081e94",
        "type": "Microsoft.MachineLearningServices/workspaces/environments/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {},
          "isArchived": false,
          "isAnonymous": true,
          "autoDeleteSetting": null,
          "environmentType": "UserCreated",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04",
          "condaFile": "{\n  \u0022channels\u0022: [\n    \u0022defaults\u0022\n  ],\n  \u0022dependencies\u0022: [\n    \u0022python=3.8.12\u0022,\n    \u0022pip=21.2.2\u0022,\n    {\n      \u0022pip\u0022: [\n        \u0022--extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\u0022,\n        \u0022mldesigner==0.0.71974906\u0022,\n        \u0022mlflow\u0022,\n        \u0022azureml-mlflow\u0022\n      ]\n    }\n  ],\n  \u0022name\u0022: \u0022example-environment\u0022\n}",
          "osType": "Linux",
          "autoRebuild": "Disabled",
          "provisioningState": "Succeeded",
          "stage": "Logged",
          "intellectualProperty": null
        },
        "systemData": {
          "createdAt": "2023-05-24T03:02:26.6953544\u002B00:00",
          "createdBy": "Chenyang Zhang",
          "createdByType": "User",
          "lastModifiedAt": "2023-05-24T03:02:26.6953544\u002B00:00",
          "lastModifiedBy": "Chenyang Zhang",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94?api-version=2023-04-01-preview",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "379",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": {
        "properties": {
          "isAnonymous": true,
          "isArchived": false,
          "condaFile": "channels:\n- defaults\ndependencies:\n- python=3.8.12\n- pip=21.2.2\n- pip:\n  - --extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\n  - mldesigner==0.0.71974906\n  - mlflow\n  - azureml-mlflow\nname: example-environment\n",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04"
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Build-ID": "ch7",
        "Cache-Control": "no-cache",
        "Content-Length": "1436",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Wed, 24 May 2023 03:02:37 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94?api-version=2023-04-01-preview",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-24825fc820b43471247ac680268fc7fa-df64db9fecf1e09d-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "19759389-acdd-4263-bb42-05055359bc31",
        "x-ms-ratelimit-remaining-subscription-writes": "1198",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230524T030238Z:19759389-acdd-4263-bb42-05055359bc31",
        "x-request-time": "0.220"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94",
        "name": "7926e182b294d8644f987381c0081e94",
        "type": "Microsoft.MachineLearningServices/workspaces/environments/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {},
          "isArchived": false,
          "isAnonymous": true,
          "autoDeleteSetting": null,
          "environmentType": "UserCreated",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04",
          "condaFile": "{\n  \u0022channels\u0022: [\n    \u0022defaults\u0022\n  ],\n  \u0022dependencies\u0022: [\n    \u0022python=3.8.12\u0022,\n    \u0022pip=21.2.2\u0022,\n    {\n      \u0022pip\u0022: [\n        \u0022--extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\u0022,\n        \u0022mldesigner==0.0.71974906\u0022,\n        \u0022mlflow\u0022,\n        \u0022azureml-mlflow\u0022\n      ]\n    }\n  ],\n  \u0022name\u0022: \u0022example-environment\u0022\n}",
          "osType": "Linux",
          "autoRebuild": "Disabled",
          "provisioningState": "Succeeded",
          "stage": "Logged",
          "intellectualProperty": null
        },
        "systemData": {
          "createdAt": "2023-05-24T03:02:26.6953544\u002B00:00",
          "createdBy": "Chenyang Zhang",
          "createdByType": "User",
          "lastModifiedAt": "2023-05-24T03:02:26.6953544\u002B00:00",
          "lastModifiedBy": "Chenyang Zhang",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94?api-version=2023-04-01-preview",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "379",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": {
        "properties": {
          "isAnonymous": true,
          "isArchived": false,
          "condaFile": "channels:\n- defaults\ndependencies:\n- python=3.8.12\n- pip=21.2.2\n- pip:\n  - --extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\n  - mldesigner==0.0.71974906\n  - mlflow\n  - azureml-mlflow\nname: example-environment\n",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04"
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Build-ID": "ch7",
        "Cache-Control": "no-cache",
        "Content-Length": "1436",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Wed, 24 May 2023 03:02:38 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94?api-version=2023-04-01-preview",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-43ffb7934ffd06cd3730cfe0ed4cb20d-5e4dc558bb8402e1-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "64df6b62-76f4-4884-823c-2279a6725f0f",
        "x-ms-ratelimit-remaining-subscription-writes": "1197",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230524T030238Z:64df6b62-76f4-4884-823c-2279a6725f0f",
        "x-request-time": "0.178"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94",
        "name": "7926e182b294d8644f987381c0081e94",
        "type": "Microsoft.MachineLearningServices/workspaces/environments/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {},
          "isArchived": false,
          "isAnonymous": true,
          "autoDeleteSetting": null,
          "environmentType": "UserCreated",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04",
          "condaFile": "{\n  \u0022channels\u0022: [\n    \u0022defaults\u0022\n  ],\n  \u0022dependencies\u0022: [\n    \u0022python=3.8.12\u0022,\n    \u0022pip=21.2.2\u0022,\n    {\n      \u0022pip\u0022: [\n        \u0022--extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\u0022,\n        \u0022mldesigner==0.0.71974906\u0022,\n        \u0022mlflow\u0022,\n        \u0022azureml-mlflow\u0022\n      ]\n    }\n  ],\n  \u0022name\u0022: \u0022example-environment\u0022\n}",
          "osType": "Linux",
          "autoRebuild": "Disabled",
          "provisioningState": "Succeeded",
          "stage": "Logged",
          "intellectualProperty": null
        },
        "systemData": {
          "createdAt": "2023-05-24T03:02:26.6953544\u002B00:00",
          "createdBy": "Chenyang Zhang",
          "createdByType": "User",
          "lastModifiedAt": "2023-05-24T03:02:26.6953544\u002B00:00",
          "lastModifiedBy": "Chenyang Zhang",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/000000000000000000000/versions?api-version=2023-04-01\u0026hash=a687133928d9e45e91a03f4ac1679f5033615fabd05465e18d146cb321744379\u0026hashVersion=202208",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Encoding": "gzip",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Wed, 24 May 2023 03:02:40 GMT",
        "Expires": "-1",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-f04ca04c8dbcbd6679911df3dc7a26a6-a2759f1c02ef22ab-00\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "Transfer-Encoding": "chunked",
        "Vary": "Accept-Encoding",
        "x-aml-cluster": "vienna-eastus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "a55432d3-77cb-465a-977a-6122e1afbcc0",
        "x-ms-ratelimit-remaining-subscription-reads": "11997",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230524T030240Z:a55432d3-77cb-465a-977a-6122e1afbcc0",
        "x-request-time": "0.044"
      },
      "ResponseBody": {
        "value": []
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/000000000000000000000/versions/1/startPendingUpload?api-version=2023-04-01",
      "RequestMethod": "POST",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "47",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": {
        "pendingUploadType": "TemporaryBlobReference"
      },
      "StatusCode": 200,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Encoding": "gzip",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Wed, 24 May 2023 03:02:41 GMT",
        "Expires": "-1",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-04b06e2b3be49037e702ec1931b593fb-986364692e2f4495-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "Transfer-Encoding": "chunked",
        "Vary": [
          "Accept-Encoding",
          "Accept-Encoding"
        ],
        "x-aml-cluster": "vienna-eastus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "94221a3b-3874-4178-9ec2-9b40b6e16d57",
        "x-ms-ratelimit-remaining-subscription-writes": "1196",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230524T030241Z:94221a3b-3874-4178-9ec2-9b40b6e16d57",
        "x-request-time": "0.448"
      },
      "ResponseBody": {
        "blobReferenceForConsumption": {
          "blobUri": "https://amltest5899420437.blob.core.windows.net:443/0bdd51b6-c-a3a0faaa-7927-5a27-842f-4ffaa344d69c",
          "storageAccountArmId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.Storage/storageAccounts/amltest5899420437",
          "credential": {
            "credentialType": "SAS",
            "sasUri": "https://amltest5899420437.blob.core.windows.net/0bdd51b6-c-a3a0faaa-7927-5a27-842f-4ffaa344d69c?skoid=372c30a9-c04f-422f-b38c-872e6b7d5540\u0026sktid=72f988bf-86f1-41af-91ab-2d7cd011db47\u0026skt=2023-05-24T02%3A49%3A26Z\u0026ske=2023-05-25T10%3A59%3A26Z\u0026sks=b\u0026skv=2019-07-07\u0026sv=2021-10-04\u0026st=2023-05-24T02%3A52%3A41Z\u0026se=2023-05-24T11%3A02%3A41Z\u0026sr=c\u0026sp=rcwl\u0026sig=000000000000000000000000000000000000"
          }
        },
        "pendingUploadId": "ce1cf727-50fa-4169-abb0-5739b3112e6a",
        "pendingUploadType": "None"
      }
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/0bdd51b6-c-a3a0faaa-7927-5a27-842f-4ffaa344d69c/src/baisc_component.py?skoid=372c30a9-c04f-422f-b38c-872e6b7d5540\u0026sktid=72f988bf-86f1-41af-91ab-2d7cd011db47\u0026skt=2023-05-24T02%3A49%3A26Z\u0026ske=2023-05-25T10%3A59%3A26Z\u0026sks=b\u0026skv=2019-07-07\u0026sv=2021-10-04\u0026st=2023-05-24T02%3A52%3A41Z\u0026se=2023-05-24T11%3A02%3A41Z\u0026sr=c\u0026sp=rcwl\u0026sig=000000000000000000000000000000000000",
      "RequestMethod": "HEAD",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-date": "Wed, 24 May 2023 03:02:41 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": null,
      "StatusCode": 404,
      "ResponseHeaders": {
        "Date": "Wed, 24 May 2023 03:02:41 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "Transfer-Encoding": "chunked",
        "x-ms-error-code": "BlobNotFound",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/0bdd51b6-c-a3a0faaa-7927-5a27-842f-4ffaa344d69c/src/baisc_component.py?skoid=372c30a9-c04f-422f-b38c-872e6b7d5540\u0026sktid=72f988bf-86f1-41af-91ab-2d7cd011db47\u0026skt=2023-05-24T02%3A49%3A26Z\u0026ske=2023-05-25T10%3A59%3A26Z\u0026sks=b\u0026skv=2019-07-07\u0026sv=2021-10-04\u0026st=2023-05-24T02%3A52%3A41Z\u0026se=2023-05-24T11%3A02%3A41Z\u0026sr=c\u0026sp=rcwl\u0026sig=000000000000000000000000000000000000",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "1486",
        "Content-MD5": "Uk/a5NgJ4\u002BFWFWAqJ7fY/w==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Wed, 24 May 2023 03:02:42 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": "aW1wb3J0IGFyZ3BhcnNlDQppbXBvcnQgb3MNCg0KZnJvbSBtbGRlc2lnbmVyLl9jb21wb25lbnRfZXhlY3V0b3IgaW1wb3J0IEV4ZWN1dG9yQmFzZQ0KDQpwYXJzZXIgPSBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcigpDQpwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWNvbXBvbmVudF9pbl9udW1iZXIiLCB0eXBlPWludCkNCnBhcnNlci5hZGRfYXJndW1lbnQoIi0tY29tcG9uZW50X2luX251bWJlcl8xIiwgdHlwZT1pbnQpDQpwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWNvbXBvbmVudF9pbl9wYXRoIiwgdHlwZT1zdHIpDQpwYXJzZXIuYWRkX2FyZ3VtZW50KCItLW91dHB1dF9pbl9wYXRoIiwgdHlwZT1zdHIpDQpwYXJzZXIuYWRkX2FyZ3VtZW50KCItLW91dHB1dF9pbl9udW1iZXIiLCB0eXBlPXN0cikNCg0KDQphcmdzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKQ0KDQpsaW5lcyA9IFsNCiAgICBmImNvbXBvbmVudF9pbl9udW1iZXI6IHthcmdzLmNvbXBvbmVudF9pbl9udW1iZXJ9IiwNCiAgICBmImNvbXBvbmVudF9pbl9udW1iZXJfMToge2FyZ3MuY29tcG9uZW50X2luX251bWJlcl8xfSIsDQogICAgZiJjb21wb25lbnRfaW5fcGF0aDoge2FyZ3MuY29tcG9uZW50X2luX3BhdGh9IiwNCl0NCg0KaWYgYXJncy5jb21wb25lbnRfaW5fbnVtYmVyIGlzIG5vdCBOb25lOg0KICAgIGNvbXBvbmVudF9pbl9udW1iZXIgPSBhcmdzLmNvbXBvbmVudF9pbl9udW1iZXINCmVsaWYgb3MucGF0aC5leGlzdHMob3MucGF0aC5qb2luKGFyZ3MuY29tcG9uZW50X2luX3BhdGgsICJvdXRwdXQudHh0IikpOg0KICAgIHdpdGggb3Blbihvcy5wYXRoLmpvaW4oYXJncy5jb21wb25lbnRfaW5fcGF0aCwgIm91dHB1dC50eHQiKSwgInIiKSBhcyBmaWxlOg0KICAgICAgICBjb250ZW50ID0gZmlsZS5yZWFkKCkNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgY29tcG9uZW50X2luX251bWJlciA9IGludChjb250ZW50KQ0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uOg0KICAgICAgICAgICAgY29tcG9uZW50X2luX251bWJlciA9IGFyZ3MuY29tcG9uZW50X2luX251bWJlcg0KZWxzZToNCiAgICBjb21wb25lbnRfaW5fbnVtYmVyID0gMA0KDQpvdXRwdXRfaW5fbnVtID0gY29tcG9uZW50X2luX251bWJlciAtIDENCg0Kd2l0aCBvcGVuKG9zLnBhdGguam9pbihhcmdzLm91dHB1dF9pbl9wYXRoLCAib3V0cHV0LnR4dCIpLCAidyIpIGFzIGZpbGU6DQogICAgZmlsZS53cml0ZShzdHIob3V0cHV0X2luX251bSkpDQoNCmNvbnRyb2xfb3V0cHV0X2NvbnRlbnQgPSAneyJpc19udW1iZXJfbGFyZ2VyX3RoYW5femVybyI6ICIlcyIsICJvdXRwdXRfaW5fbnVtYmVyIjogIiVzIn0nICUgKA0KICAgIHN0cihvdXRwdXRfaW5fbnVtID4gMCksDQogICAgb3V0cHV0X2luX251bSwNCikNCkV4ZWN1dG9yQmFzZS5fd3JpdGVfY29udHJvbF9vdXRwdXRzX3RvX3J1bl9oaXN0b3J5KGNvbnRyb2xfb3V0cHV0X2NvbnRlbnQ9Y29udHJvbF9vdXRwdXRfY29udGVudCkNCg==",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "Uk/a5NgJ4\u002BFWFWAqJ7fY/w==",
        "Date": "Wed, 24 May 2023 03:02:42 GMT",
        "ETag": "\u00220x8DB5C0357A209D2\u0022",
        "Last-Modified": "Wed, 24 May 2023 03:02:42 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "api9XrScx1M=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/0bdd51b6-c-a3a0faaa-7927-5a27-842f-4ffaa344d69c/src/baisc_component.py?comp=metadata\u0026skoid=372c30a9-c04f-422f-b38c-872e6b7d5540\u0026sktid=72f988bf-86f1-41af-91ab-2d7cd011db47\u0026skt=2023-05-24T02%3A49%3A26Z\u0026ske=2023-05-25T10%3A59%3A26Z\u0026sks=b\u0026skv=2019-07-07\u0026sv=2021-10-04\u0026st=2023-05-24T02%3A52%3A41Z\u0026se=2023-05-24T11%3A02%3A41Z\u0026sr=c\u0026sp=rcwl\u0026sig=000000000000000000000000000000000000",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "0",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-date": "Wed, 24 May 2023 03:02:42 GMT",
        "x-ms-meta-name": "000000000000000000000",
        "x-ms-meta-upload_status": "completed",
        "x-ms-meta-version": "1",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Date": "Wed, 24 May 2023 03:02:42 GMT",
        "ETag": "\u00220x8DB5C0357C6F15D\u0022",
        "Last-Modified": "Wed, 24 May 2023 03:02:43 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/000000000000000000000/versions/1?api-version=2023-04-01",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "246",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": {
        "properties": {
          "properties": {
            "hash_sha256": "0000000000000",
            "hash_version": "0000000000000"
          },
          "isAnonymous": true,
          "isArchived": false,
          "codeUri": "https://amltest5899420437.blob.core.windows.net:443/0bdd51b6-c-a3a0faaa-7927-5a27-842f-4ffaa344d69c/src"
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "795",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Wed, 24 May 2023 03:02:43 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/000000000000000000000/versions/1?api-version=2023-04-01",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-d4eb2feaa083ca4463d74954bcc0d154-fbf0a43e679ae393-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "5c8ed513-72df-403d-92c4-5f94dffe8123",
        "x-ms-ratelimit-remaining-subscription-writes": "1195",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230524T030243Z:5c8ed513-72df-403d-92c4-5f94dffe8123",
        "x-request-time": "0.313"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/000000000000000000000/versions/1",
        "name": "1",
        "type": "Microsoft.MachineLearningServices/workspaces/codes/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {
            "hash_sha256": "0000000000000",
            "hash_version": "0000000000000"
          },
          "isArchived": false,
          "isAnonymous": false,
          "codeUri": "https://amltest5899420437.blob.core.windows.net:443/0bdd51b6-c-a3a0faaa-7927-5a27-842f-4ffaa344d69c/src",
          "provisioningState": "Succeeded"
        },
        "systemData": {
          "createdAt": "2023-05-24T03:02:43.6428915\u002B00:00",
          "createdBy": "Chenyang Zhang",
          "createdByType": "User",
          "lastModifiedAt": "2023-05-24T03:02:43.6428915\u002B00:00",
          "lastModifiedBy": "Chenyang Zhang",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/000000000000000000000?api-version=2022-10-01",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "1404",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": {
        "properties": {
          "properties": {},
          "tags": {},
          "isAnonymous": true,
          "isArchived": false,
          "componentSpec": {
            "command": "python basic_component.py $[[--component_in_number ${{inputs.component_in_number}}]] $[[--component_in_number_1 ${{inputs.component_in_number_1}}]] --component_in_path ${{inputs.component_in_path}} --output_in_path ${{outputs.output_in_path}}",
            "code": "azureml:/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/000000000000000000000/versions/1",
            "environment": "azureml:/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94",
            "name": "basic_component",
            "version": "0.0.1",
            "$schema": "https://azuremlschemas.azureedge.net/latest/commandComponent.schema.json",
            "display_name": "Basic component",
            "is_deterministic": true,
            "inputs": {
              "component_in_number": {
                "type": "integer",
                "optional": true
              },
              "component_in_number_1": {
                "type": "integer",
                "optional": true
              },
              "component_in_path": {
                "type": "uri_folder"
              }
            },
            "outputs": {
              "output_in_path": {
                "type": "uri_folder"
              },
              "output_in_number": {
                "type": "integer",
                "is_control": true
              },
              "is_number_larger_than_zero": {
                "type": "boolean",
                "is_control": true
              }
            },
            "type": "command",
            "_source": "YAML.COMPONENT"
          }
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "2443",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Wed, 24 May 2023 03:02:46 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/000000000000000000000?api-version=2022-10-01",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-60b9ed653c9944e30906839393b43d26-7a717940894ee1ba-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "bfc77c7b-fe7e-4fa4-a64c-6459d308de4d",
        "x-ms-ratelimit-remaining-subscription-writes": "1194",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230524T030246Z:bfc77c7b-fe7e-4fa4-a64c-6459d308de4d",
        "x-request-time": "0.674"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/c6182fc9-3280-44ef-bd4e-6f45fc19c4f3",
        "name": "c6182fc9-3280-44ef-bd4e-6f45fc19c4f3",
        "type": "Microsoft.MachineLearningServices/workspaces/components/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {},
          "isArchived": false,
          "isAnonymous": true,
          "componentSpec": {
            "$schema": "https://azuremlschemas.azureedge.net/latest/commandComponent.schema.json",
            "name": "basic_component",
            "version": "0.0.1",
            "display_name": "Basic component",
            "is_deterministic": "True",
            "type": "command",
            "inputs": {
              "component_in_path": {
                "type": "uri_folder",
                "optional": "False"
              },
              "component_in_number": {
                "type": "integer",
                "optional": "True"
              },
              "component_in_number_1": {
                "type": "integer",
                "optional": "True"
              }
            },
            "outputs": {
              "output_in_path": {
                "type": "uri_folder"
              },
              "output_in_number": {
                "type": "integer",
                "is_control": "True"
              },
              "is_number_larger_than_zero": {
                "type": "boolean",
                "is_control": "True"
              }
            },
            "code": "azureml:/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/000000000000000000000/versions/1",
            "environment": "azureml:/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94",
            "resources": {
              "instance_count": "1"
            },
            "command": "python basic_component.py $[[--component_in_number ${{inputs.component_in_number}}]] $[[--component_in_number_1 ${{inputs.component_in_number_1}}]] --component_in_path ${{inputs.component_in_path}} --output_in_path ${{outputs.output_in_path}}"
          }
        },
        "systemData": {
          "createdAt": "2023-05-24T03:02:46.2240136\u002B00:00",
          "createdBy": "Chenyang Zhang",
          "createdByType": "User",
          "lastModifiedAt": "2023-05-24T03:02:46.2240136\u002B00:00",
          "lastModifiedBy": "Chenyang Zhang",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/000000000000000000000?api-version=2022-10-01",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "1778",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": {
        "properties": {
          "description": "E2E dummy train-score-eval pipeline with components defined via yaml.",
          "properties": {},
          "tags": {},
          "isAnonymous": true,
          "isArchived": false,
          "componentSpec": {
            "name": "do_while_body_pipeline_component",
            "description": "E2E dummy train-score-eval pipeline with components defined via yaml.",
            "display_name": "do_while_body_pipeline_component",
            "inputs": {
              "component_in_number": {
                "type": "integer",
                "optional": true
              },
              "component_in_number_1": {
                "type": "integer",
                "optional": true
              },
              "component_in_path": {
                "type": "uri_folder"
              }
            },
            "outputs": {
              "output_in_path": {
                "type": "uri_folder"
              },
              "output_in_number": {
                "type": "integer",
                "is_control": true
              },
              "is_number_larger_than_zero": {
                "type": "boolean",
                "is_control": true
              }
            },
            "type": "pipeline",
            "jobs": {
              "train_with_sample_data": {
                "name": "train_with_sample_data",
                "type": "command",
                "inputs": {
                  "component_in_number": {
                    "job_input_type": "literal",
                    "value": "${{parent.inputs.component_in_number}}"
                  },
                  "component_in_number_1": {
                    "job_input_type": "literal",
                    "value": "${{parent.inputs.component_in_number_1}}"
                  },
                  "component_in_path": {
                    "job_input_type": "literal",
                    "value": "${{parent.inputs.component_in_path}}"
                  }
                },
                "outputs": {
                  "output_in_path": {
                    "value": "${{parent.outputs.output_in_path}}",
                    "type": "literal"
                  },
                  "output_in_number": {
                    "value": "${{parent.outputs.output_in_number}}",
                    "type": "literal"
                  },
                  "is_number_larger_than_zero": {
                    "value": "${{parent.outputs.is_number_larger_than_zero}}",
                    "type": "literal"
                  }
                },
                "_source": "YAML.COMPONENT",
                "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/c6182fc9-3280-44ef-bd4e-6f45fc19c4f3"
              }
            },
            "_source": "DSL",
            "sourceJobId": null
          }
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "1692",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Wed, 24 May 2023 03:02:47 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/000000000000000000000?api-version=2022-10-01",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-88f338541c56a57e9cfed57e6d116f0f-cfa95727cd349262-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "aebc1594-c508-4819-97a6-8a5a3ba5021a",
        "x-ms-ratelimit-remaining-subscription-writes": "1193",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230524T030247Z:aebc1594-c508-4819-97a6-8a5a3ba5021a",
        "x-request-time": "0.851"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/e56097e1-ae81-414d-b5d6-b3929d21303f",
        "name": "e56097e1-ae81-414d-b5d6-b3929d21303f",
        "type": "Microsoft.MachineLearningServices/workspaces/components/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {},
          "isArchived": false,
          "isAnonymous": true,
          "componentSpec": {
            "name": "do_while_body_pipeline_component",
            "display_name": "do_while_body_pipeline_component",
            "is_deterministic": "False",
            "type": "pipeline",
            "description": "E2E dummy train-score-eval pipeline with components defined via yaml.",
            "inputs": {
              "component_in_path": {
                "type": "uri_folder",
                "optional": "False"
              },
              "component_in_number": {
                "type": "integer",
                "optional": "True"
              },
              "component_in_number_1": {
                "type": "integer",
                "optional": "True"
              }
            },
            "outputs": {
              "output_in_path": {
                "type": "uri_folder"
              },
              "output_in_number": {
                "type": "integer",
                "is_control": "True"
              },
              "is_number_larger_than_zero": {
                "type": "boolean",
                "is_control": "True"
              }
            }
          }
        },
        "systemData": {
          "createdAt": "2023-05-24T03:02:47.7645003\u002B00:00",
          "createdBy": "Chenyang Zhang",
          "createdByType": "User",
          "lastModifiedAt": "2023-05-24T03:02:47.7645003\u002B00:00",
          "lastModifiedBy": "Chenyang Zhang",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/datastores/workspaceblobstore?api-version=2022-10-01",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Encoding": "gzip",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Wed, 24 May 2023 03:02:48 GMT",
        "Expires": "-1",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-7fb8b1507b91f57e24b392fab1f8533f-df3dcd2fdeb6af12-00\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "Transfer-Encoding": "chunked",
        "Vary": [
          "Accept-Encoding",
          "Accept-Encoding"
        ],
        "x-aml-cluster": "vienna-eastus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "8e53781b-abe0-4764-90b4-30da2669698d",
        "x-ms-ratelimit-remaining-subscription-reads": "11996",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230524T030248Z:8e53781b-abe0-4764-90b4-30da2669698d",
        "x-request-time": "0.081"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/datastores/workspaceblobstore",
        "name": "workspaceblobstore",
        "type": "Microsoft.MachineLearningServices/workspaces/datastores",
        "properties": {
          "description": null,
          "tags": null,
          "properties": null,
          "isDefault": true,
          "credentials": {
            "credentialsType": "AccountKey"
          },
          "datastoreType": "AzureBlob",
          "accountName": "amltest5899420437",
          "containerName": "azureml-blobstore-0bdd51b6-cd9c-4978-b870-99997b393b81",
          "endpoint": "core.windows.net",
          "protocol": "https",
          "serviceDataAccessAuthIdentity": "WorkspaceSystemAssignedIdentity"
        },
        "systemData": {
          "createdAt": "2023-05-19T09:41:55.3790868\u002B00:00",
          "createdBy": "779301c0-18b2-4cdc-801b-a0a3368fee0a",
          "createdByType": "Application",
          "lastModifiedAt": "2023-05-19T09:41:56.0641774\u002B00:00",
          "lastModifiedBy": "779301c0-18b2-4cdc-801b-a0a3368fee0a",
          "lastModifiedByType": "Application"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/datastores/workspaceblobstore/listSecrets?api-version=2022-10-01",
      "RequestMethod": "POST",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "0",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Encoding": "gzip",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Wed, 24 May 2023 03:02:49 GMT",
        "Expires": "-1",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-6c5d0c4cf81e62505960c65aeca240f2-3a5028bf03aed71e-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "Transfer-Encoding": "chunked",
        "Vary": "Accept-Encoding",
        "x-aml-cluster": "vienna-eastus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "9a6edc69-ee55-4545-9111-c513bfd10d74",
        "x-ms-ratelimit-remaining-subscription-writes": "1199",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230524T030249Z:9a6edc69-ee55-4545-9111-c513bfd10d74",
        "x-request-time": "0.084"
      },
      "ResponseBody": {
        "secretsType": "AccountKey",
        "key": "dGhpcyBpcyBmYWtlIGtleQ=="
      }
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/azureml-blobstore-0bdd51b6-cd9c-4978-b870-99997b393b81/LocalUpload/00000000000000000000000000000000/e2etests/__init__.py",
      "RequestMethod": "HEAD",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-date": "Wed, 24 May 2023 03:02:49 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": null,
      "StatusCode": 404,
      "ResponseHeaders": {
        "Date": "Wed, 24 May 2023 03:02:48 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "Transfer-Encoding": "chunked",
        "x-ms-error-code": "BlobNotFound",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/azureml-blobstore-0bdd51b6-cd9c-4978-b870-99997b393b81/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_pipeline_on_registry.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "4536",
        "Content-MD5": "d1TaRP31HP1J\u002BHb81i1/OQ==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Wed, 24 May 2023 03:02:49 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": "ZnJvbSBwYXRobGliIGltcG9ydCBQYXRoDQoNCmltcG9ydCBweXRlc3QNCmZyb20gYXp1cmUuY29yZS5leGNlcHRpb25zIGltcG9ydCBSZXNvdXJjZU5vdEZvdW5kRXJyb3INCg0KZnJvbSBhenVyZS5haS5tbCBpbXBvcnQgSW5wdXQsIE1MQ2xpZW50LCBsb2FkX2NvbXBvbmVudCwgbG9hZF9tb2RlbA0KZnJvbSBhenVyZS5haS5tbC5jb25zdGFudHMgaW1wb3J0IEFzc2V0VHlwZXMNCmZyb20gYXp1cmUuYWkubWwuZHNsIGltcG9ydCBwaXBlbGluZQ0KZnJvbSBkZXZ0b29sc190ZXN0dXRpbHMgaW1wb3J0IEF6dXJlUmVjb3JkZWRUZXN0Q2FzZSwgaXNfbGl2ZQ0KZnJvbSB0ZXN0X3V0aWxpdGllcy51dGlscyBpbXBvcnQgX1BZVEVTVF9USU1FT1VUX01FVEhPRCwgYXNzZXJ0X2pvYl9jYW5jZWwNCmZyb20gLi5fdXRpbCBpbXBvcnQgX0RTTF9USU1FT1VUX1NFQ09ORA0KDQoNCmRlZiBhc3NlcnRfcGlwZWxpbmVfam9iX2NhbmNlbChjbGllbnQ6IE1MQ2xpZW50LCBzY29yZV9mdW5jLCBwaXBlbGluZV9tb2RlbF9pbnB1dCwgcGlwZWxpbmVfdGVzdF9kYXRhKToNCiAgICBAcGlwZWxpbmUNCiAgICBkZWYgc2NvcmVfcGlwZWxpbmUobW9kZWxfaW5wdXQsIHRlc3RfZGF0YSk6DQogICAgICAgIHNjb3JlID0gc2NvcmVfZnVuYyhtb2RlbF9pbnB1dD1tb2RlbF9pbnB1dCwgdGVzdF9kYXRhPXRlc3RfZGF0YSkgICMgbm9xYTogRjg0MQ0KICAgICAgICBzY29yZV9kdXBsaWNhdGUgPSBzY29yZV9mdW5jKG1vZGVsX2lucHV0PW1vZGVsX2lucHV0LCB0ZXN0X2RhdGE9dGVzdF9kYXRhKSAgIyBub3FhOiBGODQxDQoNCiAgICBwaXBlbGluZV9qb2IgPSBzY29yZV9waXBlbGluZShtb2RlbF9pbnB1dD1waXBlbGluZV9tb2RlbF9pbnB1dCwgdGVzdF9kYXRhPXBpcGVsaW5lX3Rlc3RfZGF0YSkNCiAgICBwaXBlbGluZV9qb2Iuc2V0dGluZ3MuZGVmYXVsdF9jb21wdXRlID0gImNwdS1jbHVzdGVyIg0KICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lX2pvYiwgY2xpZW50KQ0KDQoNCkBweXRlc3QubWFyay5za2lwaWYoY29uZGl0aW9uPW5vdCBpc19saXZlKCksIHJlYXNvbj0icmVnaXN0cnkgdGVzdCwgbWF5IGZhaWwgaW4gcGxheWJhY2sgbW9kZSIpDQpAcHl0ZXN0Lm1hcmsudXNlZml4dHVyZXMoImVuYWJsZV9waXBlbGluZV9wcml2YXRlX3ByZXZpZXdfZmVhdHVyZXMiLCAicmVjb3JkZWRfdGVzdCIpDQpAcHl0ZXN0Lm1hcmsudGltZW91dCh0aW1lb3V0PV9EU0xfVElNRU9VVF9TRUNPTkQsIG1ldGhvZD1fUFlURVNUX1RJTUVPVVRfTUVUSE9EKQ0KQHB5dGVzdC5tYXJrLmUyZXRlc3QNCkBweXRlc3QubWFyay5waXBlbGluZV90ZXN0DQpjbGFzcyBUZXN0RFNMUGlwZWxpbmVPblJlZ2lzdHJ5KEF6dXJlUmVjb3JkZWRUZXN0Q2FzZSk6DQogICAgdGVzdF9kYXRhID0gSW5wdXQoDQogICAgICAgIHR5cGU9QXNzZXRUeXBlcy5VUklfRklMRSwNCiAgICAgICAgcGF0aD0iLi90ZXN0cy90ZXN0X2NvbmZpZ3MvcGlwZWxpbmVfam9icy9qb2Jfd2l0aF9yZWdpc3RyeV9tb2RlbF9hc19pbnB1dC9kYXRhL3NhbXBsZTEuY3N2IiwNCiAgICApDQoNCiAgICBkZWYgdGVzdF9waXBlbGluZV9qb2JfY3JlYXRlX3dpdGhfcmVnaXN0ZXJlZF9jb21wb25lbnRfb25fcmVnaXN0cnkoc2VsZiwgcGlwZWxpbmVzX3JlZ2lzdHJ5X2NsaWVudDogTUxDbGllbnQpOg0KICAgICAgICBsb2NhbF9jb21wb25lbnQgPSBsb2FkX2NvbXBvbmVudCgiLi90ZXN0cy90ZXN0X2NvbmZpZ3MvY29tcG9uZW50cy9iYXNpY19jb21wb25lbnRfY29kZV9sb2NhbF9wYXRoLnltbCIpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIGNyZWF0ZWRfY29tcG9uZW50ID0gcGlwZWxpbmVzX3JlZ2lzdHJ5X2NsaWVudC5jb21wb25lbnRzLmdldCgNCiAgICAgICAgICAgICAgICBsb2NhbF9jb21wb25lbnQubmFtZSwgdmVyc2lvbj1sb2NhbF9jb21wb25lbnQudmVyc2lvbg0KICAgICAgICAgICAgKQ0KICAgICAgICBleGNlcHQgUmVzb3VyY2VOb3RGb3VuZEVycm9yOg0KICAgICAgICAgICAgY3JlYXRlZF9jb21wb25lbnQgPSBwaXBlbGluZXNfcmVnaXN0cnlfY2xpZW50LmNvbXBvbmVudHMuY3JlYXRlX29yX3VwZGF0ZShsb2NhbF9jb21wb25lbnQpDQoNCiAgICAgICAgQHBpcGVsaW5lDQogICAgICAgIGRlZiBzYW1wbGVfcGlwZWxpbmUoKToNCiAgICAgICAgICAgIGNyZWF0ZWRfY29tcG9uZW50KCkNCg0KICAgICAgICBwaXBlbGluZV9qb2IgPSBzYW1wbGVfcGlwZWxpbmUoKQ0KICAgICAgICBwaXBlbGluZV9qb2Iuc2V0dGluZ3MuZGVmYXVsdF9jb21wdXRlID0gImNwdS1jbHVzdGVyIg0KICAgICAgICBhc3NlcnQgcGlwZWxpbmVzX3JlZ2lzdHJ5X2NsaWVudC5qb2JzLnZhbGlkYXRlKHBpcGVsaW5lX2pvYikucGFzc2VkDQoNCiAgICAjIHRoaXMgdGVzdCB3aWxsIGJyZWFrIGluIHBsYXliYWNrIG1vZGUsIHNvIGluY2x1ZGUgaXQgaW4gbGl2ZSB0ZXN0IG9ubHkNCiAgICBkZWYgdGVzdF9waXBlbGluZV93aXRoX2xvY2FsX2NvbXBvbmVudF9hbmRfcmVnaXN0cnlfbW9kZWxfYXNfaW5wdXQoc2VsZiwgY2xpZW50OiBNTENsaWVudCk6DQogICAgICAgICMgbG9hZF9jb21wb25lbnQNCiAgICAgICAgc2NvcmVfZnVuYyA9IGxvYWRfY29tcG9uZW50KCIuL3Rlc3RzL3Rlc3RfY29uZmlncy9waXBlbGluZV9qb2JzL2pvYl93aXRoX3JlZ2lzdHJ5X21vZGVsX2FzX2lucHV0L3Njb3JlLnltbCIpDQoNCiAgICAgICAgcGlwZWxpbmVfc2NvcmVfbW9kZWwgPSBJbnB1dCgNCiAgICAgICAgICAgIHR5cGU9ImN1c3RvbV9tb2RlbCIsIHBhdGg9ImF6dXJlbWw6Ly9yZWdpc3RyaWVzL3Nkay10ZXN0L21vZGVscy9pcmlzX21vZGVsL3ZlcnNpb25zLzEiDQogICAgICAgICkNCg0KICAgICAgICBhc3NlcnRfcGlwZWxpbmVfam9iX2NhbmNlbChjbGllbnQsIHNjb3JlX2Z1bmMsIHBpcGVsaW5lX3Njb3JlX21vZGVsLCBzZWxmLnRlc3RfZGF0YSkNCg0KICAgIGRlZiB0ZXN0X3BpcGVsaW5lX3dpdGhfbG9jYWxfY29tcG9uZW50X2FuZF9yZWdpc3RyeV9tb2RlbF9hc19pbnB1dF93aXRoX21vZGVsX2lucHV0KA0KICAgICAgICBzZWxmLCBjbGllbnQ6IE1MQ2xpZW50LCBwaXBlbGluZXNfcmVnaXN0cnlfY2xpZW50OiBNTENsaWVudA0KICAgICk6DQogICAgICAgICMgbG9hZF9jb21wb25lbnQNCiAgICAgICAgc2NvcmVfZnVuYyA9IGxvYWRfY29tcG9uZW50KCIuL3Rlc3RzL3Rlc3RfY29uZmlncy9waXBlbGluZV9qb2JzL2pvYl93aXRoX3JlZ2lzdHJ5X21vZGVsX2FzX2lucHV0L3Njb3JlLnltbCIpDQoNCiAgICAgICAgbW9kZWxfcGF0aCA9IFBhdGgoIi4vdGVzdHMvdGVzdF9jb25maWdzL21vZGVsL21vZGVsX2lyaXMueW1sIikNCiAgICAgICAgbW9kZWxfZW50aXR5ID0gbG9hZF9tb2RlbChtb2RlbF9wYXRoKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICBwaXBlbGluZV9zY29yZV9tb2RlbCA9IHBpcGVsaW5lc19yZWdpc3RyeV9jbGllbnQubW9kZWxzLmdldCgNCiAgICAgICAgICAgICAgICBuYW1lPW1vZGVsX2VudGl0eS5uYW1lLCB2ZXJzaW9uPW1vZGVsX2VudGl0eS52ZXJzaW9uDQogICAgICAgICAgICApDQogICAgICAgIGV4Y2VwdCBSZXNvdXJjZU5vdEZvdW5kRXJyb3I6DQogICAgICAgICAgICBtb2RlbF9lbnRpdHkgPSBwaXBlbGluZXNfcmVnaXN0cnlfY2xpZW50Lm1vZGVscy5jcmVhdGVfb3JfdXBkYXRlKG1vZGVsX2VudGl0eSkNCiAgICAgICAgICAgIHBpcGVsaW5lX3Njb3JlX21vZGVsID0gcGlwZWxpbmVzX3JlZ2lzdHJ5X2NsaWVudC5tb2RlbHMuZ2V0KA0KICAgICAgICAgICAgICAgIG5hbWU9bW9kZWxfZW50aXR5Lm5hbWUsIHZlcnNpb249bW9kZWxfZW50aXR5LnZlcnNpb24NCiAgICAgICAgICAgICkNCg0KICAgICAgICBhc3NlcnRfcGlwZWxpbmVfam9iX2NhbmNlbChjbGllbnQsIHNjb3JlX2Z1bmMsIHBpcGVsaW5lX3Njb3JlX21vZGVsLCBzZWxmLnRlc3RfZGF0YSkNCg0KICAgIGRlZiB0ZXN0X3BpcGVsaW5lX3dpdGhfcmVnaXN0cnlfY29tcG9uZW50X2FuZF9tb2RlbF9hc19pbnB1dCgNCiAgICAgICAgc2VsZiwgY2xpZW50OiBNTENsaWVudCwgcGlwZWxpbmVzX3JlZ2lzdHJ5X2NsaWVudDogTUxDbGllbnQNCiAgICApOg0KICAgICAgICAjIGxvYWRfY29tcG9uZW50DQogICAgICAgIHNjb3JlX2NvbXBvbmVudF9uYW1lLCBjb21wb25lbnRfdmVyc2lvbiA9ICJzY29yZV9jb21wb25lbnQiLCAiMiINCiAgICAgICAgc2NvcmVfZnVuYyA9IHBpcGVsaW5lc19yZWdpc3RyeV9jbGllbnQuY29tcG9uZW50cy5nZXQobmFtZT1zY29yZV9jb21wb25lbnRfbmFtZSwgdmVyc2lvbj1jb21wb25lbnRfdmVyc2lvbikNCg0KICAgICAgICBwaXBlbGluZV9zY29yZV9tb2RlbCA9IElucHV0KA0KICAgICAgICAgICAgdHlwZT0ibWxmbG93X21vZGVsIiwgcGF0aD0iYXp1cmVtbDovL3JlZ2lzdHJpZXMvc2RrLXRlc3QvbW9kZWxzL2lyaXNfbW9kZWwvdmVyc2lvbnMvMSINCiAgICAgICAgKQ0KDQogICAgICAgIGFzc2VydF9waXBlbGluZV9qb2JfY2FuY2VsKGNsaWVudCwgc2NvcmVfZnVuYywgcGlwZWxpbmVfc2NvcmVfbW9kZWwsIHNlbGYudGVzdF9kYXRhKQ0K",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "d1TaRP31HP1J\u002BHb81i1/OQ==",
        "Date": "Wed, 24 May 2023 03:02:48 GMT",
        "ETag": "\u00220x8DB5C035BBF30AF\u0022",
        "Last-Modified": "Wed, 24 May 2023 03:02:49 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "0cWl0GL\u002BlYU=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/azureml-blobstore-0bdd51b6-cd9c-4978-b870-99997b393b81/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_pipeline_samples.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "20096",
        "Content-MD5": "TDs7GLKhKxqQCkOdJ5l/fw==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Wed, 24 May 2023 03:02:49 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": "IiIiDQpUaGlzIGZpbGUgY292ZXJzIGFsbCBzYW1wbGUgcGlwZWxpbmUgaW4gaHR0cHM6Ly9naXRodWIuY29tL0F6dXJlL2F6dXJlbWwtcHJldmlld3MvdHJlZS9tYWluL3ByZXZpZXdzL3BpcGVsaW5lcy9zYW1wbGVzDQppbiBkc2wucGlwZWxpbmUuDQpUaGUgc2FtcGxlcyBhcmUgY29waWVkIHRvIHRlc3RfY29uZmlncy9kc2xfcGlwZWxpbmVfc2FtcGxlcw0KIiIiDQppbXBvcnQganNvbg0KaW1wb3J0IHN5cw0KZnJvbSBwYXRobGliIGltcG9ydCBQYXRoDQoNCmltcG9ydCBweWRhc2gNCmltcG9ydCBweXRlc3QNCmZyb20gZGV2dG9vbHNfdGVzdHV0aWxzIGltcG9ydCBBenVyZVJlY29yZGVkVGVzdENhc2UsIGlzX2xpdmUNCmZyb20gdGVzdF91dGlsaXRpZXMudXRpbHMgaW1wb3J0IF9QWVRFU1RfVElNRU9VVF9NRVRIT0QsIGFzc2VydF9qb2JfY2FuY2VsDQoNCmZyb20gYXp1cmUuYWkubWwgaW1wb3J0IE1MQ2xpZW50LCBsb2FkX2pvYg0KZnJvbSBhenVyZS5haS5tbC5lbnRpdGllcyBpbXBvcnQgQ29tcG9uZW50IGFzIENvbXBvbmVudEVudGl0eQ0KZnJvbSBhenVyZS5haS5tbC5lbnRpdGllcyBpbXBvcnQgUGlwZWxpbmVKb2INCmZyb20gYXp1cmUuYWkubWwub3BlcmF0aW9ucy5fcnVuX2hpc3RvcnlfY29uc3RhbnRzIGltcG9ydCBKb2JTdGF0dXMNCg0KZnJvbSAuLl91dGlsIGltcG9ydCBfRFNMX1RJTUVPVVRfU0VDT05EDQoNCnRlc3RzX3Jvb3RfZGlyID0gUGF0aChfX2ZpbGVfXykucGFyZW50LnBhcmVudC5wYXJlbnQNCnN5cy5wYXRoLmluc2VydCgwLCBzdHIodGVzdHNfcm9vdF9kaXIgLyAidGVzdF9jb25maWdzIikpDQpzYW1wbGVzX2RpciA9IHRlc3RzX3Jvb3RfZGlyIC8gInRlc3RfY29uZmlncy9kc2xfcGlwZWxpbmUvIg0KDQoNCmRlZiBhc3NlcnRfam9iX2NvbXBsZXRlZChwaXBlbGluZSwgY2xpZW50OiBNTENsaWVudCk6DQogICAgam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSkNCiAgICBjbGllbnQuam9icy5zdHJlYW0oam9iLm5hbWUpDQogICAgYXNzZXJ0IGNsaWVudC5qb2JzLmdldChqb2IubmFtZSkuc3RhdHVzID09IEpvYlN0YXR1cy5DT01QTEVURUQNCg0KDQpkZWYgYXNzZXJ0X2RzbF9jdXJhdGVkKHBpcGVsaW5lOiBQaXBlbGluZUpvYiwgam9iX3lhbWwsIG9taXRfZmllbGRzKToNCiAgICBkc2xfcGlwZWxpbmVfam9iX2RpY3QgPSBwaXBlbGluZS5fdG9fcmVzdF9vYmplY3QoKS5hc19kaWN0KCkNCiAgICBwaXBlbGluZV9qb2JfZGljdCA9IGxvYWRfam9iKHNvdXJjZT1qb2JfeWFtbCkuX3RvX3Jlc3Rfb2JqZWN0KCkuYXNfZGljdCgpDQoNCiAgICBkc2xfcGlwZWxpbmVfam9iX2RpY3QgPSBweWRhc2gub21pdChkc2xfcGlwZWxpbmVfam9iX2RpY3QsIG9taXRfZmllbGRzKQ0KICAgIHBpcGVsaW5lX2pvYl9kaWN0ID0gcHlkYXNoLm9taXQocGlwZWxpbmVfam9iX2RpY3QsIG9taXRfZmllbGRzKQ0KICAgIHByaW50KGpzb24uZHVtcHMoZHNsX3BpcGVsaW5lX2pvYl9kaWN0LCBpbmRlbnQ9MikpDQogICAgcHJpbnQoanNvbi5kdW1wcyhwaXBlbGluZV9qb2JfZGljdCwgaW5kZW50PTIpKQ0KICAgIGFzc2VydCBkc2xfcGlwZWxpbmVfam9iX2RpY3QgPT0gcGlwZWxpbmVfam9iX2RpY3QNCg0KDQpAcHl0ZXN0Lm1hcmsudXNlZml4dHVyZXMoDQogICAgImVuYWJsZV9lbnZpcm9ubWVudF9pZF9hcm1fZXhwYW5zaW9uIiwNCiAgICAiZW5hYmxlX3BpcGVsaW5lX3ByaXZhdGVfcHJldmlld19mZWF0dXJlcyIsDQogICAgIm1vY2tfY29kZV9oYXNoIiwNCiAgICAibW9ja19jb21wb25lbnRfaGFzaCIsDQogICAgIm1vY2tfc2V0X2hlYWRlcnNfd2l0aF91c2VyX2FtbF90b2tlbiIsDQogICAgInJlY29yZGVkX3Rlc3QiLA0KICAgICJtb2NrX2Fzc2V0X25hbWUiLA0KICAgICJtb2NrX2Fub25fY29tcG9uZW50X3ZlcnNpb24iLA0KKQ0KQHB5dGVzdC5tYXJrLnRpbWVvdXQodGltZW91dD1fRFNMX1RJTUVPVVRfU0VDT05ELCBtZXRob2Q9X1BZVEVTVF9USU1FT1VUX01FVEhPRCkNCkBweXRlc3QubWFyay5lMmV0ZXN0DQpAcHl0ZXN0Lm1hcmsucGlwZWxpbmVfdGVzdA0KY2xhc3MgVGVzdERTTFBpcGVsaW5lU2FtcGxlcyhBenVyZVJlY29yZGVkVGVzdENhc2UpOg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfZTJlX2xvY2FsX2NvbXBvbmVudHMoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmUyZV9sb2NhbF9jb21wb25lbnRzLnBpcGVsaW5lIGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgZTJlX2xvY2FsX2NvbXBvbmVudHMsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IGUyZV9sb2NhbF9jb21wb25lbnRzKCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfZTJlX3JlZ2lzdGVyZWRfY29tcG9uZW50cygNCiAgICAgICAgc2VsZiwNCiAgICAgICAgY2xpZW50OiBNTENsaWVudCwNCiAgICAgICAgcGlwZWxpbmVfc2FtcGxlc19lMmVfcmVnaXN0ZXJlZF90cmFpbl9jb21wb25lbnRzOiBDb21wb25lbnRFbnRpdHksDQogICAgICAgIHBpcGVsaW5lX3NhbXBsZXNfZTJlX3JlZ2lzdGVyZWRfc2NvcmVfY29tcG9uZW50czogQ29tcG9uZW50RW50aXR5LA0KICAgICAgICBwaXBlbGluZV9zYW1wbGVzX2UyZV9yZWdpc3RlcmVkX2V2YWxfY29tcG9uZW50czogQ29tcG9uZW50RW50aXR5LA0KICAgICkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmUyZV9yZWdpc3RlcmVkX2NvbXBvbmVudHMucGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBlMmVfcmVnaXN0ZXJlZF9jb21wb25lbnRzLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBlMmVfcmVnaXN0ZXJlZF9jb21wb25lbnRzKA0KICAgICAgICAgICAgY2xpZW50PWNsaWVudCwNCiAgICAgICAgICAgIHBpcGVsaW5lX3NhbXBsZXNfZTJlX3JlZ2lzdGVyZWRfdHJhaW5fY29tcG9uZW50cz1waXBlbGluZV9zYW1wbGVzX2UyZV9yZWdpc3RlcmVkX3RyYWluX2NvbXBvbmVudHMsDQogICAgICAgICAgICBwaXBlbGluZV9zYW1wbGVzX2UyZV9yZWdpc3RlcmVkX3Njb3JlX2NvbXBvbmVudHM9cGlwZWxpbmVfc2FtcGxlc19lMmVfcmVnaXN0ZXJlZF9zY29yZV9jb21wb25lbnRzLA0KICAgICAgICAgICAgcGlwZWxpbmVfc2FtcGxlc19lMmVfcmVnaXN0ZXJlZF9ldmFsX2NvbXBvbmVudHM9cGlwZWxpbmVfc2FtcGxlc19lMmVfcmVnaXN0ZXJlZF9ldmFsX2NvbXBvbmVudHMsDQogICAgICAgICkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCiAgICAgICAgIyBtb3ZlIHVuaXQgdGVzdCBoZXJlIGR1ZSB0byBwZXJtaXNzaW9uIHByb2JsZW0NCiAgICAgICAgam9iX3lhbWwgPSBzdHIoc2FtcGxlc19kaXIgLyAiZTJlX3JlZ2lzdGVyZWRfY29tcG9uZW50cy9waXBlbGluZS55bWwiKQ0KICAgICAgICBvbWl0X2ZpZWxkcyA9IFsNCiAgICAgICAgICAgICJwcm9wZXJ0aWVzLmV4cGVyaW1lbnRfbmFtZSIsDQogICAgICAgICAgICAibmFtZSIsDQogICAgICAgICAgICAicHJvcGVydGllcy5qb2JzLnRyYWluX2pvYi5jb21wb25lbnRJZCIsDQogICAgICAgICAgICAicHJvcGVydGllcy5qb2JzLnNjb3JlX2pvYi5jb21wb25lbnRJZCIsDQogICAgICAgICAgICAicHJvcGVydGllcy5qb2JzLmV2YWx1YXRlX2pvYi5jb21wb25lbnRJZCIsDQogICAgICAgICAgICAicHJvcGVydGllcy5qb2JzLnRyYWluX2pvYi5yZXNvdXJjZXMiLCAgIyBqb2IgeWFtbCB3b24ndCBoYXZlIHJlc291cmNlcyBidXQgd2Ugd2lsbCBwYXNzIHRoZW0NCiAgICAgICAgICAgICJwcm9wZXJ0aWVzLmpvYnMuc2NvcmVfam9iLnJlc291cmNlcyIsDQogICAgICAgICAgICAicHJvcGVydGllcy5qb2JzLmV2YWx1YXRlX2pvYi5yZXNvdXJjZXMiLA0KICAgICAgICAgICAgInByb3BlcnRpZXMuaW5wdXRzLnBpcGVsaW5lX2pvYl90cmFpbmluZ19pbnB1dC51cmkiLA0KICAgICAgICAgICAgInByb3BlcnRpZXMuaW5wdXRzLnBpcGVsaW5lX2pvYl90ZXN0X2lucHV0LnVyaSIsDQogICAgICAgICAgICAicHJvcGVydGllcy5wcm9wZXJ0aWVzIiwNCiAgICAgICAgICAgICJwcm9wZXJ0aWVzLmNvbXB1dGVfaWQiLA0KICAgICAgICAgICAgInByb3BlcnRpZXMuc2V0dGluZ3MiLA0KICAgICAgICBdDQogICAgICAgIGFzc2VydF9kc2xfY3VyYXRlZChwaXBlbGluZSwgam9iX3lhbWwsIG9taXRfZmllbGRzKQ0KDQogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QNCiAgICBkZWYgdGVzdF9iYXNpY19jb21wb25lbnQoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmJhc2ljX2NvbXBvbmVudC5waXBlbGluZSBpbXBvcnQgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIGJhc2ljX2NvbXBvbmVudA0KDQogICAgICAgIHBpcGVsaW5lID0gYmFzaWNfY29tcG9uZW50KCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfY29tcG9uZW50X3dpdGhfaW5wdXRfb3V0cHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5jb21wb25lbnRfd2l0aF9pbnB1dF9vdXRwdXQucGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBjb21wb25lbnRfd2l0aF9pbnB1dF9vdXRwdXQsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IGNvbXBvbmVudF93aXRoX2lucHV0X291dHB1dCgpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X2Jhc2ljX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5iYXNpY19waXBlbGluZS5waXBlbGluZSBpbXBvcnQgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIGJhc2ljX3BpcGVsaW5lDQoNCiAgICAgICAgcGlwZWxpbmUgPSBiYXNpY19waXBlbGluZSgpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X3BpcGVsaW5lX3dpdGhfZGF0YShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUucGlwbGluZV93aXRoX2RhdGEucGlwZWxpbmUgaW1wb3J0IGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBwaXBsaW5lX3dpdGhfZGF0YQ0KDQogICAgICAgIHBpcGVsaW5lID0gcGlwbGluZV93aXRoX2RhdGEoKQ0KICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQ0KDQogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QNCiAgICBkZWYgdGVzdF9sb2NhbF9kYXRhX2lucHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5sb2NhbF9kYXRhX2lucHV0LnBpcGVsaW5lIGltcG9ydCBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgbG9jYWxfZGF0YV9pbnB1dA0KDQogICAgICAgIHBpcGVsaW5lID0gbG9jYWxfZGF0YV9pbnB1dCgpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X2RhdGFzdG9yZV9kYXRhcGF0aF91cmlfZm9sZGVyKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5kYXRhc3RvcmVfZGF0YXBhdGhfdXJpX2ZvbGRlci5waXBlbGluZSBpbXBvcnQgKA0KICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIGRhdGFzdG9yZV9kYXRhcGF0aF91cmlfZm9sZGVyLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhc3RvcmVfZGF0YXBhdGhfdXJpX2ZvbGRlcigpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X2RhdGFzdG9yZV9kYXRhcGF0aF91cmlfZmlsZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZGF0YXN0b3JlX2RhdGFwYXRoX3VyaV9maWxlLnBpcGVsaW5lIGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgZGF0YXN0b3JlX2RhdGFwYXRoX3VyaV9maWxlLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhc3RvcmVfZGF0YXBhdGhfdXJpX2ZpbGUoKQ0KICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQ0KDQogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QNCiAgICBkZWYgdGVzdF9kYXRhc2V0X2lucHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5kYXRhc2V0X2lucHV0LnBpcGVsaW5lIGltcG9ydCBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgZGF0YXNldF9pbnB1dA0KDQogICAgICAgIHBpcGVsaW5lID0gZGF0YXNldF9pbnB1dChjbGllbnQpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X3dlYl91cmxfaW5wdXQoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLndlYl91cmxfaW5wdXQucGlwZWxpbmUgaW1wb3J0IGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyB3ZWJfdXJsX2lucHV0DQoNCiAgICAgICAgcGlwZWxpbmUgPSB3ZWJfdXJsX2lucHV0KCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfZW52X3B1YmxpY19kb2NrZXJfaW1hZ2Uoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmVudl9wdWJsaWNfZG9ja2VyX2ltYWdlLnBpcGVsaW5lIGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgZW52X3B1YmxpY19kb2NrZXJfaW1hZ2UsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IGVudl9wdWJsaWNfZG9ja2VyX2ltYWdlKCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfZW52X3JlZ2lzdGVyZWQoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmVudl9yZWdpc3RlcmVkLnBpcGVsaW5lIGltcG9ydCBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgZW52X3JlZ2lzdGVyZWQNCg0KICAgICAgICBwaXBlbGluZSA9IGVudl9yZWdpc3RlcmVkKCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfZW52X2NvbmRhX2ZpbGUoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmVudl9jb25kYV9maWxlLnBpcGVsaW5lIGltcG9ydCBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgZW52X2NvbmRhX2ZpbGUNCg0KICAgICAgICBwaXBlbGluZSA9IGVudl9jb25kYV9maWxlKCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfdGZfaGVsbG9fd29ybGQoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLnRmX2hlbGxvX3dvcmxkLnBpcGVsaW5lIGltcG9ydCBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgdGZfaGVsbG9fd29ybGQNCg0KICAgICAgICBwaXBlbGluZSA9IHRmX2hlbGxvX3dvcmxkKCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfbXBpX2hlbGxvX3dvcmxkKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5tcGlfaGVsbG9fd29ybGQucGlwZWxpbmUgaW1wb3J0IGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBtcGlfaGVsbG9fd29ybGQNCg0KICAgICAgICBwaXBlbGluZSA9IG1waV9oZWxsb193b3JsZCgpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X3B5dG9yY2hfaGVsbG9fd29ybGQoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLnB5dG9yY2hfaGVsbG9fd29ybGQucGlwZWxpbmUgaW1wb3J0IGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBweXRvcmNoX2hlbGxvX3dvcmxkDQoNCiAgICAgICAgcGlwZWxpbmUgPSBweXRvcmNoX2hlbGxvX3dvcmxkKCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfbnljX3RheGlfZGF0YV9yZWdyZXNzaW9uKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5ueWNfdGF4aV9kYXRhX3JlZ3Jlc3Npb24ucGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBueWNfdGF4aV9kYXRhX3JlZ3Jlc3Npb24sDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IG55Y190YXhpX2RhdGFfcmVncmVzc2lvbigpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X3RmX21uaXN0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS50Zl9tbmlzdC5waXBlbGluZSBpbXBvcnQgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIHRmX21uaXN0DQoNCiAgICAgICAgcGlwZWxpbmUgPSB0Zl9tbmlzdCgpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X2UyZV9pbmxpbmVfY29tcG9uZW50cyhzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZTJlX2lubGluZV9jb21wb25lbnRzLnBpcGVsaW5lIGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgZTJlX2lubGluZV9jb21wb25lbnRzLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBlMmVfaW5saW5lX2NvbXBvbmVudHMoKQ0KICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQ0KDQogICAgQHB5dGVzdC5tYXJrLnVzZWZpeHR1cmVzKCJtb2NrX2Fzc2V0X25hbWUiKQ0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfY29tbWFuZF9qb2JfaW5fcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmNvbW1hbmRfam9iX2luX3BpcGVsaW5lLnBpcGVsaW5lIGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgY29tbWFuZF9qb2JfaW5fcGlwZWxpbmUsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IGNvbW1hbmRfam9iX2luX3BpcGVsaW5lKCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfbXVsdGlfcGFyYWxsZWxfY29tcG9uZW50c193aXRoX2ZpbGVfaW5wdXRfcGlwZWxpbmVfb3V0cHV0KA0KICAgICAgICBzZWxmLA0KICAgICAgICBjbGllbnQ6IE1MQ2xpZW50LA0KICAgICkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLnBhcmFsbGVsX2NvbXBvbmVudF93aXRoX2ZpbGVfaW5wdXQucGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBwaXBlbGluZV93aXRoX3BhcmFsbGVsX2NvbXBvbmVudHMsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IHBpcGVsaW5lX3dpdGhfcGFyYWxsZWxfY29tcG9uZW50cygpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X3BhcmFsbGVsX2NvbXBvbmVudHNfd2l0aF90YWJ1bGFyX2lucHV0X3BpcGVsaW5lX291dHB1dChzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUucGFyYWxsZWxfY29tcG9uZW50X3dpdGhfdGFidWxhcl9pbnB1dC5waXBlbGluZSBpbXBvcnQgKA0KICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIHBpcGVsaW5lX3dpdGhfcGFyYWxsZWxfY29tcG9uZW50cywNCiAgICAgICAgKQ0KDQogICAgICAgIHBpcGVsaW5lID0gcGlwZWxpbmVfd2l0aF9wYXJhbGxlbF9jb21wb25lbnRzKCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfcGFyYWxsZWxfY29tcG9uZW50cyhzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUucGFyYWxsZWxfY29tcG9uZW50LnBpcGVsaW5lIGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgcGlwZWxpbmVfd2l0aF9wYXJhbGxlbF9jb21wb25lbnRzLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBwaXBlbGluZV93aXRoX3BhcmFsbGVsX2NvbXBvbmVudHMoKQ0KICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQ0KDQogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QNCiAgICBkZWYgdGVzdF9hdXRvbWxfam9iX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5hdXRvbWxfam9iX2luX3BpcGVsaW5lLnBpcGVsaW5lIGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgYXV0b21sX2pvYl9pbl9waXBlbGluZSwNCiAgICAgICAgKQ0KDQogICAgICAgIHBpcGVsaW5lID0gYXV0b21sX2pvYl9pbl9waXBlbGluZSgpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X3BpcGVsaW5lX3dpdGhfcGlwZWxpbmVfY29tcG9uZW50KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5waXBlbGluZV93aXRoX3BpcGVsaW5lX2NvbXBvbmVudC5waXBlbGluZSBpbXBvcnQgKA0KICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIHBpcGVsaW5lX3dpdGhfcGlwZWxpbmVfY29tcG9uZW50LA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBwaXBlbGluZV93aXRoX3BpcGVsaW5lX2NvbXBvbmVudCgpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X3BpcGVsaW5lX3dpdGhfZGF0YV9hc19pbnB1dHNfZm9yX3BpcGVsaW5lX2NvbXBvbmVudChzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUucGlwZWxpbmVfd2l0aF9waXBlbGluZV9jb21wb25lbnQucGlwZWxpbmVfd2l0aF9kYXRhX2FzX2lucHV0IGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgcGlwZWxpbmVfd2l0aF9waXBlbGluZV9jb21wb25lbnQsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IHBpcGVsaW5lX3dpdGhfcGlwZWxpbmVfY29tcG9uZW50KGNsaWVudCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3Rfc3Bhcmtfam9iX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5zcGFya19qb2JfaW5fcGlwZWxpbmUucGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZV9mcm9tX3lhbWwgYXMgc3Bhcmtfam9iX2luX3BpcGVsaW5lLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBzcGFya19qb2JfaW5fcGlwZWxpbmUoKQ0KICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQ0KDQogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QNCiAgICBkZWYgdGVzdF9zcGFya19qb2Jfd2l0aF9idWlsZGVyX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5zcGFya19qb2JfaW5fcGlwZWxpbmUucGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZV9mcm9tX2J1aWxkZXIgYXMgc3Bhcmtfam9iX2luX3BpcGVsaW5lLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBzcGFya19qb2JfaW5fcGlwZWxpbmUoKQ0KICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQ0KDQogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QNCiAgICBkZWYgdGVzdF9zcGFya19qb2Jfd2l0aF9tdWx0aXBsZV9ub2RlX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5zcGFya19qb2JfaW5fcGlwZWxpbmUua21lYW5zX3NhbXBsZS5waXBlbGluZSBpbXBvcnQgKA0KICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lX2Zyb21feWFtbCBhcyBzcGFya19qb2JfaW5fcGlwZWxpbmUsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IHNwYXJrX2pvYl9pbl9waXBlbGluZSgpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X3NwYXJrX2pvYl93aXRoX2J1aWxkZXJfaW5fcGlwZWxpbmVfd2l0aG91dF9lbnRyeSgNCiAgICAgICAgc2VsZiwNCiAgICAgICAgY2xpZW50OiBNTENsaWVudCwNCiAgICApIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5zcGFya19qb2JfaW5fcGlwZWxpbmUuaW52YWxpZF9waXBlbGluZSBpbXBvcnQgKA0KICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lX2Zyb21fYnVpbGRlcl93aXRob3V0X2VudHJ5IGFzIHNwYXJrX2pvYl9pbl9waXBlbGluZSwNCiAgICAgICAgKQ0KDQogICAgICAgIHBpcGVsaW5lID0gc3Bhcmtfam9iX2luX3BpcGVsaW5lKCkNCiAgICAgICAgd2l0aCBweXRlc3QucmFpc2VzKEV4Y2VwdGlvbikgYXMgZXg6DQogICAgICAgICAgICBjcmVhdGVkX2pvYiA9IGNsaWVudC5qb2JzLmNyZWF0ZV9vcl91cGRhdGUocGlwZWxpbmUpDQoNCiAgICAgICAgYXNzZXJ0ICgNCiAgICAgICAgICAgICd7XG4gICJyZXN1bHQiOiAiRmFpbGVkIixcbiAgImVycm9ycyI6IFtcbiAgICB7XG4gICAgICAibWVzc2FnZSI6ICJNaXNzaW5nIGRhdGEgZm9yIHJlcXVpcmVkIGZpZWxkLiIsJw0KICAgICAgICAgICAgJ1xuICAgICAgInBhdGgiOiAiam9icy5hZGRfZ3JlZXRpbmdfY29sdW1uLmNvbXBvbmVudC5lbnRyeSIsXG4gICAgICAidmFsdWUiOiBudWxsXG4gICAgfVxuICBdXG59Jw0KICAgICAgICAgICAgPT0gc3RyKGV4LnZhbHVlKQ0KICAgICAgICApDQoNCiAgICAgICAgdmFsaWRhdGlvbl9yZXN1bHQgPSBjbGllbnQuam9icy52YWxpZGF0ZShwaXBlbGluZSkNCiAgICAgICAgYXNzZXJ0IHZhbGlkYXRpb25fcmVzdWx0LnBhc3NlZCBpcyBGYWxzZQ0KICAgICAgICBhc3NlcnQgdmFsaWRhdGlvbl9yZXN1bHQuZXJyb3JfbWVzc2FnZXMgPT0gew0KICAgICAgICAgICAgImpvYnMuYWRkX2dyZWV0aW5nX2NvbHVtbi5jb21wb25lbnQuZW50cnkiOiAiTWlzc2luZyBkYXRhIGZvciByZXF1aXJlZCBmaWVsZC4iLA0KICAgICAgICB9DQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X3NwYXJrX2pvYl93aXRoX2J1aWxkZXJfaW5fcGlwZWxpbmVfd2l0aF9keW5hbWljX2FsbG9jYXRpb25fZGlzYWJsZWQoDQogICAgICAgIHNlbGYsDQogICAgICAgIGNsaWVudDogTUxDbGllbnQsDQogICAgKSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuc3Bhcmtfam9iX2luX3BpcGVsaW5lLmludmFsaWRfcGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZV9mcm9tX2J1aWxkZXJfd2l0aF9keW5hbWljX2FsbG9jYXRpb25fZGlzYWJsZWQgYXMgc3Bhcmtfam9iX2luX3BpcGVsaW5lLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBzcGFya19qb2JfaW5fcGlwZWxpbmUoKQ0KICAgICAgICB3aXRoIHB5dGVzdC5yYWlzZXMoRXhjZXB0aW9uKSBhcyBleDoNCiAgICAgICAgICAgIGNyZWF0ZWRfam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSkNCg0KICAgICAgICBhc3NlcnQgKA0KICAgICAgICAgICAgJ3tcbiAgInJlc3VsdCI6ICJGYWlsZWQiLFxuICAiZXJyb3JzIjogW1xuICAgIHtcbiAgICAgICJtZXNzYWdlIjogIlNob3VsZCBub3Qgc3BlY2lmeSBtaW4gb3IgbWF4ICcNCiAgICAgICAgICAgICdleGVjdXRvcnMgd2hlbiBkeW5hbWljIGFsbG9jYXRpb24gaXMgZGlzYWJsZWQuIixcbicgaW4gc3RyKGV4LnZhbHVlKQ0KICAgICAgICApDQoNCiAgICAgICAgdmFsaWRhdGlvbl9yZXN1bHQgPSBjbGllbnQuam9icy52YWxpZGF0ZShwaXBlbGluZSkNCiAgICAgICAgYXNzZXJ0IHZhbGlkYXRpb25fcmVzdWx0LnBhc3NlZCBpcyBGYWxzZQ0KICAgICAgICBhc3NlcnQgdmFsaWRhdGlvbl9yZXN1bHQuZXJyb3JfbWVzc2FnZXMgPT0gew0KICAgICAgICAgICAgImpvYnMuYWRkX2dyZWV0aW5nX2NvbHVtbi5jb25mIjogIlNob3VsZCBub3Qgc3BlY2lmeSBtaW4gb3IgbWF4IGV4ZWN1dG9ycyAiDQogICAgICAgICAgICAid2hlbiBkeW5hbWljIGFsbG9jYXRpb24gaXMgZGlzYWJsZWQuIiwNCiAgICAgICAgfQ0KDQogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QNCiAgICBkZWYgdGVzdF9kYXRhX3RyYW5zZmVyX2NvcHlfMnVyaWZvbGRlcl9qb2JfaW5fcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToNCiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lLmNvcHlfZGF0YS5waXBlbGluZSBpbXBvcnQgKA0KICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lX2Zyb21feWFtbCBhcyBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSwNCiAgICAgICAgKQ0KDQogICAgICAgIHBpcGVsaW5lID0gZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUoKQ0KICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50LCBza2lwX2NhbmNlbD1UcnVlKQ0KDQogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QNCiAgICBkZWYgdGVzdF9kYXRhX3RyYW5zZmVyX2NvcHlfMnVyaWZvbGRlcl9qb2Jfd2l0aF9idWlsZGVyX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5kYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZS5jb3B5X2RhdGEucGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZV9mcm9tX2J1aWxkZXIgYXMgZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lKCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfZGF0YV90cmFuc2Zlcl9jb3B5X21peHR5cGVfam9iX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5kYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZS5jb3B5X2RhdGEucGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZV9jb3B5X21peHR5cGVfZnJvbV95YW1sIGFzIGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSgpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X2RhdGFfdHJhbnNmZXJfY29weV91cmlmaWxlX2pvYl9pbl9waXBlbGluZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUuY29weV9kYXRhLnBpcGVsaW5lIGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmVfY29weV91cmlmaWxlX2Zyb21feWFtbCBhcyBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSwNCiAgICAgICAgKQ0KDQogICAgICAgIHBpcGVsaW5lID0gZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUoKQ0KICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQ0KDQogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QNCiAgICBkZWYgdGVzdF9kYXRhX3RyYW5zZmVyX2NvcHlfdXJpZm9sZGVyX2pvYl9pbl9waXBlbGluZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUuY29weV9kYXRhLnBpcGVsaW5lIGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmVfY29weV91cmlmb2xkZXJfZnJvbV95YW1sIGFzIGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSgpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X2RhdGFfdHJhbnNmZXJfaW1wb3J0X2ZpbGVzeXN0ZW1fam9iX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5kYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZS5pbXBvcnRfZmlsZV9zeXN0ZW0ucGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZV9mcm9tX2J1aWxkZXIgYXMgZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lKCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfZGF0YV90cmFuc2Zlcl9pbXBvcnRfc3FsX2RhdGFiYXNlX2pvYl9pbl9waXBlbGluZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUuaW1wb3J0X2RhdGFiYXNlLnBpcGVsaW5lIGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmVfZnJvbV9idWlsZGVyX3NxbCBhcyBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSwNCiAgICAgICAgKQ0KDQogICAgICAgIHBpcGVsaW5lID0gZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUoKQ0KICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQ0KDQogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QNCiAgICBkZWYgdGVzdF9kYXRhX3RyYW5zZmVyX2ltcG9ydF9zbm93Zmxha2VfZGF0YWJhc2Vfam9iX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5kYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZS5pbXBvcnRfZGF0YWJhc2UucGlwZWxpbmUgaW1wb3J0ICgNCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZV9mcm9tX2J1aWxkZXIgYXMgZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lKCkNCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgIEBweXRlc3QubWFyay5lMmV0ZXN0DQogICAgZGVmIHRlc3RfZGF0YV90cmFuc2Zlcl9leHBvcnRfc3FsX2RhdGFiYXNlX2pvYl9pbl9waXBlbGluZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUuZXhwb3J0X2RhdGFiYXNlLnBpcGVsaW5lIGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmVfZnJvbV9idWlsZGVyIGFzIGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSgpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KICAgIGRlZiB0ZXN0X2RhdGFfdHJhbnNmZXJfbXVsdGlfam9iX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5kYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZS5waXBlbGluZSBpbXBvcnQgKA0KICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSgpDQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQo=",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "TDs7GLKhKxqQCkOdJ5l/fw==",
        "Date": "Wed, 24 May 2023 03:02:49 GMT",
        "ETag": "\u00220x8DB5C035BE0BD65\u0022",
        "Last-Modified": "Wed, 24 May 2023 03:02:49 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "kihQiUXyICw=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/azureml-blobstore-0bdd51b6-cd9c-4978-b870-99997b393b81/LocalUpload/00000000000000000000000000000000/e2etests/__init__.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "0",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Wed, 24 May 2023 03:02:49 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": null,
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "1B2M2Y8AsgTpgAmY7PhCfg==",
        "Date": "Wed, 24 May 2023 03:02:50 GMT",
        "ETag": "\u00220x8DB5C035C2FBBDC\u0022",
        "Last-Modified": "Wed, 24 May 2023 03:02:50 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "AAAAAAAAAAA=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/azureml-blobstore-0bdd51b6-cd9c-4978-b870-99997b393b81/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_fl.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "10689",
        "Content-MD5": "inmxw/YWaah2Xwl6ksU/EQ==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Wed, 24 May 2023 03:02:49 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": "aW1wb3J0IHB5dGVzdA0KZnJvbSBwYXRobGliIGltcG9ydCBQYXRoDQpmcm9tIGRldnRvb2xzX3Rlc3R1dGlscyBpbXBvcnQgQXp1cmVSZWNvcmRlZFRlc3RDYXNlLCBpc19saXZlDQpmcm9tIGF6dXJlLmNvcmUuZXhjZXB0aW9ucyBpbXBvcnQgUmVzb3VyY2VOb3RGb3VuZEVycm9yDQpmcm9tIC4uX3V0aWwgaW1wb3J0IF9EU0xfVElNRU9VVF9TRUNPTkQNCmZyb20gdGVzdF91dGlsaXRpZXMudXRpbHMgaW1wb3J0IF9QWVRFU1RfVElNRU9VVF9NRVRIT0QNCmZyb20gYXp1cmUuYWkubWwgaW1wb3J0IElucHV0LCBsb2FkX2NvbXBvbmVudA0KZnJvbSB0eXBpbmcgaW1wb3J0IENhbGxhYmxlDQpmcm9tIGF6dXJlLmFpLm1sLmRzbC5fZmxfc2NhdHRlcl9nYXRoZXJfbm9kZSBpbXBvcnQgZmxfc2NhdHRlcl9nYXRoZXINCmZyb20gYXp1cmUuYWkubWwuZW50aXRpZXMuX2Fzc2V0cy5mZWRlcmF0ZWRfbGVhcm5pbmdfc2lsbyBpbXBvcnQgRmVkZXJhdGVkTGVhcm5pbmdTaWxvDQpmcm9tIGF6dXJlLmFpLm1sLmNvbnN0YW50cyBpbXBvcnQgQXNzZXRUeXBlcw0KZnJvbSBhenVyZS5haS5tbC5lbnRpdGllcy5fY3JlZGVudGlhbHMgaW1wb3J0ICgNCiAgICBJZGVudGl0eUNvbmZpZ3VyYXRpb24sDQogICAgSWRlbnRpdHlDb25maWd1cmF0aW9uVHlwZSwNCiAgICBNYW5hZ2VkSWRlbnRpdHlDb25maWd1cmF0aW9uLA0KKQ0KZnJvbSBhenVyZS5haS5tbC5kc2wgaW1wb3J0IHBpcGVsaW5lDQppbXBvcnQgb3MNCmZyb20gYXp1cmUuYWkubWwgaW1wb3J0ICgNCiAgICBNTENsaWVudCwNCikNCg0KDQojIFJFU09VUkNFIE5PVEVTIC0gQXMgYW4gZTJlIHRlc3QgZmlsZSwgdGhpcyBmaWxlIG1ha2VzIGFuZCByZWZlcmVuY2VzIHJlYWwgQU1MIHJlc291cmNlcy4NCiMgQWxsIHJlc291cmNlcyByZWZlcmVuY2VzIGJ5IHRoaXMgZmlsZSBhcmUgY29udGFpbmVkIHdpdGhpbiB0aGUgZm9sbG93aW5nOg0KIyBzdWJzY3JpcHRpb246IGRhdGEgc2NpZW5jZSBWTSBUZWFtIChEU1ZNKQ0KIyByZXNvdXJjZSBncm91cDogZmwtZTJlLXRlc3RpbmctcmcNCiMgd29ya3NwYWNlOiBmbC1lMmUtdGVzdGluZy13cw0KIyBJZiB5b3UncmUgcnVubmluZyB0aGlzIHRlc3QgbG9jYWxseSBpbiBsaXZlIG1vZGUsIG1ha2Ugc3VyZSB5b3UndmUgc2V0IHRoZSBhYm92ZSB2YWx1ZXMgaW4NCiMgeW91ciAuZW52IGZpbGUuDQojIHJlc291cmNlcyBvZiBub3RlOg0KIyAtIG11bHRpcGxlIHN0b3JhZ2UgY29udGFpbmVycw0KIyAtIG11bHRpcGxlIGNvbXB1dGVzIHdpdGggdmFyeWluZyBtYW5hZ2VkIGlkZW50aXRpZXMgdG8gYWxsb3cgYWNjZXNzIHRvIGRpZmZlcmVudCBzdG9yYWdlIGNvbnRhaW5lcnMNCkBweXRlc3QubWFyay50aW1lb3V0KHRpbWVvdXQ9X0RTTF9USU1FT1VUX1NFQ09ORCwgbWV0aG9kPV9QWVRFU1RfVElNRU9VVF9NRVRIT0QpDQpAcHl0ZXN0Lm1hcmsuZTJldGVzdA0KQHB5dGVzdC5tYXJrLmNvcmVfc2RrX3Rlc3QNCmNsYXNzIFRlc3REU0xQaXBlbGluZShBenVyZVJlY29yZGVkVGVzdENhc2UpOg0KICAgICMgREVWIE5PVEU6IFRoaXMgdGVzdCBleHBlY3RzIGEgbG90IG9mIHJlc291cmNlcyB0byBhbHJlYWR5IGV4aXN0IGluIEFNTC4gVGhlIGluaXRpYWwgaW1wbGVtZW50YXRpb24NCiAgICAjIG9mIHRoaXMgdGVzdCBpbXBsZW1lbnRlZCBhbGwgb2YgdGhlc2UgdGhpZ25zIHVuZGVyIHRoZSAnZmwtZTJlLXRlc3RpbmctcmcnIHJlc291cmNlIGdyb3VwIGFuZA0KICAgICMgdGhlICdmbC1lMmUtdGVzdGluZy13cycgd29ya3NwYWNlIGluc2lkZSB0aGF0IFJHLg0KICAgICMgVGhlIG5lZWRlZCByZXNvdXJjZXMgYXJlOg0KICAgICMgLSBJbiB0aGUgd29ya3NwYWNlJ3Mgc3RvcmFnZSBhY2NvdW50LCAzIGNvbnRhaW5lcnMgbmFtZWQgJ3NpbG8tY29udGFpbmVyMScsICdzaWxvLWNvbnRhaW5lcjIzJywNCiAgICAjICAgICAgIGFuZCAnYWdnLWNvbnRhaW5lcicuIEVhY2ggY29udGFpbmVyIG5lZWRzIHRvIGhhdmUgYXNzaWduZWQgdGhlIGJsb2Igb3duZXIgcGVybWlzc2lvbg0KICAgICMgICAgICAgdG8gdGhlICd0ZXN0LW1zaS1pZCcgbWFuYWdlZCBpZGVudGl0eQ0KICAgICMgLSA0IGNvbXB1dGUgY2x1c3RlcnMgaW4gdGhlIHdvcmtzcGFjZSBuYW1lZCBzaWxvQ29tcHV0ZTEvMi8zIGFuZCBhZ2dDb21wdXRlLiBFYWNoIG9mIHdoaWNoDQogICAgIyAgICAgICBoYXMgYmVlbiBhc3NpZ25lZCB0aGUgJ3Rlc3QtbXNpLWlkJyBJRA0KICAgICMgLSA0IGRhdGFzdG9yZXMgY29ubmVjdGVkIHRvIHRoZSBhZm9yZW1lbnRpb25lZCBzdG9yYWdlIGNvbnRhaW5lcnMgbmFtZWQgc2lsb19kYXRhc3RvcmUxLzIvMyBhbmQNCiAgICAjICAgICAgIGFnZ19kYXRhc3RvcmUuDQogICAgQHB5dGVzdC5tYXJrLnNraXBpZigNCiAgICAgICAgY29uZGl0aW9uPW5vdCBpc19saXZlKCksDQogICAgICAgIHJlYXNvbj0oDQogICAgICAgICAgICAiVE9ETyAoMjIzNTAzNCkgVGhlIGNyaXRpY2FsIGNhbGwgdG8gYGNsaWVudC5qb2JzLmNyZWF0ZV9vcl91cGRhdGVgIHNlZW1zIHRvIG1ha2UgZGlmZmVyZW50Ig0KICAgICAgICAgICAgKyAiQVBJIGNhbGxzIGluIHBsYXliYWNrIG1vZGUgY29tcGFyZWQgdG8gcmVjb3JkaW5nIG1vZGUiDQogICAgICAgICksDQogICAgKQ0KICAgIGRlZiB0ZXN0X2ZsX3BpcGVsaW5lKA0KICAgICAgICBzZWxmLA0KICAgICAgICBjbGllbnQ6IE1MQ2xpZW50LA0KICAgICAgICBmZWRlcmF0ZWRfbGVhcm5pbmdfY29tcG9uZW50c19mb2xkZXI6IFBhdGgsDQogICAgICAgIGZlZGVyYXRlZF9sZWFybmluZ19sb2NhbF9kYXRhX2ZvbGRlcjogUGF0aCwNCiAgICApIC0\",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "inmxw/YWaah2Xwl6ksU/EQ==",
        "Date": "Wed, 24 May 2023 03:02:50 GMT",
        "ETag": "\u00220x8DB5C035C2FE2E8\u0022",
        "Last-Modified": "Wed, 24 May 2023 03:02:50 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "d3pe6wBZ/xY=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/azureml-blobstore-0bdd51b6-cd9c-4978-b870-99997b393b81/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_pipeline_with_specific_nodes.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "13161",
        "Content-MD5": "abQ5Cno4tBTZSUpkYp4kKA==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Wed, 24 May 2023 03:02:49 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": "",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "abQ5Cno4tBTZSUpkYp4kKA==",
        "Date": "Wed, 24 May 2023 03:02:50 GMT",
        "ETag": "\u00220x8DB5C035C2FE2E8\u0022",
        "Last-Modified": "Wed, 24 May 2023 03:02:50 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "LAlnIcLWREA=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/azureml-blobstore-0bdd51b6-cd9c-4978-b870-99997b393b81/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_pipeline.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "160871",
        "Content-MD5": "Ug0G12c/xbuqiJL9W/isog==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Wed, 24 May 2023 03:02:49 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": "\u002BIE5vbmU6DQogICAgICAgIGNvbXBvbmVudF9mdW5jID0gbG9hZF9jb21wb25lbnQoDQogICAgICAgICAgICBjbGllbnQ9Y2xpZW50LA0KICAgICAgICAgICAgbmFtZT1oZWxsb193b3JsZF9jb21wb25lbnQubmFtZSwNCiAgICAgICAgICAgIHZlcnNpb249aGVsbG9fd29ybGRfY29tcG9uZW50LnZlcnNpb24sDQogICAgICAgICkNCg0KICAgICAgICBjb21wb25lbnRfbm9kZSA9IGNvbXBvbmVudF9mdW5jKGNvbXBvbmVudF9pbl9udW1iZXI9MTAsIGNvbXBvbmVudF9pbl9wYXRoPWpvYl9pbnB1dCkNCg0KICAgICAgICBjb21wb25lbnRfam9iX2RpY3QgPSBjb21wb25lbnRfbm9kZS5fdG9fcmVzdF9vYmplY3QoKQ0KICAgICAgICBhc3NlcnQgaXNfQVJNX2lkX2Zvcl9yZXNvdXJjZShjb21wb25lbnRfam9iX2RpY3RbImNvbXBvbmVudElkIl0pDQogICAgICAgIG9taXRfZmllbGRzID0gWyJjb21wb25lbnRJZCIsICJfc291cmNlIiwgInByb3BlcnRpZXMiXQ0KICAgICAgICBjb21wb25lbnRfam9iX2RpY3QgPSBweWRhc2gub21pdChjb21wb25lbnRfam9iX2RpY3QsICpvbWl0X2ZpZWxkcykNCiAgICAgICAgYXNzZXJ0IGNvbXBvbmVudF9qb2JfZGljdCA9PSB7DQogICAgICAgICAgICAiaW5wdXRzIjogew0KICAgICAgICAgICAgICAgICJjb21wb25lbnRfaW5fbnVtYmVyIjogeyJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwgInZhbHVlIjogIjEwIn0sDQogICAgICAgICAgICAgICAgImNvbXBvbmVudF9pbl9wYXRoIjogew0KICAgICAgICAgICAgICAgICAgICAiam9iX2lucHV0X3R5cGUiOiAidXJpX2ZpbGUiLA0KICAgICAgICAgICAgICAgICAgICAidXJpIjogImh0dHBzOi8vZHByZXBkYXRhLmJsb2IuY29yZS53aW5kb3dzLm5ldC9kZW1vL1RpdGFuaWMuY3N2IiwNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICJyZXNvdXJjZXMiOiB7Imluc3RhbmNlX2NvdW50IjogMX0sDQogICAgICAgICAgICAidHlwZSI6ICJjb21tYW5kIiwNCiAgICAgICAgfQ0KDQogICAgZGVmIHRlc3RfZGlzdHJpYnV0aW9uX2NvbXBvbmVudHMoc2VsZiwgY2xpZW50OiBNTENsaWVudCwgcmFuZHN0cjogQ2FsbGFibGVbW3N0cl0sIHN0cl0pIC0\u002BIE5vbmU6DQogICAgICAgIG1waV9mdW5jID0gbG9hZF9jb21wb25lbnQoc291cmNlPXN0cihjb21wb25lbnRzX2RpciAvICJoZWxsb3dvcmxkX2NvbXBvbmVudF9tcGkueW1sIikpDQogICAgICAgIHB5dG9yY2hfZnVuYyA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1zdHIoY29tcG9uZW50c19kaXIgLyAiaGVsbG93b3JsZF9jb21wb25lbnRfcHl0b3JjaC55bWwiKSkNCiAgICAgICAgdGVuc29yZmxvd19mdW5jID0gbG9hZF9jb21wb25lbnQoc291cmNlPXN0cihjb21wb25lbnRzX2RpciAvICJoZWxsb3dvcmxkX2NvbXBvbmVudF90ZW5zb3JmbG93LnltbCIpKQ0KDQogICAgICAgIEBkc2wucGlwZWxpbmUoDQogICAgICAgICAgICBuYW1lPXJhbmRzdHIoInBpcGVsaW5lX25hbWUiKSwNCiAgICAgICAgICAgIGRlc2NyaXB0aW9uPSJUaGUgaGVsbG8gd29ybGQgcGlwZWxpbmUgam9iIiwNCiAgICAgICAgICAgIHRhZ3M9eyJvd25lciI6ICJzZGt0ZWFtIiwgInRhZyI6ICJ0YWd2YWx1ZSJ9LA0KICAgICAgICAgICAgY29tcHV0ZT0iZ3B1LWNsdXN0ZXIiLA0KICAgICAgICAgICAgZXhwZXJpbWVudF9uYW1lPWV4cGVyaW1lbnRfbmFtZSwNCiAgICAgICAgKQ0KICAgICAgICBkZWYgcGlwZWxpbmVfZGlzdHJpYnV0aW9uX2NvbXBvbmVudHMoam9iX2luX251bWJlciwgam9iX2luX3BhdGgpOg0KICAgICAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X21waSA9IG1waV9mdW5jKGNvbXBvbmVudF9pbl9udW1iZXI9am9iX2luX251bWJlciwgY29tcG9uZW50X2luX3BhdGg9am9iX2luX3BhdGgpDQogICAgICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfbXBpLmRpc3RyaWJ1dGlvbiA9IE1waURpc3RyaWJ1dGlvbigpDQogICAgICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfbXBpLmRpc3RyaWJ1dGlvbi5wcm9jZXNzX2NvdW50X3Blcl9pbnN0YW5jZSA9IDINCg0KICAgICAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X3B5dG9yY2ggPSBweXRvcmNoX2Z1bmMoDQogICAgICAgICAgICAgICAgY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5fcGF0aA0KICAgICAgICAgICAgKQ0KICAgICAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X3B5dG9yY2guZGlzdHJpYnV0aW9uID0gUHlUb3JjaERpc3RyaWJ1dGlvbigpDQogICAgICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfcHl0b3JjaC5kaXN0cmlidXRpb24ucHJvY2Vzc19jb3VudF9wZXJfaW5zdGFuY2UgPSAyDQoNCiAgICAgICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudF90ZW5zb3JmbG93ID0gdGVuc29yZmxvd19mdW5jKA0KICAgICAgICAgICAgICAgIGNvbXBvbmVudF9pbl9udW1iZXI9am9iX2luX251bWJlciwgY29tcG9uZW50X2luX3BhdGg9am9iX2luX3BhdGgNCiAgICAgICAgICAgICkNCiAgICAgICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudF90ZW5zb3JmbG93LmRpc3RyaWJ1dGlvbiA9IFRlbnNvckZsb3dEaXN0cmlidXRpb24oKQ0KICAgICAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X3RlbnNvcmZsb3cuZGlzdHJpYnV0aW9uLndvcmtlcl9jb3VudCA9IDINCg0KICAgICAgICBwaXBlbGluZSA9IHBpcGVsaW5lX2Rpc3RyaWJ1dGlvbl9jb21wb25lbnRzKDEwLCBqb2JfaW5wdXQpDQogICAgICAgIGNsaWVudC5qb2JzLmNyZWF0ZV9vcl91cGRhdGUocGlwZWxpbmUsIGV4cGVyaW1lbnRfbmFtZT1leHBlcmltZW50X25hbWUpDQoNCiAgICBkZWYgdGVzdF9jb21wb25lbnRfd2l0aF9iaW5kaW5nKHNlbGYsIGNsaWVudDogTUxDbGllbnQsIHJhbmRzdHI6IENhbGxhYmxlW1tzdHJdLCBzdHJdKToNCiAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X3lhbWwgPSBzdHIoY29tcG9uZW50c19kaXIgLyAiaGVsbG93b3JsZF9jb21wb25lbnQueW1sIikNCiAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X2Z1bmMgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9aGVsbG9fd29ybGRfY29tcG9uZW50X3lhbWwpDQoNCiAgICAgICAgbWVyZ2Vfb3V0cHV0c19jb21wb25lbnRfeWFtbCA9IHN0cihjb21wb25lbnRzX2RpciAvICJtZXJnZV9vdXRwdXRzX2NvbXBvbmVudC55bWwiKQ0KICAgICAgICBtZXJnZV9vdXRwdXRzX2NvbXBvbmVudF9mdW5jID0gbG9hZF9jb21wb25lbnQoc291cmNlPW1lcmdlX291dHB1dHNfY29tcG9uZW50X3lhbWwpDQoNCiAgICAgICAgQGRzbC5waXBlbGluZSgNCiAgICAgICAgICAgIG5hbWU9cmFuZHN0cigicGlwZWxpbmVfbmFtZSIpLA0KICAgICAgICAgICAgZGVzY3JpcHRpb249IlRoZSBoZWxsbyB3b3JsZCBwaXBlbGluZSBqb2IiLA0KICAgICAgICAgICAgdGFncz17Im93bmVyIjogInNka3RlYW0iLCAidGFnIjogInRhZ3ZhbHVlIn0sDQogICAgICAgICAgICBjb21wdXRlPSJjcHUtY2x1c3RlciIsDQogICAgICAgICkNCiAgICAgICAgZGVmIHBpcGVsaW5lX3dpdGhfYmluZGluZyhqb2JfaW5fbnVtYmVyLCBqb2JfaW5fb3RoZXJfbnVtYmVyLCBqb2JfaW5fcGF0aCk6DQogICAgICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfMSA9IGhlbGxvX3dvcmxkX2NvbXBvbmVudF9mdW5jKA0KICAgICAgICAgICAgICAgIGNvbXBvbmVudF9pbl9udW1iZXI9am9iX2luX251bWJlciwgY29tcG9uZW50X2luX3BhdGg9am9iX2luX3BhdGgNCiAgICAgICAgICAgICkNCiAgICAgICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudF8yID0gaGVsbG9fd29ybGRfY29tcG9uZW50X2Z1bmMoDQogICAgICAgICAgICAgICAgY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5fcGF0aA0KICAgICAgICAgICAgKQ0KDQogICAgICAgICAgICAjIGNvbmZpZ3VyZSBjb21wb25lbnQgb3ZlcnJpZGVzLCBjdXJhdGVkIFNESyBub3Qgc3VwcG9ydGVkIHlldA0KICAgICAgICAgICAgIyBoZWxsb193b3JsZF9jb21wb25lbnRfMi5yZXNvdXJjZXMuaW5zdGFuY2VfY291bnQgPSAyDQoNCiAgICAgICAgICAgICMgY29uZmlndXJlIGNvbXBvbmVudCBvdXRwdXRzDQogICAgICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfMS5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aC5tb2RlID0gIlVwbG9hZCINCiAgICAgICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudF8yLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRoLm1vZGUgPSAiVXBsb2FkIg0KDQogICAgICAgICAgICBtZXJnZV9jb21wb25lbnRfb3V0cHV0cyA9IG1lcmdlX291dHB1dHNfY29tcG9uZW50X2Z1bmMoDQogICAgICAgICAgICAgICAgY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fb3RoZXJfbnVtYmVyLA0KICAgICAgICAgICAgICAgIGNvbXBvbmVudF9pbl9wYXRoXzE9aGVsbG9fd29ybGRfY29tcG9uZW50XzEub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgsDQogICAgICAgICAgICAgICAgY29tcG9uZW50X2luX3BhdGhfMj1oZWxsb193b3JsZF9jb21wb25lbnRfMi5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aCwNCiAgICAgICAgICAgICkNCiAgICAgICAgICAgIHJldHVybiB7DQogICAgICAgICAgICAgICAgImpvYl9vdXRfZGF0YV8xIjogbWVyZ2VfY29tcG9uZW50X291dHB1dHMub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGhfMSwNCiAgICAgICAgICAgICAgICAiam9iX291dF9kYXRhXzIiOiBtZXJnZV9jb21wb25lbnRfb3V0cHV0cy5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aF8yLA0KICAgICAgICAgICAgfQ0KDQogICAgICAgIHBpcGVsaW5lID0gcGlwZWxpbmVfd2l0aF9iaW5kaW5nKDEwLCAxNiwgam9iX2lucHV0KQ0KICAgICAgICBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKA0KICAgICAgICAgICAgcGlwZWxpbmUsDQogICAgICAgICAgICBleHBlcmltZW50X25hbWU9ImRzbF9waXBlbGluZV9lMmUiLA0KICAgICAgICApDQoNCiAgICBkZWYgdGVzdF9kYXRhX2lucHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\\\u002BIE5vbmU6DQogICAgICAgIGRlZmF1bHRfb3B0aW9uYWxfZnVuYyA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1zdHIoY29tcG9uZW50c19kaXIgLyAiZGVmYXVsdF9vcHRpb25hbF9jb21wb25lbnQueW1sIikpDQoNCiAgICAgICAgQGdyb3VwDQogICAgICAgIGNsYXNzIFN1Ykdyb3VwOg0KICAgICAgICAgICAgcmVxdWlyZWRfcGFyYW06IHN0cg0KDQogICAgICAgIEBncm91cA0KICAgICAgICBjbGFzcyBHcm91cDoNCiAgICAgICAgICAgIHN1YjogU3ViR3JvdXANCiAgICAgICAgICAgIG5vZGVfY29tcHV0ZTogc3RyID0gImNwdS1jbHVzdGVyIg0KDQogICAgICAgIEBkc2wucGlwZWxpbmUoKQ0KICAgICAgICBkZWYgc3ViX3BpcGVsaW5lX2Z1bmMoDQogICAgICAgICAgICByZXF1aXJlZF9pbnB1dDogSW5wdXQsDQogICAgICAgICAgICBncm91cDogR3JvdXAsDQogICAgICAgICAgICBzdWJfZ3JvdXA6IFN1Ykdyb3VwLA0KICAgICAgICApOg0KICAgICAgICAgICAgZGVmYXVsdF9vcHRpb25hbF9mdW5jKA0KICAgICAgICAgICAgICAgIHJlcXVpcmVkX2lucHV0PXJlcXVpcmVkX2lucHV0LA0KICAgICAgICAgICAgICAgIHJlcXVpcmVkX3BhcmFtPWdyb3VwLnN1Yi5yZXF1aXJlZF9wYXJhbSwNCiAgICAgICAgICAgICkNCiAgICAgICAgICAgIG5vZGUyID0gZGVmYXVsdF9vcHRpb25hbF9mdW5jKA0KICAgICAgICAgICAgICAgIHJlcXVpcmVkX2lucHV0PXJlcXVpcmVkX2lucHV0LA0KICAgICAgICAgICAgICAgIHJlcXVpcmVkX3BhcmFtPXN1Yl9ncm91cC5yZXF1aXJlZF9wYXJhbSwNCiAgICAgICAgICAgICkNCiAgICAgICAgICAgIG5vZGUyLmNvbXB1dGUgPSBncm91cC5ub2RlX2NvbXB1dGUNCg0KICAgICAgICBAZHNsLnBpcGVsaW5lKGRlZmF1bHRfY29tcHV0ZT0iY3B1LWNsdXN0ZXIiKQ0KICAgICAgICBkZWYgcm9vdF9waXBlbGluZV93aXRoX2dyb3VwKA0KICAgICAgICAgICAgcl9yZXF1aXJlZF9pbnB1dDogSW5wdXQsDQogICAgICAgICAgICByX2dyb3VwOiBHcm91cCwNCiAgICAgICAgKToNCiAgICAgICAgICAgIHN1Yl9waXBlbGluZV9mdW5jKHJlcXVpcmVkX2lucHV0PXJfcmVxdWlyZWRfaW5wdXQsIGdyb3VwPXJfZ3JvdXAsIHN1Yl9ncm91cD1yX2dyb3VwLnN1YikNCg0KICAgICAgICBqb2IgPSByb290X3BpcGVsaW5lX3dpdGhfZ3JvdXAoDQogICAgICAgICAgICByX3JlcXVpcmVkX2lucHV0PUlucHV0KHR5cGU9InVyaV9maWxlIiwgcGF0aD0iaHR0cHM6Ly9kcHJlcGRhdGEuYmxvYi5jb3JlLndpbmRvd3MubmV0L2RlbW8vVGl0YW5pYy5jc3YiKSwNCiAgICAgICAgICAgIHJfZ3JvdXA9R3JvdXAoc3ViPVN1Ykdyb3VwKHJlcXVpcmVkX3BhcmFtPSJoZWxsbyIpKSwNCiAgICAgICAgKQ0KICAgICAgICByZXN0X2pvYiA9IGFzc2VydF9qb2JfY2FuY2VsKGpvYiwgY2xpZW50KQ0KICAgICAgICBhc3NlcnQgbGVuKHJlc3Rfam9iLmlucHV0cykgPT0gMg0KICAgICAgICByZXN0X2pvYl9kaWN0ID0gcmVzdF9qb2IuX3RvX2RpY3QoKQ0KICAgICAgICBhc3NlcnQgcmVzdF9qb2JfZGljdFsiaW5wdXRzIl0gPT0gew0KICAgICAgICAgICAgInJfcmVxdWlyZWRfaW5wdXQiOiB7DQogICAgICAgICAgICAgICAgIm1vZGUiOiAicm9fbW91bnQiLA0KICAgICAgICAgICAgICAgICJ0eXBlIjogInVyaV9maWxlIiwNCiAgICAgICAgICAgICAgICAicGF0aCI6ICJhenVyZW1sOmh0dHBzOi8vZHByZXBkYXRhLmJsb2IuY29yZS53aW5kb3dzLm5ldC9kZW1vL1RpdGFuaWMuY3N2IiwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAicl9ncm91cC5zdWIucmVxdWlyZWRfcGFyYW0iOiAiaGVsbG8iLA0KICAgICAgICAgICAgInJfZ3JvdXAubm9kZV9jb21wdXRlIjogImNwdS1jbHVzdGVyIiwNCiAgICAgICAgfQ0KICAgICAgICBhc3NlcnQgcmVzdF9qb2JfZGljdFsiam9icyJdWyJzdWJfcGlwZWxpbmVfZnVuYyJdWyJpbnB1dHMiXSA9PSB7DQogICAgICAgICAgICAicmVxdWlyZWRfaW5wdXQiOiB7InBhdGgiOiAiJHt7cGFyZW50LmlucHV0cy5yX3JlcXVpcmVkX2lucHV0fX0ifSwNCiAgICAgICAgICAgICJncm91cC5zdWIucmVxdWlyZWRfcGFyYW0iOiB7InBhdGgiOiAiJHt7cGFyZW50LmlucHV0cy5yX2dyb3VwLnN1Yi5yZXF1aXJlZF9wYXJhbX19In0sDQogICAgICAgICAgICAiZ3JvdXAubm9kZV9jb21wdXRlIjogeyJwYXRoIjogIiR7e3BhcmVudC5pbnB1dHMucl9ncm91cC5ub2RlX2NvbXB1dGV9fSJ9LA0KICAgICAgICAgICAgInN1Yl9ncm91cC5yZXF1aXJlZF9wYXJhbSI6IHsicGF0aCI6ICIke3twYXJlbnQuaW5wdXRzLnJfZ3JvdXAuc3ViLnJlcXVpcmVkX3BhcmFtfX0ifSwNCiAgICAgICAgfQ0KDQogICAgZGVmIHRlc3RfcGlwZWxpbmVfd2l0aF9ub25lX3BhcmFtZXRlcl9oYXNfZGVmYXVsdF9vcHRpb25hbF90cnVlKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\\u002BIE5vbmU6DQogICAgICAgIGNvbXBvbmVudF95YW1sID0gY29tcG9uZW50c19kaXIgLyAiaGVsbG93b3JsZF9jb21wb25lbnQueW1sIg0KICAgICAgICBjb21wb25lbnRfZnVuYzEgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9Y29tcG9uZW50X3lhbWwsIHBhcmFtc19vdmVycmlkZT1beyJuYW1lIjogcmFuZHN0cigiY29tcG9uZW50X25hbWUiKX1dKQ0KICAgICAgICBjb21wb25lbnRfZnVuYzIgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9Y29tcG9uZW50X3lhbWwsIHBhcmFtc19vdmVycmlkZT1beyJuYW1lIjogcmFuZHN0cigiY29tcG9uZW50X25hbWUiKX1dKQ0KDQogICAgICAgIEBkc2wucGlwZWxpbmUoDQogICAgICAgICAgICBuYW1lPXJhbmRzdHIoInBpcGVsaW5lX25hbWUiKSwNCiAgICAgICAgICAgIGRlc2NyaXB0aW9uPSJUaGUgaGVsbG8gd29ybGQgcGlwZWxpbmUgam9iIiwNCiAgICAgICAgICAgIHRhZ3M9eyJvd25lciI6ICJzZGt0ZWFtIiwgInRhZyI6ICJ0YWd2YWx1ZSJ9LA0KICAgICAgICAgICAgY29tcHV0ZT0iY3B1LWNsdXN0ZXIiLA0KICAgICAgICAgICAgZXhwZXJpbWVudF9uYW1lPWV4cGVyaW1lbnRfbmFtZSwNCiAgICAgICAgICAgIGNvbnRpbnVlX3J1bl9vbl9zdGVwX2ZhaWx1cmU9VHJ1ZSwNCiAgICAgICAgKQ0KICAgICAgICBkZWYgcGlwZWxpbmUoam9iX2luX251bWJlciwgam9iX2luX290aGVyX251bWJlciwgam9iX2luX3BhdGgpOg0KICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMxKGNvbXBvbmVudF9pbl9udW1iZXI9am9iX2luX251bWJlciwgY29tcG9uZW50X2luX3BhdGg9am9iX2luX3BhdGgpDQogICAgICAgICAgICBjb21wb25lbnRfZnVuYzIoY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fb3RoZXJfbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5fcGF0aCkNCg0KICAgICAgICBpbnB1dF9udW1iZXIgPSByYW5kaW50KCkNCiAgICAgICAgcGlwZWxpbmUgPSBwaXBlbGluZShpbnB1dF9udW1iZXIsIGlucHV0X251bWJlciwgam9iX2lucHV0KQ0KICAgICAgICBqb2IgPSBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKHBpcGVsaW5lKQ0KICAgICAgICB3aGlsZSBUcnVlOg0KICAgICAgICAgICAgc2xlZXBfaWZfbGl2ZSgzMCkNCiAgICAgICAgICAgIGNoaWxkcmVuID0gY2xpZW50LmpvYnMubGlzdChwYXJlbnRfam9iX25hbWU9am9iLm5hbWUpDQogICAgICAgICAgICBjaGlsZHJlbiA9IGxpc3QoY2hpbGRyZW4pDQogICAgICAgICAgICBpZiBsZW4oY2hpbGRyZW4pID09IDI6DQogICAgICAgICAgICAgICAgYnJlYWsNCg0KICAgICAgICBhc3NlcnQgbGVuKGNoaWxkcmVuKSA9PSAyDQogICAgICAgIGNoaWxkMCwgY2hpbGQxID0gY2hpbGRyZW4NCiAgICAgICAgIyBjaGlsZHJlbiBzZXF1ZW5jZSBpcyBub3QgZ3VhcmFudGVlZCwgc28gd2UgbmVlZCB0byBjaGVjayBib3RoDQogICAgICAgIGlmIFBpcGVsaW5lQ29uc3RhbnRzLlJFVVNFRF9GTEFHX0ZJRUxEIGluIGNoaWxkMC5wcm9wZXJ0aWVzLmtleXMoKToNCiAgICAgICAgICAgIGFzc2VydCBjaGlsZDAucHJvcGVydGllc1tQaXBlbGluZUNvbnN0YW50cy5SRVVTRURfRkxBR19GSUVMRF0gPT0gUGlwZWxpbmVDb25zdGFudHMuUkVVU0VEX0ZMQUdfVFJVRQ0KICAgICAgICBlbGlmIFBpcGVsaW5lQ29uc3RhbnRzLlJFVVNFRF9GTEFHX0ZJRUxEIGluIGNoaWxkMS5wcm9wZXJ0aWVzLmtleXMoKToNCiAgICAgICAgICAgIGFzc2VydCBjaGlsZDEucHJvcGVydGllc1tQaXBlbGluZUNvbnN0YW50cy5SRVVTRURfRkxBR19GSUVMRF0gPT0gUGlwZWxpbmVDb25zdGFudHMuUkVVU0VEX0ZMQUdfVFJVRQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgYXNzZXJ0IEZhbHNlLCAiTmVpdGhlciBjaGlsZCByZXVzZXMuIg0KDQogICAgZGVmIHRlc3RfcGlwZWxpbmVfd2l0aF9jb21wb25lbnRfaW5wdXRfbmFtZV9jYXNlKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudF9mdW5jID0gbG9hZF9jb21wb25lbnQoDQogICAgICAgICAgICBzb3VyY2U9c3RyKGNvbXBvbmVudHNfZGlyIC8gImhlbGxvd29ybGRfY29tcG9uZW50X3dpdGhfdXBwZXJjYXNlX2lucHV0LnltbCIpDQogICAgICAgICkNCg0KICAgICAgICAjIGlucHV0IG5hbWUgaXMgdGhlIHNhbWUgd2l0aCB5YW1sIGRlZmluaXRpb24NCiAgICAgICAgQGRzbC5waXBlbGluZShkZWZhdWx0X2NvbXB1dGU9ImNwdS1jbHVzdGVyIikNCiAgICAgICAgZGVmIGhlbGxvX3dvcmxkX3BpcGVsaW5lKGNvbXBvbmVudF9pbl9udW1iZXIsIGNvbXBvbmVudF9pbl9wYXRoKToNCiAgICAgICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudF9mdW5jKGNvbXBvbmVudF9Jbl9udW1iZXI9Y29tcG9uZW50X2luX251bWJlciwgY29tcG9uZW50X2luX3BhdGg9Y29tcG9uZW50X2luX3BhdGgpDQoNCiAgICAgICAgcGlwZWxpbmUgPSBoZWxsb193b3JsZF9waXBlbGluZShjb21wb25lbnRfaW5fbnVtYmVyPTEwLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5wdXQpDQogICAgICAgIHBpcGVsaW5lX2pvYiA9IGNsaWVudC5qb2JzLmNyZWF0ZV9vcl91cGRhdGUocGlwZWxpbmUsIGV4cGVyaW1lbnRfbmFtZT1leHBlcmltZW50X25hbWUpDQogICAgICAgIGFzc2VydCAiY29tcG9uZW50X0luX251bWJlciIgaW4gbmV4dChwaXBlbGluZV9qb2Iuam9icy52YWx1ZXMoKS5fX2l0ZXJfXygpKS5pbnB1dHMNCg0KICAgICAgICAjIGlucHV0IG5hbWUgaXMgbG93ZXIgY2FzZQ0KICAgICAgICBAZHNsLnBpcGVsaW5lKGRlZmF1bHRfY29tcHV0ZT0iY3B1LWNsdXN0ZXIiKQ0KICAgICAgICBkZWYgaGVsbG9fd29ybGRfcGlwZWxpbmUoY29tcG9uZW50X2luX251bWJlciwgY29tcG9uZW50X2luX3BhdGgpOg0KICAgICAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X2Z1bmMoY29tcG9uZW50X2luX251bWJlcj1jb21wb25lbnRfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1jb21wb25lbnRfaW5fcGF0aCkNCg0KICAgICAgICBwaXBlbGluZSA9IGhlbGxvX3dvcmxkX3BpcGVsaW5lKGNvbXBvbmVudF9pbl9udW1iZXI9MTAsIGNvbXBvbmVudF9pbl9wYXRoPWpvYl9pbnB1dCkNCiAgICAgICAgcGlwZWxpbmVfam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSwgZXhwZXJpbWVudF9uYW1lPWV4cGVyaW1lbnRfbmFtZSkNCiAgICAgICAgYXNzZXJ0ICJjb21wb25lbnRfSW5fbnVtYmVyIiBpbiBuZXh0KHBpcGVsaW5lX2pvYi5qb2JzLnZhbHVlcygpLl9faXRlcl9fKCkpLmlucHV0cw0KDQogICAgICAgICMgaW5wdXQgbmFtZSBpcyBlcXVhbCB0byB5YW1sIGRlZmluaXRpb24gaW5wdXQgaWYgYm90aCBjaGFuZ2UgdG8gbG93ZXIgY2FzZQ0KICAgICAgICBAZHNsLnBpcGVsaW5lKGRlZmF1bHRfY29tcHV0ZT0iY3B1LWNsdXN0ZXIiKQ0KICAgICAgICBkZWYgaGVsbG9fd29ybGRfcGlwZWxpbmUoY29tcG9uZW50X2luX251bWJlciwgY29tcG9uZW50X2luX3BhdGgpOg0KICAgICAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X2Z1bmMoY29tcG9uZW50X0luX051bWJlcj1jb21wb25lbnRfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1jb21wb25lbnRfaW5fcGF0aCkNCg0KICAgICAgICBwaXBlbGluZSA9IGhlbGxvX3dvcmxkX3BpcGVsaW5lKGNvbXBvbmVudF9pbl9udW1iZXI9MTAsIGNvbXBvbmVudF9pbl9wYXRoPWpvYl9pbnB1dCkNCiAgICAgICAgcGlwZWxpbmVfam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSwgZXhwZXJpbWVudF9uYW1lPWV4cGVyaW1lbnRfbmFtZSkNCiAgICAgICAgYXNzZXJ0ICJjb21wb25lbnRfSW5fbnVtYmVyIiBpbiBuZXh0KHBpcGVsaW5lX2pvYi5qb2JzLnZhbHVlcygpLl9faXRlcl9fKCkpLmlucHV0cw0KDQogICAgICAgICMgdHdvIGlkZW50aWNhbCBpbnB1dCBhcmUgZ2l2ZW4gaWYgaWdub3JlIGNhc2UNCiAgICAgICAgQGRzbC5waXBlbGluZShkZWZhdWx0X2NvbXB1dGU9ImNwdS1jbHVzdGVyIikNCiAgICAgICAgZGVmIGhlbGxvX3dvcmxkX3BpcGVsaW5lKGNvbXBvbmVudF9pbl9udW1iZXIsIGNvbXBvbmVudF9pbl9wYXRoKToNCiAgICAgICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudF9mdW5jKGNvbXBvbmVudF9Jbl9udW1iZXI9Y29tcG9uZW50X2luX251bWJlciwgY29tcG9uZW50X2luX251bWJlcj1jb21wb25lbnRfaW5fcGF0aCkNCg0KICAgICAgICB3aXRoIHB5dGVzdC5yYWlzZXMoVmFsaWRhdGlvbkV4Y2VwdGlvbikgYXMgZXg6DQogICAgICAgICAgICBoZWxsb193b3JsZF9waXBlbGluZShjb21wb25lbnRfaW5fbnVtYmVyPTEwLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5wdXQpDQogICAgICAgIGFzc2VydCAoDQogICAgICAgICAgICAiSW52YWxpZCBjb21wb25lbnQgaW5wdXQgbmFtZXMgJ2NvbXBvbmVudF9pbl9udW1iZXInIGFuZCAnY29tcG9uZW50X0luX251bWJlcicsIHdoaWNoIGFyZSBlcXVhbCINCiAgICAgICAgICAgIGluIGV4LnZhbHVlLm1lc3NhZ2UNCiAgICAgICAgKQ0KDQogICAgZGVmIHRlc3RfcGlwZWxpbmVfam9iX2hlbHBfZnVuY3Rpb24oc2VsZiwgY2xpZW50OiBNTENsaWVudCk6DQogICAgICAgIHlhbWxfZmlsZSA9ICIuL3Rlc3RzL3Rlc3RfY29uZmlncy9jb21wb25lbnRzL2hlbGxvd29ybGRfY29tcG9uZW50LnltbCINCg0KICAgICAgICBAZHNsLnBpcGVsaW5lKGRlZmF1bHRfY29tcHV0ZT0iY3B1LWNsdXN0ZXIiKQ0KICAgICAgICBkZWYgcGlwZWxpbmUobnVtYmVyLCBwYXRoKToNCiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jID0gbG9hZF9jb21wb25lbnQoc291cmNlPXlhbWxfZmlsZSkNCiAgICAgICAgICAgIG5vZGUxID0gY29tcG9uZW50X2Z1bmMoY29tcG9uZW50X2luX251bWJlcj1udW1iZXIsIGNvbXBvbmVudF9pbl9wYXRoPXBhdGgpDQogICAgICAgICAgICByZXR1cm4geyJwaXBlbGluZV9vdXRwdXQiOiBub2RlMS5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aH0NCg0KICAgICAgICBwaXBlbGluZTEgPSBwaXBlbGluZSgxMCwgam9iX2lucHV0KQ0KICAgICAgICBwaXBlbGluZTEgPSBjbGllbnQuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZTEpDQogICAgICAgIHdpdGggcGF0Y2goInN5cy5zdGRvdXQiLCBuZXc9U3RyaW5nSU8oKSkgYXMgc3RkX291dDoNCiAgICAgICAgICAgIHByaW50KHBpcGVsaW5lMSkNCiAgICAgICAgICAgIGFzc2VydCAoDQogICAgICAgICAgICAgICAgImRpc3BsYXlfbmFtZTogcGlwZWxpbmVcbnR5cGU6IHBpcGVsaW5lXG5pbnB1dHM6XG4gIG51bWJlcjogJzEwJ1xuICBwYXRoOlxuICAgIG1vZGU6IHJvX21vdW50XG4gICAgdHlwZTogdXJpX2ZpbGVcbiAgICBwYXRoOiINCiAgICAgICAgICAgICAgICBpbiBzdGRfb3V0LmdldHZhbHVlKCkNCiAgICAgICAgICAgICkNCg0KICAgIGRlZiB0ZXN0X25vZGVfcHJvcGVydHlfc2V0dGluZ192YWxpZGF0aW9uKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIHBhdGggPSAiLi90ZXN0cy90ZXN0X2NvbmZpZ3MvY29tcG9uZW50cy9oZWxsb3dvcmxkX2NvbXBvbmVudC55bWwiDQogICAgICAgIGNvbXBvbmVudF9mdW5jMSA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1wYXRoKQ0KDQogICAgICAgIEBkc2wucGlwZWxpbmUoKQ0KICAgICAgICBkZWYgcGlwZWxpbmUoY29tcG9uZW50X2luX251bWJlciwgY29tcG9uZW50X2luX3BhdGgpOg0KICAgICAgICAgICAgbm9kZTEgPSBjb21wb25lbnRfZnVuYzEoY29tcG9uZW50X2luX251bWJlcj1jb21wb25lbnRfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1jb21wb25lbnRfaW5fcGF0aCkNCiAgICAgICAgICAgIG5vZGUxLmplZmZfc3BlY2lhbF9vcHRpb24uZm9vID0gImJhciINCiAgICAgICAgICAgIG5vZGUxLmNvbXB1dGUgPSAiY3B1LWNsdXN0ZXIiDQoNCiAgICAgICAgZHNsX3BpcGVsaW5lOiBQaXBlbGluZUpvYiA9IHBpcGVsaW5lKDEwLCBqb2JfaW5wdXQpDQogICAgICAgIHdpdGggcGF0Y2goImF6dXJlLmFpLm1sLmVudGl0aWVzLl92YWxpZGF0aW9uLm1vZHVsZV9sb2dnZXIuaW5mbyIpIGFzIG1vY2tfbG9nZ2luZzoNCiAgICAgICAgICAgIF8gPSBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKGRzbF9waXBlbGluZSkNCiAgICAgICAgICAgIG1vY2tfbG9nZ2luZy5hc3NlcnRfY2FsbGVkX3dpdGgoIldhcm5pbmdzOiBbam9icy5ub2RlMS5qZWZmX3NwZWNpYWxfb3B0aW9uOiBVbmtub3duIGZpZWxkLl0iKQ0KDQogICAgZGVmIHRlc3RfYW5vbl9jb21wb25lbnRfaW5fcGlwZWxpbmUoDQogICAgICAgIHNlbGYsIGNsaWVudDogTUxDbGllbnQsIHJhbmRzdHI6IENhbGxhYmxlW1tzdHJdLCBzdHJdLCBoZWxsb193b3JsZF9jb21wb25lbnQ6IENvbXBvbmVudA0KICAgICkgLT4gTm9uZToNCiAgICAgICAgaGVsbG9fd29ybGRfZnVuYyA9IGxvYWRfY29tcG9uZW50KA0KICAgICAgICAgICAgY2xpZW50PWNsaWVudCwgbmFtZT1oZWxsb193b3JsZF9jb21wb25lbnQubmFtZSwgdmVyc2lvbj1oZWxsb193b3JsZF9jb21wb25lbnQudmVyc2lvbg0KICAgICAgICApDQogICAgICAgIG9yaWdpbl9pZCA9IGhlbGxvX3dvcmxkX2Z1bmMuaWQNCiAgICAgICAgbXBpX2Z1bmMgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9c3RyKGNvbXBvbmVudHNfZGlyIC8gImhlbGxvd29ybGRfY29tcG9uZW50X21waS55bWwiKSkNCiAgICAgICAgYXNzZXJ0IG1waV9mdW5jLl92YWxpZGF0ZSgpLnBhc3NlZA0KDQogICAgICAgIGludmFsaWRfY29tcG9uZW50X25hbWUgPSAiX2ludmFsaWQiDQoNCiAgICAgICAgIyBuYW1lIG9mIGFub255bW91cyBjb21wb25lbnQgaW4gcGlwZWxpbmUgam9iIHNob3VsZCBiZSBvdmVyd3JpdHRlbg0KICAgICAgICBtcGlfZnVuYy5uYW1lID0gaW52YWxpZF9jb21wb25lbnRfbmFtZQ0KICAgICAgICBhc3NlcnQgbm90IG1waV9mdW5jLl92YWxpZGF0ZSgpLnBhc3NlZA0KDQogICAgICAgIEBkc2wucGlwZWxpbmUoDQogICAgICAgICAgICBuYW1lPXJhbmRzdHIoInBpcGVsaW5lX25hbWUiKSwNCiAgICAgICAgICAgIGRlc2NyaXB0aW9uPSJUaGUgaGVsbG8gd29ybGQgcGlwZWxpbmUgam9iIiwNCiAgICAgICAgICAgIHRhZ3M9eyJvd25lciI6ICJzZGt0ZWFtIiwgInRhZyI6ICJ0YWd2YWx1ZSJ9LA0KICAgICAgICAgICAgY29tcHV0ZT0iZ3B1LWNsdXN0ZXIiLA0KICAgICAgICAgICAgZXhwZXJpbWVudF9uYW1lPWV4cGVyaW1lbnRfbmFtZSwNCiAgICAgICAgICAgIGNvbnRpbnVlX29uX3N0ZXBfZmFpbHVyZT1GYWxzZSwNCiAgICAgICAgKQ0KICAgICAgICBkZWYgcGlwZWxpbmVfZGlzdHJpYnV0aW9uX2NvbXBvbmVudHMoam9iX2luX251bWJlciwgam9iX2luX3BhdGgpOg0KICAgICAgICAgICAgaGVsbG93b3JsZF9jb21wb25lbnQgPSBoZWxsb193b3JsZF9mdW5jKGNvbXBvbmVudF9pbl9udW1iZXI9am9iX2luX251bWJlciwgY29tcG9uZW50X2luX3BhdGg9am9iX2luX3BhdGgpDQogICAgICAgICAgICBoZWxsb3dvcmxkX2NvbXBvbmVudC5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aCA9IE91dHB1dChkYXRhc2V0PURhdGEobmFtZT0ibWxkZXNpZ25lcl9jb21wb25lbnRfb3V0cHV0IikpDQogICAgICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfbXBpID0gbXBpX2Z1bmMoY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5fcGF0aCkNCiAgICAgICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudF9tcGkuZGlzdHJpYnV0aW9uID0gTXBpRGlzdHJpYnV0aW9uKCkNCiAgICAgICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudF9tcGkuZGlzdHJpYnV0aW9uLnByb2Nlc3NfY291bnRfcGVyX2luc3RhbmNlID0gMg0KDQogICAgICAgIHBpcGVsaW5lOiBQaXBlbGluZUpvYiA9IHBpcGVsaW5lX2Rpc3RyaWJ1dGlvbl9jb21wb25lbnRzKDEwLCBqb2JfaW5wdXQpDQogICAgICAgIGFzc2VydCBtcGlfZnVuYy5faXNfYW5vbnltb3VzIGlzIEZhbHNlDQogICAgICAgIGFzc2VydCBwaXBlbGluZS5zZXR0aW5ncy5jb250aW51ZV9vbl9zdGVwX2ZhaWx1cmUgaXMgRmFsc2UNCiAgICAgICAgY3JlYXRlZF9qb2I6IFBpcGVsaW5lSm9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZSgNCiAgICAgICAgICAgIHBpcGVsaW5lLCBleHBlcmltZW50X25hbWU9ZXhwZXJpbWVudF9uYW1lLCBjb250aW51ZV9vbl9zdGVwX2ZhaWx1cmU9VHJ1ZQ0KICAgICAgICApDQogICAgICAgICMgVGhlb3JldGljYWxseSwgd2Ugc2hvdWxkIGtlZXAgdGhlIGludmFsaWQgbmFtZSBpbiByZXF1ZXN0IGJvZHksDQogICAgICAgICMgYXMgY29tcG9uZW50IG5hbWUgdmFsaWQgaW4gYXp1cmVtbC1jb21wb25lbnRzIG1heWJlIGludmFsaWQgaW4gYXp1cmUtYWktbWwuDQogICAgICAgICMgU28gd2UgbGVhdmUgdGhpcyB2YWxpZGF0aW9uIHRvIHNlcnZlci1zaWRlIGZvciBub3cuDQogICAgICAgIGFzc2VydCBtcGlfZnVuYy5fdG9fcmVzdF9vYmplY3QoKS5wcm9wZXJ0aWVzLmNvbXBvbmVudF9zcGVjWyJuYW1lIl0gPT0gaW52YWxpZF9jb21wb25lbnRfbmFtZQ0KDQogICAgICAgICMgY29udGludWVfb25fc3RlcF9mYWlsdXJlIGNhbid0IGJlIHNldCBpbiBjcmVhdGVfb3JfdXBkYXRlDQogICAgICAgIGFzc2VydCBjcmVhdGVkX2pvYi5zZXR0aW5ncy5jb250aW51ZV9vbl9zdGVwX2ZhaWx1cmUgaXMgRmFsc2UNCiAgICAgICAgYXNzZXJ0IGNyZWF0ZWRfam9iLmpvYnNbImhlbGxvX3dvcmxkX2NvbXBvbmVudF9tcGkiXS5jb21wb25lbnQuc3RhcnRzd2l0aChBTk9OWU1PVVNfQ09NUE9ORU5UX05BTUUpDQogICAgICAgIGFzc2VydCBjcmVhdGVkX2pvYi5qb2JzWyJoZWxsb3dvcmxkX2NvbXBvbmVudCJdLmNvbXBvbmVudCA9PSAibWljcm9zb2Z0c2FtcGxlc19jb21tYW5kX2NvbXBvbmVudF9iYXNpYzowLjAuMSINCiAgICAgICAgYXNzZXJ0IGhlbGxvX3dvcmxkX2Z1bmMuX2lzX2Fub255bW91cyBpcyBGYWxzZQ0KICAgICAgICBhc3NlcnQgb3JpZ2luX2lkID09IGhlbGxvX3dvcmxkX2Z1bmMuaWQNCg0KICAgIGRlZiB0ZXN0X3BpcGVsaW5lX2ZvcmNlX3JlcnVuKHNlbGYsIGNsaWVudDogTUxDbGllbnQsIHJhbmRzdHI6IENhbGxhYmxlW1tzdHJdLCBzdHJdKSAtPiBOb25lOg0KICAgICAgICBjb21wb25lbnRfeWFtbCA9IGNvbXBvbmVudHNfZGlyIC8gImhlbGxvd29ybGRfY29tcG9uZW50LnltbCINCiAgICAgICAgY29tcG9uZW50X2Z1bmMxID0gbG9hZF9jb21wb25lbnQoc291cmNlPWNvbXBvbmVudF95YW1sLCBwYXJhbXNfb3ZlcnJpZGU9W3sibmFtZSI6IHJhbmRzdHIoImNvbXBvbmVudF9uYW1lIil9XSkNCiAgICAgICAgY29tcG9uZW50X2Z1bmMyID0gbG9hZF9jb21wb25lbnQoc291cmNlPWNvbXBvbmVudF95YW1sLCBwYXJhbXNfb3ZlcnJpZGU9W3sibmFtZSI6IHJhbmRzdHIoImNvbXBvbmVudF9uYW1lIil9XSkNCg0KICAgICAgICBAZHNsLnBpcGVsaW5lKA0KICAgICAgICAgICAgbmFtZT1yYW5kc3RyKCJwaXBlbGluZV9uYW1lIiksDQogICAgICAgICAgICBkZXNjcmlwdGlvbj0iVGhlIGhlbGxvIHdvcmxkIHBpcGVsaW5lIGpvYiIsDQogICAgICAgICAgICB0YWdzPXsib3duZXIiOiAic2RrdGVhbSIsICJ0YWciOiAidGFndmFsdWUifSwNCiAgICAgICAgICAgIGNvbXB1dGU9ImNwdS1jbHVzdGVyIiwNCiAgICAgICAgICAgIGV4cGVyaW1lbnRfbmFtZT1leHBlcmltZW50X25hbWUsDQogICAgICAgICAgICBjb250aW51ZV9vbl9zdGVwX2ZhaWx1cmU9VHJ1ZSwNCiAgICAgICAgKQ0KICAgICAgICBkZWYgcGlwZWxpbmUoam9iX2luX251bWJlciwgam9iX2luX290aGVyX251bWJlciwgam9iX2luX3BhdGgpOg0KICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMxKGNvbXBvbmVudF9pbl9udW1iZXI9am9iX2luX251bWJlciwgY29tcG9uZW50X2luX3BhdGg9am9iX2luX3BhdGgpDQogICAgICAgICAgICBjb21wb25lbnRfZnVuYzIoY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fb3RoZXJfbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5fcGF0aCkNCg0KICAgICAgICBwaXBlbGluZSA9IHBpcGVsaW5lKDEwLCAxNSwgam9iX2lucHV0KQ0KICAgICAgICBqb2IgPSBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKHBpcGVsaW5lKQ0KICAgICAgICBhc3NlcnQgam9iLnNldHRpbmdzLmZvcmNlX3JlcnVuIGlzIE5vbmUNCg0KICAgICAgICBAZHNsLnBpcGVsaW5lKA0KICAgICAgICAgICAgbmFtZT1yYW5kc3RyKCJwaXBlbGluZV9uYW1lIiksDQogICAgICAgICAgICBkZXNjcmlwdGlvbj0iVGhlIGhlbGxvIHdvcmxkIHBpcGVsaW5lIGpvYiIsDQogICAgICAgICAgICB0YWdzPXsib3duZXIiOiAic2RrdGVhbSIsICJ0YWciOiAidGFndmFsdWUifSwNCiAgICAgICAgICAgIGNvbXB1dGU9ImNwdS1jbHVzdGVyIiwNCiAgICAgICAgICAgIGV4cGVyaW1lbnRfbmFtZT1leHBlcmltZW50X25hbWUsDQogICAgICAgICAgICBjb250aW51ZV9vbl9zdGVwX2ZhaWx1cmU9VHJ1ZSwNCiAgICAgICAgICAgIGZvcmNlX3JlcnVuPVRydWUsDQogICAgICAgICkNCiAgICAgICAgZGVmIHBpcGVsaW5lKGpvYl9pbl9udW1iZXIsIGpvYl9pbl9vdGhlcl9udW1iZXIsIGpvYl9pbl9wYXRoKToNCiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMShjb21wb25lbnRfaW5fbnVtYmVyPWpvYl9pbl9udW1iZXIsIGNvbXBvbmVudF9pbl9wYXRoPWpvYl9pbl9wYXRoKQ0KICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMyKGNvbXBvbmVudF9pbl9udW1iZXI9am9iX2luX290aGVyX251bWJlciwgY29tcG9uZW50X2luX3BhdGg9am9iX2luX3BhdGgpDQoNCiAgICAgICAgcGlwZWxpbmUgPSBwaXBlbGluZSgxMCwgMTUsIGpvYl9pbnB1dCkNCiAgICAgICAgam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSwgZm9yY2VfcmVydW49VHJ1ZSkNCiAgICAgICAgYXNzZXJ0IGpvYi5zZXR0aW5ncy5mb3JjZV9yZXJ1biBpcyBUcnVlDQoNCiAgICBAcHl0ZXN0Lm1hcmsuc2tpcCgiVE9ETyAoMjM3MDEyOSk6IFJlY29yZGluZyBmYWlscyBkdWUgdG8gJ0Nhbm5vdCBmaW5kIHBpcGVsaW5lIHJ1bicgZXJyb3IiKQ0KICAgIGRlZiB0ZXN0X3BhcmFsbGVsX2NvbXBvbmVudHNfd2l0aF90YWJ1bGFyX2lucHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGNvbXBvbmVudHNfZGlyID0gdGVzdHNfcm9vdF9kaXIgLyAidGVzdF9jb25maWdzL2RzbF9waXBlbGluZS9wYXJhbGxlbF9jb21wb25lbnRfd2l0aF90YWJ1bGFyX2lucHV0Ig0KDQogICAgICAgIGJhdGNoX2luZmVyZW5jZSA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1zdHIoY29tcG9uZW50c19kaXIgLyAidGFidWxhcl9pbnB1dF9lMmUueW1sIikpDQoNCiAgICAgICAgIyBDb25zdHJ1Y3QgcGlwZWxpbmUNCiAgICAgICAgQGRzbC5waXBlbGluZShkZWZhdWx0X2NvbXB1dGU9ImNwdS1jbHVzdGVyIikNCiAgICAgICAgZGVmIHBhcmFsbGVsX2luX3BpcGVsaW5lKGpvYl9kYXRhX3BhdGgsIHNjb3JlX21vZGVsKToNCiAgICAgICAgICAgIGJhdGNoX2luZmVyZW5jZV9ub2RlID0gYmF0Y2hfaW5mZXJlbmNlKGpvYl9kYXRhX3BhdGg9am9iX2RhdGFfcGF0aCwgc2NvcmVfbW9kZWw9c2NvcmVfbW9kZWwpDQogICAgICAgICAgICBiYXRjaF9pbmZlcmVuY2Vfbm9kZS5taW5pX2JhdGNoX3NpemUgPSA1DQoNCiAgICAgICAgcGlwZWxpbmUgPSBwYXJhbGxlbF9pbl9waXBlbGluZSgNCiAgICAgICAgICAgIGpvYl9kYXRhX3BhdGg9SW5wdXQoDQogICAgICAgICAgICAgICAgdHlwZT1Bc3NldFR5cGVzLk1MVEFCTEUsDQogICAgICAgICAgICAgICAgcGF0aD0iLi90ZXN0cy90ZXN0X2NvbmZpZ3MvZGF0YXNldC9uZXVyYWwtaXJpcy1tbHRhYmxlIiwNCiAgICAgICAgICAgICAgICBtb2RlPUlucHV0T3V0cHV0TW9kZXMuRElSRUNULA0KICAgICAgICAgICAgKSwNCiAgICAgICAgICAgIHNjb3JlX21vZGVsPUlucHV0KA0KICAgICAgICAgICAgICAgIHBhdGg9Ii4vdGVzdHMvdGVzdF9jb25maWdzL21vZGVsIiwgdHlwZT1Bc3NldFR5cGVzLlVSSV9GT0xERVIsIG1vZGU9SW5wdXRPdXRwdXRNb2Rlcy5ET1dOTE9BRA0KICAgICAgICAgICAgKSwNCiAgICAgICAgKQ0KICAgICAgICAjIHN1Ym1pdCBwaXBlbGluZSBqb2INCiAgICAgICAgcGlwZWxpbmVfam9iID0gYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCwgZXhwZXJpbWVudF9uYW1lPSJwYXJhbGxlbF9pbl9waXBlbGluZSIpDQoNCiAgICAgICAgIyBjaGVjayByZXF1aXJlZCBmaWVsZHMgaW4gam9iIGRpY3QNCiAgICAgICAgam9iX2RpY3QgPSBwaXBlbGluZV9qb2IuX3RvX2RpY3QoKQ0KICAgICAgICBleHBlY3RlZF9rZXlzID0gWyJzdGF0dXMiLCAicHJvcGVydGllcyIsICJjcmVhdGlvbl9jb250ZXh0Il0NCiAgICAgICAgZm9yIGsgaW4gZXhwZWN0ZWRfa2V5czoNCiAgICAgICAgICAgIGFzc2VydCBrIGluIGpvYl9kaWN0LmtleXMoKSwgZiJmYWlsZWQgdG8gZ2V0IHtrfSBpbiB7am9iX2RpY3R9Ig0KDQogICAgICAgICMgb3JpZ2luYWwgam9iIGRpZCBub3QgY2hhbmdlDQogICAgICAgIGFzc2VydF9qb2JfaW5wdXRfb3V0cHV0X3R5cGVzKHBpcGVsaW5lX2pvYikNCiAgICAgICAgYXNzZXJ0IHBpcGVsaW5lX2pvYi5zZXR0aW5ncy5kZWZhdWx0X2NvbXB1dGUgPT0gImNwdS1jbHVzdGVyIg0KDQogICAgQHB5dGVzdC5tYXJrLnNraXAoIlRPRE8gKDIzNzAxMjkpOiBSZWNvcmRpbmcgZmFpbHMgZHVlIHRvICdDYW5ub3QgZmluZCBwaXBlbGluZSBydW4nIGVycm9yIikNCiAgICBkZWYgdGVzdF9wYXJhbGxlbF9jb21wb25lbnRzX3dpdGhfdGFidWxhcl9pbnB1dF9iaW5kX3RvX2xpdGVyYWxfaW5wdXQoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToNCiAgICAgICAgY29tcG9uZW50c19kaXIgPSB0ZXN0c19yb290X2RpciAvICJ0ZXN0X2NvbmZpZ3MvZHNsX3BpcGVsaW5lL3BhcmFsbGVsX2NvbXBvbmVudF93aXRoX3RhYnVsYXJfaW5wdXQiDQoNCiAgICAgICAgYmF0Y2hfaW5mZXJlbmNlID0gbG9hZF9jb21wb25lbnQoc291cmNlPXN0cihjb21wb25lbnRzX2RpciAvICJ0YWJ1bGFyX2lucHV0X2UyZS55bWwiKSkNCg0KICAgICAgICAjIENvbnN0cnVjdCBwaXBlbGluZQ0KICAgICAgICBAZHNsLnBpcGVsaW5lKGRlZmF1bHRfY29tcHV0ZT0iY3B1LWNsdXN0ZXIiKQ0KICAgICAgICBkZWYgcGFyYWxsZWxfaW5fcGlwZWxpbmUoam9iX2RhdGFfcGF0aCwgc2NvcmVfbW9kZWwsIGxpdGVyYWxfaW5wdXQpOg0KICAgICAgICAgICAgYmF0Y2hfaW5mZXJlbmNlX25vZGUgPSBiYXRjaF9pbmZlcmVuY2Uoam9iX2RhdGFfcGF0aD1qb2JfZGF0YV9wYXRoLCBzY29yZV9tb2RlbD1zY29yZV9tb2RlbCkNCiAgICAgICAgICAgIGJhdGNoX2luZmVyZW5jZV9ub2RlLm1pbmlfYmF0Y2hfc2l6ZSA9IDUNCiAgICAgICAgICAgIGJhdGNoX2luZmVyZW5jZV9ub2RlLm1heF9jb25jdXJyZW5jeV9wZXJfaW5zdGFuY2UgPSBsaXRlcmFsX2lucHV0DQogICAgICAgICAgICBiYXRjaF9pbmZlcmVuY2Vfbm9kZS5lcnJvcl90aHJlc2hvbGQgPSBsaXRlcmFsX2lucHV0DQogICAgICAgICAgICBiYXRjaF9pbmZlcmVuY2Vfbm9kZS5taW5pX2JhdGNoX2Vycm9yX3RocmVzaG9sZCA9IGxpdGVyYWxfaW5wdXQNCg0KICAgICAgICBwaXBlbGluZSA9IHBhcmFsbGVsX2luX3BpcGVsaW5lKA0KICAgICAgICAgICAgam9iX2RhdGFfcGF0aD1JbnB1dCgNCiAgICAgICAgICAgICAgICB0eXBlPUFzc2V0VHlwZXMuTUxUQUJMRSwNCiAgICAgICAgICAgICAgICBwYXRoPSIuL3Rlc3RzL3Rlc3RfY29uZmlncy9kYXRhc2V0L25ldXJhbC1pcmlzLW1sdGFibGUiLA0KICAgICAgICAgICAgICAgIG1vZGU9SW5wdXRPdXRwdXRNb2Rlcy5ESVJFQ1QsDQogICAgICAgICAgICApLA0KICAgICAgICAgICAgc2NvcmVfbW9kZWw9SW5wdXQoDQogICAgICAgICAgICAgICAgcGF0aD0iLi90ZXN0cy90ZXN0X2NvbmZpZ3MvbW9kZWwiLCB0eXBlPUFzc2V0VHlwZXMuVVJJX0ZPTERFUiwgbW9kZT1JbnB1dE91dHB1dE1vZGVzLkRPV05MT0FEDQogICAgICAgICAgICApLA0KICAgICAgICAgICAgbGl0ZXJhbF9pbnB1dD0yLA0KICAgICAgICApDQogICAgICAgICMgc3VibWl0IHBpcGVsaW5lIGpvYg0KICAgICAgICBwaXBlbGluZV9qb2IgPSBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50LCBleHBlcmltZW50X25hbWU9InBhcmFsbGVsX2luX3BpcGVsaW5lIikNCg0KICAgICAgICAjIGNoZWNrIHJlcXVpcmVkIGZpZWxkcyBpbiBqb2IgZGljdA0KICAgICAgICBqb2JfZGljdCA9IHBpcGVsaW5lX2pvYi5fdG9fZGljdCgpDQogICAgICAgIGV4cGVjdGVkX2tleXMgPSBbInN0YXR1cyIsICJwcm9wZXJ0aWVzIiwgImNyZWF0aW9uX2NvbnRleHQiXQ0KICAgICAgICBmb3IgayBpbiBleHBlY3RlZF9rZXlzOg0KICAgICAgICAgICAgYXNzZXJ0IGsgaW4gam9iX2RpY3Qua2V5cygpLCBmImZhaWxlZCB0byBnZXQge2t9IGluIHtqb2JfZGljdH0iDQoNCiAgICAgICAgIyBvcmlnaW5hbCBqb2IgZGlkIG5vdCBjaGFuZ2UNCiAgICAgICAgYXNzZXJ0X2pvYl9pbnB1dF9vdXRwdXRfdHlwZXMocGlwZWxpbmVfam9iKQ0KICAgICAgICBhc3NlcnQgcGlwZWxpbmVfam9iLnNldHRpbmdzLmRlZmF1bHRfY29tcHV0ZSA9PSAiY3B1LWNsdXN0ZXIiDQoNCiAgICBAcHl0ZXN0Lm1hcmsuc2tpcCgiVE9ETyAoMjM3MDEyOSk6IFJlY29yZGluZyBmYWlscyBkdWUgdG8gJ0Nhbm5vdCBmaW5kIHBpcGVsaW5lIHJ1bicgZXJyb3IiKQ0KICAgIGRlZiB0ZXN0X3BhcmFsbGVsX2NvbXBvbmVudHNfd2l0aF9maWxlX2lucHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\\\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5waXBlbGluZV93aXRoX3NldF9iaW5kaW5nX291dHB1dF9pbnB1dC5waXBlbGluZSBpbXBvcnQgKA0KICAgICAgICAgICAgcGlwZWxpbmVfd2l0aF9zZXR0aW5nX2JpbmRpbmdfbm9kZV9hbmRfcGlwZWxpbmVfbGV2ZWwsDQogICAgICAgICkNCg0KICAgICAgICBwaXBlbGluZSA9IHBpcGVsaW5lX3dpdGhfc2V0dGluZ19iaW5kaW5nX25vZGVfYW5kX3BpcGVsaW5lX2xldmVsKCkNCiAgICAgICAgcGlwZWxpbmVfam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSkNCg0KICAgICAgICBhY3R1YWxfam9iID0gb21pdF93aXRoX3dpbGRjYXJkKHBpcGVsaW5lX2pvYi5fdG9fcmVzdF9vYmplY3QoKS5wcm9wZXJ0aWVzLmFzX2RpY3QoKSwgKmNvbW1vbl9vbWl0X2ZpZWxkcykNCiAgICAgICAgZXhwZWN0ZWRfam9iID0gew0KICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkUyRSBkdW1teSBwaXBlbGluZSB3aXRoIGNvbXBvbmVudHMgZGVmaW5lZCB2aWEgeWFtbC4iLA0KICAgICAgICAgICAgInRhZ3MiOiB7fSwNCiAgICAgICAgICAgICJjb21wdXRlX2lkIjogImNwdS1jbHVzdGVyIiwNCiAgICAgICAgICAgICJpc19hcmNoaXZlZCI6IEZhbHNlLA0KICAgICAgICAgICAgImpvYl90eXBlIjogIlBpcGVsaW5lIiwNCiAgICAgICAgICAgICJpbnB1dHMiOiB7DQogICAgICAgICAgICAgICAgInRyYWluaW5nX2lucHV0IjogeyJtb2RlIjogIkRvd25sb2FkIiwgImpvYl9pbnB1dF90eXBlIjogInVyaV9mb2xkZXIifSwNCiAgICAgICAgICAgICAgICAidHJhaW5pbmdfbWF4X2Vwb2NocyI6IHsiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsICJ2YWx1ZSI6ICIyMCJ9LA0KICAgICAgICAgICAgICAgICJ0cmFpbmluZ19sZWFybmluZ19yYXRlIjogeyJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwgInZhbHVlIjogIjEuOCJ9LA0KICAgICAgICAgICAgICAgICJsZWFybmluZ19yYXRlX3NjaGVkdWxlIjogeyJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwgInZhbHVlIjogInRpbWUtYmFzZWQifSwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAiam9icyI6IHsNCiAgICAgICAgICAgICAgICAidHJhaW5fd2l0aF9zYW1wbGVfZGF0YSI6IHsNCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiY29tbWFuZCIsDQogICAgICAgICAgICAgICAgICAgICJuYW1lIjogInRyYWluX3dpdGhfc2FtcGxlX2RhdGEiLA0KICAgICAgICAgICAgICAgICAgICAiaW5wdXRzIjogew0KICAgICAgICAgICAgICAgICAgICAgICAgInRyYWluaW5nX2RhdGEiOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIm1vZGUiOiAiUmVhZE9ubHlNb3VudCIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIke3twYXJlbnQuaW5wdXRzLnRyYWluaW5nX2lucHV0fX0iLA0KICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgICJtYXhfZXBvY2hzIjogeyJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwgInZhbHVlIjogIiR7e3BhcmVudC5pbnB1dHMudHJhaW5pbmdfbWF4X2Vwb2Noc319In0sDQogICAgICAgICAgICAgICAgICAgICAgICAibGVhcm5pbmdfcmF0ZSI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIiR7e3BhcmVudC5pbnB1dHMudHJhaW5pbmdfbGVhcm5pbmdfcmF0ZX19IiwNCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICAibGVhcm5pbmdfcmF0ZV9zY2hlZHVsZSI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIiR7e3BhcmVudC5pbnB1dHMubGVhcm5pbmdfcmF0ZV9zY2hlZHVsZX19IiwNCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICJvdXRwdXRzIjogew0KICAgICAgICAgICAgICAgICAgICAgICAgIm1vZGVsX291dHB1dCI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAibW9kZSI6ICJVcGxvYWQiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIke3twYXJlbnQub3V0cHV0cy50cmFpbmVkX21vZGVsfX0iLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImxpdGVyYWwiLA0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAjIHBpcGVsaW5lIGxldmVsIG91dHB1dCBzZXR0aW5nIHRha2luZyBlZmZlY3QNCiAgICAgICAgICAgICJvdXRwdXRzIjogeyJ0cmFpbmVkX21vZGVsIjogeyJtb2RlIjogIlJlYWRXcml0ZU1vdW50IiwgImpvYl9vdXRwdXRfdHlwZSI6ICJ1cmlfZm9sZGVyIn19LA0KICAgICAgICAgICAgInNldHRpbmdzIjoge30sDQogICAgICAgIH0NCiAgICAgICAgYXNzZXJ0IGV4cGVjdGVkX2pvYiA9PSBhY3R1YWxfam9iDQoNCiAgICBkZWYgdGVzdF9kc2xfcGlwZWxpbmVfd2l0aF9jb21tYW5kX2J1aWxkZXJfc2V0dGluZ19iaW5kaW5nX25vZGVfYW5kX3BpcGVsaW5lX2xldmVsKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6DQogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5waXBlbGluZV93aXRoX3NldF9iaW5kaW5nX291dHB1dF9pbnB1dC5waXBlbGluZSBpbXBvcnQgKA0KICAgICAgICAgICAgcGlwZWxpbmVfd2l0aF9jb21tYW5kX2J1aWxkZXJfc2V0dGluZ19iaW5kaW5nX25vZGVfYW5kX3BpcGVsaW5lX2xldmVsLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBwaXBlbGluZV93aXRoX2NvbW1hbmRfYnVpbGRlcl9zZXR0aW5nX2JpbmRpbmdfbm9kZV9hbmRfcGlwZWxpbmVfbGV2ZWwoKQ0KICAgICAgICBwaXBlbGluZV9qb2IgPSBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKHBpcGVsaW5lKQ0KDQogICAgICAgIGFjdHVhbF9qb2IgPSBvbWl0X3dpdGhfd2lsZGNhcmQocGlwZWxpbmVfam9iLl90b19yZXN0X29iamVjdCgpLnByb3BlcnRpZXMuYXNfZGljdCgpLCAqY29tbW9uX29taXRfZmllbGRzKQ0KDQogICAgICAgIGV4cGVjdGVkX2pvYiA9IHsNCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJFMkUgZHVtbXkgcGlwZWxpbmUgd2l0aCBjb21wb25lbnRzIGRlZmluZWQgdmlhIHlhbWwuIiwNCiAgICAgICAgICAgICJ0YWdzIjoge30sDQogICAgICAgICAgICAiY29tcHV0ZV9pZCI6ICJjcHUtY2x1c3RlciIsDQogICAgICAgICAgICAiaXNfYXJjaGl2ZWQiOiBGYWxzZSwNCiAgICAgICAgICAgICJqb2JfdHlwZSI6ICJQaXBlbGluZSIsDQogICAgICAgICAgICAiaW5wdXRzIjogew0KICAgICAgICAgICAgICAgICJ0cmFpbmluZ19pbnB1dCI6IHsibW9kZSI6ICJEb3dubG9hZCIsICJqb2JfaW5wdXRfdHlwZSI6ICJ1cmlfZm9sZGVyIn0sDQogICAgICAgICAgICAgICAgInRyYWluaW5nX21heF9lcG9jaHMiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAiMjAifSwNCiAgICAgICAgICAgICAgICAidHJhaW5pbmdfbGVhcm5pbmdfcmF0ZSI6IHsiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsICJ2YWx1ZSI6ICIxLjgifSwNCiAgICAgICAgICAgICAgICAibGVhcm5pbmdfcmF0ZV9zY2hlZHVsZSI6IHsiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsICJ2YWx1ZSI6ICJ0aW1lLWJhc2VkIn0sDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgImpvYnMiOiB7DQogICAgICAgICAgICAgICAgInRyYWluX3dpdGhfc2FtcGxlX2RhdGEiOiB7DQogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImNvbW1hbmQiLA0KICAgICAgICAgICAgICAgICAgICAiZGlzdHJpYnV0aW9uIjogeyJkaXN0cmlidXRpb25fdHlwZSI6ICJQeVRvcmNoIiwgInByb2Nlc3NfY291bnRfcGVyX2luc3RhbmNlIjogMn0sDQogICAgICAgICAgICAgICAgICAgICJuYW1lIjogInRyYWluX3dpdGhfc2FtcGxlX2RhdGEiLA0KICAgICAgICAgICAgICAgICAgICAiaW5wdXRzIjogew0KICAgICAgICAgICAgICAgICAgICAgICAgInRyYWluaW5nX2RhdGEiOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIm1vZGUiOiAiUmVhZE9ubHlNb3VudCIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIke3twYXJlbnQuaW5wdXRzLnRyYWluaW5nX2lucHV0fX0iLA0KICAgICAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgICAgICJtYXhfZXBvY2hzIjogeyJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwgInZhbHVlIjogIiR7e3BhcmVudC5pbnB1dHMudHJhaW5pbmdfbWF4X2Vwb2Noc319In0sDQogICAgICAgICAgICAgICAgICAgICAgICAibGVhcm5pbmdfcmF0ZSI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIiR7e3BhcmVudC5pbnB1dHMudHJhaW5pbmdfbGVhcm5pbmdfcmF0ZX19IiwNCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICAgICAibGVhcm5pbmdfcmF0ZV9zY2hlZHVsZSI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIiR7e3BhcmVudC5pbnB1dHMubGVhcm5pbmdfcmF0ZV9zY2hlZHVsZX19IiwNCiAgICAgICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgICAgICJvdXRwdXRzIjogew0KICAgICAgICAgICAgICAgICAgICAgICAgIm1vZGVsX291dHB1dCI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAibW9kZSI6ICJVcGxvYWQiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6ICIke3twYXJlbnQub3V0cHV0cy50cmFpbmVkX21vZGVsfX0iLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImxpdGVyYWwiLA0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAib3V0cHV0cyI6IHsidHJhaW5lZF9tb2RlbCI6IHsibW9kZSI6ICJSZWFkV3JpdGVNb3VudCIsICJqb2Jfb3V0cHV0X3R5cGUiOiAidXJpX2ZvbGRlciJ9fSwNCiAgICAgICAgICAgICJzZXR0aW5ncyI6IHt9LA0KICAgICAgICB9DQogICAgICAgIGFzc2VydCBleHBlY3RlZF9qb2IgPT0gYWN0dWFsX2pvYg0KDQogICAgQHB5dGVzdC5tYXJrLnNraXAoIlRPRE8gKDIzNzUwODYpOiBKb2IgZmFpbGluZyB3aXRoICdVc2VyIGZhaWxlZCB0byBjYWxsIFNhdmVVc2VyVG9rZW4gYmVmb3JlIEdldFVzZXJUb2tlbiciKQ0KICAgIGRlZiB0ZXN0X3NwYXJrX2NvbXBvbmVudHMoc2VsZiwgY2xpZW50OiBNTENsaWVudCwgcmFuZHN0cjogQ2FsbGFibGVbW3N0cl0sIHN0cl0pIC0\\u002BIE5vbmU6DQogICAgICAgIGNvbXBvbmVudF95YW1sID0gY29tcG9uZW50c19kaXIgLyAiaGVsbG93b3JsZF9jb21wb25lbnQueW1sIg0KICAgICAgICBjb21wb25lbnRfZnVuYzEgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9Y29tcG9uZW50X3lhbWwsIHBhcmFtc19vdmVycmlkZT1beyJuYW1lIjogcmFuZHN0cigiY29tcG9uZW50X25hbWUiKX1dKQ0KICAgICAgICBjb21wb25lbnRfZnVuYzIgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9Y29tcG9uZW50X3lhbWwsIHBhcmFtc19vdmVycmlkZT1beyJuYW1lIjogcmFuZHN0cigiY29tcG9uZW50X25hbWUiKX1dKQ0KDQogICAgICAgIEBkc2wucGlwZWxpbmUoDQogICAgICAgICAgICBuYW1lPXJhbmRzdHIoInBpcGVsaW5lX25hbWUiKSwNCiAgICAgICAgICAgIGRlc2NyaXB0aW9uPSJUaGUgaGVsbG8gd29ybGQgcGlwZWxpbmUgam9iIiwNCiAgICAgICAgICAgIHRhZ3M9eyJvd25lciI6ICJzZGt0ZWFtIiwgInRhZyI6ICJ0YWd2YWx1ZSJ9LA0KICAgICAgICAgICAgY29tcHV0ZT0iY3B1LWNsdXN0ZXIiLA0KICAgICAgICAgICAgZXhwZXJpbWVudF9uYW1lPWV4cGVyaW1lbnRfbmFtZSwNCiAgICAgICAgICAgIGNvbnRpbnVlX29uX3N0ZXBfZmFpbHVyZT1UcnVlLA0KICAgICAgICApDQogICAgICAgIGRlZiBwaXBlbGluZShqb2JfaW5fbnVtYmVyLCBqb2JfaW5fb3RoZXJfbnVtYmVyLCBqb2JfaW5fcGF0aCk6DQogICAgICAgICAgICBjb21wb25lbnRfZnVuYzEoY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5fcGF0aCkNCiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMihjb21wb25lbnRfaW5fbnVtYmVyPWpvYl9pbl9vdGhlcl9udW1iZXIsIGNvbXBvbmVudF9pbl9wYXRoPWpvYl9pbl9wYXRoKQ0KDQogICAgICAgIHBpcGVsaW5lID0gcGlwZWxpbmUoMTAsIDE1LCBqb2JfaW5wdXQpDQogICAgICAgIGpvYiA9IGNsaWVudC5qb2JzLmNyZWF0ZV9vcl91cGRhdGUocGlwZWxpbmUpDQogICAgICAgICMgY2hlY2sgcmVxdWlyZWQgZmllbGRzIGluIGpvYiBkaWN0DQogICAgICAgIGRlZmF1bHRfc2VydmljZXMgPSBqb2IuX3RvX2RpY3QoKVsic2VydmljZXMiXQ0KICAgICAgICBhc3NlcnQgIlN0dWRpbyIgaW4gZGVmYXVsdF9zZXJ2aWNlcw0KICAgICAgICBhc3NlcnQgIlRyYWNraW5nIiBpbiBkZWZhdWx0X3NlcnZpY2VzDQogICAgICAgIGFzc2VydCBkZWZhdWx0X3NlcnZpY2VzWyJTdHVkaW8iXVsiZW5kcG9pbnQiXS5zdGFydHN3aXRoKCJodHRwczovL21sLmF6dXJlLmNvbS9ydW5zLyIpDQogICAgICAgIGFzc2VydCBkZWZhdWx0X3NlcnZpY2VzWyJTdHVkaW8iXVsidHlwZSJdID09ICJTdHVkaW8iDQogICAgICAgIGFzc2VydCBkZWZhdWx0X3NlcnZpY2VzWyJUcmFja2luZyJdWyJlbmRwb2ludCJdLnN0YXJ0c3dpdGgoImF6dXJlbWw6Ly8iKQ0KICAgICAgICBhc3NlcnQgZGVmYXVsdF9zZXJ2aWNlc1siVHJhY2tpbmciXVsidHlwZSJdID09ICJUcmFja2luZyINCg0KICAgIGRlZiB0ZXN0X2dyb3VwX291dHB1dHNfZGVzY3JpcHRpb25fb3ZlcndyaXRlKHNlbGYsIGNsaWVudCk6DQogICAgICAgICMgdGVzdCBncm91cCBvdXRwdXRzIGRlc2NyaXB0aW9uIG92ZXJ3cml0ZQ0KICAgICAgICBAZ3JvdXANCiAgICAgICAgY2xhc3MgT3V0cHV0czoNCiAgICAgICAgICAgIG91dHB1dDE6IE91dHB1dCh0eXBlPSJ1cmlfZm9sZGVyIiwgZGVzY3JpcHRpb249Im5ldyBkZXNjcmlwdGlvbiIpDQoNCiAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X3lhbWwgPSAiLi90ZXN0cy90ZXN0X2NvbmZpZ3MvY29tcG9uZW50cy9oZWxsb3dvcmxkX2NvbXBvbmVudC55bWwiDQogICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudF9mdW5jID0gbG9hZF9jb21wb25lbnQoc291cmNlPWhlbGxvX3dvcmxkX2NvbXBvbmVudF95YW1sKQ0KDQogICAgICAgIEBkc2wucGlwZWxpbmUoZGVmYXVsdF9jb21wdXRlX3RhcmdldD0iY3B1LWNsdXN0ZXIiKQ0KICAgICAgICBkZWYgbXlfcGlwZWxpbmUoKSAtPiBPdXRwdXRzOg0KICAgICAgICAgICAgbm9kZTEgPSBoZWxsb193b3JsZF9jb21wb25lbnRfZnVuYyhjb21wb25lbnRfaW5fbnVtYmVyPTEsIGNvbXBvbmVudF9pbl9wYXRoPWpvYl9pbnB1dCkNCiAgICAgICAgICAgIHJldHVybiBPdXRwdXRzKA0KICAgICAgICAgICAgICAgIG91dHB1dDE9bm9kZTEub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgsDQogICAgICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmVfam9iID0gbXlfcGlwZWxpbmUoKQ0KICAgICAgICAjIG92ZXJ3cml0ZSBncm91cCBvdXRwdXRzIG1vZGUgd2lsbCBhcHBlYXIgaW4gcGlwZWxpbmUgam9iJmNvbXBvbmVudCBsZXZlbA0KICAgICAgICBleHBlY3RlZF9vdXRwdXRzID0geyJvdXRwdXQxIjogeyJkZXNjcmlwdGlvbiI6ICJuZXcgZGVzY3JpcHRpb24iLCAidHlwZSI6ICJ1cmlfZm9sZGVyIn19DQogICAgICAgIGV4cGVjdGVkX2pvYl9vdXRwdXRzID0geyJvdXRwdXQxIjogeyJkZXNjcmlwdGlvbiI6ICJuZXcgZGVzY3JpcHRpb24iLCAiam9iX291dHB1dF90eXBlIjogInVyaV9mb2xkZXIifX0NCiAgICAgICAgcmVzdF9qb2JfZGljdCA9IHBpcGVsaW5lX2pvYi5fdG9fcmVzdF9vYmplY3QoKS5hc19kaWN0KCkNCg0KICAgICAgICAjIGFzc2VydCBwaXBlbGluZSBqb2IgbGV2ZWwgbW9kZSBvdmVyd3JpdGUNCiAgICAgICAgYXNzZXJ0IHJlc3Rfam9iX2RpY3RbInByb3BlcnRpZXMiXVsib3V0cHV0cyJdID09IGV4cGVjdGVkX2pvYl9vdXRwdXRzDQogICAgICAgICMgYXNzZXJ0IHBpcGVsaW5lIGNvbXBvbmVudCBsZXZlbCBtb2RlIG92ZXJ3cml0ZQ0KICAgICAgICBhc3NlcnQgcGlwZWxpbmVfam9iLmNvbXBvbmVudC5fdG9fZGljdCgpWyJvdXRwdXRzIl0gPT0gZXhwZWN0ZWRfb3V0cHV0cw0KDQogICAgICAgIHJlc3Rfam9iID0gYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmVfam9iLCBjbGllbnQpDQogICAgICAgIHJlc3Rfam9iX2RpY3QgPSByZXN0X2pvYi5fdG9fcmVzdF9vYmplY3QoKS5hc19kaWN0KCkNCiAgICAgICAgYXNzZXJ0IHJlc3Rfam9iX2RpY3RbInByb3BlcnRpZXMiXVsib3V0cHV0cyJdWyJvdXRwdXQxIl1bImRlc2NyaXB0aW9uIl0gPT0gIm5ldyBkZXNjcmlwdGlvbiINCg0KICAgICAgICBjb21wb25lbnQgPSBjbGllbnQuY29tcG9uZW50cy5jcmVhdGVfb3JfdXBkYXRlKHBpcGVsaW5lX2pvYi5jb21wb25lbnQsIF9pc19hbm9ueW1vdXM9VHJ1ZSkNCiAgICAgICAgYXNzZXJ0IGNvbXBvbmVudC5fdG9fcmVzdF9vYmplY3QoKS5hc19kaWN0KClbInByb3BlcnRpZXMiXVsiY29tcG9uZW50X3NwZWMiXVsib3V0cHV0cyJdID09IGV4cGVjdGVkX291dHB1dHMNCg0KICAgIGRlZiB0ZXN0X2dyb3VwX291dHB1dHNfbW9kZV9vdmVyd3JpdGUoc2VsZiwgY2xpZW50KToNCiAgICAgICAgIyB0ZXN0IGdyb3VwIG91dHB1dHMgbW9kZSBvdmVyd3JpdGUNCiAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X3lhbWwgPSAiLi90ZXN0cy90ZXN0X2NvbmZpZ3MvY29tcG9uZW50cy9oZWxsb3dvcmxkX2NvbXBvbmVudC55bWwiDQogICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudF9mdW5jID0gbG9hZF9jb21wb25lbnQoc291cmNlPWhlbGxvX3dvcmxkX2NvbXBvbmVudF95YW1sKQ0KDQogICAgICAgIEBncm91cA0KICAgICAgICBjbGFzcyBPdXRwdXRzOg0KICAgICAgICAgICAgb3V0cHV0MTogT3V0cHV0KHR5cGU9InVyaV9mb2xkZXIiLCBtb2RlPSJ1cGxvYWQiKQ0KDQogICAgICAgIEBkc2wucGlwZWxpbmUoZGVmYXVsdF9jb21wdXRlX3RhcmdldD0iY3B1LWNsdXN0ZXIiKQ0KICAgICAgICBkZWYgbXlfcGlwZWxpbmUoKSAtPiBPdXRwdXRzOg0KICAgICAgICAgICAgbm9kZTEgPSBoZWxsb193b3JsZF9jb21wb25lbnRfZnVuYyhjb21wb25lbnRfaW5fbnVtYmVyPTEsIGNvbXBvbmVudF9pbl9wYXRoPWpvYl9pbnB1dCkNCiAgICAgICAgICAgIHJldHVybiBPdXRwdXRzKA0KICAgICAgICAgICAgICAgIG91dHB1dDE9bm9kZTEub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgsDQogICAgICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmVfam9iID0gbXlfcGlwZWxpbmUoKQ0KICAgICAgICAjIG92ZXJ3cml0ZSBncm91cCBvdXRwdXRzIG1vZGUgd2lsbCBhcHBlYXIgaW4gcGlwZWxpbmUgam9iJmNvbXBvbmVudCBsZXZlbA0KICAgICAgICBleHBlY3RlZF9qb2Jfb3V0cHV0cyA9IHsib3V0cHV0MSI6IHsibW9kZSI6ICJVcGxvYWQiLCAiam9iX291dHB1dF90eXBlIjogInVyaV9mb2xkZXIifX0NCiAgICAgICAgZXhwZWN0ZWRfb3V0cHV0cyA9IHsib3V0cHV0MSI6IHsibW9kZSI6ICJ1cGxvYWQiLCAidHlwZSI6ICJ1cmlfZm9sZGVyIn19DQogICAgICAgIHJlc3Rfam9iX2RpY3QgPSBwaXBlbGluZV9qb2IuX3RvX3Jlc3Rfb2JqZWN0KCkuYXNfZGljdCgpDQogICAgICAgICMgYXNzZXJ0IHBpcGVsaW5lIGpvYiBsZXZlbCBtb2RlIG92ZXJ3cml0ZQ0KICAgICAgICBhc3NlcnQgcmVzdF9qb2JfZGljdFsicHJvcGVydGllcyJdWyJvdXRwdXRzIl0gPT0gZXhwZWN0ZWRfam9iX291dHB1dHMNCiAgICAgICAgIyBhc3NlcnQgcGlwZWxpbmUgY29tcG9uZW50IGxldmVsIG1vZGUgb3ZlcndyaXRlDQogICAgICAgIGFzc2VydCBwaXBlbGluZV9qb2IuY29tcG9uZW50Ll90b19kaWN0KClbIm91dHB1dHMiXSA9PSBleHBlY3RlZF9vdXRwdXRzDQoNCiAgICAgICAgcmVzdF9qb2IgPSBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZV9qb2IsIGNsaWVudCkNCiAgICAgICAgcmVzdF9qb2JfZGljdCA9IHJlc3Rfam9iLl90b19yZXN0X29iamVjdCgpLmFzX2RpY3QoKQ0KICAgICAgICBhc3NlcnQgcmVzdF9qb2JfZGljdFsicHJvcGVydGllcyJdWyJvdXRwdXRzIl0gPT0gZXhwZWN0ZWRfam9iX291dHB1dHMNCg0KICAgICAgICBjb21wb25lbnQgPSBjbGllbnQuY29tcG9uZW50cy5jcmVhdGVfb3JfdXBkYXRlKHBpcGVsaW5lX2pvYi5jb21wb25lbnQsIF9pc19hbm9ueW1vdXM9VHJ1ZSkNCiAgICAgICAgIyBwaXBlbGluZSBjb21wb25lbnQgb3V0cHV0IG1vZGUgaXMgdW5kZWZpbmVkIGJlaGF2aW9yIHNvIHdlIHNraXAgYXNzZXJ0IGl0DQogICAgICAgICMgYXNzZXJ0IGNvbXBvbmVudC5fdG9fcmVzdF9vYmplY3QoKS5hc19kaWN0KClbInByb3BlcnRpZXMiXVsiY29tcG9uZW50X3NwZWMiXVsib3V0cHV0cyJdID09IGV4cGVjdGVkX291dHB1dHMNCg0KICAgIGRlZiB0ZXN0X2xvY2FsX2RhdGFfYXNfbm9kZV9pbnB1dChzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KToNCiAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X3lhbWwgPSAiLi90ZXN0cy90ZXN0X2NvbmZpZ3MvY29tcG9uZW50cy9oZWxsb3dvcmxkX2NvbXBvbmVudC55bWwiDQogICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudF9mdW5jID0gbG9hZF9jb21wb25lbnQoc291cmNlPWhlbGxvX3dvcmxkX2NvbXBvbmVudF95YW1sKQ0KICAgICAgICBsb2NhbF9kYXRhX2lucHV0ID0gSW5wdXQodHlwZT0idXJpX2ZvbGRlciIsIHBhdGg9Ii4vdGVzdHMvdGVzdF9jb25maWdzL2RhdGEiKQ0KDQogICAgICAgIEBkc2wucGlwZWxpbmUNCiAgICAgICAgZGVmIG15X3BpcGVsaW5lKCk6DQogICAgICAgICAgICBoZWxsb193b3JsZF9jb21wb25lbnRfZnVuYyhjb21wb25lbnRfaW5fbnVtYmVyPTEsIGNvbXBvbmVudF9pbl9wYXRoPWxvY2FsX2RhdGFfaW5wdXQpDQoNCiAgICAgICAgcGlwZWxpbmVfam9iOiBQaXBlbGluZUpvYiA9IG15X3BpcGVsaW5lKCkNCiAgICAgICAgcGlwZWxpbmVfam9iLnNldHRpbmdzLmRlZmF1bHRfY29tcHV0ZSA9ICJjcHUtY2x1c3RlciINCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmVfam9iLCBjbGllbnQpDQoNCiAgICBAcHl0ZXN0Lm1hcmsuZGlzYWJsZV9tb2NrX2NvZGVfaGFzaA0KICAgIGRlZiB0ZXN0X3JlZ2lzdGVyX291dHB1dF9zZGsoc2VsZiwgY2xpZW50OiBNTENsaWVudCk6DQogICAgICAgIGZyb20gYXp1cmUuYWkubWwuc3dlZXAgaW1wb3J0ICgNCiAgICAgICAgICAgIEJhbmRpdFBvbGljeSwNCiAgICAgICAgICAgIENob2ljZSwNCiAgICAgICAgICAgIExvZ05vcm1hbCwNCiAgICAgICAgICAgIExvZ1VuaWZvcm0sDQogICAgICAgICAgICBOb3JtYWwsDQogICAgICAgICAgICBRTG9nTm9ybWFsLA0KICAgICAgICAgICAgUUxvZ1VuaWZvcm0sDQogICAgICAgICAgICBRTm9ybWFsLA0KICAgICAgICAgICAgUVVuaWZvcm0sDQogICAgICAgICAgICBSYW5kaW50LA0KICAgICAgICAgICAgVW5pZm9ybSwNCiAgICAgICAgKQ0KDQogICAgICAgIGNvbXBvbmVudCA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT0iLi90ZXN0cy90ZXN0X2NvbmZpZ3MvY29tcG9uZW50cy9oZWxsb3dvcmxkX2NvbXBvbmVudC55bWwiKQ0KICAgICAgICBjb21wb25lbnRfaW5wdXQgPSBJbnB1dCh0eXBlPSJ1cmlfZmlsZSIsIHBhdGg9Imh0dHBzOi8vZHByZXBkYXRhLmJsb2IuY29yZS53aW5kb3dzLm5ldC9kZW1vL1RpdGFuaWMuY3N2IikNCiAgICAgICAgc3BhcmtfY29tcG9uZW50ID0gbG9hZF9jb21wb25lbnQoc291cmNlPSIuL3Rlc3RzL3Rlc3RfY29uZmlncy9zcGFya19jb21wb25lbnQvY29tcG9uZW50LnltbCIpDQogICAgICAgIHBhcmFsbGVsX2NvbXBvbmVudCA9IGxvYWRfY29tcG9uZW50KA0KICAgICAgICAgICAgc291cmNlPSIuL3Rlc3RzL3Rlc3RfY29uZmlncy9jb21wb25lbnRzL3BhcmFsbGVsX2NvbXBvbmVudF93aXRoX2ZpbGVfaW5wdXQueW1sIg0KICAgICAgICApDQogICAgICAgIHN3ZWVwX2NvbXBvbmVudCA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT0iLi90ZXN0cy90ZXN0X2NvbmZpZ3MvY29tcG9uZW50cy9oZWxsb3dvcmxkX2NvbXBvbmVudF9mb3Jfc3dlZXAueW1sIikNCg0KICAgICAgICBAZHNsLnBpcGVsaW5lKCkNCiAgICAgICAgZGVmIHJlZ2lzdGVyX25vZGVfb3V0cHV0KCk6DQogICAgICAgICAgICBub2RlID0gY29tcG9uZW50KGNvbXBvbmVudF9pbl9wYXRoPWNvbXBvbmVudF9pbnB1dCkNCiAgICAgICAgICAgIG5vZGUub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgubmFtZSA9ICJhX291dHB1dCINCiAgICAgICAgICAgIG5vZGUub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgudmVyc2lvbiA9ICIxIg0KDQogICAgICAgICAgICBzcGFya19ub2RlID0gc3BhcmtfY29tcG9uZW50KGZpbGVfaW5wdXQ9Y29tcG9uZW50X2lucHV0KQ0KICAgICAgICAgICAgc3Bhcmtfbm9kZS5jb21wdXRlID0gImNwdS1jbHVzdGVyIg0KICAgICAgICAgICAgc3Bhcmtfbm9kZS5vdXRwdXRzLm91dHB1dC5uYW1lID0gInNwYXJrX291dHB1dCINCiAgICAgICAgICAgIHNwYXJrX25vZGUub3V0cHV0cy5vdXRwdXQudmVyc2lvbiA9ICIxIg0KDQogICAgICAgICAgICBwYXJhbGxlbF9ub2RlID0gcGFyYWxsZWxfY29tcG9uZW50KA0KICAgICAgICAgICAgICAgIGpvYl9kYXRhX3BhdGg9SW5wdXQodHlwZT0ibWx0YWJsZSIsIHBhdGg9Imh0dHBzOi8vZHByZXBkYXRhLmJsb2IuY29yZS53aW5kb3dzLm5ldC9kZW1vL1RpdGFuaWMuY3N2IikNCiAgICAgICAgICAgICkNCiAgICAgICAgICAgIHBhcmFsbGVsX25vZGUub3V0cHV0cy5qb2Jfb3V0cHV0X3BhdGgubmFtZSA9ICJwYXJhbGxlbF9vdXRwdXQiDQogICAgICAgICAgICBwYXJhbGxlbF9ub2RlLm91dHB1dHMuam9iX291dHB1dF9wYXRoLnZlcnNpb24gPSAiMTIzX3BhcmFsbGVsIg0KDQogICAgICAgICAgICBjbWRfbm9kZTEgPSBzd2VlcF9jb21wb25lbnQoDQogICAgICAgICAgICAgICAgYmF0Y2hfc2l6ZT1DaG9pY2UoWzI1LCAzNV0pLA0KICAgICAgICAgICAgICAgIGZpcnN0X2xheWVyX25ldXJvbnM9UmFuZGludCh1cHBlcj01MCksDQogICAgICAgICAgICAgICAgc2Vjb25kX2xheWVyX25ldXJvbnM9UVVuaWZvcm0obWluX3ZhbHVlPTEwLCBtYXhfdmFsdWU9NTAsIHE9NSksDQogICAgICAgICAgICAgICAgdGhpcmRfbGF5ZXJfbmV1cm9ucz1RTG9nTm9ybWFsKG11PTUsIHNpZ21hPTEsIHE9NSksDQogICAgICAgICAgICAgICAgZXBvY2hzPVFMb2dVbmlmb3JtKG1pbl92YWx1ZT0xLCBtYXhfdmFsdWU9NSwgcT01KSwNCiAgICAgICAgICAgICAgICBtb21lbnR1bT1RTm9ybWFsKG11PTEwLCBzaWdtYT01LCBxPTIpLA0KICAgICAgICAgICAgICAgIHdlaWdodF9kZWNheT1Mb2dOb3JtYWwobXU9MCwgc2lnbWE9MSksDQogICAgICAgICAgICAgICAgbGVhcm5pbmdfcmF0ZT1Mb2dVbmlmb3JtKG1pbl92YWx1ZT0tNiwgbWF4X3ZhbHVlPS0xKSwNCiAgICAgICAgICAgICAgICBmMT1Ob3JtYWwobXU9MCwgc2lnbWE9MSksDQogICAgICAgICAgICAgICAgZjI9VW5pZm9ybShtaW5fdmFsdWU9MTAsIG1heF92YWx1ZT0yMCksDQogICAgICAgICAgICAgICAgZGF0YV9mb2xkZXI9SW5wdXQoDQogICAgICAgICAgICAgICAgICAgIHR5cGU9QXNzZXRUeXBlcy5NTFRBQkxFLA0KICAgICAgICAgICAgICAgICAgICBwYXRoPSJodHRwczovL2RwcmVwZGF0YS5ibG9iLmNvcmUud2luZG93cy5uZXQvZGVtby8iLA0KICAgICAgICAgICAgICAgICAgICBtb2RlPUlucHV0T3V0cHV0TW9kZXMuUk9fTU9VTlQsDQogICAgICAgICAgICAgICAgKSwNCiAgICAgICAgICAgICkNCiAgICAgICAgICAgIHN3ZWVwX25vZGUgPSBjbWRfbm9kZTEuc3dlZXAoDQogICAgICAgICAgICAgICAgcHJpbWFyeV9tZXRyaWM9InZhbGlkYXRpb25fYWNjIiwNCiAgICAgICAgICAgICAgICBnb2FsPSJtYXhpbWl6ZSIsDQogICAgICAgICAgICAgICAgc2FtcGxpbmdfYWxnb3JpdGhtPSJyYW5kb20iLA0KICAgICAgICAgICAgKQ0KICAgICAgICAgICAgc3dlZXBfbm9kZS5jb21wdXRlID0gImNwdS1jbHVzdGVyIg0KICAgICAgICAgICAgc3dlZXBfbm9kZS5zZXRfbGltaXRzKG1heF90b3RhbF90cmlhbHM9MiwgbWF4X2NvbmN1cnJlbnRfdHJpYWxzPTMsIHRpbWVvdXQ9NjAwKQ0KICAgICAgICAgICAgc3dlZXBfbm9kZS5lYXJseV90ZXJtaW5hdGlvbiA9IEJhbmRpdFBvbGljeShldmFsdWF0aW9uX2ludGVydmFsPTIsIHNsYWNrX2ZhY3Rvcj0wLjEsIGRlbGF5X2V2YWx1YXRpb249MSkNCiAgICAgICAgICAgIHN3ZWVwX25vZGUub3V0cHV0cy50cmFpbmVkX21vZGVsX2Rpci5uYW1lID0gInN3ZWVwX291dHB1dCINCiAgICAgICAgICAgIHN3ZWVwX25vZGUub3V0cHV0cy50cmFpbmVkX21vZGVsX2Rpci52ZXJzaW9uID0gInN3ZWVwXzIiDQoNCiAgICAgICAgcGlwZWxpbmUgPSByZWdpc3Rlcl9ub2RlX291dHB1dCgpDQogICAgICAgIHBpcGVsaW5lLnNldHRpbmdzLmRlZmF1bHRfY29tcHV0ZSA9ICJhenVyZW1sOmNwdS1jbHVzdGVyIg0KICAgICAgICBwaXBlbGluZV9qb2IgPSBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQ0KICAgICAgICBvdXRwdXQgPSBwaXBlbGluZV9qb2Iuam9ic1sibm9kZSJdLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRoDQogICAgICAgIGFzc2VydCBvdXRwdXQubmFtZSA9PSAiYV9vdXRwdXQiDQogICAgICAgIGFzc2VydCBvdXRwdXQudmVyc2lvbiA9PSAiMSINCiAgICAgICAgb3V0cHV0ID0gcGlwZWxpbmVfam9iLmpvYnNbInNwYXJrX25vZGUiXS5vdXRwdXRzLm91dHB1dA0KICAgICAgICBhc3NlcnQgb3V0cHV0Lm5hbWUgPT0gInNwYXJrX291dHB1dCINCiAgICAgICAgYXNzZXJ0IG91dHB1dC52ZXJzaW9uID09ICIxIg0KICAgICAgICBvdXRwdXQgPSBwaXBlbGluZV9qb2Iuam9ic1sicGFyYWxsZWxfbm9kZSJdLm91dHB1dHMuam9iX291dHB1dF9wYXRoDQogICAgICAgIGFzc2VydCBvdXRwdXQubmFtZSA9PSAicGFyYWxsZWxfb3V0cHV0Ig0KICAgICAgICBhc3NlcnQgb3V0cHV0LnZlcnNpb24gPT0gIjEyM19wYXJhbGxlbCINCiAgICAgICAgb3V0cHV0ID0gcGlwZWxpbmVfam9iLmpvYnNbInN3ZWVwX25vZGUiXS5vdXRwdXRzLnRyYWluZWRfbW9kZWxfZGlyDQogICAgICAgIGFzc2VydCBvdXRwdXQubmFtZSA9PSAic3dlZXBfb3V0cHV0Ig0KICAgICAgICBhc3NlcnQgb3V0cHV0LnZlcnNpb24gPT0gInN3ZWVwXzIiDQoNCiAgICAgICAgQGRzbC5waXBlbGluZSgpDQogICAgICAgIGRlZiByZWdpc3Rlcl9waXBlbGluZV9vdXRwdXQoKToNCiAgICAgICAgICAgIG5vZGUgPSBjb21wb25lbnQoY29tcG9uZW50X2luX3BhdGg9Y29tcG9uZW50X2lucHV0KQ0KICAgICAgICAgICAgcmV0dXJuIHsicGlwZWluZV9hX291dHB1dCI6IG5vZGUub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGh9DQoNCiAgICAgICAgcGlwZWxpbmUgPSByZWdpc3Rlcl9waXBlbGluZV9vdXRwdXQoKQ0KICAgICAgICBwaXBlbGluZS5vdXRwdXRzLnBpcGVpbmVfYV9vdXRwdXQubmFtZSA9ICJhX291dHB1dCINCiAgICAgICAgcGlwZWxpbmUub3V0cHV0cy5waXBlaW5lX2Ffb3V0cHV0LnZlcnNpb24gPSAiMSINCiAgICAgICAgcGlwZWxpbmUuc2V0dGluZ3MuZGVmYXVsdF9jb21wdXRlID0gImF6dXJlbWw6Y3B1LWNsdXN0ZXIiDQogICAgICAgIHBpcGVsaW5lX2pvYiA9IGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQogICAgICAgIG91dHB1dCA9IHBpcGVsaW5lX2pvYi5vdXRwdXRzLnBpcGVpbmVfYV9vdXRwdXQNCiAgICAgICAgYXNzZXJ0IG91dHB1dC5uYW1lID09ICJhX291dHB1dCINCiAgICAgICAgYXNzZXJ0IG91dHB1dC52ZXJzaW9uID09ICIxIg0KDQogICAgICAgIEBkc2wucGlwZWxpbmUoKQ0KICAgICAgICBkZWYgcmVnaXN0ZXJfYm90aF9vdXRwdXQoKToNCiAgICAgICAgICAgIG5vZGUgPSBjb21wb25lbnQoY29tcG9uZW50X2luX3BhdGg9Y29tcG9uZW50X2lucHV0KQ0KICAgICAgICAgICAgbm9kZS5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aC5uYW1lID0gImFfb3V0cHV0Ig0KICAgICAgICAgICAgbm9kZS5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aC52ZXJzaW9uID0gIjEiDQogICAgICAgICAgICByZXR1cm4geyJwaXBlaW5lX2Ffb3V0cHV0Ijogbm9kZS5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aH0NCg0KICAgICAgICBwaXBlbGluZSA9IHJlZ2lzdGVyX2JvdGhfb3V0cHV0KCkNCiAgICAgICAgcGlwZWxpbmUub3V0cHV0cy5waXBlaW5lX2Ffb3V0cHV0Lm5hbWUgPSAiYl9vdXRwdXQiDQogICAgICAgIHBpcGVsaW5lLm91dHB1dHMucGlwZWluZV9hX291dHB1dC52ZXJzaW9uID0gIjIiDQogICAgICAgIHBpcGVsaW5lLnNldHRpbmdzLmRlZmF1bHRfY29tcHV0ZSA9ICJhenVyZW1sOmNwdS1jbHVzdGVyIg0KICAgICAgICBwaXBlbGluZV9qb2IgPSBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQ0KDQogICAgICAgIHBpcGVsaW5lX291dHB1dCA9IHBpcGVsaW5lX2pvYi5vdXRwdXRzLnBpcGVpbmVfYV9vdXRwdXQNCiAgICAgICAgYXNzZXJ0IHBpcGVsaW5lX291dHB1dC5uYW1lID09ICJiX291dHB1dCINCiAgICAgICAgYXNzZXJ0IHBpcGVsaW5lX291dHB1dC52ZXJzaW9uID09ICIyIg0KICAgICAgICBub2RlX291dHB1dCA9IHBpcGVsaW5lX2pvYi5qb2JzWyJub2RlIl0ub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgNCiAgICAgICAgYXNzZXJ0IG5vZGVfb3V0cHV0Lm5hbWUgPT0gTm9uZQ0KICAgICAgICBhc3NlcnQgbm9kZV9vdXRwdXQudmVyc2lvbiA9PSBOb25lDQoNCiAgICBkZWYgdGVzdF9kc2xfcGlwZWxpbmVfd2l0aF9kYXRhX3RyYW5zZmVyX2NvcHlfMnVyaWZvbGRlcihzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOg0KICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUuY29weV9kYXRhLnBpcGVsaW5lIGltcG9ydCAoDQogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmVfZnJvbV95YW1sIGFzIGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lLA0KICAgICAgICApDQoNCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSgpDQoNCiAgICAgICAgcGlwZWxpbmVfam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSkNCg0KICAgICAgICBhY3R1YWxfam9iID0gb21pdF93aXRoX3dpbGRjYXJkKHBpcGVsaW5lX2pvYi5fdG9fcmVzdF9vYmplY3QoKS5wcm9wZXJ0aWVzLmFzX2RpY3QoKSwgKmNvbW1vbl9vbWl0X2ZpZWxkcykNCg0KICAgICAgICBleHBlY3RlZF9qb2IgPSB7DQogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAic3VibWl0IGEgcGlwZWxpbmUgd2l0aCBkYXRhIHRyYW5zZmVyIGNvcHkgam9iIiwNCiAgICAgICAgICAgICJpbnB1dHMiOiB7DQogICAgICAgICAgICAgICAgImNvc21vc19mb2xkZXIiOiB7ImpvYl9pbnB1dF90eXBlIjogInVyaV9mb2xkZXIiLCAibW9kZSI6ICJSZWFkT25seU1vdW50In0sDQogICAgICAgICAgICAgICAgImNvc21vc19mb2xkZXJfZHVwIjogeyJqb2JfaW5wdXRfdHlwZSI6ICJ1cmlfZm9sZGVyIiwgIm1vZGUiOiAiUmVhZE9ubHlNb3VudCJ9LA0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICJpc19hcmNoaXZlZCI6IEZhbHNlLA0KICAgICAgICAgICAgImpvYl90eXBlIjogIlBpcGVsaW5lIiwNCiAgICAgICAgICAgICJqb2JzIjogew0KICAgICAgICAgICAgICAgICJtZXJnZV9maWxlcyI6IHsNCiAgICAgICAgICAgICAgICAgICAgImRhdGFfY29weV9tb2RlIjogIm1lcmdlX3dpdGhfb3ZlcndyaXRlIiwNCiAgICAgICAgICAgICAgICAgICAgImlucHV0cyI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICJmb2xkZXIxIjogeyJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwgInZhbHVlIjogIiR7e3BhcmVudC5pbnB1dHMuY29zbW9zX2ZvbGRlcn19In0sDQogICAgICAgICAgICAgICAgICAgICAgICAiZm9sZGVyMiI6IHsiam9iX2lucHV0X3R5cGUiOiAibGl0ZXJhbCIsICJ2YWx1ZSI6ICIke3twYXJlbnQuaW5wdXRzLmNvc21vc19mb2xkZXJfZHVwfX0ifSwNCiAgICAgICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAibWVyZ2VfZmlsZXMiLA0KICAgICAgICAgICAgICAgICAgICAib3V0cHV0cyI6IHsib3V0cHV0X2ZvbGRlciI6IHsidHlwZSI6ICJsaXRlcmFsIiwgInZhbHVlIjogIiR7e3BhcmVudC5vdXRwdXRzLm1lcmdlZF9ibG9ifX0ifX0sDQogICAgICAgICAgICAgICAgICAgICJ0YXNrIjogImNvcHlfZGF0YSIsDQogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImRhdGFfdHJhbnNmZXIiLA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAib3V0cHV0cyI6IHsibWVyZ2VkX2Jsb2IiOiB7ImpvYl9vdXRwdXRfdHlwZSI6ICJ1cmlfZm9sZGVyIiwgIm1vZGUiOiAiUmVhZFdyaXRlTW91bnQifX0sDQogICAgICAgICAgICAic2V0dGluZ3MiOiB7ImRlZmF1bHRfY29tcHV0ZSI6ICJzZXJ2ZXJsZXNzIn0sDQogICAgICAgICAgICAidGFncyI6IHt9LA0KICAgICAgICB9DQogICAgICAgIGFzc2VydCBleHBlY3RlZF9qb2IgPT0gYWN0dWFsX2pvYg0KDQogICAgZGVmIHRlc3Rfb3V0cHV0X3NldHRpbmdfcGF0aChzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOg0KICAgICAgICBjb21wb25lbnRfeWFtbCA9IGNvbXBvbmVudHNfZGlyIC8gImhlbGxvd29ybGRfY29tcG9uZW50LnltbCINCiAgICAgICAgY29tcG9uZW50X2Z1bmMxID0gbG9hZF9jb21wb25lbnQoc291cmNlPWNvbXBvbmVudF95YW1sKQ0KDQogICAgICAgICMgY2FzZSAxOiBvbmx5IG5vZGUgbGV2ZWwgaGFzIHNldHRpbmcNCiAgICAgICAgQGRzbC5waXBlbGluZSgpDQogICAgICAgIGRlZiBwaXBlbGluZSgpOg0KICAgICAgICAgICAgbm9kZTEgPSBjb21wb25lbnRfZnVuYzEoY29tcG9uZW50X2luX251bWJlcj0xLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5wdXQpDQogICAgICAgICAgICBub2RlMS5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aC5wYXRoID0gImF6dXJlbWw6Ly9kYXRhc3RvcmVzL3dvcmtzcGFjZWJsb2JzdG9yZS9wYXRocy9vdXRwdXRzLzEiDQogICAgICAgICAgICByZXR1cm4gbm9kZTEub3V0cHV0cw0KDQogICAgICAgIHBpcGVsaW5lX2pvYiA9IHBpcGVsaW5lKCkNCiAgICAgICAgcGlwZWxpbmVfam9iLnNldHRpbmdzLmRlZmF1bHRfY29tcHV0ZSA9ICJjcHUtY2x1c3RlciINCiAgICAgICAgcGlwZWxpbmVfam9iID0gYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmVfam9iLCBjbGllbnQpDQogICAgICAgIGpvYl9kaWN0ID0gcGlwZWxpbmVfam9iLl90b19kaWN0KCkNCiAgICAgICAgZXhwZWN0ZWRfbm9kZV9vdXRwdXRfZGljdCA9IHsNCiAgICAgICAgICAgICJjb21wb25lbnRfb3V0X3BhdGgiOiAiJHt7cGFyZW50Lm91dHB1dHMuY29tcG9uZW50X291dF9wYXRofX0iLA0KICAgICAgICB9DQogICAgICAgIGV4cGVjdGVkX3BpcGVsaW5lX291dHB1dF9kaWN0ID0gew0KICAgICAgICAgICAgImNvbXBvbmVudF9vdXRfcGF0aCI6IHsNCiAgICAgICAgICAgICAgICAjIGRlZmF1bHQgbW9kZSBhZGRlZCBieSBtdCwgZGVmYXVsdCB0eXBlIGFkZGVkIGJ5IFNESw0KICAgICAgICAgICAgICAgICJtb2RlIjogInJ3X21vdW50IiwNCiAgICAgICAgICAgICAgICAidHlwZSI6ICJ1cmlfZm9sZGVyIiwNCiAgICAgICAgICAgICAgICAjIG5vZGUgbGV2ZWwgY29uZmlnIHdpbGwgYmUgY29waWVkIHRvIHBpcGVsaW5lIGxldmVsDQogICAgICAgICAgICAgICAgInBhdGgiOiAiYXp1cmVtbDovL2RhdGFzdG9yZXMvd29ya3NwYWNlYmxvYnN0b3JlL3BhdGhzL291dHB1dHMvMSIsDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgYXNzZXJ0IGpvYl9kaWN0WyJqb2JzIl1bIm5vZGUxIl1bIm91dHB1dHMiXSA9PSBleHBlY3RlZF9ub2RlX291dHB1dF9kaWN0DQogICAgICAgIGFzc2VydCBqb2JfZGljdFsib3V0cHV0cyJdID09IGV4cGVjdGVkX3BpcGVsaW5lX291dHB1dF9kaWN0DQoNCiAgICBkZWYgdGVzdF9waXBlbGluZV9jb21wb25lbnRfb3V0cHV0X3NldHRpbmcoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToNCiAgICAgICAgY29tcG9uZW50X3lhbWwgPSBjb21wb25lbnRzX2RpciAvICJoZWxsb3dvcmxkX2NvbXBvbmVudC55bWwiDQogICAgICAgIGNvbXBvbmVudF9mdW5jMSA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1jb21wb25lbnRfeWFtbCkNCg0KICAgICAgICBAZHNsLnBpcGVsaW5lKCkNCiAgICAgICAgZGVmIGlubmVyX3BpcGVsaW5lKCk6DQogICAgICAgICAgICBub2RlMSA9IGNvbXBvbmVudF9mdW5jMShjb21wb25lbnRfaW5fbnVtYmVyPTEsIGNvbXBvbmVudF9pbl9wYXRoPWpvYl9pbnB1dCkNCiAgICAgICAgICAgIG5vZGUxLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRoLnBhdGggPSAiYXp1cmVtbDovL2RhdGFzdG9yZXMvd29ya3NwYWNlYmxvYnN0b3JlL3BhdGhzL291dHB1dHMvMSINCiAgICAgICAgICAgICMgbm9kZTEncyBvdXRwdXQgc2V0dGluZyB3aWxsIGJlIGNvcGllZCB0byBwaXBlbGluZSdzIHNldHRpbmcNCiAgICAgICAgICAgIHJldHVybiBub2RlMS5vdXRwdXRzDQoNCiAgICAgICAgQGRzbC5waXBlbGluZSgpDQogICAgICAgIGRlZiBvdXRlcl9waXBlbGluZSgpOg0KICAgICAgICAgICAgIyBpbm5lcl9waXBlbGluZSdzIG91dHB1dCBzZXR0aW5nIHdpbGwgYmUgY29waWVkIHRvIG5vZGUxJ3Mgc2V0dGluZw0KICAgICAgICAgICAgbm9kZTEgPSBpbm5lcl9waXBlbGluZSgpDQogICAgICAgICAgICAjIG5vZGUxJ3Mgb3V0cHV0IHNldHRpbmcgd2lsbCBiZSBjb3BpZWQgdG8gcGlwZWxpbmUncyBzZXR0aW5nDQogICAgICAgICAgICByZXR1cm4gbm9kZTEub3V0cHV0cw0KDQogICAgICAgIHBpcGVsaW5lX2pvYiA9IG91dGVyX3BpcGVsaW5lKCkNCiAgICAgICAgcGlwZWxpbmVfam9iX2RpY3QgPSBwaXBlbGluZV9qb2IuX3RvX2RpY3QoKQ0KICAgICAgICBhc3NlcnQgcGlwZWxpbmVfam9iX2RpY3RbIm91dHB1dHMiXSA9PSB7DQogICAgICAgICAgICAiY29tcG9uZW50X291dF9wYXRoIjogew0KICAgICAgICAgICAgICAgICJwYXRoIjogImF6dXJlbWw6Ly9kYXRhc3RvcmVzL3dvcmtzcGFjZWJsb2JzdG9yZS9wYXRocy9vdXRwdXRzLzEiLA0KICAgICAgICAgICAgICAgICJ0eXBlIjogInVyaV9mb2xkZXIiLA0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHBpcGVsaW5lX2NvbXBvbmVudCA9IHBpcGVsaW5lX2pvYi5qb2JzWyJub2RlMSJdLmNvbXBvbmVudA0KICAgICAgICBwaXBlbGluZV9jb21wb25lbnRfZGljdCA9IHBpcGVsaW5lX2NvbXBvbmVudC5fdG9fZGljdCgpDQogICAgICAgIGFzc2VydCBwaXBlbGluZV9jb21wb25lbnRfZGljdFsib3V0cHV0cyJdID09IHsiY29tcG9uZW50X291dF9wYXRoIjogeyJ0eXBlIjogInVyaV9mb2xkZXIifX0NCiAgICAgICAgYXNzZXJ0IHBpcGVsaW5lX2NvbXBvbmVudF9kaWN0WyJqb2JzIl1bIm5vZGUxIl1bIm91dHB1dHMiXSA9PSB7DQogICAgICAgICAgICAiY29tcG9uZW50X291dF9wYXRoIjogIiR7e3BhcmVudC5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aH19Ig0KICAgICAgICB9DQoNCiAgICAgICAgcGlwZWxpbmVfam9iLnNldHRpbmdzLmRlZmF1bHRfY29tcHV0ZSA9ICJjcHUtY2x1c3RlciINCiAgICAgICAgcGlwZWxpbmVfam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZV9qb2IpDQogICAgICAgIGNsaWVudC5qb2JzLmJlZ2luX2NhbmNlbChwaXBlbGluZV9qb2IubmFtZSkNCiAgICAgICAgam9iX2RpY3QgPSBwaXBlbGluZV9qb2IuX3RvX2RpY3QoKQ0KICAgICAgICAjIG91dGVyIHBpcGVsaW5lJ3Mgbm9kZTEgc2hvdWxkIGhhdmUgdGhlIG91dHB1dCBzZXR0aW5nDQogICAgICAgIGFzc2VydCBqb2JfZGljdFsiam9icyJdWyJub2RlMSJdWyJvdXRwdXRzIl0gPT0geyJjb21wb25lbnRfb3V0X3BhdGgiOiAiJHt7cGFyZW50Lm91dHB1dHMuY29tcG9uZW50X291dF9wYXRofX0ifQ0KICAgICAgICBhc3NlcnQgam9iX2RpY3RbIm91dHB1dHMiXSA9PSB7DQogICAgICAgICAgICAiY29tcG9uZW50X291dF9wYXRoIjogew0KICAgICAgICAgICAgICAgICJtb2RlIjogInJ3X21vdW50IiwNCiAgICAgICAgICAgICAgICAidHlwZSI6ICJ1cmlfZm9sZGVyIiwNCiAgICAgICAgICAgICAgICAjIG5vZGUgbGV2ZWwgY29uZmlnIHdpbGwgYmUgY29waWVkIHRvIHBpcGVsaW5lIGxldmVsDQogICAgICAgICAgICAgICAgInBhdGgiOiAiYXp1cmVtbDovL2RhdGFzdG9yZXMvd29ya3NwYWNlYmxvYnN0b3JlL3BhdGhzL291dHB1dHMvMSIsDQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgIEBweXRlc3QubWFyay5kaXNhYmxlX21vY2tfY29kZV9oYXNoDQogICAgZGVmIHRlc3RfcmVnaXN0ZXJfb3V0cHV0X3Nka19zdWNjZWVkKHNlbGYsIGNsaWVudDogTUxDbGllbnQpOg0KICAgICAgICBjb21wb25lbnQgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9Ii4vdGVzdHMvdGVzdF9jb25maWdzL2NvbXBvbmVudHMvaGVsbG93b3JsZF9jb21wb25lbnQueW1sIikNCiAgICAgICAgY29tcG9uZW50X2lucHV0ID0gSW5wdXQodHlwZT0idXJpX2ZpbGUiLCBwYXRoPSJodHRwczovL2RwcmVwZGF0YS5ibG9iLmNvcmUud2luZG93cy5uZXQvZGVtby9UaXRhbmljLmNzdiIpDQoNCiAgICAgICAgQGRzbC5waXBlbGluZSgpDQogICAgICAgIGRlZiBzdWJfcGlwZWxpbmUoKToNCiAgICAgICAgICAgIG5vZGUgPSBjb21wb25lbnQoY29tcG9uZW50X2luX3BhdGg9Y29tcG9uZW50X2lucHV0KQ0KICAgICAgICAgICAgbm9kZS5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aC5uYW1lID0gInN1Yl9waXBlbGluZV9vdXRwdXQiDQogICAgICAgICAgICBub2RlLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRoLnZlcnNpb24gPSAidjEiDQogICAgICAgICAgICByZXR1cm4geyJzdWJfcGlwZWluZV9hX291dHB1dCI6IG5vZGUub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGh9DQoNCiAgICAgICAgQGRzbC5waXBlbGluZSgpDQogICAgICAgIGRlZiByZWdpc3Rlcl9ib3RoX291dHB1dCgpOg0KICAgICAgICAgICAgIyByZWdpc3RlciBOb2RlT3V0cHV0IHdoaWNoIGlzIGJpbmRpbmcgdG8gUGlwZWxpbmVPdXRwdXQNCiAgICAgICAgICAgIG5vZGUgPSBjb21wb25lbnQoY29tcG9uZW50X2luX3BhdGg9Y29tcG9uZW50X2lucHV0KQ0KICAgICAgICAgICAgbm9kZS5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aC5uYW1lID0gIm4xX291dHB1dCINCiAgICAgICAgICAgIG5vZGUub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgudmVyc2lvbiA9ICJ2MSINCg0KICAgICAgICAgICAgIyByZWdpc3RlciBOb2RlT3V0cHV0IHdoaWNoIGlzbid0IGJpbmRpbmcgdG8gUGlwZWxpbmVPdXRwdXQNCiAgICAgICAgICAgIG5vZGVfMiA9IGNvbXBvbmVudChjb21wb25lbnRfaW5fcGF0aD1jb21wb25lbnRfaW5wdXQpDQogICAgICAgICAgICBub2RlXzIub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgubmFtZSA9ICJuMl9vdXRwdXQiDQogICAgICAgICAgICBub2RlXzIub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgudmVyc2lvbiA9ICJ2MSINCg0KICAgICAgICAgICAgIyByZWdpc3RlciBOb2RlT3V0cHV0IHdpdGhvdXQgdmVyc2lvbiwgaW4gdGhpcyBjYXNlIHRoZSBydW4gcmVzdWx0IGNhbiBiZSByZXVzZWQNCiAgICAgICAgICAgIG5vZGVfMyA9IGNvbXBvbmVudChjb21wb25lbnRfaW5fcGF0aD1jb21wb25lbnRfaW5wdXQpDQogICAgICAgICAgICBub2RlXzMub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgubmFtZSA9ICJuM19vdXRwdXQiDQoNCiAgICAgICAgICAgICMgcmVnaXN0ZXIgTm9kZU91dHB1dCBvZiBzdWJncmFwaA0KICAgICAgICAgICAgc3ViX25vZGUgPSBzdWJfcGlwZWxpbmUoKQ0KICAgICAgICAgICAgc3ViX25vZGUub3V0cHV0cy5zdWJfcGlwZWluZV9hX291dHB1dC5uYW1lID0gInN1Yl9waXBlbGluZSINCiAgICAgICAgICAgIHN1Yl9ub2RlLm91dHB1dHMuc3ViX3BpcGVpbmVfYV9vdXRwdXQudmVyc2lvbiA9ICJ2MSINCg0KICAgICAgICAgICAgcmV0dXJuIHsicGlwZWluZV9hX291dHB1dCI6IG5vZGUub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGh9DQoNCiAgICAgICAgcGlwZWxpbmUgPSByZWdpc3Rlcl9ib3RoX291dHB1dCgpDQogICAgICAgIHBpcGVsaW5lLm91dHB1dHMucGlwZWluZV9hX291dHB1dC5uYW1lID0gInAxX291dHB1dCINCiAgICAgICAgcGlwZWxpbmUub3V0cHV0cy5waXBlaW5lX2Ffb3V0cHV0LnZlcnNpb24gPSAidjEiDQogICAgICAgIHBpcGVsaW5lLnNldHRpbmdzLmRlZmF1bHRfY29tcHV0ZSA9ICJjcHUtY2x1c3RlciINCiAgICAgICAgcGlwZWxpbmVfam9iID0gYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkNCg0KICAgICAgICBjaGVja19uYW1lX2FuZF92ZXJzaW9uKHBpcGVsaW5lX2pvYi5vdXRwdXRzLnBpcGVpbmVfYV9vdXRwdXQsICJwMV9vdXRwdXQiLCAidjEiKQ0KICAgICAgICBjaGVja19uYW1lX2FuZF92ZXJzaW9uKHBpcGVsaW5lX2pvYi5qb2JzWyJub2RlXzIiXS5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aCwgIm4yX291dHB1dCIsICJ2MSIpDQogICAgICAgIGFzc2VydCBwaXBlbGluZV9qb2Iuam9ic1sibm9kZV8zIl0ub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgubmFtZSA9PSAibjNfb3V0cHV0Ig0KICAgICAgICBjaGVja19uYW1lX2FuZF92ZXJzaW9uKHBpcGVsaW5lX2pvYi5qb2JzWyJzdWJfbm9kZSJdLm91dHB1dHMuc3ViX3BpcGVpbmVfYV9vdXRwdXQsICJzdWJfcGlwZWxpbmUiLCAidjEiKQ0KDQogICAgQHB5dGVzdC5tYXJrLnNraXAocmVhc29uPSJLZXlFcnJvcjogJ25vZGVfMiciKQ0KICAgIEBweXRlc3QubWFyay5kaXNhYmxlX21vY2tfY29kZV9oYXNoDQogICAgZGVmIHRlc3RfcmVnaXN0ZXJfb3V0cHV0X2Zvcl9waXBlbGluZV9jb21wb25lbnQoc2VsZiwgY2xpZW50OiBNTENsaWVudCk6DQogICAgICAgIGNvbXBvbmVudCA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT0iLi90ZXN0cy90ZXN0X2NvbmZpZ3MvY29tcG9uZW50cy9oZWxsb3dvcmxkX2NvbXBvbmVudC55bWwiKQ0KICAgICAgICBjb21wb25lbnRfaW5wdXQgPSBJbnB1dCh0eXBlPSJ1cmlfZmlsZSIsIHBhdGg9Imh0dHBzOi8vZHByZXBkYXRhLmJsb2IuY29yZS53aW5kb3dzLm5ldC9kZW1vL1RpdGFuaWMuY3N2IikNCg0KICAgICAgICBAZHNsLnBpcGVsaW5lKCkNCiAgICAgICAgZGVmIHN1Yl9waXBlbGluZSgpOg0KICAgICAgICAgICAgbm9kZV8xID0gY29tcG9uZW50KGNvbXBvbmVudF9pbl9wYXRoPWNvbXBvbmVudF9pbnB1dCkgICMgdGVzdCB1c2UgT3V0cHV0IHRvIGluaXRpYWxpemUgc3ViZ3JhcGguam9icy5vdXRwdXQNCiAgICAgICAgICAgIG5vZGVfMS5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aCA9IE91dHB1dChuYW1lPSJzdWJfcGlwZWxpbmVfMV9vdXRwdXQiLCB2ZXJzaW9uPSJ2MSIpDQoNCiAgICAgICAgICAgIG5vZGVfMiA9IGNvbXBvbmVudChjb21wb25lbnRfaW5fcGF0aD1jb21wb25lbnRfaW5wdXQpICAjIHRlc3Qgd2UgY2FuIHBhc3MgTm9kZU91dHB1dCBpbiBQaXBlbGluZUNvbXBvbmVudA0KICAgICAgICAgICAgbm9kZV8yLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRoLm5hbWUgPSAic3ViX3BpcGVsaW5lXzJfb3V0cHV0Ig0KICAgICAgICAgICAgbm9kZV8yLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRoLnZlcnNpb24gPSAidjIiDQoNCiAgICAgICAgICAgIHJldHVybiB7DQogICAgICAgICAgICAgICAgInN1Yl9ub2RlXzEiOiBub2RlXzEub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgsDQogICAgICAgICAgICB9DQoNCiAgICAgICAgQGRzbC5waXBlbGluZSgpDQogICAgICAgIGRlZiByZWdpc3Rlcl9ib3RoX291dHB1dCgpOg0KICAgICAgICAgICAgc3ViZ3JhcGggPSBzdWJfcGlwZWxpbmUoKQ0KDQogICAgICAgIHBpcGVsaW5lID0gcmVnaXN0ZXJfYm90aF9vdXRwdXQoKQ0KICAgICAgICBwaXBlbGluZS5zZXR0aW5ncy5kZWZhdWx0X2NvbXB1dGUgPSAiY3B1LWNsdXN0ZXIiDQogICAgICAgIHBpcGVsaW5lX2pvYiA9IGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICAgICAgY2hlY2tfbmFtZV9hbmRfdmVyc2lvbihwaXBlbGluZV9qb2Iuam9ic1sic3ViZ3JhcGgiXS5vdXRwdXRzWyJzdWJfbm9kZV8xIl0sICJzdWJfcGlwZWxpbmVfMV9vdXRwdXQiLCAidjEiKQ0KDQogICAgICAgIHN1YmdyYXBoX2lkID0gcGlwZWxpbmVfam9iLmpvYnNbInN1YmdyYXBoIl0uY29tcG9uZW50DQogICAgICAgIHN1YmdyYXBoX2lkID0gc3ViZ3JhcGhfaWQuc3BsaXQoIjoiKQ0KICAgICAgICBzdWJncmFwaCA9IGNsaWVudC5jb21wb25lbnRzLmdldChuYW1lPXN1YmdyYXBoX2lkWzBdLCB2ZXJzaW9uPXN1YmdyYXBoX2lkWzFdKQ0KICAgICAgICAjIFRPRE86IGVuYWJsZSB0aGlzIGNoZWNrIGluIHBsYXliYWNrIG1vZGUgYWZ0ZXIgcGlwZWxpbmVfY29tcG9uZW50LmpvYnMgaXMgb3BlbmVkIGluIGFsbCBzdWJzY3JpcHRpb25zDQogICAgICAgIGlmIGlzX2xpdmUoKToNCiAgICAgICAgICAgIGNoZWNrX25hbWVfYW5kX3ZlcnNpb24oc3ViZ3JhcGguam9ic1sibm9kZV8yIl0ub3V0cHV0c1siY29tcG9uZW50X291dF9wYXRoIl0sICJzdWJfcGlwZWxpbmVfMl9vdXRwdXQiLCAidjIiKQ0KDQogICAgQHB5dGVzdC5tYXJrLmRpc2FibGVfbW9ja19jb2RlX2hhc2gNCiAgICAjIHdpdGhvdXQgdGhpcyBtYXJrLCB0aGUgY29kZSB3b3VsZCBiZSBwYXNzZWQgd2l0aCBkaWZmZXJlbnQgaWQgZXZlbiB3aGVuIHdlIHVwbG9hZCB0aGUgc2FtZSBjb21wb25lbnQsDQogICAgIyBhZGQgdGhpcyBtYXJrIHRvIHJldXNlIG5vZGUgYW5kIGZ1cnRoZXIgcmV1c2UgcGlwZWxpbmUNCiAgICBkZWYgdGVzdF9yZWdpc3Rlcl93aXRoX291dHB1dF9mb3JtYXQoc2VsZiwgY2xpZW50OiBNTENsaWVudCk6DQogICAgICAgIGNvbXBvbmVudCA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT0iLi90ZXN0cy90ZXN0X2NvbmZpZ3MvY29tcG9uZW50cy9oZWxsb3dvcmxkX2NvbXBvbmVudC55bWwiKQ0KICAgICAgICBjb21wb25lbnRfaW5wdXQgPSBJbnB1dCh0eXBlPSJ1cmlfZmlsZSIsIHBhdGg9Imh0dHBzOi8vZHByZXBkYXRhLmJsb2IuY29yZS53aW5kb3dzLm5ldC9kZW1vL1RpdGFuaWMuY3N2IikNCg0KICAgICAgICBAZHNsLnBpcGVsaW5lKCkNCiAgICAgICAgZGVmIHN1Yl9waXBlbGluZSgpOg0KICAgICAgICAgICAgbm9kZSA9IGNvbXBvbmVudChjb21wb25lbnRfaW5fcGF0aD1jb21wb25lbnRfaW5wdXQpDQogICAgICAgICAgICBub2RlLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRoID0gT3V0cHV0KG5hbWU9InN1Yl9waXBlbGluZV9vX291dHB1dCIsIHZlcnNpb249InYxIikNCiAgICAgICAgICAgIHJldHVybiB7InN1Yl9waXBlaW5lX2Ffb3V0cHV0Ijogbm9kZS5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aH0NCg0KICAgICAgICBAZHNsLnBpcGVsaW5lKCkNCiAgICAgICAgZGVmIHJlZ2lzdGVyX2JvdGhfb3V0cHV0KCk6DQogICAgICAgICAgICAjIHJlZ2lzdGVyIE5vZGVPdXRwdXQgd2hpY2ggaXMgYmluZGluZyB0byBQaXBlbGluZU91dHB1dA0KICAgICAgICAgICAgbm9kZSA9IGNvbXBvbmVudChjb21wb25lbnRfaW5fcGF0aD1jb21wb25lbnRfaW5wdXQpICAjIGJpbmRpbmcgYW5kIHJlLWRlZmluZSBuYW1lIGFuZCB2ZXJzaW9uDQogICAgICAgICAgICBub2RlLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRoID0gT3V0cHV0KG5hbWU9Im4xX29fb3V0cHV0IiwgdmVyc2lvbj0iMSIpDQoNCiAgICAgICAgICAgIG5vZGVfMiA9IGNvbXBvbmVudChjb21wb25lbnRfaW5fcGF0aD1jb21wb25lbnRfaW5wdXQpICAjIGJpbmRpbmcNCiAgICAgICAgICAgIG5vZGVfMi5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aCA9IE91dHB1dChuYW1lPSJuMl9vX291dHB1dCIsIHZlcnNpb249IjIiKQ0KDQogICAgICAgICAgICBub2RlXzMgPSBjb21wb25lbnQoY29tcG9uZW50X2luX3BhdGg9Y29tcG9uZW50X2lucHV0KSAgIyBpc24ndCBiaW5kaW5nDQogICAgICAgICAgICBub2RlXzMub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGggPSBPdXRwdXQobmFtZT0ibjNfb19vdXRwdXQiLCB2ZXJzaW9uPSI0IikNCg0KICAgICAgICAgICAgc3ViX25vZGUgPSBzdWJfcGlwZWxpbmUoKSAgIyB0ZXN0IHNldCBPdXRwdXQgZm9yIFBpcGVsaW5lQ29tcG9uZW50DQogICAgICAgICAgICBzdWJfbm9kZS5vdXRwdXRzLnN1Yl9waXBlaW5lX2Ffb3V0cHV0ID0gT3V0cHV0KG5hbWU9InN1YmdyYXBoX29fb3V0cHV0IiwgdmVyc2lvbj0iMSIpDQogICAgICAgICAgICByZXR1cm4gew0KICAgICAgICAgICAgICAgICJwaXBlaW5lX2Ffb3V0cHV0Ijogbm9kZS5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aCwNCiAgICAgICAgICAgICAgICAicGlwZWluZV9iX291dHB1dCI6IG5vZGVfMi5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aCwNCiAgICAgICAgICAgIH0NCg0KICAgICAgICBwaXBlbGluZSA9IHJlZ2lzdGVyX2JvdGhfb3V0cHV0KCkNCiAgICAgICAgcGlwZWxpbmUuc2V0dGluZ3MuZGVmYXVsdF9jb21wdXRlID0gImNwdS1jbHVzdGVyIg0KICAgICAgICBwaXBlbGluZS5vdXRwdXRzLnBpcGVpbmVfYV9vdXRwdXQubmFtZSA9ICJucF9vdXRwdXQiDQogICAgICAgIHBpcGVsaW5lLm91dHB1dHMucGlwZWluZV9hX291dHB1dC52ZXJzaW9uID0gIjEiDQogICAgICAgIHBpcGVsaW5lX2pvYiA9IGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpDQoNCiAgICAgICAgY2hlY2tfbmFtZV9hbmRfdmVyc2lvbihwaXBlbGluZV9qb2Iub3V0cHV0cy5waXBlaW5lX2Ffb3V0cHV0LCAibnBfb3V0cHV0IiwgIjEiKQ0KICAgICAgICBjaGVja19uYW1lX2FuZF92ZXJzaW9uKHBpcGVsaW5lX2pvYi5vdXRwdXRzLnBpcGVpbmVfYl9vdXRwdXQsICJuMl9vX291dHB1dCIsICIyIikNCiAgICAgICAgY2hlY2tfbmFtZV9hbmRfdmVyc2lvbihwaXBlbGluZV9qb2Iuam9ic1sibm9kZV8zIl0ub3V0cHV0c1siY29tcG9uZW50X291dF9wYXRoIl0sICJuM19vX291dHB1dCIsICI0IikNCiAgICAgICAgY2hlY2tfbmFtZV9hbmRfdmVyc2lvbihwaXBlbGluZV9qb2Iuam9ic1sic3ViX25vZGUiXS5vdXRwdXRzWyJzdWJfcGlwZWluZV9hX291dHB1dCJdLCAic3ViZ3JhcGhfb19vdXRwdXQiLCAiMSIpDQoNCiAgICBkZWYgdGVzdF9waXBlbGluZV9pbnB1dF9iaW5kaW5nX2xpbWl0c190aW1lb3V0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpOg0KICAgICAgICBjb21wb25lbnRfeWFtbCA9IHIiLi90ZXN0cy90ZXN0X2NvbmZpZ3MvY29tcG9uZW50cy9oZWxsb3dvcmxkX2NvbXBvbmVudF9ub19wYXRocy55bWwiDQogICAgICAgIGNvbXBvbmVudF9mdW5jID0gbG9hZF9jb21wb25lbnQoc291cmNlPWNvbXBvbmVudF95YW1sKQ0KDQogICAgICAgIEBkc2wucGlwZWxpbmUNCiAgICAgICAgZGVmIG15X3BpcGVsaW5lKHRpbWVvdXQpIC0\\u002BIEFJU3VwZXJDb21wdXRlciBpcyBleHBlY3RlZA0KICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7IkFJU3VwZXJDb21wdXRlciI6IHsiaW1hZ2VWZXJzaW9uIjogIiIsICJpbnRlcmFjdGl2ZSI6IEZhbHNlfX0sDQogICAgICAgIH0NCg0KICAgIGRlZiB0ZXN0X3BpcGVsaW5lX3Npbmd1bGFyaXR5X3Byb3BlcnR5X2JhZ19zdWJtaXNzaW9uKHNlbGYsIGNsaWVudDogTUxDbGllbnQsIG1vY2tfc2luZ3VsYXJpdHlfYXJtX2lkOiBzdHIpOg0KICAgICAgICBjb21wb25lbnRfeWFtbCA9ICIuL3Rlc3RzL3Rlc3RfY29uZmlncy9jb21wb25lbnRzL2hlbGxvd29ybGRfY29tcG9uZW50X3Npbmd1bGFyaXR5LnltbCINCiAgICAgICAgY29tcG9uZW50X2Z1bmMgPSBsb2FkX2NvbXBvbmVudChjb21wb25lbnRfeWFtbCkNCg0KICAgICAgICAjIHByb3BlcnR5IGJhZyBpcyBzdXBwb3J0ZWQsIHdpdGggbG93ZXIgcHJpb3JpdHkgdGhhbiBzdHJvbmcgdHlwZQ0KICAgICAgICB2Y19jb25maWcgPSB7DQogICAgICAgICAgICAiaW5zdGFuY2VfdHlwZSI6ICJTaW5ndWxhcml0eS5ORDQwcnNfdjIiLA0KICAgICAgICAgICAgImluc3RhbmNlX2NvdW50IjogMiwNCiAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogew0KICAgICAgICAgICAgICAgICJBSVN1cGVyQ29tcHV0ZXIiOiB7DQogICAgICAgICAgICAgICAgICAgICJpbnRlcmFjdGl2ZSI6IEZhbHNlLA0KICAgICAgICAgICAgICAgICAgICAiaW1hZ2VWZXJzaW9uIjogInB5dG9yY2giLA0KICAgICAgICAgICAgICAgICAgICAic2xhVGllciI6ICJQcmVtaXVtIiwNCiAgICAgICAgICAgICAgICAgICAgInRlbnNvcmJvYXJkTG9nRGlyZWN0b3J5IjogIi9zY3JhdGNoL3RlbnNvcmJvYXJkX2xvZ3MiLA0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0sDQogICAgICAgIH0NCg0KICAgICAgICBAZHNsLnBpcGVsaW5lDQogICAgICAgIGRlZiBwaXBlbGluZV9mdW5jKCk6DQogICAgICAgICAgICBub2RlID0gY29tcG9uZW50X2Z1bmMoKQ0KICAgICAgICAgICAgbm9kZS5yZXNvdXJjZXMgPSB2Y19jb25maWcNCiAgICAgICAgICAgIG5vZGUuY29tcHV0ZSA9IG1vY2tfc2luZ3VsYXJpdHlfYXJtX2lkDQoNCiAgICAgICAgcGlwZWxpbmVfam9iID0gcGlwZWxpbmVfZnVuYygpDQogICAgICAgICMgYXMgU2luZ3VsYXJpdHkgaXMgbW9ja2VkIGFuZCBleHBlY3RlZCB0byBmYWlsIHZhbGlkYXRpb24sIHNraXAgaXQgZm9yIHN1Ym1pc3Npb247DQogICAgICAgICMgdGhlbiBtYW51YWxseSBjYW5jZWwgaXQgYXMgb3RoZXIgdGVzdHMuDQogICAgICAgIGNyZWF0ZWRfcGlwZWxpbmVfam9iID0gY2xpZW50LmNyZWF0ZV9vcl91cGRhdGUocGlwZWxpbmVfam9iLCBza2lwX3ZhbGlkYXRpb249VHJ1ZSkNCiAgICAgICAgY2xpZW50LmpvYnMuYmVnaW5fY2FuY2VsKGNyZWF0ZWRfcGlwZWxpbmVfam9iLm5hbWUpLnJlc3VsdCgpDQogICAgICAgIHJlc3Rfb2JqID0gY3JlYXRlZF9waXBlbGluZV9qb2IuX3RvX3Jlc3Rfb2JqZWN0KCkNCiAgICAgICAgYXNzZXJ0IHJlc3Rfb2JqLnByb3BlcnRpZXMuam9ic1sibm9kZSJdWyJjb21wdXRlSWQiXSA9PSBtb2NrX3Npbmd1bGFyaXR5X2FybV9pZA0KICAgICAgICBhc3NlcnQgcmVzdF9vYmoucHJvcGVydGllcy5qb2JzWyJub2RlIl1bInJlc291cmNlcyJdID09IHZjX2NvbmZpZw0KDQogICAgQHB5dGVzdC5tYXJrLnNraXBpZihjb25kaXRpb249bm90IGlzX2xpdmUoKSwgcmVhc29uPSJyZWNvcmRpbmcgd2lsbCBleHBvc2UgU2luZ3VsYXJpdHkgaW5mb3JtYXRpb24iKQ0KICAgIGRlZiB0ZXN0X3BpcGVsaW5lX3Npbmd1bGFyaXR5X2xpdmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCwgc2luZ3VsYXJpdHlfdmMpOg0KICAgICAgICAjIGZ1bGwgbmFtZSBhbmQgc2hvcnQgbmFtZSBhcmUgc3ludGF4IHN1Z2FyLCBTREsgd2lsbCByZXNvbHZlIGl0IHRvIFNpbmd1bGFyaXR5IEFSTSBpZCBiZWZvcmUgcmVxdWVzdCwNCiAgICAgICAgIyB0aGlzIG5lZWRzIGNsaWVudCB0byBnZXQgJiBzZWFyY2ggYXZhaWxhYmxlIFZDcyAtIHRoYXQncyB3aHkgd2UgcGxhY2UgdGhpcyB0ZXN0IGluIGVuZC10by1lbmQgdGVzdCAtDQogICAgICAgICMgYW5kIGNvbXB1dGUgdmFsdWVzIGluIHJldHVybmVkIFJFU1Qgb2JqZWN0IHNob3VsZCBhbGwgYmUgQVJNIGlkLg0KICAgICAgICBjb21wb25lbnRfeWFtbCA9ICIuL3Rlc3RzL3Rlc3RfY29uZmlncy9jb21wb25lbnRzL2hlbGxvd29ybGRfY29tcG9uZW50X3Npbmd1bGFyaXR5LnltbCINCiAgICAgICAgY29tcG9uZW50X2Z1bmMgPSBsb2FkX2NvbXBvbmVudChjb21wb25lbnRfeWFtbCkNCg0KICAgICAgICAjIGdlbmVyYXRlIFNpbmd1bGFyaXR5IEFSTSBpZCwgZnVsbCBuYW1lIGFuZCBzaG9ydCBuYW1lIGZyb20gVkMNCiAgICAgICAgYXJtX2lkID0gU0lOR1VMQVJJVFlfSURfRk9STUFULmZvcm1hdCgNCiAgICAgICAgICAgIHNpbmd1bGFyaXR5X3ZjLnN1YnNjcmlwdGlvbl9pZCwgc2luZ3VsYXJpdHlfdmMucmVzb3VyY2VfZ3JvdXBfbmFtZSwgc2luZ3VsYXJpdHlfdmMubmFtZQ0KICAgICAgICApDQogICAgICAgIGZ1bGxfbmFtZSA9ICJhenVyZW1sOi8vc3Vic2NyaXB0aW9ucy97fS9yZXNvdXJjZUdyb3Vwcy97fS92aXJ0dWFsY2x1c3RlcnMve30iLmZvcm1hdCgNCiAgICAgICAgICAgIHNpbmd1bGFyaXR5X3ZjLnN1YnNjcmlwdGlvbl9pZCwgc2luZ3VsYXJpdHlfdmMucmVzb3VyY2VfZ3JvdXBfbmFtZSwgc2luZ3VsYXJpdHlfdmMubmFtZQ0KICAgICAgICApDQogICAgICAgIHNob3J0X25hbWUgPSBmImF6dXJlbWw6Ly92aXJ0dWFsY2x1c3RlcnMve3Npbmd1bGFyaXR5X3ZjLm5hbWV9Ig0KDQogICAgICAgIEBkc2wucGlwZWxpbmUNCiAgICAgICAgZGVmIHBpcGVsaW5lX2Z1bmMoKToNCiAgICAgICAgICAgIG5vZGVfd2l0aF9pZCA9IGNvbXBvbmVudF9mdW5jKCkNCiAgICAgICAgICAgIG5vZGVfd2l0aF9pZC5jb21wdXRlID0gYXJtX2lkDQogICAgICAgICAgICBub2RlX3dpdGhfZnVsbF9uYW1lID0gY29tcG9uZW50X2Z1bmMoKQ0KICAgICAgICAgICAgbm9kZV93aXRoX2Z1bGxfbmFtZS5jb21wdXRlID0gZnVsbF9uYW1lDQogICAgICAgICAgICBub2RlX3dpdGhfc2hvcnRfbmFtZSA9IGNvbXBvbmVudF9mdW5jKCkNCiAgICAgICAgICAgIG5vZGVfd2l0aF9zaG9ydF9uYW1lLmNvbXB1dGUgPSBzaG9ydF9uYW1lDQoNCiAgICAgICAgcGlwZWxpbmVfam9iID0gcGlwZWxpbmVfZnVuYygpDQogICAgICAgIGNyZWF0ZWRfcGlwZWxpbmVfam9iID0gYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmVfam9iLCBjbGllbnQpDQogICAgICAgIHJlc3Rfb2JqID0gY3JlYXRlZF9waXBlbGluZV9qb2IuX3RvX3Jlc3Rfb2JqZWN0KCkNCg0KICAgICAgICBmb3Igbm9kZV9uYW1lIGluIFsibm9kZV93aXRoX2lkIiwgIm5vZGVfd2l0aF9mdWxsX25hbWUiLCAibm9kZV93aXRoX3Nob3J0X25hbWUiXToNCiAgICAgICAgICAgIG5vZGVfY29tcHV0ZSA9IHJlc3Rfb2JqLnByb3BlcnRpZXMuam9ic1tub2RlX25hbWVdWyJjb21wdXRlSWQiXQ0KICAgICAgICAgICAgYXNzZXJ0IGlzX3Npbmd1bGFyaXR5X2lkX2Zvcl9yZXNvdXJjZShub2RlX2NvbXB1dGUpDQogICAgICAgICAgICBhc3NlcnQgbm9kZV9jb21wdXRlLmVuZHN3aXRoKHNpbmd1bGFyaXR5X3ZjLm5hbWUpDQoNCiAgICBkZWYgdGVzdF9hc3NpZ25fdmFsdWVfdG9fdW5rbm93bl9maWxlZChzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KToNCiAgICAgICAgcGF0aCA9ICIuL3Rlc3RzL3Rlc3RfY29uZmlncy9jb21wb25lbnRzL2hlbGxvd29ybGRfY29tcG9uZW50LnltbCINCiAgICAgICAgY29tcG9uZW50X2Z1bmMgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9cGF0aCkNCiAgICAgICAgIyBEdWUgdG8gaXQgd2lsbCBibG9jayBjaSB3aXRoIHRoZSB0YWdzIG9mIHlhbWwgd2hlbiBnZW5lcmF0aW5nIHJlY29yZHMsIHJlbW92ZSB0aGUgdGFncyBoZXJlLg0KICAgICAgICBjb21wb25lbnRfZnVuYy50YWdzID0ge30NCg0KICAgICAgICBAZHNsLnBpcGVsaW5lKCkNCiAgICAgICAgZGVmIHBpcGVsaW5lX2Z1bmMoaW5wdXQpOg0KICAgICAgICAgICAgbm9kZSA9IGNvbXBvbmVudF9mdW5jKGNvbXBvbmVudF9pbl9wYXRoPWlucHV0KQ0KICAgICAgICAgICAgbm9kZS51bmtub3duX2ZpZWxkID0gaW5wdXQNCg0KICAgICAgICBwaXBlbGluZV9qb2I6IFBpcGVsaW5lSm9iID0gcGlwZWxpbmVfZnVuYyhpbnB1dD1JbnB1dChwYXRoPXBhdGgpKQ0KICAgICAgICBwaXBlbGluZV9qb2Iuc2V0dGluZ3MuZGVmYXVsdF9jb21wdXRlID0gImNwdS1jbHVzdGVyIg0KICAgICAgICBqb2JfcmVzID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShqb2I9cGlwZWxpbmVfam9iLCBleHBlcmltZW50X25hbWU9InRlc3RfdW5rbm93bl9maWVsZCIpDQogICAgICAgIGFzc2VydCBqb2JfcmVzLmpvYnNbIm5vZGUiXS51bmtub3duX2ZpZWxkID09ICIke3twYXJlbnQuaW5wdXRzLmlucHV0fX0iDQo=",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "Ug0G12c/xbuqiJL9W/isog==",
        "Date": "Wed, 24 May 2023 03:02:49 GMT",
        "ETag": "\u00220x8DB5C035C4340EF\u0022",
        "Last-Modified": "Wed, 24 May 2023 03:02:50 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "XLYEHupfzts=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/azureml-blobstore-0bdd51b6-cd9c-4978-b870-99997b393b81/LocalUpload/00000000000000000000000000000000/e2etests/test_automl_dsl_pipeline.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "34980",
        "Content-MD5": "XXJmP9FfdpyDfqn5dcdM7w==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Wed, 24 May 2023 03:02:49 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": "",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "XXJmP9FfdpyDfqn5dcdM7w==",
        "Date": "Wed, 24 May 2023 03:02:50 GMT",
        "ETag": "\u00220x8DB5C035C4FC228\u0022",
        "Last-Modified": "Wed, 24 May 2023 03:02:50 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "oXhxStpElP4=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/azureml-blobstore-0bdd51b6-cd9c-4978-b870-99997b393b81/LocalUpload/00000000000000000000000000000000/e2etests/test_controlflow_pipeline.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "45735",
        "Content-MD5": "Nk4cK4U9ZubJGThU1K7nkw==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Wed, 24 May 2023 03:02:49 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": "",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "Nk4cK4U9ZubJGThU1K7nkw==",
        "Date": "Wed, 24 May 2023 03:02:50 GMT",
        "ETag": "\u00220x8DB5C035C70649B\u0022",
        "Last-Modified": "Wed, 24 May 2023 03:02:50 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "7kkQaajaWT8=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/azureml-blobstore-0bdd51b6-cd9c-4978-b870-99997b393b81/LocalUpload/00000000000000000000000000000000/e2etests/__init__.py?comp=metadata",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "0",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-date": "Wed, 24 May 2023 03:02:50 GMT",
        "x-ms-meta-name": "507272c2-9acb-4471-9bc2-7e9b00b1f851",
        "x-ms-meta-upload_status": "completed",
        "x-ms-meta-version": "49944216-650e-4e99-83cd-44884b25df21",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Date": "Wed, 24 May 2023 03:02:50 GMT",
        "ETag": "\u00220x8DB5C035C9329AA\u0022",
        "Last-Modified": "Wed, 24 May 2023 03:02:51 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/jobs/000000000000000000000?api-version=2023-04-01-preview",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "3487",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": {
        "properties": {
          "properties": {},
          "tags": {},
          "displayName": "pipeline_with_do_while",
          "experimentName": "azure-ai-ml",
          "isArchived": false,
          "jobType": "Pipeline",
          "inputs": {
            "component_in_number": {
              "jobInputType": "literal",
              "value": "2"
            },
            "component_in_path": {
              "uri": "azureml://datastores/workspaceblobstore/paths/LocalUpload/00000000000000000000000000000000/e2etests/",
              "jobInputType": "uri_folder"
            }
          },
          "jobs": {
            "do_while_body_pipeline": {
              "name": "do_while_body_pipeline",
              "type": "pipeline",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_number_1": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_path}}"
                }
              },
              "_source": "DSL",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/e56097e1-ae81-414d-b5d6-b3929d21303f"
            },
            "do_while_with_pipeline": {
              "body": "${{parent.jobs.do_while_body_pipeline}}",
              "type": "do_while",
              "condition": "is_number_larger_than_zero",
              "mapping": {
                "${{parent.jobs.do_while_body_pipeline.outputs.output_in_number}}": [
                  "component_in_number",
                  "component_in_number_1"
                ],
                "output_in_path": [
                  "component_in_path"
                ]
              },
              "limits": {
                "max_iteration_count": 5
              },
              "_source": "DSL"
            },
            "command_component": {
              "name": "command_component",
              "type": "command",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_number_1": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_path}}"
                }
              },
              "_source": "YAML.COMPONENT",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/c6182fc9-3280-44ef-bd4e-6f45fc19c4f3"
            },
            "do_while_with_command_component": {
              "body": "${{parent.jobs.command_component}}",
              "type": "do_while",
              "condition": "is_number_larger_than_zero",
              "mapping": {
                "output_in_number": [
                  "component_in_number",
                  "component_in_number_1"
                ],
                "output_in_path": [
                  "component_in_path"
                ]
              },
              "limits": {
                "max_iteration_count": 5
              },
              "_source": "DSL"
            },
            "basic_component": {
              "name": "basic_component",
              "type": "pipeline",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.jobs.do_while_body_pipeline.outputs.output_in_number}}"
                },
                "component_in_number_1": {
                  "job_input_type": "literal",
                  "value": "${{parent.jobs.command_component.outputs.output_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.jobs.do_while_body_pipeline.outputs.output_in_path}}"
                }
              },
              "outputs": {
                "output_in_path": {
                  "value": "${{parent.outputs.output_in_path}}",
                  "type": "literal"
                }
              },
              "_source": "DSL",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/e56097e1-ae81-414d-b5d6-b3929d21303f"
            }
          },
          "outputs": {
            "output_in_path": {
              "jobOutputType": "uri_folder"
            }
          },
          "settings": {
            "default_compute": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/computes/cpu-cluster",
            "_source": "DSL"
          }
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "6879",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Wed, 24 May 2023 03:02:52 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/jobs/000000000000000000000?api-version=2023-04-01-preview",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-0d0f6e88065224a0065dd0f28219e8ec-40e71feb5c65d7ca-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "e3d4e96c-d95b-4b0b-b8e9-0db2017bcbcb",
        "x-ms-ratelimit-remaining-subscription-writes": "1192",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230524T030252Z:e3d4e96c-d95b-4b0b-b8e9-0db2017bcbcb",
        "x-request-time": "1.318"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/jobs/000000000000000000000",
        "name": "000000000000000000000",
        "type": "Microsoft.MachineLearningServices/workspaces/jobs",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {
            "azureml.DevPlatv2": "true",
            "azureml.DatasetAccessMode": "Asset",
            "azureml.runsource": "azureml.PipelineRun",
            "runSource": "MFE",
            "runType": "HTTP",
            "azureml.parameters": "{\u0022component_in_number\u0022:\u00222\u0022}",
            "azureml.continue_on_step_failure": "True",
            "azureml.continue_on_failed_optional_input": "True",
            "azureml.enforceRerun": "False",
            "azureml.defaultComputeName": "cpu-cluster",
            "azureml.defaultDataStoreName": "workspaceblobstore",
            "azureml.pipelineComponent": "pipelinerun"
          },
          "displayName": "pipeline_with_do_while",
          "status": "Preparing",
          "experimentName": "azure-ai-ml",
          "services": {
            "Tracking": {
              "jobServiceType": "Tracking",
              "port": null,
              "endpoint": "azureml://eastus2.api.azureml.ms/mlflow/v1.0/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000?",
              "status": null,
              "errorMessage": null,
              "properties": null,
              "nodes": null
            },
            "Studio": {
              "jobServiceType": "Studio",
              "port": null,
              "endpoint": "https://ml.azure.com/runs/000000000000000000000?wsid=/subscriptions/00000000-0000-0000-0000-000000000/resourcegroups/00000/workspaces/00000",
              "status": null,
              "errorMessage": null,
              "properties": null,
              "nodes": null
            }
          },
          "computeId": null,
          "isArchived": false,
          "identity": null,
          "componentId": null,
          "notificationSetting": null,
          "secretsConfiguration": null,
          "jobType": "Pipeline",
          "settings": {
            "default_compute": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/computes/cpu-cluster",
            "_source": "DSL"
          },
          "jobs": {
            "do_while_body_pipeline": {
              "name": "do_while_body_pipeline",
              "type": "pipeline",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_number_1": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_path}}"
                }
              },
              "_source": "DSL",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/e56097e1-ae81-414d-b5d6-b3929d21303f"
            },
            "do_while_with_pipeline": {
              "body": "${{parent.jobs.do_while_body_pipeline}}",
              "type": "do_while",
              "condition": "is_number_larger_than_zero",
              "mapping": {
                "${{parent.jobs.do_while_body_pipeline.outputs.output_in_number}}": [
                  "component_in_number",
                  "component_in_number_1"
                ],
                "output_in_path": [
                  "component_in_path"
                ]
              },
              "limits": {
                "max_iteration_count": 5
              },
              "_source": "DSL"
            },
            "command_component": {
              "name": "command_component",
              "type": "command",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_number_1": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_path}}"
                }
              },
              "_source": "YAML.COMPONENT",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/c6182fc9-3280-44ef-bd4e-6f45fc19c4f3"
            },
            "do_while_with_command_component": {
              "body": "${{parent.jobs.command_component}}",
              "type": "do_while",
              "condition": "is_number_larger_than_zero",
              "mapping": {
                "output_in_number": [
                  "component_in_number",
                  "component_in_number_1"
                ],
                "output_in_path": [
                  "component_in_path"
                ]
              },
              "limits": {
                "max_iteration_count": 5
              },
              "_source": "DSL"
            },
            "basic_component": {
              "name": "basic_component",
              "type": "pipeline",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.jobs.do_while_body_pipeline.outputs.output_in_number}}"
                },
                "component_in_number_1": {
                  "job_input_type": "literal",
                  "value": "${{parent.jobs.command_component.outputs.output_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.jobs.do_while_body_pipeline.outputs.output_in_path}}"
                }
              },
              "outputs": {
                "output_in_path": {
                  "value": "${{parent.outputs.output_in_path}}",
                  "type": "literal"
                }
              },
              "_source": "DSL",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/e56097e1-ae81-414d-b5d6-b3929d21303f"
            }
          },
          "inputs": {
            "component_in_number": {
              "description": null,
              "jobInputType": "literal",
              "value": "2"
            },
            "component_in_path": {
              "description": null,
              "uri": "azureml://datastores/workspaceblobstore/paths/LocalUpload/00000000000000000000000000000000/e2etests/",
              "mode": "ReadOnlyMount",
              "jobInputType": "uri_folder"
            }
          },
          "outputs": {
            "output_in_path": {
              "description": null,
              "uri": null,
              "assetName": null,
              "assetVersion": null,
              "mode": "ReadWriteMount",
              "autoDeleteSetting": null,
              "jobOutputType": "uri_folder"
            }
          },
          "sourceJobId": null
        },
        "systemData": {
          "createdAt": "2023-05-24T03:02:52.5748946\u002B00:00",
          "createdBy": "Chenyang Zhang",
          "createdByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/jobs/000000000000000000000/cancel?api-version=2023-04-01-preview",
      "RequestMethod": "POST",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "0",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 202,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "4",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Wed, 24 May 2023 03:02:55 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/eastus2/mfeOperationResults/jc:0bdd51b6-cd9c-4978-b870-99997b393b81:000000000000000000000?api-version=2023-04-01-preview",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-async-operation-timeout": "PT1H",
        "x-ms-correlation-request-id": "308570d2-f816-4223-9587-3cc22b4079d2",
        "x-ms-ratelimit-remaining-subscription-writes": "1198",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230524T030255Z:308570d2-f816-4223-9587-3cc22b4079d2",
        "x-request-time": "0.759"
      },
      "ResponseBody": "null"
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/eastus2/mfeOperationResults/jc:0bdd51b6-cd9c-4978-b870-99997b393b81:000000000000000000000?api-version=2023-04-01-preview",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "*/*",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 202,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "2",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Wed, 24 May 2023 03:02:56 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/eastus2/mfeOperationResults/jc:0bdd51b6-cd9c-4978-b870-99997b393b81:000000000000000000000?api-version=2023-04-01-preview",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "89b1d47c-1ab2-4e66-ab17-ed3d7298eaa1",
        "x-ms-ratelimit-remaining-subscription-reads": "11995",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230524T030256Z:89b1d47c-1ab2-4e66-ab17-ed3d7298eaa1",
        "x-request-time": "0.056"
      },
      "ResponseBody": {}
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/eastus2/mfeOperationResults/jc:0bdd51b6-cd9c-4978-b870-99997b393b81:000000000000000000000?api-version=2023-04-01-preview",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "*/*",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "0",
        "Date": "Wed, 24 May 2023 03:03:25 GMT",
        "Expires": "-1",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-bcee1abde810d2fc156dd6f3c801ee25-251dfaaa6d4a56b0-00\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus2-02",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "d161e026-862d-4812-9754-108867ce5b0f",
        "x-ms-ratelimit-remaining-subscription-reads": "11994",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230524T030326Z:d161e026-862d-4812-9754-108867ce5b0f",
        "x-request-time": "0.062"
      },
      "ResponseBody": null
    }
  ],
  "Variables": {}
}
