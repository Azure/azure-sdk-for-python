{
  "Entries": [
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94?api-version=2023-04-01-preview",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "379",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": {
        "properties": {
          "isAnonymous": true,
          "isArchived": false,
          "condaFile": "channels:\n- defaults\ndependencies:\n- python=3.8.12\n- pip=21.2.2\n- pip:\n  - --extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\n  - mldesigner==0.0.71974906\n  - mlflow\n  - azureml-mlflow\nname: example-environment\n",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04"
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "1436",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 30 May 2023 07:28:49 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94?api-version=2023-04-01-preview",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-064c5109ff2eafdfc9183b9b9fb1f4f4-ccfcdd5be9476783-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus2-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "1907f10c-9226-4241-a02f-b318e6e35351",
        "x-ms-ratelimit-remaining-subscription-writes": "1199",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230530T072850Z:1907f10c-9226-4241-a02f-b318e6e35351",
        "x-request-time": "0.755"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94",
        "name": "7926e182b294d8644f987381c0081e94",
        "type": "Microsoft.MachineLearningServices/workspaces/environments/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {},
          "isArchived": false,
          "isAnonymous": true,
          "autoDeleteSetting": null,
          "environmentType": "UserCreated",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04",
          "condaFile": "{\n  \u0022channels\u0022: [\n    \u0022defaults\u0022\n  ],\n  \u0022dependencies\u0022: [\n    \u0022python=3.8.12\u0022,\n    \u0022pip=21.2.2\u0022,\n    {\n      \u0022pip\u0022: [\n        \u0022--extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\u0022,\n        \u0022mldesigner==0.0.71974906\u0022,\n        \u0022mlflow\u0022,\n        \u0022azureml-mlflow\u0022\n      ]\n    }\n  ],\n  \u0022name\u0022: \u0022example-environment\u0022\n}",
          "osType": "Linux",
          "autoRebuild": "Disabled",
          "provisioningState": "Succeeded",
          "stage": "Logged",
          "intellectualProperty": null
        },
        "systemData": {
          "createdAt": "2023-05-24T03:02:26.6953544\u002B00:00",
          "createdBy": "Chenyang Zhang",
          "createdByType": "User",
          "lastModifiedAt": "2023-05-24T03:02:26.6953544\u002B00:00",
          "lastModifiedBy": "Chenyang Zhang",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94?api-version=2023-04-01-preview",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "379",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": {
        "properties": {
          "isAnonymous": true,
          "isArchived": false,
          "condaFile": "channels:\n- defaults\ndependencies:\n- python=3.8.12\n- pip=21.2.2\n- pip:\n  - --extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\n  - mldesigner==0.0.71974906\n  - mlflow\n  - azureml-mlflow\nname: example-environment\n",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04"
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "1436",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 30 May 2023 07:28:50 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94?api-version=2023-04-01-preview",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-04e537e1853e589fae724db846e84570-04b872ad7a480c8d-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus2-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "b9f68e90-06cb-4ff2-b610-43709af16a9e",
        "x-ms-ratelimit-remaining-subscription-writes": "1198",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230530T072850Z:b9f68e90-06cb-4ff2-b610-43709af16a9e",
        "x-request-time": "0.206"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94",
        "name": "7926e182b294d8644f987381c0081e94",
        "type": "Microsoft.MachineLearningServices/workspaces/environments/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {},
          "isArchived": false,
          "isAnonymous": true,
          "autoDeleteSetting": null,
          "environmentType": "UserCreated",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04",
          "condaFile": "{\n  \u0022channels\u0022: [\n    \u0022defaults\u0022\n  ],\n  \u0022dependencies\u0022: [\n    \u0022python=3.8.12\u0022,\n    \u0022pip=21.2.2\u0022,\n    {\n      \u0022pip\u0022: [\n        \u0022--extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\u0022,\n        \u0022mldesigner==0.0.71974906\u0022,\n        \u0022mlflow\u0022,\n        \u0022azureml-mlflow\u0022\n      ]\n    }\n  ],\n  \u0022name\u0022: \u0022example-environment\u0022\n}",
          "osType": "Linux",
          "autoRebuild": "Disabled",
          "provisioningState": "Succeeded",
          "stage": "Logged",
          "intellectualProperty": null
        },
        "systemData": {
          "createdAt": "2023-05-24T03:02:26.6953544\u002B00:00",
          "createdBy": "Chenyang Zhang",
          "createdByType": "User",
          "lastModifiedAt": "2023-05-24T03:02:26.6953544\u002B00:00",
          "lastModifiedBy": "Chenyang Zhang",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94?api-version=2023-04-01-preview",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "379",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": {
        "properties": {
          "isAnonymous": true,
          "isArchived": false,
          "condaFile": "channels:\n- defaults\ndependencies:\n- python=3.8.12\n- pip=21.2.2\n- pip:\n  - --extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\n  - mldesigner==0.0.71974906\n  - mlflow\n  - azureml-mlflow\nname: example-environment\n",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04"
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "1436",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 30 May 2023 07:28:50 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94?api-version=2023-04-01-preview",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-befb07678df05bca65d7579d60d4b957-5b168ba9f9b8b382-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus2-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "8b06b7a3-5883-426c-bd53-efdacce7118b",
        "x-ms-ratelimit-remaining-subscription-writes": "1197",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230530T072851Z:8b06b7a3-5883-426c-bd53-efdacce7118b",
        "x-request-time": "0.192"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94",
        "name": "7926e182b294d8644f987381c0081e94",
        "type": "Microsoft.MachineLearningServices/workspaces/environments/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {},
          "isArchived": false,
          "isAnonymous": true,
          "autoDeleteSetting": null,
          "environmentType": "UserCreated",
          "image": "mcr.microsoft.com/azureml/openmpi3.1.2-ubuntu18.04",
          "condaFile": "{\n  \u0022channels\u0022: [\n    \u0022defaults\u0022\n  ],\n  \u0022dependencies\u0022: [\n    \u0022python=3.8.12\u0022,\n    \u0022pip=21.2.2\u0022,\n    {\n      \u0022pip\u0022: [\n        \u0022--extra-index-url=https://azuremlsdktestpypi.azureedge.net/sdk-cli-v2\u0022,\n        \u0022mldesigner==0.0.71974906\u0022,\n        \u0022mlflow\u0022,\n        \u0022azureml-mlflow\u0022\n      ]\n    }\n  ],\n  \u0022name\u0022: \u0022example-environment\u0022\n}",
          "osType": "Linux",
          "autoRebuild": "Disabled",
          "provisioningState": "Succeeded",
          "stage": "Logged",
          "intellectualProperty": null
        },
        "systemData": {
          "createdAt": "2023-05-24T03:02:26.6953544\u002B00:00",
          "createdBy": "Chenyang Zhang",
          "createdByType": "User",
          "lastModifiedAt": "2023-05-24T03:02:26.6953544\u002B00:00",
          "lastModifiedBy": "Chenyang Zhang",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/000000000000000000000/versions?api-version=2023-04-01\u0026hash=634b294c48adbaa95bcf5efb308a0fcad4c9a1e4a5e7dcf6a44403430acd7a9a\u0026hashVersion=202208",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Encoding": "gzip",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 30 May 2023 07:28:52 GMT",
        "Expires": "-1",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-d2c02edfc1fcc4eb6c5aa532a917fb85-7e2f002d2fadb0fd-00\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "Transfer-Encoding": "chunked",
        "Vary": "Accept-Encoding",
        "x-aml-cluster": "vienna-eastus2-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "e093ea6b-cbc3-4aa6-95da-e16893a5a983",
        "x-ms-ratelimit-remaining-subscription-reads": "11999",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230530T072853Z:e093ea6b-cbc3-4aa6-95da-e16893a5a983",
        "x-request-time": "0.062"
      },
      "ResponseBody": {
        "value": []
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/000000000000000000000/versions/1/startPendingUpload?api-version=2023-04-01",
      "RequestMethod": "POST",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "47",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": {
        "pendingUploadType": "TemporaryBlobReference"
      },
      "StatusCode": 200,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Encoding": "gzip",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 30 May 2023 07:28:53 GMT",
        "Expires": "-1",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-841facdb914e8a8d5464311ee637b54a-4305ef166eb4c888-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "Transfer-Encoding": "chunked",
        "Vary": [
          "Accept-Encoding",
          "Accept-Encoding"
        ],
        "x-aml-cluster": "vienna-eastus2-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "5df963f4-6f58-44f8-b56c-b2878f678408",
        "x-ms-ratelimit-remaining-subscription-writes": "1196",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230530T072854Z:5df963f4-6f58-44f8-b56c-b2878f678408",
        "x-request-time": "0.331"
      },
      "ResponseBody": {
        "blobReferenceForConsumption": {
          "blobUri": "https://amltest5899420437.blob.core.windows.net:443/0bdd51b6-c-1528b478-eba7-5304-8464-339b5ebaec88",
          "storageAccountArmId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.Storage/storageAccounts/amltest5899420437",
          "credential": {
            "credentialType": "SAS",
            "sasUri": "https://amltest5899420437.blob.core.windows.net/0bdd51b6-c-1528b478-eba7-5304-8464-339b5ebaec88?skoid=372c30a9-c04f-422f-b38c-872e6b7d5540\u0026sktid=72f988bf-86f1-41af-91ab-2d7cd011db47\u0026skt=2023-05-30T07%3A11%3A03Z\u0026ske=2023-05-31T15%3A21%3A03Z\u0026sks=b\u0026skv=2019-07-07\u0026sv=2021-10-04\u0026st=2023-05-30T07%3A18%3A54Z\u0026se=2023-05-30T15%3A28%3A54Z\u0026sr=c\u0026sp=rcwl\u0026sig=000000000000000000000000000000000000"
          }
        },
        "pendingUploadId": "1f2f93b4-3a67-450a-bb23-0f4ab7d6ed39",
        "pendingUploadType": "None"
      }
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/0bdd51b6-c-1528b478-eba7-5304-8464-339b5ebaec88/src/baisc_component.py?skoid=372c30a9-c04f-422f-b38c-872e6b7d5540\u0026sktid=72f988bf-86f1-41af-91ab-2d7cd011db47\u0026skt=2023-05-30T07%3A11%3A03Z\u0026ske=2023-05-31T15%3A21%3A03Z\u0026sks=b\u0026skv=2019-07-07\u0026sv=2021-10-04\u0026st=2023-05-30T07%3A18%3A54Z\u0026se=2023-05-30T15%3A28%3A54Z\u0026sr=c\u0026sp=rcwl\u0026sig=000000000000000000000000000000000000",
      "RequestMethod": "HEAD",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-date": "Tue, 30 May 2023 07:28:52 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": null,
      "StatusCode": 404,
      "ResponseHeaders": {
        "Date": "Tue, 30 May 2023 07:28:54 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "Transfer-Encoding": "chunked",
        "Vary": "Origin",
        "x-ms-error-code": "BlobNotFound",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/0bdd51b6-c-1528b478-eba7-5304-8464-339b5ebaec88/src/baisc_component.py?skoid=372c30a9-c04f-422f-b38c-872e6b7d5540\u0026sktid=72f988bf-86f1-41af-91ab-2d7cd011db47\u0026skt=2023-05-30T07%3A11%3A03Z\u0026ske=2023-05-31T15%3A21%3A03Z\u0026sks=b\u0026skv=2019-07-07\u0026sv=2021-10-04\u0026st=2023-05-30T07%3A18%3A54Z\u0026se=2023-05-30T15%3A28%3A54Z\u0026sr=c\u0026sp=rcwl\u0026sig=000000000000000000000000000000000000",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "1443",
        "Content-MD5": "zNiWfv/6Ym24qYJAsT0CDA==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 30 May 2023 07:28:53 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": "aW1wb3J0IGFyZ3BhcnNlCmltcG9ydCBvcwoKZnJvbSBtbGRlc2lnbmVyLl9jb21wb25lbnRfZXhlY3V0b3IgaW1wb3J0IEV4ZWN1dG9yQmFzZQoKcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoKQpwYXJzZXIuYWRkX2FyZ3VtZW50KCItLWNvbXBvbmVudF9pbl9udW1iZXIiLCB0eXBlPWludCkKcGFyc2VyLmFkZF9hcmd1bWVudCgiLS1jb21wb25lbnRfaW5fbnVtYmVyXzEiLCB0eXBlPWludCkKcGFyc2VyLmFkZF9hcmd1bWVudCgiLS1jb21wb25lbnRfaW5fcGF0aCIsIHR5cGU9c3RyKQpwYXJzZXIuYWRkX2FyZ3VtZW50KCItLW91dHB1dF9pbl9wYXRoIiwgdHlwZT1zdHIpCnBhcnNlci5hZGRfYXJndW1lbnQoIi0tb3V0cHV0X2luX251bWJlciIsIHR5cGU9c3RyKQoKCmFyZ3MgPSBwYXJzZXIucGFyc2VfYXJncygpCgpsaW5lcyA9IFsKICAgIGYiY29tcG9uZW50X2luX251bWJlcjoge2FyZ3MuY29tcG9uZW50X2luX251bWJlcn0iLAogICAgZiJjb21wb25lbnRfaW5fbnVtYmVyXzE6IHthcmdzLmNvbXBvbmVudF9pbl9udW1iZXJfMX0iLAogICAgZiJjb21wb25lbnRfaW5fcGF0aDoge2FyZ3MuY29tcG9uZW50X2luX3BhdGh9IiwKXQoKaWYgYXJncy5jb21wb25lbnRfaW5fbnVtYmVyIGlzIG5vdCBOb25lOgogICAgY29tcG9uZW50X2luX251bWJlciA9IGFyZ3MuY29tcG9uZW50X2luX251bWJlcgplbGlmIG9zLnBhdGguZXhpc3RzKG9zLnBhdGguam9pbihhcmdzLmNvbXBvbmVudF9pbl9wYXRoLCAib3V0cHV0LnR4dCIpKToKICAgIHdpdGggb3Blbihvcy5wYXRoLmpvaW4oYXJncy5jb21wb25lbnRfaW5fcGF0aCwgIm91dHB1dC50eHQiKSwgInIiKSBhcyBmaWxlOgogICAgICAgIGNvbnRlbnQgPSBmaWxlLnJlYWQoKQogICAgICAgIHRyeToKICAgICAgICAgICAgY29tcG9uZW50X2luX251bWJlciA9IGludChjb250ZW50KQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIGNvbXBvbmVudF9pbl9udW1iZXIgPSBhcmdzLmNvbXBvbmVudF9pbl9udW1iZXIKZWxzZToKICAgIGNvbXBvbmVudF9pbl9udW1iZXIgPSAwCgpvdXRwdXRfaW5fbnVtID0gY29tcG9uZW50X2luX251bWJlciAtIDEKCndpdGggb3Blbihvcy5wYXRoLmpvaW4oYXJncy5vdXRwdXRfaW5fcGF0aCwgIm91dHB1dC50eHQiKSwgInciKSBhcyBmaWxlOgogICAgZmlsZS53cml0ZShzdHIob3V0cHV0X2luX251bSkpCgpjb250cm9sX291dHB1dF9jb250ZW50ID0gJ3siaXNfbnVtYmVyX2xhcmdlcl90aGFuX3plcm8iOiAiJXMiLCAib3V0cHV0X2luX251bWJlciI6ICIlcyJ9JyAlICgKICAgIHN0cihvdXRwdXRfaW5fbnVtID4gMCksCiAgICBvdXRwdXRfaW5fbnVtLAopCkV4ZWN1dG9yQmFzZS5fd3JpdGVfY29udHJvbF9vdXRwdXRzX3RvX3J1bl9oaXN0b3J5KGNvbnRyb2xfb3V0cHV0X2NvbnRlbnQ9Y29udHJvbF9vdXRwdXRfY29udGVudCkK",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "zNiWfv/6Ym24qYJAsT0CDA==",
        "Date": "Tue, 30 May 2023 07:28:54 GMT",
        "ETag": "\u00220x8DB60DF86A7D4A9\u0022",
        "Last-Modified": "Tue, 30 May 2023 07:28:55 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "qXP\u002BqljsVoo=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/0bdd51b6-c-1528b478-eba7-5304-8464-339b5ebaec88/src/baisc_component.py?comp=metadata\u0026skoid=372c30a9-c04f-422f-b38c-872e6b7d5540\u0026sktid=72f988bf-86f1-41af-91ab-2d7cd011db47\u0026skt=2023-05-30T07%3A11%3A03Z\u0026ske=2023-05-31T15%3A21%3A03Z\u0026sks=b\u0026skv=2019-07-07\u0026sv=2021-10-04\u0026st=2023-05-30T07%3A18%3A54Z\u0026se=2023-05-30T15%3A28%3A54Z\u0026sr=c\u0026sp=rcwl\u0026sig=000000000000000000000000000000000000",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "0",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-date": "Tue, 30 May 2023 07:28:53 GMT",
        "x-ms-meta-name": "000000000000000000000",
        "x-ms-meta-upload_status": "completed",
        "x-ms-meta-version": "1",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Date": "Tue, 30 May 2023 07:28:55 GMT",
        "ETag": "\u00220x8DB60DF86CC6E3C\u0022",
        "Last-Modified": "Tue, 30 May 2023 07:28:55 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/000000000000000000000/versions/1?api-version=2023-04-01",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "246",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": {
        "properties": {
          "properties": {
            "hash_sha256": "0000000000000",
            "hash_version": "0000000000000"
          },
          "isAnonymous": true,
          "isArchived": false,
          "codeUri": "https://amltest5899420437.blob.core.windows.net:443/0bdd51b6-c-1528b478-eba7-5304-8464-339b5ebaec88/src"
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "795",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 30 May 2023 07:28:55 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/000000000000000000000/versions/1?api-version=2023-04-01",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-913a301e65e76b61d7dad996a4910701-accbec755276e669-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus2-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "3491448c-8f4a-4d76-a2bf-27548cab73d2",
        "x-ms-ratelimit-remaining-subscription-writes": "1195",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230530T072856Z:3491448c-8f4a-4d76-a2bf-27548cab73d2",
        "x-request-time": "0.269"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/000000000000000000000/versions/1",
        "name": "1",
        "type": "Microsoft.MachineLearningServices/workspaces/codes/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {
            "hash_sha256": "0000000000000",
            "hash_version": "0000000000000"
          },
          "isArchived": false,
          "isAnonymous": false,
          "codeUri": "https://amltest5899420437.blob.core.windows.net:443/0bdd51b6-c-1528b478-eba7-5304-8464-339b5ebaec88/src",
          "provisioningState": "Succeeded"
        },
        "systemData": {
          "createdAt": "2023-05-30T07:28:56.4186371\u002B00:00",
          "createdBy": "Chenyang Zhang",
          "createdByType": "User",
          "lastModifiedAt": "2023-05-30T07:28:56.4186371\u002B00:00",
          "lastModifiedBy": "Chenyang Zhang",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/000000000000000000000?api-version=2022-10-01",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "1404",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": {
        "properties": {
          "properties": {},
          "tags": {},
          "isAnonymous": true,
          "isArchived": false,
          "componentSpec": {
            "command": "python basic_component.py $[[--component_in_number ${{inputs.component_in_number}}]] $[[--component_in_number_1 ${{inputs.component_in_number_1}}]] --component_in_path ${{inputs.component_in_path}} --output_in_path ${{outputs.output_in_path}}",
            "code": "azureml:/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/000000000000000000000/versions/1",
            "environment": "azureml:/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94",
            "name": "basic_component",
            "version": "0.0.1",
            "$schema": "https://azuremlschemas.azureedge.net/latest/commandComponent.schema.json",
            "display_name": "Basic component",
            "is_deterministic": true,
            "inputs": {
              "component_in_number": {
                "type": "integer",
                "optional": true
              },
              "component_in_number_1": {
                "type": "integer",
                "optional": true
              },
              "component_in_path": {
                "type": "uri_folder"
              }
            },
            "outputs": {
              "output_in_path": {
                "type": "uri_folder"
              },
              "output_in_number": {
                "type": "integer",
                "is_control": true
              },
              "is_number_larger_than_zero": {
                "type": "boolean",
                "is_control": true
              }
            },
            "type": "command",
            "_source": "YAML.COMPONENT"
          }
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "2443",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 30 May 2023 07:28:58 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/000000000000000000000?api-version=2022-10-01",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-eaff0babb3e7e38a9b6bcb34cbc8d08a-fee2ec13695889b5-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus2-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "d8ba48e3-7c6e-47dc-a290-0b8e5069da2f",
        "x-ms-ratelimit-remaining-subscription-writes": "1194",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230530T072858Z:d8ba48e3-7c6e-47dc-a290-0b8e5069da2f",
        "x-request-time": "0.414"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/744e2b52-597b-47b6-b06b-2cebd143bcdf",
        "name": "744e2b52-597b-47b6-b06b-2cebd143bcdf",
        "type": "Microsoft.MachineLearningServices/workspaces/components/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {},
          "isArchived": false,
          "isAnonymous": true,
          "componentSpec": {
            "$schema": "https://azuremlschemas.azureedge.net/latest/commandComponent.schema.json",
            "name": "basic_component",
            "version": "0.0.1",
            "display_name": "Basic component",
            "is_deterministic": "True",
            "type": "command",
            "inputs": {
              "component_in_path": {
                "type": "uri_folder",
                "optional": "False"
              },
              "component_in_number": {
                "type": "integer",
                "optional": "True"
              },
              "component_in_number_1": {
                "type": "integer",
                "optional": "True"
              }
            },
            "outputs": {
              "output_in_path": {
                "type": "uri_folder"
              },
              "output_in_number": {
                "type": "integer",
                "is_control": "True"
              },
              "is_number_larger_than_zero": {
                "type": "boolean",
                "is_control": "True"
              }
            },
            "code": "azureml:/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/codes/000000000000000000000/versions/1",
            "environment": "azureml:/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/environments/CliV2AnonymousEnvironment/versions/7926e182b294d8644f987381c0081e94",
            "resources": {
              "instance_count": "1"
            },
            "command": "python basic_component.py $[[--component_in_number ${{inputs.component_in_number}}]] $[[--component_in_number_1 ${{inputs.component_in_number_1}}]] --component_in_path ${{inputs.component_in_path}} --output_in_path ${{outputs.output_in_path}}"
          }
        },
        "systemData": {
          "createdAt": "2023-05-30T07:28:58.6543145\u002B00:00",
          "createdBy": "Chenyang Zhang",
          "createdByType": "User",
          "lastModifiedAt": "2023-05-30T07:28:58.6543145\u002B00:00",
          "lastModifiedBy": "Chenyang Zhang",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/000000000000000000000?api-version=2022-10-01",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "1778",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": {
        "properties": {
          "description": "E2E dummy train-score-eval pipeline with components defined via yaml.",
          "properties": {},
          "tags": {},
          "isAnonymous": true,
          "isArchived": false,
          "componentSpec": {
            "name": "do_while_body_pipeline_component",
            "description": "E2E dummy train-score-eval pipeline with components defined via yaml.",
            "display_name": "do_while_body_pipeline_component",
            "inputs": {
              "component_in_number": {
                "type": "integer",
                "optional": true
              },
              "component_in_number_1": {
                "type": "integer",
                "optional": true
              },
              "component_in_path": {
                "type": "uri_folder"
              }
            },
            "outputs": {
              "output_in_path": {
                "type": "uri_folder"
              },
              "output_in_number": {
                "type": "integer",
                "is_control": true
              },
              "is_number_larger_than_zero": {
                "type": "boolean",
                "is_control": true
              }
            },
            "type": "pipeline",
            "jobs": {
              "train_with_sample_data": {
                "name": "train_with_sample_data",
                "type": "command",
                "inputs": {
                  "component_in_number": {
                    "job_input_type": "literal",
                    "value": "${{parent.inputs.component_in_number}}"
                  },
                  "component_in_number_1": {
                    "job_input_type": "literal",
                    "value": "${{parent.inputs.component_in_number_1}}"
                  },
                  "component_in_path": {
                    "job_input_type": "literal",
                    "value": "${{parent.inputs.component_in_path}}"
                  }
                },
                "outputs": {
                  "output_in_path": {
                    "value": "${{parent.outputs.output_in_path}}",
                    "type": "literal"
                  },
                  "output_in_number": {
                    "value": "${{parent.outputs.output_in_number}}",
                    "type": "literal"
                  },
                  "is_number_larger_than_zero": {
                    "value": "${{parent.outputs.is_number_larger_than_zero}}",
                    "type": "literal"
                  }
                },
                "_source": "YAML.COMPONENT",
                "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/744e2b52-597b-47b6-b06b-2cebd143bcdf"
              }
            },
            "_source": "DSL",
            "sourceJobId": null
          }
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "1692",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 30 May 2023 07:28:59 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/000000000000000000000?api-version=2022-10-01",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-b5d110a815b83696fec6c560a7b1cfa0-cb7de634c85a0eaa-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus2-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "bac9a2a2-b998-497b-b86d-19809f2a0daa",
        "x-ms-ratelimit-remaining-subscription-writes": "1193",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230530T072900Z:bac9a2a2-b998-497b-b86d-19809f2a0daa",
        "x-request-time": "0.661"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/ae52818b-d81e-44df-aef4-fc6cc33a9d40",
        "name": "ae52818b-d81e-44df-aef4-fc6cc33a9d40",
        "type": "Microsoft.MachineLearningServices/workspaces/components/versions",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {},
          "isArchived": false,
          "isAnonymous": true,
          "componentSpec": {
            "name": "do_while_body_pipeline_component",
            "display_name": "do_while_body_pipeline_component",
            "is_deterministic": "False",
            "type": "pipeline",
            "description": "E2E dummy train-score-eval pipeline with components defined via yaml.",
            "inputs": {
              "component_in_path": {
                "type": "uri_folder",
                "optional": "False"
              },
              "component_in_number": {
                "type": "integer",
                "optional": "True"
              },
              "component_in_number_1": {
                "type": "integer",
                "optional": "True"
              }
            },
            "outputs": {
              "output_in_path": {
                "type": "uri_folder"
              },
              "output_in_number": {
                "type": "integer",
                "is_control": "True"
              },
              "is_number_larger_than_zero": {
                "type": "boolean",
                "is_control": "True"
              }
            }
          }
        },
        "systemData": {
          "createdAt": "2023-05-30T07:29:00.0543157\u002B00:00",
          "createdBy": "Chenyang Zhang",
          "createdByType": "User",
          "lastModifiedAt": "2023-05-30T07:29:00.0543157\u002B00:00",
          "lastModifiedBy": "Chenyang Zhang",
          "lastModifiedByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/datastores/workspaceblobstore?api-version=2022-10-01",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Encoding": "gzip",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 30 May 2023 07:29:00 GMT",
        "Expires": "-1",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-0514aac997117c1ca28e6027ea1a7757-7119bc30eb367479-00\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "Transfer-Encoding": "chunked",
        "Vary": [
          "Accept-Encoding",
          "Accept-Encoding"
        ],
        "x-aml-cluster": "vienna-eastus2-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "aa9256c3-6ce8-46bc-b101-d997a832556d",
        "x-ms-ratelimit-remaining-subscription-reads": "11998",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230530T072900Z:aa9256c3-6ce8-46bc-b101-d997a832556d",
        "x-request-time": "0.120"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/datastores/workspaceblobstore",
        "name": "workspaceblobstore",
        "type": "Microsoft.MachineLearningServices/workspaces/datastores",
        "properties": {
          "description": null,
          "tags": null,
          "properties": null,
          "isDefault": true,
          "credentials": {
            "credentialsType": "AccountKey"
          },
          "datastoreType": "AzureBlob",
          "accountName": "amltest5899420437",
          "containerName": "azureml-blobstore-0bdd51b6-cd9c-4978-b870-99997b393b81",
          "endpoint": "core.windows.net",
          "protocol": "https",
          "serviceDataAccessAuthIdentity": "WorkspaceSystemAssignedIdentity"
        },
        "systemData": {
          "createdAt": "2023-05-19T09:41:55.3790868\u002B00:00",
          "createdBy": "779301c0-18b2-4cdc-801b-a0a3368fee0a",
          "createdByType": "Application",
          "lastModifiedAt": "2023-05-19T09:41:56.0641774\u002B00:00",
          "lastModifiedBy": "779301c0-18b2-4cdc-801b-a0a3368fee0a",
          "lastModifiedByType": "Application"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/datastores/workspaceblobstore/listSecrets?api-version=2022-10-01",
      "RequestMethod": "POST",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "0",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Encoding": "gzip",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 30 May 2023 07:29:00 GMT",
        "Expires": "-1",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-a882ffbf3eb22994ea8e90794817a267-f9cb184c7ff562c9-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "Transfer-Encoding": "chunked",
        "Vary": "Accept-Encoding",
        "x-aml-cluster": "vienna-eastus2-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "a45183d1-a5ca-4f12-91e6-842122191468",
        "x-ms-ratelimit-remaining-subscription-writes": "1199",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230530T072901Z:a45183d1-a5ca-4f12-91e6-842122191468",
        "x-request-time": "0.083"
      },
      "ResponseBody": {
        "secretsType": "AccountKey",
        "key": "dGhpcyBpcyBmYWtlIGtleQ=="
      }
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/azureml-blobstore-0bdd51b6-cd9c-4978-b870-99997b393b81/LocalUpload/00000000000000000000000000000000/e2etests/__init__.py",
      "RequestMethod": "HEAD",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-date": "Tue, 30 May 2023 07:28:59 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": null,
      "StatusCode": 404,
      "ResponseHeaders": {
        "Date": "Tue, 30 May 2023 07:29:00 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "Transfer-Encoding": "chunked",
        "Vary": "Origin",
        "x-ms-error-code": "BlobNotFound",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/azureml-blobstore-0bdd51b6-cd9c-4978-b870-99997b393b81/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_pipeline_with_specific_nodes.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "12855",
        "Content-MD5": "1Eejn94qxLQlrgO40sYwwA==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 30 May 2023 07:28:59 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": "aW1wb3J0IG11bHRpcHJvY2Vzc2luZwppbXBvcnQgdXVpZApmcm9tIGZ1bmN0b29scyBpbXBvcnQgcGFydGlhbApmcm9tIHBhdGhsaWIgaW1wb3J0IFBhdGgKZnJvbSB0eXBpbmcgaW1wb3J0IENhbGxhYmxlLCBVbmlvbgoKaW1wb3J0IHB5dGVzdApmcm9tIGRldnRvb2xzX3Rlc3R1dGlscyBpbXBvcnQgQXp1cmVSZWNvcmRlZFRlc3RDYXNlCmZyb20gbW9jayBpbXBvcnQgbW9jawpmcm9tIHB5dGVzdF9tb2NrIGltcG9ydCBNb2NrRml4dHVyZQoKZnJvbSBhenVyZS5haS5tbC5vcGVyYXRpb25zLl9vcGVyYXRpb25fb3JjaGVzdHJhdG9yIGltcG9ydCBPcGVyYXRpb25PcmNoZXN0cmF0b3IKZnJvbSB0ZXN0X3V0aWxpdGllcy51dGlscyBpbXBvcnQgKAogICAgX1BZVEVTVF9USU1FT1VUX01FVEhPRCwKICAgIGFzc2VydF9qb2JfY2FuY2VsLAogICAgc3VibWl0X2FuZF9jYW5jZWxfbmV3X2RzbF9waXBlbGluZSwKICAgIG9taXRfd2l0aF93aWxkY2FyZCwKKQoKZnJvbSBhenVyZS5haS5tbCBpbXBvcnQgKAogICAgSW5wdXQsCiAgICBNTENsaWVudCwKICAgIGRzbCwKICAgIGxvYWRfY29tcG9uZW50LAopCmZyb20gYXp1cmUuYWkubWwuY29uc3RhbnRzLl9jb21tb24gaW1wb3J0IEFzc2V0VHlwZXMKZnJvbSBhenVyZS5haS5tbC5lbnRpdGllcyBpbXBvcnQgQ29tbWFuZENvbXBvbmVudCwgQ29tbWFuZCwgQ2hvaWNlLCBTd2VlcCwgQ29tcG9uZW50LCBFbnZpcm9ubWVudCwgUGlwZWxpbmVDb21wb25lbnQKZnJvbSBhenVyZS5haS5tbC5lbnRpdGllcyBpbXBvcnQgUGlwZWxpbmVKb2IKCmZyb20gLi5fdXRpbCBpbXBvcnQgX0RTTF9USU1FT1VUX1NFQ09ORAoKdGVzdHNfcm9vdF9kaXIgPSBQYXRoKF9fZmlsZV9fKS5wYXJlbnQucGFyZW50LnBhcmVudApjb21wb25lbnRzX2RpciA9IHRlc3RzX3Jvb3RfZGlyIC8gInRlc3RfY29uZmlncy9jb21wb25lbnRzLyIKam9iX2lucHV0ID0gSW5wdXQoCiAgICB0eXBlPUFzc2V0VHlwZXMuVVJJX0ZJTEUsCiAgICBwYXRoPSJodHRwczovL2RwcmVwZGF0YS5ibG9iLmNvcmUud2luZG93cy5uZXQvZGVtby9UaXRhbmljLmNzdiIsCikKZXhwZXJpbWVudF9uYW1lID0gImRzbF9waXBlbGluZV9lMmUiCmNvbW1vbl9vbWl0X2ZpZWxkcyA9IFsKICAgICJwcm9wZXJ0aWVzIiwKICAgICJkaXNwbGF5X25hbWUiLAogICAgImV4cGVyaW1lbnRfbmFtZSIsCiAgICAiam9icy4qLmNvbXBvbmVudElkIiwKICAgICJpbnB1dHMuKi51cmkiLAogICAgImpvYnMuKi5fc291cmNlIiwKICAgICJqb2JzLioucHJvcGVydGllcyIsCiAgICAic2V0dGluZ3MuX3NvdXJjZSIsCiAgICAic291cmNlX2pvYl9pZCIsCiAgICAic2VydmljZXMiLApdCgoKZGVmIF9nZXRfY29tcG9uZW50X2luX2ZpcnN0X2NoaWxkKF93aXRoX2pvYnM6IFVuaW9uW1BpcGVsaW5lSm9iLCBQaXBlbGluZUNvbXBvbmVudF0sIGNsaWVudDogTUxDbGllbnQpIC0\u002BIENvbXBvbmVudDoKICAgIGlmIG5vdCBfd2l0aF9qb2JzLmpvYnM6CiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiTm8gam9icyBmb3VuZCBpbiB0aGUgcGlwZWxpbmUiKQogICAgX3Jlc3VsdCA9IG5leHQoaXRlcihfd2l0aF9qb2JzLmpvYnMudmFsdWVzKCkpKS5jb21wb25lbnQuc3BsaXQoIjoiKQogICAgaWYgbGVuKF9yZXN1bHQpID09IDI6CiAgICAgICAgX25hbWUsIF92ZXJzaW9uID0gX3Jlc3VsdAogICAgZWxpZiBsZW4oX3Jlc3VsdCkgPT0gMzoKICAgICAgICBfLCBfbmFtZSwgX3ZlcnNpb24gPSBfcmVzdWx0CiAgICBlbHNlOgogICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIkludmFsaWQgY29tcG9uZW50IGFybSBzdHJpbmc6IHt9Ii5mb3JtYXQoX3Jlc3VsdCkpCiAgICByZXR1cm4gY2xpZW50LmNvbXBvbmVudHMuZ2V0KF9uYW1lLCBfdmVyc2lvbikKCgpAcHl0ZXN0Lm1hcmsudXNlZml4dHVyZXMoCiAgICAiZW5hYmxlX2Vudmlyb25tZW50X2lkX2FybV9leHBhbnNpb24iLAogICAgImVuYWJsZV9waXBlbGluZV9wcml2YXRlX3ByZXZpZXdfZmVhdHVyZXMiLAogICAgIm1vY2tfY29kZV9oYXNoIiwKICAgICJtb2NrX2NvbXBvbmVudF9oYXNoIiwKICAgICJtb2NrX3NldF9oZWFkZXJzX3dpdGhfdXNlcl9hbWxfdG9rZW4iLAogICAgInJlY29yZGVkX3Rlc3QiLAopCkBweXRlc3QubWFyay50aW1lb3V0KHRpbWVvdXQ9X0RTTF9USU1FT1VUX1NFQ09ORCwgbWV0aG9kPV9QWVRFU1RfVElNRU9VVF9NRVRIT0QpCkBweXRlc3QubWFyay5lMmV0ZXN0CkBweXRlc3QubWFyay5waXBlbGluZV90ZXN0CmNsYXNzIFRlc3REU0xQaXBlbGluZVdpdGhTcGVjaWZpY05vZGVzKEF6dXJlUmVjb3JkZWRUZXN0Q2FzZSk6CiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgX2dlbmVyYXRlX211bHRpX2xheWVyX3BpcGVsaW5lX2Z1bmMoKToKICAgICAgICBwYXRoID0gIi4vdGVzdHMvdGVzdF9jb25maWdzL2NvbXBvbmVudHMvaGVsbG93b3JsZF9jb21wb25lbnQueW1sIgoKICAgICAgICBAZHNsLnBpcGVsaW5lCiAgICAgICAgZGVmIHBpcGVsaW5lX2xlYWYoY29tcG9uZW50X2luX3BhdGg6IElucHV0KToKICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMxID0gbG9hZF9jb21wb25lbnQoc291cmNlPXBhdGgpCiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMShjb21wb25lbnRfaW5fcGF0aD1jb21wb25lbnRfaW5fcGF0aCwgY29tcG9uZW50X2luX251bWJlcj0xKQoKICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMyID0gbG9hZF9jb21wb25lbnQoCiAgICAgICAgICAgICAgICBzb3VyY2U9cGF0aCwKICAgICAgICAgICAgICAgIHBhcmFtc19vdmVycmlkZT1bCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICJhbm90aGVyX2NvbXBvbmVudF9uYW1lIiwKICAgICAgICAgICAgICAgICAgICAgICAgInZlcnNpb24iOiAiYW5vdGhlcl9jb21wb25lbnRfdmVyc2lvbiIsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgKQogICAgICAgICAgICBjb21wb25lbnRfZnVuYzIoY29tcG9uZW50X2luX3BhdGg9Y29tcG9uZW50X2luX3BhdGgsIGNvbXBvbmVudF9pbl9udW1iZXI9MSkKCiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMyA9IGxvYWRfY29tcG9uZW50KAogICAgICAgICAgICAgICAgc291cmNlPXBhdGgsIHBhcmFtc19vdmVycmlkZT1beyJlbnZpcm9ubWVudCI6ICJhenVyZW1sOkF6dXJlTUwtc2tsZWFybi0xLjAtdWJ1bnR1MjAuMDQtcHkzOC1jcHU6MzIifV0KICAgICAgICAgICAgKQogICAgICAgICAgICBjb21wb25lbnRfZnVuYzMoY29tcG9uZW50X2luX3BhdGg9Y29tcG9uZW50X2luX3BhdGgsIGNvbXBvbmVudF9pbl9udW1iZXI9MSkKCiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jNCA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1wYXRoKQogICAgICAgICAgICBjb21wb25lbnRfZnVuYzQuY29tbWFuZCArPSAiICYgZWNobyB1cGRhdGVkMSIKICAgICAgICAgICAgY29tcG9uZW50X2Z1bmM0KGNvbXBvbmVudF9pbl9wYXRoPWNvbXBvbmVudF9pbl9wYXRoLCBjb21wb25lbnRfaW5fbnVtYmVyPTEpCgogICAgICAgIEBkc2wucGlwZWxpbmUKICAgICAgICBkZWYgcGlwZWxpbmVfbWlkKGpvYl9pbl9wYXRoOiBJbnB1dCk6CiAgICAgICAgICAgIHBpcGVsaW5lX2xlYWYoam9iX2luX3BhdGgpCiAgICAgICAgICAgIHBpcGVsaW5lX2xlYWYoam9iX2luX3BhdGgpCgogICAgICAgIEBkc2wucGlwZWxpbmUKICAgICAgICBkZWYgcGlwZWxpbmVfcm9vdChqb2JfaW5fcGF0aDogSW5wdXQpOgogICAgICAgICAgICBwaXBlbGluZV9taWQoam9iX2luX3BhdGgpCiAgICAgICAgICAgIHBpcGVsaW5lX21pZChqb2JfaW5fcGF0aCkKCiAgICAgICAgcmV0dXJuIHBpcGVsaW5lX3Jvb3QKCiAgICBAc3RhdGljbWV0aG9kCiAgICBkZWYgX2dlbmVyYXRlX3BpcGVsaW5lX2Z1bmNfZm9yX2NvbmN1cnJlbnRfY29tcG9uZW50X3JlZ2lzdHJhdGlvbl90ZXN0KHNoYXJlZF9pbnB1dCk6CiAgICAgICAgcGF0aCA9ICIuL3Rlc3RzL3Rlc3RfY29uZmlncy9jb21wb25lbnRzL2hlbGxvd29ybGRfY29tcG9uZW50LnltbCIKICAgICAgICBjb25kYV9maWxlX3BhdGggPSAiLi90ZXN0cy90ZXN0X2NvbmZpZ3MvZW52aXJvbm1lbnQvZW52aXJvbm1lbnRfZmlsZXMvZW52aXJvbm1lbnQueW1sIgoKICAgICAgICBlbnZpcm9ubWVudCA9IEVudmlyb25tZW50KAogICAgICAgICAgICBuYW1lPSJ0ZXN0LWVudmlyb25tZW50IiwKICAgICAgICAgICAgY29uZGFfZmlsZT1jb25kYV9maWxlX3BhdGgsCiAgICAgICAgICAgIGltYWdlPSJtY3IubWljcm9zb2Z0LmNvbS9henVyZW1sL29wZW5tcGk0LjEuMC11YnVudHUyMC4wNCIsCiAgICAgICAgICAgIHZlcnNpb249IjIiLCAgIyBUT0RPOiBhbm9ueW1vdXMgZW52aXJvbm1lbnQgaGFzIHBvdGVudGlhbCB2ZXJzaW9uIGNvbmZsaWN0PwogICAgICAgICAgICBkZXNjcmlwdGlvbj0iVGhpcyBpcyBhbiBhbm9ueW1vdXMgZW52aXJvbm1lbnQiLAogICAgICAgICkKCiAgICAgICAgQGRzbC5waXBlbGluZQogICAgICAgIGRlZiBwaXBlbGluZV9sZWFmKCk6CiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMWEgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9cGF0aCkKICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMxYS5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50CiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMWEuY29tbWFuZCArPSAiICYgZWNobyB1cGRhdGVkMSIKICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMxYShjb21wb25lbnRfaW5fcGF0aD1zaGFyZWRfaW5wdXQsIGNvbXBvbmVudF9pbl9udW1iZXI9MSkKCiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMWIgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9cGF0aCkKICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMxYi5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50CiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMWIuY29tbWFuZCArPSAiICYgZWNobyB1cGRhdGVkMSIKICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMxYihjb21wb25lbnRfaW5fcGF0aD1zaGFyZWRfaW5wdXQsIGNvbXBvbmVudF9pbl9udW1iZXI9MSkKCiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMiA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1wYXRoKQogICAgICAgICAgICBjb21wb25lbnRfZnVuYzIuY29tbWFuZCArPSAiICYgZWNobyB1cGRhdGVkMiIKICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMyLmVudmlyb25tZW50ID0gZW52aXJvbm1lbnQKICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMyKGNvbXBvbmVudF9pbl9wYXRoPXNoYXJlZF9pbnB1dCwgY29tcG9uZW50X2luX251bWJlcj0xKQoKICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMzID0gbG9hZF9jb21wb25lbnQoc291cmNlPXBhdGgpCiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMy5jb21tYW5kICs9ICIgJiBlY2hvIHVwZGF0ZWQzIgogICAgICAgICAgICBjb21wb25lbnRfZnVuYzMuZW52aXJvbm1lbnQgPSBlbnZpcm9ubWVudAogICAgICAgICAgICBjb21wb25lbnRfZnVuYzMoY29tcG9uZW50X2luX3BhdGg9c2hhcmVkX2lucHV0LCBjb21wb25lbnRfaW5fbnVtYmVyPTEpCgogICAgICAgICMgVE9ETzogdGVzdCB3aXRoIG11bHRpcGxlIHBpcGVsaW5lcyBhZnRlciBzZXJ2ZXItc2lkZSByZXR1cm4gam9icyBmb3IgcGlwZWxpbmUgY29tcG9uZW50CiAgICAgICAgIyBAZHNsLnBpcGVsaW5lCiAgICAgICAgIyBkZWYgcGlwZWxpbmVfbWlkKCk6CiAgICAgICAgIyAgICAgcGlwZWxpbmVfbGVhZigpCiAgICAgICAgIyAgICAgcGlwZWxpbmVfbGVhZigpCiAgICAgICAgIwogICAgICAgICMgQGRzbC5waXBlbGluZQogICAgICAgICMgZGVmIHBpcGVsaW5lX3Jvb3QoKToKICAgICAgICAjICAgICBwaXBlbGluZV9taWQoKQogICAgICAgICMgICAgIHBpcGVsaW5lX21pZCgpCgogICAgICAgIHJldHVybiBwaXBlbGluZV9sZWFmCgogICAgZGVmIHRlc3RfZHNsX3BpcGVsaW5lX3N3ZWVwX25vZGUoc2VsZiwgY2xpZW50OiBNTENsaWVudCwgcmFuZHN0cjogQ2FsbGFibGVbW3N0cl0sIHN0cl0pIC0\u002BIE5vbmU6CiAgICAgICAgeWFtbF9maWxlID0gIi4vdGVzdHMvdGVzdF9jb25maWdzL2NvbXBvbmVudHMvaGVsbG93b3JsZF9jb21wb25lbnQueW1sIgoKICAgICAgICBAZHNsLnBpcGVsaW5lCiAgICAgICAgZGVmIHRyYWluX3dpdGhfc3dlZXBfaW5fcGlwZWxpbmUocmF3X2RhdGEsIHByaW1hcnlfbWV0cmljOiBzdHIgPSAiQVVDIiwgbWF4X3RvdGFsX3RyaWFsczogaW50ID0gMTApOgogICAgICAgICAgICBjb21wb25lbnRfdG9fc3dlZXA6IENvbW1hbmRDb21wb25lbnQgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9eWFtbF9maWxlKQogICAgICAgICAgICAjIHRvIGNoZWNrIHRoZSBsb2dpYyB0byBzZXQgZGVmYXVsdCBkaXNwbGF5IG5hbWUgZm9yIGNvbXBvbmVudHMKICAgICAgICAgICAgY29tcG9uZW50X3RvX3N3ZWVwLmRpc3BsYXlfbmFtZSA9IE5vbmUKCiAgICAgICAgICAgIGNtZF9ub2RlMTogQ29tbWFuZCA9IGNvbXBvbmVudF90b19zd2VlcCgKICAgICAgICAgICAgICAgIGNvbXBvbmVudF9pbl9udW1iZXI9Q2hvaWNlKFsyLCAzLCA0LCA1XSksIGNvbXBvbmVudF9pbl9wYXRoPXJhd19kYXRhCiAgICAgICAgICAgICkKCiAgICAgICAgICAgIHN3ZWVwX2pvYjE6IFN3ZWVwID0gY21kX25vZGUxLnN3ZWVwKAogICAgICAgICAgICAgICAgcHJpbWFyeV9tZXRyaWM9IkFVQyIsICAjIHByaW1hcnlfbWV0cmljLAogICAgICAgICAgICAgICAgZ29hbD0ibWF4aW1pemUiLAogICAgICAgICAgICAgICAgc2FtcGxpbmdfYWxnb3JpdGhtPSJyYW5kb20iLAogICAgICAgICAgICApCiAgICAgICAgICAgIHN3ZWVwX2pvYjEuY29tcHV0ZSA9ICJncHUtY2x1c3RlciIKICAgICAgICAgICAgc3dlZXBfam9iMS5zZXRfbGltaXRzKG1heF90b3RhbF90cmlhbHM9MTApICAjIG1heF90b3RhbF90cmlhbHMKCiAgICAgICAgICAgIGNtZF9ub2RlMjogQ29tbWFuZCA9IGNvbXBvbmVudF90b19zd2VlcCgKICAgICAgICAgICAgICAgIGNvbXBvbmVudF9pbl9udW1iZXI9Q2hvaWNlKFsyLCAzLCA0LCA1XSksIGNvbXBvbmVudF9pbl9wYXRoPXJhd19kYXRhCiAgICAgICAgICAgICkKICAgICAgICAgICAgc3dlZXBfam9iMjogU3dlZXAgPSBjbWRfbm9kZTIuc3dlZXAoCiAgICAgICAgICAgICAgICBwcmltYXJ5X21ldHJpYz0iQVVDIiwKICAgICAgICAgICAgICAgIGdvYWw9Im1pbmltaXplIiwKICAgICAgICAgICAgICAgIHNhbXBsaW5nX2FsZ29yaXRobT0icmFuZG9tIiwKICAgICAgICAgICAgICAgIG1heF90b3RhbF90cmlhbHM9MTAsCiAgICAgICAgICAgICkKICAgICAgICAgICAgc3dlZXBfam9iMi5jb21wdXRlID0gImdwdS1jbHVzdGVyIgoKICAgICAgICAgICAgc3dlZXBfam9iMzogU3dlZXAgPSBjb21wb25lbnRfdG9fc3dlZXAoCiAgICAgICAgICAgICAgICBjb21wb25lbnRfaW5fbnVtYmVyPUNob2ljZShbMiwgMywgNCwgNV0pLCBjb21wb25lbnRfaW5fcGF0aD1yYXdfZGF0YQogICAgICAgICAgICApLnN3ZWVwKAogICAgICAgICAgICAgICAgcHJpbWFyeV9tZXRyaWM9ImFjY3VyYWN5IiwKICAgICAgICAgICAgICAgIGdvYWw9Im1heGltaXplIiwKICAgICAgICAgICAgICAgIHNhbXBsaW5nX2FsZ29yaXRobT0icmFuZG9tIiwKICAgICAgICAgICAgICAgIG1heF90b3RhbF90cmlhbHM9MTAsCiAgICAgICAgICAgICkKCiAgICAgICAgICAgIGNvbXBvbmVudF90b19saW5rID0gbG9hZF9jb21wb25lbnQoc291cmNlPXlhbWxfZmlsZSwgcGFyYW1zX292ZXJyaWRlPVt7Im5hbWUiOiAibm9kZV90b19saW5rIn1dKQogICAgICAgICAgICBsaW5rX25vZGUgPSBjb21wb25lbnRfdG9fbGluaygKICAgICAgICAgICAgICAgIGNvbXBvbmVudF9pbl9udW1iZXI9MiwgY29tcG9uZW50X2luX3BhdGg9c3dlZXBfam9iMS5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aAogICAgICAgICAgICApCgogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgInBpcGVsaW5lX2pvYl9iZXN0X21vZGVsMSI6IHN3ZWVwX2pvYjEub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgsCiAgICAgICAgICAgICAgICAicGlwZWxpbmVfam9iX2Jlc3RfbW9kZWwyIjogc3dlZXBfam9iMi5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aCwKICAgICAgICAgICAgICAgICJwaXBlbGluZV9qb2JfYmVzdF9tb2RlbDMiOiBzd2VlcF9qb2IzLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRoLAogICAgICAgICAgICAgICAgInBpcGVsaW5lX21vZGVsX3Rlc3RfcmVzdWx0IjogbGlua19ub2RlLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRoLAogICAgICAgICAgICB9CgogICAgICAgIHBpcGVsaW5lOiBQaXBlbGluZUpvYiA9IHRyYWluX3dpdGhfc3dlZXBfaW5fcGlwZWxpbmUoCiAgICAgICAgICAgIHJhd19kYXRhPWpvYl9pbnB1dCwgbWF4X3RvdGFsX3RyaWFscz0xMDAsIHByaW1hcnlfbWV0cmljPSJhY2N1cmFjeSIKICAgICAgICApCiAgICAgICAgcGlwZWxpbmUuc2V0dGluZ3MuZGVmYXVsdF9jb21wdXRlID0gImNwdS1jbHVzdGVyIgogICAgICAgIGNyZWF0ZWRfcGlwZWxpbmUgPSBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQogICAgICAgIG5hbWUsIHZlcnNpb24gPSBjcmVhdGVkX3BpcGVsaW5lLmpvYnNbInN3ZWVwX2pvYjEiXS50cmlhbC5zcGxpdCgiOiIpCiAgICAgICAgY3JlYXRlZF9jb21wb25lbnQgPSBjbGllbnQuY29tcG9uZW50cy5nZXQobmFtZSwgdmVyc2lvbikKICAgICAgICAjIGtlZXAgb3JpZ2luYWwgY29tcG9uZW50IGRpc3BsYXkgbmFtZSB0byBndWFyYW50ZWUgcmV1c2UKICAgICAgICBhc3NlcnQgY3JlYXRlZF9jb21wb25lbnQuZGlzcGxheV9uYW1lIGlzIE5vbmUKCiAgICBkZWYgdGVzdF9kc2xfcGlwZWxpbmVfY29tcG9uZW50X2NhY2hlX2luX3Jlc29sdmVyKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgaW5wdXRfZGF0YV9wYXRoID0gIi4vdGVzdHMvdGVzdF9jb25maWdzL2RhdGEvIgogICAgICAgIHBpcGVsaW5lX3Jvb3QgPSBzZWxmLl9nZW5lcmF0ZV9tdWx0aV9sYXllcl9waXBlbGluZV9mdW5jKCkKCiAgICAgICAgX3N1Ym1pdF9hbmRfY2FuY2VsID0gcGFydGlhbCgKICAgICAgICAgICAgc3VibWl0X2FuZF9jYW5jZWxfbmV3X2RzbF9waXBlbGluZSwgY2xpZW50PWNsaWVudCwgam9iX2luX3BhdGg9SW5wdXQocGF0aD1pbnB1dF9kYXRhX3BhdGgpCiAgICAgICAgKQoKICAgICAgICBkZWYgX21vY2tfZ2V0X2NvbXBvbmVudF9hcm1faWQoX2NvbXBvbmVudDogQ29tcG9uZW50KSAtPiBzdHI6CiAgICAgICAgICAgICMgdGhlIGxvZ2ljIGhhcyBubyBkaWZmIGNvbXBhcmluZyB0byBvcmlnaW5hbCBmdW5jdGlvbiBvdGhlciB0aGFuIGFsd2F5cyB1c2luZyBzaG93X3Byb2dyZXNzPUZhbHNlCiAgICAgICAgICAgICMganVzdCB0byBtb2NrIHRoZSBmdW5jdGlvbiBhbmQgY2hlY2sgY2FsbCBpbmZvcm1hdGlvbgogICAgICAgICAgICBpZiBub3QgX2NvbXBvbmVudC5pZDoKICAgICAgICAgICAgICAgIF9jb21wb25lbnQuX2lkID0gY2xpZW50LmNvbXBvbmVudHMuY3JlYXRlX29yX3VwZGF0ZSgKICAgICAgICAgICAgICAgICAgICBfY29tcG9uZW50LCBpc19hbm9ueW1vdXM9VHJ1ZSwgc2hvd19wcm9ncmVzcz1GYWxzZQogICAgICAgICAgICAgICAgKS5pZAogICAgICAgICAgICByZXR1cm4gX2NvbXBvbmVudC5pZAoKICAgICAgICB3aXRoIG1vY2sucGF0Y2gub2JqZWN0KAogICAgICAgICAgICBPcGVyYXRpb25PcmNoZXN0cmF0b3IsICJfZ2V0X2NvbXBvbmVudF9hcm1faWQiLCBzaWRlX2VmZmVjdD1fbW9ja19nZXRfY29tcG9uZW50X2FybV9pZAogICAgICAgICkgYXMgbW9ja19yZXNvbHZlOgogICAgICAgICAgICBfc3VibWl0X2FuZF9jYW5jZWwocGlwZWxpbmVfcm9vdCkKICAgICAgICAgICAgIyBwaXBlbGluZV9sZWFmLCBwaXBlbGluZV9taWQgYW5kIDMgY29tbWFuZCBjb21wb25lbnRzIHdpbGwgYmUgcmVzb2x2ZWQKICAgICAgICAgICAgYXNzZXJ0IG1vY2tfcmVzb2x2ZS5jYWxsX2NvdW50ID09IDUKCiAgICAgICAgd2l0aCBtb2NrLnBhdGNoLm9iamVjdCgKICAgICAgICAgICAgT3BlcmF0aW9uT3JjaGVzdHJhdG9yLCAiX2dldF9jb21wb25lbnRfYXJtX2lkIiwgc2lkZV9lZmZlY3Q9X21vY2tfZ2V0X2NvbXBvbmVudF9hcm1faWQKICAgICAgICApIGFzIG1vY2tfcmVzb2x2ZToKICAgICAgICAgICAgX3N1Ym1pdF9hbmRfY2FuY2VsKHBpcGVsaW5lX3Jvb3QpCiAgICAgICAgICAgICMgbm8gbW9yZSByZXF1ZXN0cyB0byByZXNvbHZlIGNvbXBvbmVudHMgYXMgbG9jYWwgY2FjaGUgaXMgaGl0CiAgICAgICAgICAgIGFzc2VydCBtb2NrX3Jlc29sdmUuY2FsbF9jb3VudCA9PSAwCgogICAgICAgIHBpcGVsaW5lX2pvYiA9IHBpcGVsaW5lX3Jvb3Qoam9iX2luX3BhdGg9SW5wdXQocGF0aD1pbnB1dF9kYXRhX3BhdGgpKQogICAgICAgIHBpcGVsaW5lX2pvYi5zZXR0aW5ncy5kZWZhdWx0X2NvbXB1dGUgPSAiY3B1LWNsdXN0ZXIiCiAgICAgICAgbGVhZl9zdWJncmFwaCA9IHBpcGVsaW5lX2pvYi5qb2JzWyJwaXBlbGluZV9taWQiXS5jb21wb25lbnQuam9ic1sicGlwZWxpbmVfbGVhZiJdLmNvbXBvbmVudAogICAgICAgIGxlYWZfc3ViZ3JhcGguam9ic1siYW5vdGhlcl9jb21wb25lbnRfbmFtZSJdLmNvbXBvbmVudC5jb21tYW5kICs9ICIgJiBlY2hvIHVwZGF0ZWQyIgogICAgICAgIHdpdGggbW9jay5wYXRjaC5vYmplY3QoCiAgICAgICAgICAgIE9wZXJhdGlvbk9yY2hlc3RyYXRvciwgIl9nZXRfY29tcG9uZW50X2FybV9pZCIsIHNpZGVfZWZmZWN0PV9tb2NrX2dldF9jb21wb25lbnRfYXJtX2lkCiAgICAgICAgKSBhcyBtb2NrX3Jlc29sdmU6CiAgICAgICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lX2pvYiwgY2xpZW50KQogICAgICAgICAgICAjIHVwZGF0ZWQgY29tbWFuZCBjb21wb25lbnQgYW5kIGl0cyBwYXJlbnRzIChwaXBlbGluZV9sZWFmIGFuZCBwaXBlbGluZV9taWQpIHdpbGwgYmUgcmVzb2x2ZWQKICAgICAgICAgICAgYXNzZXJ0IG1vY2tfcmVzb2x2ZS5jYWxsX2NvdW50ID09IDMKCiAgICBkZWYgdGVzdF9kc2xfcGlwZWxpbmVfY29uY3VycmVudF9jb21wb25lbnRfcmVnaXN0cmF0aW9uKHNlbGYsIGNsaWVudDogTUxDbGllbnQsIG1vY2tlcjogTW9ja0ZpeHR1cmUpIC0\u002BIE5vbmU6CiAgICAgICAgIyBkaXNhYmxlIG9uLWRpc2sgY2FjaGUgdG8gdGVzdCBjb25jdXJyZW50IGNvbXBvbmVudCByZWdpc3RyYXRpb24KICAgICAgICBtb2NrZXIucGF0Y2goImF6dXJlLmFpLm1sLl91dGlscy51dGlscy5pc19vbl9kaXNrX2NhY2hlX2VuYWJsZWQiLCByZXR1cm5fdmFsdWU9RmFsc2UpCgogICAgICAgIGlucHV0X2RhdGFfcGF0aCA9ICIuL3Rlc3RzL3Rlc3RfY29uZmlncy9kYXRhLyIKICAgICAgICBwaXBlbGluZV9yb290ID0gc2VsZi5fZ2VuZXJhdGVfcGlwZWxpbmVfZnVuY19mb3JfY29uY3VycmVudF9jb21wb25lbnRfcmVnaXN0cmF0aW9uX3Rlc3QoCiAgICAgICAgICAgIHNoYXJlZF9pbnB1dD1JbnB1dChwYXRoPWlucHV0X2RhdGFfcGF0aCkKICAgICAgICApCgogICAgICAgIF9zdWJtaXRfYW5kX2NhbmNlbCA9IHBhcnRpYWwoCiAgICAgICAgICAgIHN1Ym1pdF9hbmRfY2FuY2VsX25ld19kc2xfcGlwZWxpbmUsCiAgICAgICAgICAgIGNsaWVudD1jbGllbnQsCiAgICAgICAgKQoKICAgICAgICB0cmVhdG1lbnRfcGlwZWxpbmVfam9iID0gX3N1Ym1pdF9hbmRfY2FuY2VsKHBpcGVsaW5lX3Jvb3QpCgogICAgICAgIHdpdGggbW9jay5wYXRjaCgiYXp1cmUuYWkubWwuX3V0aWxzLnV0aWxzLmlzX2NvbmN1cnJlbnRfY29tcG9uZW50X3JlZ2lzdHJhdGlvbl9lbmFibGVkIiwgcmV0dXJuX3ZhbHVlPUZhbHNlKToKICAgICAgICAgICAgYmFzZV9waXBlbGluZV9qb2IgPSBfc3VibWl0X2FuZF9jYW5jZWwocGlwZWxpbmVfcm9vdCkKCiAgICAgICAgIyBTZXJ2ZXItc2lkZSBkb2VzIG5vdCBndWFyYW50ZWUgdGhlIHNhbWUgYW5vbnltb3VzIHBpcGVsaW5lIGNvbXBvbmVudCBzaGFyZSB0aGUgc2FtZSB2ZXJzaW9uCiAgICAgICAgIyBTbyBvbWl0IG5hbWUgYW5kIHZlcnNpb24gYW5kIGRvIGNvbXBhcmlzb24gbGF5ZXIgYnkgbGF5ZXIKICAgICAgICBvbWl0X2ZpZWxkcyA9IFsiaWQiLCAibmFtZSIsICJ2ZXJzaW9uIiwgImNyZWF0aW9uX2NvbnRleHQiLCAic2VydmljZXMiLCAiam9icy4qLmNvbXBvbmVudCJdCgogICAgICAgIGJhc2UsIHRyZWF0ID0gYmFzZV9waXBlbGluZV9qb2IsIHRyZWF0bWVudF9waXBlbGluZV9qb2IKICAgICAgICAjIFRPRE86IHRlc3Qgd2l0aCBtdWx0aXBsZSBwaXBlbGluZXMgYWZ0ZXIgc2VydmVyLXNpZGUgcmV0dXJuIGpvYnMgZm9yIHBpcGVsaW5lIGNvbXBvbmVudAogICAgICAgIGZvciBfIGluIHJhbmdlKDAsIDApOgogICAgICAgICAgICBhc3NlcnQgb21pdF93aXRoX3dpbGRjYXJkKGJhc2UuX3RvX2RpY3QoKSwgKm9taXRfZmllbGRzKSA9PSBvbWl0X3dpdGhfd2lsZGNhcmQoCiAgICAgICAgICAgICAgICB0cmVhdC5fdG9fZGljdCgpLCAqb21pdF9maWVsZHMKICAgICAgICAgICAgKQogICAgICAgICAgICBiYXNlID0gX2dldF9jb21wb25lbnRfaW5fZmlyc3RfY2hpbGQoYmFzZSwgY2xpZW50KQogICAgICAgICAgICB0cmVhdCA9IF9nZXRfY29tcG9uZW50X2luX2ZpcnN0X2NoaWxkKHRyZWF0LCBjbGllbnQpCgogICAgICAgICMgVGhlIGxhc3QgbGF5ZXIgY29udGFpbnMgdGhlIGNvbW1hbmQgY29tcG9uZW50cwogICAgICAgIG9taXRfZmllbGRzLnBvcCgpCiAgICAgICAgYXNzZXJ0IG9taXRfd2l0aF93aWxkY2FyZChiYXNlLl90b19kaWN0KCksICpvbWl0X2ZpZWxkcykgPT0gb21pdF93aXRoX3dpbGRjYXJkKHRyZWF0Ll90b19kaWN0KCksICpvbWl0X2ZpZWxkcykK",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "1Eejn94qxLQlrgO40sYwwA==",
        "Date": "Tue, 30 May 2023 07:29:01 GMT",
        "ETag": "\u00220x8DB60DF8A7A1D7C\u0022",
        "Last-Modified": "Tue, 30 May 2023 07:29:02 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "JlZ2Rw/sEnA=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/azureml-blobstore-0bdd51b6-cd9c-4978-b870-99997b393b81/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_pipeline.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "157567",
        "Content-MD5": "vjglRb3ueWA43cCojSpZxA==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 30 May 2023 07:28:59 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": "aW1wb3J0IGxvZ2dpbmcKZnJvbSBpbyBpbXBvcnQgU3RyaW5nSU8KZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCmZyb20gdHlwaW5nIGltcG9ydCBDYWxsYWJsZQpmcm9tIHVuaXR0ZXN0Lm1vY2sgaW1wb3J0IHBhdGNoCgppbXBvcnQgcHlkYXNoCmltcG9ydCBweXRlc3QKZnJvbSBkZXZ0b29sc190ZXN0dXRpbHMgaW1wb3J0IEF6dXJlUmVjb3JkZWRUZXN0Q2FzZSwgaXNfbGl2ZQpmcm9tIHBpcGVsaW5lX2pvYi5lMmV0ZXN0cy50ZXN0X3BpcGVsaW5lX2pvYiBpbXBvcnQgYXNzZXJ0X2pvYl9pbnB1dF9vdXRwdXRfdHlwZXMKZnJvbSB0ZXN0X3V0aWxpdGllcy51dGlscyBpbXBvcnQgKAogICAgX1BZVEVTVF9USU1FT1VUX01FVEhPRCwKICAgIGFzc2VydF9qb2JfY2FuY2VsLAogICAgb21pdF93aXRoX3dpbGRjYXJkLAogICAgc2xlZXBfaWZfbGl2ZSwKKQoKZnJvbSBhenVyZS5haS5tbCBpbXBvcnQgKAogICAgQW1sVG9rZW5Db25maWd1cmF0aW9uLAogICAgSW5wdXQsCiAgICBNYW5hZ2VkSWRlbnRpdHlDb25maWd1cmF0aW9uLAogICAgTUxDbGllbnQsCiAgICBNcGlEaXN0cmlidXRpb24sCiAgICBPdXRwdXQsCiAgICBQeVRvcmNoRGlzdHJpYnV0aW9uLAogICAgVGVuc29yRmxvd0Rpc3RyaWJ1dGlvbiwKICAgIFVzZXJJZGVudGl0eUNvbmZpZ3VyYXRpb24sCiAgICBjb21tYW5kLAogICAgZHNsLAogICAgbG9hZF9jb21wb25lbnQsCikKZnJvbSBhenVyZS5haS5tbC5fdXRpbHMuX2FybV9pZF91dGlscyBpbXBvcnQgKAogICAgaXNfQVJNX2lkX2Zvcl9yZXNvdXJjZSwKICAgIGlzX3Npbmd1bGFyaXR5X2lkX2Zvcl9yZXNvdXJjZSwKKQpmcm9tIGF6dXJlLmFpLm1sLmNvbnN0YW50cy5fY29tbW9uIGltcG9ydCAoCiAgICBBTk9OWU1PVVNfQ09NUE9ORU5UX05BTUUsCiAgICBTSU5HVUxBUklUWV9JRF9GT1JNQVQsCiAgICBBc3NldFR5cGVzLAogICAgSW5wdXRPdXRwdXRNb2RlcywKKQpmcm9tIGF6dXJlLmFpLm1sLmNvbnN0YW50cy5fam9iLnBpcGVsaW5lIGltcG9ydCBQaXBlbGluZUNvbnN0YW50cwpmcm9tIGF6dXJlLmFpLm1sLmRzbC5fZ3JvdXBfZGVjb3JhdG9yIGltcG9ydCBncm91cApmcm9tIGF6dXJlLmFpLm1sLmRzbC5fbG9hZF9pbXBvcnQgaW1wb3J0IHRvX2NvbXBvbmVudApmcm9tIGF6dXJlLmFpLm1sLmVudGl0aWVzIGltcG9ydCBDb21tYW5kQ29tcG9uZW50LCBDb21tYW5kSm9iCmZyb20gYXp1cmUuYWkubWwuZW50aXRpZXMgaW1wb3J0IENvbXBvbmVudApmcm9tIGF6dXJlLmFpLm1sLmVudGl0aWVzIGltcG9ydCBDb21wb25lbnQgYXMgQ29tcG9uZW50RW50aXR5CmZyb20gYXp1cmUuYWkubWwuZW50aXRpZXMgaW1wb3J0ICgKICAgIERhdGEsCiAgICBKb2JSZXNvdXJjZUNvbmZpZ3VyYXRpb24sCiAgICBQaXBlbGluZUpvYiwKICAgIFF1ZXVlU2V0dGluZ3MsCikKZnJvbSBhenVyZS5haS5tbC5leGNlcHRpb25zIGltcG9ydCBVbmV4cGVjdGVkS2V5d29yZEVycm9yLCBWYWxpZGF0aW9uRXhjZXB0aW9uCmZyb20gYXp1cmUuYWkubWwucGFyYWxsZWwgaW1wb3J0IFBhcmFsbGVsSm9iLCBSdW5GdW5jdGlvbiwgcGFyYWxsZWxfcnVuX2Z1bmN0aW9uCgpmcm9tIC4uX3V0aWwgaW1wb3J0IF9EU0xfVElNRU9VVF9TRUNPTkQKCnRlc3RzX3Jvb3RfZGlyID0gUGF0aChfX2ZpbGVfXykucGFyZW50LnBhcmVudC5wYXJlbnQKY29tcG9uZW50c19kaXIgPSB0ZXN0c19yb290X2RpciAvICJ0ZXN0X2NvbmZpZ3MvY29tcG9uZW50cy8iCmpvYl9pbnB1dCA9IElucHV0KAogICAgdHlwZT1Bc3NldFR5cGVzLlVSSV9GSUxFLAogICAgcGF0aD0iaHR0cHM6Ly9kcHJlcGRhdGEuYmxvYi5jb3JlLndpbmRvd3MubmV0L2RlbW8vVGl0YW5pYy5jc3YiLAopCmV4cGVyaW1lbnRfbmFtZSA9ICJkc2xfcGlwZWxpbmVfZTJlIgpjb21tb25fb21pdF9maWVsZHMgPSBbCiAgICAicHJvcGVydGllcyIsCiAgICAiZGlzcGxheV9uYW1lIiwKICAgICJleHBlcmltZW50X25hbWUiLAogICAgImpvYnMuKi5jb21wb25lbnRJZCIsCiAgICAiaW5wdXRzLioudXJpIiwKICAgICJqb2JzLiouX3NvdXJjZSIsCiAgICAiam9icy4qLnByb3BlcnRpZXMiLAogICAgInNldHRpbmdzLl9zb3VyY2UiLAogICAgInNvdXJjZV9qb2JfaWQiLAogICAgInNlcnZpY2VzIiwKXQoKCmRlZiBjaGVja19uYW1lX2FuZF92ZXJzaW9uKG91dHB1dCwgb3V0cHV0X25hbWUsIG91dHB1dF92ZXJzaW9uKToKICAgIGFzc2VydCBvdXRwdXQubmFtZSA9PSBvdXRwdXRfbmFtZQogICAgYXNzZXJ0IG91dHB1dC52ZXJzaW9uID09IG91dHB1dF92ZXJzaW9uCgoKZGVmIGJ1aWxkX3BpcGVsaW5lX3dpdGhfcGFyYWxsZWxfcnVuX2Z1bmN0aW9uKGRhdGEsIGxpdGVyYWxfaW5wdXQ9Tm9uZSk6CiAgICAjIGNvbW1hbmQgam9iIHdpdGggZGljdCBkaXN0cmlidXRpb24KICAgIGVudmlyb25tZW50ID0gIkF6dXJlTUwtc2tsZWFybi0xLjAtdWJ1bnR1MjAuMDQtcHkzOC1jcHU6MzMiCiAgICBpbnB1dHMgPSB7CiAgICAgICAgImpvYl9kYXRhX3BhdGgiOiBJbnB1dCgKICAgICAgICAgICAgdHlwZT1Bc3NldFR5cGVzLk1MVEFCTEUsCiAgICAgICAgICAgIHBhdGg9Ii4vdGVzdHMvdGVzdF9jb25maWdzL2RhdGFzZXQvbW5pc3QtZGF0YSIsCiAgICAgICAgICAgIG1vZGU9SW5wdXRPdXRwdXRNb2Rlcy5FVkFMX01PVU5ULAogICAgICAgICksCiAgICAgICAgImpvYl9kYXRhX3BhdGhfb3B0aW9uYWwiOiBJbnB1dCgKICAgICAgICAgICAgdHlwZT1Bc3NldFR5cGVzLk1MVEFCTEUsCiAgICAgICAgICAgIG1vZGU9SW5wdXRPdXRwdXRNb2Rlcy5FVkFMX01PVU5ULAogICAgICAgICAgICBvcHRpb25hbD1UcnVlLAogICAgICAgICksCiAgICB9CiAgICBpbnB1dF9kYXRhID0gIiR7e2lucHV0cy5qb2JfZGF0YV9wYXRofX0iCiAgICBvdXRwdXRzID0geyJqb2Jfb3V0cHV0X3BhdGgiOiBPdXRwdXQodHlwZT1Bc3NldFR5cGVzLlVSSV9GT0xERVIsIG1vZGU9InJ3X21vdW50Iil9CiAgICBleHBlY3RlZF9yZXNvdXJjZXMgPSB7Imluc3RhbmNlX2NvdW50IjogMn0KCiAgICB0YXNrID0gUnVuRnVuY3Rpb24oCiAgICAgICAgY29kZT0iLi90ZXN0cy90ZXN0X2NvbmZpZ3MvZHNsX3BpcGVsaW5lL3BhcmFsbGVsX2NvbXBvbmVudF93aXRoX2ZpbGVfaW5wdXQvc3JjLyIsCiAgICAgICAgZW50cnlfc2NyaXB0PSJzY29yZS5weSIsCiAgICAgICAgcHJvZ3JhbV9hcmd1bWVudHM9Ii0tam9iX291dHB1dF9wYXRoICR7e291dHB1dHMuam9iX291dHB1dF9wYXRofX0iLAogICAgICAgIGVudmlyb25tZW50PWVudmlyb25tZW50LAogICAgKQogICAgbG9nZ2luZ19sZXZlbCA9ICJERUJVRyIKICAgIG1heF9jb25jdXJyZW5jeV9wZXJfaW5zdGFuY2UgPSAxCiAgICBlcnJvcl90aHJlc2hvbGQgPSAxCiAgICBtaW5pX2JhdGNoX2Vycm9yX3RocmVzaG9sZCA9IDEKICAgIG1pbmlfYmF0Y2hfc2l6ZSA9ICI1IgoKICAgICMgUGFyYWxsZWwgZnJvbSBwYXJhbGxlbF9ydW5fZnVuY3Rpb24oKQogICAgcGFyYWxsZWxfZnVuY3Rpb24gPSBwYXJhbGxlbF9ydW5fZnVuY3Rpb24oCiAgICAgICAgZGlzcGxheV9uYW1lPSJteS1ldmFsdWF0ZS1qb2IiLAogICAgICAgIGlucHV0cz1pbnB1dHMsCiAgICAgICAgb3V0cHV0cz1vdXRwdXRzLAogICAgICAgIG1pbmlfYmF0Y2hfc2l6ZT1taW5pX2JhdGNoX3NpemUsCiAgICAgICAgdGFzaz10YXNrLAogICAgICAgIGxvZ2dpbmdfbGV2ZWw9bG9nZ2luZ19sZXZlbCwKICAgICAgICBtYXhfY29uY3VycmVuY3lfcGVyX2luc3RhbmNlPW1heF9jb25jdXJyZW5jeV9wZXJfaW5zdGFuY2UsCiAgICAgICAgZXJyb3JfdGhyZXNob2xkPWVycm9yX3RocmVzaG9sZCwKICAgICAgICBtaW5pX2JhdGNoX2Vycm9yX3RocmVzaG9sZD1taW5pX2JhdGNoX2Vycm9yX3RocmVzaG9sZCwKICAgICAgICByZXNvdXJjZXM9ZXhwZWN0ZWRfcmVzb3VyY2VzLAogICAgICAgIGlucHV0X2RhdGE9aW5wdXRfZGF0YSwKICAgICkKICAgIGlmIGxpdGVyYWxfaW5wdXQgaXMgTm9uZToKCiAgICAgICAgQGRzbC5waXBlbGluZShleHBlcmltZW50X25hbWU9InRlc3RfcGlwZWxpbmVfd2l0aF9wYXJhbGxlbF9mdW5jdGlvbiIsIGRlZmF1bHRfY29tcHV0ZT0iY3B1LWNsdXN0ZXIiKQogICAgICAgIGRlZiBwYXJhbGxlbF9pbl9waXBlbGluZShqb2JfZGF0YV9wYXRoKToKICAgICAgICAgICAgbm9kZTEgPSBwYXJhbGxlbF9mdW5jdGlvbihqb2JfZGF0YV9wYXRoPWpvYl9kYXRhX3BhdGgpCiAgICAgICAgICAgICMgVE9ETyAyMTA0MjQ3OiBub2RlMS50YXNrIHdpbGwgYmUga2VwdCBhcyBhIGxvY2FsIHBhdGggd2hlbiBzdWJtaXR0aW5nIHRoZSBwaXBlbGluZSBqb2IuCiAgICAgICAgICAgIG5vZGUxLnRhc2sgPSBOb25lCiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAicGlwZWxpbmVfb3V0cHV0Ijogbm9kZTEub3V0cHV0cy5qb2Jfb3V0cHV0X3BhdGgsCiAgICAgICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHBhcmFsbGVsX2luX3BpcGVsaW5lKGRhdGEpCiAgICBlbHNlOgoKICAgICAgICBAZHNsLnBpcGVsaW5lKGV4cGVyaW1lbnRfbmFtZT0idGVzdF9waXBlbGluZV93aXRoX3BhcmFsbGVsX2Z1bmN0aW9uIiwgZGVmYXVsdF9jb21wdXRlPSJjcHUtY2x1c3RlciIpCiAgICAgICAgZGVmIHBhcmFsbGVsX2luX3BpcGVsaW5lKGpvYl9kYXRhX3BhdGgsIGxpdGVyYWxfaW5wdXQpOgogICAgICAgICAgICBub2RlMSA9IHBhcmFsbGVsX2Z1bmN0aW9uKGpvYl9kYXRhX3BhdGg9am9iX2RhdGFfcGF0aCkKICAgICAgICAgICAgIyBUT0RPIDIxMDQyNDc6IG5vZGUxLnRhc2sgd2lsbCBiZSBrZXB0IGFzIGEgbG9jYWwgcGF0aCB3aGVuIHN1Ym1pdHRpbmcgdGhlIHBpcGVsaW5lIGpvYi4KICAgICAgICAgICAgbm9kZTEudGFzayA9IE5vbmUKICAgICAgICAgICAgbm9kZTEucmVzb3VyY2VzLmluc3RhbmNlX2NvdW50ID0gbGl0ZXJhbF9pbnB1dAogICAgICAgICAgICBub2RlMS5tYXhfY29uY3VycmVuY3lfcGVyX2luc3RhbmNlID0gbGl0ZXJhbF9pbnB1dAogICAgICAgICAgICBub2RlMS5lcnJvcl90aHJlc2hvbGQgPSBsaXRlcmFsX2lucHV0CiAgICAgICAgICAgIG5vZGUxLm1pbmlfYmF0Y2hfZXJyb3JfdGhyZXNob2xkID0gbGl0ZXJhbF9pbnB1dAogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgInBpcGVsaW5lX291dHB1dCI6IG5vZGUxLm91dHB1dHMuam9iX291dHB1dF9wYXRoLAogICAgICAgICAgICB9CgogICAgICAgIHJldHVybiBwYXJhbGxlbF9pbl9waXBlbGluZShkYXRhLCBsaXRlcmFsX2lucHV0KQoKCkBweXRlc3QubWFyay51c2VmaXh0dXJlcygKICAgICJlbmFibGVfZW52aXJvbm1lbnRfaWRfYXJtX2V4cGFuc2lvbiIsCiAgICAiZW5hYmxlX3BpcGVsaW5lX3ByaXZhdGVfcHJldmlld19mZWF0dXJlcyIsCiAgICAiZW5hYmxlX3ByaXZhdGVfcHJldmlld19zY2hlbWFfZmVhdHVyZXMiLAogICAgIm1vY2tfY29kZV9oYXNoIiwKICAgICJtb2NrX2NvbXBvbmVudF9oYXNoIiwKICAgICJtb2NrX3NldF9oZWFkZXJzX3dpdGhfdXNlcl9hbWxfdG9rZW4iLAogICAgInJlY29yZGVkX3Rlc3QiLAogICAgIm1vY2tfYXNzZXRfbmFtZSIsCikKQHB5dGVzdC5tYXJrLnRpbWVvdXQodGltZW91dD1fRFNMX1RJTUVPVVRfU0VDT05ELCBtZXRob2Q9X1BZVEVTVF9USU1FT1VUX01FVEhPRCkKQHB5dGVzdC5tYXJrLmUyZXRlc3QKQHB5dGVzdC5tYXJrLnBpcGVsaW5lX3Rlc3QKY2xhc3MgVGVzdERTTFBpcGVsaW5lKEF6dXJlUmVjb3JkZWRUZXN0Q2FzZSk6CiAgICBkZWYgdGVzdF9jb21tYW5kX2NvbXBvbmVudF9jcmVhdGUoc2VsZiwgY2xpZW50OiBNTENsaWVudCwgcmFuZHN0cjogQ2FsbGFibGVbW3N0cl0sIHN0cl0pIC0\u002BIE5vbmU6CiAgICAgICAgY29tcG9uZW50X3lhbWwgPSBjb21wb25lbnRzX2RpciAvICJoZWxsb3dvcmxkX2NvbXBvbmVudC55bWwiCiAgICAgICAgY29tcG9uZW50X2Z1bmMxID0gbG9hZF9jb21wb25lbnQoc291cmNlPWNvbXBvbmVudF95YW1sLCBwYXJhbXNfb3ZlcnJpZGU9W3sibmFtZSI6IHJhbmRzdHIoImNvbXBvbmVudF9uYW1lIil9XSkKICAgICAgICBjb21wb25lbnRfZnVuYzIgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9Y29tcG9uZW50X3lhbWwsIHBhcmFtc19vdmVycmlkZT1beyJuYW1lIjogcmFuZHN0cigiY29tcG9uZW50X25hbWUiKX1dKQoKICAgICAgICBAZHNsLnBpcGVsaW5lKAogICAgICAgICAgICBuYW1lPXJhbmRzdHIoInBpcGVsaW5lX25hbWUiKSwKICAgICAgICAgICAgZGVzY3JpcHRpb249IlRoZSBoZWxsbyB3b3JsZCBwaXBlbGluZSBqb2IiLAogICAgICAgICAgICB0YWdzPXsib3duZXIiOiAic2RrdGVhbSIsICJ0YWciOiAidGFndmFsdWUifSwKICAgICAgICAgICAgY29tcHV0ZT0iY3B1LWNsdXN0ZXIiLAogICAgICAgICAgICBleHBlcmltZW50X25hbWU9ZXhwZXJpbWVudF9uYW1lLAogICAgICAgICAgICBjb250aW51ZV9vbl9zdGVwX2ZhaWx1cmU9VHJ1ZSwKICAgICAgICApCiAgICAgICAgZGVmIHBpcGVsaW5lKGpvYl9pbl9udW1iZXIsIGpvYl9pbl9vdGhlcl9udW1iZXIsIGpvYl9pbl9wYXRoKToKICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMxKGNvbXBvbmVudF9pbl9udW1iZXI9am9iX2luX251bWJlciwgY29tcG9uZW50X2luX3BhdGg9am9iX2luX3BhdGgpCiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMihjb21wb25lbnRfaW5fbnVtYmVyPWpvYl9pbl9vdGhlcl9udW1iZXIsIGNvbXBvbmVudF9pbl9wYXRoPWpvYl9pbl9wYXRoKQoKICAgICAgICBwaXBlbGluZSA9IHBpcGVsaW5lKDEwLCAxNSwgam9iX2lucHV0KQogICAgICAgIGpvYiA9IGNsaWVudC5qb2JzLmNyZWF0ZV9vcl91cGRhdGUocGlwZWxpbmUpCiAgICAgICAgIyBjaGVjayByZXF1aXJlZCBmaWVsZHMgaW4gam9iIGRpY3QKICAgICAgICBqb2JfZGljdCA9IGpvYi5fdG9fZGljdCgpCiAgICAgICAgZXhwZWN0ZWRfa2V5cyA9IFsic3RhdHVzIiwgInByb3BlcnRpZXMiLCAidGFncyIsICJjcmVhdGlvbl9jb250ZXh0Il0KICAgICAgICBmb3IgayBpbiBleHBlY3RlZF9rZXlzOgogICAgICAgICAgICBhc3NlcnQgayBpbiBqb2JfZGljdC5rZXlzKCksIGYiZmFpbGVkIHRvIGdldCB7a30gaW4ge2pvYl9kaWN0fSIKCiAgICAgICAgIyBvcmlnaW5hbCBqb2IgZGlkIG5vdCBjaGFuZ2UKICAgICAgICBhc3NlcnRfam9iX2lucHV0X291dHB1dF90eXBlcyhqb2IpCiAgICAgICAgYXNzZXJ0IGpvYi5zZXR0aW5ncy5jb250aW51ZV9vbl9zdGVwX2ZhaWx1cmUgaXMgVHJ1ZQogICAgICAgIGFzc2VydCBqb2IuY29tcHV0ZSA9PSAiY3B1LWNsdXN0ZXIiCgogICAgZGVmIHRlc3RfcGlwZWxpbmVfam9iX2NyZWF0ZV93aXRoX3Jlc29sdmVfcmV1c2Uoc2VsZiwgY2xpZW50OiBNTENsaWVudCwgcmFuZHN0cjogQ2FsbGFibGVbW3N0cl0sIHN0cl0pIC0\u002BIE5vbmU6CiAgICAgICAgY29tcG9uZW50X3lhbWwgPSBjb21wb25lbnRzX2RpciAvICJoZWxsb3dvcmxkX2NvbXBvbmVudC55bWwiCiAgICAgICAgY29tcG9uZW50X2Z1bmMxOiBDb21tYW5kQ29tcG9uZW50ID0gbG9hZF9jb21wb25lbnQoc291cmNlPWNvbXBvbmVudF95YW1sKQogICAgICAgIGNvbXBvbmVudF9mdW5jMjogQ29tbWFuZENvbXBvbmVudCA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1jb21wb25lbnRfeWFtbCkKICAgICAgICBjb21wb25lbnRfZnVuYzM6IENvbW1hbmRDb21wb25lbnQgPSBjb21wb25lbnRfZnVuYzEKCiAgICAgICAgQGRzbC5waXBlbGluZSgKICAgICAgICAgICAgbmFtZT1yYW5kc3RyKCJwaXBlbGluZV9uYW1lIiksCiAgICAgICAgICAgIGRlc2NyaXB0aW9uPSJUaGUgaGVsbG8gd29ybGQgcGlwZWxpbmUgam9iIiwKICAgICAgICAgICAgdGFncz17Im93bmVyIjogInNka3RlYW0iLCAidGFnIjogInRhZ3ZhbHVlIn0sCiAgICAgICAgICAgIGNvbXB1dGU9ImNwdS1jbHVzdGVyIiwKICAgICAgICAgICAgZXhwZXJpbWVudF9uYW1lPWV4cGVyaW1lbnRfbmFtZSwKICAgICAgICAgICAgY29udGludWVfb25fc3RlcF9mYWlsdXJlPVRydWUsCiAgICAgICAgKQogICAgICAgIGRlZiBwaXBlbGluZShqb2JfaW5fbnVtYmVyLCBqb2JfaW5fb3RoZXJfbnVtYmVyLCBqb2JfaW5fcGF0aCk6CiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMShjb21wb25lbnRfaW5fbnVtYmVyPWpvYl9pbl9udW1iZXIsIGNvbXBvbmVudF9pbl9wYXRoPWpvYl9pbl9wYXRoKQogICAgICAgICAgICBjb21wb25lbnRfZnVuYzMoY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fb3RoZXJfbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5fcGF0aCkKICAgICAgICAgICAgY29tcG9uZW50X2Z1bmMxKGNvbXBvbmVudF9pbl9udW1iZXI9am9iX2luX290aGVyX251bWJlciwgY29tcG9uZW50X2luX3BhdGg9am9iX2luX3BhdGgpCgogICAgICAgICAgICBjb21wb25lbnRfZnVuYzIoY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fb3RoZXJfbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5fcGF0aCkKCiAgICAgICAgZHNsX3BpcGVsaW5lID0gcGlwZWxpbmUoMTAsIDE1LCBqb2JfaW5wdXQpCiAgICAgICAgY29tcG9uZW50X2lkX3NldCA9IHNldChtYXAobGFtYmRhIHg6IGlkKHguY29tcG9uZW50KSwgZHNsX3BpcGVsaW5lLmpvYnMudmFsdWVzKCkpKQogICAgICAgIGFzc2VydCBsZW4oY29tcG9uZW50X2lkX3NldCkgPT0gMgoKICAgICAgICBmb3Igam9iX2luc3RhbmNlIGluIGRzbF9waXBlbGluZS5qb2JzLnZhbHVlcygpOgogICAgICAgICAgICBhc3NlcnQgam9iX2luc3RhbmNlLmNvbXBvbmVudC5pZCBpcyBOb25lLCAiY29tcG9uZW50IGlkIHdvbid0IGJlIHJlc29sdmVkIGJlZm9yZSBjcmVhdGVfb3JfdXBkYXRlIgoKICAgICAgICAjIFRPRE86IG5lZWQgZXh0cmEgbW9jayBiYXNlZCB0ZXN0cyB0byB2ZXJpZnkgaWYgdGhlIGNvbXBvbmVudCBpcyByZXNvbHZlZCBvbmx5IG9uY2UKICAgICAgICBfID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShkc2xfcGlwZWxpbmUpCiAgICAgICAgZm9yIGpvYl9pbnN0YW5jZSBpbiBkc2xfcGlwZWxpbmUuam9icy52YWx1ZXMoKToKICAgICAgICAgICAgYXNzZXJ0ICgKICAgICAgICAgICAgICAgIGlzaW5zdGFuY2Uoam9iX2luc3RhbmNlLmNvbXBvbmVudCwgc3RyKSBvciBqb2JfaW5zdGFuY2UuY29tcG9uZW50LmlkIGlzIG5vdCBOb25lCiAgICAgICAgICAgICksICJjb21wb25lbnQgaWQgd2lsbCBiZSBmaWxsZWQgYmFjayB0byB0aGUgaW5zdGFuY2UgZHVyaW5nIGNyZWF0ZV9vcl91cGRhdGUiCgogICAgZGVmIHRlc3RfY29tbWFuZF9jb21wb25lbnRfY3JlYXRlX3dpdGhfb3V0cHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQsIHJhbmRzdHI6IENhbGxhYmxlW1tzdHJdLCBzdHJdKSAtPiBOb25lOgogICAgICAgIGNvbXBvbmVudF95YW1sID0gY29tcG9uZW50c19kaXIgLyAiaGVsbG93b3JsZF9jb21wb25lbnQueW1sIgogICAgICAgIGNvbXBvbmVudF9mdW5jMSA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1jb21wb25lbnRfeWFtbCwgcGFyYW1zX292ZXJyaWRlPVt7Im5hbWUiOiByYW5kc3RyKCJjb21wb25lbnRfbmFtZSIpfV0pCiAgICAgICAgY29tcG9uZW50X2Z1bmMyID0gbG9hZF9jb21wb25lbnQoc291cmNlPWNvbXBvbmVudF95YW1sLCBwYXJhbXNfb3ZlcnJpZGU9W3sibmFtZSI6IHJhbmRzdHIoImNvbXBvbmVudF9uYW1lIil9XSkKCiAgICAgICAgQGRzbC5waXBlbGluZSgKICAgICAgICAgICAgbmFtZT1yYW5kc3RyKCJwaXBlbGluZV9uYW1lIiksCiAgICAgICAgICAgIGRlc2NyaXB0aW9uPSJUaGUgaGVsbG8gd29ybGQgcGlwZWxpbmUgam9iIiwKICAgICAgICAgICAgdGFncz17Im93bmVyIjogInNka3RlYW0iLCAidGFnIjogInRhZ3ZhbHVlIn0sCiAgICAgICAgICAgIGNvbXB1dGU9ImNwdS1jbHVzdGVyIiwKICAgICAgICApCiAgICAgICAgZGVmIHBpcGVsaW5lX3dpdGhfb3V0cHV0KGpvYl9pbl9udW1iZXIsIGpvYl9pbl9vdGhlcl9udW1iZXIsIGpvYl9pbl9wYXRoKToKICAgICAgICAgICAgbm9kZTEgPSBjb21wb25lbnRfZnVuYzEoY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5fcGF0aCkKCiAgICAgICAgICAgIG5vZGUyID0gY29tcG9uZW50X2Z1bmMyKAogICAgICAgICAgICAgICAgY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fb3RoZXJfbnVtYmVyLAogICAgICAgICAgICAgICAgY29tcG9uZW50X2luX3BhdGg9bm9kZTEub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgsCiAgICAgICAgICAgICkKICAgICAgICAgICAgcmV0dXJuIHsiam9iX291dF9kYXRhIjogbm9kZTIub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGh9CgogICAgICAgIHBpcGVsaW5lID0gcGlwZWxpbmVfd2l0aF9vdXRwdXQoMTAsIDE1LCBqb2JfaW5wdXQpCiAgICAgICAgcGlwZWxpbmUub3V0cHV0cy5qb2Jfb3V0X2RhdGEgPSBPdXRwdXQoZGF0YXNldD1EYXRhKG5hbWU9ImRzbF9waXBlbGluZV9vdXRwdXQiLCB2ZXJzaW9uPSIxIikpCiAgICAgICAgY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSwgZXhwZXJpbWVudF9uYW1lPWV4cGVyaW1lbnRfbmFtZSkKCiAgICBkZWYgdGVzdF9jb21tYW5kX2NvbXBvbmVudF9jcmVhdGVfZnJvbV9yZW1vdGUoCiAgICAgICAgc2VsZiwKICAgICAgICBjbGllbnQ6IE1MQ2xpZW50LAogICAgICAgIGhlbGxvX3dvcmxkX2NvbXBvbmVudDogQ29tcG9uZW50RW50aXR5LAogICAgICAgIHJhbmRzdHI6IENhbGxhYmxlW1tzdHJdLCBzdHJdLAogICAgKSAtPiBOb25lOgogICAgICAgIGNvbXBvbmVudF9mdW5jID0gbG9hZF9jb21wb25lbnQoCiAgICAgICAgICAgIGNsaWVudD1jbGllbnQsCiAgICAgICAgICAgIG5hbWU9aGVsbG9fd29ybGRfY29tcG9uZW50Lm5hbWUsCiAgICAgICAgICAgIHZlcnNpb249aGVsbG9fd29ybGRfY29tcG9uZW50LnZlcnNpb24sCiAgICAgICAgKQoKICAgICAgICBAZHNsLnBpcGVsaW5lKAogICAgICAgICAgICBuYW1lPXJhbmRzdHIoInBpcGVsaW5lX25hbWUiKSwKICAgICAgICAgICAgZGVzY3JpcHRpb249IlRoZSBoZWxsbyB3b3JsZCBwaXBlbGluZSBqb2IiLAogICAgICAgICAgICB0YWdzPXsib3duZXIiOiAic2RrdGVhbSIsICJ0YWciOiAidGFndmFsdWUifSwKICAgICAgICAgICAgY29tcHV0ZT0iY3B1LWNsdXN0ZXIiLAogICAgICAgICkKICAgICAgICBkZWYgcGlwZWxpbmVfcmVtb3RlX2NvbXBvbmVudChqb2JfaW5fbnVtYmVyLCBqb2JfaW5fb3RoZXJfbnVtYmVyLCBqb2JfaW5fcGF0aCk6CiAgICAgICAgICAgIG5vZGUxID0gY29tcG9uZW50X2Z1bmMoY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5fcGF0aCkKICAgICAgICAgICAgIyB1bi1jb25maWd1cmVkIGRhdGEgYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkCiAgICAgICAgICAgIG5vZGUxLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRoID0gT3V0cHV0KGRhdGFzZXQ9RGF0YShuYW1lPSJtbGRlc2lnbmVyX2NvbXBvbmVudF9vdXRwdXQiKSkKCiAgICAgICAgICAgIG5vZGUyID0gY29tcG9uZW50X2Z1bmMoCiAgICAgICAgICAgICAgICBjb21wb25lbnRfaW5fbnVtYmVyPWpvYl9pbl9vdGhlcl9udW1iZXIsCiAgICAgICAgICAgICAgICBjb21wb25lbnRfaW5fcGF0aD1ub2RlMS5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aCwKICAgICAgICAgICAgKQogICAgICAgICAgICByZXR1cm4geyJqb2Jfb3V0X2RhdGEiOiBub2RlMi5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aH0KCiAgICAgICAgcGlwZWxpbmUgPSBwaXBlbGluZV9yZW1vdGVfY29tcG9uZW50KDEwLCAxNSwgam9iX2lucHV0KQogICAgICAgIGNsaWVudC5qb2JzLmNyZWF0ZV9vcl91cGRhdGUocGlwZWxpbmUsIGV4cGVyaW1lbnRfbmFtZT1leHBlcmltZW50X25hbWUpCgogICAgZGVmIHRlc3RfY29tcG9uZW50X2xvYWRfZnJvbV9yZW1vdGUoc2VsZiwgY2xpZW50OiBNTENsaWVudCwgaGVsbG9fd29ybGRfY29tcG9uZW50OiBDb21wb25lbnRFbnRpdHkpIC0\\u002BIE5vbmU6CiAgICAgICAgaW5wdXRfdHlwZXNfZnVuYyA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1zdHIoY29tcG9uZW50c19kaXIgLyAiaW5wdXRfdHlwZXNfY29tcG9uZW50LnltbCIpKQoKICAgICAgICAjIENvbnN0cnVjdCBwaXBlbGluZQogICAgICAgIEBkc2wucGlwZWxpbmUoCiAgICAgICAgICAgIGRlZmF1bHRfY29tcHV0ZT0iY3B1LWNsdXN0ZXIiLAogICAgICAgICAgICBkZXNjcmlwdGlvbj0iVGhpcyBpcyB0aGUgYmFzaWMgcGlwZWxpbmUgd2l0aCBzZXZlcmFsIGlucHV0IHR5cGVzIiwKICAgICAgICApCiAgICAgICAgZGVmIGlucHV0X3R5cGVzX3BpcGVsaW5lKAogICAgICAgICAgICBjb21wb25lbnRfaW5fc3RyaW5nPSJjb21wb25lbnRfaW5fc3RyaW5nIiwKICAgICAgICAgICAgY29tcG9uZW50X2luX3JhbmdlZF9pbnRlZ2VyPTEwLAogICAgICAgICAgICBjb21wb25lbnRfaW5fZW51bT0id29ybGQiLAogICAgICAgICAgICBjb21wb25lbnRfaW5fYm9vbGVhbj1UcnVlLAogICAgICAgICAgICBjb21wb25lbnRfaW5fcmFuZ2VkX251bWJlcj04LAogICAgICAgICk6CiAgICAgICAgICAgIGlucHV0X3R5cGVzX2Z1bmMoCiAgICAgICAgICAgICAgICBjb21wb25lbnRfaW5fc3RyaW5nPWNvbXBvbmVudF9pbl9zdHJpbmcsCiAgICAgICAgICAgICAgICBjb21wb25lbnRfaW5fcmFuZ2VkX2ludGVnZXI9Y29tcG9uZW50X2luX3JhbmdlZF9pbnRlZ2VyLAogICAgICAgICAgICAgICAgY29tcG9uZW50X2luX2VudW09Y29tcG9uZW50X2luX2VudW0sCiAgICAgICAgICAgICAgICBjb21wb25lbnRfaW5fYm9vbGVhbj1jb21wb25lbnRfaW5fYm9vbGVhbiwKICAgICAgICAgICAgICAgIGNvbXBvbmVudF9pbl9yYW5nZWRfbnVtYmVyPWNvbXBvbmVudF9pbl9yYW5nZWRfbnVtYmVyLAogICAgICAgICAgICApCgogICAgICAgIHBpcGVsaW5lID0gaW5wdXRfdHlwZXNfcGlwZWxpbmUoKSAgIyB1c2UgZGVmYXVsdCBwaXBlbGluZSBwYXJhbWV0ZXIKICAgICAgICBwaXBlbGluZV9qb2IgPSBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKHBpcGVsaW5lLCBleHBlcmltZW50X25hbWU9ImlucHV0X3R5cGVzX3BpcGVsaW5lIikKCiAgICAgICAgYXNzZXJ0IHBpcGVsaW5lX2pvYi5pbnB1dHMuY29tcG9uZW50X2luX3N0cmluZy5fZGF0YSA9PSAiY29tcG9uZW50X2luX3N0cmluZyIKICAgICAgICBhc3NlcnQgcGlwZWxpbmVfam9iLmlucHV0cy5jb21wb25lbnRfaW5fcmFuZ2VkX2ludGVnZXIuX2RhdGEgPT0gIjEwIgogICAgICAgIGFzc2VydCBwaXBlbGluZV9qb2IuaW5wdXRzLmNvbXBvbmVudF9pbl9lbnVtLl9kYXRhID09ICJ3b3JsZCIKICAgICAgICBhc3NlcnQgcGlwZWxpbmVfam9iLmlucHV0cy5jb21wb25lbnRfaW5fYm9vbGVhbi5fZGF0YSA9PSAiVHJ1ZSIKICAgICAgICBhc3NlcnQgcGlwZWxpbmVfam9iLmlucHV0cy5jb21wb25lbnRfaW5fcmFuZ2VkX251bWJlci5fZGF0YSA9PSAiOCIKCiAgICBkZWYgdGVzdF9jb21wb25lbnRfd2l0aF9kZWZhdWx0X29wdGlvbmFsX2lucHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\\\\\u002BIE5vbmU6CiAgICAgICAgeWFtbF9wYXRoOiBzdHIgPSAiLi90ZXN0cy90ZXN0X2NvbmZpZ3MvY29tcG9uZW50cy9oZWxsb3dvcmxkX2NvbXBvbmVudC55bWwiCiAgICAgICAgY29tcG9uZW50X25hbWUgPSByYW5kc3RyKCJjb21wb25lbnRfbmFtZSIpCiAgICAgICAgY29tcG9uZW50OiBDb21wb25lbnQgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9eWFtbF9wYXRoLCBwYXJhbXNfb3ZlcnJpZGU9W3sibmFtZSI6IGNvbXBvbmVudF9uYW1lfV0pCiAgICAgICAgY2xpZW50LmNvbXBvbmVudHMuY3JlYXRlX29yX3VwZGF0ZShjb21wb25lbnQpCgogICAgICAgIGRlZmF1bHRfY29tcG9uZW50X2Z1bmMgPSBjbGllbnQuY29tcG9uZW50cy5nZXQoY29tcG9uZW50X25hbWUpCgogICAgICAgIEBkc2wucGlwZWxpbmUoKQogICAgICAgIGRlZiBwaXBlbGluZV93aXRoX2RlZmF1bHRfY29tcG9uZW50KCk6CiAgICAgICAgICAgIG5vZGUxID0gZGVmYXVsdF9jb21wb25lbnRfZnVuYyhjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5wdXQpCiAgICAgICAgICAgIG5vZGUxLmNvbXB1dGUgPSAiY3B1LWNsdXN0ZXIiCgogICAgICAgICMgY29tcG9uZW50IGZyb20gY2xpZW50LmNvbXBvbmVudHMuZ2V0CiAgICAgICAgcGlwZWxpbmVfam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZV93aXRoX2RlZmF1bHRfY29tcG9uZW50KCkpCiAgICAgICAgY3JlYXRlZF9waXBlbGluZV9qb2I6IFBpcGVsaW5lSm9iID0gY2xpZW50LmpvYnMuZ2V0KHBpcGVsaW5lX2pvYi5uYW1lKQogICAgICAgIGFzc2VydCBjcmVhdGVkX3BpcGVsaW5lX2pvYi5qb2JzWyJub2RlMSJdLmNvbXBvbmVudCA9PSBmIntjb21wb25lbnRfbmFtZX1AZGVmYXVsdCIKCiAgICBkZWYgdGVzdF9waXBlbGluZV9ub2RlX2lkZW50aXR5X3dpdGhfY29tcG9uZW50KHNlbGYsIGNsaWVudDogTUxDbGllbnQpOgogICAgICAgIHBhdGggPSAiLi90ZXN0cy90ZXN0X2NvbmZpZ3MvY29tcG9uZW50cy9oZWxsb3dvcmxkX2NvbXBvbmVudC55bWwiCiAgICAgICAgY29tcG9uZW50X2Z1bmMgPSBsb2FkX2NvbXBvbmVudChwYXRoKQoKICAgICAgICBAZHNsLnBpcGVsaW5lCiAgICAgICAgZGVmIHBpcGVsaW5lX2Z1bmMoY29tcG9uZW50X2luX3BhdGgpOgogICAgICAgICAgICBub2RlMSA9IGNvbXBvbmVudF9mdW5jKGNvbXBvbmVudF9pbl9udW1iZXI9MSwgY29tcG9uZW50X2luX3BhdGg9Y29tcG9uZW50X2luX3BhdGgpCiAgICAgICAgICAgIG5vZGUxLmlkZW50aXR5ID0gQW1sVG9rZW5Db25maWd1cmF0aW9uKCkKCiAgICAgICAgICAgIG5vZGUyID0gY29tcG9uZW50X2Z1bmMoY29tcG9uZW50X2luX251bWJlcj0xLCBjb21wb25lbnRfaW5fcGF0aD1jb21wb25lbnRfaW5fcGF0aCkKICAgICAgICAgICAgbm9kZTIuaWRlbnRpdHkgPSBVc2VySWRlbnRpdHlDb25maWd1cmF0aW9uKCkKCiAgICAgICAgICAgIG5vZGUzID0gY29tcG9uZW50X2Z1bmMoY29tcG9uZW50X2luX251bWJlcj0xLCBjb21wb25lbnRfaW5fcGF0aD1jb21wb25lbnRfaW5fcGF0aCkKICAgICAgICAgICAgbm9kZTMuaWRlbnRpdHkgPSBNYW5hZ2VkSWRlbnRpdHlDb25maWd1cmF0aW9uKCkKCiAgICAgICAgcGlwZWxpbmUgPSBwaXBlbGluZV9mdW5jKGNvbXBvbmVudF9pbl9wYXRoPWpvYl9pbnB1dCkKICAgICAgICBwaXBlbGluZV9qb2IgPSBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKHBpcGVsaW5lLCBjb21wdXRlPSJjcHUtY2x1c3RlciIpCiAgICAgICAgb21pdF9maWVsZHMgPSBbImpvYnMuKi5jb21wb25lbnRJZCIsICJqb2JzLiouX3NvdXJjZSJdCiAgICAgICAgYWN0dWFsX2RpY3QgPSBvbWl0X3dpdGhfd2lsZGNhcmQocGlwZWxpbmVfam9iLl90b19yZXN0X29iamVjdCgpLmFzX2RpY3QoKVsicHJvcGVydGllcyJdLCAqb21pdF9maWVsZHMpCiAgICAgICAgYXNzZXJ0IGFjdHVhbF9kaWN0WyJqb2JzIl0gPT0gewogICAgICAgICAgICAibm9kZTEiOiB7CiAgICAgICAgICAgICAgICAiaWRlbnRpdHkiOiB7InR5cGUiOiAiYW1sX3Rva2VuIn0sCiAgICAgICAgICAgICAgICAiaW5wdXRzIjogewogICAgICAgICAgICAgICAgICAgICJjb21wb25lbnRfaW5fbnVtYmVyIjogeyJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwgInZhbHVlIjogIjEifSwKICAgICAgICAgICAgICAgICAgICAiY29tcG9uZW50X2luX3BhdGgiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAiJHt7cGFyZW50LmlucHV0cy5jb21wb25lbnRfaW5fcGF0aH19In0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgIm5hbWUiOiAibm9kZTEiLAogICAgICAgICAgICAgICAgInR5cGUiOiAiY29tbWFuZCIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJub2RlMiI6IHsKICAgICAgICAgICAgICAgICJpZGVudGl0eSI6IHsidHlwZSI6ICJ1c2VyX2lkZW50aXR5In0sCiAgICAgICAgICAgICAgICAiaW5wdXRzIjogewogICAgICAgICAgICAgICAgICAgICJjb21wb25lbnRfaW5fbnVtYmVyIjogeyJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwgInZhbHVlIjogIjEifSwKICAgICAgICAgICAgICAgICAgICAiY29tcG9uZW50X2luX3BhdGgiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAiJHt7cGFyZW50LmlucHV0cy5jb21wb25lbnRfaW5fcGF0aH19In0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgIm5hbWUiOiAibm9kZTIiLAogICAgICAgICAgICAgICAgInR5cGUiOiAiY29tbWFuZCIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJub2RlMyI6IHsKICAgICAgICAgICAgICAgICJpZGVudGl0eSI6IHsidHlwZSI6ICJtYW5hZ2VkX2lkZW50aXR5In0sCiAgICAgICAgICAgICAgICAiaW5wdXRzIjogewogICAgICAgICAgICAgICAgICAgICJjb21wb25lbnRfaW5fbnVtYmVyIjogeyJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwgInZhbHVlIjogIjEifSwKICAgICAgICAgICAgICAgICAgICAiY29tcG9uZW50X2luX3BhdGgiOiB7ImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLCAidmFsdWUiOiAiJHt7cGFyZW50LmlucHV0cy5jb21wb25lbnRfaW5fcGF0aH19In0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgIm5hbWUiOiAibm9kZTMiLAogICAgICAgICAgICAgICAgInR5cGUiOiAiY29tbWFuZCIsCiAgICAgICAgICAgIH0sCiAgICAgICAgfQoKICAgIGRlZiB0ZXN0X2RlZmF1bHRfcGlwZWxpbmVfam9iX3NlcnZpY2VzKHNlbGYsIGNsaWVudDogTUxDbGllbnQsIHJhbmRzdHI6IENhbGxhYmxlW1tzdHJdLCBzdHJdKSAtPiBOb25lOgogICAgICAgIGNvbXBvbmVudF95YW1sID0gY29tcG9uZW50c19kaXIgLyAiaGVsbG93b3JsZF9jb21wb25lbnQueW1sIgogICAgICAgIGNvbXBvbmVudF9mdW5jMSA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1jb21wb25lbnRfeWFtbCwgcGFyYW1zX292ZXJyaWRlPVt7Im5hbWUiOiByYW5kc3RyKCJjb21wb25lbnRfbmFtZSIpfV0pCiAgICAgICAgY29tcG9uZW50X2Z1bmMyID0gbG9hZF9jb21wb25lbnQoc291cmNlPWNvbXBvbmVudF95YW1sLCBwYXJhbXNfb3ZlcnJpZGU9W3sibmFtZSI6IHJhbmRzdHIoImNvbXBvbmVudF9uYW1lIil9XSkKCiAgICAgICAgQGRzbC5waXBlbGluZSgKICAgICAgICAgICAgbmFtZT1yYW5kc3RyKCJwaXBlbGluZV9uYW1lIiksCiAgICAgICAgICAgIGRlc2NyaXB0aW9uPSJUaGUgaGVsbG8gd29ybGQgcGlwZWxpbmUgam9iIiwKICAgICAgICAgICAgdGFncz17Im93bmVyIjogInNka3RlYW0iLCAidGFnIjogInRhZ3ZhbHVlIn0sCiAgICAgICAgICAgIGNvbXB1dGU9ImNwdS1jbHVzdGVyIiwKICAgICAgICAgICAgZXhwZXJpbWVudF9uYW1lPWV4cGVyaW1lbnRfbmFtZSwKICAgICAgICAgICAgY29udGludWVfb25fc3RlcF9mYWlsdXJlPVRydWUsCiAgICAgICAgKQogICAgICAgIGRlZiBwaXBlbGluZShqb2JfaW5fbnVtYmVyLCBqb2JfaW5fb3RoZXJfbnVtYmVyLCBqb2JfaW5fcGF0aCk6CiAgICAgICAgICAgIGNvbXBvbmVudF9mdW5jMShjb21wb25lbnRfaW5fbnVtYmVyPWpvYl9pbl9udW1iZXIsIGNvbXBvbmVudF9pbl9wYXRoPWpvYl9pbl9wYXRoKQogICAgICAgICAgICBjb21wb25lbnRfZnVuYzIoY29tcG9uZW50X2luX251bWJlcj1qb2JfaW5fb3RoZXJfbnVtYmVyLCBjb21wb25lbnRfaW5fcGF0aD1qb2JfaW5fcGF0aCkKCiAgICAgICAgcGlwZWxpbmUgPSBwaXBlbGluZSgxMCwgMTUsIGpvYl9pbnB1dCkKICAgICAgICBqb2IgPSBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKHBpcGVsaW5lKQogICAgICAgICMgY2hlY2sgcmVxdWlyZWQgZmllbGRzIGluIGpvYiBkaWN0CiAgICAgICAgZGVmYXVsdF9zZXJ2aWNlcyA9IGpvYi5fdG9fZGljdCgpWyJzZXJ2aWNlcyJdCiAgICAgICAgYXNzZXJ0ICJTdHVkaW8iIGluIGRlZmF1bHRfc2VydmljZXMKICAgICAgICBhc3NlcnQgIlRyYWNraW5nIiBpbiBkZWZhdWx0X3NlcnZpY2VzCiAgICAgICAgYXNzZXJ0IGRlZmF1bHRfc2VydmljZXNbIlN0dWRpbyJdWyJlbmRwb2ludCJdLnN0YXJ0c3dpdGgoImh0dHBzOi8vbWwuYXp1cmUuY29tL3J1bnMvIikKICAgICAgICBhc3NlcnQgZGVmYXVsdF9zZXJ2aWNlc1siU3R1ZGlvIl1bInR5cGUiXSA9PSAiU3R1ZGlvIgogICAgICAgIGFzc2VydCBkZWZhdWx0X3NlcnZpY2VzWyJUcmFja2luZyJdWyJlbmRwb2ludCJdLnN0YXJ0c3dpdGgoImF6dXJlbWw6Ly8iKQogICAgICAgIGFzc2VydCBkZWZhdWx0X3NlcnZpY2VzWyJUcmFja2luZyJdWyJ0eXBlIl0gPT0gIlRyYWNraW5nIgoKICAgIGRlZiB0ZXN0X2dyb3VwX291dHB1dHNfZGVzY3JpcHRpb25fb3ZlcndyaXRlKHNlbGYsIGNsaWVudCk6CiAgICAgICAgIyB0ZXN0IGdyb3VwIG91dHB1dHMgZGVzY3JpcHRpb24gb3ZlcndyaXRlCiAgICAgICAgQGdyb3VwCiAgICAgICAgY2xhc3MgT3V0cHV0czoKICAgICAgICAgICAgb3V0cHV0MTogT3V0cHV0KHR5cGU9InVyaV9mb2xkZXIiLCBkZXNjcmlwdGlvbj0ibmV3IGRlc2NyaXB0aW9uIikKCiAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X3lhbWwgPSAiLi90ZXN0cy90ZXN0X2NvbmZpZ3MvY29tcG9uZW50cy9oZWxsb3dvcmxkX2NvbXBvbmVudC55bWwiCiAgICAgICAgaGVsbG9fd29ybGRfY29tcG9uZW50X2Z1bmMgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9aGVsbG9fd29ybGRfY29tcG9uZW50X3lhbWwpCgogICAgICAgIEBkc2wucGlwZWxpbmUoZGVmYXVsdF9jb21wdXRlX3RhcmdldD0iY3B1LWNsdXN0ZXIiKQogICAgICAgIGRlZiBteV9waXBlbGluZSgpIC0\\u002BIE5vbmU6CiAgICAgICAgY29tcG9uZW50X3lhbWwgPSBjb21wb25lbnRzX2RpciAvICJoZWxsb3dvcmxkX2NvbXBvbmVudC55bWwiCiAgICAgICAgY29tcG9uZW50X2Z1bmMxID0gbG9hZF9jb21wb25lbnQoc291cmNlPWNvbXBvbmVudF95YW1sKQoKICAgICAgICAjIGNhc2UgMTogb25seSBub2RlIGxldmVsIGhhcyBzZXR0aW5nCiAgICAgICAgQGRzbC5waXBlbGluZSgpCiAgICAgICAgZGVmIHBpcGVsaW5lKCk6CiAgICAgICAgICAgIG5vZGUxID0gY29tcG9uZW50X2Z1bmMxKGNvbXBvbmVudF9pbl9udW1iZXI9MSwgY29tcG9uZW50X2luX3BhdGg9am9iX2lucHV0KQogICAgICAgICAgICBub2RlMS5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aC5wYXRoID0gImF6dXJlbWw6Ly9kYXRhc3RvcmVzL3dvcmtzcGFjZWJsb2JzdG9yZS9wYXRocy9vdXRwdXRzLzEiCiAgICAgICAgICAgIHJldHVybiBub2RlMS5vdXRwdXRzCgogICAgICAgIHBpcGVsaW5lX2pvYiA9IHBpcGVsaW5lKCkKICAgICAgICBwaXBlbGluZV9qb2Iuc2V0dGluZ3MuZGVmYXVsdF9jb21wdXRlID0gImNwdS1jbHVzdGVyIgogICAgICAgIHBpcGVsaW5lX2pvYiA9IGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lX2pvYiwgY2xpZW50KQogICAgICAgIGpvYl9kaWN0ID0gcGlwZWxpbmVfam9iLl90b19kaWN0KCkKICAgICAgICBleHBlY3RlZF9ub2RlX291dHB1dF9kaWN0ID0gewogICAgICAgICAgICAiY29tcG9uZW50X291dF9wYXRoIjogIiR7e3BhcmVudC5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aH19IiwKICAgICAgICB9CiAgICAgICAgZXhwZWN0ZWRfcGlwZWxpbmVfb3V0cHV0X2RpY3QgPSB7CiAgICAgICAgICAgICJjb21wb25lbnRfb3V0X3BhdGgiOiB7CiAgICAgICAgICAgICAgICAjIGRlZmF1bHQgbW9kZSBhZGRlZCBieSBtdCwgZGVmYXVsdCB0eXBlIGFkZGVkIGJ5IFNESwogICAgICAgICAgICAgICAgIm1vZGUiOiAicndfbW91bnQiLAogICAgICAgICAgICAgICAgInR5cGUiOiAidXJpX2ZvbGRlciIsCiAgICAgICAgICAgICAgICAjIG5vZGUgbGV2ZWwgY29uZmlnIHdpbGwgYmUgY29waWVkIHRvIHBpcGVsaW5lIGxldmVsCiAgICAgICAgICAgICAgICAicGF0aCI6ICJhenVyZW1sOi8vZGF0YXN0b3Jlcy93b3Jrc3BhY2VibG9ic3RvcmUvcGF0aHMvb3V0cHV0cy8xIiwKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBhc3NlcnQgam9iX2RpY3RbImpvYnMiXVsibm9kZTEiXVsib3V0cHV0cyJdID09IGV4cGVjdGVkX25vZGVfb3V0cHV0X2RpY3QKICAgICAgICBhc3NlcnQgam9iX2RpY3RbIm91dHB1dHMiXSA9PSBleHBlY3RlZF9waXBlbGluZV9vdXRwdXRfZGljdAoKICAgIGRlZiB0ZXN0X3BpcGVsaW5lX2NvbXBvbmVudF9vdXRwdXRfc2V0dGluZyhzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGNvbXBvbmVudF95YW1sID0gY29tcG9uZW50c19kaXIgLyAiaGVsbG93b3JsZF9jb21wb25lbnQueW1sIgogICAgICAgIGNvbXBvbmVudF9mdW5jMSA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1jb21wb25lbnRfeWFtbCkKCiAgICAgICAgQGRzbC5waXBlbGluZSgpCiAgICAgICAgZGVmIGlubmVyX3BpcGVsaW5lKCk6CiAgICAgICAgICAgIG5vZGUxID0gY29tcG9uZW50X2Z1bmMxKGNvbXBvbmVudF9pbl9udW1iZXI9MSwgY29tcG9uZW50X2luX3BhdGg9am9iX2lucHV0KQogICAgICAgICAgICBub2RlMS5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aC5wYXRoID0gImF6dXJlbWw6Ly9kYXRhc3RvcmVzL3dvcmtzcGFjZWJsb2JzdG9yZS9wYXRocy9vdXRwdXRzLzEiCiAgICAgICAgICAgICMgbm9kZTEncyBvdXRwdXQgc2V0dGluZyB3aWxsIGJlIGNvcGllZCB0byBwaXBlbGluZSdzIHNldHRpbmcKICAgICAgICAgICAgcmV0dXJuIG5vZGUxLm91dHB1dHMKCiAgICAgICAgQGRzbC5waXBlbGluZSgpCiAgICAgICAgZGVmIG91dGVyX3BpcGVsaW5lKCk6CiAgICAgICAgICAgICMgaW5uZXJfcGlwZWxpbmUncyBvdXRwdXQgc2V0dGluZyB3aWxsIGJlIGNvcGllZCB0byBub2RlMSdzIHNldHRpbmcKICAgICAgICAgICAgbm9kZTEgPSBpbm5lcl9waXBlbGluZSgpCiAgICAgICAgICAgICMgbm9kZTEncyBvdXRwdXQgc2V0dGluZyB3aWxsIGJlIGNvcGllZCB0byBwaXBlbGluZSdzIHNldHRpbmcKICAgICAgICAgICAgcmV0dXJuIG5vZGUxLm91dHB1dHMKCiAgICAgICAgcGlwZWxpbmVfam9iID0gb3V0ZXJfcGlwZWxpbmUoKQogICAgICAgIHBpcGVsaW5lX2pvYl9kaWN0ID0gcGlwZWxpbmVfam9iLl90b19kaWN0KCkKICAgICAgICBhc3NlcnQgcGlwZWxpbmVfam9iX2RpY3RbIm91dHB1dHMiXSA9PSB7CiAgICAgICAgICAgICJjb21wb25lbnRfb3V0X3BhdGgiOiB7CiAgICAgICAgICAgICAgICAicGF0aCI6ICJhenVyZW1sOi8vZGF0YXN0b3Jlcy93b3Jrc3BhY2VibG9ic3RvcmUvcGF0aHMvb3V0cHV0cy8xIiwKICAgICAgICAgICAgICAgICJ0eXBlIjogInVyaV9mb2xkZXIiLAogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHBpcGVsaW5lX2NvbXBvbmVudCA9IHBpcGVsaW5lX2pvYi5qb2JzWyJub2RlMSJdLmNvbXBvbmVudAogICAgICAgIHBpcGVsaW5lX2NvbXBvbmVudF9kaWN0ID0gcGlwZWxpbmVfY29tcG9uZW50Ll90b19kaWN0KCkKICAgICAgICBhc3NlcnQgcGlwZWxpbmVfY29tcG9uZW50X2RpY3RbIm91dHB1dHMiXSA9PSB7ImNvbXBvbmVudF9vdXRfcGF0aCI6IHsidHlwZSI6ICJ1cmlfZm9sZGVyIn19CiAgICAgICAgYXNzZXJ0IHBpcGVsaW5lX2NvbXBvbmVudF9kaWN0WyJqb2JzIl1bIm5vZGUxIl1bIm91dHB1dHMiXSA9PSB7CiAgICAgICAgICAgICJjb21wb25lbnRfb3V0X3BhdGgiOiAiJHt7cGFyZW50Lm91dHB1dHMuY29tcG9uZW50X291dF9wYXRofX0iCiAgICAgICAgfQoKICAgICAgICBwaXBlbGluZV9qb2Iuc2V0dGluZ3MuZGVmYXVsdF9jb21wdXRlID0gImNwdS1jbHVzdGVyIgogICAgICAgIHBpcGVsaW5lX2pvYiA9IGNsaWVudC5qb2JzLmNyZWF0ZV9vcl91cGRhdGUocGlwZWxpbmVfam9iKQogICAgICAgIGNsaWVudC5qb2JzLmJlZ2luX2NhbmNlbChwaXBlbGluZV9qb2IubmFtZSkKICAgICAgICBqb2JfZGljdCA9IHBpcGVsaW5lX2pvYi5fdG9fZGljdCgpCiAgICAgICAgIyBvdXRlciBwaXBlbGluZSdzIG5vZGUxIHNob3VsZCBoYXZlIHRoZSBvdXRwdXQgc2V0dGluZwogICAgICAgIGFzc2VydCBqb2JfZGljdFsiam9icyJdWyJub2RlMSJdWyJvdXRwdXRzIl0gPT0geyJjb21wb25lbnRfb3V0X3BhdGgiOiAiJHt7cGFyZW50Lm91dHB1dHMuY29tcG9uZW50X291dF9wYXRofX0ifQogICAgICAgIGFzc2VydCBqb2JfZGljdFsib3V0cHV0cyJdID09IHsKICAgICAgICAgICAgImNvbXBvbmVudF9vdXRfcGF0aCI6IHsKICAgICAgICAgICAgICAgICJtb2RlIjogInJ3X21vdW50IiwKICAgICAgICAgICAgICAgICJ0eXBlIjogInVyaV9mb2xkZXIiLAogICAgICAgICAgICAgICAgIyBub2RlIGxldmVsIGNvbmZpZyB3aWxsIGJlIGNvcGllZCB0byBwaXBlbGluZSBsZXZlbAogICAgICAgICAgICAgICAgInBhdGgiOiAiYXp1cmVtbDovL2RhdGFzdG9yZXMvd29ya3NwYWNlYmxvYnN0b3JlL3BhdGhzL291dHB1dHMvMSIsCiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgQHB5dGVzdC5tYXJrLmRpc2FibGVfbW9ja19jb2RlX2hhc2gKICAgIGRlZiB0ZXN0X3JlZ2lzdGVyX291dHB1dF9zZGtfc3VjY2VlZChzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KToKICAgICAgICBjb21wb25lbnQgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9Ii4vdGVzdHMvdGVzdF9jb25maWdzL2NvbXBvbmVudHMvaGVsbG93b3JsZF9jb21wb25lbnQueW1sIikKICAgICAgICBjb21wb25lbnRfaW5wdXQgPSBJbnB1dCh0eXBlPSJ1cmlfZmlsZSIsIHBhdGg9Imh0dHBzOi8vZHByZXBkYXRhLmJsb2IuY29yZS53aW5kb3dzLm5ldC9kZW1vL1RpdGFuaWMuY3N2IikKCiAgICAgICAgQGRzbC5waXBlbGluZSgpCiAgICAgICAgZGVmIHN1Yl9waXBlbGluZSgpOgogICAgICAgICAgICBub2RlID0gY29tcG9uZW50KGNvbXBvbmVudF9pbl9wYXRoPWNvbXBvbmVudF9pbnB1dCkKICAgICAgICAgICAgbm9kZS5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aC5uYW1lID0gInN1Yl9waXBlbGluZV9vdXRwdXQiCiAgICAgICAgICAgIG5vZGUub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgudmVyc2lvbiA9ICJ2MSIKICAgICAgICAgICAgcmV0dXJuIHsic3ViX3BpcGVpbmVfYV9vdXRwdXQiOiBub2RlLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRofQoKICAgICAgICBAZHNsLnBpcGVsaW5lKCkKICAgICAgICBkZWYgcmVnaXN0ZXJfYm90aF9vdXRwdXQoKToKICAgICAgICAgICAgIyByZWdpc3RlciBOb2RlT3V0cHV0IHdoaWNoIGlzIGJpbmRpbmcgdG8gUGlwZWxpbmVPdXRwdXQKICAgICAgICAgICAgbm9kZSA9IGNvbXBvbmVudChjb21wb25lbnRfaW5fcGF0aD1jb21wb25lbnRfaW5wdXQpCiAgICAgICAgICAgIG5vZGUub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgubmFtZSA9ICJuMV9vdXRwdXQiCiAgICAgICAgICAgIG5vZGUub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgudmVyc2lvbiA9ICJ2MSIKCiAgICAgICAgICAgICMgcmVnaXN0ZXIgTm9kZU91dHB1dCB3aGljaCBpc24ndCBiaW5kaW5nIHRvIFBpcGVsaW5lT3V0cHV0CiAgICAgICAgICAgIG5vZGVfMiA9IGNvbXBvbmVudChjb21wb25lbnRfaW5fcGF0aD1jb21wb25lbnRfaW5wdXQpCiAgICAgICAgICAgIG5vZGVfMi5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aC5uYW1lID0gIm4yX291dHB1dCIKICAgICAgICAgICAgbm9kZV8yLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRoLnZlcnNpb24gPSAidjEiCgogICAgICAgICAgICAjIHJlZ2lzdGVyIE5vZGVPdXRwdXQgd2l0aG91dCB2ZXJzaW9uLCBpbiB0aGlzIGNhc2UgdGhlIHJ1biByZXN1bHQgY2FuIGJlIHJldXNlZAogICAgICAgICAgICBub2RlXzMgPSBjb21wb25lbnQoY29tcG9uZW50X2luX3BhdGg9Y29tcG9uZW50X2lucHV0KQogICAgICAgICAgICBub2RlXzMub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgubmFtZSA9ICJuM19vdXRwdXQiCgogICAgICAgICAgICAjIHJlZ2lzdGVyIE5vZGVPdXRwdXQgb2Ygc3ViZ3JhcGgKICAgICAgICAgICAgc3ViX25vZGUgPSBzdWJfcGlwZWxpbmUoKQogICAgICAgICAgICBzdWJfbm9kZS5vdXRwdXRzLnN1Yl9waXBlaW5lX2Ffb3V0cHV0Lm5hbWUgPSAic3ViX3BpcGVsaW5lIgogICAgICAgICAgICBzdWJfbm9kZS5vdXRwdXRzLnN1Yl9waXBlaW5lX2Ffb3V0cHV0LnZlcnNpb24gPSAidjEiCgogICAgICAgICAgICByZXR1cm4geyJwaXBlaW5lX2Ffb3V0cHV0Ijogbm9kZS5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aH0KCiAgICAgICAgcGlwZWxpbmUgPSByZWdpc3Rlcl9ib3RoX291dHB1dCgpCiAgICAgICAgcGlwZWxpbmUub3V0cHV0cy5waXBlaW5lX2Ffb3V0cHV0Lm5hbWUgPSAicDFfb3V0cHV0IgogICAgICAgIHBpcGVsaW5lLm91dHB1dHMucGlwZWluZV9hX291dHB1dC52ZXJzaW9uID0gInYxIgogICAgICAgIHBpcGVsaW5lLnNldHRpbmdzLmRlZmF1bHRfY29tcHV0ZSA9ICJjcHUtY2x1c3RlciIKICAgICAgICBwaXBlbGluZV9qb2IgPSBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgICAgICBjaGVja19uYW1lX2FuZF92ZXJzaW9uKHBpcGVsaW5lX2pvYi5vdXRwdXRzLnBpcGVpbmVfYV9vdXRwdXQsICJwMV9vdXRwdXQiLCAidjEiKQogICAgICAgIGNoZWNrX25hbWVfYW5kX3ZlcnNpb24ocGlwZWxpbmVfam9iLmpvYnNbIm5vZGVfMiJdLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRoLCAibjJfb3V0cHV0IiwgInYxIikKICAgICAgICBhc3NlcnQgcGlwZWxpbmVfam9iLmpvYnNbIm5vZGVfMyJdLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRoLm5hbWUgPT0gIm4zX291dHB1dCIKICAgICAgICBjaGVja19uYW1lX2FuZF92ZXJzaW9uKHBpcGVsaW5lX2pvYi5qb2JzWyJzdWJfbm9kZSJdLm91dHB1dHMuc3ViX3BpcGVpbmVfYV9vdXRwdXQsICJzdWJfcGlwZWxpbmUiLCAidjEiKQoKICAgIEBweXRlc3QubWFyay5za2lwKHJlYXNvbj0iS2V5RXJyb3I6ICdub2RlXzInIikKICAgIEBweXRlc3QubWFyay5kaXNhYmxlX21vY2tfY29kZV9oYXNoCiAgICBkZWYgdGVzdF9yZWdpc3Rlcl9vdXRwdXRfZm9yX3BpcGVsaW5lX2NvbXBvbmVudChzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KToKICAgICAgICBjb21wb25lbnQgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9Ii4vdGVzdHMvdGVzdF9jb25maWdzL2NvbXBvbmVudHMvaGVsbG93b3JsZF9jb21wb25lbnQueW1sIikKICAgICAgICBjb21wb25lbnRfaW5wdXQgPSBJbnB1dCh0eXBlPSJ1cmlfZmlsZSIsIHBhdGg9Imh0dHBzOi8vZHByZXBkYXRhLmJsb2IuY29yZS53aW5kb3dzLm5ldC9kZW1vL1RpdGFuaWMuY3N2IikKCiAgICAgICAgQGRzbC5waXBlbGluZSgpCiAgICAgICAgZGVmIHN1Yl9waXBlbGluZSgpOgogICAgICAgICAgICBub2RlXzEgPSBjb21wb25lbnQoY29tcG9uZW50X2luX3BhdGg9Y29tcG9uZW50X2lucHV0KSAgIyB0ZXN0IHVzZSBPdXRwdXQgdG8gaW5pdGlhbGl6ZSBzdWJncmFwaC5qb2JzLm91dHB1dAogICAgICAgICAgICBub2RlXzEub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGggPSBPdXRwdXQobmFtZT0ic3ViX3BpcGVsaW5lXzFfb3V0cHV0IiwgdmVyc2lvbj0idjEiKQoKICAgICAgICAgICAgbm9kZV8yID0gY29tcG9uZW50KGNvbXBvbmVudF9pbl9wYXRoPWNvbXBvbmVudF9pbnB1dCkgICMgdGVzdCB3ZSBjYW4gcGFzcyBOb2RlT3V0cHV0IGluIFBpcGVsaW5lQ29tcG9uZW50CiAgICAgICAgICAgIG5vZGVfMi5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aC5uYW1lID0gInN1Yl9waXBlbGluZV8yX291dHB1dCIKICAgICAgICAgICAgbm9kZV8yLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRoLnZlcnNpb24gPSAidjIiCgogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgInN1Yl9ub2RlXzEiOiBub2RlXzEub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgsCiAgICAgICAgICAgIH0KCiAgICAgICAgQGRzbC5waXBlbGluZSgpCiAgICAgICAgZGVmIHJlZ2lzdGVyX2JvdGhfb3V0cHV0KCk6CiAgICAgICAgICAgIHN1YmdyYXBoID0gc3ViX3BpcGVsaW5lKCkKCiAgICAgICAgcGlwZWxpbmUgPSByZWdpc3Rlcl9ib3RoX291dHB1dCgpCiAgICAgICAgcGlwZWxpbmUuc2V0dGluZ3MuZGVmYXVsdF9jb21wdXRlID0gImNwdS1jbHVzdGVyIgogICAgICAgIHBpcGVsaW5lX2pvYiA9IGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpCgogICAgICAgIGNoZWNrX25hbWVfYW5kX3ZlcnNpb24ocGlwZWxpbmVfam9iLmpvYnNbInN1YmdyYXBoIl0ub3V0cHV0c1sic3ViX25vZGVfMSJdLCAic3ViX3BpcGVsaW5lXzFfb3V0cHV0IiwgInYxIikKCiAgICAgICAgc3ViZ3JhcGhfaWQgPSBwaXBlbGluZV9qb2Iuam9ic1sic3ViZ3JhcGgiXS5jb21wb25lbnQKICAgICAgICBzdWJncmFwaF9pZCA9IHN1YmdyYXBoX2lkLnNwbGl0KCI6IikKICAgICAgICBzdWJncmFwaCA9IGNsaWVudC5jb21wb25lbnRzLmdldChuYW1lPXN1YmdyYXBoX2lkWzBdLCB2ZXJzaW9uPXN1YmdyYXBoX2lkWzFdKQogICAgICAgICMgVE9ETzogZW5hYmxlIHRoaXMgY2hlY2sgaW4gcGxheWJhY2sgbW9kZSBhZnRlciBwaXBlbGluZV9jb21wb25lbnQuam9icyBpcyBvcGVuZWQgaW4gYWxsIHN1YnNjcmlwdGlvbnMKICAgICAgICBpZiBpc19saXZlKCk6CiAgICAgICAgICAgIGNoZWNrX25hbWVfYW5kX3ZlcnNpb24oc3ViZ3JhcGguam9ic1sibm9kZV8yIl0ub3V0cHV0c1siY29tcG9uZW50X291dF9wYXRoIl0sICJzdWJfcGlwZWxpbmVfMl9vdXRwdXQiLCAidjIiKQoKICAgIEBweXRlc3QubWFyay5kaXNhYmxlX21vY2tfY29kZV9oYXNoCiAgICAjIHdpdGhvdXQgdGhpcyBtYXJrLCB0aGUgY29kZSB3b3VsZCBiZSBwYXNzZWQgd2l0aCBkaWZmZXJlbnQgaWQgZXZlbiB3aGVuIHdlIHVwbG9hZCB0aGUgc2FtZSBjb21wb25lbnQsCiAgICAjIGFkZCB0aGlzIG1hcmsgdG8gcmV1c2Ugbm9kZSBhbmQgZnVydGhlciByZXVzZSBwaXBlbGluZQogICAgZGVmIHRlc3RfcmVnaXN0ZXJfd2l0aF9vdXRwdXRfZm9ybWF0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpOgogICAgICAgIGNvbXBvbmVudCA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT0iLi90ZXN0cy90ZXN0X2NvbmZpZ3MvY29tcG9uZW50cy9oZWxsb3dvcmxkX2NvbXBvbmVudC55bWwiKQogICAgICAgIGNvbXBvbmVudF9pbnB1dCA9IElucHV0KHR5cGU9InVyaV9maWxlIiwgcGF0aD0iaHR0cHM6Ly9kcHJlcGRhdGEuYmxvYi5jb3JlLndpbmRvd3MubmV0L2RlbW8vVGl0YW5pYy5jc3YiKQoKICAgICAgICBAZHNsLnBpcGVsaW5lKCkKICAgICAgICBkZWYgc3ViX3BpcGVsaW5lKCk6CiAgICAgICAgICAgIG5vZGUgPSBjb21wb25lbnQoY29tcG9uZW50X2luX3BhdGg9Y29tcG9uZW50X2lucHV0KQogICAgICAgICAgICBub2RlLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRoID0gT3V0cHV0KG5hbWU9InN1Yl9waXBlbGluZV9vX291dHB1dCIsIHZlcnNpb249InYxIikKICAgICAgICAgICAgcmV0dXJuIHsic3ViX3BpcGVpbmVfYV9vdXRwdXQiOiBub2RlLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRofQoKICAgICAgICBAZHNsLnBpcGVsaW5lKCkKICAgICAgICBkZWYgcmVnaXN0ZXJfYm90aF9vdXRwdXQoKToKICAgICAgICAgICAgIyByZWdpc3RlciBOb2RlT3V0cHV0IHdoaWNoIGlzIGJpbmRpbmcgdG8gUGlwZWxpbmVPdXRwdXQKICAgICAgICAgICAgbm9kZSA9IGNvbXBvbmVudChjb21wb25lbnRfaW5fcGF0aD1jb21wb25lbnRfaW5wdXQpICAjIGJpbmRpbmcgYW5kIHJlLWRlZmluZSBuYW1lIGFuZCB2ZXJzaW9uCiAgICAgICAgICAgIG5vZGUub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGggPSBPdXRwdXQobmFtZT0ibjFfb19vdXRwdXQiLCB2ZXJzaW9uPSIxIikKCiAgICAgICAgICAgIG5vZGVfMiA9IGNvbXBvbmVudChjb21wb25lbnRfaW5fcGF0aD1jb21wb25lbnRfaW5wdXQpICAjIGJpbmRpbmcKICAgICAgICAgICAgbm9kZV8yLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRoID0gT3V0cHV0KG5hbWU9Im4yX29fb3V0cHV0IiwgdmVyc2lvbj0iMiIpCgogICAgICAgICAgICBub2RlXzMgPSBjb21wb25lbnQoY29tcG9uZW50X2luX3BhdGg9Y29tcG9uZW50X2lucHV0KSAgIyBpc24ndCBiaW5kaW5nCiAgICAgICAgICAgIG5vZGVfMy5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aCA9IE91dHB1dChuYW1lPSJuM19vX291dHB1dCIsIHZlcnNpb249IjQiKQoKICAgICAgICAgICAgc3ViX25vZGUgPSBzdWJfcGlwZWxpbmUoKSAgIyB0ZXN0IHNldCBPdXRwdXQgZm9yIFBpcGVsaW5lQ29tcG9uZW50CiAgICAgICAgICAgIHN1Yl9ub2RlLm91dHB1dHMuc3ViX3BpcGVpbmVfYV9vdXRwdXQgPSBPdXRwdXQobmFtZT0ic3ViZ3JhcGhfb19vdXRwdXQiLCB2ZXJzaW9uPSIxIikKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICJwaXBlaW5lX2Ffb3V0cHV0Ijogbm9kZS5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aCwKICAgICAgICAgICAgICAgICJwaXBlaW5lX2Jfb3V0cHV0Ijogbm9kZV8yLm91dHB1dHMuY29tcG9uZW50X291dF9wYXRoLAogICAgICAgICAgICB9CgogICAgICAgIHBpcGVsaW5lID0gcmVnaXN0ZXJfYm90aF9vdXRwdXQoKQogICAgICAgIHBpcGVsaW5lLnNldHRpbmdzLmRlZmF1bHRfY29tcHV0ZSA9ICJjcHUtY2x1c3RlciIKICAgICAgICBwaXBlbGluZS5vdXRwdXRzLnBpcGVpbmVfYV9vdXRwdXQubmFtZSA9ICJucF9vdXRwdXQiCiAgICAgICAgcGlwZWxpbmUub3V0cHV0cy5waXBlaW5lX2Ffb3V0cHV0LnZlcnNpb24gPSAiMSIKICAgICAgICBwaXBlbGluZV9qb2IgPSBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgICAgICBjaGVja19uYW1lX2FuZF92ZXJzaW9uKHBpcGVsaW5lX2pvYi5vdXRwdXRzLnBpcGVpbmVfYV9vdXRwdXQsICJucF9vdXRwdXQiLCAiMSIpCiAgICAgICAgY2hlY2tfbmFtZV9hbmRfdmVyc2lvbihwaXBlbGluZV9qb2Iub3V0cHV0cy5waXBlaW5lX2Jfb3V0cHV0LCAibjJfb19vdXRwdXQiLCAiMiIpCiAgICAgICAgY2hlY2tfbmFtZV9hbmRfdmVyc2lvbihwaXBlbGluZV9qb2Iuam9ic1sibm9kZV8zIl0ub3V0cHV0c1siY29tcG9uZW50X291dF9wYXRoIl0sICJuM19vX291dHB1dCIsICI0IikKICAgICAgICBjaGVja19uYW1lX2FuZF92ZXJzaW9uKHBpcGVsaW5lX2pvYi5qb2JzWyJzdWJfbm9kZSJdLm91dHB1dHNbInN1Yl9waXBlaW5lX2Ffb3V0cHV0Il0sICJzdWJncmFwaF9vX291dHB1dCIsICIxIikKCiAgICBkZWYgdGVzdF9waXBlbGluZV9pbnB1dF9iaW5kaW5nX2xpbWl0c190aW1lb3V0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpOgogICAgICAgIGNvbXBvbmVudF95YW1sID0gciIuL3Rlc3RzL3Rlc3RfY29uZmlncy9jb21wb25lbnRzL2hlbGxvd29ybGRfY29tcG9uZW50X25vX3BhdGhzLnltbCIKICAgICAgICBjb21wb25lbnRfZnVuYyA9IGxvYWRfY29tcG9uZW50KHNvdXJjZT1jb21wb25lbnRfeWFtbCkKCiAgICAgICAgQGRzbC5waXBlbGluZQogICAgICAgIGRlZiBteV9waXBlbGluZSh0aW1lb3V0KSAtPiBQaXBlbGluZUpvYjoKICAgICAgICAgICAgIyBjYXNlIDE6IGlmIHRpbWVvdXQgaXMgUGlwZWxpbmVJbnB1dCwgZ2V0IGJpbmRpbmcgZnJvbSByZXNwb25zZQogICAgICAgICAgICBub2RlXzAgPSBjb21wb25lbnRfZnVuYyhjb21wb25lbnRfaW5fbnVtYmVyPTEpCiAgICAgICAgICAgIG5vZGVfMC5zZXRfbGltaXRzKHRpbWVvdXQ9dGltZW91dCkKICAgICAgICAgICAgIyBjYXNlIDI6IGlmIHRpbWVvdXQgaXMgbm90IFBpcGVsaW5lSW5wdXQsIHJlc3BvbnNlIHRpbWVvdXQgd2lsbCBiZSBwYXJzZWQgdG8gaW50CiAgICAgICAgICAgIG5vZGVfMSA9IGNvbXBvbmVudF9mdW5jKGNvbXBvbmVudF9pbl9udW1iZXI9MSkKICAgICAgICAgICAgbm9kZV8xLnNldF9saW1pdHModGltZW91dD0xKQoKICAgICAgICBwaXBlbGluZSA9IG15X3BpcGVsaW5lKDIpCiAgICAgICAgcGlwZWxpbmUuc2V0dGluZ3MuZGVmYXVsdF9jb21wdXRlID0gImNwdS1jbHVzdGVyIgogICAgICAgIHBpcGVsaW5lX2pvYiA9IGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpCiAgICAgICAgYXNzZXJ0IHBpcGVsaW5lX2pvYi5qb2JzWyJub2RlXzAiXS5saW1pdHMudGltZW91dCA9PSAiJHt7cGFyZW50LmlucHV0cy50aW1lb3V0fX0iCiAgICAgICAgYXNzZXJ0IHBpcGVsaW5lX2pvYi5qb2JzWyJub2RlXzEiXS5saW1pdHMudGltZW91dCA9PSAxCgogICAgZGVmIHRlc3RfcGlwZWxpbmVfY29tcG9uZW50X3ByaW1pdGl2ZV90eXBlX2NvbnN1bXB0aW9uKHNlbGYsIGNsaWVudDogTUxDbGllbnQpOgogICAgICAgIGJhaXNjX2NvbXBvbmVudF9mdW5jID0gbG9hZF9jb21wb25lbnQoCiAgICAgICAgICAgICIuL3Rlc3RzL3Rlc3RfY29uZmlncy9kc2xfcGlwZWxpbmUvcHJpbWl0aXZlX3R5cGVfY29tcG9uZW50cy9iYXNpY19jb21wb25lbnQueW1sIgogICAgICAgICkKICAgICAgICBib29sZWFuX2Z1bmMgPSBsb2FkX2NvbXBvbmVudCgiLi90ZXN0cy90ZXN0X2NvbmZpZ3MvZHNsX3BpcGVsaW5lL3ByaW1pdGl2ZV90eXBlX2NvbXBvbmVudHMvYm9vbGVhbi55bWwiKQogICAgICAgIGludGVnZXJfZnVuYyA9IGxvYWRfY29tcG9uZW50KCIuL3Rlc3RzL3Rlc3RfY29uZmlncy9kc2xfcGlwZWxpbmUvcHJpbWl0aXZlX3R5cGVfY29tcG9uZW50cy9pbnRlZ2VyLnltbCIpCiAgICAgICAgbnVtYmVyX2Z1bmMgPSBsb2FkX2NvbXBvbmVudCgiLi90ZXN0cy90ZXN0X2NvbmZpZ3MvZHNsX3BpcGVsaW5lL3ByaW1pdGl2ZV90eXBlX2NvbXBvbmVudHMvbnVtYmVyLnltbCIpCiAgICAgICAgc3RyaW5nX2Z1bmMgPSBsb2FkX2NvbXBvbmVudCgiLi90ZXN0cy90ZXN0X2NvbmZpZ3MvZHNsX3BpcGVsaW5lL3ByaW1pdGl2ZV90eXBlX2NvbXBvbmVudHMvc3RyaW5nLnltbCIpCgogICAgICAgIEBkc2wucGlwZWxpbmUKICAgICAgICBkZWYgcGlwZWxpbmVfY29tcG9uZW50X2Z1bmMoYm9vbF9wYXJhbTogYm9vbCwgaW50X3BhcmFtOiBpbnQsIGZsb2F0X3BhcmFtOiBmbG9hdCwgc3RyX3BhcmFtOiBzdHIpOgogICAgICAgICAgICBiYWlzY19jb21wb25lbnRfZnVuYygKICAgICAgICAgICAgICAgIGJvb2xfcGFyYW09Ym9vbF9wYXJhbSwKICAgICAgICAgICAgICAgIGludF9wYXJhbT1pbnRfcGFyYW0sCiAgICAgICAgICAgICAgICBmbG9hdF9wYXJhbT1mbG9hdF9wYXJhbSwKICAgICAgICAgICAgICAgIHN0cl9wYXJhbT1zdHJfcGFyYW0sCiAgICAgICAgICAgICkKCiAgICAgICAgQGRzbC5waXBlbGluZQogICAgICAgIGRlZiBwaXBlbGluZV9mdW5jKCk6CiAgICAgICAgICAgICMgY29tcG9uZW50cyByZXR1cm4gcHJpbWl0aXZlIHR5cGUgb3V0cHV0cwogICAgICAgICAgICBib29sX25vZGUgPSBib29sZWFuX2Z1bmMoKQogICAgICAgICAgICBpbnRfbm9kZSA9IGludGVnZXJfZnVuYygpCiAgICAgICAgICAgIGZsb2F0X25vZGUgPSBudW1iZXJfZnVuYygpCiAgICAgICAgICAgIHN0cl9ub2RlID0gc3RyaW5nX2Z1bmMoKQogICAgICAgICAgICAjIHBpcGVsaW5lIGNvbXBvbmVudCBjb25zdW1lIGFib3ZlIHByaW1pdGl2ZSB0eXBlIG91dHB1dHMKICAgICAgICAgICAgcGlwZWxpbmVfbm9kZSA9IHBpcGVsaW5lX2NvbXBvbmVudF9mdW5jKCAgIyBub3FhOiBGODQxCiAgICAgICAgICAgICAgICBib29sX3BhcmFtPWJvb2xfbm9kZS5vdXRwdXRzLm91dHB1dCwKICAgICAgICAgICAgICAgIGludF9wYXJhbT1pbnRfbm9kZS5vdXRwdXRzLm91dHB1dCwKICAgICAgICAgICAgICAgIGZsb2F0X3BhcmFtPWZsb2F0X25vZGUub3V0cHV0cy5vdXRwdXQsCiAgICAgICAgICAgICAgICBzdHJfcGFyYW09c3RyX25vZGUub3V0cHV0cy5vdXRwdXQsCiAgICAgICAgICAgICkKCiAgICAgICAgcGlwZWxpbmVfam9iID0gcGlwZWxpbmVfZnVuYygpCiAgICAgICAgcGlwZWxpbmVfam9iLnNldHRpbmdzLmRlZmF1bHRfY29tcHV0ZSA9ICJjcHUtY2x1c3RlciIKCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmVfam9iLCBjbGllbnQpCgogICAgZGVmIHRlc3RfcGlwZWxpbmVfdmFyaWFibGVfbmFtZV91cHBlcmNhc2Uoc2VsZiwgY2xpZW50OiBNTENsaWVudCk6CiAgICAgICAgY29tcG9uZW50X3lhbWwgPSAiLi90ZXN0cy90ZXN0X2NvbmZpZ3MvY29tcG9uZW50cy9oZWxsb3dvcmxkX2NvbXBvbmVudC55bWwiCiAgICAgICAgY29tcG9uZW50X2Z1bmMgPSBsb2FkX2NvbXBvbmVudCgKICAgICAgICAgICAgc291cmNlPWNvbXBvbmVudF95YW1sLAogICAgICAgICkKCiAgICAgICAgQGRzbC5waXBlbGluZShuYW1lPSJwaXBlbGluZV93aXRoX3VwcGVyY2FzZV9ub2RlX25hbWVzIikKICAgICAgICBkZWYgcGlwZWxpbmVfd2l0aF91c2VyX2RlZmluZWRfbm9kZXNfMSgpOgogICAgICAgICAgICBmb3IgaSBpbiByYW5nZSgyKToKICAgICAgICAgICAgICAgIG5vZGUxID0gY29tcG9uZW50X2Z1bmMoY29tcG9uZW50X2luX3BhdGg9am9iX2lucHV0KQogICAgICAgICAgICAgICAgIyBjaGFuZ2Ugbm9kZSBuYW1lIHRvIGxvd2VyIHdoZW4gc2V0dGluZyBpdCB0byBhdm9pZCB1cHBlciBjYXNlIGluIG54dF9pbnB1dCdzIGJpbmRpbmcKICAgICAgICAgICAgICAgIG5vZGUxLm5hbWUgPSBmIkR1bW15X3tpfSIKICAgICAgICAgICAgICAgIG54dF9pbnB1dCA9IElucHV0KAogICAgICAgICAgICAgICAgICAgIHBhdGg9bm9kZTEub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGgsCiAgICAgICAgICAgICAgICAgICAgbW9kZT1JbnB1dE91dHB1dE1vZGVzLkRJUkVDVCwKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIG5vZGUyID0gY29tcG9uZW50X2Z1bmMoY29tcG9uZW50X2luX3BhdGg9bnh0X2lucHV0KQogICAgICAgICAgICAgICAgbm9kZTIubmFtZSA9IGYiQW5vdGhlcl97aX0iCgogICAgICAgIHBpcGVsaW5lX2pvYiA9IHBpcGVsaW5lX3dpdGhfdXNlcl9kZWZpbmVkX25vZGVzXzEoKQogICAgICAgIHBpcGVsaW5lX2pvYi5zZXR0aW5ncy5kZWZhdWx0X2NvbXB1dGUgPSAiY3B1LWNsdXN0ZXIiCiAgICAgICAgcGlwZWxpbmVfam9iID0gYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmVfam9iLCBjbGllbnQpCiAgICAgICAgYWN0dWFsX2pvYiA9IG9taXRfd2l0aF93aWxkY2FyZChwaXBlbGluZV9qb2IuX3RvX3Jlc3Rfb2JqZWN0KCkucHJvcGVydGllcy5hc19kaWN0KCksICpjb21tb25fb21pdF9maWVsZHMpCiAgICAgICAgYXNzZXJ0IGFjdHVhbF9qb2JbImpvYnMiXSA9PSB7CiAgICAgICAgICAgICJhbm90aGVyXzAiOiB7CiAgICAgICAgICAgICAgICAiaW5wdXRzIjogewogICAgICAgICAgICAgICAgICAgICJjb21wb25lbnRfaW5fcGF0aCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImpvYl9pbnB1dF90eXBlIjogImxpdGVyYWwiLAogICAgICAgICAgICAgICAgICAgICAgICAibW9kZSI6ICJEaXJlY3QiLAogICAgICAgICAgICAgICAgICAgICAgICAidmFsdWUiOiAiJHt7cGFyZW50LmpvYnMuZHVtbXlfMC5vdXRwdXRzLmNvbXBvbmVudF9vdXRfcGF0aH19IiwKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgIm5hbWUiOiAiYW5vdGhlcl8wIiwKICAgICAgICAgICAgICAgICJ0eXBlIjogImNvbW1hbmQiLAogICAgICAgICAgICB9LAogICAgICAgICAgICAiYW5vdGhlcl8xIjogewogICAgICAgICAgICAgICAgImlucHV0cyI6IHsKICAgICAgICAgICAgICAgICAgICAiY29tcG9uZW50X2luX3BhdGgiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJqb2JfaW5wdXRfdHlwZSI6ICJsaXRlcmFsIiwKICAgICAgICAgICAgICAgICAgICAgICAgIm1vZGUiOiAiRGlyZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogIiR7e3BhcmVudC5qb2JzLmR1bW15XzEub3V0cHV0cy5jb21wb25lbnRfb3V0X3BhdGh9fSIsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJuYW1lIjogImFub3RoZXJfMSIsCiAgICAgICAgICAgICAgICAidHlwZSI6ICJjb21tYW5kIiwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImR1bW15XzAiOiB7CiAgICAgICAgICAgICAgICAiaW5wdXRzIjogewogICAgICAgICAgICAgICAgICAgICJjb21wb25lbnRfaW5fcGF0aCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImpvYl9pbnB1dF90eXBlIjogInVyaV9maWxlIiwKICAgICAgICAgICAgICAgICAgICAgICAgInVyaSI6ICJodHRwczovL2RwcmVwZGF0YS5ibG9iLmNvcmUud2luZG93cy5uZXQvZGVtby9UaXRhbmljLmNzdiIsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJuYW1lIjogImR1bW15XzAiLAogICAgICAgICAgICAgICAgInR5cGUiOiAiY29tbWFuZCIsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkdW1teV8xIjogewogICAgICAgICAgICAgICAgImlucHV0cyI6IHsKICAgICAgICAgICAgICAgICAgICAiY29tcG9uZW50X2luX3BhdGgiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJqb2JfaW5wdXRfdHlwZSI6ICJ1cmlfZmlsZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ1cmkiOiAiaHR0cHM6Ly9kcHJlcGRhdGEuYmxvYi5jb3JlLndpbmRvd3MubmV0L2RlbW8vVGl0YW5pYy5jc3YiLAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAibmFtZSI6ICJkdW1teV8xIiwKICAgICAgICAgICAgICAgICJ0eXBlIjogImNvbW1hbmQiLAogICAgICAgICAgICB9LAogICAgICAgIH0KCiAgICBkZWYgdGVzdF9waXBlbGluZV9zaW5ndWxhcml0eV9zdHJvbmdfdHlwZV9zdWJtaXNzaW9uKHNlbGYsIGNsaWVudDogTUxDbGllbnQsIG1vY2tfc2luZ3VsYXJpdHlfYXJtX2lkOiBzdHIpOgogICAgICAgIGNvbXBvbmVudF95YW1sID0gIi4vdGVzdHMvdGVzdF9jb25maWdzL2NvbXBvbmVudHMvaGVsbG93b3JsZF9jb21wb25lbnRfc2luZ3VsYXJpdHkueW1sIgogICAgICAgIGNvbXBvbmVudF9mdW5jID0gbG9hZF9jb21wb25lbnQoY29tcG9uZW50X3lhbWwpCgogICAgICAgIGluc3RhbmNlX3R5cGUgPSAiU2luZ3VsYXJpdHkuTkQ0MHJzX3YyIgoKICAgICAgICBAZHNsLnBpcGVsaW5lCiAgICAgICAgZGVmIHBpcGVsaW5lX2Z1bmMoKToKICAgICAgICAgICAgIyBiYXNpYyBqb2JfdGllciArIExvdyBwcmlvcml0eQogICAgICAgICAgICBiYXNpY19sb3dfbm9kZSA9IGNvbXBvbmVudF9mdW5jKCkKICAgICAgICAgICAgYmFzaWNfbG93X25vZGUucmVzb3VyY2VzID0gSm9iUmVzb3VyY2VDb25maWd1cmF0aW9uKGluc3RhbmNlX2NvdW50PTIsIGluc3RhbmNlX3R5cGU9aW5zdGFuY2VfdHlwZSkKICAgICAgICAgICAgYmFzaWNfbG93X25vZGUucXVldWVfc2V0dGluZ3MgPSBRdWV1ZVNldHRpbmdzKGpvYl90aWVyPSJiYXNpYyIsIHByaW9yaXR5PSJsb3ciKQogICAgICAgICAgICAjIHN0YW5kYXJkIGpvYl90aWVyICsgTWVkaXVtIHByaW9yaXR5CiAgICAgICAgICAgIHN0YW5kYXJkX21lZGl1bV9ub2RlID0gY29tcG9uZW50X2Z1bmMoKQogICAgICAgICAgICBzdGFuZGFyZF9tZWRpdW1fbm9kZS5yZXNvdXJjZXMgPSBKb2JSZXNvdXJjZUNvbmZpZ3VyYXRpb24oaW5zdGFuY2VfY291bnQ9MiwgaW5zdGFuY2VfdHlwZT1pbnN0YW5jZV90eXBlKQogICAgICAgICAgICBzdGFuZGFyZF9tZWRpdW1fbm9kZS5xdWV1ZV9zZXR0aW5ncyA9IFF1ZXVlU2V0dGluZ3Moam9iX3RpZXI9InN0YW5kYXJkIiwgcHJpb3JpdHk9Im1lZGl1bSIpCiAgICAgICAgICAgICMgcHJlbWl1bSBqb2JfdGllciArIEhpZ2ggcHJpb3JpdHkKICAgICAgICAgICAgcHJlbWl1bV9oaWdoX25vZGUgPSBjb21wb25lbnRfZnVuYygpCiAgICAgICAgICAgIHByZW1pdW1faGlnaF9ub2RlLnJlc291cmNlcyA9IEpvYlJlc291cmNlQ29uZmlndXJhdGlvbihpbnN0YW5jZV9jb3VudD0yLCBpbnN0YW5jZV90eXBlPWluc3RhbmNlX3R5cGUpCiAgICAgICAgICAgIHByZW1pdW1faGlnaF9ub2RlLnF1ZXVlX3NldHRpbmdzID0gUXVldWVTZXR0aW5ncyhqb2JfdGllcj0icHJlbWl1bSIsIHByaW9yaXR5PSJoaWdoIikKICAgICAgICAgICAgIyBwcm9wZXJ0aWVzCiAgICAgICAgICAgIG5vZGVfd2l0aF9wcm9wZXJ0aWVzID0gY29tcG9uZW50X2Z1bmMoKQogICAgICAgICAgICBwcm9wZXJ0aWVzID0geyJTaW5ndWxhcml0eSI6IHsiaW1hZ2VWZXJzaW9uIjogIiIsICJpbnRlcmFjdGl2ZSI6IEZhbHNlfX0KICAgICAgICAgICAgbm9kZV93aXRoX3Byb3BlcnRpZXMucmVzb3VyY2VzID0gSm9iUmVzb3VyY2VDb25maWd1cmF0aW9uKAogICAgICAgICAgICAgICAgaW5zdGFuY2VfY291bnQ9MiwgaW5zdGFuY2VfdHlwZT1pbnN0YW5jZV90eXBlLCBwcm9wZXJ0aWVzPXByb3BlcnRpZXMKICAgICAgICAgICAgKQoKICAgICAgICBwaXBlbGluZV9qb2IgPSBwaXBlbGluZV9mdW5jKCkKICAgICAgICBwaXBlbGluZV9qb2Iuc2V0dGluZ3MuZGVmYXVsdF9jb21wdXRlID0gbW9ja19zaW5ndWxhcml0eV9hcm1faWQKICAgICAgICAjIHRoaXMgcGlwZWxpbmUgam9iIGlzIGV4cGVjdGVkIHRvIGZhaWwgYXMgU2luZ3VsYXJpdHkgaXMgbW9ja2VkLCBmb2N1cyBvbiBSRVNUIG9iamVjdCBhc3NlcnRpb24KICAgICAgICBjcmVhdGVkX3BpcGVsaW5lX2pvYiA9IGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lX2pvYiwgY2xpZW50KQogICAgICAgIHJlc3Rfb2JqID0gY3JlYXRlZF9waXBlbGluZV9qb2IuX3RvX3Jlc3Rfb2JqZWN0KCkKICAgICAgICBhc3NlcnQgcmVzdF9vYmoucHJvcGVydGllcy5zZXR0aW5nc1siZGVmYXVsdF9jb21wdXRlIl0gPT0gbW9ja19zaW5ndWxhcml0eV9hcm1faWQKICAgICAgICAjIGJhc2ljIGpvYl90aWVyICsgTG93IHByaW9yaXR5CiAgICAgICAgYmFzaWNfbG93X25vZGVfZGljdCA9IHJlc3Rfb2JqLnByb3BlcnRpZXMuam9ic1siYmFzaWNfbG93X25vZGUiXQogICAgICAgIGFzc2VydCBiYXNpY19sb3dfbm9kZV9kaWN0WyJxdWV1ZV9zZXR0aW5ncyJdID09IHsiam9iX3RpZXIiOiAiQmFzaWMiLCAicHJpb3JpdHkiOiAxfQogICAgICAgIGFzc2VydCBiYXNpY19sb3dfbm9kZV9kaWN0WyJyZXNvdXJjZXMiXSA9PSB7Imluc3RhbmNlX2NvdW50IjogMiwgImluc3RhbmNlX3R5cGUiOiBpbnN0YW5jZV90eXBlfQogICAgICAgICMgc3RhbmRhcmQgam9iX3RpZXIgKyBNZWRpdW0gcHJpb3JpdHkKICAgICAgICBzdGFuZGFyZF9tZWRpdW1fbm9kZV9kaWN0ID0gcmVzdF9vYmoucHJvcGVydGllcy5qb2JzWyJzdGFuZGFyZF9tZWRpdW1fbm9kZSJdCiAgICAgICAgYXNzZXJ0IHN0YW5kYXJkX21lZGl1bV9ub2RlX2RpY3RbInF1ZXVlX3NldHRpbmdzIl0gPT0geyJqb2JfdGllciI6ICJTdGFuZGFyZCIsICJwcmlvcml0eSI6IDJ9CiAgICAgICAgYXNzZXJ0IHN0YW5kYXJkX21lZGl1bV9ub2RlX2RpY3RbInJlc291cmNlcyJdID09IHsiaW5zdGFuY2VfY291bnQiOiAyLCAiaW5zdGFuY2VfdHlwZSI6IGluc3RhbmNlX3R5cGV9CiAgICAgICAgIyBwcmVtaXVtIGpvYl90aWVyICsgSGlnaCBwcmlvcml0eQogICAgICAgIHByZW1pdW1faGlnaF9ub2RlX2RpY3QgPSByZXN0X29iai5wcm9wZXJ0aWVzLmpvYnNbInByZW1pdW1faGlnaF9ub2RlIl0KICAgICAgICBhc3NlcnQgcHJlbWl1bV9oaWdoX25vZGVfZGljdFsicXVldWVfc2V0dGluZ3MiXSA9PSB7ImpvYl90aWVyIjogIlByZW1pdW0iLCAicHJpb3JpdHkiOiAzfQogICAgICAgIGFzc2VydCBwcmVtaXVtX2hpZ2hfbm9kZV9kaWN0WyJyZXNvdXJjZXMiXSA9PSB7Imluc3RhbmNlX2NvdW50IjogMiwgImluc3RhbmNlX3R5cGUiOiBpbnN0YW5jZV90eXBlfQogICAgICAgICMgcHJvcGVydGllcwogICAgICAgIG5vZGVfd2l0aF9wcm9wZXJ0aWVzX2RpY3QgPSByZXN0X29iai5wcm9wZXJ0aWVzLmpvYnNbIm5vZGVfd2l0aF9wcm9wZXJ0aWVzIl0KICAgICAgICBhc3NlcnQgbm9kZV93aXRoX3Byb3BlcnRpZXNfZGljdFsicmVzb3VyY2VzIl0gPT0gewogICAgICAgICAgICAiaW5zdGFuY2VfY291bnQiOiAyLAogICAgICAgICAgICAiaW5zdGFuY2VfdHlwZSI6IGluc3RhbmNlX3R5cGUsCiAgICAgICAgICAgICMgdGhlIG1hcHBpbmcgU2luZ3VsYXJpdHkgPT4gQUlTdXBlckNvbXB1dGVyIGlzIGV4cGVjdGVkCiAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogeyJBSVN1cGVyQ29tcHV0ZXIiOiB7ImltYWdlVmVyc2lvbiI6ICIiLCAiaW50ZXJhY3RpdmUiOiBGYWxzZX19LAogICAgICAgIH0KCiAgICBkZWYgdGVzdF9waXBlbGluZV9zaW5ndWxhcml0eV9wcm9wZXJ0eV9iYWdfc3VibWlzc2lvbihzZWxmLCBjbGllbnQ6IE1MQ2xpZW50LCBtb2NrX3Npbmd1bGFyaXR5X2FybV9pZDogc3RyKToKICAgICAgICBjb21wb25lbnRfeWFtbCA9ICIuL3Rlc3RzL3Rlc3RfY29uZmlncy9jb21wb25lbnRzL2hlbGxvd29ybGRfY29tcG9uZW50X3Npbmd1bGFyaXR5LnltbCIKICAgICAgICBjb21wb25lbnRfZnVuYyA9IGxvYWRfY29tcG9uZW50KGNvbXBvbmVudF95YW1sKQoKICAgICAgICAjIHByb3BlcnR5IGJhZyBpcyBzdXBwb3J0ZWQsIHdpdGggbG93ZXIgcHJpb3JpdHkgdGhhbiBzdHJvbmcgdHlwZQogICAgICAgIHZjX2NvbmZpZyA9IHsKICAgICAgICAgICAgImluc3RhbmNlX3R5cGUiOiAiU2luZ3VsYXJpdHkuTkQ0MHJzX3YyIiwKICAgICAgICAgICAgImluc3RhbmNlX2NvdW50IjogMiwKICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAiQUlTdXBlckNvbXB1dGVyIjogewogICAgICAgICAgICAgICAgICAgICJpbnRlcmFjdGl2ZSI6IEZhbHNlLAogICAgICAgICAgICAgICAgICAgICJpbWFnZVZlcnNpb24iOiAicHl0b3JjaCIsCiAgICAgICAgICAgICAgICAgICAgInNsYVRpZXIiOiAiUHJlbWl1bSIsCiAgICAgICAgICAgICAgICAgICAgInRlbnNvcmJvYXJkTG9nRGlyZWN0b3J5IjogIi9zY3JhdGNoL3RlbnNvcmJvYXJkX2xvZ3MiLAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgIH0KCiAgICAgICAgQGRzbC5waXBlbGluZQogICAgICAgIGRlZiBwaXBlbGluZV9mdW5jKCk6CiAgICAgICAgICAgIG5vZGUgPSBjb21wb25lbnRfZnVuYygpCiAgICAgICAgICAgIG5vZGUucmVzb3VyY2VzID0gdmNfY29uZmlnCiAgICAgICAgICAgIG5vZGUuY29tcHV0ZSA9IG1vY2tfc2luZ3VsYXJpdHlfYXJtX2lkCgogICAgICAgIHBpcGVsaW5lX2pvYiA9IHBpcGVsaW5lX2Z1bmMoKQogICAgICAgICMgYXMgU2luZ3VsYXJpdHkgaXMgbW9ja2VkIGFuZCBleHBlY3RlZCB0byBmYWlsIHZhbGlkYXRpb24sIHNraXAgaXQgZm9yIHN1Ym1pc3Npb247CiAgICAgICAgIyB0aGVuIG1hbnVhbGx5IGNhbmNlbCBpdCBhcyBvdGhlciB0ZXN0cy4KICAgICAgICBjcmVhdGVkX3BpcGVsaW5lX2pvYiA9IGNsaWVudC5jcmVhdGVfb3JfdXBkYXRlKHBpcGVsaW5lX2pvYiwgc2tpcF92YWxpZGF0aW9uPVRydWUpCiAgICAgICAgY2xpZW50LmpvYnMuYmVnaW5fY2FuY2VsKGNyZWF0ZWRfcGlwZWxpbmVfam9iLm5hbWUpLnJlc3VsdCgpCiAgICAgICAgcmVzdF9vYmogPSBjcmVhdGVkX3BpcGVsaW5lX2pvYi5fdG9fcmVzdF9vYmplY3QoKQogICAgICAgIGFzc2VydCByZXN0X29iai5wcm9wZXJ0aWVzLmpvYnNbIm5vZGUiXVsiY29tcHV0ZUlkIl0gPT0gbW9ja19zaW5ndWxhcml0eV9hcm1faWQKICAgICAgICBhc3NlcnQgcmVzdF9vYmoucHJvcGVydGllcy5qb2JzWyJub2RlIl1bInJlc291cmNlcyJdID09IHZjX2NvbmZpZwoKICAgIEBweXRlc3QubWFyay5za2lwaWYoY29uZGl0aW9uPW5vdCBpc19saXZlKCksIHJlYXNvbj0icmVjb3JkaW5nIHdpbGwgZXhwb3NlIFNpbmd1bGFyaXR5IGluZm9ybWF0aW9uIikKICAgIGRlZiB0ZXN0X3BpcGVsaW5lX3Npbmd1bGFyaXR5X2xpdmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCwgc2luZ3VsYXJpdHlfdmMpOgogICAgICAgICMgZnVsbCBuYW1lIGFuZCBzaG9ydCBuYW1lIGFyZSBzeW50YXggc3VnYXIsIFNESyB3aWxsIHJlc29sdmUgaXQgdG8gU2luZ3VsYXJpdHkgQVJNIGlkIGJlZm9yZSByZXF1ZXN0LAogICAgICAgICMgdGhpcyBuZWVkcyBjbGllbnQgdG8gZ2V0ICYgc2VhcmNoIGF2YWlsYWJsZSBWQ3MgLSB0aGF0J3Mgd2h5IHdlIHBsYWNlIHRoaXMgdGVzdCBpbiBlbmQtdG8tZW5kIHRlc3QgLQogICAgICAgICMgYW5kIGNvbXB1dGUgdmFsdWVzIGluIHJldHVybmVkIFJFU1Qgb2JqZWN0IHNob3VsZCBhbGwgYmUgQVJNIGlkLgogICAgICAgIGNvbXBvbmVudF95YW1sID0gIi4vdGVzdHMvdGVzdF9jb25maWdzL2NvbXBvbmVudHMvaGVsbG93b3JsZF9jb21wb25lbnRfc2luZ3VsYXJpdHkueW1sIgogICAgICAgIGNvbXBvbmVudF9mdW5jID0gbG9hZF9jb21wb25lbnQoY29tcG9uZW50X3lhbWwpCgogICAgICAgICMgZ2VuZXJhdGUgU2luZ3VsYXJpdHkgQVJNIGlkLCBmdWxsIG5hbWUgYW5kIHNob3J0IG5hbWUgZnJvbSBWQwogICAgICAgIGFybV9pZCA9IFNJTkdVTEFSSVRZX0lEX0ZPUk1BVC5mb3JtYXQoCiAgICAgICAgICAgIHNpbmd1bGFyaXR5X3ZjLnN1YnNjcmlwdGlvbl9pZCwgc2luZ3VsYXJpdHlfdmMucmVzb3VyY2VfZ3JvdXBfbmFtZSwgc2luZ3VsYXJpdHlfdmMubmFtZQogICAgICAgICkKICAgICAgICBmdWxsX25hbWUgPSAiYXp1cmVtbDovL3N1YnNjcmlwdGlvbnMve30vcmVzb3VyY2VHcm91cHMve30vdmlydHVhbGNsdXN0ZXJzL3t9Ii5mb3JtYXQoCiAgICAgICAgICAgIHNpbmd1bGFyaXR5X3ZjLnN1YnNjcmlwdGlvbl9pZCwgc2luZ3VsYXJpdHlfdmMucmVzb3VyY2VfZ3JvdXBfbmFtZSwgc2luZ3VsYXJpdHlfdmMubmFtZQogICAgICAgICkKICAgICAgICBzaG9ydF9uYW1lID0gZiJhenVyZW1sOi8vdmlydHVhbGNsdXN0ZXJzL3tzaW5ndWxhcml0eV92Yy5uYW1lfSIKCiAgICAgICAgQGRzbC5waXBlbGluZQogICAgICAgIGRlZiBwaXBlbGluZV9mdW5jKCk6CiAgICAgICAgICAgIG5vZGVfd2l0aF9pZCA9IGNvbXBvbmVudF9mdW5jKCkKICAgICAgICAgICAgbm9kZV93aXRoX2lkLmNvbXB1dGUgPSBhcm1faWQKICAgICAgICAgICAgbm9kZV93aXRoX2Z1bGxfbmFtZSA9IGNvbXBvbmVudF9mdW5jKCkKICAgICAgICAgICAgbm9kZV93aXRoX2Z1bGxfbmFtZS5jb21wdXRlID0gZnVsbF9uYW1lCiAgICAgICAgICAgIG5vZGVfd2l0aF9zaG9ydF9uYW1lID0gY29tcG9uZW50X2Z1bmMoKQogICAgICAgICAgICBub2RlX3dpdGhfc2hvcnRfbmFtZS5jb21wdXRlID0gc2hvcnRfbmFtZQoKICAgICAgICBwaXBlbGluZV9qb2IgPSBwaXBlbGluZV9mdW5jKCkKICAgICAgICBjcmVhdGVkX3BpcGVsaW5lX2pvYiA9IGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lX2pvYiwgY2xpZW50KQogICAgICAgIHJlc3Rfb2JqID0gY3JlYXRlZF9waXBlbGluZV9qb2IuX3RvX3Jlc3Rfb2JqZWN0KCkKCiAgICAgICAgZm9yIG5vZGVfbmFtZSBpbiBbIm5vZGVfd2l0aF9pZCIsICJub2RlX3dpdGhfZnVsbF9uYW1lIiwgIm5vZGVfd2l0aF9zaG9ydF9uYW1lIl06CiAgICAgICAgICAgIG5vZGVfY29tcHV0ZSA9IHJlc3Rfb2JqLnByb3BlcnRpZXMuam9ic1tub2RlX25hbWVdWyJjb21wdXRlSWQiXQogICAgICAgICAgICBhc3NlcnQgaXNfc2luZ3VsYXJpdHlfaWRfZm9yX3Jlc291cmNlKG5vZGVfY29tcHV0ZSkKICAgICAgICAgICAgYXNzZXJ0IG5vZGVfY29tcHV0ZS5lbmRzd2l0aChzaW5ndWxhcml0eV92Yy5uYW1lKQoKICAgIGRlZiB0ZXN0X2Fzc2lnbl92YWx1ZV90b191bmtub3duX2ZpbGVkKHNlbGYsIGNsaWVudDogTUxDbGllbnQpOgogICAgICAgIHBhdGggPSAiLi90ZXN0cy90ZXN0X2NvbmZpZ3MvY29tcG9uZW50cy9oZWxsb3dvcmxkX2NvbXBvbmVudC55bWwiCiAgICAgICAgY29tcG9uZW50X2Z1bmMgPSBsb2FkX2NvbXBvbmVudChzb3VyY2U9cGF0aCkKICAgICAgICAjIER1ZSB0byBpdCB3aWxsIGJsb2NrIGNpIHdpdGggdGhlIHRhZ3Mgb2YgeWFtbCB3aGVuIGdlbmVyYXRpbmcgcmVjb3JkcywgcmVtb3ZlIHRoZSB0YWdzIGhlcmUuCiAgICAgICAgY29tcG9uZW50X2Z1bmMudGFncyA9IHt9CgogICAgICAgIEBkc2wucGlwZWxpbmUoKQogICAgICAgIGRlZiBwaXBlbGluZV9mdW5jKGlucHV0KToKICAgICAgICAgICAgbm9kZSA9IGNvbXBvbmVudF9mdW5jKGNvbXBvbmVudF9pbl9wYXRoPWlucHV0KQogICAgICAgICAgICBub2RlLnVua25vd25fZmllbGQgPSBpbnB1dAoKICAgICAgICBwaXBlbGluZV9qb2I6IFBpcGVsaW5lSm9iID0gcGlwZWxpbmVfZnVuYyhpbnB1dD1JbnB1dChwYXRoPXBhdGgpKQogICAgICAgIHBpcGVsaW5lX2pvYi5zZXR0aW5ncy5kZWZhdWx0X2NvbXB1dGUgPSAiY3B1LWNsdXN0ZXIiCiAgICAgICAgam9iX3JlcyA9IGNsaWVudC5qb2JzLmNyZWF0ZV9vcl91cGRhdGUoam9iPXBpcGVsaW5lX2pvYiwgZXhwZXJpbWVudF9uYW1lPSJ0ZXN0X3Vua25vd25fZmllbGQiKQogICAgICAgIGFzc2VydCBqb2JfcmVzLmpvYnNbIm5vZGUiXS51bmtub3duX2ZpZWxkID09ICIke3twYXJlbnQuaW5wdXRzLmlucHV0fX0iCg==",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "vjglRb3ueWA43cCojSpZxA==",
        "Date": "Tue, 30 May 2023 07:29:01 GMT",
        "ETag": "\u00220x8DB60DF8AE0713E\u0022",
        "Last-Modified": "Tue, 30 May 2023 07:29:02 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "snwz3P4SwJY=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/azureml-blobstore-0bdd51b6-cd9c-4978-b870-99997b393b81/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_fl.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "10442",
        "Content-MD5": "Bf2zKM/VFLU1K2yMYkGmbw==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 30 May 2023 07:28:59 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": "aW1wb3J0IHB5dGVzdApmcm9tIHBhdGhsaWIgaW1wb3J0IFBhdGgKZnJvbSBkZXZ0b29sc190ZXN0dXRpbHMgaW1wb3J0IEF6dXJlUmVjb3JkZWRUZXN0Q2FzZSwgaXNfbGl2ZQpmcm9tIGF6dXJlLmNvcmUuZXhjZXB0aW9ucyBpbXBvcnQgUmVzb3VyY2VOb3RGb3VuZEVycm9yCmZyb20gLi5fdXRpbCBpbXBvcnQgX0RTTF9USU1FT1VUX1NFQ09ORApmcm9tIHRlc3RfdXRpbGl0aWVzLnV0aWxzIGltcG9ydCBfUFlURVNUX1RJTUVPVVRfTUVUSE9ECmZyb20gYXp1cmUuYWkubWwgaW1wb3J0IElucHV0LCBsb2FkX2NvbXBvbmVudApmcm9tIHR5cGluZyBpbXBvcnQgQ2FsbGFibGUKZnJvbSBhenVyZS5haS5tbC5kc2wuX2ZsX3NjYXR0ZXJfZ2F0aGVyX25vZGUgaW1wb3J0IGZsX3NjYXR0ZXJfZ2F0aGVyCmZyb20gYXp1cmUuYWkubWwuZW50aXRpZXMuX2Fzc2V0cy5mZWRlcmF0ZWRfbGVhcm5pbmdfc2lsbyBpbXBvcnQgRmVkZXJhdGVkTGVhcm5pbmdTaWxvCmZyb20gYXp1cmUuYWkubWwuY29uc3RhbnRzIGltcG9ydCBBc3NldFR5cGVzCmZyb20gYXp1cmUuYWkubWwuZW50aXRpZXMuX2NyZWRlbnRpYWxzIGltcG9ydCAoCiAgICBJZGVudGl0eUNvbmZpZ3VyYXRpb24sCiAgICBJZGVudGl0eUNvbmZpZ3VyYXRpb25UeXBlLAogICAgTWFuYWdlZElkZW50aXR5Q29uZmlndXJhdGlvbiwKKQpmcm9tIGF6dXJlLmFpLm1sLmRzbCBpbXBvcnQgcGlwZWxpbmUKaW1wb3J0IG9zCmZyb20gYXp1cmUuYWkubWwgaW1wb3J0ICgKICAgIE1MQ2xpZW50LAopCgoKIyBSRVNPVVJDRSBOT1RFUyAtIEFzIGFuIGUyZSB0ZXN0IGZpbGUsIHRoaXMgZmlsZSBtYWtlcyBhbmQgcmVmZXJlbmNlcyByZWFsIEFNTCByZXNvdXJjZXMuCiMgQWxsIHJlc291cmNlcyByZWZlcmVuY2VzIGJ5IHRoaXMgZmlsZSBhcmUgY29udGFpbmVkIHdpdGhpbiB0aGUgZm9sbG93aW5nOgojIHN1YnNjcmlwdGlvbjogZGF0YSBzY2llbmNlIFZNIFRlYW0gKERTVk0pCiMgcmVzb3VyY2UgZ3JvdXA6IGZsLWUyZS10ZXN0aW5nLXJnCiMgd29ya3NwYWNlOiBmbC1lMmUtdGVzdGluZy13cwojIElmIHlvdSdyZSBydW5uaW5nIHRoaXMgdGVzdCBsb2NhbGx5IGluIGxpdmUgbW9kZSwgbWFrZSBzdXJlIHlvdSd2ZSBzZXQgdGhlIGFib3ZlIHZhbHVlcyBpbgojIHlvdXIgLmVudiBmaWxlLgojIHJlc291cmNlcyBvZiBub3RlOgojIC0gbXVsdGlwbGUgc3RvcmFnZSBjb250YWluZXJzCiMgLSBtdWx0aXBsZSBjb21wdXRlcyB3aXRoIHZhcnlpbmcgbWFuYWdlZCBpZGVudGl0aWVzIHRvIGFsbG93IGFjY2VzcyB0byBkaWZmZXJlbnQgc3RvcmFnZSBjb250YWluZXJzCkBweXRlc3QubWFyay50aW1lb3V0KHRpbWVvdXQ9X0RTTF9USU1FT1VUX1NFQ09ORCwgbWV0aG9kPV9QWVRFU1RfVElNRU9VVF9NRVRIT0QpCkBweXRlc3QubWFyay5lMmV0ZXN0CkBweXRlc3QubWFyay5jb3JlX3Nka190ZXN0CmNsYXNzIFRlc3REU0xQaXBlbGluZShBenVyZVJlY29yZGVkVGVzdENhc2UpOgogICAgIyBERVYgTk9URTogVGhpcyB0ZXN0IGV4cGVjdHMgYSBsb3Qgb2YgcmVzb3VyY2VzIHRvIGFscmVhZHkgZXhpc3QgaW4gQU1MLiBUaGUgaW5pdGlhbCBpbXBsZW1lbnRhdGlvbgogICAgIyBvZiB0aGlzIHRlc3QgaW1wbGVtZW50ZWQgYWxsIG9mIHRoZXNlIHRoaWducyB1bmRlciB0aGUgJ2ZsLWUyZS10ZXN0aW5nLXJnJyByZXNvdXJjZSBncm91cCBhbmQKICAgICMgdGhlICdmbC1lMmUtdGVzdGluZy13cycgd29ya3NwYWNlIGluc2lkZSB0aGF0IFJHLgogICAgIyBUaGUgbmVlZGVkIHJlc291cmNlcyBhcmU6CiAgICAjIC0gSW4gdGhlIHdvcmtzcGFjZSdzIHN0b3JhZ2UgYWNjb3VudCwgMyBjb250YWluZXJzIG5hbWVkICdzaWxvLWNvbnRhaW5lcjEnLCAnc2lsby1jb250YWluZXIyMycsCiAgICAjICAgICAgIGFuZCAnYWdnLWNvbnRhaW5lcicuIEVhY2ggY29udGFpbmVyIG5lZWRzIHRvIGhhdmUgYXNzaWduZWQgdGhlIGJsb2Igb3duZXIgcGVybWlzc2lvbgogICAgIyAgICAgICB0byB0aGUgJ3Rlc3QtbXNpLWlkJyBtYW5hZ2VkIGlkZW50aXR5CiAgICAjIC0gNCBjb21wdXRlIGNsdXN0ZXJzIGluIHRoZSB3b3Jrc3BhY2UgbmFtZWQgc2lsb0NvbXB1dGUxLzIvMyBhbmQgYWdnQ29tcHV0ZS4gRWFjaCBvZiB3aGljaAogICAgIyAgICAgICBoYXMgYmVlbiBhc3NpZ25lZCB0aGUgJ3Rlc3QtbXNpLWlkJyBJRAogICAgIyAtIDQgZGF0YXN0b3JlcyBjb25uZWN0ZWQgdG8gdGhlIGFmb3JlbWVudGlvbmVkIHN0b3JhZ2UgY29udGFpbmVycyBuYW1lZCBzaWxvX2RhdGFzdG9yZTEvMi8zIGFuZAogICAgIyAgICAgICBhZ2dfZGF0YXN0b3JlLgogICAgQHB5dGVzdC5tYXJrLnNraXBpZigKICAgICAgICBjb25kaXRpb249bm90IGlzX2xpdmUoKSwKICAgICAgICByZWFzb249KAogICAgICAgICAgICAiVE9ETyAoMjIzNTAzNCkgVGhlIGNyaXRpY2FsIGNhbGwgdG8gYGNsaWVudC5qb2JzLmNyZWF0ZV9vcl91cGRhdGVgIHNlZW1zIHRvIG1ha2UgZGlmZmVyZW50IgogICAgICAgICAgICArICJBUEkgY2FsbHMgaW4gcGxheWJhY2sgbW9kZSBjb21wYXJlZCB0byByZWNvcmRpbmcgbW9kZSIKICAgICAgICApLAogICAgKQogICAgZGVmIHRlc3RfZmxfcGlwZWxpbmUoCiAgICAgICAgc2VsZiwKICAgICAgICBjbGllbnQ6IE1MQ2xpZW50LAogICAgICAgIGZlZGVyYXRlZF9sZWFybmluZ19jb21wb25lbnRzX2ZvbGRlcjogUGF0aCwKICAgICAgICBmZWRlcmF0ZWRfbGVhcm5pbmdfbG9jYWxfZGF0YV9mb2xkZXI6IFBhdGgsCiAgICApIC0\",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "Bf2zKM/VFLU1K2yMYkGmbw==",
        "Date": "Tue, 30 May 2023 07:29:02 GMT",
        "ETag": "\u00220x8DB60DF8AF3A83D\u0022",
        "Last-Modified": "Tue, 30 May 2023 07:29:02 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "nvRzTOL/DNw=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/azureml-blobstore-0bdd51b6-cd9c-4978-b870-99997b393b81/LocalUpload/00000000000000000000000000000000/e2etests/__init__.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "0",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 30 May 2023 07:28:59 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": null,
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "1B2M2Y8AsgTpgAmY7PhCfg==",
        "Date": "Tue, 30 May 2023 07:29:02 GMT",
        "ETag": "\u00220x8DB60DF8AF3A83D\u0022",
        "Last-Modified": "Tue, 30 May 2023 07:29:02 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "AAAAAAAAAAA=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/azureml-blobstore-0bdd51b6-cd9c-4978-b870-99997b393b81/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_pipeline_on_registry.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "4441",
        "Content-MD5": "w4/WwgQjAnQ92uQlPcU6MQ==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 30 May 2023 07:28:59 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": "ZnJvbSBwYXRobGliIGltcG9ydCBQYXRoCgppbXBvcnQgcHl0ZXN0CmZyb20gYXp1cmUuY29yZS5leGNlcHRpb25zIGltcG9ydCBSZXNvdXJjZU5vdEZvdW5kRXJyb3IKCmZyb20gYXp1cmUuYWkubWwgaW1wb3J0IElucHV0LCBNTENsaWVudCwgbG9hZF9jb21wb25lbnQsIGxvYWRfbW9kZWwKZnJvbSBhenVyZS5haS5tbC5jb25zdGFudHMgaW1wb3J0IEFzc2V0VHlwZXMKZnJvbSBhenVyZS5haS5tbC5kc2wgaW1wb3J0IHBpcGVsaW5lCmZyb20gZGV2dG9vbHNfdGVzdHV0aWxzIGltcG9ydCBBenVyZVJlY29yZGVkVGVzdENhc2UsIGlzX2xpdmUKZnJvbSB0ZXN0X3V0aWxpdGllcy51dGlscyBpbXBvcnQgX1BZVEVTVF9USU1FT1VUX01FVEhPRCwgYXNzZXJ0X2pvYl9jYW5jZWwKZnJvbSAuLl91dGlsIGltcG9ydCBfRFNMX1RJTUVPVVRfU0VDT05ECgoKZGVmIGFzc2VydF9waXBlbGluZV9qb2JfY2FuY2VsKGNsaWVudDogTUxDbGllbnQsIHNjb3JlX2Z1bmMsIHBpcGVsaW5lX21vZGVsX2lucHV0LCBwaXBlbGluZV90ZXN0X2RhdGEpOgogICAgQHBpcGVsaW5lCiAgICBkZWYgc2NvcmVfcGlwZWxpbmUobW9kZWxfaW5wdXQsIHRlc3RfZGF0YSk6CiAgICAgICAgc2NvcmUgPSBzY29yZV9mdW5jKG1vZGVsX2lucHV0PW1vZGVsX2lucHV0LCB0ZXN0X2RhdGE9dGVzdF9kYXRhKSAgIyBub3FhOiBGODQxCiAgICAgICAgc2NvcmVfZHVwbGljYXRlID0gc2NvcmVfZnVuYyhtb2RlbF9pbnB1dD1tb2RlbF9pbnB1dCwgdGVzdF9kYXRhPXRlc3RfZGF0YSkgICMgbm9xYTogRjg0MQoKICAgIHBpcGVsaW5lX2pvYiA9IHNjb3JlX3BpcGVsaW5lKG1vZGVsX2lucHV0PXBpcGVsaW5lX21vZGVsX2lucHV0LCB0ZXN0X2RhdGE9cGlwZWxpbmVfdGVzdF9kYXRhKQogICAgcGlwZWxpbmVfam9iLnNldHRpbmdzLmRlZmF1bHRfY29tcHV0ZSA9ICJjcHUtY2x1c3RlciIKICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lX2pvYiwgY2xpZW50KQoKCkBweXRlc3QubWFyay5za2lwaWYoY29uZGl0aW9uPW5vdCBpc19saXZlKCksIHJlYXNvbj0icmVnaXN0cnkgdGVzdCwgbWF5IGZhaWwgaW4gcGxheWJhY2sgbW9kZSIpCkBweXRlc3QubWFyay51c2VmaXh0dXJlcygiZW5hYmxlX3BpcGVsaW5lX3ByaXZhdGVfcHJldmlld19mZWF0dXJlcyIsICJyZWNvcmRlZF90ZXN0IikKQHB5dGVzdC5tYXJrLnRpbWVvdXQodGltZW91dD1fRFNMX1RJTUVPVVRfU0VDT05ELCBtZXRob2Q9X1BZVEVTVF9USU1FT1VUX01FVEhPRCkKQHB5dGVzdC5tYXJrLmUyZXRlc3QKQHB5dGVzdC5tYXJrLnBpcGVsaW5lX3Rlc3QKY2xhc3MgVGVzdERTTFBpcGVsaW5lT25SZWdpc3RyeShBenVyZVJlY29yZGVkVGVzdENhc2UpOgogICAgdGVzdF9kYXRhID0gSW5wdXQoCiAgICAgICAgdHlwZT1Bc3NldFR5cGVzLlVSSV9GSUxFLAogICAgICAgIHBhdGg9Ii4vdGVzdHMvdGVzdF9jb25maWdzL3BpcGVsaW5lX2pvYnMvam9iX3dpdGhfcmVnaXN0cnlfbW9kZWxfYXNfaW5wdXQvZGF0YS9zYW1wbGUxLmNzdiIsCiAgICApCgogICAgZGVmIHRlc3RfcGlwZWxpbmVfam9iX2NyZWF0ZV93aXRoX3JlZ2lzdGVyZWRfY29tcG9uZW50X29uX3JlZ2lzdHJ5KHNlbGYsIHBpcGVsaW5lc19yZWdpc3RyeV9jbGllbnQ6IE1MQ2xpZW50KToKICAgICAgICBsb2NhbF9jb21wb25lbnQgPSBsb2FkX2NvbXBvbmVudCgiLi90ZXN0cy90ZXN0X2NvbmZpZ3MvY29tcG9uZW50cy9iYXNpY19jb21wb25lbnRfY29kZV9sb2NhbF9wYXRoLnltbCIpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBjcmVhdGVkX2NvbXBvbmVudCA9IHBpcGVsaW5lc19yZWdpc3RyeV9jbGllbnQuY29tcG9uZW50cy5nZXQoCiAgICAgICAgICAgICAgICBsb2NhbF9jb21wb25lbnQubmFtZSwgdmVyc2lvbj1sb2NhbF9jb21wb25lbnQudmVyc2lvbgogICAgICAgICAgICApCiAgICAgICAgZXhjZXB0IFJlc291cmNlTm90Rm91bmRFcnJvcjoKICAgICAgICAgICAgY3JlYXRlZF9jb21wb25lbnQgPSBwaXBlbGluZXNfcmVnaXN0cnlfY2xpZW50LmNvbXBvbmVudHMuY3JlYXRlX29yX3VwZGF0ZShsb2NhbF9jb21wb25lbnQpCgogICAgICAgIEBwaXBlbGluZQogICAgICAgIGRlZiBzYW1wbGVfcGlwZWxpbmUoKToKICAgICAgICAgICAgY3JlYXRlZF9jb21wb25lbnQoKQoKICAgICAgICBwaXBlbGluZV9qb2IgPSBzYW1wbGVfcGlwZWxpbmUoKQogICAgICAgIHBpcGVsaW5lX2pvYi5zZXR0aW5ncy5kZWZhdWx0X2NvbXB1dGUgPSAiY3B1LWNsdXN0ZXIiCiAgICAgICAgYXNzZXJ0IHBpcGVsaW5lc19yZWdpc3RyeV9jbGllbnQuam9icy52YWxpZGF0ZShwaXBlbGluZV9qb2IpLnBhc3NlZAoKICAgICMgdGhpcyB0ZXN0IHdpbGwgYnJlYWsgaW4gcGxheWJhY2sgbW9kZSwgc28gaW5jbHVkZSBpdCBpbiBsaXZlIHRlc3Qgb25seQogICAgZGVmIHRlc3RfcGlwZWxpbmVfd2l0aF9sb2NhbF9jb21wb25lbnRfYW5kX3JlZ2lzdHJ5X21vZGVsX2FzX2lucHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpOgogICAgICAgICMgbG9hZF9jb21wb25lbnQKICAgICAgICBzY29yZV9mdW5jID0gbG9hZF9jb21wb25lbnQoIi4vdGVzdHMvdGVzdF9jb25maWdzL3BpcGVsaW5lX2pvYnMvam9iX3dpdGhfcmVnaXN0cnlfbW9kZWxfYXNfaW5wdXQvc2NvcmUueW1sIikKCiAgICAgICAgcGlwZWxpbmVfc2NvcmVfbW9kZWwgPSBJbnB1dCgKICAgICAgICAgICAgdHlwZT0iY3VzdG9tX21vZGVsIiwgcGF0aD0iYXp1cmVtbDovL3JlZ2lzdHJpZXMvc2RrLXRlc3QvbW9kZWxzL2lyaXNfbW9kZWwvdmVyc2lvbnMvMSIKICAgICAgICApCgogICAgICAgIGFzc2VydF9waXBlbGluZV9qb2JfY2FuY2VsKGNsaWVudCwgc2NvcmVfZnVuYywgcGlwZWxpbmVfc2NvcmVfbW9kZWwsIHNlbGYudGVzdF9kYXRhKQoKICAgIGRlZiB0ZXN0X3BpcGVsaW5lX3dpdGhfbG9jYWxfY29tcG9uZW50X2FuZF9yZWdpc3RyeV9tb2RlbF9hc19pbnB1dF93aXRoX21vZGVsX2lucHV0KAogICAgICAgIHNlbGYsIGNsaWVudDogTUxDbGllbnQsIHBpcGVsaW5lc19yZWdpc3RyeV9jbGllbnQ6IE1MQ2xpZW50CiAgICApOgogICAgICAgICMgbG9hZF9jb21wb25lbnQKICAgICAgICBzY29yZV9mdW5jID0gbG9hZF9jb21wb25lbnQoIi4vdGVzdHMvdGVzdF9jb25maWdzL3BpcGVsaW5lX2pvYnMvam9iX3dpdGhfcmVnaXN0cnlfbW9kZWxfYXNfaW5wdXQvc2NvcmUueW1sIikKCiAgICAgICAgbW9kZWxfcGF0aCA9IFBhdGgoIi4vdGVzdHMvdGVzdF9jb25maWdzL21vZGVsL21vZGVsX2lyaXMueW1sIikKICAgICAgICBtb2RlbF9lbnRpdHkgPSBsb2FkX21vZGVsKG1vZGVsX3BhdGgpCiAgICAgICAgdHJ5OgogICAgICAgICAgICBwaXBlbGluZV9zY29yZV9tb2RlbCA9IHBpcGVsaW5lc19yZWdpc3RyeV9jbGllbnQubW9kZWxzLmdldCgKICAgICAgICAgICAgICAgIG5hbWU9bW9kZWxfZW50aXR5Lm5hbWUsIHZlcnNpb249bW9kZWxfZW50aXR5LnZlcnNpb24KICAgICAgICAgICAgKQogICAgICAgIGV4Y2VwdCBSZXNvdXJjZU5vdEZvdW5kRXJyb3I6CiAgICAgICAgICAgIG1vZGVsX2VudGl0eSA9IHBpcGVsaW5lc19yZWdpc3RyeV9jbGllbnQubW9kZWxzLmNyZWF0ZV9vcl91cGRhdGUobW9kZWxfZW50aXR5KQogICAgICAgICAgICBwaXBlbGluZV9zY29yZV9tb2RlbCA9IHBpcGVsaW5lc19yZWdpc3RyeV9jbGllbnQubW9kZWxzLmdldCgKICAgICAgICAgICAgICAgIG5hbWU9bW9kZWxfZW50aXR5Lm5hbWUsIHZlcnNpb249bW9kZWxfZW50aXR5LnZlcnNpb24KICAgICAgICAgICAgKQoKICAgICAgICBhc3NlcnRfcGlwZWxpbmVfam9iX2NhbmNlbChjbGllbnQsIHNjb3JlX2Z1bmMsIHBpcGVsaW5lX3Njb3JlX21vZGVsLCBzZWxmLnRlc3RfZGF0YSkKCiAgICBkZWYgdGVzdF9waXBlbGluZV93aXRoX3JlZ2lzdHJ5X2NvbXBvbmVudF9hbmRfbW9kZWxfYXNfaW5wdXQoCiAgICAgICAgc2VsZiwgY2xpZW50OiBNTENsaWVudCwgcGlwZWxpbmVzX3JlZ2lzdHJ5X2NsaWVudDogTUxDbGllbnQKICAgICk6CiAgICAgICAgIyBsb2FkX2NvbXBvbmVudAogICAgICAgIHNjb3JlX2NvbXBvbmVudF9uYW1lLCBjb21wb25lbnRfdmVyc2lvbiA9ICJzY29yZV9jb21wb25lbnQiLCAiMiIKICAgICAgICBzY29yZV9mdW5jID0gcGlwZWxpbmVzX3JlZ2lzdHJ5X2NsaWVudC5jb21wb25lbnRzLmdldChuYW1lPXNjb3JlX2NvbXBvbmVudF9uYW1lLCB2ZXJzaW9uPWNvbXBvbmVudF92ZXJzaW9uKQoKICAgICAgICBwaXBlbGluZV9zY29yZV9tb2RlbCA9IElucHV0KAogICAgICAgICAgICB0eXBlPSJtbGZsb3dfbW9kZWwiLCBwYXRoPSJhenVyZW1sOi8vcmVnaXN0cmllcy9zZGstdGVzdC9tb2RlbHMvaXJpc19tb2RlbC92ZXJzaW9ucy8xIgogICAgICAgICkKCiAgICAgICAgYXNzZXJ0X3BpcGVsaW5lX2pvYl9jYW5jZWwoY2xpZW50LCBzY29yZV9mdW5jLCBwaXBlbGluZV9zY29yZV9tb2RlbCwgc2VsZi50ZXN0X2RhdGEpCg==",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "w4/WwgQjAnQ92uQlPcU6MQ==",
        "Date": "Tue, 30 May 2023 07:29:02 GMT",
        "ETag": "\u00220x8DB60DF8AF41D5C\u0022",
        "Last-Modified": "Tue, 30 May 2023 07:29:02 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "5gxaAnUt0/8=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/azureml-blobstore-0bdd51b6-cd9c-4978-b870-99997b393b81/LocalUpload/00000000000000000000000000000000/e2etests/test_dsl_pipeline_samples.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "19621",
        "Content-MD5": "hmticOSCNGEfz3uj9VsbFA==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 30 May 2023 07:28:59 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": "IiIiClRoaXMgZmlsZSBjb3ZlcnMgYWxsIHNhbXBsZSBwaXBlbGluZSBpbiBodHRwczovL2dpdGh1Yi5jb20vQXp1cmUvYXp1cmVtbC1wcmV2aWV3cy90cmVlL21haW4vcHJldmlld3MvcGlwZWxpbmVzL3NhbXBsZXMKaW4gZHNsLnBpcGVsaW5lLgpUaGUgc2FtcGxlcyBhcmUgY29waWVkIHRvIHRlc3RfY29uZmlncy9kc2xfcGlwZWxpbmVfc2FtcGxlcwoiIiIKaW1wb3J0IGpzb24KaW1wb3J0IHN5cwpmcm9tIHBhdGhsaWIgaW1wb3J0IFBhdGgKCmltcG9ydCBweWRhc2gKaW1wb3J0IHB5dGVzdApmcm9tIGRldnRvb2xzX3Rlc3R1dGlscyBpbXBvcnQgQXp1cmVSZWNvcmRlZFRlc3RDYXNlLCBpc19saXZlCmZyb20gdGVzdF91dGlsaXRpZXMudXRpbHMgaW1wb3J0IF9QWVRFU1RfVElNRU9VVF9NRVRIT0QsIGFzc2VydF9qb2JfY2FuY2VsCgpmcm9tIGF6dXJlLmFpLm1sIGltcG9ydCBNTENsaWVudCwgbG9hZF9qb2IKZnJvbSBhenVyZS5haS5tbC5lbnRpdGllcyBpbXBvcnQgQ29tcG9uZW50IGFzIENvbXBvbmVudEVudGl0eQpmcm9tIGF6dXJlLmFpLm1sLmVudGl0aWVzIGltcG9ydCBQaXBlbGluZUpvYgpmcm9tIGF6dXJlLmFpLm1sLm9wZXJhdGlvbnMuX3J1bl9oaXN0b3J5X2NvbnN0YW50cyBpbXBvcnQgSm9iU3RhdHVzCgpmcm9tIC4uX3V0aWwgaW1wb3J0IF9EU0xfVElNRU9VVF9TRUNPTkQKCnRlc3RzX3Jvb3RfZGlyID0gUGF0aChfX2ZpbGVfXykucGFyZW50LnBhcmVudC5wYXJlbnQKc3lzLnBhdGguaW5zZXJ0KDAsIHN0cih0ZXN0c19yb290X2RpciAvICJ0ZXN0X2NvbmZpZ3MiKSkKc2FtcGxlc19kaXIgPSB0ZXN0c19yb290X2RpciAvICJ0ZXN0X2NvbmZpZ3MvZHNsX3BpcGVsaW5lLyIKCgpkZWYgYXNzZXJ0X2pvYl9jb21wbGV0ZWQocGlwZWxpbmUsIGNsaWVudDogTUxDbGllbnQpOgogICAgam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSkKICAgIGNsaWVudC5qb2JzLnN0cmVhbShqb2IubmFtZSkKICAgIGFzc2VydCBjbGllbnQuam9icy5nZXQoam9iLm5hbWUpLnN0YXR1cyA9PSBKb2JTdGF0dXMuQ09NUExFVEVECgoKZGVmIGFzc2VydF9kc2xfY3VyYXRlZChwaXBlbGluZTogUGlwZWxpbmVKb2IsIGpvYl95YW1sLCBvbWl0X2ZpZWxkcyk6CiAgICBkc2xfcGlwZWxpbmVfam9iX2RpY3QgPSBwaXBlbGluZS5fdG9fcmVzdF9vYmplY3QoKS5hc19kaWN0KCkKICAgIHBpcGVsaW5lX2pvYl9kaWN0ID0gbG9hZF9qb2Ioc291cmNlPWpvYl95YW1sKS5fdG9fcmVzdF9vYmplY3QoKS5hc19kaWN0KCkKCiAgICBkc2xfcGlwZWxpbmVfam9iX2RpY3QgPSBweWRhc2gub21pdChkc2xfcGlwZWxpbmVfam9iX2RpY3QsIG9taXRfZmllbGRzKQogICAgcGlwZWxpbmVfam9iX2RpY3QgPSBweWRhc2gub21pdChwaXBlbGluZV9qb2JfZGljdCwgb21pdF9maWVsZHMpCiAgICBwcmludChqc29uLmR1bXBzKGRzbF9waXBlbGluZV9qb2JfZGljdCwgaW5kZW50PTIpKQogICAgcHJpbnQoanNvbi5kdW1wcyhwaXBlbGluZV9qb2JfZGljdCwgaW5kZW50PTIpKQogICAgYXNzZXJ0IGRzbF9waXBlbGluZV9qb2JfZGljdCA9PSBwaXBlbGluZV9qb2JfZGljdAoKCkBweXRlc3QubWFyay51c2VmaXh0dXJlcygKICAgICJlbmFibGVfZW52aXJvbm1lbnRfaWRfYXJtX2V4cGFuc2lvbiIsCiAgICAiZW5hYmxlX3BpcGVsaW5lX3ByaXZhdGVfcHJldmlld19mZWF0dXJlcyIsCiAgICAibW9ja19jb2RlX2hhc2giLAogICAgIm1vY2tfY29tcG9uZW50X2hhc2giLAogICAgIm1vY2tfc2V0X2hlYWRlcnNfd2l0aF91c2VyX2FtbF90b2tlbiIsCiAgICAicmVjb3JkZWRfdGVzdCIsCiAgICAibW9ja19hc3NldF9uYW1lIiwKICAgICJtb2NrX2Fub25fY29tcG9uZW50X3ZlcnNpb24iLAopCkBweXRlc3QubWFyay50aW1lb3V0KHRpbWVvdXQ9X0RTTF9USU1FT1VUX1NFQ09ORCwgbWV0aG9kPV9QWVRFU1RfVElNRU9VVF9NRVRIT0QpCkBweXRlc3QubWFyay5lMmV0ZXN0CkBweXRlc3QubWFyay5waXBlbGluZV90ZXN0CmNsYXNzIFRlc3REU0xQaXBlbGluZVNhbXBsZXMoQXp1cmVSZWNvcmRlZFRlc3RDYXNlKToKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9lMmVfbG9jYWxfY29tcG9uZW50cyhzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5lMmVfbG9jYWxfY29tcG9uZW50cy5waXBlbGluZSBpbXBvcnQgKAogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgZTJlX2xvY2FsX2NvbXBvbmVudHMsCiAgICAgICAgKQoKICAgICAgICBwaXBlbGluZSA9IGUyZV9sb2NhbF9jb21wb25lbnRzKCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9lMmVfcmVnaXN0ZXJlZF9jb21wb25lbnRzKAogICAgICAgIHNlbGYsCiAgICAgICAgY2xpZW50OiBNTENsaWVudCwKICAgICAgICBwaXBlbGluZV9zYW1wbGVzX2UyZV9yZWdpc3RlcmVkX3RyYWluX2NvbXBvbmVudHM6IENvbXBvbmVudEVudGl0eSwKICAgICAgICBwaXBlbGluZV9zYW1wbGVzX2UyZV9yZWdpc3RlcmVkX3Njb3JlX2NvbXBvbmVudHM6IENvbXBvbmVudEVudGl0eSwKICAgICAgICBwaXBlbGluZV9zYW1wbGVzX2UyZV9yZWdpc3RlcmVkX2V2YWxfY29tcG9uZW50czogQ29tcG9uZW50RW50aXR5LAogICAgKSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5lMmVfcmVnaXN0ZXJlZF9jb21wb25lbnRzLnBpcGVsaW5lIGltcG9ydCAoCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBlMmVfcmVnaXN0ZXJlZF9jb21wb25lbnRzLAogICAgICAgICkKCiAgICAgICAgcGlwZWxpbmUgPSBlMmVfcmVnaXN0ZXJlZF9jb21wb25lbnRzKAogICAgICAgICAgICBjbGllbnQ9Y2xpZW50LAogICAgICAgICAgICBwaXBlbGluZV9zYW1wbGVzX2UyZV9yZWdpc3RlcmVkX3RyYWluX2NvbXBvbmVudHM9cGlwZWxpbmVfc2FtcGxlc19lMmVfcmVnaXN0ZXJlZF90cmFpbl9jb21wb25lbnRzLAogICAgICAgICAgICBwaXBlbGluZV9zYW1wbGVzX2UyZV9yZWdpc3RlcmVkX3Njb3JlX2NvbXBvbmVudHM9cGlwZWxpbmVfc2FtcGxlc19lMmVfcmVnaXN0ZXJlZF9zY29yZV9jb21wb25lbnRzLAogICAgICAgICAgICBwaXBlbGluZV9zYW1wbGVzX2UyZV9yZWdpc3RlcmVkX2V2YWxfY29tcG9uZW50cz1waXBlbGluZV9zYW1wbGVzX2UyZV9yZWdpc3RlcmVkX2V2YWxfY29tcG9uZW50cywKICAgICAgICApCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKICAgICAgICAjIG1vdmUgdW5pdCB0ZXN0IGhlcmUgZHVlIHRvIHBlcm1pc3Npb24gcHJvYmxlbQogICAgICAgIGpvYl95YW1sID0gc3RyKHNhbXBsZXNfZGlyIC8gImUyZV9yZWdpc3RlcmVkX2NvbXBvbmVudHMvcGlwZWxpbmUueW1sIikKICAgICAgICBvbWl0X2ZpZWxkcyA9IFsKICAgICAgICAgICAgInByb3BlcnRpZXMuZXhwZXJpbWVudF9uYW1lIiwKICAgICAgICAgICAgIm5hbWUiLAogICAgICAgICAgICAicHJvcGVydGllcy5qb2JzLnRyYWluX2pvYi5jb21wb25lbnRJZCIsCiAgICAgICAgICAgICJwcm9wZXJ0aWVzLmpvYnMuc2NvcmVfam9iLmNvbXBvbmVudElkIiwKICAgICAgICAgICAgInByb3BlcnRpZXMuam9icy5ldmFsdWF0ZV9qb2IuY29tcG9uZW50SWQiLAogICAgICAgICAgICAicHJvcGVydGllcy5qb2JzLnRyYWluX2pvYi5yZXNvdXJjZXMiLCAgIyBqb2IgeWFtbCB3b24ndCBoYXZlIHJlc291cmNlcyBidXQgd2Ugd2lsbCBwYXNzIHRoZW0KICAgICAgICAgICAgInByb3BlcnRpZXMuam9icy5zY29yZV9qb2IucmVzb3VyY2VzIiwKICAgICAgICAgICAgInByb3BlcnRpZXMuam9icy5ldmFsdWF0ZV9qb2IucmVzb3VyY2VzIiwKICAgICAgICAgICAgInByb3BlcnRpZXMuaW5wdXRzLnBpcGVsaW5lX2pvYl90cmFpbmluZ19pbnB1dC51cmkiLAogICAgICAgICAgICAicHJvcGVydGllcy5pbnB1dHMucGlwZWxpbmVfam9iX3Rlc3RfaW5wdXQudXJpIiwKICAgICAgICAgICAgInByb3BlcnRpZXMucHJvcGVydGllcyIsCiAgICAgICAgICAgICJwcm9wZXJ0aWVzLmNvbXB1dGVfaWQiLAogICAgICAgICAgICAicHJvcGVydGllcy5zZXR0aW5ncyIsCiAgICAgICAgXQogICAgICAgIGFzc2VydF9kc2xfY3VyYXRlZChwaXBlbGluZSwgam9iX3lhbWwsIG9taXRfZmllbGRzKQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9iYXNpY19jb21wb25lbnQoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuYmFzaWNfY29tcG9uZW50LnBpcGVsaW5lIGltcG9ydCBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgYmFzaWNfY29tcG9uZW50CgogICAgICAgIHBpcGVsaW5lID0gYmFzaWNfY29tcG9uZW50KCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9jb21wb25lbnRfd2l0aF9pbnB1dF9vdXRwdXQoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuY29tcG9uZW50X3dpdGhfaW5wdXRfb3V0cHV0LnBpcGVsaW5lIGltcG9ydCAoCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBjb21wb25lbnRfd2l0aF9pbnB1dF9vdXRwdXQsCiAgICAgICAgKQoKICAgICAgICBwaXBlbGluZSA9IGNvbXBvbmVudF93aXRoX2lucHV0X291dHB1dCgpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfYmFzaWNfcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuYmFzaWNfcGlwZWxpbmUucGlwZWxpbmUgaW1wb3J0IGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBiYXNpY19waXBlbGluZQoKICAgICAgICBwaXBlbGluZSA9IGJhc2ljX3BpcGVsaW5lKCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9waXBlbGluZV93aXRoX2RhdGEoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUucGlwbGluZV93aXRoX2RhdGEucGlwZWxpbmUgaW1wb3J0IGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBwaXBsaW5lX3dpdGhfZGF0YQoKICAgICAgICBwaXBlbGluZSA9IHBpcGxpbmVfd2l0aF9kYXRhKCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9sb2NhbF9kYXRhX2lucHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmxvY2FsX2RhdGFfaW5wdXQucGlwZWxpbmUgaW1wb3J0IGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBsb2NhbF9kYXRhX2lucHV0CgogICAgICAgIHBpcGVsaW5lID0gbG9jYWxfZGF0YV9pbnB1dCgpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfZGF0YXN0b3JlX2RhdGFwYXRoX3VyaV9mb2xkZXIoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZGF0YXN0b3JlX2RhdGFwYXRoX3VyaV9mb2xkZXIucGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIGRhdGFzdG9yZV9kYXRhcGF0aF91cmlfZm9sZGVyLAogICAgICAgICkKCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhc3RvcmVfZGF0YXBhdGhfdXJpX2ZvbGRlcigpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfZGF0YXN0b3JlX2RhdGFwYXRoX3VyaV9maWxlKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmRhdGFzdG9yZV9kYXRhcGF0aF91cmlfZmlsZS5waXBlbGluZSBpbXBvcnQgKAogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgZGF0YXN0b3JlX2RhdGFwYXRoX3VyaV9maWxlLAogICAgICAgICkKCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhc3RvcmVfZGF0YXBhdGhfdXJpX2ZpbGUoKQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpCgogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QKICAgIGRlZiB0ZXN0X2RhdGFzZXRfaW5wdXQoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZGF0YXNldF9pbnB1dC5waXBlbGluZSBpbXBvcnQgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIGRhdGFzZXRfaW5wdXQKCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhc2V0X2lucHV0KGNsaWVudCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF93ZWJfdXJsX2lucHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLndlYl91cmxfaW5wdXQucGlwZWxpbmUgaW1wb3J0IGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyB3ZWJfdXJsX2lucHV0CgogICAgICAgIHBpcGVsaW5lID0gd2ViX3VybF9pbnB1dCgpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfZW52X3B1YmxpY19kb2NrZXJfaW1hZ2Uoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZW52X3B1YmxpY19kb2NrZXJfaW1hZ2UucGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIGVudl9wdWJsaWNfZG9ja2VyX2ltYWdlLAogICAgICAgICkKCiAgICAgICAgcGlwZWxpbmUgPSBlbnZfcHVibGljX2RvY2tlcl9pbWFnZSgpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfZW52X3JlZ2lzdGVyZWQoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZW52X3JlZ2lzdGVyZWQucGlwZWxpbmUgaW1wb3J0IGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBlbnZfcmVnaXN0ZXJlZAoKICAgICAgICBwaXBlbGluZSA9IGVudl9yZWdpc3RlcmVkKCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9lbnZfY29uZGFfZmlsZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5lbnZfY29uZGFfZmlsZS5waXBlbGluZSBpbXBvcnQgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIGVudl9jb25kYV9maWxlCgogICAgICAgIHBpcGVsaW5lID0gZW52X2NvbmRhX2ZpbGUoKQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpCgogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QKICAgIGRlZiB0ZXN0X3RmX2hlbGxvX3dvcmxkKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLnRmX2hlbGxvX3dvcmxkLnBpcGVsaW5lIGltcG9ydCBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgdGZfaGVsbG9fd29ybGQKCiAgICAgICAgcGlwZWxpbmUgPSB0Zl9oZWxsb193b3JsZCgpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfbXBpX2hlbGxvX3dvcmxkKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLm1waV9oZWxsb193b3JsZC5waXBlbGluZSBpbXBvcnQgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIG1waV9oZWxsb193b3JsZAoKICAgICAgICBwaXBlbGluZSA9IG1waV9oZWxsb193b3JsZCgpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfcHl0b3JjaF9oZWxsb193b3JsZChzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5weXRvcmNoX2hlbGxvX3dvcmxkLnBpcGVsaW5lIGltcG9ydCBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgcHl0b3JjaF9oZWxsb193b3JsZAoKICAgICAgICBwaXBlbGluZSA9IHB5dG9yY2hfaGVsbG9fd29ybGQoKQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpCgogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QKICAgIGRlZiB0ZXN0X255Y190YXhpX2RhdGFfcmVncmVzc2lvbihzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5ueWNfdGF4aV9kYXRhX3JlZ3Jlc3Npb24ucGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIG55Y190YXhpX2RhdGFfcmVncmVzc2lvbiwKICAgICAgICApCgogICAgICAgIHBpcGVsaW5lID0gbnljX3RheGlfZGF0YV9yZWdyZXNzaW9uKCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF90Zl9tbmlzdChzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS50Zl9tbmlzdC5waXBlbGluZSBpbXBvcnQgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIHRmX21uaXN0CgogICAgICAgIHBpcGVsaW5lID0gdGZfbW5pc3QoKQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpCgogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QKICAgIGRlZiB0ZXN0X2UyZV9pbmxpbmVfY29tcG9uZW50cyhzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5lMmVfaW5saW5lX2NvbXBvbmVudHMucGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIGUyZV9pbmxpbmVfY29tcG9uZW50cywKICAgICAgICApCgogICAgICAgIHBpcGVsaW5lID0gZTJlX2lubGluZV9jb21wb25lbnRzKCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay51c2VmaXh0dXJlcygibW9ja19hc3NldF9uYW1lIikKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9jb21tYW5kX2pvYl9pbl9waXBlbGluZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5jb21tYW5kX2pvYl9pbl9waXBlbGluZS5waXBlbGluZSBpbXBvcnQgKAogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgY29tbWFuZF9qb2JfaW5fcGlwZWxpbmUsCiAgICAgICAgKQoKICAgICAgICBwaXBlbGluZSA9IGNvbW1hbmRfam9iX2luX3BpcGVsaW5lKCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9tdWx0aV9wYXJhbGxlbF9jb21wb25lbnRzX3dpdGhfZmlsZV9pbnB1dF9waXBlbGluZV9vdXRwdXQoCiAgICAgICAgc2VsZiwKICAgICAgICBjbGllbnQ6IE1MQ2xpZW50LAogICAgKSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5wYXJhbGxlbF9jb21wb25lbnRfd2l0aF9maWxlX2lucHV0LnBpcGVsaW5lIGltcG9ydCAoCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBwaXBlbGluZV93aXRoX3BhcmFsbGVsX2NvbXBvbmVudHMsCiAgICAgICAgKQoKICAgICAgICBwaXBlbGluZSA9IHBpcGVsaW5lX3dpdGhfcGFyYWxsZWxfY29tcG9uZW50cygpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfcGFyYWxsZWxfY29tcG9uZW50c193aXRoX3RhYnVsYXJfaW5wdXRfcGlwZWxpbmVfb3V0cHV0KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLnBhcmFsbGVsX2NvbXBvbmVudF93aXRoX3RhYnVsYXJfaW5wdXQucGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIHBpcGVsaW5lX3dpdGhfcGFyYWxsZWxfY29tcG9uZW50cywKICAgICAgICApCgogICAgICAgIHBpcGVsaW5lID0gcGlwZWxpbmVfd2l0aF9wYXJhbGxlbF9jb21wb25lbnRzKCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9wYXJhbGxlbF9jb21wb25lbnRzKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLnBhcmFsbGVsX2NvbXBvbmVudC5waXBlbGluZSBpbXBvcnQgKAogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgcGlwZWxpbmVfd2l0aF9wYXJhbGxlbF9jb21wb25lbnRzLAogICAgICAgICkKCiAgICAgICAgcGlwZWxpbmUgPSBwaXBlbGluZV93aXRoX3BhcmFsbGVsX2NvbXBvbmVudHMoKQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpCgogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QKICAgIGRlZiB0ZXN0X2F1dG9tbF9qb2JfaW5fcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuYXV0b21sX2pvYl9pbl9waXBlbGluZS5waXBlbGluZSBpbXBvcnQgKAogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgYXV0b21sX2pvYl9pbl9waXBlbGluZSwKICAgICAgICApCgogICAgICAgIHBpcGVsaW5lID0gYXV0b21sX2pvYl9pbl9waXBlbGluZSgpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfcGlwZWxpbmVfd2l0aF9waXBlbGluZV9jb21wb25lbnQoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUucGlwZWxpbmVfd2l0aF9waXBlbGluZV9jb21wb25lbnQucGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lIGFzIHBpcGVsaW5lX3dpdGhfcGlwZWxpbmVfY29tcG9uZW50LAogICAgICAgICkKCiAgICAgICAgcGlwZWxpbmUgPSBwaXBlbGluZV93aXRoX3BpcGVsaW5lX2NvbXBvbmVudCgpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfcGlwZWxpbmVfd2l0aF9kYXRhX2FzX2lucHV0c19mb3JfcGlwZWxpbmVfY29tcG9uZW50KHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLnBpcGVsaW5lX3dpdGhfcGlwZWxpbmVfY29tcG9uZW50LnBpcGVsaW5lX3dpdGhfZGF0YV9hc19pbnB1dCBpbXBvcnQgKAogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmUgYXMgcGlwZWxpbmVfd2l0aF9waXBlbGluZV9jb21wb25lbnQsCiAgICAgICAgKQoKICAgICAgICBwaXBlbGluZSA9IHBpcGVsaW5lX3dpdGhfcGlwZWxpbmVfY29tcG9uZW50KGNsaWVudCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9zcGFya19qb2JfaW5fcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuc3Bhcmtfam9iX2luX3BpcGVsaW5lLnBpcGVsaW5lIGltcG9ydCAoCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZV9mcm9tX3lhbWwgYXMgc3Bhcmtfam9iX2luX3BpcGVsaW5lLAogICAgICAgICkKCiAgICAgICAgcGlwZWxpbmUgPSBzcGFya19qb2JfaW5fcGlwZWxpbmUoKQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpCgogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QKICAgIGRlZiB0ZXN0X3NwYXJrX2pvYl93aXRoX2J1aWxkZXJfaW5fcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuc3Bhcmtfam9iX2luX3BpcGVsaW5lLnBpcGVsaW5lIGltcG9ydCAoCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZV9mcm9tX2J1aWxkZXIgYXMgc3Bhcmtfam9iX2luX3BpcGVsaW5lLAogICAgICAgICkKCiAgICAgICAgcGlwZWxpbmUgPSBzcGFya19qb2JfaW5fcGlwZWxpbmUoKQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpCgogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QKICAgIGRlZiB0ZXN0X3NwYXJrX2pvYl93aXRoX211bHRpcGxlX25vZGVfaW5fcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuc3Bhcmtfam9iX2luX3BpcGVsaW5lLmttZWFuc19zYW1wbGUucGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lX2Zyb21feWFtbCBhcyBzcGFya19qb2JfaW5fcGlwZWxpbmUsCiAgICAgICAgKQoKICAgICAgICBwaXBlbGluZSA9IHNwYXJrX2pvYl9pbl9waXBlbGluZSgpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3Rfc3Bhcmtfam9iX3dpdGhfYnVpbGRlcl9pbl9waXBlbGluZV93aXRob3V0X2VudHJ5KAogICAgICAgIHNlbGYsCiAgICAgICAgY2xpZW50OiBNTENsaWVudCwKICAgICkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuc3Bhcmtfam9iX2luX3BpcGVsaW5lLmludmFsaWRfcGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lX2Zyb21fYnVpbGRlcl93aXRob3V0X2VudHJ5IGFzIHNwYXJrX2pvYl9pbl9waXBlbGluZSwKICAgICAgICApCgogICAgICAgIHBpcGVsaW5lID0gc3Bhcmtfam9iX2luX3BpcGVsaW5lKCkKICAgICAgICB3aXRoIHB5dGVzdC5yYWlzZXMoRXhjZXB0aW9uKSBhcyBleDoKICAgICAgICAgICAgY3JlYXRlZF9qb2IgPSBjbGllbnQuam9icy5jcmVhdGVfb3JfdXBkYXRlKHBpcGVsaW5lKQoKICAgICAgICBhc3NlcnQgKAogICAgICAgICAgICAne1xuICAicmVzdWx0IjogIkZhaWxlZCIsXG4gICJlcnJvcnMiOiBbXG4gICAge1xuICAgICAgIm1lc3NhZ2UiOiAiTWlzc2luZyBkYXRhIGZvciByZXF1aXJlZCBmaWVsZC4iLCcKICAgICAgICAgICAgJ1xuICAgICAgInBhdGgiOiAiam9icy5hZGRfZ3JlZXRpbmdfY29sdW1uLmNvbXBvbmVudC5lbnRyeSIsXG4gICAgICAidmFsdWUiOiBudWxsXG4gICAgfVxuICBdXG59JwogICAgICAgICAgICA9PSBzdHIoZXgudmFsdWUpCiAgICAgICAgKQoKICAgICAgICB2YWxpZGF0aW9uX3Jlc3VsdCA9IGNsaWVudC5qb2JzLnZhbGlkYXRlKHBpcGVsaW5lKQogICAgICAgIGFzc2VydCB2YWxpZGF0aW9uX3Jlc3VsdC5wYXNzZWQgaXMgRmFsc2UKICAgICAgICBhc3NlcnQgdmFsaWRhdGlvbl9yZXN1bHQuZXJyb3JfbWVzc2FnZXMgPT0gewogICAgICAgICAgICAiam9icy5hZGRfZ3JlZXRpbmdfY29sdW1uLmNvbXBvbmVudC5lbnRyeSI6ICJNaXNzaW5nIGRhdGEgZm9yIHJlcXVpcmVkIGZpZWxkLiIsCiAgICAgICAgfQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9zcGFya19qb2Jfd2l0aF9idWlsZGVyX2luX3BpcGVsaW5lX3dpdGhfZHluYW1pY19hbGxvY2F0aW9uX2Rpc2FibGVkKAogICAgICAgIHNlbGYsCiAgICAgICAgY2xpZW50OiBNTENsaWVudCwKICAgICkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuc3Bhcmtfam9iX2luX3BpcGVsaW5lLmludmFsaWRfcGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lX2Zyb21fYnVpbGRlcl93aXRoX2R5bmFtaWNfYWxsb2NhdGlvbl9kaXNhYmxlZCBhcyBzcGFya19qb2JfaW5fcGlwZWxpbmUsCiAgICAgICAgKQoKICAgICAgICBwaXBlbGluZSA9IHNwYXJrX2pvYl9pbl9waXBlbGluZSgpCiAgICAgICAgd2l0aCBweXRlc3QucmFpc2VzKEV4Y2VwdGlvbikgYXMgZXg6CiAgICAgICAgICAgIGNyZWF0ZWRfam9iID0gY2xpZW50LmpvYnMuY3JlYXRlX29yX3VwZGF0ZShwaXBlbGluZSkKCiAgICAgICAgYXNzZXJ0ICgKICAgICAgICAgICAgJ3tcbiAgInJlc3VsdCI6ICJGYWlsZWQiLFxuICAiZXJyb3JzIjogW1xuICAgIHtcbiAgICAgICJtZXNzYWdlIjogIlNob3VsZCBub3Qgc3BlY2lmeSBtaW4gb3IgbWF4ICcKICAgICAgICAgICAgJ2V4ZWN1dG9ycyB3aGVuIGR5bmFtaWMgYWxsb2NhdGlvbiBpcyBkaXNhYmxlZC4iLFxuJyBpbiBzdHIoZXgudmFsdWUpCiAgICAgICAgKQoKICAgICAgICB2YWxpZGF0aW9uX3Jlc3VsdCA9IGNsaWVudC5qb2JzLnZhbGlkYXRlKHBpcGVsaW5lKQogICAgICAgIGFzc2VydCB2YWxpZGF0aW9uX3Jlc3VsdC5wYXNzZWQgaXMgRmFsc2UKICAgICAgICBhc3NlcnQgdmFsaWRhdGlvbl9yZXN1bHQuZXJyb3JfbWVzc2FnZXMgPT0gewogICAgICAgICAgICAiam9icy5hZGRfZ3JlZXRpbmdfY29sdW1uLmNvbmYiOiAiU2hvdWxkIG5vdCBzcGVjaWZ5IG1pbiBvciBtYXggZXhlY3V0b3JzICIKICAgICAgICAgICAgIndoZW4gZHluYW1pYyBhbGxvY2F0aW9uIGlzIGRpc2FibGVkLiIsCiAgICAgICAgfQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9kYXRhX3RyYW5zZmVyX2NvcHlfMnVyaWZvbGRlcl9qb2JfaW5fcGlwZWxpbmUoc2VsZiwgY2xpZW50OiBNTENsaWVudCkgLT4gTm9uZToKICAgICAgICBmcm9tIHRlc3RfY29uZmlncy5kc2xfcGlwZWxpbmUuZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUuY29weV9kYXRhLnBpcGVsaW5lIGltcG9ydCAoCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZV9mcm9tX3lhbWwgYXMgZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUsCiAgICAgICAgKQoKICAgICAgICBwaXBlbGluZSA9IGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lKCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50LCBza2lwX2NhbmNlbD1UcnVlKQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9kYXRhX3RyYW5zZmVyX2NvcHlfMnVyaWZvbGRlcl9qb2Jfd2l0aF9idWlsZGVyX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lLmNvcHlfZGF0YS5waXBlbGluZSBpbXBvcnQgKAogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmVfZnJvbV9idWlsZGVyIGFzIGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lLAogICAgICAgICkKCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSgpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfZGF0YV90cmFuc2Zlcl9jb3B5X21peHR5cGVfam9iX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lLmNvcHlfZGF0YS5waXBlbGluZSBpbXBvcnQgKAogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmVfY29weV9taXh0eXBlX2Zyb21feWFtbCBhcyBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSwKICAgICAgICApCgogICAgICAgIHBpcGVsaW5lID0gZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUoKQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpCgogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QKICAgIGRlZiB0ZXN0X2RhdGFfdHJhbnNmZXJfY29weV91cmlmaWxlX2pvYl9pbl9waXBlbGluZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5kYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZS5jb3B5X2RhdGEucGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lX2NvcHlfdXJpZmlsZV9mcm9tX3lhbWwgYXMgZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUsCiAgICAgICAgKQoKICAgICAgICBwaXBlbGluZSA9IGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lKCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9kYXRhX3RyYW5zZmVyX2NvcHlfdXJpZm9sZGVyX2pvYl9pbl9waXBlbGluZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5kYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZS5jb3B5X2RhdGEucGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lX2NvcHlfdXJpZm9sZGVyX2Zyb21feWFtbCBhcyBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSwKICAgICAgICApCgogICAgICAgIHBpcGVsaW5lID0gZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUoKQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpCgogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QKICAgIGRlZiB0ZXN0X2RhdGFfdHJhbnNmZXJfaW1wb3J0X2ZpbGVzeXN0ZW1fam9iX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lLmltcG9ydF9maWxlX3N5c3RlbS5waXBlbGluZSBpbXBvcnQgKAogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmVfZnJvbV9idWlsZGVyIGFzIGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lLAogICAgICAgICkKCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSgpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfZGF0YV90cmFuc2Zlcl9pbXBvcnRfc3FsX2RhdGFiYXNlX2pvYl9pbl9waXBlbGluZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5kYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZS5pbXBvcnRfZGF0YWJhc2UucGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lX2Zyb21fYnVpbGRlcl9zcWwgYXMgZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUsCiAgICAgICAgKQoKICAgICAgICBwaXBlbGluZSA9IGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lKCkKICAgICAgICBhc3NlcnRfam9iX2NhbmNlbChwaXBlbGluZSwgY2xpZW50KQoKICAgIEBweXRlc3QubWFyay5lMmV0ZXN0CiAgICBkZWYgdGVzdF9kYXRhX3RyYW5zZmVyX2ltcG9ydF9zbm93Zmxha2VfZGF0YWJhc2Vfam9iX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lLmltcG9ydF9kYXRhYmFzZS5waXBlbGluZSBpbXBvcnQgKAogICAgICAgICAgICBnZW5lcmF0ZV9kc2xfcGlwZWxpbmVfZnJvbV9idWlsZGVyIGFzIGRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lLAogICAgICAgICkKCiAgICAgICAgcGlwZWxpbmUgPSBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSgpCiAgICAgICAgYXNzZXJ0X2pvYl9jYW5jZWwocGlwZWxpbmUsIGNsaWVudCkKCiAgICBAcHl0ZXN0Lm1hcmsuZTJldGVzdAogICAgZGVmIHRlc3RfZGF0YV90cmFuc2Zlcl9leHBvcnRfc3FsX2RhdGFiYXNlX2pvYl9pbl9waXBlbGluZShzZWxmLCBjbGllbnQ6IE1MQ2xpZW50KSAtPiBOb25lOgogICAgICAgIGZyb20gdGVzdF9jb25maWdzLmRzbF9waXBlbGluZS5kYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZS5leHBvcnRfZGF0YWJhc2UucGlwZWxpbmUgaW1wb3J0ICgKICAgICAgICAgICAgZ2VuZXJhdGVfZHNsX3BpcGVsaW5lX2Zyb21fYnVpbGRlciBhcyBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSwKICAgICAgICApCgogICAgICAgIHBpcGVsaW5lID0gZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUoKQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpCgogICAgQHB5dGVzdC5tYXJrLmUyZXRlc3QKICAgIGRlZiB0ZXN0X2RhdGFfdHJhbnNmZXJfbXVsdGlfam9iX2luX3BpcGVsaW5lKHNlbGYsIGNsaWVudDogTUxDbGllbnQpIC0\u002BIE5vbmU6CiAgICAgICAgZnJvbSB0ZXN0X2NvbmZpZ3MuZHNsX3BpcGVsaW5lLmRhdGFfdHJhbnNmZXJfam9iX2luX3BpcGVsaW5lLnBpcGVsaW5lIGltcG9ydCAoCiAgICAgICAgICAgIGdlbmVyYXRlX2RzbF9waXBlbGluZSBhcyBkYXRhX3RyYW5zZmVyX2pvYl9pbl9waXBlbGluZSwKICAgICAgICApCgogICAgICAgIHBpcGVsaW5lID0gZGF0YV90cmFuc2Zlcl9qb2JfaW5fcGlwZWxpbmUoKQogICAgICAgIGFzc2VydF9qb2JfY2FuY2VsKHBpcGVsaW5lLCBjbGllbnQpCg==",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "hmticOSCNGEfz3uj9VsbFA==",
        "Date": "Tue, 30 May 2023 07:29:02 GMT",
        "ETag": "\u00220x8DB60DF8B144AC8\u0022",
        "Last-Modified": "Tue, 30 May 2023 07:29:03 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "GikCCb2TKDY=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/azureml-blobstore-0bdd51b6-cd9c-4978-b870-99997b393b81/LocalUpload/00000000000000000000000000000000/e2etests/test_automl_dsl_pipeline.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "34209",
        "Content-MD5": "7KSIc2nEWBWtt/xkdXjRWw==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 30 May 2023 07:28:59 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": "",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "7KSIc2nEWBWtt/xkdXjRWw==",
        "Date": "Tue, 30 May 2023 07:29:02 GMT",
        "ETag": "\u00220x8DB60DF8B16E277\u0022",
        "Last-Modified": "Tue, 30 May 2023 07:29:03 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "cwNop4tXhvc=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/azureml-blobstore-0bdd51b6-cd9c-4978-b870-99997b393b81/LocalUpload/00000000000000000000000000000000/e2etests/test_controlflow_pipeline.py",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "44729",
        "Content-MD5": "0Yg5NKHT8G0ZIFsOlwemMA==",
        "Content-Type": "application/octet-stream",
        "If-None-Match": "*",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-blob-type": "BlockBlob",
        "x-ms-date": "Tue, 30 May 2023 07:28:59 GMT",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": "\",
      "StatusCode": 201,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Content-MD5": "0Yg5NKHT8G0ZIFsOlwemMA==",
        "Date": "Tue, 30 May 2023 07:29:03 GMT",
        "ETag": "\u00220x8DB60DF8B38E45F\u0022",
        "Last-Modified": "Tue, 30 May 2023 07:29:03 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-content-crc64": "egOK8PjHmdE=",
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://amltest5899420437.blob.core.windows.net/azureml-blobstore-0bdd51b6-cd9c-4978-b870-99997b393b81/LocalUpload/00000000000000000000000000000000/e2etests/__init__.py?comp=metadata",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/xml",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "0",
        "User-Agent": "azsdk-python-storage-blob/12.16.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)",
        "x-ms-date": "Tue, 30 May 2023 07:29:01 GMT",
        "x-ms-meta-name": "4b21f2c9-b56f-4516-af22-4e9639fee990",
        "x-ms-meta-upload_status": "completed",
        "x-ms-meta-version": "ee5444b3-4c3e-48e9-b4b3-bea247a1c903",
        "x-ms-version": "2022-11-02"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Content-Length": "0",
        "Date": "Tue, 30 May 2023 07:29:03 GMT",
        "ETag": "\u00220x8DB60DF8B5C93AF\u0022",
        "Last-Modified": "Tue, 30 May 2023 07:29:03 GMT",
        "Server": [
          "Windows-Azure-Blob/1.0",
          "Microsoft-HTTPAPI/2.0"
        ],
        "x-ms-request-server-encrypted": "true",
        "x-ms-version": "2022-11-02"
      },
      "ResponseBody": null
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/jobs/000000000000000000000?api-version=2023-04-01-preview",
      "RequestMethod": "PUT",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "3487",
        "Content-Type": "application/json",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": {
        "properties": {
          "properties": {},
          "tags": {},
          "displayName": "pipeline_with_do_while",
          "experimentName": "azure-ai-ml",
          "isArchived": false,
          "jobType": "Pipeline",
          "inputs": {
            "component_in_number": {
              "jobInputType": "literal",
              "value": "2"
            },
            "component_in_path": {
              "uri": "azureml://datastores/workspaceblobstore/paths/LocalUpload/00000000000000000000000000000000/e2etests/",
              "jobInputType": "uri_folder"
            }
          },
          "jobs": {
            "do_while_body_pipeline": {
              "name": "do_while_body_pipeline",
              "type": "pipeline",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_number_1": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_path}}"
                }
              },
              "_source": "DSL",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/ae52818b-d81e-44df-aef4-fc6cc33a9d40"
            },
            "do_while_with_pipeline": {
              "body": "${{parent.jobs.do_while_body_pipeline}}",
              "type": "do_while",
              "condition": "is_number_larger_than_zero",
              "mapping": {
                "${{parent.jobs.do_while_body_pipeline.outputs.output_in_number}}": [
                  "component_in_number",
                  "component_in_number_1"
                ],
                "output_in_path": [
                  "component_in_path"
                ]
              },
              "limits": {
                "max_iteration_count": 5
              },
              "_source": "DSL"
            },
            "command_component": {
              "name": "command_component",
              "type": "command",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_number_1": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_path}}"
                }
              },
              "_source": "YAML.COMPONENT",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/744e2b52-597b-47b6-b06b-2cebd143bcdf"
            },
            "do_while_with_command_component": {
              "body": "${{parent.jobs.command_component}}",
              "type": "do_while",
              "condition": "is_number_larger_than_zero",
              "mapping": {
                "output_in_number": [
                  "component_in_number",
                  "component_in_number_1"
                ],
                "output_in_path": [
                  "component_in_path"
                ]
              },
              "limits": {
                "max_iteration_count": 5
              },
              "_source": "DSL"
            },
            "basic_component": {
              "name": "basic_component",
              "type": "pipeline",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.jobs.do_while_body_pipeline.outputs.output_in_number}}"
                },
                "component_in_number_1": {
                  "job_input_type": "literal",
                  "value": "${{parent.jobs.command_component.outputs.output_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.jobs.do_while_body_pipeline.outputs.output_in_path}}"
                }
              },
              "outputs": {
                "output_in_path": {
                  "value": "${{parent.outputs.output_in_path}}",
                  "type": "literal"
                }
              },
              "_source": "DSL",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/ae52818b-d81e-44df-aef4-fc6cc33a9d40"
            }
          },
          "outputs": {
            "output_in_path": {
              "jobOutputType": "uri_folder"
            }
          },
          "settings": {
            "default_compute": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/computes/cpu-cluster",
            "_source": "DSL"
          }
        }
      },
      "StatusCode": 201,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "6879",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 30 May 2023 07:29:04 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/jobs/000000000000000000000?api-version=2023-04-01-preview",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-012a1b62fda8fc189f5a99bd20a8ed5b-5d1fa42560b93afa-01\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus2-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "9b5933d7-b7b7-461d-87a4-2aebceea5223",
        "x-ms-ratelimit-remaining-subscription-writes": "1192",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230530T072905Z:9b5933d7-b7b7-461d-87a4-2aebceea5223",
        "x-request-time": "1.370"
      },
      "ResponseBody": {
        "id": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/jobs/000000000000000000000",
        "name": "000000000000000000000",
        "type": "Microsoft.MachineLearningServices/workspaces/jobs",
        "properties": {
          "description": null,
          "tags": {},
          "properties": {
            "azureml.DevPlatv2": "true",
            "azureml.DatasetAccessMode": "Asset",
            "azureml.runsource": "azureml.PipelineRun",
            "runSource": "MFE",
            "runType": "HTTP",
            "azureml.parameters": "{\u0022component_in_number\u0022:\u00222\u0022}",
            "azureml.continue_on_step_failure": "True",
            "azureml.continue_on_failed_optional_input": "True",
            "azureml.enforceRerun": "False",
            "azureml.defaultComputeName": "cpu-cluster",
            "azureml.defaultDataStoreName": "workspaceblobstore",
            "azureml.pipelineComponent": "pipelinerun"
          },
          "displayName": "pipeline_with_do_while",
          "status": "Preparing",
          "experimentName": "azure-ai-ml",
          "services": {
            "Tracking": {
              "jobServiceType": "Tracking",
              "port": null,
              "endpoint": "azureml://eastus2.api.azureml.ms/mlflow/v1.0/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000?",
              "status": null,
              "errorMessage": null,
              "properties": null,
              "nodes": null
            },
            "Studio": {
              "jobServiceType": "Studio",
              "port": null,
              "endpoint": "https://ml.azure.com/runs/000000000000000000000?wsid=/subscriptions/00000000-0000-0000-0000-000000000/resourcegroups/00000/workspaces/00000",
              "status": null,
              "errorMessage": null,
              "properties": null,
              "nodes": null
            }
          },
          "computeId": null,
          "isArchived": false,
          "identity": null,
          "componentId": null,
          "notificationSetting": null,
          "secretsConfiguration": null,
          "jobType": "Pipeline",
          "settings": {
            "default_compute": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/computes/cpu-cluster",
            "_source": "DSL"
          },
          "jobs": {
            "do_while_body_pipeline": {
              "name": "do_while_body_pipeline",
              "type": "pipeline",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_number_1": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_path}}"
                }
              },
              "_source": "DSL",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/ae52818b-d81e-44df-aef4-fc6cc33a9d40"
            },
            "do_while_with_pipeline": {
              "body": "${{parent.jobs.do_while_body_pipeline}}",
              "type": "do_while",
              "condition": "is_number_larger_than_zero",
              "mapping": {
                "${{parent.jobs.do_while_body_pipeline.outputs.output_in_number}}": [
                  "component_in_number",
                  "component_in_number_1"
                ],
                "output_in_path": [
                  "component_in_path"
                ]
              },
              "limits": {
                "max_iteration_count": 5
              },
              "_source": "DSL"
            },
            "command_component": {
              "name": "command_component",
              "type": "command",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_number_1": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.inputs.component_in_path}}"
                }
              },
              "_source": "YAML.COMPONENT",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/744e2b52-597b-47b6-b06b-2cebd143bcdf"
            },
            "do_while_with_command_component": {
              "body": "${{parent.jobs.command_component}}",
              "type": "do_while",
              "condition": "is_number_larger_than_zero",
              "mapping": {
                "output_in_number": [
                  "component_in_number",
                  "component_in_number_1"
                ],
                "output_in_path": [
                  "component_in_path"
                ]
              },
              "limits": {
                "max_iteration_count": 5
              },
              "_source": "DSL"
            },
            "basic_component": {
              "name": "basic_component",
              "type": "pipeline",
              "inputs": {
                "component_in_number": {
                  "job_input_type": "literal",
                  "value": "${{parent.jobs.do_while_body_pipeline.outputs.output_in_number}}"
                },
                "component_in_number_1": {
                  "job_input_type": "literal",
                  "value": "${{parent.jobs.command_component.outputs.output_in_number}}"
                },
                "component_in_path": {
                  "job_input_type": "literal",
                  "value": "${{parent.jobs.do_while_body_pipeline.outputs.output_in_path}}"
                }
              },
              "outputs": {
                "output_in_path": {
                  "value": "${{parent.outputs.output_in_path}}",
                  "type": "literal"
                }
              },
              "_source": "DSL",
              "componentId": "/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/components/azureml_anonymous/versions/ae52818b-d81e-44df-aef4-fc6cc33a9d40"
            }
          },
          "inputs": {
            "component_in_number": {
              "description": null,
              "jobInputType": "literal",
              "value": "2"
            },
            "component_in_path": {
              "description": null,
              "uri": "azureml://datastores/workspaceblobstore/paths/LocalUpload/00000000000000000000000000000000/e2etests/",
              "mode": "ReadOnlyMount",
              "jobInputType": "uri_folder"
            }
          },
          "outputs": {
            "output_in_path": {
              "description": null,
              "uri": null,
              "assetName": null,
              "assetVersion": null,
              "mode": "ReadWriteMount",
              "autoDeleteSetting": null,
              "jobOutputType": "uri_folder"
            }
          },
          "sourceJobId": null
        },
        "systemData": {
          "createdAt": "2023-05-30T07:29:05.1551035\u002B00:00",
          "createdBy": "Chenyang Zhang",
          "createdByType": "User"
        }
      }
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/resourceGroups/00000/providers/Microsoft.MachineLearningServices/workspaces/00000/jobs/000000000000000000000/cancel?api-version=2023-04-01-preview",
      "RequestMethod": "POST",
      "RequestHeaders": {
        "Accept": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "Content-Length": "0",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 202,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "4",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 30 May 2023 07:29:07 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/eastus2/mfeOperationResults/jc:0bdd51b6-cd9c-4978-b870-99997b393b81:000000000000000000000?api-version=2023-04-01-preview",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus2-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-async-operation-timeout": "PT1H",
        "x-ms-correlation-request-id": "47d56798-d815-4649-967a-4f536fd81b83",
        "x-ms-ratelimit-remaining-subscription-writes": "1198",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230530T072908Z:47d56798-d815-4649-967a-4f536fd81b83",
        "x-request-time": "0.561"
      },
      "ResponseBody": "null"
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/eastus2/mfeOperationResults/jc:0bdd51b6-cd9c-4978-b870-99997b393b81:000000000000000000000?api-version=2023-04-01-preview",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "*/*",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 202,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "2",
        "Content-Type": "application/json; charset=utf-8",
        "Date": "Tue, 30 May 2023 07:29:07 GMT",
        "Expires": "-1",
        "Location": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/eastus2/mfeOperationResults/jc:0bdd51b6-cd9c-4978-b870-99997b393b81:000000000000000000000?api-version=2023-04-01-preview",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus2-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "693c6203-2c77-4f8f-a3e5-e440f9f49dda",
        "x-ms-ratelimit-remaining-subscription-reads": "11997",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230530T072908Z:693c6203-2c77-4f8f-a3e5-e440f9f49dda",
        "x-request-time": "0.025"
      },
      "ResponseBody": {}
    },
    {
      "RequestUri": "https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000/providers/Microsoft.MachineLearningServices/locations/eastus2/mfeOperationResults/jc:0bdd51b6-cd9c-4978-b870-99997b393b81:000000000000000000000?api-version=2023-04-01-preview",
      "RequestMethod": "GET",
      "RequestHeaders": {
        "Accept": "*/*",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "keep-alive",
        "User-Agent": "azure-ai-ml/1.8.0 azsdk-python-mgmt-machinelearningservices/0.1.0 Python/3.8.12 (Windows-10-10.0.22621-SP0)"
      },
      "RequestBody": null,
      "StatusCode": 200,
      "ResponseHeaders": {
        "Cache-Control": "no-cache",
        "Content-Length": "0",
        "Date": "Tue, 30 May 2023 07:29:38 GMT",
        "Expires": "-1",
        "Pragma": "no-cache",
        "Request-Context": "appId=cid-v1:2d2e8e63-272e-4b3c-8598-4ee570a0e70d",
        "Server-Timing": "traceparent;desc=\u002200-bc70a2570d5be96e0891db9523f87efa-1db67e0fcf557fe1-00\u0022",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "x-aml-cluster": "vienna-eastus2-01",
        "X-Content-Type-Options": "nosniff",
        "x-ms-correlation-request-id": "51a8eed5-4590-4ce0-96ce-c34bedf99fcb",
        "x-ms-ratelimit-remaining-subscription-reads": "11996",
        "x-ms-response-type": "standard",
        "x-ms-routing-request-id": "JAPANEAST:20230530T072939Z:51a8eed5-4590-4ce0-96ce-c34bedf99fcb",
        "x-request-time": "0.056"
      },
      "ResponseBody": null
    }
  ],
  "Variables": {}
}
