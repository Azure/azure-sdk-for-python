# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, AsyncIterable, Callable, Dict, IO, List, Optional, TypeVar, Union, overload

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._runs_operations import (
    build_add_or_modify_by_experiment_id_request,
    build_add_or_modify_by_experiment_name_request,
    build_add_or_modify_experiment_request,
    build_add_or_modify_run_service_instances_request,
    build_add_request,
    build_batch_add_or_modify_by_experiment_id_request,
    build_batch_add_or_modify_by_experiment_name_request,
    build_batch_get_run_data_request,
    build_cancel_run_with_uri_by_experiment_id_request,
    build_cancel_run_with_uri_by_experiment_name_request,
    build_delete_run_services_by_experiment_id_request,
    build_delete_run_services_by_experiment_name_request,
    build_delete_run_services_request,
    build_delete_tags_by_experiment_id_request,
    build_delete_tags_by_experiment_name_request,
    build_delete_tags_request,
    build_get_by_experiment_id_request,
    build_get_by_experiment_name_request,
    build_get_by_ids_by_experiment_id_request,
    build_get_by_ids_by_experiment_name_request,
    build_get_by_query_by_experiment_id_request,
    build_get_by_query_by_experiment_name_request,
    build_get_child_by_experiment_id_request,
    build_get_child_by_experiment_name_request,
    build_get_child_request,
    build_get_details_by_experiment_id_request,
    build_get_details_by_experiment_name_request,
    build_get_details_request,
    build_get_request,
    build_get_run_data_request,
    build_get_run_service_instances_request,
    build_modify_or_delete_tags_by_experiment_id_request,
    build_modify_or_delete_tags_by_experiment_name_request,
)

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class RunsOperations:  # pylint: disable=too-many-public-methods
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.machinelearningservices.aio.AzureMachineLearningWorkspaces`'s
        :attr:`runs` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def get_child_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_name: str,
        filter: Optional[str] = None,
        continuationtoken: Optional[str] = None,
        orderby: Optional[List[str]] = None,
        sortorder: Optional[Union[str, _models.SortOrderDirection]] = None,
        top: Optional[int] = None,
        count: Optional[bool] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.Run"]:
        """get_child_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_name: Required.
        :type experiment_name: str
        :param filter: Allows for filtering the collection of resources.
         The expression specified is evaluated for each resource in the collection, and only items
         where the expression evaluates to true are included in the response. Default value is None.
        :type filter: str
        :param continuationtoken: The continuation token to use for getting the next set of resources.
         Default value is None.
        :type continuationtoken: str
        :param orderby: The list of resource properties to use for sorting the requested resources.
         Default value is None.
        :type orderby: list[str]
        :param sortorder: The sort order of the returned resources. Not used, specify asc or desc after
         each property name in the OrderBy parameter. Known values are: "Asc" and "Desc". Default value
         is None.
        :type sortorder: str or ~azure.mgmt.machinelearningservices.models.SortOrderDirection
        :param top: The maximum number of items in the resource collection to be included in the
         result.
         If not specified, all items are returned. Default value is None.
        :type top: int
        :param count: Whether to include a count of the matching resources along with the resources
         returned in the response. Default value is None.
        :type count: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either Run or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.machinelearningservices.models.Run]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.PaginatedRunList] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_get_child_by_experiment_name_request(
                    subscription_id=subscription_id,
                    resource_group_name=resource_group_name,
                    workspace_name=workspace_name,
                    run_id=run_id,
                    experiment_name=experiment_name,
                    filter=filter,
                    continuationtoken=continuationtoken,
                    orderby=orderby,
                    sortorder=sortorder,
                    top=top,
                    count=count,
                    template_url=self.get_child_by_experiment_name.metadata["url"],
                    headers=_headers,
                    params=_params,
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)

            else:
                request = HttpRequest("GET", next_link)
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("PaginatedRunList", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    get_child_by_experiment_name.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/children"
    }

    @distributed_trace
    def get_child_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_id: str,
        filter: Optional[str] = None,
        continuationtoken: Optional[str] = None,
        orderby: Optional[List[str]] = None,
        sortorder: Optional[Union[str, _models.SortOrderDirection]] = None,
        top: Optional[int] = None,
        count: Optional[bool] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.Run"]:
        """get_child_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_id: Required.
        :type experiment_id: str
        :param filter: Allows for filtering the collection of resources.
         The expression specified is evaluated for each resource in the collection, and only items
         where the expression evaluates to true are included in the response. Default value is None.
        :type filter: str
        :param continuationtoken: The continuation token to use for getting the next set of resources.
         Default value is None.
        :type continuationtoken: str
        :param orderby: The list of resource properties to use for sorting the requested resources.
         Default value is None.
        :type orderby: list[str]
        :param sortorder: The sort order of the returned resources. Not used, specify asc or desc after
         each property name in the OrderBy parameter. Known values are: "Asc" and "Desc". Default value
         is None.
        :type sortorder: str or ~azure.mgmt.machinelearningservices.models.SortOrderDirection
        :param top: The maximum number of items in the resource collection to be included in the
         result.
         If not specified, all items are returned. Default value is None.
        :type top: int
        :param count: Whether to include a count of the matching resources along with the resources
         returned in the response. Default value is None.
        :type count: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either Run or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.machinelearningservices.models.Run]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.PaginatedRunList] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_get_child_by_experiment_id_request(
                    subscription_id=subscription_id,
                    resource_group_name=resource_group_name,
                    workspace_name=workspace_name,
                    run_id=run_id,
                    experiment_id=experiment_id,
                    filter=filter,
                    continuationtoken=continuationtoken,
                    orderby=orderby,
                    sortorder=sortorder,
                    top=top,
                    count=count,
                    template_url=self.get_child_by_experiment_id.metadata["url"],
                    headers=_headers,
                    params=_params,
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)

            else:
                request = HttpRequest("GET", next_link)
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("PaginatedRunList", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    get_child_by_experiment_id.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experimentids/{experimentId}/runs/{runId}/children"
    }

    @distributed_trace
    def get_child(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        filter: Optional[str] = None,
        continuationtoken: Optional[str] = None,
        orderby: Optional[List[str]] = None,
        sortorder: Optional[Union[str, _models.SortOrderDirection]] = None,
        top: Optional[int] = None,
        count: Optional[bool] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.Run"]:
        """get_child.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param filter: Allows for filtering the collection of resources.
         The expression specified is evaluated for each resource in the collection, and only items
         where the expression evaluates to true are included in the response. Default value is None.
        :type filter: str
        :param continuationtoken: The continuation token to use for getting the next set of resources.
         Default value is None.
        :type continuationtoken: str
        :param orderby: The list of resource properties to use for sorting the requested resources.
         Default value is None.
        :type orderby: list[str]
        :param sortorder: The sort order of the returned resources. Not used, specify asc or desc after
         each property name in the OrderBy parameter. Known values are: "Asc" and "Desc". Default value
         is None.
        :type sortorder: str or ~azure.mgmt.machinelearningservices.models.SortOrderDirection
        :param top: The maximum number of items in the resource collection to be included in the
         result.
         If not specified, all items are returned. Default value is None.
        :type top: int
        :param count: Whether to include a count of the matching resources along with the resources
         returned in the response. Default value is None.
        :type count: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either Run or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.machinelearningservices.models.Run]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.PaginatedRunList] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_get_child_request(
                    subscription_id=subscription_id,
                    resource_group_name=resource_group_name,
                    workspace_name=workspace_name,
                    run_id=run_id,
                    filter=filter,
                    continuationtoken=continuationtoken,
                    orderby=orderby,
                    sortorder=sortorder,
                    top=top,
                    count=count,
                    template_url=self.get_child.metadata["url"],
                    headers=_headers,
                    params=_params,
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)

            else:
                request = HttpRequest("GET", next_link)
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("PaginatedRunList", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    get_child.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/runs/{runId}/children"
    }

    @distributed_trace_async
    async def get_details_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_id: str,
        **kwargs: Any
    ) -> _models.RunDetails:
        """get_details_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_id: Required.
        :type experiment_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RunDetails or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.RunDetails
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.RunDetails] = kwargs.pop("cls", None)

        request = build_get_details_by_experiment_id_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            run_id=run_id,
            experiment_id=experiment_id,
            template_url=self.get_details_by_experiment_id.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("RunDetails", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_details_by_experiment_id.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experimentids/{experimentId}/runs/{runId}/details"
    }

    @distributed_trace_async
    async def get_details_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_name: str,
        **kwargs: Any
    ) -> _models.RunDetails:
        """get_details_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_name: Required.
        :type experiment_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RunDetails or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.RunDetails
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.RunDetails] = kwargs.pop("cls", None)

        request = build_get_details_by_experiment_name_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            run_id=run_id,
            experiment_name=experiment_name,
            template_url=self.get_details_by_experiment_name.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("RunDetails", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_details_by_experiment_name.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/details"
    }

    @distributed_trace_async
    async def get_details(
        self, subscription_id: str, resource_group_name: str, workspace_name: str, run_id: str, **kwargs: Any
    ) -> _models.RunDetails:
        """get_details.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RunDetails or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.RunDetails
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.RunDetails] = kwargs.pop("cls", None)

        request = build_get_details_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            run_id=run_id,
            template_url=self.get_details.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("RunDetails", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_details.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/runs/{runId}/details"
    }

    @overload
    async def get_run_data(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[_models.GetRunDataRequest] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.GetRunDataResult:
        """get_run_data.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.GetRunDataRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: GetRunDataResult or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.GetRunDataResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def get_run_data(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.GetRunDataResult:
        """get_run_data.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: GetRunDataResult or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.GetRunDataResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def get_run_data(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[Union[_models.GetRunDataRequest, IO]] = None,
        **kwargs: Any
    ) -> _models.GetRunDataResult:
        """get_run_data.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Is either a GetRunDataRequest type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.GetRunDataRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: GetRunDataResult or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.GetRunDataResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.GetRunDataResult] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "GetRunDataRequest")
            else:
                _json = None

        request = build_get_run_data_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.get_run_data.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("GetRunDataResult", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_run_data.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/rundata"
    }

    @overload
    async def batch_get_run_data(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[_models.BatchRequest1] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.BatchResult1:
        """batch_get_run_data.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.BatchRequest1
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchResult1 or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchResult1
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def batch_get_run_data(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.BatchResult1:
        """batch_get_run_data.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchResult1 or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchResult1
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def batch_get_run_data(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[Union[_models.BatchRequest1, IO]] = None,
        **kwargs: Any
    ) -> _models.BatchResult1:
        """batch_get_run_data.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param body: Is either a BatchRequest1 type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.BatchRequest1 or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchResult1 or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchResult1
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.BatchResult1] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "BatchRequest1")
            else:
                _json = None

        request = build_batch_get_run_data_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.batch_get_run_data.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 207]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if response.status_code == 200:
            deserialized = self._deserialize("BatchResult1", pipeline_response)

        if response.status_code == 207:
            deserialized = self._deserialize("BatchResult1", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})  # type: ignore

        return deserialized  # type: ignore

    batch_get_run_data.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/batchrundata"
    }

    @overload
    async def batch_add_or_modify_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        experiment_id: str,
        body: Optional[_models.BatchAddOrModifyRunRequest] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.BatchRunResult:
        """batch_add_or_modify_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param experiment_id: Required.
        :type experiment_id: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.BatchAddOrModifyRunRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchRunResult or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchRunResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def batch_add_or_modify_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        experiment_id: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.BatchRunResult:
        """batch_add_or_modify_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param experiment_id: Required.
        :type experiment_id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchRunResult or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchRunResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def batch_add_or_modify_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        experiment_id: str,
        body: Optional[Union[_models.BatchAddOrModifyRunRequest, IO]] = None,
        **kwargs: Any
    ) -> _models.BatchRunResult:
        """batch_add_or_modify_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param experiment_id: Required.
        :type experiment_id: str
        :param body: Is either a BatchAddOrModifyRunRequest type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.BatchAddOrModifyRunRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchRunResult or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchRunResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.BatchRunResult] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "BatchAddOrModifyRunRequest")
            else:
                _json = None

        request = build_batch_add_or_modify_by_experiment_id_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            experiment_id=experiment_id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.batch_add_or_modify_by_experiment_id.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("BatchRunResult", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    batch_add_or_modify_by_experiment_id.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experimentids/{experimentId}/batch/runs"
    }

    @overload
    async def batch_add_or_modify_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        experiment_name: str,
        body: Optional[_models.BatchAddOrModifyRunRequest] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.BatchRunResult:
        """batch_add_or_modify_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param experiment_name: Required.
        :type experiment_name: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.BatchAddOrModifyRunRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchRunResult or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchRunResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def batch_add_or_modify_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        experiment_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.BatchRunResult:
        """batch_add_or_modify_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param experiment_name: Required.
        :type experiment_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchRunResult or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchRunResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def batch_add_or_modify_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        experiment_name: str,
        body: Optional[Union[_models.BatchAddOrModifyRunRequest, IO]] = None,
        **kwargs: Any
    ) -> _models.BatchRunResult:
        """batch_add_or_modify_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param experiment_name: Required.
        :type experiment_name: str
        :param body: Is either a BatchAddOrModifyRunRequest type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.BatchAddOrModifyRunRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchRunResult or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchRunResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.BatchRunResult] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "BatchAddOrModifyRunRequest")
            else:
                _json = None

        request = build_batch_add_or_modify_by_experiment_name_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            experiment_name=experiment_name,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.batch_add_or_modify_by_experiment_name.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("BatchRunResult", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    batch_add_or_modify_by_experiment_name.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/batch/runs"
    }

    @overload
    async def add_or_modify_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_name: str,
        body: Optional[_models.CreateRun] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Run:
        """add_or_modify_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_name: Required.
        :type experiment_name: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.CreateRun
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def add_or_modify_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Run:
        """add_or_modify_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_name: Required.
        :type experiment_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def add_or_modify_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_name: str,
        body: Optional[Union[_models.CreateRun, IO]] = None,
        **kwargs: Any
    ) -> _models.Run:
        """add_or_modify_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_name: Required.
        :type experiment_name: str
        :param body: Is either a CreateRun type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.CreateRun or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Run] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "CreateRun")
            else:
                _json = None

        request = build_add_or_modify_by_experiment_name_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            run_id=run_id,
            experiment_name=experiment_name,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.add_or_modify_by_experiment_name.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Run", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    add_or_modify_by_experiment_name.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}"
    }

    @distributed_trace_async
    async def get_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_name: str,
        **kwargs: Any
    ) -> _models.Run:
        """get_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_name: Required.
        :type experiment_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.Run] = kwargs.pop("cls", None)

        request = build_get_by_experiment_name_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            run_id=run_id,
            experiment_name=experiment_name,
            template_url=self.get_by_experiment_name.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Run", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_by_experiment_name.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}"
    }

    @overload
    async def add_or_modify_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_id: str,
        body: Optional[_models.CreateRun] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Run:
        """add_or_modify_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_id: Required.
        :type experiment_id: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.CreateRun
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def add_or_modify_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_id: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Run:
        """add_or_modify_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_id: Required.
        :type experiment_id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def add_or_modify_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_id: str,
        body: Optional[Union[_models.CreateRun, IO]] = None,
        **kwargs: Any
    ) -> _models.Run:
        """add_or_modify_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_id: Required.
        :type experiment_id: str
        :param body: Is either a CreateRun type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.CreateRun or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Run] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "CreateRun")
            else:
                _json = None

        request = build_add_or_modify_by_experiment_id_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            run_id=run_id,
            experiment_id=experiment_id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.add_or_modify_by_experiment_id.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Run", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    add_or_modify_by_experiment_id.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experimentids/{experimentId}/runs/{runId}"
    }

    @distributed_trace_async
    async def get_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_id: str,
        **kwargs: Any
    ) -> _models.Run:
        """get_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_id: Required.
        :type experiment_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.Run] = kwargs.pop("cls", None)

        request = build_get_by_experiment_id_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            run_id=run_id,
            experiment_id=experiment_id,
            template_url=self.get_by_experiment_id.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Run", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_by_experiment_id.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experimentids/{experimentId}/runs/{runId}"
    }

    @overload
    async def add_or_modify_experiment(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        body: Optional[_models.CreateRun] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Run:
        """add_or_modify_experiment.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.CreateRun
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def add_or_modify_experiment(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Run:
        """add_or_modify_experiment.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def add_or_modify_experiment(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        body: Optional[Union[_models.CreateRun, IO]] = None,
        **kwargs: Any
    ) -> _models.Run:
        """add_or_modify_experiment.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param body: Is either a CreateRun type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.CreateRun or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Run] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "CreateRun")
            else:
                _json = None

        request = build_add_or_modify_experiment_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            run_id=run_id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.add_or_modify_experiment.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Run", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    add_or_modify_experiment.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/runs/{runId}"
    }

    @overload
    async def add(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        body: Optional[_models.CreateRun] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Run:
        """add.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.CreateRun
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def add(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Run:
        """add.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def add(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        body: Optional[Union[_models.CreateRun, IO]] = None,
        **kwargs: Any
    ) -> _models.Run:
        """add.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param body: Is either a CreateRun type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.CreateRun or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Run] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "CreateRun")
            else:
                _json = None

        request = build_add_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            run_id=run_id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.add.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Run", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    add.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/runs/{runId}"
    }

    @distributed_trace_async
    async def get(
        self, subscription_id: str, resource_group_name: str, workspace_name: str, run_id: str, **kwargs: Any
    ) -> _models.Run:
        """get.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.Run] = kwargs.pop("cls", None)

        request = build_get_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            run_id=run_id,
            template_url=self.get.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Run", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/runs/{runId}"
    }

    @overload
    async def delete_tags_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_id: str,
        body: Optional[List[str]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Run:
        """delete_tags_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_id: Required.
        :type experiment_id: str
        :param body: Default value is None.
        :type body: list[str]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def delete_tags_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_id: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Run:
        """delete_tags_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_id: Required.
        :type experiment_id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def delete_tags_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_id: str,
        body: Optional[Union[List[str], IO]] = None,
        **kwargs: Any
    ) -> _models.Run:
        """delete_tags_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_id: Required.
        :type experiment_id: str
        :param body: Is either a [str] type or a IO type. Default value is None.
        :type body: list[str] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Run] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "[str]")
            else:
                _json = None

        request = build_delete_tags_by_experiment_id_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            run_id=run_id,
            experiment_id=experiment_id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.delete_tags_by_experiment_id.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Run", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    delete_tags_by_experiment_id.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experimentids/{experimentId}/runs/{runId}/tags"
    }

    @overload
    async def modify_or_delete_tags_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_id: str,
        body: Optional[_models.DeleteOrModifyTags] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Run:
        """modify_or_delete_tags_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_id: Required.
        :type experiment_id: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.DeleteOrModifyTags
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def modify_or_delete_tags_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_id: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Run:
        """modify_or_delete_tags_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_id: Required.
        :type experiment_id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def modify_or_delete_tags_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_id: str,
        body: Optional[Union[_models.DeleteOrModifyTags, IO]] = None,
        **kwargs: Any
    ) -> _models.Run:
        """modify_or_delete_tags_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_id: Required.
        :type experiment_id: str
        :param body: Is either a DeleteOrModifyTags type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.DeleteOrModifyTags or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Run] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "DeleteOrModifyTags")
            else:
                _json = None

        request = build_modify_or_delete_tags_by_experiment_id_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            run_id=run_id,
            experiment_id=experiment_id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.modify_or_delete_tags_by_experiment_id.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Run", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    modify_or_delete_tags_by_experiment_id.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experimentids/{experimentId}/runs/{runId}/tags"
    }

    @overload
    async def delete_tags_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_name: str,
        body: Optional[List[str]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Run:
        """delete_tags_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_name: Required.
        :type experiment_name: str
        :param body: Default value is None.
        :type body: list[str]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def delete_tags_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Run:
        """delete_tags_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_name: Required.
        :type experiment_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def delete_tags_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_name: str,
        body: Optional[Union[List[str], IO]] = None,
        **kwargs: Any
    ) -> _models.Run:
        """delete_tags_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_name: Required.
        :type experiment_name: str
        :param body: Is either a [str] type or a IO type. Default value is None.
        :type body: list[str] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Run] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "[str]")
            else:
                _json = None

        request = build_delete_tags_by_experiment_name_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            run_id=run_id,
            experiment_name=experiment_name,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.delete_tags_by_experiment_name.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Run", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    delete_tags_by_experiment_name.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/tags"
    }

    @overload
    async def modify_or_delete_tags_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_name: str,
        body: Optional[_models.DeleteOrModifyTags] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Run:
        """modify_or_delete_tags_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_name: Required.
        :type experiment_name: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.DeleteOrModifyTags
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def modify_or_delete_tags_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Run:
        """modify_or_delete_tags_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_name: Required.
        :type experiment_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def modify_or_delete_tags_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_name: str,
        body: Optional[Union[_models.DeleteOrModifyTags, IO]] = None,
        **kwargs: Any
    ) -> _models.Run:
        """modify_or_delete_tags_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_name: Required.
        :type experiment_name: str
        :param body: Is either a DeleteOrModifyTags type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.DeleteOrModifyTags or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Run] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "DeleteOrModifyTags")
            else:
                _json = None

        request = build_modify_or_delete_tags_by_experiment_name_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            run_id=run_id,
            experiment_name=experiment_name,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.modify_or_delete_tags_by_experiment_name.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Run", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    modify_or_delete_tags_by_experiment_name.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/tags"
    }

    @overload
    async def delete_tags(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        body: Optional[List[str]] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Run:
        """delete_tags.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param body: Default value is None.
        :type body: list[str]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def delete_tags(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Run:
        """delete_tags.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def delete_tags(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        body: Optional[Union[List[str], IO]] = None,
        **kwargs: Any
    ) -> _models.Run:
        """delete_tags.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param body: Is either a [str] type or a IO type. Default value is None.
        :type body: list[str] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Run] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "[str]")
            else:
                _json = None

        request = build_delete_tags_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            run_id=run_id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.delete_tags.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Run", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    delete_tags.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/runs/{runId}/tags"
    }

    @overload
    async def delete_run_services_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_id: str,
        body: Optional[_models.DeleteRunServices] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Run:
        """delete_run_services_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_id: Required.
        :type experiment_id: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.DeleteRunServices
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def delete_run_services_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_id: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Run:
        """delete_run_services_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_id: Required.
        :type experiment_id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def delete_run_services_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_id: str,
        body: Optional[Union[_models.DeleteRunServices, IO]] = None,
        **kwargs: Any
    ) -> _models.Run:
        """delete_run_services_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_id: Required.
        :type experiment_id: str
        :param body: Is either a DeleteRunServices type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.DeleteRunServices or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Run] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "DeleteRunServices")
            else:
                _json = None

        request = build_delete_run_services_by_experiment_id_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            run_id=run_id,
            experiment_id=experiment_id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.delete_run_services_by_experiment_id.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Run", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    delete_run_services_by_experiment_id.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experimentids/{experimentId}/runs/{runId}/services"
    }

    @overload
    async def delete_run_services_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_name: str,
        body: Optional[_models.DeleteRunServices] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Run:
        """delete_run_services_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_name: Required.
        :type experiment_name: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.DeleteRunServices
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def delete_run_services_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Run:
        """delete_run_services_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_name: Required.
        :type experiment_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def delete_run_services_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_name: str,
        body: Optional[Union[_models.DeleteRunServices, IO]] = None,
        **kwargs: Any
    ) -> _models.Run:
        """delete_run_services_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_name: Required.
        :type experiment_name: str
        :param body: Is either a DeleteRunServices type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.DeleteRunServices or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Run] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "DeleteRunServices")
            else:
                _json = None

        request = build_delete_run_services_by_experiment_name_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            run_id=run_id,
            experiment_name=experiment_name,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.delete_run_services_by_experiment_name.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Run", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    delete_run_services_by_experiment_name.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/services"
    }

    @overload
    async def delete_run_services(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        body: Optional[_models.DeleteRunServices] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Run:
        """delete_run_services.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.DeleteRunServices
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def delete_run_services(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Run:
        """delete_run_services.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def delete_run_services(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        body: Optional[Union[_models.DeleteRunServices, IO]] = None,
        **kwargs: Any
    ) -> _models.Run:
        """delete_run_services.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param body: Is either a DeleteRunServices type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.DeleteRunServices or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Run] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "DeleteRunServices")
            else:
                _json = None

        request = build_delete_run_services_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            run_id=run_id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.delete_run_services.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Run", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    delete_run_services.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/runs/{runId}/services"
    }

    @overload
    async def add_or_modify_run_service_instances(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        node_id: int,
        body: Optional[_models.AddOrModifyRunServiceInstancesRequest] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.RunServiceInstances:
        """add_or_modify_run_service_instances.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param node_id: Required.
        :type node_id: int
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.AddOrModifyRunServiceInstancesRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RunServiceInstances or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.RunServiceInstances
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def add_or_modify_run_service_instances(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        node_id: int,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.RunServiceInstances:
        """add_or_modify_run_service_instances.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param node_id: Required.
        :type node_id: int
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RunServiceInstances or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.RunServiceInstances
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def add_or_modify_run_service_instances(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        node_id: int,
        body: Optional[Union[_models.AddOrModifyRunServiceInstancesRequest, IO]] = None,
        **kwargs: Any
    ) -> _models.RunServiceInstances:
        """add_or_modify_run_service_instances.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param node_id: Required.
        :type node_id: int
        :param body: Is either a AddOrModifyRunServiceInstancesRequest type or a IO type. Default value
         is None.
        :type body: ~azure.mgmt.machinelearningservices.models.AddOrModifyRunServiceInstancesRequest or
         IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RunServiceInstances or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.RunServiceInstances
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.RunServiceInstances] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "AddOrModifyRunServiceInstancesRequest")
            else:
                _json = None

        request = build_add_or_modify_run_service_instances_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            run_id=run_id,
            node_id=node_id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.add_or_modify_run_service_instances.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("RunServiceInstances", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    add_or_modify_run_service_instances.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/runs/{runId}/serviceinstances/{nodeId}"
    }

    @distributed_trace_async
    async def get_run_service_instances(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        node_id: int,
        **kwargs: Any
    ) -> _models.RunServiceInstances:
        """get_run_service_instances.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param node_id: Required.
        :type node_id: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RunServiceInstances or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.RunServiceInstances
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.RunServiceInstances] = kwargs.pop("cls", None)

        request = build_get_run_service_instances_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            run_id=run_id,
            node_id=node_id,
            template_url=self.get_run_service_instances.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("RunServiceInstances", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_run_service_instances.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/runs/{runId}/serviceinstances/{nodeId}"
    }

    @overload
    def get_by_query_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        experiment_name: str,
        body: Optional[_models.QueryParams] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncIterable["_models.Run"]:
        """get_by_query_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param experiment_name: Required.
        :type experiment_name: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.QueryParams
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either Run or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.machinelearningservices.models.Run]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def get_by_query_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        experiment_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncIterable["_models.Run"]:
        """get_by_query_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param experiment_name: Required.
        :type experiment_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either Run or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.machinelearningservices.models.Run]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def get_by_query_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        experiment_name: str,
        body: Optional[Union[_models.QueryParams, IO]] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.Run"]:
        """get_by_query_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param experiment_name: Required.
        :type experiment_name: str
        :param body: Is either a QueryParams type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.QueryParams or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either Run or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.machinelearningservices.models.Run]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.PaginatedRunList] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})
        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "QueryParams")
            else:
                _json = None

        def prepare_request(next_link=None):
            if not next_link:

                request = build_get_by_query_by_experiment_name_request(
                    subscription_id=subscription_id,
                    resource_group_name=resource_group_name,
                    workspace_name=workspace_name,
                    experiment_name=experiment_name,
                    content_type=content_type,
                    json=_json,
                    content=_content,
                    template_url=self.get_by_query_by_experiment_name.metadata["url"],
                    headers=_headers,
                    params=_params,
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)

            else:
                request = HttpRequest("GET", next_link)
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("PaginatedRunList", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    get_by_query_by_experiment_name.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs:query"
    }

    @overload
    def get_by_query_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        experiment_id: str,
        body: Optional[_models.QueryParams] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncIterable["_models.Run"]:
        """get_by_query_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param experiment_id: Required.
        :type experiment_id: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.QueryParams
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either Run or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.machinelearningservices.models.Run]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def get_by_query_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        experiment_id: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> AsyncIterable["_models.Run"]:
        """get_by_query_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param experiment_id: Required.
        :type experiment_id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either Run or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.machinelearningservices.models.Run]
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def get_by_query_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        experiment_id: str,
        body: Optional[Union[_models.QueryParams, IO]] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.Run"]:
        """get_by_query_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param experiment_id: Required.
        :type experiment_id: str
        :param body: Is either a QueryParams type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.QueryParams or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either Run or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.mgmt.machinelearningservices.models.Run]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.PaginatedRunList] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})
        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "QueryParams")
            else:
                _json = None

        def prepare_request(next_link=None):
            if not next_link:

                request = build_get_by_query_by_experiment_id_request(
                    subscription_id=subscription_id,
                    resource_group_name=resource_group_name,
                    workspace_name=workspace_name,
                    experiment_id=experiment_id,
                    content_type=content_type,
                    json=_json,
                    content=_content,
                    template_url=self.get_by_query_by_experiment_id.metadata["url"],
                    headers=_headers,
                    params=_params,
                )
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)

            else:
                request = HttpRequest("GET", next_link)
                request = _convert_request(request)
                request.url = self._client.format_url(request.url)
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("PaginatedRunList", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(get_next, extract_data)

    get_by_query_by_experiment_id.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experimentids/{experimentId}/runs:query"
    }

    @overload
    async def get_by_ids_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        experiment_id: str,
        body: Optional[_models.GetRunsByIds] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.BatchRunResult:
        """get_by_ids_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param experiment_id: Required.
        :type experiment_id: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.GetRunsByIds
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchRunResult or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchRunResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def get_by_ids_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        experiment_id: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.BatchRunResult:
        """get_by_ids_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param experiment_id: Required.
        :type experiment_id: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchRunResult or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchRunResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def get_by_ids_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        experiment_id: str,
        body: Optional[Union[_models.GetRunsByIds, IO]] = None,
        **kwargs: Any
    ) -> _models.BatchRunResult:
        """get_by_ids_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param experiment_id: Required.
        :type experiment_id: str
        :param body: Is either a GetRunsByIds type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.GetRunsByIds or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchRunResult or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchRunResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.BatchRunResult] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "GetRunsByIds")
            else:
                _json = None

        request = build_get_by_ids_by_experiment_id_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            experiment_id=experiment_id,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.get_by_ids_by_experiment_id.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("BatchRunResult", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_by_ids_by_experiment_id.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experimentids/{experimentId}/runs/runIds"
    }

    @overload
    async def get_by_ids_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        experiment_name: str,
        body: Optional[_models.GetRunsByIds] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.BatchRunResult:
        """get_by_ids_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param experiment_name: Required.
        :type experiment_name: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.GetRunsByIds
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchRunResult or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchRunResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def get_by_ids_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        experiment_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.BatchRunResult:
        """get_by_ids_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param experiment_name: Required.
        :type experiment_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchRunResult or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchRunResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def get_by_ids_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        experiment_name: str,
        body: Optional[Union[_models.GetRunsByIds, IO]] = None,
        **kwargs: Any
    ) -> _models.BatchRunResult:
        """get_by_ids_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param experiment_name: Required.
        :type experiment_name: str
        :param body: Is either a GetRunsByIds type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.GetRunsByIds or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchRunResult or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchRunResult
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.BatchRunResult] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "GetRunsByIds")
            else:
                _json = None

        request = build_get_by_ids_by_experiment_name_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            experiment_name=experiment_name,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.get_by_ids_by_experiment_name.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("BatchRunResult", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_by_ids_by_experiment_name.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/runIds"
    }

    @distributed_trace_async
    async def cancel_run_with_uri_by_experiment_id(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_id: str,
        cancelation_reason: Optional[str] = None,
        **kwargs: Any
    ) -> _models.Run:
        """cancel_run_with_uri_by_experiment_id.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_id: Required.
        :type experiment_id: str
        :param cancelation_reason: Default value is None.
        :type cancelation_reason: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.Run] = kwargs.pop("cls", None)

        request = build_cancel_run_with_uri_by_experiment_id_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            run_id=run_id,
            experiment_id=experiment_id,
            cancelation_reason=cancelation_reason,
            template_url=self.cancel_run_with_uri_by_experiment_id.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Run", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    cancel_run_with_uri_by_experiment_id.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experimentids/{experimentId}/runs/{runId}/cancel"
    }

    @distributed_trace_async
    async def cancel_run_with_uri_by_experiment_name(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        run_id: str,
        experiment_name: str,
        cancelation_reason: Optional[str] = None,
        **kwargs: Any
    ) -> _models.Run:
        """cancel_run_with_uri_by_experiment_name.

        :param subscription_id: The Azure Subscription ID. Required.
        :type subscription_id: str
        :param resource_group_name: The Name of the resource group in which the workspace is located.
         Required.
        :type resource_group_name: str
        :param workspace_name: The name of the workspace. Required.
        :type workspace_name: str
        :param run_id: Required.
        :type run_id: str
        :param experiment_name: Required.
        :type experiment_name: str
        :param cancelation_reason: Default value is None.
        :type cancelation_reason: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Run or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Run
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.Run] = kwargs.pop("cls", None)

        request = build_cancel_run_with_uri_by_experiment_name_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            run_id=run_id,
            experiment_name=experiment_name,
            cancelation_reason=cancelation_reason,
            template_url=self.cancel_run_with_uri_by_experiment_name.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.ErrorResponse, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Run", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    cancel_run_with_uri_by_experiment_name.metadata = {
        "url": "/history/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/experiments/{experimentName}/runs/{runId}/cancel"
    }
