# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Optional, Union

import msrest.serialization
from azure.core.exceptions import HttpResponseError

from ._azure_machine_learning_workspaces_enums import *


class CreateSnapshot(msrest.serialization.Model):
    """CreateSnapshot.

    :ivar file_revision_list:
    :vartype file_revision_list: ~azure.mgmt.machinelearningservices.models.FileNodeList
    :ivar dir_tree:
    :vartype dir_tree: ~azure.mgmt.machinelearningservices.models.FlatDirTreeNodeList
    :ivar dir_tree_node:
    :vartype dir_tree_node: ~azure.mgmt.machinelearningservices.models.DirTreeNode
    :ivar parent_snapshot_id:
    :vartype parent_snapshot_id: str
    :ivar content_hash: Hash value for verifying snapshot contents on the compute.
    :vartype content_hash: str
    :ivar hash_version: Version identifier for the hash code that generated ContentHash.
    :vartype hash_version: str
    :ivar ip_protected: Indicates that the snapshot files are stored in an IP-Protected storage
     location.
    :vartype ip_protected: bool
    :ivar tags: A set of tags. Dictionary of :code:`<string>`.
    :vartype tags: dict[str, str]
    :ivar properties: Dictionary of :code:`<string>`.
    :vartype properties: dict[str, str]
    :ivar description:
    :vartype description: str
    """

    _attribute_map = {
        'file_revision_list': {'key': 'fileRevisionList', 'type': 'FileNodeList'},
        'dir_tree': {'key': 'dirTree', 'type': 'FlatDirTreeNodeList'},
        'dir_tree_node': {'key': 'dirTreeNode', 'type': 'DirTreeNode'},
        'parent_snapshot_id': {'key': 'parentSnapshotId', 'type': 'str'},
        'content_hash': {'key': 'contentHash', 'type': 'str'},
        'hash_version': {'key': 'hashVersion', 'type': 'str'},
        'ip_protected': {'key': 'ipProtected', 'type': 'bool'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        file_revision_list: Optional["FileNodeList"] = None,
        dir_tree: Optional["FlatDirTreeNodeList"] = None,
        dir_tree_node: Optional["DirTreeNode"] = None,
        parent_snapshot_id: Optional[str] = None,
        content_hash: Optional[str] = None,
        hash_version: Optional[str] = None,
        ip_protected: Optional[bool] = None,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword file_revision_list:
        :paramtype file_revision_list: ~azure.mgmt.machinelearningservices.models.FileNodeList
        :keyword dir_tree:
        :paramtype dir_tree: ~azure.mgmt.machinelearningservices.models.FlatDirTreeNodeList
        :keyword dir_tree_node:
        :paramtype dir_tree_node: ~azure.mgmt.machinelearningservices.models.DirTreeNode
        :keyword parent_snapshot_id:
        :paramtype parent_snapshot_id: str
        :keyword content_hash: Hash value for verifying snapshot contents on the compute.
        :paramtype content_hash: str
        :keyword hash_version: Version identifier for the hash code that generated ContentHash.
        :paramtype hash_version: str
        :keyword ip_protected: Indicates that the snapshot files are stored in an IP-Protected storage
         location.
        :paramtype ip_protected: bool
        :keyword tags: A set of tags. Dictionary of :code:`<string>`.
        :paramtype tags: dict[str, str]
        :keyword properties: Dictionary of :code:`<string>`.
        :paramtype properties: dict[str, str]
        :keyword description:
        :paramtype description: str
        """
        super(CreateSnapshot, self).__init__(**kwargs)
        self.file_revision_list = file_revision_list
        self.dir_tree = dir_tree
        self.dir_tree_node = dir_tree_node
        self.parent_snapshot_id = parent_snapshot_id
        self.content_hash = content_hash
        self.hash_version = hash_version
        self.ip_protected = ip_protected
        self.tags = tags
        self.properties = properties
        self.description = description


class CreateSnapshotFromUri(msrest.serialization.Model):
    """CreateSnapshotFromUri.

    :ivar uri:
    :vartype uri: str
    :ivar name:
    :vartype name: str
    :ivar version:
    :vartype version: str
    :ivar parent_snapshot_id:
    :vartype parent_snapshot_id: str
    :ivar content_hash: Hash value for verifying snapshot contents on the compute.
    :vartype content_hash: str
    :ivar hash_version: Version identifier for the hash code that generated ContentHash.
    :vartype hash_version: str
    :ivar ip_protected: Indicates that the snapshot files are stored in an IP-Protected storage
     location.
    :vartype ip_protected: bool
    :ivar tags: A set of tags. Dictionary of :code:`<string>`.
    :vartype tags: dict[str, str]
    :ivar properties: Dictionary of :code:`<string>`.
    :vartype properties: dict[str, str]
    :ivar description:
    :vartype description: str
    """

    _attribute_map = {
        'uri': {'key': 'uri', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'parent_snapshot_id': {'key': 'parentSnapshotId', 'type': 'str'},
        'content_hash': {'key': 'contentHash', 'type': 'str'},
        'hash_version': {'key': 'hashVersion', 'type': 'str'},
        'ip_protected': {'key': 'ipProtected', 'type': 'bool'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        uri: Optional[str] = None,
        name: Optional[str] = None,
        version: Optional[str] = None,
        parent_snapshot_id: Optional[str] = None,
        content_hash: Optional[str] = None,
        hash_version: Optional[str] = None,
        ip_protected: Optional[bool] = None,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword uri:
        :paramtype uri: str
        :keyword name:
        :paramtype name: str
        :keyword version:
        :paramtype version: str
        :keyword parent_snapshot_id:
        :paramtype parent_snapshot_id: str
        :keyword content_hash: Hash value for verifying snapshot contents on the compute.
        :paramtype content_hash: str
        :keyword hash_version: Version identifier for the hash code that generated ContentHash.
        :paramtype hash_version: str
        :keyword ip_protected: Indicates that the snapshot files are stored in an IP-Protected storage
         location.
        :paramtype ip_protected: bool
        :keyword tags: A set of tags. Dictionary of :code:`<string>`.
        :paramtype tags: dict[str, str]
        :keyword properties: Dictionary of :code:`<string>`.
        :paramtype properties: dict[str, str]
        :keyword description:
        :paramtype description: str
        """
        super(CreateSnapshotFromUri, self).__init__(**kwargs)
        self.uri = uri
        self.name = name
        self.version = version
        self.parent_snapshot_id = parent_snapshot_id
        self.content_hash = content_hash
        self.hash_version = hash_version
        self.ip_protected = ip_protected
        self.tags = tags
        self.properties = properties
        self.description = description


class DirTreeNode(msrest.serialization.Model):
    """DirTreeNode.

    :ivar name:
    :vartype name: str
    :ivar hash:
    :vartype hash: str
    :ivar type:
    :vartype type: str
    :ivar timestamp:
    :vartype timestamp: ~datetime.datetime
    :ivar sas_url:
    :vartype sas_url: str
    :ivar absolute_url:
    :vartype absolute_url: str
    :ivar size_bytes:
    :vartype size_bytes: long
    :ivar size_set:
    :vartype size_set: bool
    :ivar children: Dictionary of :code:`<DirTreeNode>`.
    :vartype children: dict[str, ~azure.mgmt.machinelearningservices.models.DirTreeNode]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'hash': {'key': 'hash', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'timestamp': {'key': 'timestamp', 'type': 'iso-8601'},
        'sas_url': {'key': 'sasUrl', 'type': 'str'},
        'absolute_url': {'key': 'absoluteUrl', 'type': 'str'},
        'size_bytes': {'key': 'sizeBytes', 'type': 'long'},
        'size_set': {'key': 'sizeSet', 'type': 'bool'},
        'children': {'key': 'children', 'type': '{DirTreeNode}'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        hash: Optional[str] = None,
        type: Optional[str] = None,
        timestamp: Optional[datetime.datetime] = None,
        sas_url: Optional[str] = None,
        absolute_url: Optional[str] = None,
        size_bytes: Optional[int] = None,
        size_set: Optional[bool] = None,
        children: Optional[Dict[str, "DirTreeNode"]] = None,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword hash:
        :paramtype hash: str
        :keyword type:
        :paramtype type: str
        :keyword timestamp:
        :paramtype timestamp: ~datetime.datetime
        :keyword sas_url:
        :paramtype sas_url: str
        :keyword absolute_url:
        :paramtype absolute_url: str
        :keyword size_bytes:
        :paramtype size_bytes: long
        :keyword size_set:
        :paramtype size_set: bool
        :keyword children: Dictionary of :code:`<DirTreeNode>`.
        :paramtype children: dict[str, ~azure.mgmt.machinelearningservices.models.DirTreeNode]
        """
        super(DirTreeNode, self).__init__(**kwargs)
        self.name = name
        self.hash = hash
        self.type = type
        self.timestamp = timestamp
        self.sas_url = sas_url
        self.absolute_url = absolute_url
        self.size_bytes = size_bytes
        self.size_set = size_set
        self.children = children


class ErrorAdditionalInfo(msrest.serialization.Model):
    """The resource management error additional info.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: any
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'info': {'key': 'info', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        type: Optional[str] = None,
        info: Optional[Any] = None,
        **kwargs
    ):
        """
        :keyword type: The additional info type.
        :paramtype type: str
        :keyword info: The additional info.
        :paramtype info: any
        """
        super(ErrorAdditionalInfo, self).__init__(**kwargs)
        self.type = type
        self.info = info


class ErrorResponse(msrest.serialization.Model):
    """The error response.

    :ivar error: The root error.
    :vartype error: ~azure.mgmt.machinelearningservices.models.RootError
    :ivar correlation: Dictionary containing correlation details for the error.
    :vartype correlation: dict[str, str]
    :ivar environment: The hosting environment.
    :vartype environment: str
    :ivar location: The Azure region.
    :vartype location: str
    :ivar time: The time in UTC.
    :vartype time: ~datetime.datetime
    :ivar component_name: Component name where error originated/encountered.
    :vartype component_name: str
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'RootError'},
        'correlation': {'key': 'correlation', 'type': '{str}'},
        'environment': {'key': 'environment', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'time': {'key': 'time', 'type': 'iso-8601'},
        'component_name': {'key': 'componentName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        error: Optional["RootError"] = None,
        correlation: Optional[Dict[str, str]] = None,
        environment: Optional[str] = None,
        location: Optional[str] = None,
        time: Optional[datetime.datetime] = None,
        component_name: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword error: The root error.
        :paramtype error: ~azure.mgmt.machinelearningservices.models.RootError
        :keyword correlation: Dictionary containing correlation details for the error.
        :paramtype correlation: dict[str, str]
        :keyword environment: The hosting environment.
        :paramtype environment: str
        :keyword location: The Azure region.
        :paramtype location: str
        :keyword time: The time in UTC.
        :paramtype time: ~datetime.datetime
        :keyword component_name: Component name where error originated/encountered.
        :paramtype component_name: str
        """
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error
        self.correlation = correlation
        self.environment = environment
        self.location = location
        self.time = time
        self.component_name = component_name


class FileNameList(msrest.serialization.Model):
    """FileNameList.

    :ivar file_names:
    :vartype file_names: list[str]
    """

    _attribute_map = {
        'file_names': {'key': 'fileNames', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        file_names: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword file_names:
        :paramtype file_names: list[str]
        """
        super(FileNameList, self).__init__(**kwargs)
        self.file_names = file_names


class FileNode(msrest.serialization.Model):
    """FileNode.

    :ivar full_name:
    :vartype full_name: str
    :ivar absolute_blob_uri:
    :vartype absolute_blob_uri: str
    :ivar blob_uri:
    :vartype blob_uri: str
    :ivar file_size:
    :vartype file_size: long
    """

    _attribute_map = {
        'full_name': {'key': 'fullName', 'type': 'str'},
        'absolute_blob_uri': {'key': 'absoluteBlobUri', 'type': 'str'},
        'blob_uri': {'key': 'blobUri', 'type': 'str'},
        'file_size': {'key': 'fileSize', 'type': 'long'},
    }

    def __init__(
        self,
        *,
        full_name: Optional[str] = None,
        absolute_blob_uri: Optional[str] = None,
        blob_uri: Optional[str] = None,
        file_size: Optional[int] = None,
        **kwargs
    ):
        """
        :keyword full_name:
        :paramtype full_name: str
        :keyword absolute_blob_uri:
        :paramtype absolute_blob_uri: str
        :keyword blob_uri:
        :paramtype blob_uri: str
        :keyword file_size:
        :paramtype file_size: long
        """
        super(FileNode, self).__init__(**kwargs)
        self.full_name = full_name
        self.absolute_blob_uri = absolute_blob_uri
        self.blob_uri = blob_uri
        self.file_size = file_size


class FileNodeList(msrest.serialization.Model):
    """FileNodeList.

    :ivar file_nodes:
    :vartype file_nodes: list[~azure.mgmt.machinelearningservices.models.FileNode]
    """

    _attribute_map = {
        'file_nodes': {'key': 'fileNodes', 'type': '[FileNode]'},
    }

    def __init__(
        self,
        *,
        file_nodes: Optional[List["FileNode"]] = None,
        **kwargs
    ):
        """
        :keyword file_nodes:
        :paramtype file_nodes: list[~azure.mgmt.machinelearningservices.models.FileNode]
        """
        super(FileNodeList, self).__init__(**kwargs)
        self.file_nodes = file_nodes


class FlatDirTreeNode(msrest.serialization.Model):
    """FlatDirTreeNode.

    :ivar name:
    :vartype name: str
    :ivar hash:
    :vartype hash: str
    :ivar is_file:
    :vartype is_file: bool
    :ivar id:
    :vartype id: str
    :ivar parent_id:
    :vartype parent_id: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'hash': {'key': 'hash', 'type': 'str'},
        'is_file': {'key': 'isFile', 'type': 'bool'},
        'id': {'key': 'id', 'type': 'str'},
        'parent_id': {'key': 'parentId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        hash: Optional[str] = None,
        is_file: Optional[bool] = None,
        id: Optional[str] = None,
        parent_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword name:
        :paramtype name: str
        :keyword hash:
        :paramtype hash: str
        :keyword is_file:
        :paramtype is_file: bool
        :keyword id:
        :paramtype id: str
        :keyword parent_id:
        :paramtype parent_id: str
        """
        super(FlatDirTreeNode, self).__init__(**kwargs)
        self.name = name
        self.hash = hash
        self.is_file = is_file
        self.id = id
        self.parent_id = parent_id


class FlatDirTreeNodeList(msrest.serialization.Model):
    """FlatDirTreeNodeList.

    :ivar files:
    :vartype files: list[~azure.mgmt.machinelearningservices.models.FlatDirTreeNode]
    """

    _attribute_map = {
        'files': {'key': 'files', 'type': '[FlatDirTreeNode]'},
    }

    def __init__(
        self,
        *,
        files: Optional[List["FlatDirTreeNode"]] = None,
        **kwargs
    ):
        """
        :keyword files:
        :paramtype files: list[~azure.mgmt.machinelearningservices.models.FlatDirTreeNode]
        """
        super(FlatDirTreeNodeList, self).__init__(**kwargs)
        self.files = files


class GitCredential(msrest.serialization.Model):
    """GitCredential.

    :ivar credential_type: Possible values include: "PersonalAccessToken", "Public".
    :vartype credential_type: str or ~azure.mgmt.machinelearningservices.models.GitCredentialType
    :ivar credential: For CredentialType = PersonalAccessToken, Credential is the personal access
     token.
     For CredentialType = Public, Credential is null or empty.
    :vartype credential: str
    """

    _attribute_map = {
        'credential_type': {'key': 'credentialType', 'type': 'str'},
        'credential': {'key': 'credential', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        credential_type: Optional[Union[str, "GitCredentialType"]] = None,
        credential: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword credential_type: Possible values include: "PersonalAccessToken", "Public".
        :paramtype credential_type: str or ~azure.mgmt.machinelearningservices.models.GitCredentialType
        :keyword credential: For CredentialType = PersonalAccessToken, Credential is the personal
         access token.
         For CredentialType = Public, Credential is null or empty.
        :paramtype credential: str
        """
        super(GitCredential, self).__init__(**kwargs)
        self.credential_type = credential_type
        self.credential = credential


class GitRevision(msrest.serialization.Model):
    """GitRevision.

    :ivar repository_uri: This is the Uri that is used with "git clone" command.
    :vartype repository_uri: str
    :ivar branch_name:
    :vartype branch_name: str
    :ivar commit_id:
    :vartype commit_id: str
    :ivar tag:
    :vartype tag: str
    :ivar subdirectory: Subdirectory within the repository. The path should be relative to
     repository root.
     EX) If repository contains repositoryName/Dir1/Dir2, then a Subdirectory may be /Dir1.
     If Subdirectory = null then whole git repository is checked out.
     If Subdirectory != null, only the Subdirectory and its subdirectories will be checked out.
    :vartype subdirectory: str
    """

    _attribute_map = {
        'repository_uri': {'key': 'repositoryUri', 'type': 'str'},
        'branch_name': {'key': 'branchName', 'type': 'str'},
        'commit_id': {'key': 'commitId', 'type': 'str'},
        'tag': {'key': 'tag', 'type': 'str'},
        'subdirectory': {'key': 'subdirectory', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        repository_uri: Optional[str] = None,
        branch_name: Optional[str] = None,
        commit_id: Optional[str] = None,
        tag: Optional[str] = None,
        subdirectory: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword repository_uri: This is the Uri that is used with "git clone" command.
        :paramtype repository_uri: str
        :keyword branch_name:
        :paramtype branch_name: str
        :keyword commit_id:
        :paramtype commit_id: str
        :keyword tag:
        :paramtype tag: str
        :keyword subdirectory: Subdirectory within the repository. The path should be relative to
         repository root.
         EX) If repository contains repositoryName/Dir1/Dir2, then a Subdirectory may be /Dir1.
         If Subdirectory = null then whole git repository is checked out.
         If Subdirectory != null, only the Subdirectory and its subdirectories will be checked out.
        :paramtype subdirectory: str
        """
        super(GitRevision, self).__init__(**kwargs)
        self.repository_uri = repository_uri
        self.branch_name = branch_name
        self.commit_id = commit_id
        self.tag = tag
        self.subdirectory = subdirectory


class InnerErrorResponse(msrest.serialization.Model):
    """A nested structure of errors.

    :ivar code: The error code.
    :vartype code: str
    :ivar inner_error: A nested structure of errors.
    :vartype inner_error: ~azure.mgmt.machinelearningservices.models.InnerErrorResponse
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'inner_error': {'key': 'innerError', 'type': 'InnerErrorResponse'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        inner_error: Optional["InnerErrorResponse"] = None,
        **kwargs
    ):
        """
        :keyword code: The error code.
        :paramtype code: str
        :keyword inner_error: A nested structure of errors.
        :paramtype inner_error: ~azure.mgmt.machinelearningservices.models.InnerErrorResponse
        """
        super(InnerErrorResponse, self).__init__(**kwargs)
        self.code = code
        self.inner_error = inner_error


class MerkleDiffEntry(msrest.serialization.Model):
    """MerkleDiffEntry.

    :ivar operation_type: Possible values include: "Added", "Modified", "Removed".
    :vartype operation_type: str or ~azure.mgmt.machinelearningservices.models.OperationType
    :ivar file_path:
    :vartype file_path: str
    :ivar is_file:
    :vartype is_file: bool
    :ivar old_file_store_id:
    :vartype old_file_store_id: str
    :ivar new_file_store_id:
    :vartype new_file_store_id: str
    """

    _attribute_map = {
        'operation_type': {'key': 'operationType', 'type': 'str'},
        'file_path': {'key': 'filePath', 'type': 'str'},
        'is_file': {'key': 'isFile', 'type': 'bool'},
        'old_file_store_id': {'key': 'oldFileStoreId', 'type': 'str'},
        'new_file_store_id': {'key': 'newFileStoreId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        operation_type: Optional[Union[str, "OperationType"]] = None,
        file_path: Optional[str] = None,
        is_file: Optional[bool] = None,
        old_file_store_id: Optional[str] = None,
        new_file_store_id: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword operation_type: Possible values include: "Added", "Modified", "Removed".
        :paramtype operation_type: str or ~azure.mgmt.machinelearningservices.models.OperationType
        :keyword file_path:
        :paramtype file_path: str
        :keyword is_file:
        :paramtype is_file: bool
        :keyword old_file_store_id:
        :paramtype old_file_store_id: str
        :keyword new_file_store_id:
        :paramtype new_file_store_id: str
        """
        super(MerkleDiffEntry, self).__init__(**kwargs)
        self.operation_type = operation_type
        self.file_path = file_path
        self.is_file = is_file
        self.old_file_store_id = old_file_store_id
        self.new_file_store_id = new_file_store_id


class RootError(msrest.serialization.Model):
    """The root error.

    :ivar code: The service-defined error code. Supported error codes: ServiceError, UserError,
     ValidationError, AzureStorageError, TransientError, RequestThrottled.
    :vartype code: str
    :ivar severity: The Severity of error.
    :vartype severity: int
    :ivar message: A human-readable representation of the error.
    :vartype message: str
    :ivar message_format: An unformatted version of the message with no variable substitution.
    :vartype message_format: str
    :ivar message_parameters: Value substitutions corresponding to the contents of MessageFormat.
    :vartype message_parameters: dict[str, str]
    :ivar reference_code: This code can optionally be set by the system generating the error.
     It should be used to classify the problem and identify the module and code area where the
     failure occured.
    :vartype reference_code: str
    :ivar details_uri: A URI which points to more details about the context of the error.
    :vartype details_uri: str
    :ivar target: The target of the error (e.g., the name of the property in error).
    :vartype target: str
    :ivar details: The related errors that occurred during the request.
    :vartype details: list[~azure.mgmt.machinelearningservices.models.RootError]
    :ivar inner_error: A nested structure of errors.
    :vartype inner_error: ~azure.mgmt.machinelearningservices.models.InnerErrorResponse
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.machinelearningservices.models.ErrorAdditionalInfo]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'severity': {'key': 'severity', 'type': 'int'},
        'message': {'key': 'message', 'type': 'str'},
        'message_format': {'key': 'messageFormat', 'type': 'str'},
        'message_parameters': {'key': 'messageParameters', 'type': '{str}'},
        'reference_code': {'key': 'referenceCode', 'type': 'str'},
        'details_uri': {'key': 'detailsUri', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[RootError]'},
        'inner_error': {'key': 'innerError', 'type': 'InnerErrorResponse'},
        'additional_info': {'key': 'additionalInfo', 'type': '[ErrorAdditionalInfo]'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        severity: Optional[int] = None,
        message: Optional[str] = None,
        message_format: Optional[str] = None,
        message_parameters: Optional[Dict[str, str]] = None,
        reference_code: Optional[str] = None,
        details_uri: Optional[str] = None,
        target: Optional[str] = None,
        details: Optional[List["RootError"]] = None,
        inner_error: Optional["InnerErrorResponse"] = None,
        additional_info: Optional[List["ErrorAdditionalInfo"]] = None,
        **kwargs
    ):
        """
        :keyword code: The service-defined error code. Supported error codes: ServiceError, UserError,
         ValidationError, AzureStorageError, TransientError, RequestThrottled.
        :paramtype code: str
        :keyword severity: The Severity of error.
        :paramtype severity: int
        :keyword message: A human-readable representation of the error.
        :paramtype message: str
        :keyword message_format: An unformatted version of the message with no variable substitution.
        :paramtype message_format: str
        :keyword message_parameters: Value substitutions corresponding to the contents of
         MessageFormat.
        :paramtype message_parameters: dict[str, str]
        :keyword reference_code: This code can optionally be set by the system generating the error.
         It should be used to classify the problem and identify the module and code area where the
         failure occured.
        :paramtype reference_code: str
        :keyword details_uri: A URI which points to more details about the context of the error.
        :paramtype details_uri: str
        :keyword target: The target of the error (e.g., the name of the property in error).
        :paramtype target: str
        :keyword details: The related errors that occurred during the request.
        :paramtype details: list[~azure.mgmt.machinelearningservices.models.RootError]
        :keyword inner_error: A nested structure of errors.
        :paramtype inner_error: ~azure.mgmt.machinelearningservices.models.InnerErrorResponse
        :keyword additional_info: The error additional info.
        :paramtype additional_info:
         list[~azure.mgmt.machinelearningservices.models.ErrorAdditionalInfo]
        """
        super(RootError, self).__init__(**kwargs)
        self.code = code
        self.severity = severity
        self.message = message
        self.message_format = message_format
        self.message_parameters = message_parameters
        self.reference_code = reference_code
        self.details_uri = details_uri
        self.target = target
        self.details = details
        self.inner_error = inner_error
        self.additional_info = additional_info


class Snapshot(msrest.serialization.Model):
    """Snapshot.

    :ivar snapshot_type: Possible values include: "LocalFiles", "Git", "IPProtected".
    :vartype snapshot_type: str or ~azure.mgmt.machinelearningservices.models.SnapshotType
    :ivar id:
    :vartype id: str
    :ivar root:
    :vartype root: ~azure.mgmt.machinelearningservices.models.DirTreeNode
    :ivar tags: A set of tags. Dictionary of :code:`<string>`.
    :vartype tags: dict[str, str]
    :ivar properties: Dictionary of :code:`<string>`.
    :vartype properties: dict[str, str]
    :ivar description:
    :vartype description: str
    :ivar name:
    :vartype name: str
    :ivar version:
    :vartype version: str
    :ivar created_by:
    :vartype created_by: ~azure.mgmt.machinelearningservices.models.User
    :ivar created_time:
    :vartype created_time: ~datetime.datetime
    :ivar modified_by:
    :vartype modified_by: ~azure.mgmt.machinelearningservices.models.User
    :ivar modified_time:
    :vartype modified_time: ~datetime.datetime
    :ivar git_repository_commit:
    :vartype git_repository_commit: ~azure.mgmt.machinelearningservices.models.GitRevision
    :ivar uri: Set if Snapshot created from Uri.
    :vartype uri: str
    :ivar content_hash: Hash value for verifying snapshot contents on the compute.
    :vartype content_hash: str
    :ivar hash_version: Version identifier for the hash code that generated ContentHash.
    :vartype hash_version: str
    :ivar provisioning_state: Possible values include: "Succeeded", "Failed", "Creating".
    :vartype provisioning_state: str or
     ~azure.mgmt.machinelearningservices.models.SnapshotProvisioningState
    """

    _attribute_map = {
        'snapshot_type': {'key': 'snapshotType', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'root': {'key': 'root', 'type': 'DirTreeNode'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'description': {'key': 'description', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'created_by': {'key': 'createdBy', 'type': 'User'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'modified_by': {'key': 'modifiedBy', 'type': 'User'},
        'modified_time': {'key': 'modifiedTime', 'type': 'iso-8601'},
        'git_repository_commit': {'key': 'gitRepositoryCommit', 'type': 'GitRevision'},
        'uri': {'key': 'uri', 'type': 'str'},
        'content_hash': {'key': 'contentHash', 'type': 'str'},
        'hash_version': {'key': 'hashVersion', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        snapshot_type: Optional[Union[str, "SnapshotType"]] = None,
        id: Optional[str] = None,
        root: Optional["DirTreeNode"] = None,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        description: Optional[str] = None,
        name: Optional[str] = None,
        version: Optional[str] = None,
        created_by: Optional["User"] = None,
        created_time: Optional[datetime.datetime] = None,
        modified_by: Optional["User"] = None,
        modified_time: Optional[datetime.datetime] = None,
        git_repository_commit: Optional["GitRevision"] = None,
        uri: Optional[str] = None,
        content_hash: Optional[str] = None,
        hash_version: Optional[str] = None,
        provisioning_state: Optional[Union[str, "SnapshotProvisioningState"]] = None,
        **kwargs
    ):
        """
        :keyword snapshot_type: Possible values include: "LocalFiles", "Git", "IPProtected".
        :paramtype snapshot_type: str or ~azure.mgmt.machinelearningservices.models.SnapshotType
        :keyword id:
        :paramtype id: str
        :keyword root:
        :paramtype root: ~azure.mgmt.machinelearningservices.models.DirTreeNode
        :keyword tags: A set of tags. Dictionary of :code:`<string>`.
        :paramtype tags: dict[str, str]
        :keyword properties: Dictionary of :code:`<string>`.
        :paramtype properties: dict[str, str]
        :keyword description:
        :paramtype description: str
        :keyword name:
        :paramtype name: str
        :keyword version:
        :paramtype version: str
        :keyword created_by:
        :paramtype created_by: ~azure.mgmt.machinelearningservices.models.User
        :keyword created_time:
        :paramtype created_time: ~datetime.datetime
        :keyword modified_by:
        :paramtype modified_by: ~azure.mgmt.machinelearningservices.models.User
        :keyword modified_time:
        :paramtype modified_time: ~datetime.datetime
        :keyword git_repository_commit:
        :paramtype git_repository_commit: ~azure.mgmt.machinelearningservices.models.GitRevision
        :keyword uri: Set if Snapshot created from Uri.
        :paramtype uri: str
        :keyword content_hash: Hash value for verifying snapshot contents on the compute.
        :paramtype content_hash: str
        :keyword hash_version: Version identifier for the hash code that generated ContentHash.
        :paramtype hash_version: str
        :keyword provisioning_state: Possible values include: "Succeeded", "Failed", "Creating".
        :paramtype provisioning_state: str or
         ~azure.mgmt.machinelearningservices.models.SnapshotProvisioningState
        """
        super(Snapshot, self).__init__(**kwargs)
        self.snapshot_type = snapshot_type
        self.id = id
        self.root = root
        self.tags = tags
        self.properties = properties
        self.description = description
        self.name = name
        self.version = version
        self.created_by = created_by
        self.created_time = created_time
        self.modified_by = modified_by
        self.modified_time = modified_time
        self.git_repository_commit = git_repository_commit
        self.uri = uri
        self.content_hash = content_hash
        self.hash_version = hash_version
        self.provisioning_state = provisioning_state


class SnapshotConsumptionRequest(msrest.serialization.Model):
    """SnapshotConsumptionRequest.

    :ivar snapshot_or_asset_id:
    :vartype snapshot_or_asset_id: str
    :ivar path:
    :vartype path: str
    """

    _attribute_map = {
        'snapshot_or_asset_id': {'key': 'snapshotOrAssetId', 'type': 'str'},
        'path': {'key': 'path', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        snapshot_or_asset_id: Optional[str] = None,
        path: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword snapshot_or_asset_id:
        :paramtype snapshot_or_asset_id: str
        :keyword path:
        :paramtype path: str
        """
        super(SnapshotConsumptionRequest, self).__init__(**kwargs)
        self.snapshot_or_asset_id = snapshot_or_asset_id
        self.path = path


class SnapshotCredentials(msrest.serialization.Model):
    """SnapshotCredentials.

    :ivar snapshot_metadata:
    :vartype snapshot_metadata: ~azure.mgmt.machinelearningservices.models.Snapshot
    :ivar git_credential:
    :vartype git_credential: ~azure.mgmt.machinelearningservices.models.GitCredential
    """

    _attribute_map = {
        'snapshot_metadata': {'key': 'snapshotMetadata', 'type': 'Snapshot'},
        'git_credential': {'key': 'gitCredential', 'type': 'GitCredential'},
    }

    def __init__(
        self,
        *,
        snapshot_metadata: Optional["Snapshot"] = None,
        git_credential: Optional["GitCredential"] = None,
        **kwargs
    ):
        """
        :keyword snapshot_metadata:
        :paramtype snapshot_metadata: ~azure.mgmt.machinelearningservices.models.Snapshot
        :keyword git_credential:
        :paramtype git_credential: ~azure.mgmt.machinelearningservices.models.GitCredential
        """
        super(SnapshotCredentials, self).__init__(**kwargs)
        self.snapshot_metadata = snapshot_metadata
        self.git_credential = git_credential


class SnapshotList(msrest.serialization.Model):
    """SnapshotList.

    :ivar snapshot_ids:
    :vartype snapshot_ids: list[str]
    """

    _attribute_map = {
        'snapshot_ids': {'key': 'snapshotIds', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        snapshot_ids: Optional[List[str]] = None,
        **kwargs
    ):
        """
        :keyword snapshot_ids:
        :paramtype snapshot_ids: list[str]
        """
        super(SnapshotList, self).__init__(**kwargs)
        self.snapshot_ids = snapshot_ids


class SnapshotMetadata(msrest.serialization.Model):
    """SnapshotMetadata.

    :ivar tags: A set of tags. Dictionary of :code:`<string>`.
    :vartype tags: dict[str, str]
    :ivar properties: Dictionary of :code:`<string>`.
    :vartype properties: dict[str, str]
    :ivar description:
    :vartype description: str
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': '{str}'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional[Dict[str, str]] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Dictionary of :code:`<string>`.
        :paramtype tags: dict[str, str]
        :keyword properties: Dictionary of :code:`<string>`.
        :paramtype properties: dict[str, str]
        :keyword description:
        :paramtype description: str
        """
        super(SnapshotMetadata, self).__init__(**kwargs)
        self.tags = tags
        self.properties = properties
        self.description = description


class User(msrest.serialization.Model):
    """User.

    :ivar user_object_id: A user or service principal's object ID.
     This is EUPI and may only be logged to warm path telemetry.
    :vartype user_object_id: str
    :ivar user_pu_id: A user or service principal's PuID.
     This is PII and should never be logged.
    :vartype user_pu_id: str
    :ivar user_idp: A user identity provider. Eg live.com
     This is PII and should never be logged.
    :vartype user_idp: str
    :ivar user_alt_sec_id: A user alternate sec id. This represents the user in a different
     identity provider system Eg.1:live.com:puid
     This is PII and should never be logged.
    :vartype user_alt_sec_id: str
    :ivar user_iss: The issuer which issed the token for this user.
     This is PII and should never be logged.
    :vartype user_iss: str
    :ivar user_tenant_id: A user or service principal's tenant ID.
    :vartype user_tenant_id: str
    :ivar user_name: A user's full name or a service principal's app ID.
     This is PII and should never be logged.
    :vartype user_name: str
    :ivar upn: A user's Principal name (upn)
     This is PII andshould never be logged.
    :vartype upn: str
    """

    _attribute_map = {
        'user_object_id': {'key': 'userObjectId', 'type': 'str'},
        'user_pu_id': {'key': 'userPuId', 'type': 'str'},
        'user_idp': {'key': 'userIdp', 'type': 'str'},
        'user_alt_sec_id': {'key': 'userAltSecId', 'type': 'str'},
        'user_iss': {'key': 'userIss', 'type': 'str'},
        'user_tenant_id': {'key': 'userTenantId', 'type': 'str'},
        'user_name': {'key': 'userName', 'type': 'str'},
        'upn': {'key': 'upn', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        user_object_id: Optional[str] = None,
        user_pu_id: Optional[str] = None,
        user_idp: Optional[str] = None,
        user_alt_sec_id: Optional[str] = None,
        user_iss: Optional[str] = None,
        user_tenant_id: Optional[str] = None,
        user_name: Optional[str] = None,
        upn: Optional[str] = None,
        **kwargs
    ):
        """
        :keyword user_object_id: A user or service principal's object ID.
         This is EUPI and may only be logged to warm path telemetry.
        :paramtype user_object_id: str
        :keyword user_pu_id: A user or service principal's PuID.
         This is PII and should never be logged.
        :paramtype user_pu_id: str
        :keyword user_idp: A user identity provider. Eg live.com
         This is PII and should never be logged.
        :paramtype user_idp: str
        :keyword user_alt_sec_id: A user alternate sec id. This represents the user in a different
         identity provider system Eg.1:live.com:puid
         This is PII and should never be logged.
        :paramtype user_alt_sec_id: str
        :keyword user_iss: The issuer which issed the token for this user.
         This is PII and should never be logged.
        :paramtype user_iss: str
        :keyword user_tenant_id: A user or service principal's tenant ID.
        :paramtype user_tenant_id: str
        :keyword user_name: A user's full name or a service principal's app ID.
         This is PII and should never be logged.
        :paramtype user_name: str
        :keyword upn: A user's Principal name (upn)
         This is PII andshould never be logged.
        :paramtype upn: str
        """
        super(User, self).__init__(**kwargs)
        self.user_object_id = user_object_id
        self.user_pu_id = user_pu_id
        self.user_idp = user_idp
        self.user_alt_sec_id = user_alt_sec_id
        self.user_iss = user_iss
        self.user_tenant_id = user_tenant_id
        self.user_name = user_name
        self.upn = upn


class ValueTuple2(msrest.serialization.Model):
    """ValueTuple2.

    :ivar item1:
    :vartype item1: ~azure.mgmt.machinelearningservices.models.Snapshot
    :ivar item2:
    :vartype item2: bool
    """

    _attribute_map = {
        'item1': {'key': 'item1', 'type': 'Snapshot'},
        'item2': {'key': 'item2', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        item1: Optional["Snapshot"] = None,
        item2: Optional[bool] = None,
        **kwargs
    ):
        """
        :keyword item1:
        :paramtype item1: ~azure.mgmt.machinelearningservices.models.Snapshot
        :keyword item2:
        :paramtype item2: bool
        """
        super(ValueTuple2, self).__init__(**kwargs)
        self.item1 = item1
        self.item2 = item2
