# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, IO, List, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async
from azure.core.utils import case_insensitive_dict
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._models_operations import (
    build_batch_get_resolved_uris_request,
    build_batch_query_request,
    build_create_unregistered_input_model_request,
    build_create_unregistered_output_model_request,
    build_delete_request,
    build_deployment_settings_request,
    build_list_query_post_request,
    build_list_request,
    build_patch_request,
    build_query_by_id_request,
    build_register_request,
)

T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]


class ModelsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.mgmt.machinelearningservices.aio.AzureMachineLearningWorkspaces`'s
        :attr:`models` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    async def register(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: _models.Model,
        auto_version: bool = True,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Model:
        """register.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param body: Required.
        :type body: ~azure.mgmt.machinelearningservices.models.Model
        :param auto_version: Default value is True.
        :type auto_version: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Model or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Model
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def register(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: IO,
        auto_version: bool = True,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Model:
        """register.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param body: Required.
        :type body: IO
        :param auto_version: Default value is True.
        :type auto_version: bool
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'application/json-patch+json',
         'text/json'. Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Model or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Model
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def register(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Union[_models.Model, IO],
        auto_version: bool = True,
        **kwargs: Any
    ) -> _models.Model:
        """register.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param body: Is either a Model type or a IO type. Required.
        :type body: ~azure.mgmt.machinelearningservices.models.Model or IO
        :param auto_version: Default value is True.
        :type auto_version: bool
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'application/json-patch+json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Model or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Model
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Model] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "Model")

        request = build_register_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            auto_version=auto_version,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.register.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Model", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    register.metadata = {
        "url": "/modelregistry/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/models"
    }

    @distributed_trace_async
    async def list(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        name: Optional[str] = None,
        tag: Optional[str] = None,
        version: Optional[str] = None,
        framework: Optional[str] = None,
        description: Optional[str] = None,
        count: Optional[int] = None,
        offset: Optional[int] = None,
        skip_token: Optional[str] = None,
        tags: Optional[str] = None,
        properties: Optional[str] = None,
        run_id: Optional[str] = None,
        dataset_id: Optional[str] = None,
        order_by: Optional[str] = None,
        latest_version_only: bool = False,
        feed: Optional[str] = None,
        list_view_type: Optional[Union[str, _models.ListViewType]] = None,
        **kwargs: Any
    ) -> _models.ModelPagedResponse:
        """list.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param name: Default value is None.
        :type name: str
        :param tag: Default value is None.
        :type tag: str
        :param version: Default value is None.
        :type version: str
        :param framework: Default value is None.
        :type framework: str
        :param description: Default value is None.
        :type description: str
        :param count: Default value is None.
        :type count: int
        :param offset: Default value is None.
        :type offset: int
        :param skip_token: Default value is None.
        :type skip_token: str
        :param tags: Default value is None.
        :type tags: str
        :param properties: Default value is None.
        :type properties: str
        :param run_id: Default value is None.
        :type run_id: str
        :param dataset_id: Default value is None.
        :type dataset_id: str
        :param order_by: Default value is None.
        :type order_by: str
        :param latest_version_only: Default value is False.
        :type latest_version_only: bool
        :param feed: Default value is None.
        :type feed: str
        :param list_view_type: Known values are: "ActiveOnly", "ArchivedOnly", and "All". Default value
         is None.
        :type list_view_type: str or ~azure.mgmt.machinelearningservices.models.ListViewType
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ModelPagedResponse or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.ModelPagedResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.ModelPagedResponse] = kwargs.pop("cls", None)

        request = build_list_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            name=name,
            tag=tag,
            version=version,
            framework=framework,
            description=description,
            count=count,
            offset=offset,
            skip_token=skip_token,
            tags=tags,
            properties=properties,
            run_id=run_id,
            dataset_id=dataset_id,
            order_by=order_by,
            latest_version_only=latest_version_only,
            feed=feed,
            list_view_type=list_view_type,
            template_url=self.list.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("ModelPagedResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list.metadata = {
        "url": "/modelregistry/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/models"
    }

    @overload
    async def create_unregistered_input_model(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: _models.CreateUnregisteredInputModelDto,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Model:
        """create_unregistered_input_model.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param body: Required.
        :type body: ~azure.mgmt.machinelearningservices.models.CreateUnregisteredInputModelDto
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Model or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Model
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def create_unregistered_input_model(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Model:
        """create_unregistered_input_model.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param body: Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'application/json-patch+json',
         'text/json'. Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Model or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Model
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def create_unregistered_input_model(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Union[_models.CreateUnregisteredInputModelDto, IO],
        **kwargs: Any
    ) -> _models.Model:
        """create_unregistered_input_model.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param body: Is either a CreateUnregisteredInputModelDto type or a IO type. Required.
        :type body: ~azure.mgmt.machinelearningservices.models.CreateUnregisteredInputModelDto or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'application/json-patch+json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Model or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Model
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Model] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "CreateUnregisteredInputModelDto")

        request = build_create_unregistered_input_model_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create_unregistered_input_model.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Model", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_unregistered_input_model.metadata = {
        "url": "/modelregistry/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/models/createUnregisteredInput"
    }

    @overload
    async def create_unregistered_output_model(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: _models.CreateUnregisteredOutputModelDto,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Model:
        """create_unregistered_output_model.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param body: Required.
        :type body: ~azure.mgmt.machinelearningservices.models.CreateUnregisteredOutputModelDto
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Model or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Model
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def create_unregistered_output_model(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Model:
        """create_unregistered_output_model.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param body: Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'application/json-patch+json',
         'text/json'. Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Model or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Model
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def create_unregistered_output_model(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Union[_models.CreateUnregisteredOutputModelDto, IO],
        **kwargs: Any
    ) -> _models.Model:
        """create_unregistered_output_model.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param body: Is either a CreateUnregisteredOutputModelDto type or a IO type. Required.
        :type body: ~azure.mgmt.machinelearningservices.models.CreateUnregisteredOutputModelDto or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'application/json-patch+json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Model or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Model
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Model] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "CreateUnregisteredOutputModelDto")

        request = build_create_unregistered_output_model_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.create_unregistered_output_model.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Model", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_unregistered_output_model.metadata = {
        "url": "/modelregistry/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/models/createUnregisteredOutput"
    }

    @overload
    async def batch_get_resolved_uris(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[_models.BatchGetResolvedUrisDto] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.BatchModelPathResponseDto:
        """batch_get_resolved_uris.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.BatchGetResolvedUrisDto
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchModelPathResponseDto or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchModelPathResponseDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def batch_get_resolved_uris(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.BatchModelPathResponseDto:
        """batch_get_resolved_uris.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'application/json-patch+json',
         'text/json'. Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchModelPathResponseDto or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchModelPathResponseDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def batch_get_resolved_uris(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[Union[_models.BatchGetResolvedUrisDto, IO]] = None,
        **kwargs: Any
    ) -> _models.BatchModelPathResponseDto:
        """batch_get_resolved_uris.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param body: Is either a BatchGetResolvedUrisDto type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.BatchGetResolvedUrisDto or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'application/json-patch+json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: BatchModelPathResponseDto or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.BatchModelPathResponseDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.BatchModelPathResponseDto] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "BatchGetResolvedUrisDto")
            else:
                _json = None

        request = build_batch_get_resolved_uris_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.batch_get_resolved_uris.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("BatchModelPathResponseDto", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    batch_get_resolved_uris.metadata = {
        "url": "/modelregistry/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/models/batchGetResolvedUris"
    }

    @distributed_trace_async
    async def query_by_id(
        self,
        id: str,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        include_deployment_settings: bool = False,
        **kwargs: Any
    ) -> _models.Model:
        """query_by_id.

        :param id: Required.
        :type id: str
        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param include_deployment_settings: Default value is False.
        :type include_deployment_settings: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Model or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Model
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[_models.Model] = kwargs.pop("cls", None)

        request = build_query_by_id_request(
            id=id,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            include_deployment_settings=include_deployment_settings,
            template_url=self.query_by_id.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Model", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    query_by_id.metadata = {
        "url": "/modelregistry/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/models/{id}"
    }

    @distributed_trace_async
    async def delete(  # pylint: disable=inconsistent-return-statements
        self, id: str, subscription_id: str, resource_group_name: str, workspace_name: str, **kwargs: Any
    ) -> None:
        """delete.

        :param id: Required.
        :type id: str
        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        request = build_delete_request(
            id=id,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            template_url=self.delete.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {
        "url": "/modelregistry/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/models/{id}"
    }

    @overload
    async def patch(
        self,
        id: str,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: List[_models.Operation],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Model:
        """patch.

        :param id: Required.
        :type id: str
        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param body: Required.
        :type body: list[~azure.mgmt.machinelearningservices.models.Operation]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Model or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Model
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def patch(
        self,
        id: str,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: IO,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.Model:
        """patch.

        :param id: Required.
        :type id: str
        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param body: Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'application/json-patch+json',
         'text/json'. Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Model or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Model
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def patch(
        self,
        id: str,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Union[List[_models.Operation], IO],
        **kwargs: Any
    ) -> _models.Model:
        """patch.

        :param id: Required.
        :type id: str
        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param body: Is either a [Operation] type or a IO type. Required.
        :type body: list[~azure.mgmt.machinelearningservices.models.Operation] or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'application/json-patch+json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Model or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.Model
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.Model] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _json = self._serialize.body(body, "[Operation]")

        request = build_patch_request(
            id=id,
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.patch.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("Model", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    patch.metadata = {
        "url": "/modelregistry/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/models/{id}"
    }

    @overload
    async def list_query_post(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[_models.ListModelsRequest] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ModelListModelsRequestPagedResponse:
        """list_query_post.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.ListModelsRequest
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ModelListModelsRequestPagedResponse or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.ModelListModelsRequestPagedResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def list_query_post(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ModelListModelsRequestPagedResponse:
        """list_query_post.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'application/json-patch+json',
         'text/json'. Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ModelListModelsRequestPagedResponse or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.ModelListModelsRequestPagedResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def list_query_post(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[Union[_models.ListModelsRequest, IO]] = None,
        **kwargs: Any
    ) -> _models.ModelListModelsRequestPagedResponse:
        """list_query_post.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param body: Is either a ListModelsRequest type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.ListModelsRequest or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'application/json-patch+json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ModelListModelsRequestPagedResponse or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.ModelListModelsRequestPagedResponse
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.ModelListModelsRequestPagedResponse] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "ListModelsRequest")
            else:
                _json = None

        request = build_list_query_post_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.list_query_post.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("ModelListModelsRequestPagedResponse", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_query_post.metadata = {
        "url": "/modelregistry/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/models/list"
    }

    @overload
    async def batch_query(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[_models.ModelBatchDto] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ModelBatchResponseDto:
        """batch_query.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.ModelBatchDto
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ModelBatchResponseDto or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.ModelBatchResponseDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def batch_query(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.ModelBatchResponseDto:
        """batch_query.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'application/json-patch+json',
         'text/json'. Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ModelBatchResponseDto or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.ModelBatchResponseDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def batch_query(
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[Union[_models.ModelBatchDto, IO]] = None,
        **kwargs: Any
    ) -> _models.ModelBatchResponseDto:
        """batch_query.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param body: Is either a ModelBatchDto type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.ModelBatchDto or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'application/json-patch+json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ModelBatchResponseDto or the result of cls(response)
        :rtype: ~azure.mgmt.machinelearningservices.models.ModelBatchResponseDto
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[_models.ModelBatchResponseDto] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "ModelBatchDto")
            else:
                _json = None

        request = build_batch_query_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.batch_query.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        deserialized = self._deserialize("ModelBatchResponseDto", pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    batch_query.metadata = {
        "url": "/modelregistry/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/models/querybatch"
    }

    @overload
    async def deployment_settings(  # pylint: disable=inconsistent-return-statements
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[_models.ModelSettingsIdentifiers] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """deployment_settings.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.ModelSettingsIdentifiers
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    async def deployment_settings(  # pylint: disable=inconsistent-return-statements
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[IO] = None,
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """deployment_settings.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param body: Default value is None.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Known values are: 'application/*+json', 'application/json', 'application/json-patch+json',
         'text/json'. Default value is "application/json".
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace_async
    async def deployment_settings(  # pylint: disable=inconsistent-return-statements
        self,
        subscription_id: str,
        resource_group_name: str,
        workspace_name: str,
        body: Optional[Union[_models.ModelSettingsIdentifiers, IO]] = None,
        **kwargs: Any
    ) -> None:
        """deployment_settings.

        :param subscription_id: Required.
        :type subscription_id: str
        :param resource_group_name: Required.
        :type resource_group_name: str
        :param workspace_name: Required.
        :type workspace_name: str
        :param body: Is either a ModelSettingsIdentifiers type or a IO type. Default value is None.
        :type body: ~azure.mgmt.machinelearningservices.models.ModelSettingsIdentifiers or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/*+json',
         'application/json', 'application/json-patch+json', 'text/json'. Default value is None.
        :paramtype content_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None or the result of cls(response)
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[None] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            if body is not None:
                _json = self._serialize.body(body, "ModelSettingsIdentifiers")
            else:
                _json = None

        request = build_deployment_settings_request(
            subscription_id=subscription_id,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            content_type=content_type,
            json=_json,
            content=_content,
            template_url=self.deployment_settings.metadata["url"],
            headers=_headers,
            params=_params,
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        _stream = False
        pipeline_response: PipelineResponse = await self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    deployment_settings.metadata = {
        "url": "/modelregistry/v1.0/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/models/deploymentSettings"
    }
