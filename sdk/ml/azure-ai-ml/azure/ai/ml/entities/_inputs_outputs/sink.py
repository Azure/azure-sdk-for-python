# ---------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# ---------------------------------------------------------

# pylint: disable=redefined-builtin

from typing import Dict, overload
from typing_extensions import Literal

from azure.ai.ml.entities._mixins import DictMixin, RestTranslatableMixin
from .utils import _remove_empty_values


class Sink(DictMixin, RestTranslatableMixin):
    """Define an sink of a DataTransfer Component or Job.

    :param type: The type of the data output. Possible values include: 'file_system', 'database'.
    :type type: str
    :param path: The path to which the input is pointing. Could be pointing to the path of file system.
    :type path: str
    :param table_name: The database table name
    :type table_name: str
    :param connection: Connection is workspace, we didn't support storage connection here, need leverage workspace
    connection to store these credential info.
    :type connection: str
    """

    @overload
    def __init__(self, type: Literal["file_system"] = "file_system", path=None, connection=None):
        """Define a file_system sink.

        :param type: The type of the data input. Can only be set to "file_system".
        :type type: str
        :param path: The path to which the input is pointing. Could be pointing to the path of file system.
        :type path: str
        :param connection: Connection is workspace, we didn't support storage connection here, need leverage workspace
        connection to store these credential info.
        :type connection: str
        """

    @overload
    def __init__(self, type: Literal["database"] = "database", table_name=None, connection=None):
        """Define a database sink.

    :param type: The type of the data output. Can only be set to 'database'.
    :type type: str
    :param table_name: The database table name
    :type table_name: str
    :param connection: Connection is workspace, we didn't support storage connection here, need leverage workspace
    connection to store these credential info.
    :type connection: str
        """

    def __init__(self, *, type, path=None, table_name=None, connection=None, **kwargs):
        # As an annotation, it is not allowed to initialize the name.
        # The name will be updated by the annotated variable name.
        self.name = None
        self.type = type
        self.path = path
        self.table_name = table_name
        self.connection = connection

    def _to_dict(self, remove_name=True):
        """Convert the Sink object to a dict."""
        keys = ["name", "path", "type", "table_name", "connection"]
        if remove_name:
            keys.remove("name")
        result = {key: getattr(self, key) for key in keys}
        return _remove_empty_values(result)

    def _to_rest_object(self) -> Dict:
        # this is for component rest object when using Output as component outputs, as for job output usage,
        # rest object is generated by extracting Output's properties, see details in to_rest_data_outputs()
        return self._to_dict()

    @classmethod
    def _from_rest_object(cls, obj: Dict) -> "Sink":
        # this is for component rest object when using Sink as component outputs
        return Sink(**obj)
