{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspaceName": {
            "type": "string",
            "metadata": {
                "description": "Specifies the name of the Azure Machine Learning workspace."
            }
        },
        "description": {
            "type": "string",
            "metadata": {
                "description": "Description string."
            }
        },
        "friendlyName": {
            "type": "string",
            "metadata": {
                "description": "Friendly name."
            }
        },
        "kind": {
            "type": "string",
            "defaultValue": "Default",
            "metadata": {
                "description": "Specifies the Kind of the workspace."
            }
        },
        "location": {
            "type": "string",
            "metadata": {
                "description": "Specifies the location for all resources."
            }
        },
        "resourceGroupName": {
            "type": "string",
            "metadata": {
                "description": "Specifies the resource group name of the Azure Machine Learning workspace."
            }
        },
        "storageAccountOption": {
            "type": "string",
            "defaultValue": "new",
            "allowedValues": [
                "new",
                "existing"
            ],
            "metadata": {
                "description": "Determines whether or not a new storage should be provisioned."
            }
        },
        "storageAccountName": {
            "type": "string",
            "defaultValue": "[concat('sa', uniqueString(parameters('resourceGroupName'), parameters('workspaceName')))]",
            "metadata": {
                "description": "Name of the storage account."
            }
        },
        "storageAccountType": {
            "type": "string",
            "defaultValue": "Standard_LRS"
        },
        "storageAccountBehindVNet": {
            "type": "string",
            "defaultValue": "false",
            "allowedValues": [
                "true",
                "false"
            ],
            "metadata": {
                "description": "Determines whether or not to put the storage account behind VNet"
            }
        },
        "storageAccountResourceGroupName": {
            "type": "string",
            "defaultValue": "[parameters('resourceGroupName')]"
        },
        "storageAccountLocation": {
            "type": "string",
            "defaultValue": "[parameters('location')]"
        },
        "keyVaultOption": {
            "type": "string",
            "defaultValue": "new",
            "allowedValues": [
                "new",
                "existing"
            ],
            "metadata": {
                "description": "Determines whether or not a new key vault should be provisioned."
            }
        },
        "keyVaultName": {
            "type": "string",
            "defaultValue": "[concat('kv', uniqueString(parameters('resourceGroupName'), parameters('workspaceName')))]",
            "metadata": {
                "description": "Name of the key vault."
            }
        },
        "keyVaultBehindVNet": {
            "type": "string",
            "defaultValue": "false",
            "allowedValues": [
                "true",
                "false"
            ],
            "metadata": {
                "description": "Determines whether or not to put the storage account behind VNet"
            }
        },
        "keyVaultResourceGroupName": {
            "type": "string",
            "defaultValue": "[parameters('resourceGroupName')]"
        },
        "keyVaultLocation": {
            "type": "string",
            "defaultValue": "[parameters('location')]"
        },
        "applicationInsightsOption": {
            "type": "string",
            "defaultValue": "new",
            "allowedValues": [
                "new",
                "existing"
            ],
            "metadata": {
                "description": "Determines whether or not new ApplicationInsights should be provisioned."
            }
        },
        "logAnalyticsName": {
            "type": "string",
            "defaultValue": "[concat('la', uniqueString(parameters('resourceGroupName'), parameters('workspaceName')))]",
            "metadata": {
                "description": "Name of LogAnalytics to be used by ApplicationInsights resource."
            }
        },
        "logAnalyticsArmId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "ARM Id of LogAnalytics to be used by ApplicationInsights resource."
            }
        },
        "applicationInsightsName": {
            "type": "string",
            "defaultValue": "[concat('ai', uniqueString(parameters('resourceGroupName'), parameters('workspaceName')))]",
            "metadata": {
                "description": "Name of ApplicationInsights."
            }
        },
        "applicationInsightsResourceGroupName": {
            "type": "string",
            "defaultValue": "[parameters('resourceGroupName')]"
        },
        "applicationInsightsLocation": {
            "type": "string",
            "defaultValue": "[parameters('location')]"
        },
        "containerRegistryOption": {
            "type": "string",
            "defaultValue": "none",
            "allowedValues": [
                "new",
                "existing",
                "none"
            ],
            "metadata": {
                "description": "Determines whether or not a new container registry should be provisioned."
            }
        },
        "containerRegistryName": {
            "type": "string",
            "defaultValue": "[concat('cr', uniqueString(parameters('resourceGroupName'), parameters('workspaceName')))]",
            "metadata": {
                "description": "The container registry bind to the workspace."
            }
        },
        "containerRegistrySku": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Basic",
                "Standard",
                "Premium"
            ]
        },
        "containerRegistryResourceGroupName": {
            "type": "string",
            "defaultValue": "[parameters('resourceGroupName')]"
        },
        "containerRegistryBehindVNet": {
            "type": "string",
            "defaultValue": "false",
            "allowedValues": [
                "true",
                "false"
            ],
            "metadata": {
                "description": "Determines whether or not to put container registry behind VNet."
            }
        },
        "containerRegistryLocation": {
            "type": "string",
            "defaultValue": "[parameters('location')]"
        },
        "vnetOption": {
            "type": "string",
            "defaultValue": "[if(equals(parameters('privateEndpointType'), 'none'), 'none', 'new')]",
            "allowedValues": [
                "new",
                "existing",
                "none"
            ],
            "metadata": {
                "description": "Determines whether or not a new VNet should be provisioned."
            }
        },
        "vnetName": {
            "type": "string",
            "defaultValue": "[concat('vn',uniqueString(parameters('resourceGroupName'), parameters('workspaceName')))]",
            "metadata": {
                "description": "Name of the VNet"
            }
        },
        "vnetResourceGroupName": {
            "type": "string",
            "defaultValue": "[parameters('resourceGroupName')]"
        },
        "addressPrefixes": {
            "type": "array",
            "defaultValue": [
                "10.0.0.0/16"
            ],
            "metadata": {
                "description": "Address prefix of the virtual network"
            }
        },
        "subnetOption": {
            "type": "string",
            "defaultValue": "[if(or(not(equals(parameters('privateEndpointType'), 'none')), equals(parameters('vnetOption'), 'new')), 'new', 'none')]",
            "allowedValues": [
                "new",
                "existing",
                "none"
            ],
            "metadata": {
                "description": "Determines whether or not a new subnet should be provisioned."
            }
        },
        "subnetName": {
            "type": "string",
            "defaultValue": "[concat('sn',uniqueString(parameters('resourceGroupName'), parameters('workspaceName')))]",
            "metadata": {
                "description": "Name of the subnet"
            }
        },
        "subnetPrefix": {
            "type": "string",
            "defaultValue": "10.0.0.0/24",
            "metadata": {
                "description": "Subnet prefix of the virtual network"
            }
        },
        "adbWorkspace": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Azure Databrick workspace to be linked to the workspace"
            }
        },
        "confidential_data": {
            "type": "string",
            "defaultValue": "false",
            "allowedValues": [
                "false",
                "true"
            ],
            "metadata": {
                "description": "Specifies that the Azure Machine Learning workspace holds highly confidential data."
            }
        },
        "encryption_status": {
            "type": "string",
            "defaultValue": "Disabled",
            "allowedValues": [
                "Enabled",
                "Disabled"
            ],
            "metadata": {
                "description": "Specifies if the Azure Machine Learning workspace should be encrypted with customer managed key."
            }
        },
        "cmk_keyvault": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the customer managed keyVault arm id."
            }
        },
        "resource_cmk_uri": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies if the customer managed keyvault key uri."
            }
        },
        "privateEndpointType": {
            "type": "string",
            "defaultValue": "none",
            "allowedValues": [
                "AutoApproval",
                "ManualApproval",
                "none"
            ]
        },
        "tagValues": {
            "type": "object"
        },
        "privateEndpointName": {
            "type": "string",
            "defaultValue": "pe",
            "metadata": {
                "description": "Name of the private end point added to the workspace"
            }
        },
        "privateEndpointResourceGroupName": {
            "type": "string",
            "defaultValue": "[parameters('resourceGroupName')]",
            "metadata": {
                "description": "Name of the resource group where the private end point is added to"
            }
        },
        "imageBuildCompute": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The name of the compute target to use for building environment Docker images with the container registry is behind a VNet."
            }
        },
        "publicNetworkAccess": {
            "type": "string",
            "defaultValue": "Enabled",
            "allowedValues": [
                "Disabled",
                "Enabled"
            ],
            "metadata": {
                "description": "Whether to allow public endpoint connectivity when a workspace is private link enabled."
            }
        },
        "soft_delete_enabled": {
            "type": "string",
            "defaultValue": "false",
            "allowedValues": [
                "false",
                "true"
            ],
            "metadata": {
                "description": "Whether to create a workspace with soft delete capability"
            }
        },
        "allow_recover_softdeleted_workspace": {
            "type": "string",
            "defaultValue": "false",
            "allowedValues": [
                "false",
                "true"
            ],
            "metadata": {
                "description": "Whether to allow an existing soft-deleted workspace to be recovered"
            }
        },
        "encryption_cosmosdb_resourceid": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The Bring-Your-Own cosmosdb account that customer brings to store data"
            }
        },
        "encryption_storage_resourceid": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The Bring-Your-Own storage account that customer brings to store data"
            }
        },
        "encryption_search_resourceid": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The Bring-Your-Own search account that customer brings to store data"
            }
        },
        "identity": {
            "type": "object",
            "defaultValue": {
                "type": "systemAssigned"
            },
            "metadata": {
                "description": "Managed identities assigned to workspace. If not specificed, SystemAssigned managed identity is the default."
            }
        },
        "primaryUserAssignedIdentity": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "ARM identifier of primary user assigned managed identity, in case multiple ones are specified. Also the default managed identity for clusterless compute."
            }
        },
        "managedNetwork": {
            "type": "object",
            "defaultValue": {
                "isolationMode": "Disabled"
            },
            "metadata": {
                "description": "Managed network settings to be used for the workspace. If not specified, isolation mode Disabled is the default"
            }
        },
        "spark_runtime_version": {
            "type": "string",
            "metadata": {
                "description": "spark version to be used by all feature sets"
            }
        },
        "offline_store_connection_name": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Feature store offline store config"
            }
        },
        "online_store_connection_name": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Feature store online store config"
            }
        },
        "offline_store_target": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Feature store offline store connection target"
            }
        },
        "offline_store_resource_group_name": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Feature store offline store resource group"
            }
        },
        "offline_store_subscription_id": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Feature store offline store subscription id"
            }
        },
        "online_store_target": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Feature store online store connection target"
            }
        },
        "online_store_resource_group_name": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Feature store online store resource group"
            }
        },
        "online_store_subscription_id": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Feature store online store subscription id"
            }
        },
        "materialization_identity_client_id": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Feature store materialization credential client id"
            }
        },
        "materialization_identity_resource_id": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Feature store materialization credential resource id"
            }
        },
        "setup_materialization_store": {
            "type": "string",
            "defaultValue": "false",
            "allowedValues": [
                "false",
                "true"
            ],
            "metadata": {
                "description": "Whether to set up materialization store"
            }
        },
        "enable_data_isolation": {
            "type": "string",
            "defaultValue": "false",
            "allowedValues": [
                "false",
                "true"
            ],
            "metadata": {
                "description": "A flag to determine if workspace has data isolation enabled. The flag can only be set at the creation phase, it can't be updated."
            }
        },
        "storage_accounts" : {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "A list of storage accounts used by Hub."
            }
        },
        "key_vaults" : {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "A list of key vaults used by Hub."
            }
        },
        "container_registies" : {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "A list of container registries used by Hub."
            }
        },
        "existing_workspaces" : {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "A list of existing workspaces used by Hub to perform convert."
            }
        },
        "workspace_hub" : {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Resource Id of Hub used for lean workspace."
            }
        },
        "materialization_identity_name": {
            "defaultValue": "empty",
            "type": "string",
            "metadata": {
                "description": "Feature store materialization identity name"
            }
        },
        "grant_materialization_permissions": {
            "type": "string",
            "defaultValue": "false",
            "allowedValues": [
                "false",
                "true"
            ],
            "metadata": {
                "description": "Whether to grant materialization identity permissions"
            }
        },        
        "workspace_hub_config" : {
            "type": "object",
            "defaultValue": {},
            "metadata": {
                "description": "Additional configuration for WorkspaceHub."
            }
        },        
        "set_up_feature_store" : {
            "type": "string",
            "defaultValue": "false",
            "allowedValues": [
                "false",
                "true"
            ],
            "metadata": {
                "description": "A flag to determine whether to set up feature store"
            }
        },
        "byo_open_ai_resource_id": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Resource Id of BYO open ai resource."
            }
        }
    },
    "variables": {
        "tenantId": "[subscription().tenantId]",
        "storageAccount": "[resourceId(parameters('storageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
        "keyVault": "[resourceId(parameters('keyVaultResourceGroupName'), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
        "containerRegistry": "[resourceId(parameters('containerRegistryResourceGroupName'), 'Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]",
        "applicationInsights": "[resourceId(parameters('applicationInsightsResourceGroupName'), 'Microsoft.Insights/components', parameters('applicationInsightsName'))]",
        "vnet": "[resourceId(parameters('vnetResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]",
        "subnet": "[resourceId(parameters('vnetResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]",
        "enablePE": true,
        "networkRuleSetBehindVNet": {
            "defaultAction": "deny",
            "virtualNetworkRules": [
                {
                    "action": "Allow",
                    "id": "[variables('subnet')]"
                }
            ]
        },
        "privateEndpointSettings": {
            "name": "[concat(parameters('workspaceName'), '-PrivateEndpoint')]",
            "properties": {
                "privateLinkServiceId": "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('workspaceName'))]",
                "groupIds": [
                    "amlworkspace"
                ]
            }
        },
        "defaultPEConnections": "[array(variables('privateEndpointSettings'))]",
        "privateEndpointDeploymentName": "[concat('DeployPrivateEndpoint-', uniqueString(parameters('privateEndpointName')))]",
        "offlineStoreConnectionName": "[if(equals(parameters('offline_store_connection_name'), ''), 'OfflineStoreConnectionName', parameters('offline_store_connection_name'))]",
        "onlineStoreConnectionName": "[if(equals(parameters('online_store_connection_name'), ''), 'OnlineStoreConnectionName', parameters('online_store_connection_name'))]",
        "isWorkspaceHub": "[equals(parameters('kind'), 'hub')]",
        "storageAccountList": ["[variables('storageAccount')]"],
        "keyVaultList": ["[variables('keyVault')]"],
        "emptyArray": [],
        "containerRegistryList": "[if(not(equals(parameters('containerRegistryOption'), 'none')), array(variables('containerRegistry')), variables('emptyArray'))]"
    },
    "resources": [
        {
            "condition": "[and(variables('enablePE'), equals(parameters('applicationInsightsOption'), 'new'))]",
            "type": "Microsoft.OperationalInsights/workspaces",
            "tags": "[parameters('tagValues')]",
            "apiVersion": "2020-08-01",
            "name": "[parameters('logAnalyticsName')]",
            "location": "[if(or(equals(toLower(parameters('applicationInsightsLocation')),'westcentralus'), equals(toLower(parameters('applicationInsightsLocation')),'eastus2euap'), equals(toLower(parameters('applicationInsightsLocation')),'centraluseuap')),'southcentralus', parameters('applicationInsightsLocation'))]",
            "kind": "web",
            "properties": {
                "Application_Type": "web"
            }
        },
        {
            "condition": "[and(variables('enablePE'), equals(parameters('applicationInsightsOption'), 'new'))]",
            "type": "Microsoft.Insights/components",
            "tags": "[parameters('tagValues')]",
            "apiVersion": "2020-02-02-preview",
            "name": "[parameters('applicationInsightsName')]",
            "location": "[if(or(equals(toLower(parameters('applicationInsightsLocation')),'westcentralus'), equals(toLower(parameters('applicationInsightsLocation')),'eastus2euap'), equals(toLower(parameters('applicationInsightsLocation')),'centraluseuap')),'southcentralus', parameters('applicationInsightsLocation'))]",
            "kind": "web",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsName'))]"
            ],
            "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[parameters('logAnalyticsArmId')]"
            }
        },
        {
            "condition": "[variables('enablePE')]",
            "type": "Microsoft.MachineLearningServices/workspaces",
            "apiVersion": "2023-04-01-preview",
            "tags": "[parameters('tagValues')]",
            "name": "[parameters('workspaceName')]",
            "kind": "[parameters('kind')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]"
            ],
            "identity": "[parameters('identity')]",
            "properties": {
                "friendlyName": "[parameters('friendlyName')]",
                "description": "[parameters('description')]",
                "applicationInsights": "[variables('applicationInsights')]",
                "primaryUserAssignedIdentity": "[parameters('primaryUserAssignedIdentity')]",
                "hubResourceId": "[parameters('workspace_hub')]",
                "azureOpenAI": {
                    "resourceId": "[parameters('byo_open_ai_resource_id')]"
                }
            }
        }
    ]
}