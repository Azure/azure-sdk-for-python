# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class ParameterDefinition(Model):
    """Represent a parameter with constrains and metadata.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Allowed data types for Azure Resource Manager
     template parameters. Possible values include: 'string', 'array', 'bool',
     'int', 'object', 'secureObject', 'secureString'
    :type type: str or ~azure.mgmt.blueprint.models.TemplateParameterType
    :param display_name: DisplayName of this parameter/resourceGroup.
    :type display_name: str
    :param description: Description of this parameter/resourceGroup.
    :type description: str
    :param strong_type: StrongType for UI to render rich experience during
     assignment time.
    :type strong_type: str
    :param default_value: Default Value for this parameter.
    :type default_value: object
    :param allowed_values: Array of allowed values for this parameter.
    :type allowed_values: list[object]
    """

    _validation = {
        'type': {'required': True},
        'display_name': {'max_length': 256},
        'description': {'max_length': 500},
        'strong_type': {'max_length': 64},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'display_name': {'key': 'metadata.displayName', 'type': 'str'},
        'description': {'key': 'metadata.description', 'type': 'str'},
        'strong_type': {'key': 'metadata.strongType', 'type': 'str'},
        'default_value': {'key': 'defaultValue', 'type': 'object'},
        'allowed_values': {'key': 'allowedValues', 'type': '[object]'},
    }

    def __init__(self, **kwargs):
        super(ParameterDefinition, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.display_name = kwargs.get('display_name', None)
        self.description = kwargs.get('description', None)
        self.strong_type = kwargs.get('strong_type', None)
        self.default_value = kwargs.get('default_value', None)
        self.allowed_values = kwargs.get('allowed_values', None)
