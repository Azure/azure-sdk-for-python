# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import SDKClient
from msrest import Serializer, Deserializer
from msrestazure import AzureConfiguration
from .version import VERSION
from .operations.filesystem_operations import FilesystemOperations
from .operations.path_operations import PathOperations
from . import models


class DataLakeStorageClientConfiguration(AzureConfiguration):
    """Configuration for DataLakeStorageClient
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param credentials: Credentials needed for the client to connect to Azure.
    :type credentials: :mod:`A msrestazure Credentials
     object<msrestazure.azure_active_directory>`
    :param x_ms_version: Specifies the version of the REST protocol used for
     processing the request. This is required when using shared key
     authorization.
    :type x_ms_version: str
    :param account_name: The Azure Storage account name.
    :type account_name: str
    :param dns_suffix: The DNS suffix for the Azure Data Lake Storage
     endpoint.
    :type dns_suffix: str
    """

    def __init__(
            self, credentials, account_name, dns_suffix, x_ms_version=None):

        if credentials is None:
            raise ValueError("Parameter 'credentials' must not be None.")
        if account_name is None:
            raise ValueError("Parameter 'account_name' must not be None.")
        if dns_suffix is None:
            raise ValueError("Parameter 'dns_suffix' must not be None.")
        base_url = 'http://{accountName}.{dnsSuffix}'

        super(DataLakeStorageClientConfiguration, self).__init__(base_url)

        self.add_user_agent('azure-datalake-storage/{}'.format(VERSION))
        self.add_user_agent('Azure-SDK-For-Python')

        self.credentials = credentials
        self.x_ms_version = x_ms_version
        self.account_name = account_name
        self.dns_suffix = dns_suffix


class DataLakeStorageClient(SDKClient):
    """Azure Data Lake Storage provides storage for Hadoop and other big data workloads.

    :ivar config: Configuration for client.
    :vartype config: DataLakeStorageClientConfiguration

    :ivar filesystem: Filesystem operations
    :vartype filesystem: azure.mgmt.media.operations.FilesystemOperations
    :ivar path: Path operations
    :vartype path: azure.mgmt.media.operations.PathOperations

    :param credentials: Credentials needed for the client to connect to Azure.
    :type credentials: :mod:`A msrestazure Credentials
     object<msrestazure.azure_active_directory>`
    :param x_ms_version: Specifies the version of the REST protocol used for
     processing the request. This is required when using shared key
     authorization.
    :type x_ms_version: str
    :param account_name: The Azure Storage account name.
    :type account_name: str
    :param dns_suffix: The DNS suffix for the Azure Data Lake Storage
     endpoint.
    :type dns_suffix: str
    """

    def __init__(
            self, credentials, account_name, dns_suffix, x_ms_version=None):

        self.config = DataLakeStorageClientConfiguration(credentials, account_name, dns_suffix, x_ms_version)
        super(DataLakeStorageClient, self).__init__(self.config.credentials, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = '2018-06-17'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.filesystem = FilesystemOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.path = PathOperations(
            self._client, self.config, self._serialize, self._deserialize)
