# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import uuid
from msrest.pipeline import ClientRawResponse

from .. import models


class FilesystemOperations(object):
    """FilesystemOperations operations.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self.config = config

    def list(
            self, prefix=None, continuation=None, max_results=None, x_ms_client_request_id=None, timeout=None, x_ms_date=None, custom_headers=None, raw=False, **operation_config):
        """List Filesystems.

        List filesystems and their properties in given account.

        :param prefix: Filters results to filesystems within the specified
         prefix.
        :type prefix: str
        :param continuation: The number of filesystems returned with each
         invocation is limited. If the number of filesystems to be returned
         exceeds this limit, a continuation token is returned in the response
         header x-ms-continuation. When a continuation token is  returned in
         the response, it must be specified in a subsequent invocation of the
         list operation to continue listing the filesystems.
        :type continuation: str
        :param max_results: An optional value that specifies the maximum
         number of items to return. If omitted or greater than 5,000, the
         response will include up to 5,000 items.
        :type max_results: int
        :param x_ms_client_request_id: A UUID recorded in the analytics logs
         for troubleshooting and correlation.
        :type x_ms_client_request_id: str
        :param timeout: An optional operation timeout value in seconds. The
         period begins when the request is received by the service. If the
         timeout value elapses before the operation completes, the operation
         fails.
        :type timeout: int
        :param x_ms_date: Specifies the Coordinated Universal Time (UTC) for
         the request.  This is required when using shared key authorization.
        :type x_ms_date: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: An iterator like instance of Filesystem
        :rtype:
         ~azure.mgmt.media.models.FilesystemPaged[~azure.mgmt.media.models.Filesystem]
        :raises:
         :class:`DataLakeStorageErrorException<azure.mgmt.media.models.DataLakeStorageErrorException>`
        """
        resource = "account"

        def internal_paging(next_link=None, raw=False):

            if not next_link:
                # Construct URL
                url = self.list.metadata['url']
                path_format_arguments = {
                    'accountName': self._serialize.url("self.config.account_name", self.config.account_name, 'str', skip_quote=True),
                    'dnsSuffix': self._serialize.url("self.config.dns_suffix", self.config.dns_suffix, 'str', skip_quote=True)
                }
                url = self._client.format_url(url, **path_format_arguments)

                # Construct parameters
                query_parameters = {}
                query_parameters['resource'] = self._serialize.query("resource", resource, 'str')
                if prefix is not None:
                    query_parameters['prefix'] = self._serialize.query("prefix", prefix, 'str')
                if continuation is not None:
                    query_parameters['continuation'] = self._serialize.query("continuation", continuation, 'str')
                if max_results is not None:
                    query_parameters['maxResults'] = self._serialize.query("max_results", max_results, 'int', minimum=1)
                if timeout is not None:
                    query_parameters['timeout'] = self._serialize.query("timeout", timeout, 'int', minimum=1)

            else:
                url = next_link
                query_parameters = {}

            # Construct headers
            header_parameters = {}
            header_parameters['Content-Type'] = 'application/json; charset=utf-8'
            if self.config.generate_client_request_id:
                header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
            if custom_headers:
                header_parameters.update(custom_headers)
            if x_ms_client_request_id is not None:
                header_parameters['x-ms-client-request-id'] = self._serialize.header("x_ms_client_request_id", x_ms_client_request_id, 'str', pattern=r'^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$')
            if x_ms_date is not None:
                header_parameters['x-ms-date'] = self._serialize.header("x_ms_date", x_ms_date, 'str')
            if self.config.x_ms_version is not None:
                header_parameters['x-ms-version'] = self._serialize.header("self.config.x_ms_version", self.config.x_ms_version, 'str')
            if self.config.accept_language is not None:
                header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

            # Construct and send request
            request = self._client.get(url, query_parameters)
            response = self._client.send(
                request, header_parameters, stream=False, **operation_config)

            if response.status_code not in [200]:
                raise models.DataLakeStorageErrorException(self._deserialize, response)

            return response

        # Deserialize response
        deserialized = models.FilesystemPaged(internal_paging, self._deserialize.dependencies)

        if raw:
            header_dict = {}
            client_raw_response = models.FilesystemPaged(internal_paging, self._deserialize.dependencies, header_dict)
            return client_raw_response

        return deserialized
    list.metadata = {'url': '/'}

    def create(
            self, filesystem, x_ms_properties=None, x_ms_client_request_id=None, timeout=None, x_ms_date=None, custom_headers=None, raw=False, **operation_config):
        """Create Filesystem.

        Create a filesystem rooted at the specified location. If the filesystem
        already exists, the operation fails.  This operation does not support
        conditional HTTP requests.

        :param filesystem: The filesystem identifier.  The value must start
         and end with a letter or number and must contain only letters,
         numbers, and the dash (-) character.  Consecutive dashes are not
         permitted.  All letters must be lowercase.  The value must have
         between 3 and 63 characters.
        :type filesystem: str
        :param x_ms_properties: User-defined properties to be stored with the
         filesystem, in the format of a comma-separated list of name and value
         pairs "n1=v1, n2=v2, ...", where each value is base64 encoded.
        :type x_ms_properties: str
        :param x_ms_client_request_id: A UUID recorded in the analytics logs
         for troubleshooting and correlation.
        :type x_ms_client_request_id: str
        :param timeout: An optional operation timeout value in seconds. The
         period begins when the request is received by the service. If the
         timeout value elapses before the operation completes, the operation
         fails.
        :type timeout: int
        :param x_ms_date: Specifies the Coordinated Universal Time (UTC) for
         the request.  This is required when using shared key authorization.
        :type x_ms_date: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`DataLakeStorageErrorException<azure.mgmt.media.models.DataLakeStorageErrorException>`
        """
        resource = "filesystem"

        # Construct URL
        url = self.create.metadata['url']
        path_format_arguments = {
            'accountName': self._serialize.url("self.config.account_name", self.config.account_name, 'str', skip_quote=True),
            'dnsSuffix': self._serialize.url("self.config.dns_suffix", self.config.dns_suffix, 'str', skip_quote=True),
            'filesystem': self._serialize.url("filesystem", filesystem, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['resource'] = self._serialize.query("resource", resource, 'str')
        if timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", timeout, 'int', minimum=1)

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if x_ms_properties is not None:
            header_parameters['x-ms-properties'] = self._serialize.header("x_ms_properties", x_ms_properties, 'str')
        if x_ms_client_request_id is not None:
            header_parameters['x-ms-client-request-id'] = self._serialize.header("x_ms_client_request_id", x_ms_client_request_id, 'str', pattern=r'^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$')
        if x_ms_date is not None:
            header_parameters['x-ms-date'] = self._serialize.header("x_ms_date", x_ms_date, 'str')
        if self.config.x_ms_version is not None:
            header_parameters['x-ms-version'] = self._serialize.header("self.config.x_ms_version", self.config.x_ms_version, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [201]:
            raise models.DataLakeStorageErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            client_raw_response.add_headers({
                'Date': 'str',
                'ETag': 'str',
                'Last-Modified': 'str',
                'x-ms-request-id': 'str',
                'x-ms-version': 'str',
                'x-ms-namespace-enabled': 'str',
            })
            return client_raw_response
    create.metadata = {'url': '/{filesystem}'}

    def set_properties(
            self, filesystem, x_ms_properties=None, if_modified_since=None, if_unmodified_since=None, x_ms_client_request_id=None, timeout=None, x_ms_date=None, custom_headers=None, raw=False, **operation_config):
        """Set Filesystem Properties.

        Set properties for the filesystem.  This operation supports conditional
        HTTP requests.  For more information, see [Specifying Conditional
        Headers for Blob Service
        Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).

        :param filesystem: The filesystem identifier.  The value must start
         and end with a letter or number and must contain only letters,
         numbers, and the dash (-) character.  Consecutive dashes are not
         permitted.  All letters must be lowercase.  The value must have
         between 3 and 63 characters.
        :type filesystem: str
        :param x_ms_properties: Optional. User-defined properties to be stored
         with the filesystem, in the format of a comma-separated list of name
         and value pairs "n1=v1, n2=v2, ...", where each value is base64
         encoded.  If the filesystem exists, any properties not included in the
         list will be removed.  All properties are removed if the header is
         omitted.  To merge new and existing properties, first get all existing
         properties and the current E-Tag, then make a conditional request with
         the E-Tag and include values for all properties.
        :type x_ms_properties: str
        :param if_modified_since: Optional. A date and time value. Specify
         this header to perform the operation only if the resource has been
         modified since the specified date and time.
        :type if_modified_since: str
        :param if_unmodified_since: Optional. A date and time value. Specify
         this header to perform the operation only if the resource has not been
         modified since the specified date and time.
        :type if_unmodified_since: str
        :param x_ms_client_request_id: A UUID recorded in the analytics logs
         for troubleshooting and correlation.
        :type x_ms_client_request_id: str
        :param timeout: An optional operation timeout value in seconds. The
         period begins when the request is received by the service. If the
         timeout value elapses before the operation completes, the operation
         fails.
        :type timeout: int
        :param x_ms_date: Specifies the Coordinated Universal Time (UTC) for
         the request.  This is required when using shared key authorization.
        :type x_ms_date: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`DataLakeStorageErrorException<azure.mgmt.media.models.DataLakeStorageErrorException>`
        """
        resource = "filesystem"

        # Construct URL
        url = self.set_properties.metadata['url']
        path_format_arguments = {
            'accountName': self._serialize.url("self.config.account_name", self.config.account_name, 'str', skip_quote=True),
            'dnsSuffix': self._serialize.url("self.config.dns_suffix", self.config.dns_suffix, 'str', skip_quote=True),
            'filesystem': self._serialize.url("filesystem", filesystem, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['resource'] = self._serialize.query("resource", resource, 'str')
        if timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", timeout, 'int', minimum=1)

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if x_ms_properties is not None:
            header_parameters['x-ms-properties'] = self._serialize.header("x_ms_properties", x_ms_properties, 'str')
        if if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", if_modified_since, 'str')
        if if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", if_unmodified_since, 'str')
        if x_ms_client_request_id is not None:
            header_parameters['x-ms-client-request-id'] = self._serialize.header("x_ms_client_request_id", x_ms_client_request_id, 'str', pattern=r'^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$')
        if x_ms_date is not None:
            header_parameters['x-ms-date'] = self._serialize.header("x_ms_date", x_ms_date, 'str')
        if self.config.x_ms_version is not None:
            header_parameters['x-ms-version'] = self._serialize.header("self.config.x_ms_version", self.config.x_ms_version, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.patch(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.DataLakeStorageErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            client_raw_response.add_headers({
                'Date': 'str',
                'ETag': 'str',
                'Last-Modified': 'str',
                'x-ms-request-id': 'str',
                'x-ms-version': 'str',
            })
            return client_raw_response
    set_properties.metadata = {'url': '/{filesystem}'}

    def get_properties(
            self, filesystem, x_ms_client_request_id=None, timeout=None, x_ms_date=None, custom_headers=None, raw=False, **operation_config):
        """Get Filesystem Properties.

        All system and user-defined filesystem properties are specified in the
        response headers.

        :param filesystem: The filesystem identifier.  The value must start
         and end with a letter or number and must contain only letters,
         numbers, and the dash (-) character.  Consecutive dashes are not
         permitted.  All letters must be lowercase.  The value must have
         between 3 and 63 characters.
        :type filesystem: str
        :param x_ms_client_request_id: A UUID recorded in the analytics logs
         for troubleshooting and correlation.
        :type x_ms_client_request_id: str
        :param timeout: An optional operation timeout value in seconds. The
         period begins when the request is received by the service. If the
         timeout value elapses before the operation completes, the operation
         fails.
        :type timeout: int
        :param x_ms_date: Specifies the Coordinated Universal Time (UTC) for
         the request.  This is required when using shared key authorization.
        :type x_ms_date: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`DataLakeStorageErrorException<azure.mgmt.media.models.DataLakeStorageErrorException>`
        """
        resource = "filesystem"

        # Construct URL
        url = self.get_properties.metadata['url']
        path_format_arguments = {
            'accountName': self._serialize.url("self.config.account_name", self.config.account_name, 'str', skip_quote=True),
            'dnsSuffix': self._serialize.url("self.config.dns_suffix", self.config.dns_suffix, 'str', skip_quote=True),
            'filesystem': self._serialize.url("filesystem", filesystem, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['resource'] = self._serialize.query("resource", resource, 'str')
        if timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", timeout, 'int', minimum=1)

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if x_ms_client_request_id is not None:
            header_parameters['x-ms-client-request-id'] = self._serialize.header("x_ms_client_request_id", x_ms_client_request_id, 'str', pattern=r'^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$')
        if x_ms_date is not None:
            header_parameters['x-ms-date'] = self._serialize.header("x_ms_date", x_ms_date, 'str')
        if self.config.x_ms_version is not None:
            header_parameters['x-ms-version'] = self._serialize.header("self.config.x_ms_version", self.config.x_ms_version, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.head(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.DataLakeStorageErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            client_raw_response.add_headers({
                'Date': 'str',
                'ETag': 'str',
                'Last-Modified': 'str',
                'x-ms-request-id': 'str',
                'x-ms-version': 'str',
                'x-ms-properties': 'str',
                'x-ms-namespace-enabled': 'str',
            })
            return client_raw_response
    get_properties.metadata = {'url': '/{filesystem}'}

    def delete(
            self, filesystem, if_modified_since=None, if_unmodified_since=None, x_ms_client_request_id=None, timeout=None, x_ms_date=None, custom_headers=None, raw=False, **operation_config):
        """Delete Filesystem.

        Marks the filesystem for deletion.  When a filesystem is deleted, a
        filesystem with the same identifier cannot be created for at least 30
        seconds. While the filesystem is being deleted, attempts to create a
        filesystem with the same identifier will fail with status code 409
        (Conflict), with the service returning additional error information
        indicating that the filesystem is being deleted. All other operations,
        including operations on any files or directories within the filesystem,
        will fail with status code 404 (Not Found) while the filesystem is
        being deleted. This operation supports conditional HTTP requests.  For
        more information, see [Specifying Conditional Headers for Blob Service
        Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).

        :param filesystem: The filesystem identifier.  The value must start
         and end with a letter or number and must contain only letters,
         numbers, and the dash (-) character.  Consecutive dashes are not
         permitted.  All letters must be lowercase.  The value must have
         between 3 and 63 characters.
        :type filesystem: str
        :param if_modified_since: Optional. A date and time value. Specify
         this header to perform the operation only if the resource has been
         modified since the specified date and time.
        :type if_modified_since: str
        :param if_unmodified_since: Optional. A date and time value. Specify
         this header to perform the operation only if the resource has not been
         modified since the specified date and time.
        :type if_unmodified_since: str
        :param x_ms_client_request_id: A UUID recorded in the analytics logs
         for troubleshooting and correlation.
        :type x_ms_client_request_id: str
        :param timeout: An optional operation timeout value in seconds. The
         period begins when the request is received by the service. If the
         timeout value elapses before the operation completes, the operation
         fails.
        :type timeout: int
        :param x_ms_date: Specifies the Coordinated Universal Time (UTC) for
         the request.  This is required when using shared key authorization.
        :type x_ms_date: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`DataLakeStorageErrorException<azure.mgmt.media.models.DataLakeStorageErrorException>`
        """
        resource = "filesystem"

        # Construct URL
        url = self.delete.metadata['url']
        path_format_arguments = {
            'accountName': self._serialize.url("self.config.account_name", self.config.account_name, 'str', skip_quote=True),
            'dnsSuffix': self._serialize.url("self.config.dns_suffix", self.config.dns_suffix, 'str', skip_quote=True),
            'filesystem': self._serialize.url("filesystem", filesystem, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['resource'] = self._serialize.query("resource", resource, 'str')
        if timeout is not None:
            query_parameters['timeout'] = self._serialize.query("timeout", timeout, 'int', minimum=1)

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if if_modified_since is not None:
            header_parameters['If-Modified-Since'] = self._serialize.header("if_modified_since", if_modified_since, 'str')
        if if_unmodified_since is not None:
            header_parameters['If-Unmodified-Since'] = self._serialize.header("if_unmodified_since", if_unmodified_since, 'str')
        if x_ms_client_request_id is not None:
            header_parameters['x-ms-client-request-id'] = self._serialize.header("x_ms_client_request_id", x_ms_client_request_id, 'str', pattern=r'^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$')
        if x_ms_date is not None:
            header_parameters['x-ms-date'] = self._serialize.header("x_ms_date", x_ms_date, 'str')
        if self.config.x_ms_version is not None:
            header_parameters['x-ms-version'] = self._serialize.header("self.config.x_ms_version", self.config.x_ms_version, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters)
        response = self._client.send(request, header_parameters, stream=False, **operation_config)

        if response.status_code not in [202]:
            raise models.DataLakeStorageErrorException(self._deserialize, response)

        if raw:
            client_raw_response = ClientRawResponse(None, response)
            client_raw_response.add_headers({
                'x-ms-request-id': 'str',
                'x-ms-version': 'str',
                'Date': 'str',
            })
            return client_raw_response
    delete.metadata = {'url': '/{filesystem}'}
