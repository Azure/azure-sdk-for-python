# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class Dimension(Model):
    """The connector object error.

    :param health: The health status for the domain controller. Possible
     values include: 'Healthy', 'Warning', 'Error', 'NotMonitored', 'Missing'
    :type health: str or ~azure.mgmt.adhybridhealthservice.models.HealthStatus
    :param simple_properties: List of service specific configuration
     properties.
    :type simple_properties: object
    :param active_alerts: The count of alerts that are currently active for
     the service.
    :type active_alerts: int
    :param additional_information: The additional information related to the
     service.
    :type additional_information: str
    :param last_updated: The date or time , in UTC, when the service
     properties were last updated.
    :type last_updated: datetime
    :param display_name: The display name of the service.
    :type display_name: str
    :param resolved_alerts: The total count of alerts that has been resolved
     for the service.
    :type resolved_alerts: int
    :param signature: The signature of the service.
    :type signature: str
    :param type: The service type for the services onboarded to Azure Active
     Directory Connect Health. Depending on whether the service is monitoring,
     ADFS, Sync or ADDS roles, the service type can either be
     AdFederationService or AadSyncService or AdDomainService.
    :type type: str
    """

    _attribute_map = {
        'health': {'key': 'health', 'type': 'str'},
        'simple_properties': {'key': 'simpleProperties', 'type': 'object'},
        'active_alerts': {'key': 'activeAlerts', 'type': 'int'},
        'additional_information': {'key': 'additionalInformation', 'type': 'str'},
        'last_updated': {'key': 'lastUpdated', 'type': 'iso-8601'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'resolved_alerts': {'key': 'resolvedAlerts', 'type': 'int'},
        'signature': {'key': 'signature', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Dimension, self).__init__(**kwargs)
        self.health = kwargs.get('health', None)
        self.simple_properties = kwargs.get('simple_properties', None)
        self.active_alerts = kwargs.get('active_alerts', None)
        self.additional_information = kwargs.get('additional_information', None)
        self.last_updated = kwargs.get('last_updated', None)
        self.display_name = kwargs.get('display_name', None)
        self.resolved_alerts = kwargs.get('resolved_alerts', None)
        self.signature = kwargs.get('signature', None)
        self.type = kwargs.get('type', None)
