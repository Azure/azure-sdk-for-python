# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class PasswordManagementSettings(Model):
    """The password management settings.

    :param enabled: Indicates if the password extension is enabled.
    :type enabled: bool
    :param extension_file_path: The file path of the password management
     extension.
    :type extension_file_path: str
    :param connect_to: Connection point of password management.
    :type connect_to: str
    :param connection_timeout: Connection timeoit for password extension.
    :type connection_timeout: int
    :param user: User to execute password extension.
    :type user: str
    :param supported_password_operations: The supported password operations.
     Possible values include: 'Undefined', 'Set', 'Change'
    :type supported_password_operations: str or
     ~azure.mgmt.adhybridhealthservice.models.PasswordOperationTypes
    :param maximum_retry_count: The maximum number of retries.
    :type maximum_retry_count: int
    :param retry_interval_in_seconds: The time between retries.
    :type retry_interval_in_seconds: int
    :param requires_secure_connection: Indicates if a secure connection is
     required for password management.
    :type requires_secure_connection: bool
    :param unlock_account: Indicates if accounts should be unloacked when
     resetting password.
    :type unlock_account: bool
    """

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'extension_file_path': {'key': 'extensionFilePath', 'type': 'str'},
        'connect_to': {'key': 'connectTo', 'type': 'str'},
        'connection_timeout': {'key': 'connectionTimeout', 'type': 'int'},
        'user': {'key': 'user', 'type': 'str'},
        'supported_password_operations': {'key': 'supportedPasswordOperations', 'type': 'str'},
        'maximum_retry_count': {'key': 'maximumRetryCount', 'type': 'int'},
        'retry_interval_in_seconds': {'key': 'retryIntervalInSeconds', 'type': 'int'},
        'requires_secure_connection': {'key': 'requiresSecureConnection', 'type': 'bool'},
        'unlock_account': {'key': 'unlockAccount', 'type': 'bool'},
    }

    def __init__(self, *, enabled: bool=None, extension_file_path: str=None, connect_to: str=None, connection_timeout: int=None, user: str=None, supported_password_operations=None, maximum_retry_count: int=None, retry_interval_in_seconds: int=None, requires_secure_connection: bool=None, unlock_account: bool=None, **kwargs) -> None:
        super(PasswordManagementSettings, self).__init__(**kwargs)
        self.enabled = enabled
        self.extension_file_path = extension_file_path
        self.connect_to = connect_to
        self.connection_timeout = connection_timeout
        self.user = user
        self.supported_password_operations = supported_password_operations
        self.maximum_retry_count = maximum_retry_count
        self.retry_interval_in_seconds = retry_interval_in_seconds
        self.requires_secure_connection = requires_secure_connection
        self.unlock_account = unlock_account
