# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .tracked_resource import TrackedResource


class NetworkResourceDescription(TrackedResource):
    """This type describes a network resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified identifier for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param location: The geo-location where the resource lives
    :type location: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :ivar provisioning_state: State of the resource.
    :vartype provisioning_state: str
    :param description: User readable description of the network.
    :type description: str
    :param address_prefix: Required. the address prefix for this network.
    :type address_prefix: str
    :param ingress_config: Configuration for public connectivity for this
     network.
    :type ingress_config: ~azure.mgmt.servicefabricmesh.models.IngressConfig
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'address_prefix': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'address_prefix': {'key': 'properties.addressPrefix', 'type': 'str'},
        'ingress_config': {'key': 'properties.ingressConfig', 'type': 'IngressConfig'},
    }

    def __init__(self, **kwargs):
        super(NetworkResourceDescription, self).__init__(**kwargs)
        self.provisioning_state = None
        self.description = kwargs.get('description', None)
        self.address_prefix = kwargs.get('address_prefix', None)
        self.ingress_config = kwargs.get('ingress_config', None)
