# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft and contributors.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class StartTask(Model):
    """
    A task defined on a pool and run by compute nodes when they join the pool.

    :param command_line: Gets or sets the command line of the start task.
    :type command_line: str
    :param resource_files: Gets or sets a list of files that Batch will
     download to the compute node before running the command line.
    :type resource_files: list of :class:`ResourceFile
     <batchserviceclient.models.ResourceFile>`
    :param environment_settings: Gets or sets a list of environment variable
     settings for the start task.
    :type environment_settings: list of :class:`EnvironmentSetting
     <batchserviceclient.models.EnvironmentSetting>`
    :param run_elevated: Gets or sets whether to run the start task in
     elevated mode. The default value is false.
    :type run_elevated: bool
    :param max_task_retry_count: Gets or sets the maximum number of times the
     task may be retried.
    :type max_task_retry_count: int
    :param wait_for_success: Gets or sets whether the Batch Service should
     wait for the start task to complete successfully (that is, to exit with
     exit code 0) before scheduling any tasks on the compute node.
    :type wait_for_success: bool
    """ 

    _attribute_map = {
        'command_line': {'key': 'commandLine', 'type': 'str'},
        'resource_files': {'key': 'resourceFiles', 'type': '[ResourceFile]'},
        'environment_settings': {'key': 'environmentSettings', 'type': '[EnvironmentSetting]'},
        'run_elevated': {'key': 'runElevated', 'type': 'bool'},
        'max_task_retry_count': {'key': 'maxTaskRetryCount', 'type': 'int'},
        'wait_for_success': {'key': 'waitForSuccess', 'type': 'bool'},
    }

    def __init__(self, command_line=None, resource_files=None, environment_settings=None, run_elevated=None, max_task_retry_count=None, wait_for_success=None):
        self.command_line = command_line
        self.resource_files = resource_files
        self.environment_settings = environment_settings
        self.run_elevated = run_elevated
        self.max_task_retry_count = max_task_retry_count
        self.wait_for_success = wait_for_success
