# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from enum import Enum


class OSType(Enum):

    linux = "linux"
    windows = "windows"


class AccessScope(Enum):

    job = "job"


class CertificateState(Enum):

    active = "active"
    deleting = "deleting"
    delete_failed = "deletefailed"


class CertificateFormat(Enum):

    pfx = "pfx"
    cer = "cer"


class JobAction(Enum):

    none = "none"
    disable = "disable"
    terminate = "terminate"


class DependencyAction(Enum):

    satisfy = "satisfy"
    block = "block"


class AutoUserScope(Enum):

    task = "task"
    pool = "pool"


class ElevationLevel(Enum):

    non_admin = "nonadmin"
    admin = "admin"


class OutputFileUploadCondition(Enum):

    task_success = "tasksuccess"
    task_failure = "taskfailure"
    task_completion = "taskcompletion"


class ComputeNodeFillType(Enum):

    spread = "spread"
    pack = "pack"


class CertificateStoreLocation(Enum):

    current_user = "currentuser"
    local_machine = "localmachine"


class CertificateVisibility(Enum):

    start_task = "starttask"
    task = "task"
    remote_user = "remoteuser"


class CachingType(Enum):

    none = "none"
    read_only = "readonly"
    read_write = "readwrite"


class StorageAccountType(Enum):

    standard_lrs = "standard_lrs"
    premium_lrs = "premium_lrs"


class InboundEndpointProtocol(Enum):

    tcp = "tcp"
    udp = "udp"


class NetworkSecurityGroupRuleAccess(Enum):

    allow = "allow"
    deny = "deny"


class PoolLifetimeOption(Enum):

    job_schedule = "jobschedule"
    job = "job"


class OnAllTasksComplete(Enum):

    no_action = "noaction"
    terminate_job = "terminatejob"


class OnTaskFailure(Enum):

    no_action = "noaction"
    perform_exit_options_job_action = "performexitoptionsjobaction"


class JobScheduleState(Enum):

    active = "active"
    completed = "completed"
    disabled = "disabled"
    terminating = "terminating"
    deleting = "deleting"


class ErrorCategory(Enum):

    user_error = "usererror"
    server_error = "servererror"


class JobState(Enum):

    active = "active"
    disabling = "disabling"
    disabled = "disabled"
    enabling = "enabling"
    terminating = "terminating"
    completed = "completed"
    deleting = "deleting"


class JobPreparationTaskState(Enum):

    running = "running"
    completed = "completed"


class TaskExecutionResult(Enum):

    success = "success"
    failure = "failure"


class JobReleaseTaskState(Enum):

    running = "running"
    completed = "completed"


class TaskCountValidationStatus(Enum):

    validated = "validated"
    unvalidated = "unvalidated"


class PoolState(Enum):

    active = "active"
    deleting = "deleting"
    upgrading = "upgrading"


class AllocationState(Enum):

    steady = "steady"
    resizing = "resizing"
    stopping = "stopping"


class TaskState(Enum):

    active = "active"
    preparing = "preparing"
    running = "running"
    completed = "completed"


class TaskAddStatus(Enum):

    success = "success"
    client_error = "clienterror"
    server_error = "servererror"


class SubtaskState(Enum):

    preparing = "preparing"
    running = "running"
    completed = "completed"


class StartTaskState(Enum):

    running = "running"
    completed = "completed"


class ComputeNodeState(Enum):

    idle = "idle"
    rebooting = "rebooting"
    reimaging = "reimaging"
    running = "running"
    unusable = "unusable"
    creating = "creating"
    starting = "starting"
    waiting_for_start_task = "waitingforstarttask"
    start_task_failed = "starttaskfailed"
    unknown = "unknown"
    leaving_pool = "leavingpool"
    offline = "offline"
    preempted = "preempted"


class SchedulingState(Enum):

    enabled = "enabled"
    disabled = "disabled"


class DisableJobOption(Enum):

    requeue = "requeue"
    terminate = "terminate"
    wait = "wait"


class ComputeNodeDeallocationOption(Enum):

    requeue = "requeue"
    terminate = "terminate"
    task_completion = "taskcompletion"
    retained_data = "retaineddata"


class ComputeNodeRebootOption(Enum):

    requeue = "requeue"
    terminate = "terminate"
    task_completion = "taskcompletion"
    retained_data = "retaineddata"


class ComputeNodeReimageOption(Enum):

    requeue = "requeue"
    terminate = "terminate"
    task_completion = "taskcompletion"
    retained_data = "retaineddata"


class DisableComputeNodeSchedulingOption(Enum):

    requeue = "requeue"
    terminate = "terminate"
    task_completion = "taskcompletion"
