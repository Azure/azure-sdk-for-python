# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import SDKClient
from msrest import Serializer, Deserializer
from msrestazure import AzureConfiguration
from .version import VERSION
from msrest.pipeline import ClientRawResponse
from msrestazure.azure_exceptions import CloudError
import uuid
from . import models


class InstanceMetadataClientConfiguration(AzureConfiguration):
    """Configuration for InstanceMetadataClient
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param credentials: Credentials needed for the client to connect to Azure.
    :type credentials: :mod:`A msrestazure Credentials
     object<msrestazure.azure_active_directory>`
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, base_url=None):

        if credentials is None:
            raise ValueError("Parameter 'credentials' must not be None.")
        if not base_url:
            base_url = 'http://169.254.169.254/metadata'

        super(InstanceMetadataClientConfiguration, self).__init__(base_url)

        self.add_user_agent('azure-mgmt-imds/{}'.format(VERSION))
        self.add_user_agent('Azure-SDK-For-Python')

        self.credentials = credentials


class InstanceMetadataClient(SDKClient):
    """The Azure Instance Metadata Client.

    :ivar config: Configuration for client.
    :vartype config: InstanceMetadataClientConfiguration

    :param credentials: Credentials needed for the client to connect to Azure.
    :type credentials: :mod:`A msrestazure Credentials
     object<msrestazure.azure_active_directory>`
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, base_url=None):

        self.config = InstanceMetadataClientConfiguration(credentials, base_url)
        super(InstanceMetadataClient, self).__init__(self.config.credentials, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = '2018-10-01'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)


    def instance_method(
            self, api_version, custom_headers=None, raw=False, **operation_config):
        """Get Instance Metadata for the Virtual Machine.

        :param api_version: This is the version of API to invoke.
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        metadata = "true"

        # Construct URL
        url = self.instance_method.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['Metadata'] = self._serialize.header("metadata", metadata, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400, 403, 404, 405, 429, 500, 503]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Instance', response)
        if response.status_code == 400:
            deserialized = self._deserialize('ErrorResponse', response)
        if response.status_code == 403:
            deserialized = self._deserialize('ErrorResponse', response)
        if response.status_code == 404:
            deserialized = self._deserialize('ErrorResponse', response)
        if response.status_code == 405:
            deserialized = self._deserialize('ErrorResponse', response)
        if response.status_code == 429:
            deserialized = self._deserialize('ErrorResponse', response)
        if response.status_code == 500:
            deserialized = self._deserialize('ErrorResponse', response)
        if response.status_code == 503:
            deserialized = self._deserialize('ErrorResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    instance_method.metadata = {'url': '/instance'}

    def attested_method(
            self, api_version, nonce=None, custom_headers=None, raw=False, **operation_config):
        """Get Attested Data for the Virtual Machine.

        :param api_version: This is the version of API to invoke.
        :type api_version: str
        :param nonce: 10-digit random number.
        :type nonce: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        metadata = "true"

        # Construct URL
        url = self.attested_method.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        if nonce is not None:
            query_parameters['nonce'] = self._serialize.query("nonce", nonce, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['Metadata'] = self._serialize.header("metadata", metadata, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400, 403, 404, 405, 429, 500, 503]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Attested', response)
        if response.status_code == 400:
            deserialized = self._deserialize('ErrorResponse', response)
        if response.status_code == 403:
            deserialized = self._deserialize('ErrorResponse', response)
        if response.status_code == 404:
            deserialized = self._deserialize('ErrorResponse', response)
        if response.status_code == 405:
            deserialized = self._deserialize('ErrorResponse', response)
        if response.status_code == 429:
            deserialized = self._deserialize('ErrorResponse', response)
        if response.status_code == 500:
            deserialized = self._deserialize('ErrorResponse', response)
        if response.status_code == 503:
            deserialized = self._deserialize('ErrorResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    attested_method.metadata = {'url': '/attested/document'}

    def get_token(
            self, resource, api_version, client_id=None, object_id=None, msi_res_id=None, authority=None, bypass_cache=None, custom_headers=None, raw=False, **operation_config):
        """Get a Token from Azure AD.

        :param resource: This is the urlencoded identifier URI of the sink
         resource for the requested Azure AD token. The resulting token
         contains the corresponding aud for this resource.
        :type resource: str
        :param api_version: This is the API version to use. Possible values
         include: '2018-02-01', '2018-04-02', '2018-10-01'
        :type api_version: str
        :param client_id: This identifies, by Azure AD client id, a specific
         explicit identity to use when authenticating to Azure AD. Mutually
         exclusive with object_id and msi_res_id.
        :type client_id: str
        :param object_id: This identifies, by Azure AD object id, a specific
         explicit identity to use when authenticating to Azure AD. Mutually
         exclusive with client_id and msi_res_id.
        :type object_id: str
        :param msi_res_id: This identifies, by urlencoded ARM resource id, a
         specific explicit identity to use when authenticating to Azure AD.
         Mutually exclusive with client_id and object_id.
        :type msi_res_id: str
        :param authority: This indicates the authority to request AAD tokens
         from. Defaults to the known authority of the identity to be used.
        :type authority: str
        :param bypass_cache: If provided, the value must be 'true'. This
         indicates to the server that the token must be retrieved from Azure AD
         and cannot be retrieved from an internal cache. Possible values
         include: 'true'
        :type bypass_cache: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        metadata = "true"

        # Construct URL
        url = self.get_token.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['resource'] = self._serialize.query("resource", resource, 'str')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        if client_id is not None:
            query_parameters['client_id'] = self._serialize.query("client_id", client_id, 'str')
        if object_id is not None:
            query_parameters['object_id'] = self._serialize.query("object_id", object_id, 'str')
        if msi_res_id is not None:
            query_parameters['msi_res_id'] = self._serialize.query("msi_res_id", msi_res_id, 'str')
        if authority is not None:
            query_parameters['authority'] = self._serialize.query("authority", authority, 'str')
        if bypass_cache is not None:
            query_parameters['bypass_cache'] = self._serialize.query("bypass_cache", bypass_cache, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['Metadata'] = self._serialize.header("metadata", metadata, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400, 404, 405, 429, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('TokenResponse', response)
        if response.status_code == 400:
            deserialized = self._deserialize('ErrorResponse', response)
        if response.status_code == 404:
            deserialized = self._deserialize('ErrorResponse', response)
        if response.status_code == 405:
            deserialized = self._deserialize('ErrorResponse', response)
        if response.status_code == 429:
            deserialized = self._deserialize('ErrorResponse', response)
        if response.status_code == 500:
            deserialized = self._deserialize('ErrorResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_token.metadata = {'url': '/identity/oauth2/token'}

    def get_info(
            self, api_version, custom_headers=None, raw=False, **operation_config):
        """Get information about AAD Metadata.

        :param api_version: This is the API version to use. Possible values
         include: '2018-02-01', '2018-04-02', '2018-10-01'
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        metadata = "true"

        # Construct URL
        url = self.get_info.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['Metadata'] = self._serialize.header("metadata", metadata, 'str')
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400, 404, 405, 429, 500]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('InfoResponse', response)
        if response.status_code == 400:
            deserialized = self._deserialize('ErrorResponse', response)
        if response.status_code == 404:
            deserialized = self._deserialize('ErrorResponse', response)
        if response.status_code == 405:
            deserialized = self._deserialize('ErrorResponse', response)
        if response.status_code == 429:
            deserialized = self._deserialize('ErrorResponse', response)
        if response.status_code == 500:
            deserialized = self._deserialize('ErrorResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_info.metadata = {'url': '/identity/info'}
