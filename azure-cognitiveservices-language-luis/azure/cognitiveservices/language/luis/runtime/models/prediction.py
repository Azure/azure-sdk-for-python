# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class Prediction(Model):
    """Represents the prediction of a query.

    All required parameters must be populated in order to send to Azure.

    :param normalized_query: Required. The query after pre-processing and
     normalization.
    :type normalized_query: str
    :param altered_query: The query after spell checking. Only set if spell
     check was enabled and a spelling mistake was found.
    :type altered_query: str
    :param top_intent: Required. The name of the top scoring intent.
    :type top_intent: str
    :param intents: Required. A dictionary representing the intents that
     fired.
    :type intents: dict[str,
     ~azure.cognitiveservices.language.luis.runtime.models.Intent]
    :param entities: Required. The dictionary representing the entities that
     fired.
    :type entities: dict[str, object]
    :param sentiment: The result of the sentiment analysis.
    :type sentiment:
     ~azure.cognitiveservices.language.luis.runtime.models.Sentiment
    """

    _validation = {
        'normalized_query': {'required': True},
        'top_intent': {'required': True},
        'intents': {'required': True},
        'entities': {'required': True},
    }

    _attribute_map = {
        'normalized_query': {'key': 'normalizedQuery', 'type': 'str'},
        'altered_query': {'key': 'alteredQuery', 'type': 'str'},
        'top_intent': {'key': 'topIntent', 'type': 'str'},
        'intents': {'key': 'intents', 'type': '{Intent}'},
        'entities': {'key': 'entities', 'type': '{object}'},
        'sentiment': {'key': 'sentiment', 'type': 'Sentiment'},
    }

    def __init__(self, **kwargs):
        super(Prediction, self).__init__(**kwargs)
        self.normalized_query = kwargs.get('normalized_query', None)
        self.altered_query = kwargs.get('altered_query', None)
        self.top_intent = kwargs.get('top_intent', None)
        self.intents = kwargs.get('intents', None)
        self.entities = kwargs.get('entities', None)
        self.sentiment = kwargs.get('sentiment', None)
