# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class SystemReflectionMethodBase(Model):
    """SystemReflectionMethodBase.

    :param method_implementation_flags: Possible values include: 'Managed',
     'IL', 'Native', 'OPTIL', 'Runtime', 'CodeTypeMask', 'Unmanaged',
     'ManagedMask', 'NoInlining', 'ForwardRef', 'Synchronized',
     'NoOptimization', 'PreserveSig', 'AggressiveInlining', 'InternalCall',
     'MaxMethodImplVal'
    :type method_implementation_flags: str or ~azure.monitor.models.enum
    :param method_handle:
    :type method_handle: ~azure.monitor.models.SystemRuntimeMethodHandle
    :param attributes: Possible values include: 'ReuseSlot', 'PrivateScope',
     'Private', 'FamANDAssem', 'Assembly', 'Family', 'FamORAssem', 'Public',
     'MemberAccessMask', 'UnmanagedExport', 'Static', 'Final', 'Virtual',
     'HideBySig', 'NewSlot', 'VtableLayoutMask', 'CheckAccessOnOverride',
     'Abstract', 'SpecialName', 'RTSpecialName', 'PinvokeImpl', 'HasSecurity',
     'RequireSecObject', 'ReservedMask'
    :type attributes: str or ~azure.monitor.models.enum
    :param calling_convention: Possible values include: 'Standard', 'VarArgs',
     'Any', 'HasThis', 'ExplicitThis'
    :type calling_convention: str or ~azure.monitor.models.enum
    :param is_generic_method_definition:
    :type is_generic_method_definition: bool
    :param contains_generic_parameters:
    :type contains_generic_parameters: bool
    :param is_generic_method:
    :type is_generic_method: bool
    :param is_security_critical:
    :type is_security_critical: bool
    :param is_security_safe_critical:
    :type is_security_safe_critical: bool
    :param is_security_transparent:
    :type is_security_transparent: bool
    :param is_public:
    :type is_public: bool
    :param is_private:
    :type is_private: bool
    :param is_family:
    :type is_family: bool
    :param is_assembly:
    :type is_assembly: bool
    :param is_family_and_assembly:
    :type is_family_and_assembly: bool
    :param is_family_or_assembly:
    :type is_family_or_assembly: bool
    :param is_static:
    :type is_static: bool
    :param is_final:
    :type is_final: bool
    :param is_virtual:
    :type is_virtual: bool
    :param is_hide_by_sig:
    :type is_hide_by_sig: bool
    :param is_abstract:
    :type is_abstract: bool
    :param is_special_name:
    :type is_special_name: bool
    :param is_constructor:
    :type is_constructor: bool
    :param member_type: Possible values include: 'Constructor', 'Event',
     'Field', 'Method', 'Property', 'TypeInfo', 'Custom', 'NestedType', 'All'
    :type member_type: str or ~azure.monitor.models.enum
    :param name:
    :type name: str
    :param declaring_type:
    :type declaring_type: ~azure.monitor.models.SystemType
    :param reflected_type:
    :type reflected_type: ~azure.monitor.models.SystemType
    :param custom_attributes:
    :type custom_attributes:
     list[~azure.monitor.models.SystemReflectionCustomAttributeData]
    :param metadata_token:
    :type metadata_token: int
    :param module:
    :type module: ~azure.monitor.models.SystemReflectionModule
    """

    _attribute_map = {
        'method_implementation_flags': {'key': 'MethodImplementationFlags', 'type': 'str'},
        'method_handle': {'key': 'MethodHandle', 'type': 'SystemRuntimeMethodHandle'},
        'attributes': {'key': 'Attributes', 'type': 'str'},
        'calling_convention': {'key': 'CallingConvention', 'type': 'str'},
        'is_generic_method_definition': {'key': 'IsGenericMethodDefinition', 'type': 'bool'},
        'contains_generic_parameters': {'key': 'ContainsGenericParameters', 'type': 'bool'},
        'is_generic_method': {'key': 'IsGenericMethod', 'type': 'bool'},
        'is_security_critical': {'key': 'IsSecurityCritical', 'type': 'bool'},
        'is_security_safe_critical': {'key': 'IsSecuritySafeCritical', 'type': 'bool'},
        'is_security_transparent': {'key': 'IsSecurityTransparent', 'type': 'bool'},
        'is_public': {'key': 'IsPublic', 'type': 'bool'},
        'is_private': {'key': 'IsPrivate', 'type': 'bool'},
        'is_family': {'key': 'IsFamily', 'type': 'bool'},
        'is_assembly': {'key': 'IsAssembly', 'type': 'bool'},
        'is_family_and_assembly': {'key': 'IsFamilyAndAssembly', 'type': 'bool'},
        'is_family_or_assembly': {'key': 'IsFamilyOrAssembly', 'type': 'bool'},
        'is_static': {'key': 'IsStatic', 'type': 'bool'},
        'is_final': {'key': 'IsFinal', 'type': 'bool'},
        'is_virtual': {'key': 'IsVirtual', 'type': 'bool'},
        'is_hide_by_sig': {'key': 'IsHideBySig', 'type': 'bool'},
        'is_abstract': {'key': 'IsAbstract', 'type': 'bool'},
        'is_special_name': {'key': 'IsSpecialName', 'type': 'bool'},
        'is_constructor': {'key': 'IsConstructor', 'type': 'bool'},
        'member_type': {'key': 'MemberType', 'type': 'str'},
        'name': {'key': 'Name', 'type': 'str'},
        'declaring_type': {'key': 'DeclaringType', 'type': 'SystemType'},
        'reflected_type': {'key': 'ReflectedType', 'type': 'SystemType'},
        'custom_attributes': {'key': 'CustomAttributes', 'type': '[SystemReflectionCustomAttributeData]'},
        'metadata_token': {'key': 'MetadataToken', 'type': 'int'},
        'module': {'key': 'Module', 'type': 'SystemReflectionModule'},
    }

    def __init__(self, **kwargs):
        super(SystemReflectionMethodBase, self).__init__(**kwargs)
        self.method_implementation_flags = kwargs.get('method_implementation_flags', None)
        self.method_handle = kwargs.get('method_handle', None)
        self.attributes = kwargs.get('attributes', None)
        self.calling_convention = kwargs.get('calling_convention', None)
        self.is_generic_method_definition = kwargs.get('is_generic_method_definition', None)
        self.contains_generic_parameters = kwargs.get('contains_generic_parameters', None)
        self.is_generic_method = kwargs.get('is_generic_method', None)
        self.is_security_critical = kwargs.get('is_security_critical', None)
        self.is_security_safe_critical = kwargs.get('is_security_safe_critical', None)
        self.is_security_transparent = kwargs.get('is_security_transparent', None)
        self.is_public = kwargs.get('is_public', None)
        self.is_private = kwargs.get('is_private', None)
        self.is_family = kwargs.get('is_family', None)
        self.is_assembly = kwargs.get('is_assembly', None)
        self.is_family_and_assembly = kwargs.get('is_family_and_assembly', None)
        self.is_family_or_assembly = kwargs.get('is_family_or_assembly', None)
        self.is_static = kwargs.get('is_static', None)
        self.is_final = kwargs.get('is_final', None)
        self.is_virtual = kwargs.get('is_virtual', None)
        self.is_hide_by_sig = kwargs.get('is_hide_by_sig', None)
        self.is_abstract = kwargs.get('is_abstract', None)
        self.is_special_name = kwargs.get('is_special_name', None)
        self.is_constructor = kwargs.get('is_constructor', None)
        self.member_type = kwargs.get('member_type', None)
        self.name = kwargs.get('name', None)
        self.declaring_type = kwargs.get('declaring_type', None)
        self.reflected_type = kwargs.get('reflected_type', None)
        self.custom_attributes = kwargs.get('custom_attributes', None)
        self.metadata_token = kwargs.get('metadata_token', None)
        self.module = kwargs.get('module', None)
