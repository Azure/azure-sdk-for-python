# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class SystemReflectionFieldInfo(Model):
    """SystemReflectionFieldInfo.

    :param member_type: Possible values include: 'Constructor', 'Event',
     'Field', 'Method', 'Property', 'TypeInfo', 'Custom', 'NestedType', 'All'
    :type member_type: str or ~azure.monitor.models.enum
    :param field_handle:
    :type field_handle: ~azure.monitor.models.SystemRuntimeFieldHandle
    :param field_type:
    :type field_type: ~azure.monitor.models.SystemType
    :param attributes: Possible values include: 'PrivateScope', 'Private',
     'FamANDAssem', 'Assembly', 'Family', 'FamORAssem', 'Public',
     'FieldAccessMask', 'Static', 'InitOnly', 'Literal', 'NotSerialized',
     'HasFieldRVA', 'SpecialName', 'RTSpecialName', 'HasFieldMarshal',
     'PinvokeImpl', 'HasDefault', 'ReservedMask'
    :type attributes: str or ~azure.monitor.models.enum
    :param is_public:
    :type is_public: bool
    :param is_private:
    :type is_private: bool
    :param is_family:
    :type is_family: bool
    :param is_assembly:
    :type is_assembly: bool
    :param is_family_and_assembly:
    :type is_family_and_assembly: bool
    :param is_family_or_assembly:
    :type is_family_or_assembly: bool
    :param is_static:
    :type is_static: bool
    :param is_init_only:
    :type is_init_only: bool
    :param is_literal:
    :type is_literal: bool
    :param is_not_serialized:
    :type is_not_serialized: bool
    :param is_special_name:
    :type is_special_name: bool
    :param is_pinvoke_impl:
    :type is_pinvoke_impl: bool
    :param is_security_critical:
    :type is_security_critical: bool
    :param is_security_safe_critical:
    :type is_security_safe_critical: bool
    :param is_security_transparent:
    :type is_security_transparent: bool
    :param name:
    :type name: str
    :param declaring_type:
    :type declaring_type: ~azure.monitor.models.SystemType
    :param reflected_type:
    :type reflected_type: ~azure.monitor.models.SystemType
    :param custom_attributes:
    :type custom_attributes:
     list[~azure.monitor.models.SystemReflectionCustomAttributeData]
    :param metadata_token:
    :type metadata_token: int
    :param module:
    :type module: ~azure.monitor.models.SystemReflectionModule
    """

    _attribute_map = {
        'member_type': {'key': 'MemberType', 'type': 'str'},
        'field_handle': {'key': 'FieldHandle', 'type': 'SystemRuntimeFieldHandle'},
        'field_type': {'key': 'FieldType', 'type': 'SystemType'},
        'attributes': {'key': 'Attributes', 'type': 'str'},
        'is_public': {'key': 'IsPublic', 'type': 'bool'},
        'is_private': {'key': 'IsPrivate', 'type': 'bool'},
        'is_family': {'key': 'IsFamily', 'type': 'bool'},
        'is_assembly': {'key': 'IsAssembly', 'type': 'bool'},
        'is_family_and_assembly': {'key': 'IsFamilyAndAssembly', 'type': 'bool'},
        'is_family_or_assembly': {'key': 'IsFamilyOrAssembly', 'type': 'bool'},
        'is_static': {'key': 'IsStatic', 'type': 'bool'},
        'is_init_only': {'key': 'IsInitOnly', 'type': 'bool'},
        'is_literal': {'key': 'IsLiteral', 'type': 'bool'},
        'is_not_serialized': {'key': 'IsNotSerialized', 'type': 'bool'},
        'is_special_name': {'key': 'IsSpecialName', 'type': 'bool'},
        'is_pinvoke_impl': {'key': 'IsPinvokeImpl', 'type': 'bool'},
        'is_security_critical': {'key': 'IsSecurityCritical', 'type': 'bool'},
        'is_security_safe_critical': {'key': 'IsSecuritySafeCritical', 'type': 'bool'},
        'is_security_transparent': {'key': 'IsSecurityTransparent', 'type': 'bool'},
        'name': {'key': 'Name', 'type': 'str'},
        'declaring_type': {'key': 'DeclaringType', 'type': 'SystemType'},
        'reflected_type': {'key': 'ReflectedType', 'type': 'SystemType'},
        'custom_attributes': {'key': 'CustomAttributes', 'type': '[SystemReflectionCustomAttributeData]'},
        'metadata_token': {'key': 'MetadataToken', 'type': 'int'},
        'module': {'key': 'Module', 'type': 'SystemReflectionModule'},
    }

    def __init__(self, **kwargs):
        super(SystemReflectionFieldInfo, self).__init__(**kwargs)
        self.member_type = kwargs.get('member_type', None)
        self.field_handle = kwargs.get('field_handle', None)
        self.field_type = kwargs.get('field_type', None)
        self.attributes = kwargs.get('attributes', None)
        self.is_public = kwargs.get('is_public', None)
        self.is_private = kwargs.get('is_private', None)
        self.is_family = kwargs.get('is_family', None)
        self.is_assembly = kwargs.get('is_assembly', None)
        self.is_family_and_assembly = kwargs.get('is_family_and_assembly', None)
        self.is_family_or_assembly = kwargs.get('is_family_or_assembly', None)
        self.is_static = kwargs.get('is_static', None)
        self.is_init_only = kwargs.get('is_init_only', None)
        self.is_literal = kwargs.get('is_literal', None)
        self.is_not_serialized = kwargs.get('is_not_serialized', None)
        self.is_special_name = kwargs.get('is_special_name', None)
        self.is_pinvoke_impl = kwargs.get('is_pinvoke_impl', None)
        self.is_security_critical = kwargs.get('is_security_critical', None)
        self.is_security_safe_critical = kwargs.get('is_security_safe_critical', None)
        self.is_security_transparent = kwargs.get('is_security_transparent', None)
        self.name = kwargs.get('name', None)
        self.declaring_type = kwargs.get('declaring_type', None)
        self.reflected_type = kwargs.get('reflected_type', None)
        self.custom_attributes = kwargs.get('custom_attributes', None)
        self.metadata_token = kwargs.get('metadata_token', None)
        self.module = kwargs.get('module', None)
