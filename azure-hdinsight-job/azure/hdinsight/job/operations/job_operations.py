# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import uuid
from msrest.pipeline import ClientRawResponse

from .. import models


class JobOperations(object):
    """JobOperations operations.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    :ivar fields: If fields set to '*', the request will return full details of the job. Currently the value can only be '*'. Constant value: "*".
    :ivar showall: If showall is set to 'true', the request will return all jobs the user has permission to view, not only the jobs belonging to the user. Constant value: "true".
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self.fields = "*"
        self.showall = "true"

        self.config = config

    def get(
            self, job_id, custom_headers=None, raw=False, **operation_config):
        """Gets job details from the specified HDInsight cluster.

        :param job_id: The id of the job.
        :type job_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: JobDetailRootJsonObject or ClientRawResponse if raw=true
        :rtype: ~azure.hdinsight.job.models.JobDetailRootJsonObject or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`JobOperationsErrorResponseException<azure.hdinsight.job.models.JobOperationsErrorResponseException>`
        """
        # Construct URL
        url = self.get.metadata['url']
        path_format_arguments = {
            'clusterDnsName': self._serialize.url("self.config.cluster_dns_name", self.config.cluster_dns_name, 'str', skip_quote=True),
            'jobId': self._serialize.url("job_id", job_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['user.name'] = self._serialize.query("self.config.username", self.config.username, 'str')
        query_parameters['fields'] = self._serialize.query("self.fields", self.fields, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.JobOperationsErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('JobDetailRootJsonObject', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get.metadata = {'url': '/templeton/v1/jobs/{jobId}'}

    def kill(
            self, job_id, custom_headers=None, raw=False, **operation_config):
        """Initiates cancel on given running job in the specified HDInsight.

        :param job_id: The id of the job.
        :type job_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: JobDetailRootJsonObject or ClientRawResponse if raw=true
        :rtype: ~azure.hdinsight.job.models.JobDetailRootJsonObject or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`JobOperationsErrorResponseException<azure.hdinsight.job.models.JobOperationsErrorResponseException>`
        """
        # Construct URL
        url = self.kill.metadata['url']
        path_format_arguments = {
            'clusterDnsName': self._serialize.url("self.config.cluster_dns_name", self.config.cluster_dns_name, 'str', skip_quote=True),
            'jobId': self._serialize.url("job_id", job_id, 'str', min_length=1)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['user.name'] = self._serialize.query("self.config.username", self.config.username, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.JobOperationsErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('JobDetailRootJsonObject', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    kill.metadata = {'url': '/templeton/v1/jobs/{jobId}'}

    def list(
            self, custom_headers=None, raw=False, **operation_config):
        """Gets the list of jobs from the specified HDInsight cluster.

        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~azure.hdinsight.job.models.JobListJsonObject] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`JobOperationsErrorResponseException<azure.hdinsight.job.models.JobOperationsErrorResponseException>`
        """
        # Construct URL
        url = self.list.metadata['url']
        path_format_arguments = {
            'clusterDnsName': self._serialize.url("self.config.cluster_dns_name", self.config.cluster_dns_name, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['user.name'] = self._serialize.query("self.config.username", self.config.username, 'str')
        query_parameters['showall'] = self._serialize.query("self.showall", self.showall, 'str')
        query_parameters['fields'] = self._serialize.query("self.fields", self.fields, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.JobOperationsErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[JobListJsonObject]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list.metadata = {'url': '/templeton/v1/jobs'}

    def list_after_job_id(
            self, jobid=None, numrecords=None, custom_headers=None, raw=False, **operation_config):
        """Gets numrecords Of Jobs after jobid from the specified HDInsight
        cluster.

        :param jobid: JobId from where to list jobs.
        :type jobid: str
        :param numrecords: Number of jobs to fetch.
        :type numrecords: int
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: list or ClientRawResponse if raw=true
        :rtype: list[~azure.hdinsight.job.models.JobListJsonObject] or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`JobOperationsErrorResponseException<azure.hdinsight.job.models.JobOperationsErrorResponseException>`
        """
        # Construct URL
        url = self.list_after_job_id.metadata['url']
        path_format_arguments = {
            'clusterDnsName': self._serialize.url("self.config.cluster_dns_name", self.config.cluster_dns_name, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['user.name'] = self._serialize.query("self.config.username", self.config.username, 'str')
        if jobid is not None:
            query_parameters['jobid'] = self._serialize.query("jobid", jobid, 'str')
        if numrecords is not None:
            query_parameters['numrecords'] = self._serialize.query("numrecords", numrecords, 'int', minimum=1)
        query_parameters['showall'] = self._serialize.query("self.showall", self.showall, 'str')
        query_parameters['fields'] = self._serialize.query("self.fields", self.fields, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.JobOperationsErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[JobListJsonObject]', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    list_after_job_id.metadata = {'url': '/templeton/v1/jobs'}

    def submit_hive_job(
            self, content, custom_headers=None, raw=False, callback=None, **operation_config):
        """Submits a Hive job to an HDInsight cluster.

        :param content: The content of the Hive job request.
        :type content: Generator
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param callback: When specified, will be called with each chunk of
         data that is streamed. The callback should take two arguments, the
         bytes of the current chunk of data and the response object. If the
         data is uploading, response will be None.
        :type callback: Callable[Bytes, response=None]
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: JobSubmissionJsonResponse or ClientRawResponse if raw=true
        :rtype: ~azure.hdinsight.job.models.JobSubmissionJsonResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`JobOperationsErrorResponseException<azure.hdinsight.job.models.JobOperationsErrorResponseException>`
        """
        # Construct URL
        url = self.submit_hive_job.metadata['url']
        path_format_arguments = {
            'clusterDnsName': self._serialize.url("self.config.cluster_dns_name", self.config.cluster_dns_name, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['user.name'] = self._serialize.query("self.config.username", self.config.username, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/text'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._client.stream_upload(content, callback)

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.JobOperationsErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('JobSubmissionJsonResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    submit_hive_job.metadata = {'url': '/templeton/v1/hive'}

    def submit_map_reduce_job(
            self, content, custom_headers=None, raw=False, callback=None, **operation_config):
        """Submits a MapReduce job to an HDInsight cluster.

        :param content: The content of the MapReduce job request.
        :type content: Generator
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param callback: When specified, will be called with each chunk of
         data that is streamed. The callback should take two arguments, the
         bytes of the current chunk of data and the response object. If the
         data is uploading, response will be None.
        :type callback: Callable[Bytes, response=None]
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: JobSubmissionJsonResponse or ClientRawResponse if raw=true
        :rtype: ~azure.hdinsight.job.models.JobSubmissionJsonResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`JobOperationsErrorResponseException<azure.hdinsight.job.models.JobOperationsErrorResponseException>`
        """
        # Construct URL
        url = self.submit_map_reduce_job.metadata['url']
        path_format_arguments = {
            'clusterDnsName': self._serialize.url("self.config.cluster_dns_name", self.config.cluster_dns_name, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['user.name'] = self._serialize.query("self.config.username", self.config.username, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'text/plain'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._client.stream_upload(content, callback)

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.JobOperationsErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('JobSubmissionJsonResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    submit_map_reduce_job.metadata = {'url': '/templeton/v1/mapreduce/jar'}

    def submit_map_reduce_streaming_job(
            self, content, custom_headers=None, raw=False, callback=None, **operation_config):
        """Submits a MapReduce streaming job to an HDInsight cluster.

        :param content: The content of the MapReduce job request.
        :type content: Generator
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param callback: When specified, will be called with each chunk of
         data that is streamed. The callback should take two arguments, the
         bytes of the current chunk of data and the response object. If the
         data is uploading, response will be None.
        :type callback: Callable[Bytes, response=None]
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: JobSubmissionJsonResponse or ClientRawResponse if raw=true
        :rtype: ~azure.hdinsight.job.models.JobSubmissionJsonResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`JobOperationsErrorResponseException<azure.hdinsight.job.models.JobOperationsErrorResponseException>`
        """
        # Construct URL
        url = self.submit_map_reduce_streaming_job.metadata['url']
        path_format_arguments = {
            'clusterDnsName': self._serialize.url("self.config.cluster_dns_name", self.config.cluster_dns_name, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['user.name'] = self._serialize.query("self.config.username", self.config.username, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'text/plain'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._client.stream_upload(content, callback)

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.JobOperationsErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('JobSubmissionJsonResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    submit_map_reduce_streaming_job.metadata = {'url': '/templeton/v1/mapreduce/streaming'}

    def submit_pig_job(
            self, content, custom_headers=None, raw=False, callback=None, **operation_config):
        """Submits a Pig job to an HDInsight cluster.

        :param content: The content of the Pig job request.
        :type content: Generator
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param callback: When specified, will be called with each chunk of
         data that is streamed. The callback should take two arguments, the
         bytes of the current chunk of data and the response object. If the
         data is uploading, response will be None.
        :type callback: Callable[Bytes, response=None]
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: JobSubmissionJsonResponse or ClientRawResponse if raw=true
        :rtype: ~azure.hdinsight.job.models.JobSubmissionJsonResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`JobOperationsErrorResponseException<azure.hdinsight.job.models.JobOperationsErrorResponseException>`
        """
        # Construct URL
        url = self.submit_pig_job.metadata['url']
        path_format_arguments = {
            'clusterDnsName': self._serialize.url("self.config.cluster_dns_name", self.config.cluster_dns_name, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['user.name'] = self._serialize.query("self.config.username", self.config.username, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'text/plain'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._client.stream_upload(content, callback)

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.JobOperationsErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('JobSubmissionJsonResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    submit_pig_job.metadata = {'url': '/templeton/v1/pig'}

    def submit_sqoop_job(
            self, content, custom_headers=None, raw=False, callback=None, **operation_config):
        """Submits a Sqoop job to an HDInsight cluster.

        :param content: The content of the Sqoop job request.
        :type content: Generator
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param callback: When specified, will be called with each chunk of
         data that is streamed. The callback should take two arguments, the
         bytes of the current chunk of data and the response object. If the
         data is uploading, response will be None.
        :type callback: Callable[Bytes, response=None]
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: JobSubmissionJsonResponse or ClientRawResponse if raw=true
        :rtype: ~azure.hdinsight.job.models.JobSubmissionJsonResponse or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`JobOperationsErrorResponseException<azure.hdinsight.job.models.JobOperationsErrorResponseException>`
        """
        # Construct URL
        url = self.submit_sqoop_job.metadata['url']
        path_format_arguments = {
            'clusterDnsName': self._serialize.url("self.config.cluster_dns_name", self.config.cluster_dns_name, 'str', skip_quote=True)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['user.name'] = self._serialize.query("self.config.username", self.config.username, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'text/plain'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._client.stream_upload(content, callback)

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.JobOperationsErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('JobSubmissionJsonResponse', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    submit_sqoop_job.metadata = {'url': '/templeton/v1/sqoop'}

    def get_app_state(
            self, app_id, custom_headers=None, raw=False, **operation_config):
        """Gets application state from the specified HDInsight cluster.

        :param app_id: The id of the job.
        :type app_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: AppState or ClientRawResponse if raw=true
        :rtype: ~azure.hdinsight.job.models.AppState or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`JobOperationsErrorResponseException<azure.hdinsight.job.models.JobOperationsErrorResponseException>`
        """
        # Construct URL
        url = self.get_app_state.metadata['url']
        path_format_arguments = {
            'clusterDnsName': self._serialize.url("self.config.cluster_dns_name", self.config.cluster_dns_name, 'str', skip_quote=True),
            'appId': self._serialize.url("app_id", app_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.JobOperationsErrorResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('AppState', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_app_state.metadata = {'url': '/ws/v1/cluster/apps/{appId}/state'}
