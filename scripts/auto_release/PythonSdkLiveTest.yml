# Live Test For Python SDK

name: $(BASE_BRANCH)

trigger:
  branches:
    exclude:
    - '*'


jobs:
- job: LiveTestPython38
  displayName: Live Test Python 3.8
  timeoutInMinutes: 1500
  strategy:
    maxParallel: 5
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.8'
        addToPath: true
        architecture: 'x64'
    - bash: |
        # verify $ISSUE_LINK and $BASE_BRANCH are not null
        if [ -z "$(BASE_BRANCH)" -o -z "$(ISSUE_LINK)" ]; then
          echo "ISSUE_LINK or BASE_BRANCH do not exist, pipeline fail!!!"
          exit 1
        fi

        script_path=$(pwd)/scripts/auto_release
        cd ..
        git config --global user.email "PythonSdkPipelines"
        git config --global user.name "PythonSdkPipelines"

        # clone(REPO: https://github.com/Azure/azure-sdk-for-python.git, USR_NAME: Azure, USR_TOKEN: xxxxxxxxxxxxx)
        mkdir azure-sdk-for-python
        git clone ${REPO:0:8}$(USR_NAME):$(USR_TOKEN)@${REPO:8} $(pwd)/azure-sdk-for-python

        # create virtual env
        python -m venv venv-sdk
        source venv-sdk/bin/activate
        output_path=$(pwd)/venv-sdk
        pip install packaging
        pip install -r $script_path/livetest_package.txt

        # import env variable
        export AZURE_TEST_RUN_LIVE=true
        export TENANT_ID=$(ENV_TENANT_ID)
        export CLIENT_ID=$(ENV_CLIENT_ID)
        export CLIENT_SECRET=$(ENV_CLIENT_SECRET)
        export SUBSCRIPTION_ID=$(ENV_SUBSCRIPTION_ID)
        export AZURE_TENANT_ID=$(ENV_TENANT_ID)
        export AZURE_CLIENT_ID=$(ENV_CLIENT_ID)
        export AZURE_CLIENT_SECRET=$(ENV_CLIENT_SECRET)
        export AZURE_SUBSCRIPTION_ID=$(ENV_SUBSCRIPTION_ID)
        export ISSUE_LINK=$(ISSUE_LINK)
        export UPDATE_TOKEN=$(UPDATE_TOKEN)
        export USR_TOKEN=$(USR_TOKEN)

        # run
        cd azure-sdk-for-python
        python $script_path/main.py $(BASE_BRANCH) "$script_path" "$output_path"

        # judge
        if [ ! -f "$output_path/output.txt" ]; then
          echo "output.txt does not exist, pipeline fail!!!"
          exit 1
        fi

        test_result="Live test success"
        if [ -f "$output_path/live_test_fail.txt" ]; then
          test_result="Live test fail, detailed info is in pipeline log(search keyword FAILED)!!!\n"
        fi

        # create PR
        export NEW_BRANCH=`sed -n '1p' $output_path/output.txt`
        export TARGET_BRANCH=`sed -n '2p' $output_path/output.txt`
        export PIPELINE_LINK=$(PIPELINE_LINK)
        export USR_NAME=$(USR_NAME)
        export TEST_RESULT=$test_result

        python $script_path/create_auto_release_pr.py
        echo "\'[AutoRelease] $new_branch \' has been created!!!"

        # if test fail, still push and crete PR. But pipeline would fail to remind user
        if [ -f "$output_path/live_test_fail.txt" ]; then
          echo "please fix failure test $(ISSUE_LINK)!!! \'[AutoRelease] $new_branch \' has been created!!!"
          exit 1
        fi
