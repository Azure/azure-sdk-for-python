# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class OperationsDiscovery(Model):
    """Operations discovery class.

    :param name: Name of the API. The name of the operation being performed on
     this particular object. It should match the action name that appears in
     RBAC / the event service. Examples of operations include: *
     Microsoft.Compute/virtualMachine/capture/action *
     Microsoft.Compute/virtualMachine/restart/action *
     Microsoft.Compute/virtualMachine/write *
     Microsoft.Compute/virtualMachine/read *
     Microsoft.Compute/virtualMachine/delete Each action should include, in
     order: (1) Resource Provider Namespace (2) Type hierarchy for which the
     action applies (e.g. server/databases for a SQL Azure database) (3) Read,
     Write, Action or Delete indicating which type applies. If it is a
     PUT/PATCH on a collection or named value, Write should be used. If it is a
     GET, Read should be used. If it is a DELETE, Delete should be used. If it
     is a POST, Action should be used.
    :type name: str
    :param display: Object type
    :type display: ~microsoft.aadiam.models.Display
    :param origin: Origin. The intended executor of the operation; governs the
     display of the operation in the RBAC UX and the audit logs UX. Default
     value is "user,system"
    :type origin: str
    :param properties: Properties. Reserved for future use.
    :type properties: object
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'Display'},
        'origin': {'key': 'origin', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'object'},
    }

    def __init__(self, **kwargs):
        super(OperationsDiscovery, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display = kwargs.get('display', None)
        self.origin = kwargs.get('origin', None)
        self.properties = kwargs.get('properties', None)
