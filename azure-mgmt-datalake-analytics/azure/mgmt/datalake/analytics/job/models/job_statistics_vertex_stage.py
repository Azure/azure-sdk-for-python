# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft and contributors.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class JobStatisticsVertexStage(Model):
    """
    The Data Lake Analytics U-SQL job statistics vertex stage information.

    :param data_read: Gets the amount of data read, in bytes.
    :type data_read: long
    :param data_read_cross_pod: Gets the amount of data read across multiple
     pods, in bytes.
    :type data_read_cross_pod: long
    :param data_read_intra_pod: Gets the amount of data read in one pod, in
     bytes.
    :type data_read_intra_pod: long
    :param data_to_read: Gets the amount of data remaining to be read, in
     bytes.
    :type data_to_read: long
    :param data_written: Gets the amount of data written, in bytes.
    :type data_written: long
    :param duplicate_discard_count: Gets the number of duplicates that were
     discarded.
    :type duplicate_discard_count: int
    :param failed_count: Gets the number of failures that occured in this
     stage.
    :type failed_count: int
    :param max_vertex_data_read: Gets the maximum amount of data read in a
     single vertex, in bytes.
    :type max_vertex_data_read: long
    :param min_vertex_data_read: Gets the minimum amount of data read in a
     single vertex, in bytes.
    :type min_vertex_data_read: long
    :param read_failure_count: Gets the number of read failures in this stage.
    :type read_failure_count: int
    :param revocation_count: Gets the number of vertices that were revoked
     during this stage.
    :type revocation_count: int
    :param running_count: Gets the number of currently running vertices in
     this stage.
    :type running_count: int
    :param scheduled_count: Gets the number of currently scheduled vertices
     in this stage
    :type scheduled_count: int
    :param stage_name: Gets the name of this stage in job execution.
    :type stage_name: str
    :param succeeded_count: Gets the number of vertices that succeeded in
     this stage.
    :type succeeded_count: int
    :param temp_data_written: Gets the amount of temporary data written, in
     bytes.
    :type temp_data_written: long
    :param total_count: Gets the total vertex count for this stage.
    :type total_count: int
    :param total_failed_time: Gets the amount of time that failed vertices
     took up in this stage.
    :type total_failed_time: str
    :param total_progress: Gets the current progress of this stage, as a
     percentage.
    :type total_progress: int
    :param total_succeeded_time: Gets the amount of time all successful
     vertices took in this stage.
    :type total_succeeded_time: str
    """ 

    _attribute_map = {
        'data_read': {'key': 'dataRead', 'type': 'long'},
        'data_read_cross_pod': {'key': 'dataReadCrossPod', 'type': 'long'},
        'data_read_intra_pod': {'key': 'dataReadIntraPod', 'type': 'long'},
        'data_to_read': {'key': 'dataToRead', 'type': 'long'},
        'data_written': {'key': 'dataWritten', 'type': 'long'},
        'duplicate_discard_count': {'key': 'duplicateDiscardCount', 'type': 'int'},
        'failed_count': {'key': 'failedCount', 'type': 'int'},
        'max_vertex_data_read': {'key': 'maxVertexDataRead', 'type': 'long'},
        'min_vertex_data_read': {'key': 'minVertexDataRead', 'type': 'long'},
        'read_failure_count': {'key': 'readFailureCount', 'type': 'int'},
        'revocation_count': {'key': 'revocationCount', 'type': 'int'},
        'running_count': {'key': 'runningCount', 'type': 'int'},
        'scheduled_count': {'key': 'scheduledCount', 'type': 'int'},
        'stage_name': {'key': 'stageName', 'type': 'str'},
        'succeeded_count': {'key': 'succeededCount', 'type': 'int'},
        'temp_data_written': {'key': 'tempDataWritten', 'type': 'long'},
        'total_count': {'key': 'totalCount', 'type': 'int'},
        'total_failed_time': {'key': 'totalFailedTime', 'type': 'str'},
        'total_progress': {'key': 'totalProgress', 'type': 'int'},
        'total_succeeded_time': {'key': 'totalSucceededTime', 'type': 'str'},
    }

    def __init__(self, data_read=None, data_read_cross_pod=None, data_read_intra_pod=None, data_to_read=None, data_written=None, duplicate_discard_count=None, failed_count=None, max_vertex_data_read=None, min_vertex_data_read=None, read_failure_count=None, revocation_count=None, running_count=None, scheduled_count=None, stage_name=None, succeeded_count=None, temp_data_written=None, total_count=None, total_failed_time=None, total_progress=None, total_succeeded_time=None):
        self.data_read = data_read
        self.data_read_cross_pod = data_read_cross_pod
        self.data_read_intra_pod = data_read_intra_pod
        self.data_to_read = data_to_read
        self.data_written = data_written
        self.duplicate_discard_count = duplicate_discard_count
        self.failed_count = failed_count
        self.max_vertex_data_read = max_vertex_data_read
        self.min_vertex_data_read = min_vertex_data_read
        self.read_failure_count = read_failure_count
        self.revocation_count = revocation_count
        self.running_count = running_count
        self.scheduled_count = scheduled_count
        self.stage_name = stage_name
        self.succeeded_count = succeeded_count
        self.temp_data_written = temp_data_written
        self.total_count = total_count
        self.total_failed_time = total_failed_time
        self.total_progress = total_progress
        self.total_succeeded_time = total_succeeded_time
