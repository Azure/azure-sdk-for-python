# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class JobInformation(Model):
    """The common Data Lake Analytics job information properties.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param job_id: Gets or sets the job's unique identifier (a GUID).
    :type job_id: str
    :param name: Gets or sets the friendly name of the job.
    :type name: str
    :param type: Gets or sets the job type of the current job (Hive or USql).
     Possible values include: 'USql', 'Hive'
    :type type: str or :class:`JobType
     <azure.mgmt.datalake.analytics.job.models.JobType>`
    :param submitter: Gets or sets the user or account that submitted the job.
    :type submitter: str
    :ivar error_message: Gets the error message details for the job, if the
     job failed.
    :vartype error_message: list of :class:`JobErrorDetails
     <azure.mgmt.datalake.analytics.job.models.JobErrorDetails>`
    :param degree_of_parallelism: Gets or sets the degree of parallelism used
     for this job. This must be greater than 0.
    :type degree_of_parallelism: int
    :param priority: Gets or sets the priority value for the current job.
     Lower numbers have a higher priority. By default, a job has a priority
     of 1000. This must be greater than 0.
    :type priority: int
    :ivar submit_time: Gets the time the job was submitted to the service.
    :vartype submit_time: datetime
    :ivar start_time: Gets the start time of the job.
    :vartype start_time: datetime
    :ivar end_time: Gets the completion time of the job.
    :vartype end_time: datetime
    :ivar state: Gets the job state. When the job is in the Ended state,
     refer to Result and ErrorMessage for details. Possible values include:
     'Accepted', 'Compiling', 'Ended', 'New', 'Queued', 'Running',
     'Scheduling', 'Starting', 'Paused', 'WaitingForCapacity'
    :vartype state: str or :class:`JobState
     <azure.mgmt.datalake.analytics.job.models.JobState>`
    :ivar result: Gets the result of job execution or the current result of
     the running job. Possible values include: 'None', 'Succeeded',
     'Cancelled', 'Failed'
    :vartype result: str or :class:`JobResult
     <azure.mgmt.datalake.analytics.job.models.JobResult>`
    :ivar state_audit_records: Gets the job state audit records, indicating
     when various operations have been performed on this job.
    :vartype state_audit_records: list of :class:`JobStateAuditRecord
     <azure.mgmt.datalake.analytics.job.models.JobStateAuditRecord>`
    :param properties: Gets or sets the job specific properties.
    :type properties: :class:`JobProperties
     <azure.mgmt.datalake.analytics.job.models.JobProperties>`
    """ 

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'error_message': {'readonly': True},
        'submit_time': {'readonly': True},
        'start_time': {'readonly': True},
        'end_time': {'readonly': True},
        'state': {'readonly': True},
        'result': {'readonly': True},
        'state_audit_records': {'readonly': True},
        'properties': {'required': True},
    }

    _attribute_map = {
        'job_id': {'key': 'jobId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'JobType'},
        'submitter': {'key': 'submitter', 'type': 'str'},
        'error_message': {'key': 'errorMessage', 'type': '[JobErrorDetails]'},
        'degree_of_parallelism': {'key': 'degreeOfParallelism', 'type': 'int'},
        'priority': {'key': 'priority', 'type': 'int'},
        'submit_time': {'key': 'submitTime', 'type': 'iso-8601'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'state': {'key': 'state', 'type': 'JobState'},
        'result': {'key': 'result', 'type': 'JobResult'},
        'state_audit_records': {'key': 'stateAuditRecords', 'type': '[JobStateAuditRecord]'},
        'properties': {'key': 'properties', 'type': 'JobProperties'},
    }

    def __init__(self, name, type, properties, job_id=None, submitter=None, degree_of_parallelism=None, priority=None):
        self.job_id = job_id
        self.name = name
        self.type = type
        self.submitter = submitter
        self.error_message = None
        self.degree_of_parallelism = degree_of_parallelism
        self.priority = priority
        self.submit_time = None
        self.start_time = None
        self.end_time = None
        self.state = None
        self.result = None
        self.state_audit_records = None
        self.properties = properties
