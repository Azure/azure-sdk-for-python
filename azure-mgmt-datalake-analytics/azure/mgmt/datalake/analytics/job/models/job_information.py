# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft and contributors.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class JobInformation(Model):
    """
    The common Data Lake Analytics job information properties.

    :param job_id: Gets or sets the job's unique identifier (a GUID).
    :type job_id: str
    :param name: Gets or sets the friendly name of the job.
    :type name: str
    :param type: Gets or sets the job type of the current job (Hive or USql).
     Possible values include: 'USql', 'Hive'
    :type type: str
    :param submitter: Gets or sets the user or account that submitted the job.
    :type submitter: str
    :param error_message: Gets the error message details for the job, if the
     job failed.
    :type error_message: list of :class:`JobErrorDetails
     <datalakeanalyticsjobmanagementclient.models.JobErrorDetails>`
    :param degree_of_parallelism: Gets or sets the degree of parallelism used
     for this job. This must be greater than 0.
    :type degree_of_parallelism: int
    :param priority: Gets or sets the priority value for the current job.
     Lower numbers have a higher priority. By default, a job has a priority
     of 1000. This must be greater than 0.
    :type priority: int
    :param submit_time: Gets the time the job was submitted to the service.
    :type submit_time: datetime
    :param start_time: Gets the start time of the job.
    :type start_time: datetime
    :param end_time: Gets the completion time of the job.
    :type end_time: datetime
    :param state: Gets the job state. When the job is in the Ended state,
     refer to Result and ErrorMessage for details. Possible values include:
     'Accepted', 'Compiling', 'Ended', 'New', 'Queued', 'Running',
     'Scheduling', 'Starting', 'Paused', 'WaitingForCapacity'
    :type state: str
    :param result: Gets the result of job execution or the current result of
     the running job. Possible values include: 'None', 'Succeeded',
     'Cancelled', 'Failed'
    :type result: str
    :param state_audit_records: Gets the job state audit records, indicating
     when various operations have been performed on this job.
    :type state_audit_records: list of :class:`JobStateAuditRecord
     <datalakeanalyticsjobmanagementclient.models.JobStateAuditRecord>`
    :param properties: Gets or sets the job specific properties.
    :type properties: :class:`JobProperties
     <datalakeanalyticsjobmanagementclient.models.JobProperties>`
    """ 

    _validation = {
        'name': {'required': True},
        'type': {'required': True},
        'properties': {'required': True},
    }

    _attribute_map = {
        'job_id': {'key': 'jobId', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'JobType'},
        'submitter': {'key': 'submitter', 'type': 'str'},
        'error_message': {'key': 'errorMessage', 'type': '[JobErrorDetails]'},
        'degree_of_parallelism': {'key': 'degreeOfParallelism', 'type': 'int'},
        'priority': {'key': 'priority', 'type': 'int'},
        'submit_time': {'key': 'submitTime', 'type': 'iso-8601'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'state': {'key': 'state', 'type': 'JobState'},
        'result': {'key': 'result', 'type': 'JobResult'},
        'state_audit_records': {'key': 'stateAuditRecords', 'type': '[JobStateAuditRecord]'},
        'properties': {'key': 'properties', 'type': 'JobProperties'},
    }

    def __init__(self, name, type, properties, job_id=None, submitter=None, error_message=None, degree_of_parallelism=None, priority=None, submit_time=None, start_time=None, end_time=None, state=None, result=None, state_audit_records=None):
        self.job_id = job_id
        self.name = name
        self.type = type
        self.submitter = submitter
        self.error_message = error_message
        self.degree_of_parallelism = degree_of_parallelism
        self.priority = priority
        self.submit_time = submit_time
        self.start_time = start_time
        self.end_time = end_time
        self.state = state
        self.result = result
        self.state_audit_records = state_audit_records
        self.properties = properties
