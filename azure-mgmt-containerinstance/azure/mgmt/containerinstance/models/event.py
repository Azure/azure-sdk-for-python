# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class Event(Model):
    """A container group or container instance event.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar count: The count of the event.
    :vartype count: int
    :ivar first_timestamp: The date-time of the earliest logged event.
    :vartype first_timestamp: datetime
    :ivar last_timestamp: The date-time of the latest logged event.
    :vartype last_timestamp: datetime
    :ivar name: The event name.
    :vartype name: str
    :ivar message: The event message.
    :vartype message: str
    :ivar type: The event type.
    :vartype type: str
    """

    _validation = {
        'count': {'readonly': True},
        'first_timestamp': {'readonly': True},
        'last_timestamp': {'readonly': True},
        'name': {'readonly': True},
        'message': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'count': {'key': 'count', 'type': 'int'},
        'first_timestamp': {'key': 'firstTimestamp', 'type': 'iso-8601'},
        'last_timestamp': {'key': 'lastTimestamp', 'type': 'iso-8601'},
        'name': {'key': 'name', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Event, self).__init__(**kwargs)
        self.count = None
        self.first_timestamp = None
        self.last_timestamp = None
        self.name = None
        self.message = None
        self.type = None
