# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools


def api_version_validation(**kwargs):
    params_valid_on = kwargs.pop("params_valid_on", {})
    method_valid_on = kwargs.pop("method_valid_on", {})

    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            try:
                # this assumes the client has an _api_version attribute
                client = args[0]
                client_api_version = client._api_version  # pylint: disable=protected-access
            except TypeError:
                client_api_version = client._api_version(func.__name__)  # pylint: disable=protected-access

            if client_api_version not in method_valid_on:
                raise ValueError(
                    f"'{func.__name__}' is not available in API version "
                    f"{client_api_version}. Pass service API version of {method_valid_on} to your client."
                )

            unsupported = {
                parameter: ", ".join(api_versions)
                for parameter, api_versions in params_valid_on.items()
                if parameter in kwargs and client_api_version not in api_versions
            }
            if unsupported:
                raise ValueError(
                    "".join(
                        [
                            f"'{param}' is not available in API version {client_api_version}. "
                            f" All valid API version are \"{versions}\" \n"
                            for param, versions in unsupported.items()
                        ]
                    )
                )
            return func(*args, **kwargs)

        return wrapper

    return decorator
