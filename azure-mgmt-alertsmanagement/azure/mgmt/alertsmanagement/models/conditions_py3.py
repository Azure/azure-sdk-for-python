# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class Conditions(Model):
    """Conditions in alert instance to be matched for a given action rule. Default
    value is all. Multiple values could be provided with comma separation.

    :param severity: filter alerts by severity
    :type severity: ~azure.mgmt.alertsmanagement.models.Condition
    :param monitor_service: filter alerts by monitor service
    :type monitor_service: ~azure.mgmt.alertsmanagement.models.Condition
    :param monitor_condition: filter alerts by monitor condition
    :type monitor_condition: ~azure.mgmt.alertsmanagement.models.Condition
    :param target_resource_type: filter alerts by target resource type
    :type target_resource_type: ~azure.mgmt.alertsmanagement.models.Condition
    :param alert_rule_id: filter alerts by alert rule id
    :type alert_rule_id: ~azure.mgmt.alertsmanagement.models.Condition
    :param description: filter alerts by alert rule description
    :type description: ~azure.mgmt.alertsmanagement.models.Condition
    :param alert_context: filter alerts by alert context (payload)
    :type alert_context: ~azure.mgmt.alertsmanagement.models.Condition
    """

    _attribute_map = {
        'severity': {'key': 'severity', 'type': 'Condition'},
        'monitor_service': {'key': 'monitorService', 'type': 'Condition'},
        'monitor_condition': {'key': 'monitorCondition', 'type': 'Condition'},
        'target_resource_type': {'key': 'targetResourceType', 'type': 'Condition'},
        'alert_rule_id': {'key': 'alertRuleId', 'type': 'Condition'},
        'description': {'key': 'description', 'type': 'Condition'},
        'alert_context': {'key': 'alertContext', 'type': 'Condition'},
    }

    def __init__(self, *, severity=None, monitor_service=None, monitor_condition=None, target_resource_type=None, alert_rule_id=None, description=None, alert_context=None, **kwargs) -> None:
        super(Conditions, self).__init__(**kwargs)
        self.severity = severity
        self.monitor_service = monitor_service
        self.monitor_condition = monitor_condition
        self.target_resource_type = target_resource_type
        self.alert_rule_id = alert_rule_id
        self.description = description
        self.alert_context = alert_context
