# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.pipeline import ClientRawResponse
from msrest.exceptions import HttpOperationError

from .. import models


class DictionaryExamplesOperations(object):
    """DictionaryExamplesOperations operations.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self.config = config

    def examples_post(
            self, api_version, from_parameter, to, text, ocp_apim_subscription_key=None, x_client_trace_id=None, custom_headers=None, raw=False, **operation_config):
        """Provides examples that show how terms in the dictionary are used in
        context. This operation is used in tandem with `Dictionary lookup`.
        .

        :param api_version: Version of the API requested by the client. Value
         must be **3.0**.
        :type api_version: str
        :param from_parameter: Specifies the language of the input text. The
         source language must be one of the supported languages included in the
         `dictionary` scope.
        :type from_parameter: str
        :param to: Specifies the language of the output text. The target
         language must be one of the supported languages included in the
         `dictionary` scope.
        :type to: str
        :param text: # Request body
         The body of the request is a JSON array. Each array element is a JSON
         object with the following properties:
         * `Text-` A string specifying the term to lookup. This should be the
         value of a `normalizedText` field from the back-translations of a
         previous Dictionary lookup request. It can also be the value of the
         `normalizedSource` field.
         * `Translation-` A string specifying the translated text previously
         returned by the Dictionary lookup operation. This should be the value
         from the `normalizedTarget` field in the `translations` list of the
         Dictionary lookup response. The service will return examples for the
         specific source-target word-pair.
         The following limitations apply:
         * The array can have at most 10 elements.
         * The text value of an array element cannot exceed 100 characters
         including spaces.
         # Response body
         A successful response is a JSON array with one result for each string
         in the input array. A result object includes the following properties:
         * `normalizedSource-` A string giving the normalized form of the
         source term. Generally, this should be identical to the value of the
         `Text` field at the matching list index in the body of the request.
         * `normalizedTarget-` A string giving the normalized form of the
         target term. Generally, this should be identical to the value of the
         `Translation` field at the matching list index in the body of the
         request.
         * `examples-` A list of examples for the (source term, target term)
         pair. Each element of the list is an object with the following
         properties:
         * `sourcePrefix-` The string to concatenate before the value of
         `sourceTerm` to form a complete example. Do not add a space character,
         since it is already there when it should be. This value may be an
         empty string.
         * `sourceTerm-` A string equal to the actual term looked up. The
         string is added with `sourcePrefix` and `sourceSuffix` to form the
         complete example. Its value is separated so it can be marked in a user
         interface, e.g., by bolding it.
         * `sourceSuffix-` The string to concatenate after the value of
         `sourceTerm` to form a complete example. Do not add a space character,
         since it is already there when it should be. This value may be an
         empty string.
         * `targetPrefix-` A string similar to `sourcePrefix` but for the
         target.
         * `targetTerm-` A string similar to `sourceTerm` but for the target.
         * `targetSuffix-` A string similar to `sourceSuffix` but for the
         target.
         # Response Header
         X-RequestId - Value generated by the service to identify the request.
         It is used for troubleshooting purposes.
         NOTE - If there are no examples in the dictionary, the response is 200
         (OK) but the `examples` list is an empty list.
        :type text:
         list[~azure.cognitiveservices.translatortext.models.DictionaryExampleTextInput]
        :param ocp_apim_subscription_key: This is used to pass a key for auth.
         If you are passing a token for auth then use the previous header auth
         option. **ONE OF THESE METHODS MUST BE USED.**
        :type ocp_apim_subscription_key: str
        :param x_client_trace_id: A client-generated GUID to uniquely identify
         the request. Note that you can omit this header if you include the
         trace ID in the query string using a query parameter named
         ClientTraceId.
        :type x_client_trace_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.examples_post.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        query_parameters['from'] = self._serialize.query("from_parameter", from_parameter, 'str')
        query_parameters['to'] = self._serialize.query("to", to, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)
        if ocp_apim_subscription_key is not None:
            header_parameters['Ocp-Apim-Subscription-Key'] = self._serialize.header("ocp_apim_subscription_key", ocp_apim_subscription_key, 'str')
        if x_client_trace_id is not None:
            header_parameters['X-ClientTraceId'] = self._serialize.header("x_client_trace_id", x_client_trace_id, 'str')

        # Construct body
        body_content = self._serialize.body(text, '[DictionaryExampleTextInput]')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400, 401, 403, 429, 500, 503]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[DictionaryExampleSuccessItem]', response)
        if response.status_code == 400:
            deserialized = self._deserialize('ErrorMessage', response)
        if response.status_code == 401:
            deserialized = self._deserialize('ErrorMessage', response)
        if response.status_code == 403:
            deserialized = self._deserialize('ErrorMessage', response)
        if response.status_code == 429:
            deserialized = self._deserialize('ErrorMessage', response)
        if response.status_code == 500:
            deserialized = self._deserialize('ErrorMessage', response)
        if response.status_code == 503:
            deserialized = self._deserialize('ErrorMessage', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    examples_post.metadata = {'url': '/Dictionary/Examples'}
