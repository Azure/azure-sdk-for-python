# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.pipeline import ClientRawResponse
from msrest.exceptions import HttpOperationError

from .. import models


class BreakSentenceOperations(object):
    """BreakSentenceOperations operations.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self.config = config

    def break_sentence_post(
            self, api_version, text, language=None, script=None, ocp_apim_subscription_key=None, client_trace_id=None, custom_headers=None, raw=False, **operation_config):
        """Identifies the position of sentence boundaries in a piece of text.
        .

        :param api_version: Version of the API requested by the client. Value
         must be **3.0**.
        :type api_version: str
        :param text: # Request Body
         The body of the request is a JSON array. Each array element is a JSON
         object with a string property named Text. Sentence boundaries are
         computed for the value of the Text property.
         The following limitations apply:
         * The array can have at most 100 elements.
         * The text value of an array element cannot exceed 10,000 characters
         including spaces.
         * The entire text included in the request cannot exceed 50,000
         characters including spaces.
         * If the `language` query parameter is specified, then all array
         elements must be in the same language. Otherwise, language
         auto-detection is applied to each array element independently.
         # Response Body
         A successful response is a JSON array with one result for each string
         in the input array. A result object includes the following properties:
         * `sentLen`- An array of integers representing the lengths of the
         sentences in the text element. The length of the array is the number
         of sentences, and the values are the length of each sentence.
         * `detectedLanguage`- An object describing the detected language
         through the following properties
         * `language`- Code of the detected language.
         * `score`- A float value indicating the confidence in the result. The
         score is between zero and one and a low score indicates a low
         confidence.
         * Note that the `detectedLanguage` property is only present in the
         result object when language auto-detection is requested.
         # Response Header
         X-RequestId - Value generated by the service to identify the request.
         It is used for troubleshooting purposes.
        :type text:
         list[~azure.cognitiveservices.translatortext.models.BreakSentenceTextInput]
        :param language: Language tag of the language of the input text. If
         not specified, Translator will apply automatic language detection.
        :type language: str
        :param script: Script identifier of the script used by the input text.
         If a script is not specified, the default script of the language will
         be assumed.
        :type script: str
        :param ocp_apim_subscription_key: This is used to pass a key for
         authentication. If you are passing a token for authentication then use
         the previous "Authorization" header option. **ONE OF THESE METHODS
         MUST BE USED.**
        :type ocp_apim_subscription_key: str
        :param client_trace_id: A client-generated GUID to uniquely identify
         the request. You can omit this header if you include the trace ID in
         the query string using a query parameter named ClientTraceId.
        :type client_trace_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: object or ClientRawResponse if raw=true
        :rtype: object or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`HttpOperationError<msrest.exceptions.HttpOperationError>`
        """
        # Construct URL
        url = self.break_sentence_post.metadata['url']

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
        if language is not None:
            query_parameters['Language'] = self._serialize.query("language", language, 'str')
        if script is not None:
            query_parameters['Script'] = self._serialize.query("script", script, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if custom_headers:
            header_parameters.update(custom_headers)
        if ocp_apim_subscription_key is not None:
            header_parameters['Ocp-Apim-Subscription-Key'] = self._serialize.header("ocp_apim_subscription_key", ocp_apim_subscription_key, 'str')
        if client_trace_id is not None:
            header_parameters['ClientTraceId'] = self._serialize.header("client_trace_id", client_trace_id, 'str')

        # Construct body
        body_content = self._serialize.body(text, '[BreakSentenceTextInput]')

        # Construct and send request
        request = self._client.post(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 400, 401, 403, 429, 500, 503]:
            raise HttpOperationError(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('[BreakSentenceSuccessItem]', response)
        if response.status_code == 400:
            deserialized = self._deserialize('ErrorMessage', response)
        if response.status_code == 401:
            deserialized = self._deserialize('ErrorMessage', response)
        if response.status_code == 403:
            deserialized = self._deserialize('ErrorMessage', response)
        if response.status_code == 429:
            deserialized = self._deserialize('ErrorMessage', response)
        if response.status_code == 500:
            deserialized = self._deserialize('ErrorMessage', response)
        if response.status_code == 503:
            deserialized = self._deserialize('ErrorMessage', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    break_sentence_post.metadata = {'url': '/Breaksentence'}
