# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .resource_py3 import Resource


class SecurityAssessment(Resource):
    """Security assessment on a resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Resource Id
    :vartype id: str
    :ivar name: Resource name
    :vartype name: str
    :ivar type: Resource type
    :vartype type: str
    :param resource_details:
    :type resource_details: ~azure.mgmt.security.models.ResourceDetails
    :ivar display_name: User friendly display name of the assessment
    :vartype display_name: str
    :ivar status: Status of the. Possible values include: 'Passed', 'Failed',
     'NotApplicable'
    :vartype status: str or ~azure.mgmt.security.models.Severity
    :ivar status_reason_code: Programmatic code for the reason the assessment
     result status
    :vartype status_reason_code: str
    :ivar status_reason_description: Human readable description for the reason
     the assessment result status
    :vartype status_reason_description: str
    :ivar additional_data: Additional data regarding the assessment
    :vartype additional_data:
     list[~azure.mgmt.security.models.AssessmentAdditionalData]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'display_name': {'readonly': True},
        'status': {'readonly': True},
        'status_reason_code': {'readonly': True},
        'status_reason_description': {'readonly': True},
        'additional_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'resource_details': {'key': 'properties.resourceDetails', 'type': 'ResourceDetails'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'status_reason_code': {'key': 'properties.statusReasonCode', 'type': 'str'},
        'status_reason_description': {'key': 'properties.statusReasonDescription', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '[AssessmentAdditionalData]'},
    }

    def __init__(self, *, resource_details=None, **kwargs) -> None:
        super(SecurityAssessment, self).__init__(**kwargs)
        self.resource_details = resource_details
        self.display_name = None
        self.status = None
        self.status_reason_code = None
        self.status_reason_description = None
        self.additional_data = None
