# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class FlowLogInformation(Model):
    """Information on the configuration of flow log and traffic analytics
    (optional).

    All required parameters must be populated in order to send to Azure.

    :param target_resource_id: Required. The ID of the resource to configure
     for flow logging.
    :type target_resource_id: str
    :param storage_id: Required. ID of the storage account which is used to
     store the flow log.
    :type storage_id: str
    :param enabled: Required. Flag to enable/disable flow logging.
    :type enabled: bool
    :param retention_policy:
    :type retention_policy:
     ~azure.mgmt.network.v2018_01_01.models.RetentionPolicyParameters
    :param enabled1: Required. Flag to enable/disable traffic analytics.
    :type enabled1: bool
    :param workspace_id: Required. The resource guid of the attached workspace
    :type workspace_id: str
    :param workspace_region: Required. The location of the attached workspace
    :type workspace_region: str
    :param workspace_resource_id: Required. Resource Id of the attached
     workspace
    :type workspace_resource_id: str
    """

    _validation = {
        'target_resource_id': {'required': True},
        'storage_id': {'required': True},
        'enabled': {'required': True},
        'enabled1': {'required': True},
        'workspace_id': {'required': True},
        'workspace_region': {'required': True},
        'workspace_resource_id': {'required': True},
    }

    _attribute_map = {
        'target_resource_id': {'key': 'targetResourceId', 'type': 'str'},
        'storage_id': {'key': 'properties.storageId', 'type': 'str'},
        'enabled': {'key': 'properties.enabled', 'type': 'bool'},
        'retention_policy': {'key': 'properties.retentionPolicy', 'type': 'RetentionPolicyParameters'},
        'enabled1': {'key': 'flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.enabled', 'type': 'bool'},
        'workspace_id': {'key': 'flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceId', 'type': 'str'},
        'workspace_region': {'key': 'flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceRegion', 'type': 'str'},
        'workspace_resource_id': {'key': 'flowAnalyticsConfiguration.networkWatcherFlowAnalyticsConfiguration.workspaceResourceId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(FlowLogInformation, self).__init__(**kwargs)
        self.target_resource_id = kwargs.get('target_resource_id', None)
        self.storage_id = kwargs.get('storage_id', None)
        self.enabled = kwargs.get('enabled', None)
        self.retention_policy = kwargs.get('retention_policy', None)
        self.enabled1 = kwargs.get('enabled1', None)
        self.workspace_id = kwargs.get('workspace_id', None)
        self.workspace_region = kwargs.get('workspace_region', None)
        self.workspace_resource_id = kwargs.get('workspace_resource_id', None)
