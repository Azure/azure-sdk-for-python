# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class AddOwnerParameters(Model):
    """Request parameters for adding a owner to an application.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param url: Required. A owner object URL, such as
     "https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd",
     where "0b1f9851-1bf0-433f-aec3-cb9272f093dc" is the tenantId and
     "f260bbc4-c254-447b-94cf-293b5ec434dd" is the objectId of the owner (user,
     application, servicePrincipal, group) to be added.
    :type url: str
    """

    _validation = {
        'url': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'url': {'key': 'url', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AddOwnerParameters, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.url = kwargs.get('url', None)


class DirectoryObject(Model):
    """Represents an Azure Active Directory object.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: Application, ADGroup, ServicePrincipal, User

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :ivar object_id: The object ID.
    :vartype object_id: str
    :ivar deletion_timestamp: The time at which the directory object was
     deleted.
    :vartype deletion_timestamp: datetime
    :param object_type: Required. Constant filled by server.
    :type object_type: str
    """

    _validation = {
        'object_id': {'readonly': True},
        'deletion_timestamp': {'readonly': True},
        'object_type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'object_id': {'key': 'objectId', 'type': 'str'},
        'deletion_timestamp': {'key': 'deletionTimestamp', 'type': 'iso-8601'},
        'object_type': {'key': 'objectType', 'type': 'str'},
    }

    _subtype_map = {
        'object_type': {'Application': 'Application', 'Group': 'ADGroup', 'ServicePrincipal': 'ServicePrincipal', 'User': 'User'}
    }

    def __init__(self, **kwargs):
        super(DirectoryObject, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.object_id = None
        self.deletion_timestamp = None
        self.object_type = None


class ADGroup(DirectoryObject):
    """Active Directory group information.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :ivar object_id: The object ID.
    :vartype object_id: str
    :ivar deletion_timestamp: The time at which the directory object was
     deleted.
    :vartype deletion_timestamp: datetime
    :param object_type: Required. Constant filled by server.
    :type object_type: str
    :param display_name: The display name of the group.
    :type display_name: str
    :param mail_enabled: Whether the group is mail-enabled. Must be false.
     This is because only pure security groups can be created using the Graph
     API.
    :type mail_enabled: bool
    :param mail_nickname: The mail alias for the group.
    :type mail_nickname: str
    :param security_enabled: Whether the group is security-enable.
    :type security_enabled: bool
    :param mail: The primary email address of the group.
    :type mail: str
    """

    _validation = {
        'object_id': {'readonly': True},
        'deletion_timestamp': {'readonly': True},
        'object_type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'object_id': {'key': 'objectId', 'type': 'str'},
        'deletion_timestamp': {'key': 'deletionTimestamp', 'type': 'iso-8601'},
        'object_type': {'key': 'objectType', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'mail_enabled': {'key': 'mailEnabled', 'type': 'bool'},
        'mail_nickname': {'key': 'mailNickname', 'type': 'str'},
        'security_enabled': {'key': 'securityEnabled', 'type': 'bool'},
        'mail': {'key': 'mail', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ADGroup, self).__init__(**kwargs)
        self.display_name = kwargs.get('display_name', None)
        self.mail_enabled = kwargs.get('mail_enabled', None)
        self.mail_nickname = kwargs.get('mail_nickname', None)
        self.security_enabled = kwargs.get('security_enabled', None)
        self.mail = kwargs.get('mail', None)
        self.object_type = 'Group'


class Application(DirectoryObject):
    """Active Directory application information.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :ivar object_id: The object ID.
    :vartype object_id: str
    :ivar deletion_timestamp: The time at which the directory object was
     deleted.
    :vartype deletion_timestamp: datetime
    :param object_type: Required. Constant filled by server.
    :type object_type: str
    :param app_id: The application ID.
    :type app_id: str
    :param app_roles: The collection of application roles that an application
     may declare. These roles can be assigned to users, groups or service
     principals.
    :type app_roles: list[~azure.graphrbac.models.AppRole]
    :param app_permissions: The application permissions.
    :type app_permissions: list[str]
    :param available_to_other_tenants: Whether the application is be available
     to other tenants.
    :type available_to_other_tenants: bool
    :param display_name: The display name of the application.
    :type display_name: str
    :param identifier_uris: A collection of URIs for the application.
    :type identifier_uris: list[str]
    :param reply_urls: A collection of reply URLs for the application.
    :type reply_urls: list[str]
    :param homepage: The home page of the application.
    :type homepage: str
    :param oauth2_allow_implicit_flow: Whether to allow implicit grant flow
     for OAuth2
    :type oauth2_allow_implicit_flow: bool
    :param required_resource_access: Specifies resources that this application
     requires access to and the set of OAuth permission scopes and application
     roles that it needs under each of those resources. This pre-configuration
     of required resource access drives the consent experience.
    :type required_resource_access:
     list[~azure.graphrbac.models.RequiredResourceAccess]
    :param key_credentials: A collection of KeyCredential objects.
    :type key_credentials: list[~azure.graphrbac.models.KeyCredential]
    :param password_credentials: A collection of PasswordCredential objects
    :type password_credentials:
     list[~azure.graphrbac.models.PasswordCredential]
    """

    _validation = {
        'object_id': {'readonly': True},
        'deletion_timestamp': {'readonly': True},
        'object_type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'object_id': {'key': 'objectId', 'type': 'str'},
        'deletion_timestamp': {'key': 'deletionTimestamp', 'type': 'iso-8601'},
        'object_type': {'key': 'objectType', 'type': 'str'},
        'app_id': {'key': 'appId', 'type': 'str'},
        'app_roles': {'key': 'appRoles', 'type': '[AppRole]'},
        'app_permissions': {'key': 'appPermissions', 'type': '[str]'},
        'available_to_other_tenants': {'key': 'availableToOtherTenants', 'type': 'bool'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'identifier_uris': {'key': 'identifierUris', 'type': '[str]'},
        'reply_urls': {'key': 'replyUrls', 'type': '[str]'},
        'homepage': {'key': 'homepage', 'type': 'str'},
        'oauth2_allow_implicit_flow': {'key': 'oauth2AllowImplicitFlow', 'type': 'bool'},
        'required_resource_access': {'key': 'requiredResourceAccess', 'type': '[RequiredResourceAccess]'},
        'key_credentials': {'key': 'keyCredentials', 'type': '[KeyCredential]'},
        'password_credentials': {'key': 'passwordCredentials', 'type': '[PasswordCredential]'},
    }

    def __init__(self, **kwargs):
        super(Application, self).__init__(**kwargs)
        self.app_id = kwargs.get('app_id', None)
        self.app_roles = kwargs.get('app_roles', None)
        self.app_permissions = kwargs.get('app_permissions', None)
        self.available_to_other_tenants = kwargs.get('available_to_other_tenants', None)
        self.display_name = kwargs.get('display_name', None)
        self.identifier_uris = kwargs.get('identifier_uris', None)
        self.reply_urls = kwargs.get('reply_urls', None)
        self.homepage = kwargs.get('homepage', None)
        self.oauth2_allow_implicit_flow = kwargs.get('oauth2_allow_implicit_flow', None)
        self.required_resource_access = kwargs.get('required_resource_access', None)
        self.key_credentials = kwargs.get('key_credentials', None)
        self.password_credentials = kwargs.get('password_credentials', None)
        self.object_type = 'Application'


class ApplicationCreateParameters(Model):
    """Request parameters for creating a new application.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param app_roles: The collection of application roles that an application
     may declare. These roles can be assigned to users, groups or service
     principals.
    :type app_roles: list[~azure.graphrbac.models.AppRole]
    :param available_to_other_tenants: Required. Whether the application is
     available to other tenants.
    :type available_to_other_tenants: bool
    :param display_name: Required. The display name of the application.
    :type display_name: str
    :param homepage: The home page of the application.
    :type homepage: str
    :param identifier_uris: Required. A collection of URIs for the
     application.
    :type identifier_uris: list[str]
    :param reply_urls: A collection of reply URLs for the application.
    :type reply_urls: list[str]
    :param key_credentials: The list of KeyCredential objects.
    :type key_credentials: list[~azure.graphrbac.models.KeyCredential]
    :param password_credentials: The list of PasswordCredential objects.
    :type password_credentials:
     list[~azure.graphrbac.models.PasswordCredential]
    :param oauth2_allow_implicit_flow: Whether to allow implicit grant flow
     for OAuth2
    :type oauth2_allow_implicit_flow: bool
    :param required_resource_access: Specifies resources that this application
     requires access to and the set of OAuth permission scopes and application
     roles that it needs under each of those resources. This pre-configuration
     of required resource access drives the consent experience.
    :type required_resource_access:
     list[~azure.graphrbac.models.RequiredResourceAccess]
    """

    _validation = {
        'available_to_other_tenants': {'required': True},
        'display_name': {'required': True},
        'identifier_uris': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'app_roles': {'key': 'appRoles', 'type': '[AppRole]'},
        'available_to_other_tenants': {'key': 'availableToOtherTenants', 'type': 'bool'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'homepage': {'key': 'homepage', 'type': 'str'},
        'identifier_uris': {'key': 'identifierUris', 'type': '[str]'},
        'reply_urls': {'key': 'replyUrls', 'type': '[str]'},
        'key_credentials': {'key': 'keyCredentials', 'type': '[KeyCredential]'},
        'password_credentials': {'key': 'passwordCredentials', 'type': '[PasswordCredential]'},
        'oauth2_allow_implicit_flow': {'key': 'oauth2AllowImplicitFlow', 'type': 'bool'},
        'required_resource_access': {'key': 'requiredResourceAccess', 'type': '[RequiredResourceAccess]'},
    }

    def __init__(self, **kwargs):
        super(ApplicationCreateParameters, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.app_roles = kwargs.get('app_roles', None)
        self.available_to_other_tenants = kwargs.get('available_to_other_tenants', None)
        self.display_name = kwargs.get('display_name', None)
        self.homepage = kwargs.get('homepage', None)
        self.identifier_uris = kwargs.get('identifier_uris', None)
        self.reply_urls = kwargs.get('reply_urls', None)
        self.key_credentials = kwargs.get('key_credentials', None)
        self.password_credentials = kwargs.get('password_credentials', None)
        self.oauth2_allow_implicit_flow = kwargs.get('oauth2_allow_implicit_flow', None)
        self.required_resource_access = kwargs.get('required_resource_access', None)


class ApplicationUpdateParameters(Model):
    """Request parameters for updating an existing application.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param app_roles: The collection of application roles that an application
     may declare. These roles can be assigned to users, groups or service
     principals.
    :type app_roles: list[~azure.graphrbac.models.AppRole]
    :param available_to_other_tenants: Whether the application is available to
     other tenants
    :type available_to_other_tenants: bool
    :param display_name: The display name of the application.
    :type display_name: str
    :param homepage: The home page of the application.
    :type homepage: str
    :param identifier_uris: A collection of URIs for the application.
    :type identifier_uris: list[str]
    :param reply_urls: A collection of reply URLs for the application.
    :type reply_urls: list[str]
    :param key_credentials: The list of KeyCredential objects.
    :type key_credentials: list[~azure.graphrbac.models.KeyCredential]
    :param password_credentials: The list of PasswordCredential objects.
    :type password_credentials:
     list[~azure.graphrbac.models.PasswordCredential]
    :param oauth2_allow_implicit_flow: Whether to allow implicit grant flow
     for OAuth2
    :type oauth2_allow_implicit_flow: bool
    :param required_resource_access: Specifies resources that this application
     requires access to and the set of OAuth permission scopes and application
     roles that it needs under each of those resources. This pre-configuration
     of required resource access drives the consent experience.
    :type required_resource_access:
     list[~azure.graphrbac.models.RequiredResourceAccess]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'app_roles': {'key': 'appRoles', 'type': '[AppRole]'},
        'available_to_other_tenants': {'key': 'availableToOtherTenants', 'type': 'bool'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'homepage': {'key': 'homepage', 'type': 'str'},
        'identifier_uris': {'key': 'identifierUris', 'type': '[str]'},
        'reply_urls': {'key': 'replyUrls', 'type': '[str]'},
        'key_credentials': {'key': 'keyCredentials', 'type': '[KeyCredential]'},
        'password_credentials': {'key': 'passwordCredentials', 'type': '[PasswordCredential]'},
        'oauth2_allow_implicit_flow': {'key': 'oauth2AllowImplicitFlow', 'type': 'bool'},
        'required_resource_access': {'key': 'requiredResourceAccess', 'type': '[RequiredResourceAccess]'},
    }

    def __init__(self, **kwargs):
        super(ApplicationUpdateParameters, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.app_roles = kwargs.get('app_roles', None)
        self.available_to_other_tenants = kwargs.get('available_to_other_tenants', None)
        self.display_name = kwargs.get('display_name', None)
        self.homepage = kwargs.get('homepage', None)
        self.identifier_uris = kwargs.get('identifier_uris', None)
        self.reply_urls = kwargs.get('reply_urls', None)
        self.key_credentials = kwargs.get('key_credentials', None)
        self.password_credentials = kwargs.get('password_credentials', None)
        self.oauth2_allow_implicit_flow = kwargs.get('oauth2_allow_implicit_flow', None)
        self.required_resource_access = kwargs.get('required_resource_access', None)


class AppRole(Model):
    """AppRole.

    :param id: Unique role identifier inside the appRoles collection.
    :type id: str
    :param allowed_member_types: Specifies whether this app role definition
     can be assigned to users and groups by setting to 'User', or to other
     applications (that are accessing this application in daemon service
     scenarios) by setting to 'Application', or to both.
    :type allowed_member_types: list[str]
    :param description: Permission help text that appears in the admin app
     assignment and consent experiences.
    :type description: str
    :param display_name: Display name for the permission that appears in the
     admin consent and app assignment experiences.
    :type display_name: str
    :param is_enabled: When creating or updating a role definition, this must
     be set to true (which is the default). To delete a role, this must first
     be set to false. At that point, in a subsequent call, this role may be
     removed.
    :type is_enabled: bool
    :param value: Specifies the value of the roles claim that the application
     should expect in the authentication and access tokens.
    :type value: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'allowed_member_types': {'key': 'allowedMemberTypes', 'type': '[str]'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'is_enabled': {'key': 'isEnabled', 'type': 'bool'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AppRole, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.allowed_member_types = kwargs.get('allowed_member_types', None)
        self.description = kwargs.get('description', None)
        self.display_name = kwargs.get('display_name', None)
        self.is_enabled = kwargs.get('is_enabled', None)
        self.value = kwargs.get('value', None)


class CheckGroupMembershipParameters(Model):
    """Request parameters for IsMemberOf API call.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param group_id: Required. The object ID of the group to check.
    :type group_id: str
    :param member_id: Required. The object ID of the contact, group, user, or
     service principal to check for membership in the specified group.
    :type member_id: str
    """

    _validation = {
        'group_id': {'required': True},
        'member_id': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'group_id': {'key': 'groupId', 'type': 'str'},
        'member_id': {'key': 'memberId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(CheckGroupMembershipParameters, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.group_id = kwargs.get('group_id', None)
        self.member_id = kwargs.get('member_id', None)


class CheckGroupMembershipResult(Model):
    """Server response for IsMemberOf API call.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param value: True if the specified user, group, contact, or service
     principal has either direct or transitive membership in the specified
     group; otherwise, false.
    :type value: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'value': {'key': 'value', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(CheckGroupMembershipResult, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.value = kwargs.get('value', None)


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class Domain(Model):
    """Active Directory Domain information.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :ivar authentication_type: the type of the authentication into the domain.
    :vartype authentication_type: str
    :ivar is_default: if this is the default domain in the tenant.
    :vartype is_default: bool
    :ivar is_verified: if this domain's ownership is verified.
    :vartype is_verified: bool
    :param name: Required. the domain name.
    :type name: str
    """

    _validation = {
        'authentication_type': {'readonly': True},
        'is_default': {'readonly': True},
        'is_verified': {'readonly': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'authentication_type': {'key': 'authenticationType', 'type': 'str'},
        'is_default': {'key': 'isDefault', 'type': 'bool'},
        'is_verified': {'key': 'isVerified', 'type': 'bool'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Domain, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.authentication_type = None
        self.is_default = None
        self.is_verified = None
        self.name = kwargs.get('name', None)


class GetObjectsParameters(Model):
    """Request parameters for the GetObjectsByObjectIds API.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param object_ids: The requested object IDs.
    :type object_ids: list[str]
    :param types: The requested object types.
    :type types: list[str]
    :param include_directory_object_references: If true, also searches for
     object IDs in the partner tenant.
    :type include_directory_object_references: bool
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'object_ids': {'key': 'objectIds', 'type': '[str]'},
        'types': {'key': 'types', 'type': '[str]'},
        'include_directory_object_references': {'key': 'includeDirectoryObjectReferences', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(GetObjectsParameters, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.object_ids = kwargs.get('object_ids', None)
        self.types = kwargs.get('types', None)
        self.include_directory_object_references = kwargs.get('include_directory_object_references', None)


class GraphError(Model):
    """Active Directory error information.

    :param code: Error code.
    :type code: str
    :param message: Error message value.
    :type message: str
    """

    _attribute_map = {
        'code': {'key': 'odata\\.error.code', 'type': 'str'},
        'message': {'key': 'odata\\.error.message.value', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(GraphError, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)


class GraphErrorException(HttpOperationError):
    """Server responsed with exception of type: 'GraphError'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(GraphErrorException, self).__init__(deserialize, response, 'GraphError', *args)


class GroupAddMemberParameters(Model):
    """Request parameters for adding a member to a group.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param url: Required. A member object URL, such as
     "https://graph.windows.net/0b1f9851-1bf0-433f-aec3-cb9272f093dc/directoryObjects/f260bbc4-c254-447b-94cf-293b5ec434dd",
     where "0b1f9851-1bf0-433f-aec3-cb9272f093dc" is the tenantId and
     "f260bbc4-c254-447b-94cf-293b5ec434dd" is the objectId of the member
     (user, application, servicePrincipal, group) to be added.
    :type url: str
    """

    _validation = {
        'url': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'url': {'key': 'url', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(GroupAddMemberParameters, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.url = kwargs.get('url', None)


class GroupCreateParameters(Model):
    """Request parameters for creating a new group.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param display_name: Required. Group display name
    :type display_name: str
    :ivar mail_enabled: Required. Whether the group is mail-enabled. Must be
     false. This is because only pure security groups can be created using the
     Graph API. Default value: False .
    :vartype mail_enabled: bool
    :param mail_nickname: Required. Mail nickname
    :type mail_nickname: str
    :ivar security_enabled: Required. Whether the group is a security group.
     Must be true. This is because only pure security groups can be created
     using the Graph API. Default value: True .
    :vartype security_enabled: bool
    """

    _validation = {
        'display_name': {'required': True},
        'mail_enabled': {'required': True, 'constant': True},
        'mail_nickname': {'required': True},
        'security_enabled': {'required': True, 'constant': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'mail_enabled': {'key': 'mailEnabled', 'type': 'bool'},
        'mail_nickname': {'key': 'mailNickname', 'type': 'str'},
        'security_enabled': {'key': 'securityEnabled', 'type': 'bool'},
    }

    mail_enabled = False

    security_enabled = True

    def __init__(self, **kwargs):
        super(GroupCreateParameters, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.display_name = kwargs.get('display_name', None)
        self.mail_nickname = kwargs.get('mail_nickname', None)


class GroupGetMemberGroupsParameters(Model):
    """Request parameters for GetMemberGroups API call.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param security_enabled_only: Required. If true, only membership in
     security-enabled groups should be checked. Otherwise, membership in all
     groups should be checked.
    :type security_enabled_only: bool
    """

    _validation = {
        'security_enabled_only': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'security_enabled_only': {'key': 'securityEnabledOnly', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(GroupGetMemberGroupsParameters, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.security_enabled_only = kwargs.get('security_enabled_only', None)


class KeyCredential(Model):
    """Active Directory Key Credential information.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param start_date: Start date.
    :type start_date: datetime
    :param end_date: End date.
    :type end_date: datetime
    :param value: Key value.
    :type value: str
    :param key_id: Key ID.
    :type key_id: str
    :param usage: Usage. Acceptable values are 'Verify' and 'Sign'.
    :type usage: str
    :param type: Type. Acceptable values are 'AsymmetricX509Cert' and
     'Symmetric'.
    :type type: str
    :param custom_key_identifier: Custom Key Identifier
    :type custom_key_identifier: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'start_date': {'key': 'startDate', 'type': 'iso-8601'},
        'end_date': {'key': 'endDate', 'type': 'iso-8601'},
        'value': {'key': 'value', 'type': 'str'},
        'key_id': {'key': 'keyId', 'type': 'str'},
        'usage': {'key': 'usage', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'custom_key_identifier': {'key': 'customKeyIdentifier', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(KeyCredential, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.start_date = kwargs.get('start_date', None)
        self.end_date = kwargs.get('end_date', None)
        self.value = kwargs.get('value', None)
        self.key_id = kwargs.get('key_id', None)
        self.usage = kwargs.get('usage', None)
        self.type = kwargs.get('type', None)
        self.custom_key_identifier = kwargs.get('custom_key_identifier', None)


class KeyCredentialsUpdateParameters(Model):
    """Request parameters for a KeyCredentials update operation.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. A collection of KeyCredentials.
    :type value: list[~azure.graphrbac.models.KeyCredential]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[KeyCredential]'},
    }

    def __init__(self, **kwargs):
        super(KeyCredentialsUpdateParameters, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class PasswordCredential(Model):
    """Active Directory Password Credential information.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param start_date: Start date.
    :type start_date: datetime
    :param end_date: End date.
    :type end_date: datetime
    :param key_id: Key ID.
    :type key_id: str
    :param value: Key value.
    :type value: str
    :param custom_key_identifier: Custom Key Identifier
    :type custom_key_identifier: bytearray
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'start_date': {'key': 'startDate', 'type': 'iso-8601'},
        'end_date': {'key': 'endDate', 'type': 'iso-8601'},
        'key_id': {'key': 'keyId', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
        'custom_key_identifier': {'key': 'customKeyIdentifier', 'type': 'bytearray'},
    }

    def __init__(self, **kwargs):
        super(PasswordCredential, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.start_date = kwargs.get('start_date', None)
        self.end_date = kwargs.get('end_date', None)
        self.key_id = kwargs.get('key_id', None)
        self.value = kwargs.get('value', None)
        self.custom_key_identifier = kwargs.get('custom_key_identifier', None)


class PasswordCredentialsUpdateParameters(Model):
    """Request parameters for a PasswordCredentials update operation.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. A collection of PasswordCredentials.
    :type value: list[~azure.graphrbac.models.PasswordCredential]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PasswordCredential]'},
    }

    def __init__(self, **kwargs):
        super(PasswordCredentialsUpdateParameters, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class PasswordProfile(Model):
    """The password profile associated with a user.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param password: Required. Password
    :type password: str
    :param force_change_password_next_login: Whether to force a password
     change on next login.
    :type force_change_password_next_login: bool
    """

    _validation = {
        'password': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'password': {'key': 'password', 'type': 'str'},
        'force_change_password_next_login': {'key': 'forceChangePasswordNextLogin', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(PasswordProfile, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.password = kwargs.get('password', None)
        self.force_change_password_next_login = kwargs.get('force_change_password_next_login', None)


class Permissions(Model):
    """Permissions.

    :param odatatype: Microsoft.DirectoryServices.OAuth2PermissionGrant
    :type odatatype: str
    :param client_id: The objectId of the Service Principal associated with
     the app
    :type client_id: str
    :param consent_type: Typically set to AllPrincipals
    :type consent_type: str
    :param principal_id: Set to null if AllPrincipals is set
    :type principal_id: object
    :param resource_id: Service Principal Id of the resource you want to grant
    :type resource_id: str
    :param scope: Typically set to user_impersonation
    :type scope: str
    :param start_time: Start time for TTL
    :type start_time: str
    :param expiry_time: Expiry time for TTL
    :type expiry_time: str
    """

    _attribute_map = {
        'odatatype': {'key': 'odata\\.type', 'type': 'str'},
        'client_id': {'key': 'clientId', 'type': 'str'},
        'consent_type': {'key': 'consentType', 'type': 'str'},
        'principal_id': {'key': 'principalId', 'type': 'object'},
        'resource_id': {'key': 'resourceId', 'type': 'str'},
        'scope': {'key': 'scope', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'str'},
        'expiry_time': {'key': 'expiryTime', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Permissions, self).__init__(**kwargs)
        self.odatatype = kwargs.get('odatatype', None)
        self.client_id = kwargs.get('client_id', None)
        self.consent_type = kwargs.get('consent_type', None)
        self.principal_id = kwargs.get('principal_id', None)
        self.resource_id = kwargs.get('resource_id', None)
        self.scope = kwargs.get('scope', None)
        self.start_time = kwargs.get('start_time', None)
        self.expiry_time = kwargs.get('expiry_time', None)


class RequiredResourceAccess(Model):
    """Specifies the set of OAuth 2.0 permission scopes and app roles under the
    specified resource that an application requires access to. The specified
    OAuth 2.0 permission scopes may be requested by client applications
    (through the requiredResourceAccess collection) when calling a resource
    application. The requiredResourceAccess property of the Application entity
    is a collection of RequiredResourceAccess.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param resource_access: Required. The list of OAuth2.0 permission scopes
     and app roles that the application requires from the specified resource.
    :type resource_access: list[~azure.graphrbac.models.ResourceAccess]
    :param resource_app_id: The unique identifier for the resource that the
     application requires access to. This should be equal to the appId declared
     on the target resource application.
    :type resource_app_id: str
    """

    _validation = {
        'resource_access': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'resource_access': {'key': 'resourceAccess', 'type': '[ResourceAccess]'},
        'resource_app_id': {'key': 'resourceAppId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(RequiredResourceAccess, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.resource_access = kwargs.get('resource_access', None)
        self.resource_app_id = kwargs.get('resource_app_id', None)


class ResourceAccess(Model):
    """Specifies an OAuth 2.0 permission scope or an app role that an application
    requires. The resourceAccess property of the RequiredResourceAccess type is
    a collection of ResourceAccess.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param id: Required. The unique identifier for one of the OAuth2Permission
     or AppRole instances that the resource application exposes.
    :type id: str
    :param type: Specifies whether the id property references an
     OAuth2Permission or an AppRole. Possible values are "scope" or "role".
    :type type: str
    """

    _validation = {
        'id': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ResourceAccess, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.id = kwargs.get('id', None)
        self.type = kwargs.get('type', None)


class ServicePrincipal(DirectoryObject):
    """Active Directory service principal information.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :ivar object_id: The object ID.
    :vartype object_id: str
    :ivar deletion_timestamp: The time at which the directory object was
     deleted.
    :vartype deletion_timestamp: datetime
    :param object_type: Required. Constant filled by server.
    :type object_type: str
    :param display_name: The display name of the service principal.
    :type display_name: str
    :param app_id: The application ID.
    :type app_id: str
    :param app_roles: The collection of application roles that an application
     may declare. These roles can be assigned to users, groups or service
     principals.
    :type app_roles: list[~azure.graphrbac.models.AppRole]
    :param service_principal_names: A collection of service principal names.
    :type service_principal_names: list[str]
    """

    _validation = {
        'object_id': {'readonly': True},
        'deletion_timestamp': {'readonly': True},
        'object_type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'object_id': {'key': 'objectId', 'type': 'str'},
        'deletion_timestamp': {'key': 'deletionTimestamp', 'type': 'iso-8601'},
        'object_type': {'key': 'objectType', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'app_id': {'key': 'appId', 'type': 'str'},
        'app_roles': {'key': 'appRoles', 'type': '[AppRole]'},
        'service_principal_names': {'key': 'servicePrincipalNames', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(ServicePrincipal, self).__init__(**kwargs)
        self.display_name = kwargs.get('display_name', None)
        self.app_id = kwargs.get('app_id', None)
        self.app_roles = kwargs.get('app_roles', None)
        self.service_principal_names = kwargs.get('service_principal_names', None)
        self.object_type = 'ServicePrincipal'


class ServicePrincipalCreateParameters(Model):
    """Request parameters for creating a new service principal.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param account_enabled: Whether the account is enabled
    :type account_enabled: bool
    :param app_id: Required. application Id
    :type app_id: str
    :param app_role_assignment_required: Specifies whether an
     AppRoleAssignment to a user or group is required before Azure AD will
     issue a user or access token to the application.
    :type app_role_assignment_required: bool
    :param display_name: The display name for the service principal.
    :type display_name: str
    :param error_url:
    :type error_url: str
    :param homepage: The URL to the homepage of the associated application.
    :type homepage: str
    :param key_credentials: A collection of KeyCredential objects.
    :type key_credentials: list[~azure.graphrbac.models.KeyCredential]
    :param password_credentials: A collection of PasswordCredential objects
    :type password_credentials:
     list[~azure.graphrbac.models.PasswordCredential]
    :param publisher_name: The display name of the tenant in which the
     associated application is specified.
    :type publisher_name: str
    :param reply_urls: A collection of reply URLs for the service principal.
    :type reply_urls: list[str]
    :param saml_metadata_url:
    :type saml_metadata_url: str
    :param service_principal_names: A collection of service principal names.
    :type service_principal_names: list[str]
    :param tags:
    :type tags: list[str]
    """

    _validation = {
        'app_id': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'account_enabled': {'key': 'accountEnabled', 'type': 'bool'},
        'app_id': {'key': 'appId', 'type': 'str'},
        'app_role_assignment_required': {'key': 'appRoleAssignmentRequired', 'type': 'bool'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'error_url': {'key': 'errorUrl', 'type': 'str'},
        'homepage': {'key': 'homepage', 'type': 'str'},
        'key_credentials': {'key': 'keyCredentials', 'type': '[KeyCredential]'},
        'password_credentials': {'key': 'passwordCredentials', 'type': '[PasswordCredential]'},
        'publisher_name': {'key': 'publisherName', 'type': 'str'},
        'reply_urls': {'key': 'replyUrls', 'type': '[str]'},
        'saml_metadata_url': {'key': 'samlMetadataUrl', 'type': 'str'},
        'service_principal_names': {'key': 'servicePrincipalNames', 'type': '[str]'},
        'tags': {'key': 'tags', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(ServicePrincipalCreateParameters, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.account_enabled = kwargs.get('account_enabled', None)
        self.app_id = kwargs.get('app_id', None)
        self.app_role_assignment_required = kwargs.get('app_role_assignment_required', None)
        self.display_name = kwargs.get('display_name', None)
        self.error_url = kwargs.get('error_url', None)
        self.homepage = kwargs.get('homepage', None)
        self.key_credentials = kwargs.get('key_credentials', None)
        self.password_credentials = kwargs.get('password_credentials', None)
        self.publisher_name = kwargs.get('publisher_name', None)
        self.reply_urls = kwargs.get('reply_urls', None)
        self.saml_metadata_url = kwargs.get('saml_metadata_url', None)
        self.service_principal_names = kwargs.get('service_principal_names', None)
        self.tags = kwargs.get('tags', None)


class ServicePrincipalUpdateParameters(Model):
    """Request parameters for creating a new service principal.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param account_enabled: Whether the account is enabled
    :type account_enabled: bool
    :param app_id: application Id
    :type app_id: str
    :param app_role_assignment_required: Specifies whether an
     AppRoleAssignment to a user or group is required before Azure AD will
     issue a user or access token to the application.
    :type app_role_assignment_required: bool
    :param display_name: The display name for the service principal.
    :type display_name: str
    :param error_url:
    :type error_url: str
    :param homepage: The URL to the homepage of the associated application.
    :type homepage: str
    :param key_credentials: A collection of KeyCredential objects.
    :type key_credentials: list[~azure.graphrbac.models.KeyCredential]
    :param password_credentials: A collection of PasswordCredential objects
    :type password_credentials:
     list[~azure.graphrbac.models.PasswordCredential]
    :param publisher_name: The display name of the tenant in which the
     associated application is specified.
    :type publisher_name: str
    :param reply_urls: A collection of reply URLs for the service principal.
    :type reply_urls: list[str]
    :param saml_metadata_url:
    :type saml_metadata_url: str
    :param service_principal_names: A collection of service principal names.
    :type service_principal_names: list[str]
    :param tags:
    :type tags: list[str]
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'account_enabled': {'key': 'accountEnabled', 'type': 'bool'},
        'app_id': {'key': 'appId', 'type': 'str'},
        'app_role_assignment_required': {'key': 'appRoleAssignmentRequired', 'type': 'bool'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'error_url': {'key': 'errorUrl', 'type': 'str'},
        'homepage': {'key': 'homepage', 'type': 'str'},
        'key_credentials': {'key': 'keyCredentials', 'type': '[KeyCredential]'},
        'password_credentials': {'key': 'passwordCredentials', 'type': '[PasswordCredential]'},
        'publisher_name': {'key': 'publisherName', 'type': 'str'},
        'reply_urls': {'key': 'replyUrls', 'type': '[str]'},
        'saml_metadata_url': {'key': 'samlMetadataUrl', 'type': 'str'},
        'service_principal_names': {'key': 'servicePrincipalNames', 'type': '[str]'},
        'tags': {'key': 'tags', 'type': '[str]'},
    }

    def __init__(self, **kwargs):
        super(ServicePrincipalUpdateParameters, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.account_enabled = kwargs.get('account_enabled', None)
        self.app_id = kwargs.get('app_id', None)
        self.app_role_assignment_required = kwargs.get('app_role_assignment_required', None)
        self.display_name = kwargs.get('display_name', None)
        self.error_url = kwargs.get('error_url', None)
        self.homepage = kwargs.get('homepage', None)
        self.key_credentials = kwargs.get('key_credentials', None)
        self.password_credentials = kwargs.get('password_credentials', None)
        self.publisher_name = kwargs.get('publisher_name', None)
        self.reply_urls = kwargs.get('reply_urls', None)
        self.saml_metadata_url = kwargs.get('saml_metadata_url', None)
        self.service_principal_names = kwargs.get('service_principal_names', None)
        self.tags = kwargs.get('tags', None)


class SignInName(Model):
    """Contains information about a sign-in name of a local account user in an
    Azure Active Directory B2C tenant.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param type: A string value that can be used to classify user sign-in
     types in your directory, such as 'emailAddress' or 'userName'.
    :type type: str
    :param value: The sign-in used by the local account. Must be unique across
     the company/tenant. For example, 'johnc@example.com'.
    :type value: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'type': {'key': 'type', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SignInName, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.type = kwargs.get('type', None)
        self.value = kwargs.get('value', None)


class User(DirectoryObject):
    """Active Directory user information.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :ivar object_id: The object ID.
    :vartype object_id: str
    :ivar deletion_timestamp: The time at which the directory object was
     deleted.
    :vartype deletion_timestamp: datetime
    :param object_type: Required. Constant filled by server.
    :type object_type: str
    :param immutable_id: This must be specified if you are using a federated
     domain for the user's userPrincipalName (UPN) property when creating a new
     user account. It is used to associate an on-premises Active Directory user
     account with their Azure AD user object.
    :type immutable_id: str
    :param usage_location: A two letter country code (ISO standard 3166).
     Required for users that will be assigned licenses due to legal requirement
     to check for availability of services in countries. Examples include:
     "US", "JP", and "GB".
    :type usage_location: str
    :param given_name: The given name for the user.
    :type given_name: str
    :param surname: The user's surname (family name or last name).
    :type surname: str
    :param user_type: A string value that can be used to classify user types
     in your directory, such as 'Member' and 'Guest'. Possible values include:
     'Member', 'Guest'
    :type user_type: str or ~azure.graphrbac.models.UserType
    :param account_enabled: Whether the account is enabled.
    :type account_enabled: bool
    :param display_name: The display name of the user.
    :type display_name: str
    :param user_principal_name: The principal name of the user.
    :type user_principal_name: str
    :param mail_nickname: The mail alias for the user.
    :type mail_nickname: str
    :param mail: The primary email address of the user.
    :type mail: str
    :param sign_in_names: The sign-in names of the user.
    :type sign_in_names: list[~azure.graphrbac.models.SignInName]
    """

    _validation = {
        'object_id': {'readonly': True},
        'deletion_timestamp': {'readonly': True},
        'object_type': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'object_id': {'key': 'objectId', 'type': 'str'},
        'deletion_timestamp': {'key': 'deletionTimestamp', 'type': 'iso-8601'},
        'object_type': {'key': 'objectType', 'type': 'str'},
        'immutable_id': {'key': 'immutableId', 'type': 'str'},
        'usage_location': {'key': 'usageLocation', 'type': 'str'},
        'given_name': {'key': 'givenName', 'type': 'str'},
        'surname': {'key': 'surname', 'type': 'str'},
        'user_type': {'key': 'userType', 'type': 'str'},
        'account_enabled': {'key': 'accountEnabled', 'type': 'bool'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'mail_nickname': {'key': 'mailNickname', 'type': 'str'},
        'mail': {'key': 'mail', 'type': 'str'},
        'sign_in_names': {'key': 'signInNames', 'type': '[SignInName]'},
    }

    def __init__(self, **kwargs):
        super(User, self).__init__(**kwargs)
        self.immutable_id = kwargs.get('immutable_id', None)
        self.usage_location = kwargs.get('usage_location', None)
        self.given_name = kwargs.get('given_name', None)
        self.surname = kwargs.get('surname', None)
        self.user_type = kwargs.get('user_type', None)
        self.account_enabled = kwargs.get('account_enabled', None)
        self.display_name = kwargs.get('display_name', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)
        self.mail_nickname = kwargs.get('mail_nickname', None)
        self.mail = kwargs.get('mail', None)
        self.sign_in_names = kwargs.get('sign_in_names', None)
        self.object_type = 'User'


class UserBase(Model):
    """UserBase.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param immutable_id: This must be specified if you are using a federated
     domain for the user's userPrincipalName (UPN) property when creating a new
     user account. It is used to associate an on-premises Active Directory user
     account with their Azure AD user object.
    :type immutable_id: str
    :param usage_location: A two letter country code (ISO standard 3166).
     Required for users that will be assigned licenses due to legal requirement
     to check for availability of services in countries. Examples include:
     "US", "JP", and "GB".
    :type usage_location: str
    :param given_name: The given name for the user.
    :type given_name: str
    :param surname: The user's surname (family name or last name).
    :type surname: str
    :param user_type: A string value that can be used to classify user types
     in your directory, such as 'Member' and 'Guest'. Possible values include:
     'Member', 'Guest'
    :type user_type: str or ~azure.graphrbac.models.UserType
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'immutable_id': {'key': 'immutableId', 'type': 'str'},
        'usage_location': {'key': 'usageLocation', 'type': 'str'},
        'given_name': {'key': 'givenName', 'type': 'str'},
        'surname': {'key': 'surname', 'type': 'str'},
        'user_type': {'key': 'userType', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(UserBase, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.immutable_id = kwargs.get('immutable_id', None)
        self.usage_location = kwargs.get('usage_location', None)
        self.given_name = kwargs.get('given_name', None)
        self.surname = kwargs.get('surname', None)
        self.user_type = kwargs.get('user_type', None)


class UserCreateParameters(UserBase):
    """Request parameters for creating a new work or school account user.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param immutable_id: This must be specified if you are using a federated
     domain for the user's userPrincipalName (UPN) property when creating a new
     user account. It is used to associate an on-premises Active Directory user
     account with their Azure AD user object.
    :type immutable_id: str
    :param usage_location: A two letter country code (ISO standard 3166).
     Required for users that will be assigned licenses due to legal requirement
     to check for availability of services in countries. Examples include:
     "US", "JP", and "GB".
    :type usage_location: str
    :param given_name: The given name for the user.
    :type given_name: str
    :param surname: The user's surname (family name or last name).
    :type surname: str
    :param user_type: A string value that can be used to classify user types
     in your directory, such as 'Member' and 'Guest'. Possible values include:
     'Member', 'Guest'
    :type user_type: str or ~azure.graphrbac.models.UserType
    :param account_enabled: Required. Whether the account is enabled.
    :type account_enabled: bool
    :param display_name: Required. The display name of the user.
    :type display_name: str
    :param password_profile: Required. Password Profile
    :type password_profile: ~azure.graphrbac.models.PasswordProfile
    :param user_principal_name: Required. The user principal name
     (someuser@contoso.com). It must contain one of the verified domains for
     the tenant.
    :type user_principal_name: str
    :param mail_nickname: Required. The mail alias for the user.
    :type mail_nickname: str
    :param mail: The primary email address of the user.
    :type mail: str
    """

    _validation = {
        'account_enabled': {'required': True},
        'display_name': {'required': True},
        'password_profile': {'required': True},
        'user_principal_name': {'required': True},
        'mail_nickname': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'immutable_id': {'key': 'immutableId', 'type': 'str'},
        'usage_location': {'key': 'usageLocation', 'type': 'str'},
        'given_name': {'key': 'givenName', 'type': 'str'},
        'surname': {'key': 'surname', 'type': 'str'},
        'user_type': {'key': 'userType', 'type': 'str'},
        'account_enabled': {'key': 'accountEnabled', 'type': 'bool'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'password_profile': {'key': 'passwordProfile', 'type': 'PasswordProfile'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'mail_nickname': {'key': 'mailNickname', 'type': 'str'},
        'mail': {'key': 'mail', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(UserCreateParameters, self).__init__(**kwargs)
        self.account_enabled = kwargs.get('account_enabled', None)
        self.display_name = kwargs.get('display_name', None)
        self.password_profile = kwargs.get('password_profile', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)
        self.mail_nickname = kwargs.get('mail_nickname', None)
        self.mail = kwargs.get('mail', None)


class UserGetMemberGroupsParameters(Model):
    """Request parameters for GetMemberGroups API call.

    All required parameters must be populated in order to send to Azure.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param security_enabled_only: Required. If true, only membership in
     security-enabled groups should be checked. Otherwise, membership in all
     groups should be checked.
    :type security_enabled_only: bool
    """

    _validation = {
        'security_enabled_only': {'required': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'security_enabled_only': {'key': 'securityEnabledOnly', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(UserGetMemberGroupsParameters, self).__init__(**kwargs)
        self.additional_properties = kwargs.get('additional_properties', None)
        self.security_enabled_only = kwargs.get('security_enabled_only', None)


class UserUpdateParameters(UserBase):
    """Request parameters for updating an existing work or school account user.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param immutable_id: This must be specified if you are using a federated
     domain for the user's userPrincipalName (UPN) property when creating a new
     user account. It is used to associate an on-premises Active Directory user
     account with their Azure AD user object.
    :type immutable_id: str
    :param usage_location: A two letter country code (ISO standard 3166).
     Required for users that will be assigned licenses due to legal requirement
     to check for availability of services in countries. Examples include:
     "US", "JP", and "GB".
    :type usage_location: str
    :param given_name: The given name for the user.
    :type given_name: str
    :param surname: The user's surname (family name or last name).
    :type surname: str
    :param user_type: A string value that can be used to classify user types
     in your directory, such as 'Member' and 'Guest'. Possible values include:
     'Member', 'Guest'
    :type user_type: str or ~azure.graphrbac.models.UserType
    :param account_enabled: Whether the account is enabled.
    :type account_enabled: bool
    :param display_name: The display name of the user.
    :type display_name: str
    :param password_profile: The password profile of the user.
    :type password_profile: ~azure.graphrbac.models.PasswordProfile
    :param user_principal_name: The user principal name
     (someuser@contoso.com). It must contain one of the verified domains for
     the tenant.
    :type user_principal_name: str
    :param mail_nickname: The mail alias for the user.
    :type mail_nickname: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'immutable_id': {'key': 'immutableId', 'type': 'str'},
        'usage_location': {'key': 'usageLocation', 'type': 'str'},
        'given_name': {'key': 'givenName', 'type': 'str'},
        'surname': {'key': 'surname', 'type': 'str'},
        'user_type': {'key': 'userType', 'type': 'str'},
        'account_enabled': {'key': 'accountEnabled', 'type': 'bool'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'password_profile': {'key': 'passwordProfile', 'type': 'PasswordProfile'},
        'user_principal_name': {'key': 'userPrincipalName', 'type': 'str'},
        'mail_nickname': {'key': 'mailNickname', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(UserUpdateParameters, self).__init__(**kwargs)
        self.account_enabled = kwargs.get('account_enabled', None)
        self.display_name = kwargs.get('display_name', None)
        self.password_profile = kwargs.get('password_profile', None)
        self.user_principal_name = kwargs.get('user_principal_name', None)
        self.mail_nickname = kwargs.get('mail_nickname', None)
