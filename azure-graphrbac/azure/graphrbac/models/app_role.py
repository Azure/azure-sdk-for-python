# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class AppRole(Model):
    """Represents an application role that may be requested by a client
    application calling another application or that may be used to assign an
    application to users or groups in a specified application role. The
    appRoles property of the servicePrincipal entity and of the application
    entity is a collection of appRole.

    :param additional_properties: Unmatched properties from the message are
     deserialized this collection
    :type additional_properties: dict[str, object]
    :param allowed_member_types: Specifies whether this app role definition
     can be assigned to users and groups, to other applications, or to both.
    :type allowed_member_types: list[str]
    :param description: Permission help text that appears in the admin app
     assignment and consent experiences.
    :type description: str
    :param display_name: Display name for the permission that appears in the
     admin consent and app assignment experiences.
    :type display_name: str
    :param id: Unique role identifier inside the appRoles collection.
    :type id: str
    :param is_enabled: When creating or updating a role definition, this must
     be set to true (which is the default). To delete a role, this must first
     be set to false.
    :type is_enabled: bool
    :param value: Specifies the value of the roles claim that the application
     should expect in the authentication and access tokens.
    :type value: str
    """

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'allowed_member_types': {'key': 'allowedMemberTypes', 'type': '[str]'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'is_enabled': {'key': 'isEnabled', 'type': 'bool'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(self, additional_properties=None, allowed_member_types=None, description=None, display_name=None, id=None, is_enabled=None, value=None):
        super(AppRole, self).__init__()
        self.additional_properties = additional_properties
        self.allowed_member_types = allowed_member_types
        self.description = description
        self.display_name = display_name
        self.id = id
        self.is_enabled = is_enabled
        self.value = value
