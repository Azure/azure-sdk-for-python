# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class NetworkRuleSet(Model):
    """Network rule set.

    All required parameters must be populated in order to send to Azure.

    :param bypass: Specifies whether traffic is bypassed for
     Logging/Metrics/AzureServices. Possible values are any combination of
     Logging|Metrics|AzureServices (For example, "Logging, Metrics"), or None
     to bypass none of those traffics. Possible values include: 'None',
     'Logging', 'Metrics', 'AzureServices'. Default value: "AzureServices" .
    :type bypass: str or ~azure.mgmt.storage.v2018_03_01_preview.models.Bypass
    :param virtual_network_rules: Sets the virtual network rules
    :type virtual_network_rules:
     list[~azure.mgmt.storage.v2018_03_01_preview.models.VirtualNetworkRule]
    :param ip_rules: Sets the IP ACL rules
    :type ip_rules:
     list[~azure.mgmt.storage.v2018_03_01_preview.models.IPRule]
    :param default_action: Required. Specifies the default action of allow or
     deny when no other rules match. Possible values include: 'Allow', 'Deny'.
     Default value: "Allow" .
    :type default_action: str or
     ~azure.mgmt.storage.v2018_03_01_preview.models.DefaultAction
    """

    _validation = {
        'default_action': {'required': True},
    }

    _attribute_map = {
        'bypass': {'key': 'bypass', 'type': 'str'},
        'virtual_network_rules': {'key': 'virtualNetworkRules', 'type': '[VirtualNetworkRule]'},
        'ip_rules': {'key': 'ipRules', 'type': '[IPRule]'},
        'default_action': {'key': 'defaultAction', 'type': 'DefaultAction'},
    }

    def __init__(self, **kwargs):
        super(NetworkRuleSet, self).__init__(**kwargs)
        self.bypass = kwargs.get('bypass', "AzureServices")
        self.virtual_network_rules = kwargs.get('virtual_network_rules', None)
        self.ip_rules = kwargs.get('ip_rules', None)
        self.default_action = kwargs.get('default_action', "Allow")
