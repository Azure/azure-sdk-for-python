[class]
ServiceBusService
[x-ms-version]
2011-06-01
[init]
service_namespace
account_key
issuer

[method]  
create_queue
[comment]
Creates a new queue. Once created, this queue's resource manifest is immutable. 

queue: queue object to create. 
queue_name: the name of the queue.
fail_on_exist: specify whether to throw an exception when the queue exists.
[params]
fail_on_exist=False
[return]
None
[url]
PUT https://<service-namespace>.servicebus.windows.net/<queue-name> 
[requestbody]
feed:queue

[method]  
delete_queue
[comment]
Deletes an existing queue. This operation will also remove all associated state 
including messages in the queue.

fail_not_exist: specify whether to throw an exception if the queue doesn't exist.
[params]
fail_not_exist=False
[return]
None
[url]
DELETE https://<service-namespace>.servicebus.windows.net/<queue-name> 

[method]  
get_queue
[comment]
Retrieves an existing queue.

queue_name: name of the queue.
[return]
Feed('queue')
[url]
GET https://<service-namespace>.servicebus.windows.net/<queue-name> 
[requestheader]

[method]  
list_queues
[comment]
Enumerates the queues in the service namespace. 
[return]
(Feed('queue'),)
[url]
GET https://<service-namespace>.servicebus.windows.net/$Resources/Queues
[requestheader]

[method]  
create_topic
[comment]
Creates a new topic. Once created, this topic resource manifest is immutable. 

topic_name: name of the topic.
topic: the Topic object to create.
fail_on_exist: specify whether to throw an exception when the topic exists.
[params]
fail_on_exist=False
[return]
None
[url]
PUT https://<service-namespace>.servicebus.windows.net/<topic_name> 
[requestbody]
feed:topic

[method]  
delete_topic
[comment]
Deletes an existing topic. This operation will also remove all associated state 
including associated subscriptions.

topic_name: name of the topic.
fail_not_exist: specify whether throw exception when topic doesn't exist.
[params]
fail_not_exist=False
[return]
None
[url]
DELETE https://<service-namespace>.servicebus.windows.net/<topic_name> 

[method]  
get_topic
[comment]
Retrieves the description for the specified topic.

topic_name: name of the topic.
[return]
Feed('topic')
[url]
GET https://<service-namespace>.servicebus.windows.net/<topic_name> 
[requestheader]

[method]  
list_topics
[comment]
Retrieves the topics in the service namespace. 
[return]
(Feed('topic'),)
[url]
GET https://<service-namespace>.servicebus.windows.net/$Resources/Topics
[requestheader]

[method]
create_rule
[comment]
Creates a new rule. Once created, this rule's resource manifest is immutable.

topic_name: the name of the topic
subscription_name: the name of the subscription
rule_name: name of the rule.
fail_on_exist: specify whether to throw an exception when the rule exists.
[params]
fail_on_exist=False
[return]
None
[url]
PUT https://<service-namespace>.servicebus.windows.net/<topic-name>/subscriptions/<subscription-name>/rules/<rule-name>
[requestbody]
feed:rule

[method]
delete_rule
[comment]
Deletes an existing rule.

topic_name: the name of the topic
subscription_name: the name of the subscription
rule_name: the name of the rule.  DEFAULT_RULE_NAME=$Default. Use DEFAULT_RULE_NAME
		to delete default rule for the subscription.
fail_not_exist: specify whether throw exception when rule doesn't exist.
[params]
fail_not_exist=False
[return]
None
[url]
DELETE https://<service-namespace>.servicebus.windows.net/<topic-name>/subscriptions/<subscription-name>/rules/<rule-name>

[method]
get_rule
[comment]
Retrieves the description for the specified rule. 

topic_name: the name of the topic
subscription_name: the name of the subscription
rule_name: name of the rule
[return]
Feed('rule')
[url]
GET https://<service-namespace>.servicebus.windows.net/<topic-name>/subscriptions/<subscription-name>/rules/<rule-name>

[method]
list_rules
[comment]
Retrieves the rules that exist under the specified subscription. 

topic_name: the name of the topic
subscription_name: the name of the subscription
[return]
(Feed('rule'),)
[url]
GET https://<service-namespace>.servicebus.windows.net/<topic-name>/subscriptions/<subscription-name>/rules/

[method]
create_subscription
[comment]
Creates a new subscription. Once created, this subscription resource manifest is 
immutable. 

topic_name: the name of the topic
subscription_name: the name of the subscription
fail_on_exist: specify whether throw exception when subscription exists.
[params]
fail_on_exist=False
[return]
None
[url]
PUT https://<service-namespace>.servicebus.windows.net/<topic-name>/subscriptions/<subscription-name>
[requestbody]
feed:subscription

[method]
delete_subscription
[comment]
Deletes an existing subscription.

topic_name: the name of the topic
subscription_name: the name of the subscription
fail_not_exist: specify whether to throw an exception when the subscription doesn't exist.
[params]
fail_not_exist=False
[return]
None
[url]
DELETE https://<service-namespace>.servicebus.windows.net/<topic-name>/subscriptions/<subscription-name>

[method]
get_subscription
[comment]
Gets an existing subscription.

topic_name: the name of the topic
subscription_name: the name of the subscription
[return]
Feed('subscription')
[url]
GET https://<service-namespace>.servicebus.windows.net/<topic-name>/subscriptions/<subscription-name>

[method]
list_subscriptions
[comment]
Retrieves the subscriptions in the specified topic. 

topic_name: the name of the topic
[return]
(Feed('subscription'),)
[url]
GET https://<service-namespace>.servicebus.windows.net/<topic-name>/subscriptions/

[method]
send_topic_message
[comment]
Enqueues a message into the specified topic. The limit to the number of messages 
which may be present in the topic is governed by the message size in MaxTopicSizeInBytes. 
If this message causes the topic to exceed its quota, a quota exceeded error is 
returned and the message will be rejected.

topic_name: name of the topic.
message: the Message object containing message body and properties.
[return]
[url]
POST https://<service-namespace>.servicebus.windows.net/<topic-name>/messages
[requestbody]
binary:message

[method]
peek_lock_subscription_message
[comment]
This operation is used to atomically retrieve and lock a message for processing. 
The message is guaranteed not to be delivered to other receivers during the lock 
duration period specified in buffer description. Once the lock expires, the 
message will be available to other receivers (on the same subscription only) 
during the lock duration period specified in the topic description. Once the lock
expires, the message will be available to other receivers. In order to complete 
processing of the message, the receiver should issue a delete command with the 
lock ID received from this operation. To abandon processing of the message and 
unlock it for other receivers, an Unlock Message command should be issued, or 
the lock duration period can expire. 

topic_name: the name of the topic
subscription_name: the name of the subscription
[return]
Message
[url]
POST https://<service-namespace>.servicebus.windows.net/<topic-name>/subscriptions/<subscription-name>/messages/head
[query]
timeout=60

[method]
unlock_subscription_message
[comment]
Unlock a message for processing by other receivers on a given subscription. 
This operation deletes the lock object, causing the message to be unlocked. 
A message must have first been locked by a receiver before this operation 
is called.

topic_name: the name of the topic
subscription_name: the name of the subscription
sequence_name: The sequence number of the message to be unlocked as returned 
		in BrokerProperties['SequenceNumber'] by the Peek Message operation.
lock_token: The ID of the lock as returned by the Peek Message operation in 
		BrokerProperties['LockToken']
[return]
[url]
PUT https://<service-namespace>.servicebus.windows.net/<topic-name>/subscriptions/<subscription-name>/messages/<sequence-number>/<lock-token>

[method]
read_delete_subscription_message
[comment]
Read and delete a message from a subscription as an atomic operation. This 
operation should be used when a best-effort guarantee is sufficient for an 
application; that is, using this operation it is possible for messages to 
be lost if processing fails.

topic_name: the name of the topic
subscription_name: the name of the subscription
[return]
Message
[url]
DELETE https://<service-namespace>.servicebus.windows.net/<topic-name>/subscriptions/<subscription-name>/messages/head
[query]
timeout=60


[method]
delete_subscription_message
[comment]
Completes processing on a locked message and delete it from the subscription. 
This operation should only be called after processing a previously locked 
message is successful to maintain At-Least-Once delivery assurances.

topic_name: the name of the topic
subscription_name: the name of the subscription
sequence_name: The sequence number of the message to be deleted as returned 
		in BrokerProperties['SequenceNumber'] by the Peek Message operation.
lock_token: The ID of the lock as returned by the Peek Message operation in 
		BrokerProperties['LockToken']
[return]
[url]
DELETE https://<service-namespace>.servicebus.windows.net/<topic-name>/subscriptions/<subscription-name>/messages/<sequence-number>/<lock-token>

[method]
send_queue_message
[comment]
Sends a message into the specified queue. The limit to the number of messages 
which may be present in the topic is governed by the message size the 
MaxTopicSizeInMegaBytes. If this message will cause the queue to exceed its 
quota, a quota exceeded error is returned and the message will be rejected.

queue_name: name of the queue
message: the Message object containing message body and properties.
[return]
[url]
POST https://<service-namespace>.servicebus.windows.net/<queue-name>/messages 
[requestbody]
binary:message

[method]
peek_lock_queue_message
[comment]
Automically retrieves and locks a message from a queue for processing. The 
message is guaranteed not to be delivered to other receivers (on the same 
subscription only) during the lock duration period specified in the queue 
description. Once the lock expires, the message will be available to other 
receivers. In order to complete processing of the message, the receiver 
should issue a delete command with the lock ID received from this operation. 
To abandon processing of the message and unlock it for other receivers, 
an Unlock Message command should be issued, or the lock duration period 
can expire.

queue_name: name of the queue
[return]
Message
[url]
POST https://<service-namespace>.servicebus.windows.net/<queue-name>/messages/head
[query]
timeout=60

[method]
unlock_queue_message
[comment]
Unlocks a message for processing by other receivers on a given subscription. 
This operation deletes the lock object, causing the message to be unlocked. 
A message must have first been locked by a receiver before this operation is 
called.

queue_name: name of the queue
sequence_name: The sequence number of the message to be unlocked as returned 
		in BrokerProperties['SequenceNumber'] by the Peek Message operation.
lock_token: The ID of the lock as returned by the Peek Message operation in 
		BrokerProperties['LockToken']
[return]
[url]
PUT https://<service-namespace>.servicebus.windows.net/<queue-name>/messages/<sequence-number>/<lock-token>

[method]
read_delete_queue_message
[comment]
Reads and deletes a message from a queue as an atomic operation. This operation 
should be used when a best-effort guarantee is sufficient for an application; 
that is, using this operation it is possible for messages to be lost if 
processing fails.

queue_name: name of the queue
[return]
Message
[url]
DELETE https://<service-namespace>.servicebus.windows.net/<queue-name>/messages/head
[query]
timeout=60


[method]
delete_queue_message
[comment]
Completes processing on a locked message and delete it from the queue. This 
operation should only be called after processing a previously locked message 
is successful to maintain At-Least-Once delivery assurances.

queue_name: name of the queue
sequence_name: The sequence number of the message to be deleted as returned 
		in BrokerProperties['SequenceNumber'] by the Peek Message operation.
lock_token: The ID of the lock as returned by the Peek Message operation in 
		BrokerProperties['LockToken']
[return]
[url]
DELETE https://<service-namespace>.servicebus.windows.net/<queue-name>/messages/<sequence_number>/<lock-token>


[methods_code]
def receive_queue_message(self, queue_name, peek_lock=True, timeout=60):
    if peek_lock:
        return self.peek_lock_queue_message(queue_name, timeout)
    else:
        return self.read_delete_queue_message(queue_name, timeout)

def receive_subscription_message(self, topic_name, subscription_name, peek_lock=True, timeout=60):
    if peek_lock:
        return self.peek_lock_subscription_message(topic_name, subscription_name, timeout)
    else:
        return self.read_delete_subscription_message(topic_name, subscription_name, timeout)

def __init__(self, service_namespace=None, account_key=None, issuer=None, x_ms_version='2011-06-01'):
    self.requestid = None
    self.service_namespace = service_namespace
    self.account_key = account_key
    self.issuer = issuer    

    #get service namespace, account key and issuer. If they are set when constructing, then use them.
    #else find them from environment variables.
    if not service_namespace:
        if os.environ.has_key(AZURE_SERVICEBUS_NAMESPACE):
            self.service_namespace = os.environ[AZURE_SERVICEBUS_NAMESPACE]
    if not account_key:
        if os.environ.has_key(AZURE_SERVICEBUS_ACCESS_KEY):
            self.account_key = os.environ[AZURE_SERVICEBUS_ACCESS_KEY]
    if not issuer:
        if os.environ.has_key(AZURE_SERVICEBUS_ISSUER):
            self.issuer = os.environ[AZURE_SERVICEBUS_ISSUER]
    
    if not self.service_namespace or not self.account_key or not self.issuer:
        raise WindowsAzureError('You need to provide servicebus namespace, access key and Issuer')
    
    self.x_ms_version = x_ms_version
    self._httpclient = _HTTPClient(service_instance=self, service_namespace=service_namespace, account_key=account_key, issuer=issuer, x_ms_version=self.x_ms_version)
    self._filter = self._httpclient.perform_request

def with_filter(self, filter):
    '''Returns a new service which will process requests with the
    specified filter.  Filtering operations can include logging, automatic
    retrying, etc...  The filter is a lambda which receives the HTTPRequest
    and another lambda.  The filter can perform any pre-processing on the
    request, pass it off to the next lambda, and then perform any post-processing
    on the response.'''
    res = ServiceBusService(self.service_namespace, self.account_key, 
                            self.issuer, self.x_ms_version)
    old_filter = self._filter
    def new_filter(request):
        return filter(request, old_filter)
                
    res._filter = new_filter
    return res
        
def _perform_request(self, request):
    try:
        resp = self._filter(request)
    except HTTPError as e:
        return _service_bus_error_handler(e)

    return resp

[end]



