[class]
TableService
[x-ms-version]
2011-08-18
[class-comment]
This is the main class managing Table resources.
account_name: your storage account name, required for all operations.
account_key: your storage account key, required for all operations.
[init]
account_name
account_key

[method]
get_table_service_properties	
[comment]
Gets the properties of a storage account's Table service, including Windows Azure
Storage Analytics.
[return]
StorageServiceProperties
[url]
GET http://<account-name>.table.core.windows.net/?restype=service&comp=properties  

[method]
set_table_service_properties
[comment]
Sets the properties of a storage account's Table Service, including Windows Azure Storage Analytics.

storage_service_properties: a StorageServiceProperties object.
[return]
dict
[url]
PUT http://<account-name>.table.core.windows.net/?restype=service&comp=properties
[requestbody]
class:storage_service_properties;required

[method]  
query_tables	
[comment]
Returns a list of tables under the specified account.

table_name: optional, the specific table to query
top: the maximum number of tables to return
[return]
(Feed('table'), )
[url]
GET http://<account-name>.table.core.windows.net/Tables<?table_name:('[table_name]')>
[query]
$top=
NextTableName=

[method]  
create_table
[comment]
Creates a new table in the storage account.

table: name of the table to create. Table name may contain only alphanumeric characters
     and cannot begin with a numeric character. It is case-insensitive and must be from 
	 3 to 63 characters long.
fail_on_exist: specify whether throw exception when table exists.
[params]
fail_on_exist=False
[return]
None
[url]
POST http://<account-name>.table.core.windows.net/Tables 
[requestbody]
feed:table;required:feed

[method]  
delete_table
[comment]
table_name: name of the table to delete. 

fail_not_exist: specify whether throw exception when table doesn't exist.
[params]
fail_not_exist=False
[return]
[url]
DELETE http://<account-name>.table.core.windows.net/Tables(\'<table-name>\')

[method]
get_entity
[comment]
Get an entity in a table; includes the $select options. 

partition_key: PartitionKey of the entity.
row_key: RowKey of the entity.
select: the property names to select.
[return]
Feed('entity')
[url]
GET http://<account-name>.table.core.windows.net/<table-name>(PartitionKey=\'<partition-key>\',RowKey=\'<row-key>\')?$select=<select=''>

[method]
query_entities
[comment]
Get entities in a table; includes the $filter and $select options. 

table_name: the table to query
filter: a filter as described at http://msdn.microsoft.com/en-us/library/windowsazure/dd894031.aspx
select: the property names to select from the entities
top: the maximum number of entities to return
[return]
(Feed('entity'), )
[url]
GET http://<account-name>.table.core.windows.net/<table-name>()
[query]
$filter=
$select=
$top=
NextPartitionKey=
NextRowKey=

[method]
insert_entity
[comment]
Inserts a new entity into a table.

entity: Required. The entity object to insert. Could be a dict format or entity object.
[return]
Feed('entity')
[url]
POST http://<account-name>.table.core.windows.net/<table-name>
[requestheader]
Content-Type=application/atom+xml;required:application/atom+xml|#this is required and has to be set to application/atom+xml
[requestbody]
feed:entity;required:feed

[method]
update_entity
[comment]
Updates an existing entity in a table. The Update Entity operation replaces the entire 
entity and can be used to remove properties.

entity: Required. The entity object to insert. Could be a dict format or entity object.
partition_key: PartitionKey of the entity.
row_key: RowKey of the entity.
[return]
dict
filter=['etag']
[url]
PUT http://<account-name>.table.core.windows.net/<table-name>(PartitionKey=\'<partition-key>\',RowKey=\'<row-key>\')
[requestheader]
Content-Type=application/atom+xml;required:application/atom+xml|#this is required and has to be set to application/atom+xml
If-Match=*
[requestbody]
feed:entity;required:feed

[method]
merge_entity
[comment]
Updates an existing entity by updating the entity's properties. This operation does 
not replace the existing entity as the Update Entity operation does.

entity: Required. The entity object to insert. Can be a dict format or entity object.
partition_key: PartitionKey of the entity.
row_key: RowKey of the entity.
[return]
dict
filter=['etag']
[url]
MERGE http://<account-name>.table.core.windows.net/<table-name>(PartitionKey=\'<partition-key>\',RowKey=\'<row-key>\')
[requestheader]
Content-Type=application/atom+xml;required:application/atom+xml|#this is required and has to be set to application/atom+xml
If-Match=*
[requestbody]
feed:entity;required:feed

[method]
delete_entity
[comment]
Deletes an existing entity in a table.

partition_key: PartitionKey of the entity.
row_key: RowKey of the entity.
if_match: Required. Specifies the condition for which the delete should be performed.
		To force an unconditional delete, set If-Match to the wildcard character (*). 
[return]
[url]
DELETE http://<account-name>.table.core.windows.net/<table-name>(PartitionKey=\'<partition-key>\',RowKey=\'<row-key>\')
[requestheader]
Content-Type=application/atom+xml;required:application/atom+xml|#this is required and has to be set to application/atom+xml
If-Match=*;required

[method]
insert_or_replace_entity
[comment]
Replaces an existing entity or inserts a new entity if it does not exist in the table. 
Because this operation can insert or update an entity, it is also known as an "upsert"
operation.

entity: Required. The entity object to insert. Could be a dict format or entity object.
partition_key: PartitionKey of the entity.
row_key: RowKey of the entity.
[return]
dict
filter=['etag']
[url]
PUT http://<account-name>.table.core.windows.net/<table-name>(PartitionKey=\'<partition-key>\',RowKey=\'<row-key>\')
[requestheader]
Content-Type=application/atom+xml;required:application/atom+xml|#this is required and has to be set to application/atom+xml
[requestbody]
feed:entity;required:feed

[method]
insert_or_merge_entity
[comment]
Merges an existing entity or inserts a new entity if it does not exist in the table. 
Because this operation can insert or update an entity, it is also known as an "upsert"
operation.

entity: Required. The entity object to insert. Could be a dict format or entity object.
partition_key: PartitionKey of the entity.
row_key: RowKey of the entity.
[return]
dict
filter=['etag']
[url]
MERGE http://<account-name>.table.core.windows.net/<table-name>(PartitionKey=\'<partition-key>\',RowKey=\'<row-key>\')
[requestheader]
Content-Type=application/atom+xml;required:application/atom+xml|#this is required and has to be set to application/atom+xml
[requestbody]
feed:entity;required:feed

[methods_code]
def _perform_request_worker(self, request):
    auth = _sign_storage_table_request(request, 
                                            self.account_name, 
                                            self.account_key)
    request.headers.append(('Authorization', auth))
    return self._httpclient.perform_request(request)
    
    
[end]
