# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class ErrorContent(Model):
    """ErrorContent.

    The interface represents the content of an error response defined in the
    OneAPI v2.1 documentation.

    All required parameters must be populated in order to send to Azure.

    :param details: An array of details representing distinct related errors
     that occurred during the request
    :type details:
     list[~azure.cognitiveservices.speechservices.models.ErrorDetail]
    :param innererror: The stack trace of the error. The payload is
     service-defined.
     If the error is not at the root level, the object contains a Code
     and an InnerError property
    :type innererror:
     ~azure.cognitiveservices.speechservices.models.InnerError
    :param code: Required. A service-defined error code that should be
     human-readable.
     This code serves as a more specific indicator of the error than
     the HTTP error code specified in the response
    :type code: str
    :param message: Required. A human-readable representation of the error. It
     is intended as
     an aid to developers and is not suitable for exposure to end users
    :type message: str
    :param target: The target of the particular error (e.g., the name of the
     property in error)
    :type target: str
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'details': {'key': 'details', 'type': '[ErrorDetail]'},
        'innererror': {'key': 'innererror', 'type': 'InnerError'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(self, *, code: str, message: str, details=None, innererror=None, target: str=None, **kwargs) -> None:
        super(ErrorContent, self).__init__(**kwargs)
        self.details = details
        self.innererror = innererror
        self.code = code
        self.message = message
        self.target = target
