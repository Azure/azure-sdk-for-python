# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class AccessoryType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Type of an accessory
    """

    HEAD_WEAR = "headWear"
    GLASSES = "glasses"
    MASK = "mask"

class BlurLevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """An enum value indicating level of blurriness.
    """

    LOW = "Low"
    MEDIUM = "Medium"
    HIGH = "High"

class DetectionModel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DETECTION01 = "detection_01"
    DETECTION02 = "detection_02"
    DETECTION03 = "detection_03"

class ExposureLevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """An enum value indicating level of exposure.
    """

    UNDER_EXPOSURE = "UnderExposure"
    GOOD_EXPOSURE = "GoodExposure"
    OVER_EXPOSURE = "OverExposure"

class FaceAttributeType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    AGE = "age"
    GENDER = "gender"
    HEAD_POSE = "headPose"
    SMILE = "smile"
    FACIAL_HAIR = "facialHair"
    GLASSES = "glasses"
    EMOTION = "emotion"
    HAIR = "hair"
    MAKEUP = "makeup"
    OCCLUSION = "occlusion"
    ACCESSORIES = "accessories"
    BLUR = "blur"
    EXPOSURE = "exposure"
    NOISE = "noise"
    MASK = "mask"

class FindSimilarMatchMode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Similar face searching mode. It can be "matchPerson" or "matchFace".
    """

    MATCH_PERSON = "matchPerson"
    MATCH_FACE = "matchFace"

class Gender(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Possible gender of the face.
    """

    MALE = "male"
    FEMALE = "female"

class GlassesType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Glasses type if any of the face.
    """

    NO_GLASSES = "noGlasses"
    READING_GLASSES = "readingGlasses"
    SUNGLASSES = "sunglasses"
    SWIMMING_GOGGLES = "swimmingGoggles"

class HairColorType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Name of the hair color.
    """

    UNKNOWN = "unknown"
    WHITE = "white"
    GRAY = "gray"
    BLOND = "blond"
    BROWN = "brown"
    RED = "red"
    BLACK = "black"
    OTHER = "other"

class MaskType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Mask type if any of the face
    """

    NO_MASK = "noMask"
    FACE_MASK = "faceMask"
    OTHER_MASK_OR_OCCLUSION = "otherMaskOrOcclusion"
    UNCERTAIN = "uncertain"

class NoiseLevel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """An enum value indicating level of noise.
    """

    LOW = "Low"
    MEDIUM = "Medium"
    HIGH = "High"

class OperationStatusType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Operation status: notstarted, running, succeeded, failed. If the operation is requested and
    waiting to perform, the status is notstarted. If the operation is ongoing in backend, the
    status is running. Status succeeded means the operation is completed successfully, specifically
    for snapshot taking operation, it illustrates the snapshot is well taken and ready to apply,
    and for snapshot applying operation, it presents the target object has finished creating by the
    snapshot and ready to be used. Status failed is often caused by editing the source object while
    taking the snapshot or editing the target object while applying the snapshot before completion,
    see the field "message" to check the failure reason.
    """

    NOTSTARTED = "notstarted"
    RUNNING = "running"
    SUCCEEDED = "succeeded"
    FAILED = "failed"

class RecognitionModel(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Name of recognition model. Recognition model is used when the face features are extracted and
    associated with detected faceIds, (Large)FaceList or (Large)PersonGroup. A recognition model
    name can be provided when performing Face - Detect or (Large)FaceList - Create or
    (Large)PersonGroup - Create. The default value is 'recognition_01', if latest model needed,
    please explicitly specify the model you need.
    """

    RECOGNITION01 = "recognition_01"
    RECOGNITION02 = "recognition_02"
    RECOGNITION03 = "recognition_03"
    RECOGNITION04 = "recognition_04"

class SnapshotObjectType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Type of the source object in the snapshot, specified by the subscriber who created the snapshot
    when calling Snapshot - Take. Currently FaceList, PersonGroup, LargeFaceList and
    LargePersonGroup are supported.
    """

    FACE_LIST = "FaceList"
    LARGE_FACE_LIST = "LargeFaceList"
    LARGE_PERSON_GROUP = "LargePersonGroup"
    PERSON_GROUP = "PersonGroup"

class TrainingStatusType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Training status: notstarted, running, succeeded, failed. If the training process is waiting to
    perform, the status is notstarted. If the training is ongoing, the status is running. Status
    succeed means this person group or large person group is ready for Face - Identify, or this
    large face list is ready for Face - Find Similar. Status failed is often caused by no person or
    no persisted face exist in the person group or large person group, or no persisted face exist
    in the large face list.
    """

    NONSTARTED = "nonstarted"
    RUNNING = "running"
    SUCCEEDED = "succeeded"
    FAILED = "failed"
