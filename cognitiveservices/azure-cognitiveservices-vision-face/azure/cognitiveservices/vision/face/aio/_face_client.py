# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, TYPE_CHECKING

from azure.core import AsyncPipelineClient
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential

from ._configuration import FaceClientConfiguration
from .operations import FaceOperations
from .operations import PersonGroupPersonOperations
from .operations import PersonGroupOperations
from .operations import FaceListOperations
from .operations import LargePersonGroupPersonOperations
from .operations import LargePersonGroupOperations
from .operations import LargeFaceListOperations
from .operations import SnapshotOperations
from .. import models


class FaceClient(object):
    """An API for face detection, verification, and identification.

    :ivar face: FaceOperations operations
    :vartype face: azure.cognitiveservices.vision.face.aio.operations.FaceOperations
    :ivar person_group_person: PersonGroupPersonOperations operations
    :vartype person_group_person: azure.cognitiveservices.vision.face.aio.operations.PersonGroupPersonOperations
    :ivar person_group: PersonGroupOperations operations
    :vartype person_group: azure.cognitiveservices.vision.face.aio.operations.PersonGroupOperations
    :ivar face_list: FaceListOperations operations
    :vartype face_list: azure.cognitiveservices.vision.face.aio.operations.FaceListOperations
    :ivar large_person_group_person: LargePersonGroupPersonOperations operations
    :vartype large_person_group_person: azure.cognitiveservices.vision.face.aio.operations.LargePersonGroupPersonOperations
    :ivar large_person_group: LargePersonGroupOperations operations
    :vartype large_person_group: azure.cognitiveservices.vision.face.aio.operations.LargePersonGroupOperations
    :ivar large_face_list: LargeFaceListOperations operations
    :vartype large_face_list: azure.cognitiveservices.vision.face.aio.operations.LargeFaceListOperations
    :ivar snapshot: SnapshotOperations operations
    :vartype snapshot: azure.cognitiveservices.vision.face.aio.operations.SnapshotOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param endpoint: Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com).
    :type endpoint: str
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        endpoint: str,
        **kwargs: Any
    ) -> None:
        base_url = '{Endpoint}/face/v1.0'
        self._config = FaceClientConfiguration(credential, endpoint, **kwargs)
        self._client = AsyncPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)

        self.face = FaceOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.person_group_person = PersonGroupPersonOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.person_group = PersonGroupOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.face_list = FaceListOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.large_person_group_person = LargePersonGroupPersonOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.large_person_group = LargePersonGroupOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.large_face_list = LargeFaceListOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.snapshot = SnapshotOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def _send_request(self, http_request: HttpRequest, **kwargs: Any) -> AsyncHttpResponse:
        """Runs the network request through the client's chained policies.

        :param http_request: The network request you want to make. Required.
        :type http_request: ~azure.core.pipeline.transport.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to True.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.pipeline.transport.AsyncHttpResponse
        """
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        http_request.url = self._client.format_url(http_request.url, **path_format_arguments)
        stream = kwargs.pop("stream", True)
        pipeline_response = await self._client._pipeline.run(http_request, stream=stream, **kwargs)
        return pipeline_response.http_response

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "FaceClient":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
