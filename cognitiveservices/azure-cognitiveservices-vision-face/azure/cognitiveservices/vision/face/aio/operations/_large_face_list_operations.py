# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Generic, IO, List, Optional, TypeVar, Union
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest

from ... import models as _models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class LargeFaceListOperations:
    """LargeFaceListOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.cognitiveservices.vision.face.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    async def create(
        self,
        large_face_list_id: str,
        name: Optional[str] = None,
        user_data: Optional[str] = None,
        recognition_model: Optional[Union[str, "_models.RecognitionModel"]] = None,
        **kwargs
    ) -> None:
        """Create an empty large face list with user-specified largeFaceListId, name, an optional userData
        and recognitionModel.
        :code:`<br />` Large face list is a list of faces, up to 1,000,000 faces, and used by `Face -
        Find Similar <https://docs.microsoft.com/rest/api/faceapi/face/findsimilar>`_.
        :code:`<br />` After creation, user should use `LargeFaceList Face - Add
        <https://docs.microsoft.com/rest/api/faceapi/largefacelist/addfacefromurl>`_ to import the
        faces and `LargeFaceList - Train
        <https://docs.microsoft.com/rest/api/faceapi/largefacelist/train>`_ to make it ready for `Face
        - Find Similar <https://docs.microsoft.com/rest/api/faceapi/face/findsimilar>`_. No image will
        be stored. Only the extracted face features are stored on server until `LargeFaceList - Delete
        <https://docs.microsoft.com/rest/api/faceapi/largefacelist/delete>`_ is called.
        :code:`<br />` Find Similar is used for scenario like finding celebrity-like faces, similar
        face filtering, or as a light way face identification. But if the actual use is to identify
        person, please use `PersonGroup <https://docs.microsoft.com/rest/api/faceapi/persongroup>`_ /
        `LargePersonGroup <https://docs.microsoft.com/rest/api/faceapi/largepersongroup>`_ and `Face -
        Identify <https://docs.microsoft.com/rest/api/faceapi/face/identify>`_.
        :code:`<br/>`'recognitionModel' should be specified to associate with this large face list. The
        default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please
        explicitly specify the model you need in this parameter. New faces that are added to an
        existing large face list will use the recognition model that's already associated with the
        collection. Existing face features in a large face list can't be updated to features extracted
        by another version of recognition model. Please refer to `Specify a recognition model
        <https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-
        recognition-model>`_.

        Large face list quota:


        * Free-tier subscription quota: 64 large face lists.
        * S0-tier subscription quota: 1,000,000 large face lists.

        :param large_face_list_id: Id referencing a particular large face list.
        :type large_face_list_id: str
        :param name: User defined name, maximum length is 128.
        :type name: str
        :param user_data: User specified data. Length should not exceed 16KB.
        :type user_data: str
        :param recognition_model: Name of recognition model. Recognition model is used when the face
         features are extracted and associated with detected faceIds, (Large)FaceList or
         (Large)PersonGroup. A recognition model name can be provided when performing Face - Detect or
         (Large)FaceList - Create or (Large)PersonGroup - Create. The default value is 'recognition_01',
         if latest model needed, please explicitly specify the model you need.
        :type recognition_model: str or ~azure.cognitiveservices.vision.face.models.RecognitionModel
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        _body = _models.MetaDataContract(name=name, user_data=user_data, recognition_model=recognition_model)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create.metadata['url']  # type: ignore
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'largeFaceListId': self._serialize.url("large_face_list_id", large_face_list_id, 'str', max_length=64, min_length=0, pattern=r'^[a-z0-9-_]+$'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MetaDataContract')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.APIError, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    create.metadata = {'url': '/largefacelists/{largeFaceListId}'}  # type: ignore

    async def get(
        self,
        large_face_list_id: str,
        return_recognition_model: Optional[bool] = False,
        **kwargs
    ) -> "_models.LargeFaceList":
        """Retrieve a large face listâ€™s largeFaceListId, name, userData and recognitionModel.

        :param large_face_list_id: Id referencing a particular large face list.
        :type large_face_list_id: str
        :param return_recognition_model: A value indicating whether the operation should return
         'recognitionModel' in response.
        :type return_recognition_model: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: LargeFaceList, or the result of cls(response)
        :rtype: ~azure.cognitiveservices.vision.face.models.LargeFaceList
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.LargeFaceList"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get.metadata['url']  # type: ignore
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'largeFaceListId': self._serialize.url("large_face_list_id", large_face_list_id, 'str', max_length=64, min_length=0, pattern=r'^[a-z0-9-_]+$'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if return_recognition_model is not None:
            query_parameters['returnRecognitionModel'] = self._serialize.query("return_recognition_model", return_recognition_model, 'bool')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.APIError, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('LargeFaceList', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get.metadata = {'url': '/largefacelists/{largeFaceListId}'}  # type: ignore

    async def update(
        self,
        large_face_list_id: str,
        name: Optional[str] = None,
        user_data: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update information of a large face list.

        :param large_face_list_id: Id referencing a particular large face list.
        :type large_face_list_id: str
        :param name: User defined name, maximum length is 128.
        :type name: str
        :param user_data: User specified data. Length should not exceed 16KB.
        :type user_data: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        _body = _models.NameAndUserDataContract(name=name, user_data=user_data)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update.metadata['url']  # type: ignore
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'largeFaceListId': self._serialize.url("large_face_list_id", large_face_list_id, 'str', max_length=64, min_length=0, pattern=r'^[a-z0-9-_]+$'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'NameAndUserDataContract')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.APIError, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update.metadata = {'url': '/largefacelists/{largeFaceListId}'}  # type: ignore

    async def delete(
        self,
        large_face_list_id: str,
        **kwargs
    ) -> None:
        """Delete a specified large face list.

        :param large_face_list_id: Id referencing a particular large face list.
        :type large_face_list_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete.metadata['url']  # type: ignore
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'largeFaceListId': self._serialize.url("large_face_list_id", large_face_list_id, 'str', max_length=64, min_length=0, pattern=r'^[a-z0-9-_]+$'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.APIError, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {'url': '/largefacelists/{largeFaceListId}'}  # type: ignore

    async def get_training_status(
        self,
        large_face_list_id: str,
        **kwargs
    ) -> "_models.TrainingStatus":
        """Retrieve the training status of a large face list (completed or ongoing).

        :param large_face_list_id: Id referencing a particular large face list.
        :type large_face_list_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: TrainingStatus, or the result of cls(response)
        :rtype: ~azure.cognitiveservices.vision.face.models.TrainingStatus
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.TrainingStatus"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_training_status.metadata['url']  # type: ignore
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'largeFaceListId': self._serialize.url("large_face_list_id", large_face_list_id, 'str', max_length=64, min_length=0, pattern=r'^[a-z0-9-_]+$'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.APIError, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('TrainingStatus', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_training_status.metadata = {'url': '/largefacelists/{largeFaceListId}/training'}  # type: ignore

    async def list(
        self,
        return_recognition_model: Optional[bool] = False,
        **kwargs
    ) -> List["_models.LargeFaceList"]:
        """List large face listsâ€™ information of largeFaceListId, name, userData and recognitionModel.
        :code:`<br />`
        To get face information inside largeFaceList use `LargeFaceList Face - Get
        <https://docs.microsoft.com/rest/api/faceapi/largefacelist/getface>`_\ :code:`<br />`


        * Large face lists are stored in alphabetical order of largeFaceListId.
        * "start" parameter (string, optional) is a user-provided largeFaceListId value that returned
        entries have larger ids by string comparison. "start" set to empty to indicate return from the
        first item.
        * "top" parameter (int, optional) specifies the number of entries to return. A maximal of 1000
        entries can be returned in one call. To fetch more, you can specify "start" with the last
        returned entryâ€™s Id of the current call.
          :code:`<br />`
          For example, total 5 large person lists: "list1", ..., "list5".
          :code:`<br />` "start=&top=" will return all 5 lists.
          :code:`<br />` "start=&top=2" will return "list1", "list2".
          :code:`<br />` "start=list2&top=3" will return "list3", "list4", "list5".

        :param return_recognition_model: A value indicating whether the operation should return
         'recognitionModel' in response.
        :type return_recognition_model: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of LargeFaceList, or the result of cls(response)
        :rtype: list[~azure.cognitiveservices.vision.face.models.LargeFaceList]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["_models.LargeFaceList"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.list.metadata['url']  # type: ignore
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if return_recognition_model is not None:
            query_parameters['returnRecognitionModel'] = self._serialize.query("return_recognition_model", return_recognition_model, 'bool')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.APIError, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('[LargeFaceList]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    list.metadata = {'url': '/largefacelists'}  # type: ignore

    async def train(
        self,
        large_face_list_id: str,
        **kwargs
    ) -> None:
        """Queue a large face list training task, the training task may not be started immediately.

        :param large_face_list_id: Id referencing a particular large face list.
        :type large_face_list_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.train.metadata['url']  # type: ignore
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'largeFaceListId': self._serialize.url("large_face_list_id", large_face_list_id, 'str', max_length=64, min_length=0, pattern=r'^[a-z0-9-_]+$'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.post(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.APIError, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    train.metadata = {'url': '/largefacelists/{largeFaceListId}/train'}  # type: ignore

    async def delete_face(
        self,
        large_face_list_id: str,
        persisted_face_id: str,
        **kwargs
    ) -> None:
        """Delete a face from a large face list by specified largeFaceListId and persistedFaceId.
        :code:`<br />` Adding/deleting faces to/from a same large face list are processed sequentially
        and to/from different large face lists are in parallel.

        :param large_face_list_id: Id referencing a particular large face list.
        :type large_face_list_id: str
        :param persisted_face_id: Id referencing a particular persistedFaceId of an existing face.
        :type persisted_face_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_face.metadata['url']  # type: ignore
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'largeFaceListId': self._serialize.url("large_face_list_id", large_face_list_id, 'str', max_length=64, min_length=0, pattern=r'^[a-z0-9-_]+$'),
            'persistedFaceId': self._serialize.url("persisted_face_id", persisted_face_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.APIError, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_face.metadata = {'url': '/largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}'}  # type: ignore

    async def get_face(
        self,
        large_face_list_id: str,
        persisted_face_id: str,
        **kwargs
    ) -> "_models.PersistedFace":
        """Retrieve information about a persisted face (specified by persistedFaceId and its belonging
        largeFaceListId).

        :param large_face_list_id: Id referencing a particular large face list.
        :type large_face_list_id: str
        :param persisted_face_id: Id referencing a particular persistedFaceId of an existing face.
        :type persisted_face_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: PersistedFace, or the result of cls(response)
        :rtype: ~azure.cognitiveservices.vision.face.models.PersistedFace
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.PersistedFace"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get_face.metadata['url']  # type: ignore
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'largeFaceListId': self._serialize.url("large_face_list_id", large_face_list_id, 'str', max_length=64, min_length=0, pattern=r'^[a-z0-9-_]+$'),
            'persistedFaceId': self._serialize.url("persisted_face_id", persisted_face_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.APIError, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('PersistedFace', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_face.metadata = {'url': '/largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}'}  # type: ignore

    async def update_face(
        self,
        large_face_list_id: str,
        persisted_face_id: str,
        user_data: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update a persisted face's userData field.

        :param large_face_list_id: Id referencing a particular large face list.
        :type large_face_list_id: str
        :param persisted_face_id: Id referencing a particular persistedFaceId of an existing face.
        :type persisted_face_id: str
        :param user_data: User-provided data attached to the face. The size limit is 1KB.
        :type user_data: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        _body = _models.UpdateFaceRequest(user_data=user_data)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update_face.metadata['url']  # type: ignore
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'largeFaceListId': self._serialize.url("large_face_list_id", large_face_list_id, 'str', max_length=64, min_length=0, pattern=r'^[a-z0-9-_]+$'),
            'persistedFaceId': self._serialize.url("persisted_face_id", persisted_face_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'UpdateFaceRequest')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.APIError, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update_face.metadata = {'url': '/largefacelists/{largeFaceListId}/persistedfaces/{persistedFaceId}'}  # type: ignore

    async def add_face_from_url(
        self,
        large_face_list_id: str,
        url: str,
        user_data: Optional[str] = None,
        target_face: Optional[List[int]] = None,
        detection_model: Optional[Union[str, "_models.DetectionModel"]] = "detection_01",
        **kwargs
    ) -> "_models.PersistedFace":
        """Add a face to a specified large face list, up to 1,000,000 faces.
        :code:`<br />` To deal with an image contains multiple faces, input face can be specified as an
        image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No
        image will be stored. Only the extracted face feature will be stored on server until
        `LargeFaceList Face - Delete
        <https://docs.microsoft.com/rest/api/faceapi/largefacelist/deleteface>`_ or `LargeFaceList -
        Delete <https://docs.microsoft.com/rest/api/faceapi/largefacelist/delete>`_ is called.
        :code:`<br />` Note persistedFaceId is different from faceId generated by `Face - Detect
        <https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl>`_.


        * Higher face image quality means better recognition precision. Please consider high-quality
        faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
        * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size
        is from 1KB to 6MB.
        * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an
        error. If the provided "targetFace" rectangle is not returned from `Face - Detect
        <https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl>`_\ , thereâ€™s no guarantee to
        detect and add the face successfully.
        * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions
        will cause failures.
        * Adding/deleting faces to/from a same face list are processed sequentially and to/from
        different face lists are in parallel.
        * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels.
        Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum
        face size.
        * Different 'detectionModel' values can be provided. To use and compare different detection
        models, please refer to `How to specify a detection model
        <https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-
        detection-model>`_

        Quota:


        * Free-tier subscription quota: 1,000 faces per large face list.
        * S0-tier subscription quota: 1,000,000 faces per large face list.

        :param large_face_list_id: Id referencing a particular large face list.
        :type large_face_list_id: str
        :param url: Publicly reachable URL of an image.
        :type url: str
        :param user_data: User-specified data about the face for any purpose. The maximum length is
         1KB.
        :type user_data: str
        :param target_face: A face rectangle to specify the target face to be added to a person in the
         format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more
         than one face in the image, targetFace is required to specify which face to add. No targetFace
         means there is only one face detected in the entire image.
        :type target_face: list[int]
        :param detection_model: Name of detection model. Detection model is used to detect faces in the
         submitted image. A detection model name can be provided when performing Face - Detect or
         (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is
         'detection_01', if another model is needed, please explicitly specify it.
        :type detection_model: str or ~azure.cognitiveservices.vision.face.models.DetectionModel
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: PersistedFace, or the result of cls(response)
        :rtype: ~azure.cognitiveservices.vision.face.models.PersistedFace
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.PersistedFace"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        _image_url = _models.ImageUrl(url=url)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.add_face_from_url.metadata['url']  # type: ignore
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'largeFaceListId': self._serialize.url("large_face_list_id", large_face_list_id, 'str', max_length=64, min_length=0, pattern=r'^[a-z0-9-_]+$'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if user_data is not None:
            query_parameters['userData'] = self._serialize.query("user_data", user_data, 'str', max_length=1024, min_length=0)
        if target_face is not None:
            query_parameters['targetFace'] = self._serialize.query("target_face", target_face, '[int]', div=',')
        if detection_model is not None:
            query_parameters['detectionModel'] = self._serialize.query("detection_model", detection_model, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_image_url, 'ImageUrl')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.APIError, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('PersistedFace', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    add_face_from_url.metadata = {'url': '/largefacelists/{largeFaceListId}/persistedfaces'}  # type: ignore

    async def list_faces(
        self,
        large_face_list_id: str,
        start: Optional[str] = None,
        top: Optional[int] = None,
        **kwargs
    ) -> List["_models.PersistedFace"]:
        """List all faces in a large face list, and retrieve face information (including userData and
        persistedFaceIds of registered faces of the face).

        :param large_face_list_id: Id referencing a particular large face list.
        :type large_face_list_id: str
        :param start: Starting face id to return (used to list a range of faces).
        :type start: str
        :param top: Number of faces to return starting with the face id indicated by the 'start'
         parameter.
        :type top: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of PersistedFace, or the result of cls(response)
        :rtype: list[~azure.cognitiveservices.vision.face.models.PersistedFace]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["_models.PersistedFace"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.list_faces.metadata['url']  # type: ignore
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'largeFaceListId': self._serialize.url("large_face_list_id", large_face_list_id, 'str', max_length=64, min_length=0, pattern=r'^[a-z0-9-_]+$'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if start is not None:
            query_parameters['start'] = self._serialize.query("start", start, 'str')
        if top is not None:
            query_parameters['top'] = self._serialize.query("top", top, 'int', maximum=1000, minimum=1)

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.APIError, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('[PersistedFace]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    list_faces.metadata = {'url': '/largefacelists/{largeFaceListId}/persistedfaces'}  # type: ignore

    async def add_face_from_stream(
        self,
        large_face_list_id: str,
        image: IO,
        user_data: Optional[str] = None,
        target_face: Optional[List[int]] = None,
        detection_model: Optional[Union[str, "_models.DetectionModel"]] = "detection_01",
        **kwargs
    ) -> "_models.PersistedFace":
        """Add a face to a specified large face list, up to 1,000,000 faces.
        :code:`<br />` To deal with an image contains multiple faces, input face can be specified as an
        image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No
        image will be stored. Only the extracted face feature will be stored on server until
        `LargeFaceList Face - Delete
        <https://docs.microsoft.com/rest/api/faceapi/largefacelist/deleteface>`_ or `LargeFaceList -
        Delete <https://docs.microsoft.com/rest/api/faceapi/largefacelist/delete>`_ is called.
        :code:`<br />` Note persistedFaceId is different from faceId generated by `Face - Detect
        <https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl>`_.


        * Higher face image quality means better recognition precision. Please consider high-quality
        faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes) or bigger.
        * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size
        is from 1KB to 6MB.
        * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an
        error. If the provided "targetFace" rectangle is not returned from `Face - Detect
        <https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl>`_\ , thereâ€™s no guarantee to
        detect and add the face successfully.
        * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions
        will cause failures.
        * Adding/deleting faces to/from a same face list are processed sequentially and to/from
        different face lists are in parallel.
        * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels.
        Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum
        face size.
        * Different 'detectionModel' values can be provided. To use and compare different detection
        models, please refer to `How to specify a detection model
        <https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-
        detection-model>`_.

        Quota:


        * Free-tier subscription quota: 1,000 faces per large face list.
        * S0-tier subscription quota: 1,000,000 faces per large face list.

        :param large_face_list_id: Id referencing a particular large face list.
        :type large_face_list_id: str
        :param image: An image stream.
        :type image: IO
        :param user_data: User-specified data about the face for any purpose. The maximum length is
         1KB.
        :type user_data: str
        :param target_face: A face rectangle to specify the target face to be added to a person in the
         format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more
         than one face in the image, targetFace is required to specify which face to add. No targetFace
         means there is only one face detected in the entire image.
        :type target_face: list[int]
        :param detection_model: Name of detection model. Detection model is used to detect faces in the
         submitted image. A detection model name can be provided when performing Face - Detect or
         (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is
         'detection_01', if another model is needed, please explicitly specify it.
        :type detection_model: str or ~azure.cognitiveservices.vision.face.models.DetectionModel
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: PersistedFace, or the result of cls(response)
        :rtype: ~azure.cognitiveservices.vision.face.models.PersistedFace
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.PersistedFace"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/octet-stream")
        accept = "application/json"

        # Construct URL
        url = self.add_face_from_stream.metadata['url']  # type: ignore
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'largeFaceListId': self._serialize.url("large_face_list_id", large_face_list_id, 'str', max_length=64, min_length=0, pattern=r'^[a-z0-9-_]+$'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if user_data is not None:
            query_parameters['userData'] = self._serialize.query("user_data", user_data, 'str', max_length=1024, min_length=0)
        if target_face is not None:
            query_parameters['targetFace'] = self._serialize.query("target_face", target_face, '[int]', div=',')
        if detection_model is not None:
            query_parameters['detectionModel'] = self._serialize.query("detection_model", detection_model, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content_kwargs['stream_content'] = image
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.APIError, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('PersistedFace', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    add_face_from_stream.metadata = {'url': '/largefacelists/{largeFaceListId}/persistedfaces'}  # type: ignore
