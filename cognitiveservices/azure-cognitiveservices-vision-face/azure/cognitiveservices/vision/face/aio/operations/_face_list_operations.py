# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Generic, IO, List, Optional, TypeVar, Union
import warnings

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest

from ... import models as _models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class FaceListOperations:
    """FaceListOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.cognitiveservices.vision.face.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    async def create(
        self,
        face_list_id: str,
        name: Optional[str] = None,
        user_data: Optional[str] = None,
        recognition_model: Optional[Union[str, "_models.RecognitionModel"]] = None,
        **kwargs
    ) -> None:
        """Create an empty face list with user-specified faceListId, name, an optional userData and
        recognitionModel. Up to 64 face lists are allowed in one subscription.
        :code:`<br />` Face list is a list of faces, up to 1,000 faces, and used by `Face - Find
        Similar <https://docs.microsoft.com/rest/api/faceapi/face/findsimilar>`_.
        :code:`<br />` After creation, user should use `FaceList - Add Face
        <https://docs.microsoft.com/rest/api/faceapi/facelist/addfacefromurl>`_ to import the faces. No
        image will be stored. Only the extracted face features are stored on server until `FaceList -
        Delete <https://docs.microsoft.com/rest/api/faceapi/facelist/delete>`_ is called.
        :code:`<br />` Find Similar is used for scenario like finding celebrity-like faces, similar
        face filtering, or as a light way face identification. But if the actual use is to identify
        person, please use `PersonGroup <https://docs.microsoft.com/rest/api/faceapi/persongroup>`_ /
        `LargePersonGroup <https://docs.microsoft.com/rest/api/faceapi/largepersongroup>`_ and `Face -
        Identify <https://docs.microsoft.com/rest/api/faceapi/face/identify>`_.
        :code:`<br />` Please consider `LargeFaceList
        <https://docs.microsoft.com/rest/api/faceapi/largefacelist>`_ when the face number is large. It
        can support up to 1,000,000 faces.
        :code:`<br />`'recognitionModel' should be specified to associate with this face list. The
        default value for 'recognitionModel' is 'recognition_01', if the latest model needed, please
        explicitly specify the model you need in this parameter. New faces that are added to an
        existing face list will use the recognition model that's already associated with the
        collection. Existing face features in a face list can't be updated to features extracted by
        another version of recognition model.
        Please Refer to `Specify a face recognition model <https://docs.microsoft.com/azure/cognitive-
        services/face/face-api-how-to-topics/specify-recognition-model>`_.

        :param face_list_id: Id referencing a particular face list.
        :type face_list_id: str
        :param name: User defined name, maximum length is 128.
        :type name: str
        :param user_data: User specified data. Length should not exceed 16KB.
        :type user_data: str
        :param recognition_model: Name of recognition model. Recognition model is used when the face
         features are extracted and associated with detected faceIds, (Large)FaceList or
         (Large)PersonGroup. A recognition model name can be provided when performing Face - Detect or
         (Large)FaceList - Create or (Large)PersonGroup - Create. The default value is 'recognition_01',
         if latest model needed, please explicitly specify the model you need.
        :type recognition_model: str or ~azure.cognitiveservices.vision.face.models.RecognitionModel
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        _body = _models.MetaDataContract(name=name, user_data=user_data, recognition_model=recognition_model)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create.metadata['url']  # type: ignore
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'faceListId': self._serialize.url("face_list_id", face_list_id, 'str', max_length=64, min_length=0, pattern=r'^[a-z0-9-_]+$'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'MetaDataContract')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.APIError, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    create.metadata = {'url': '/facelists/{faceListId}'}  # type: ignore

    async def get(
        self,
        face_list_id: str,
        return_recognition_model: Optional[bool] = False,
        **kwargs
    ) -> "_models.FaceList":
        """Retrieve a face listâ€™s faceListId, name, userData, recognitionModel and faces in the face list.

        :param face_list_id: Id referencing a particular face list.
        :type face_list_id: str
        :param return_recognition_model: A value indicating whether the operation should return
         'recognitionModel' in response.
        :type return_recognition_model: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: FaceList, or the result of cls(response)
        :rtype: ~azure.cognitiveservices.vision.face.models.FaceList
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.FaceList"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.get.metadata['url']  # type: ignore
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'faceListId': self._serialize.url("face_list_id", face_list_id, 'str', max_length=64, min_length=0, pattern=r'^[a-z0-9-_]+$'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if return_recognition_model is not None:
            query_parameters['returnRecognitionModel'] = self._serialize.query("return_recognition_model", return_recognition_model, 'bool')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.APIError, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('FaceList', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get.metadata = {'url': '/facelists/{faceListId}'}  # type: ignore

    async def update(
        self,
        face_list_id: str,
        name: Optional[str] = None,
        user_data: Optional[str] = None,
        **kwargs
    ) -> None:
        """Update information of a face list.

        :param face_list_id: Id referencing a particular face list.
        :type face_list_id: str
        :param name: User defined name, maximum length is 128.
        :type name: str
        :param user_data: User specified data. Length should not exceed 16KB.
        :type user_data: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        _body = _models.NameAndUserDataContract(name=name, user_data=user_data)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.update.metadata['url']  # type: ignore
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'faceListId': self._serialize.url("face_list_id", face_list_id, 'str', max_length=64, min_length=0, pattern=r'^[a-z0-9-_]+$'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_body, 'NameAndUserDataContract')
        body_content_kwargs['content'] = body_content
        request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.APIError, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    update.metadata = {'url': '/facelists/{faceListId}'}  # type: ignore

    async def delete(
        self,
        face_list_id: str,
        **kwargs
    ) -> None:
        """Delete a specified face list.

        :param face_list_id: Id referencing a particular face list.
        :type face_list_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete.metadata['url']  # type: ignore
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'faceListId': self._serialize.url("face_list_id", face_list_id, 'str', max_length=64, min_length=0, pattern=r'^[a-z0-9-_]+$'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.APIError, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {'url': '/facelists/{faceListId}'}  # type: ignore

    async def list(
        self,
        return_recognition_model: Optional[bool] = False,
        **kwargs
    ) -> List["_models.FaceList"]:
        """List face listsâ€™ faceListId, name, userData and recognitionModel. :code:`<br />`
        To get face information inside faceList use `FaceList - Get
        <https://docs.microsoft.com/rest/api/faceapi/facelist/get>`_.

        :param return_recognition_model: A value indicating whether the operation should return
         'recognitionModel' in response.
        :type return_recognition_model: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of FaceList, or the result of cls(response)
        :rtype: list[~azure.cognitiveservices.vision.face.models.FaceList]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["_models.FaceList"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.list.metadata['url']  # type: ignore
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if return_recognition_model is not None:
            query_parameters['returnRecognitionModel'] = self._serialize.query("return_recognition_model", return_recognition_model, 'bool')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.APIError, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('[FaceList]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    list.metadata = {'url': '/facelists'}  # type: ignore

    async def delete_face(
        self,
        face_list_id: str,
        persisted_face_id: str,
        **kwargs
    ) -> None:
        """Delete a face from a face list by specified faceListId and persistedFaceId.
        :code:`<br />` Adding/deleting faces to/from a same face list are processed sequentially and
        to/from different face lists are in parallel.

        :param face_list_id: Id referencing a particular face list.
        :type face_list_id: str
        :param persisted_face_id: Id referencing a particular persistedFaceId of an existing face.
        :type persisted_face_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        accept = "application/json"

        # Construct URL
        url = self.delete_face.metadata['url']  # type: ignore
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'faceListId': self._serialize.url("face_list_id", face_list_id, 'str', max_length=64, min_length=0, pattern=r'^[a-z0-9-_]+$'),
            'persistedFaceId': self._serialize.url("persisted_face_id", persisted_face_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.APIError, response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    delete_face.metadata = {'url': '/facelists/{faceListId}/persistedfaces/{persistedFaceId}'}  # type: ignore

    async def add_face_from_url(
        self,
        face_list_id: str,
        url: str,
        user_data: Optional[str] = None,
        target_face: Optional[List[int]] = None,
        detection_model: Optional[Union[str, "_models.DetectionModel"]] = "detection_01",
        **kwargs
    ) -> "_models.PersistedFace":
        """Add a face to a specified face list, up to 1,000 faces.
        :code:`<br />` To deal with an image contains multiple faces, input face can be specified as an
        image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No
        image will be stored. Only the extracted face feature will be stored on server until `FaceList
        - Delete Face <https://docs.microsoft.com/rest/api/faceapi/facelist/deleteface>`_ or `FaceList
        - Delete <https://docs.microsoft.com/rest/api/faceapi/facelist/delete>`_ is called.
        :code:`<br />` Note persistedFaceId is different from faceId generated by `Face - Detect
        <https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl>`_.


        * Higher face image quality means better detection and recognition precision. Please consider
        high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes)
        or bigger.
        * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size
        is from 1KB to 6MB.
        * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an
        error. If the provided "targetFace" rectangle is not returned from `Face - Detect
        <https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl>`_\ , thereâ€™s no guarantee to
        detect and add the face successfully.
        * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions
        will cause failures.
        * Adding/deleting faces to/from a same face list are processed sequentially and to/from
        different face lists are in parallel.
        * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels.
        Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum
        face size.
        * Different 'detectionModel' values can be provided. To use and compare different detection
        models, please refer to `How to specify a detection model
        <https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-
        detection-model>`_.

        :param face_list_id: Id referencing a particular face list.
        :type face_list_id: str
        :param url: Publicly reachable URL of an image.
        :type url: str
        :param user_data: User-specified data about the face for any purpose. The maximum length is
         1KB.
        :type user_data: str
        :param target_face: A face rectangle to specify the target face to be added to a person in the
         format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more
         than one face in the image, targetFace is required to specify which face to add. No targetFace
         means there is only one face detected in the entire image.
        :type target_face: list[int]
        :param detection_model: Name of detection model. Detection model is used to detect faces in the
         submitted image. A detection model name can be provided when performing Face - Detect or
         (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is
         'detection_01', if another model is needed, please explicitly specify it.
        :type detection_model: str or ~azure.cognitiveservices.vision.face.models.DetectionModel
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: PersistedFace, or the result of cls(response)
        :rtype: ~azure.cognitiveservices.vision.face.models.PersistedFace
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.PersistedFace"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        _image_url = _models.ImageUrl(url=url)
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.add_face_from_url.metadata['url']  # type: ignore
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'faceListId': self._serialize.url("face_list_id", face_list_id, 'str', max_length=64, min_length=0, pattern=r'^[a-z0-9-_]+$'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if user_data is not None:
            query_parameters['userData'] = self._serialize.query("user_data", user_data, 'str', max_length=1024, min_length=0)
        if target_face is not None:
            query_parameters['targetFace'] = self._serialize.query("target_face", target_face, '[int]', div=',')
        if detection_model is not None:
            query_parameters['detectionModel'] = self._serialize.query("detection_model", detection_model, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_image_url, 'ImageUrl')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.APIError, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('PersistedFace', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    add_face_from_url.metadata = {'url': '/facelists/{faceListId}/persistedfaces'}  # type: ignore

    async def add_face_from_stream(
        self,
        face_list_id: str,
        image: IO,
        user_data: Optional[str] = None,
        target_face: Optional[List[int]] = None,
        detection_model: Optional[Union[str, "_models.DetectionModel"]] = "detection_01",
        **kwargs
    ) -> "_models.PersistedFace":
        """Add a face to a specified face list, up to 1,000 faces.
        :code:`<br />` To deal with an image contains multiple faces, input face can be specified as an
        image with a targetFace rectangle. It returns a persistedFaceId representing the added face. No
        image will be stored. Only the extracted face feature will be stored on server until `FaceList
        - Delete Face <https://docs.microsoft.com/rest/api/faceapi/facelist/deleteface>`_ or `FaceList
        - Delete <https://docs.microsoft.com/rest/api/faceapi/facelist/delete>`_ is called.
        :code:`<br />` Note persistedFaceId is different from faceId generated by `Face - Detect
        <https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl>`_.


        * Higher face image quality means better detection and recognition precision. Please consider
        high-quality faces: frontal, clear, and face size is 200x200 pixels (100 pixels between eyes)
        or bigger.
        * JPEG, PNG, GIF (the first frame), and BMP format are supported. The allowed image file size
        is from 1KB to 6MB.
        * "targetFace" rectangle should contain one face. Zero or multiple faces will be regarded as an
        error. If the provided "targetFace" rectangle is not returned from `Face - Detect
        <https://docs.microsoft.com/rest/api/faceapi/face/detectwithurl>`_\ , thereâ€™s no guarantee to
        detect and add the face successfully.
        * Out of detectable face size (36x36 - 4096x4096 pixels), large head-pose, or large occlusions
        will cause failures.
        * Adding/deleting faces to/from a same face list are processed sequentially and to/from
        different face lists are in parallel.
        * The minimum detectable face size is 36x36 pixels in an image no larger than 1920x1080 pixels.
        Images with dimensions higher than 1920x1080 pixels will need a proportionally larger minimum
        face size.
        * Different 'detectionModel' values can be provided. To use and compare different detection
        models, please refer to `How to specify a detection model
        <https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-
        detection-model>`_.

        :param face_list_id: Id referencing a particular face list.
        :type face_list_id: str
        :param image: An image stream.
        :type image: IO
        :param user_data: User-specified data about the face for any purpose. The maximum length is
         1KB.
        :type user_data: str
        :param target_face: A face rectangle to specify the target face to be added to a person in the
         format of "targetFace=left,top,width,height". E.g. "targetFace=10,10,100,100". If there is more
         than one face in the image, targetFace is required to specify which face to add. No targetFace
         means there is only one face detected in the entire image.
        :type target_face: list[int]
        :param detection_model: Name of detection model. Detection model is used to detect faces in the
         submitted image. A detection model name can be provided when performing Face - Detect or
         (Large)FaceList - Add Face or (Large)PersonGroup - Add Face. The default value is
         'detection_01', if another model is needed, please explicitly specify it.
        :type detection_model: str or ~azure.cognitiveservices.vision.face.models.DetectionModel
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: PersistedFace, or the result of cls(response)
        :rtype: ~azure.cognitiveservices.vision.face.models.PersistedFace
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.PersistedFace"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        content_type = kwargs.pop("content_type", "application/octet-stream")
        accept = "application/json"

        # Construct URL
        url = self.add_face_from_stream.metadata['url']  # type: ignore
        path_format_arguments = {
            'Endpoint': self._serialize.url("self._config.endpoint", self._config.endpoint, 'str', skip_quote=True),
            'faceListId': self._serialize.url("face_list_id", face_list_id, 'str', max_length=64, min_length=0, pattern=r'^[a-z0-9-_]+$'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if user_data is not None:
            query_parameters['userData'] = self._serialize.query("user_data", user_data, 'str', max_length=1024, min_length=0)
        if target_face is not None:
            query_parameters['targetFace'] = self._serialize.query("target_face", target_face, '[int]', div=',')
        if detection_model is not None:
            query_parameters['detectionModel'] = self._serialize.query("detection_model", detection_model, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content_kwargs['stream_content'] = image
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.APIError, response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('PersistedFace', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    add_face_from_stream.metadata = {'url': '/facelists/{faceListId}/persistedfaces'}  # type: ignore
