# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .proxy_resource_py3 import ProxyResource


class AttachedDatabaseConfiguration(ProxyResource):
    """Class representing an attached database configuration.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param database_name: Required. The name of the database which you would
     like to attach, use * if you want to follow all current and future
     databases.
    :type database_name: str
    :param cluster_resource_id: Required. The resource id of the cluster where
     the databases you would like to attach reside.
    :type cluster_resource_id: str
    :ivar attached_database_names: The list of databases from the
     clusterResourceId which are currently attached to the cluster.
    :vartype attached_database_names: list[str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'database_name': {'required': True},
        'cluster_resource_id': {'required': True},
        'attached_database_names': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'database_name': {'key': 'properties.databaseName', 'type': 'str'},
        'cluster_resource_id': {'key': 'properties.clusterResourceId', 'type': 'str'},
        'attached_database_names': {'key': 'properties.AttachedDatabaseNames', 'type': '[str]'},
    }

    def __init__(self, *, database_name: str, cluster_resource_id: str, location: str=None, **kwargs) -> None:
        super(AttachedDatabaseConfiguration, self).__init__(**kwargs)
        self.location = location
        self.database_name = database_name
        self.cluster_resource_id = cluster_resource_id
        self.attached_database_names = None
