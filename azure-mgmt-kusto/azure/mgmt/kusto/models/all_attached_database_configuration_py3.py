# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .attached_database_configuration_py3 import AttachedDatabaseConfiguration


class AllAttachedDatabaseConfiguration(AttachedDatabaseConfiguration):
    """Class representing an attached database configuration for a all attached
    database kind.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param location: Resource location.
    :type location: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar database_names: The list of current databases that are attached.
    :vartype database_names: list[str]
    :param cluster_resource_id: Required. The resource id of the cluster where
     the databases you would like to attach reside.
    :type cluster_resource_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'database_names': {'readonly': True},
        'cluster_resource_id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'database_names': {'key': 'properties.databaseNames', 'type': '[str]'},
        'cluster_resource_id': {'key': 'properties.clusterResourceId', 'type': 'str'},
    }

    def __init__(self, *, cluster_resource_id: str, location: str=None, **kwargs) -> None:
        super(AllAttachedDatabaseConfiguration, self).__init__(location=location, **kwargs)
        self.database_names = None
        self.cluster_resource_id = cluster_resource_id
        self.kind = 'All'
