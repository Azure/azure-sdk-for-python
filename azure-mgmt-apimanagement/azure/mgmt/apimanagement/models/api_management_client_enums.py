# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from enum import Enum


class PolicyContentFormat(str, Enum):

    xml = "xml"
    xml_link = "xml-link"


class Protocol(str, Enum):

    http = "http"
    https = "https"


class ContentFormat(str, Enum):

    wadl_xml = "wadl-xml"
    wadl_link_json = "wadl-link-json"
    swagger_json = "swagger-json"
    swagger_link_json = "swagger-link-json"
    wsdl = "wsdl"
    wsdl_link = "wsdl-link"


class SoapApiType(str, Enum):

    http = "http"
    soap = "soap"


class ApiType(str, Enum):

    http = "http"
    soap = "soap"


class LoggerType(str, Enum):

    azure_event_hub = "azureEventHub"
    application_insights = "applicationInsights"


class ProductState(str, Enum):

    not_published = "notPublished"
    published = "published"


class GrantType(str, Enum):

    authorization_code = "authorizationCode"
    implicit = "implicit"
    resource_owner_password = "resourceOwnerPassword"
    client_credentials = "clientCredentials"


class AuthorizationMethod(str, Enum):

    head = "HEAD"
    options = "OPTIONS"
    trace = "TRACE"
    get = "GET"
    post = "POST"
    put = "PUT"
    patch = "PATCH"
    delete = "DELETE"


class ClientAuthenticationMethod(str, Enum):

    basic = "Basic"
    body = "Body"


class BearerTokenSendingMethod(str, Enum):

    authorization_header = "authorizationHeader"
    query = "query"


class BackendProtocol(str, Enum):

    http = "http"
    soap = "soap"


class HostnameType(str, Enum):

    proxy = "Proxy"
    portal = "Portal"
    management = "Management"
    scm = "Scm"


class SkuType(str, Enum):

    developer = "Developer"
    standard = "Standard"
    premium = "Premium"
    basic = "Basic"


class VirtualNetworkType(str, Enum):

    none = "None"
    external = "External"
    internal = "Internal"


class NameAvailabilityReason(str, Enum):

    valid = "Valid"
    invalid = "Invalid"
    already_exists = "AlreadyExists"


class GroupType(str, Enum):

    custom = "custom"
    system = "system"
    external = "external"


class Confirmation(str, Enum):

    signup = "signup"
    invite = "invite"


class UserState(str, Enum):

    active = "active"
    blocked = "blocked"
    pending = "pending"
    deleted = "deleted"


class IdentityProviderType(str, Enum):

    facebook = "facebook"
    google = "google"
    microsoft = "microsoft"
    twitter = "twitter"
    aad = "aad"
    aad_b2_c = "aadB2C"


class ConnectivityStatusType(str, Enum):

    initializing = "initializing"
    success = "success"
    failure = "failure"


class SubscriptionState(str, Enum):

    suspended = "suspended"
    active = "active"
    expired = "expired"
    submitted = "submitted"
    rejected = "rejected"
    cancelled = "cancelled"


class AsyncOperationStatus(str, Enum):

    started = "Started"
    in_progress = "InProgress"
    succeeded = "Succeeded"
    failed = "Failed"


class KeyType(str, Enum):

    primary = "primary"
    secondary = "secondary"


class VersioningScheme(str, Enum):

    segment = "Segment"
    query = "Query"
    header = "Header"


class TemplateName(str, Enum):

    application_approved_notification_message = "applicationApprovedNotificationMessage"
    account_closed_developer = "accountClosedDeveloper"
    quota_limit_approaching_developer_notification_message = "quotaLimitApproachingDeveloperNotificationMessage"
    new_developer_notification_message = "newDeveloperNotificationMessage"
    email_change_identity_default = "emailChangeIdentityDefault"
    invite_user_notification_message = "inviteUserNotificationMessage"
    new_comment_notification_message = "newCommentNotificationMessage"
    confirm_sign_up_identity_default = "confirmSignUpIdentityDefault"
    new_issue_notification_message = "newIssueNotificationMessage"
    purchase_developer_notification_message = "purchaseDeveloperNotificationMessage"
    password_reset_identity_default = "passwordResetIdentityDefault"
    password_reset_by_admin_notification_message = "passwordResetByAdminNotificationMessage"
    reject_developer_notification_message = "rejectDeveloperNotificationMessage"
    request_developer_notification_message = "requestDeveloperNotificationMessage"


class NotificationName(str, Enum):

    request_publisher_notification_message = "RequestPublisherNotificationMessage"
    purchase_publisher_notification_message = "PurchasePublisherNotificationMessage"
    new_application_notification_message = "NewApplicationNotificationMessage"
    bcc = "BCC"
    new_issue_publisher_notification_message = "NewIssuePublisherNotificationMessage"
    account_closed_publisher = "AccountClosedPublisher"
    quota_limit_approaching_publisher_notification_message = "QuotaLimitApproachingPublisherNotificationMessage"


class PolicyScopeContract(str, Enum):

    tenant = "Tenant"
    product = "Product"
    api = "Api"
    operation = "Operation"
    all = "All"


class ExportFormat(str, Enum):

    swagger = "swagger-link"
    wsdl = "wsdl-link"
    wadl = "wadl-link"
