# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class ServerEndpointHealth(Model):
    """ServerEndpoint Health object.

    :param download_health: Download Health Status. Possible values include:
     'Healthy', 'Error', 'SyncBlockedForRestore',
     'SyncBlockedForChangeDetectionPostRestore', 'NoActivity'
    :type download_health: str or ~azure.mgmt.storagesync.models.enum
    :param upload_health: Upload Health Status. Possible values include:
     'Healthy', 'Error', 'SyncBlockedForRestore',
     'SyncBlockedForChangeDetectionPostRestore', 'NoActivity'
    :type upload_health: str or ~azure.mgmt.storagesync.models.enum
    :param combined_health: Combined Health Status. Possible values include:
     'Healthy', 'Error', 'SyncBlockedForRestore',
     'SyncBlockedForChangeDetectionPostRestore', 'NoActivity'
    :type combined_health: str or ~azure.mgmt.storagesync.models.enum
    :param last_updated_timestamp: Last Updated Timestamp
    :type last_updated_timestamp: datetime
    :param upload_status: Upload Status
    :type upload_status: ~azure.mgmt.storagesync.models.SyncSessionStatus
    :param download_status: Download Status
    :type download_status: ~azure.mgmt.storagesync.models.SyncSessionStatus
    :param current_progress: Current progress
    :type current_progress: ~azure.mgmt.storagesync.models.SyncProgressStatus
    :param offline_data_transfer_status: Offline Data Transfer State. Possible
     values include: 'InProgress', 'Stopping', 'NotRunning', 'Complete'
    :type offline_data_transfer_status: str or
     ~azure.mgmt.storagesync.models.enum
    """

    _attribute_map = {
        'download_health': {'key': 'downloadHealth', 'type': 'str'},
        'upload_health': {'key': 'uploadHealth', 'type': 'str'},
        'combined_health': {'key': 'combinedHealth', 'type': 'str'},
        'last_updated_timestamp': {'key': 'lastUpdatedTimestamp', 'type': 'iso-8601'},
        'upload_status': {'key': 'uploadStatus', 'type': 'SyncSessionStatus'},
        'download_status': {'key': 'downloadStatus', 'type': 'SyncSessionStatus'},
        'current_progress': {'key': 'currentProgress', 'type': 'SyncProgressStatus'},
        'offline_data_transfer_status': {'key': 'offlineDataTransferStatus', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ServerEndpointHealth, self).__init__(**kwargs)
        self.download_health = kwargs.get('download_health', None)
        self.upload_health = kwargs.get('upload_health', None)
        self.combined_health = kwargs.get('combined_health', None)
        self.last_updated_timestamp = kwargs.get('last_updated_timestamp', None)
        self.upload_status = kwargs.get('upload_status', None)
        self.download_status = kwargs.get('download_status', None)
        self.current_progress = kwargs.get('current_progress', None)
        self.offline_data_transfer_status = kwargs.get('offline_data_transfer_status', None)
