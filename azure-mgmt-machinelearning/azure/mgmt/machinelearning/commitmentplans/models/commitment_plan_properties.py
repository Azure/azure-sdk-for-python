# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class CommitmentPlanProperties(Model):
    """Properties of an Azure ML commitment plan.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar charge_for_overage: Indicates whether usage beyond the commitment
     plan's included quantities will be charged.
    :vartype charge_for_overage: bool
    :ivar charge_for_plan: Indicates whether the commitment plan will incur a
     charge.
    :vartype charge_for_plan: bool
    :ivar creation_date: The date at which this commitment plan was created,
     in ISO 8601 format.
    :vartype creation_date: datetime
    :ivar included_quantities: The included resource quantities this plan
     gives you.
    :vartype included_quantities: dict
    :ivar max_association_limit: The maximum number of commitment associations
     that can be children of this commitment plan.
    :vartype max_association_limit: int
    :ivar max_capacity_limit: The maximum scale-out capacity for this
     commitment plan.
    :vartype max_capacity_limit: int
    :ivar min_capacity_limit: The minimum scale-out capacity for this
     commitment plan.
    :vartype min_capacity_limit: int
    :ivar plan_meter: The Azure meter which will be used to charge for this
     commitment plan.
    :vartype plan_meter: str
    :ivar refill_frequency_in_days: The frequency at which this commitment
     plan's included quantities are refilled.
    :vartype refill_frequency_in_days: int
    :ivar suspend_plan_on_overage: Indicates whether this commitment plan will
     be moved into a suspended state if usage goes beyond the commitment plan's
     included quantities.
    :vartype suspend_plan_on_overage: bool
    """

    _validation = {
        'charge_for_overage': {'readonly': True},
        'charge_for_plan': {'readonly': True},
        'creation_date': {'readonly': True},
        'included_quantities': {'readonly': True},
        'max_association_limit': {'readonly': True},
        'max_capacity_limit': {'readonly': True},
        'min_capacity_limit': {'readonly': True},
        'plan_meter': {'readonly': True},
        'refill_frequency_in_days': {'readonly': True},
        'suspend_plan_on_overage': {'readonly': True},
    }

    _attribute_map = {
        'charge_for_overage': {'key': 'chargeForOverage', 'type': 'bool'},
        'charge_for_plan': {'key': 'chargeForPlan', 'type': 'bool'},
        'creation_date': {'key': 'creationDate', 'type': 'iso-8601'},
        'included_quantities': {'key': 'includedQuantities', 'type': '{PlanQuantity}'},
        'max_association_limit': {'key': 'maxAssociationLimit', 'type': 'int'},
        'max_capacity_limit': {'key': 'maxCapacityLimit', 'type': 'int'},
        'min_capacity_limit': {'key': 'minCapacityLimit', 'type': 'int'},
        'plan_meter': {'key': 'planMeter', 'type': 'str'},
        'refill_frequency_in_days': {'key': 'refillFrequencyInDays', 'type': 'int'},
        'suspend_plan_on_overage': {'key': 'suspendPlanOnOverage', 'type': 'bool'},
    }

    def __init__(self):
        self.charge_for_overage = None
        self.charge_for_plan = None
        self.creation_date = None
        self.included_quantities = None
        self.max_association_limit = None
        self.max_capacity_limit = None
        self.min_capacity_limit = None
        self.plan_meter = None
        self.refill_frequency_in_days = None
        self.suspend_plan_on_overage = None
