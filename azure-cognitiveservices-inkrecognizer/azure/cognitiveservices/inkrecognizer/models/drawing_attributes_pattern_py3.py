# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class DrawingAttributesPattern(Model):
    """The properties to use when rendering ink.

    :param width: The width of the stylus used to draw the stroke
    :type width: float
    :param color: This shows the components of the color in rgba format
    :type color:
     ~azure.cognitiveservices.inkrecognizer.models.DrawingAttributesPatternColor
    :param height: The height of the stylus used to draw the stroke
    :type height: float
    :param fit_to_curve:  This indicates whether Bezier smoothing is used to
     render the stroke
    :type fit_to_curve: bool
    :param raster_op: Possible values include: 'noOperation', 'copyPen',
     'maskPen'
    :type raster_op: str or
     ~azure.cognitiveservices.inkrecognizer.models.RasterOp
    :param ignore_pressure:  This indicates whether the thickness of a
     rendered Stroke changes according the amount of pressure applied.
    :type ignore_pressure: bool
    :param tip: This specifies the tip to be used to draw a stroke. Possible
     values include: 'ellipse', 'rectangle'
    :type tip: str or ~azure.cognitiveservices.inkrecognizer.models.Tip
    """

    _attribute_map = {
        'width': {'key': 'width', 'type': 'float'},
        'color': {'key': 'color', 'type': 'DrawingAttributesPatternColor'},
        'height': {'key': 'height', 'type': 'float'},
        'fit_to_curve': {'key': 'fitToCurve', 'type': 'bool'},
        'raster_op': {'key': 'rasterOp', 'type': 'str'},
        'ignore_pressure': {'key': 'ignorePressure', 'type': 'bool'},
        'tip': {'key': 'tip', 'type': 'str'},
    }

    def __init__(self, *, width: float=None, color=None, height: float=None, fit_to_curve: bool=None, raster_op=None, ignore_pressure: bool=None, tip=None, **kwargs) -> None:
        super(DrawingAttributesPattern, self).__init__(**kwargs)
        self.width = width
        self.color = color
        self.height = height
        self.fit_to_curve = fit_to_curve
        self.raster_op = raster_op
        self.ignore_pressure = ignore_pressure
        self.tip = tip
