# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class AlternatePatternItem(Model):
    """AlternatePatternItem.

    All required parameters must be populated in order to send to Azure.

    :param category: Required. Possible values include: 'inkDrawing',
     'inkBullet', 'inkWord', 'unknown'
    :type category: str or ~azure.cognitiveservices.inkrecognizer.models.Leaf
    :param points: Array of point objects that represent points that are
     relevant to the type of recognition unit. For example, for leaf node of
     inkDrawing category that represents a triangle, points would include the
     x,y coordinates of the vertices of the recognized triangle. The points
     represent the coordinates of points used to create the perfectly drawn
     shape that is closest to the original input. They may not exactly match.
    :type points:
     list[~azure.cognitiveservices.inkrecognizer.models.PointDetailsPattern]
    :param rotation_angle: The angular orientation of an object relative to
     the horizontal axis
    :type rotation_angle: float
    :param confidence: A number between 0 and 1 which indicates the confidence
     level in the result
    :type confidence: float
    :param recognized_string: Required. The recognized string from an inkWord
     or the name of a recognized shape in an inkDrawing object
    :type recognized_string: str
    """

    _validation = {
        'category': {'required': True},
        'recognized_string': {'required': True},
    }

    _attribute_map = {
        'category': {'key': 'category', 'type': 'str'},
        'points': {'key': 'points', 'type': '[PointDetailsPattern]'},
        'rotation_angle': {'key': 'rotationAngle', 'type': 'float'},
        'confidence': {'key': 'confidence', 'type': 'float'},
        'recognized_string': {'key': 'recognizedString', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AlternatePatternItem, self).__init__(**kwargs)
        self.category = kwargs.get('category', None)
        self.points = kwargs.get('points', None)
        self.rotation_angle = kwargs.get('rotation_angle', None)
        self.confidence = kwargs.get('confidence', None)
        self.recognized_string = kwargs.get('recognized_string', None)
