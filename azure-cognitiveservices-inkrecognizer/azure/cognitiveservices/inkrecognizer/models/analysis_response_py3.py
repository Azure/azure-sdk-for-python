# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class AnalysisResponse(Model):
    """This shows the expected contents of a response from the service.

    All required parameters must be populated in order to send to Azure.

    :param unit: This represents the physical units of the ink strokes. It is
     up to the application developer to decide how to convert the device
     specific units to physical units before calling the service. The
     conversion factor can be different based on the type of the device used.
     Possible values include: 'mm', 'cm', 'in'
    :type unit: str or ~azure.cognitiveservices.inkrecognizer.models.Unit
    :param unit_multiple:  This is a scaling factor to be applied to the point
     coordinates when interpreting them in the physical units specified.
    :type unit_multiple: float
    :param language: This is the language used for recognizing handwriting
     from the ink strokes in the request. Set this to the userâ€™s preferred
     language.
    :type language: str
    :param recognition_units: Required.
    :type recognition_units:
     list[~azure.cognitiveservices.inkrecognizer.models.RecognitionUnitItem]
    """

    _validation = {
        'recognition_units': {'required': True},
    }

    _attribute_map = {
        'unit': {'key': 'unit', 'type': 'str'},
        'unit_multiple': {'key': 'unitMultiple', 'type': 'float'},
        'language': {'key': 'language', 'type': 'str'},
        'recognition_units': {'key': 'recognitionUnits', 'type': '[RecognitionUnitItem]'},
    }

    def __init__(self, *, recognition_units, unit=None, unit_multiple: float=None, language: str=None, **kwargs) -> None:
        super(AnalysisResponse, self).__init__(**kwargs)
        self.unit = unit
        self.unit_multiple = unit_multiple
        self.language = language
        self.recognition_units = recognition_units
