# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class RecognitionUnitItem(Model):
    """This represents the recognized entity.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. The identifier of the recognition unit. This id is
     used to indicate parent/child relationship between different recognition
     units.
    :type id: int
    :param category: Required. Possible values include: 'writingRegion',
     'paragraph', 'listItem', 'line', 'inkBullet', 'inkDrawing', 'inkWord',
     'unknown'
    :type category: str or
     ~azure.cognitiveservices.inkrecognizer.models.Category
    :param alternates:
    :type alternates:
     list[~azure.cognitiveservices.inkrecognizer.models.AlternatePatternItem]
    :param center: The coordinates (x,y) of the center of the recognition
     unit.
    :type center:
     ~azure.cognitiveservices.inkrecognizer.models.PointDetailsPattern
    :param points: Array of point objects that represent points that are
     relevant to the type of recognition unit. For example, for a leaf node of
     inkDrawing category that represents a triangle, points would include the
     x, y coordinates of the vertices of the recognized triangle. The points
     represent the coordinates used to create the perfectly drawn shape that is
     closest to the original input. They may not exactly match.
    :type points:
     list[~azure.cognitiveservices.inkrecognizer.models.PointDetailsPattern]
    :param child_ids: An array of integers representing the identifier of each
     child of the current recognition unit.
    :type child_ids: list[int]
    :param class_property: Required. Possible values include: 'container',
     'leaf'
    :type class_property: str or
     ~azure.cognitiveservices.inkrecognizer.models.enum
    :param parent_id: Required. The id of the parent node in the tree
     structure of the recognition results. parent = 0 indicates that there is
     no dedicated parent node for this unit.
    :type parent_id: int
    :param bounding_rectangle: The bounding rectangle of the recognized unit
     represented by the coordinates of the top left corner (x,y) along with
     width (w) and height (h) of the rectangle. Note that this rectangle is not
     rotated. So for  rotated objects such as slanted handwriting, it will
     cover the entire object. The unit will be matched to the one specified in
     the original request (mm by default.)
    :type bounding_rectangle:
     ~azure.cognitiveservices.inkrecognizer.models.RecognitionUnitItemBoundingRectangle
    :param rotated_bounding_rectangle: This property provides the rotated
     bounding rectangle that covers the entire recognized object along the
     angle of rotation of the object. Note that this is NOT the same as
     rotating the boundingRectangle by the rotation angle.
    :type rotated_bounding_rectangle:
     list[~azure.cognitiveservices.inkrecognizer.models.PointDetailsPattern]
    :param stroke_ids: Required. This is an array of integers representing the
     list of stroke Identifier integers from the input request body that belong
     to this recognition unit.
    :type stroke_ids: list[int]
    :param recognized_text: The string represents the text that was
     recognized. It can be an empty string if the recognizer cannot determine
     the text.
    :type recognized_text: str
    :param confidence: The class represents the type of the recognition unit.
     A recognition unit can be a leaf node or a container node. Container nodes
     typically have leaf nodes as children.
    :type confidence: float
    :param rotation_angle: This represents the angle at which the unit is
     rotated in degrees with respect to the positive X axis.
    :type rotation_angle: float
    :param recognized_object: Possible values include: 'drawing', 'square',
     'rectangle', 'circle', 'ellipse', 'triangle', 'isoscelesTriangle',
     'equilateralTriangle', 'rightTriangle', 'quadrilateral', 'diamond',
     'trapezoid', 'parallelogram', 'pentagon', 'hexagon', 'blockArrow',
     'heart', 'starSimple', 'starCrossed', 'cloud', 'line', 'curve', 'polyLine'
    :type recognized_object: str or
     ~azure.cognitiveservices.inkrecognizer.models.Shape
    """

    _validation = {
        'id': {'required': True},
        'category': {'required': True},
        'class_property': {'required': True},
        'parent_id': {'required': True},
        'stroke_ids': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'int'},
        'category': {'key': 'category', 'type': 'str'},
        'alternates': {'key': 'alternates', 'type': '[AlternatePatternItem]'},
        'center': {'key': 'center', 'type': 'PointDetailsPattern'},
        'points': {'key': 'points', 'type': '[PointDetailsPattern]'},
        'child_ids': {'key': 'childIds', 'type': '[int]'},
        'class_property': {'key': 'class', 'type': 'str'},
        'parent_id': {'key': 'parentId', 'type': 'int'},
        'bounding_rectangle': {'key': 'boundingRectangle', 'type': 'RecognitionUnitItemBoundingRectangle'},
        'rotated_bounding_rectangle': {'key': 'rotatedBoundingRectangle', 'type': '[PointDetailsPattern]'},
        'stroke_ids': {'key': 'strokeIds', 'type': '[int]'},
        'recognized_text': {'key': 'recognizedText', 'type': 'str'},
        'confidence': {'key': 'confidence', 'type': 'float'},
        'rotation_angle': {'key': 'rotationAngle', 'type': 'float'},
        'recognized_object': {'key': 'recognizedObject', 'type': 'str'},
    }

    def __init__(self, *, id: int, category, class_property, parent_id: int, stroke_ids, alternates=None, center=None, points=None, child_ids=None, bounding_rectangle=None, rotated_bounding_rectangle=None, recognized_text: str=None, confidence: float=None, rotation_angle: float=None, recognized_object=None, **kwargs) -> None:
        super(RecognitionUnitItem, self).__init__(**kwargs)
        self.id = id
        self.category = category
        self.alternates = alternates
        self.center = center
        self.points = points
        self.child_ids = child_ids
        self.class_property = class_property
        self.parent_id = parent_id
        self.bounding_rectangle = bounding_rectangle
        self.rotated_bounding_rectangle = rotated_bounding_rectangle
        self.stroke_ids = stroke_ids
        self.recognized_text = recognized_text
        self.confidence = confidence
        self.rotation_angle = rotation_angle
        self.recognized_object = recognized_object
